{"id": "61ba5052-9ce9-4632-b9d4-36dedd487dd4", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-space bounds for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X + eps) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log and normalize\n    logs = np.log(X + _eps)                    # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE     # (N,4)\n    N, F = z.shape  # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append((z[:, i] * z[:, j])[:, None])\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    # clip for numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    No penalty on intercept \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)            # (N,15)\n    y_log = np.log(y + _eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    if cond > cond_thresh:\n        scale = cond / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # solve reliably\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "02c4a8e6-f7f8-4712-81b2-e944cbca4c83", "generation": 4, "timestamp": 1754805435.6185017, "iteration_found": 192, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 33.36786601845394, "nmae": 7.586566427682384, "r2": -32.36786601845394, "combined_score": 0.029096947697103064}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 33.3679\n- nmae: 7.5866\n- r2: -32.3679\n- combined_score: 0.0291\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2375, nmae: 3.1862, r2: -7.2375, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2369, nmae: 3.1861, r2: -7.2369, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from the problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z_i for i in 0..3,\n       z_i^2 for i in 0..3,\n       z_i * z_j for 0<=i<j<4]\n    Returns A of shape (N, 1+4+4+6 = 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    logs = np.log(X + eps)                  # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z**2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    if cond > cond_thresh:\n        scale = cond / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # Solve reliably\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    # compute log and normalize to roughly [-1,1]\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N = X.shape[0]\n\n    # build feature columns\n    cols = [np.ones((N, 1), dtype=np.float64)]    # intercept\n    cols.append(z)                                 # linear terms\n    cols.append(z**2)                              # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(4):\n        for j in range(i+1, 4):\n            term = (z[:, i] * z[:, j])[:, None]\n            inters.append(term)\n    if inters:\n        cols.append(np.hstack(inters))             # shape (N,6)\n\n    # concatenate into design matrix of shape (N,15)\n    A = np.hstack(cols)\n    return A\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n    where \u03bb = \u03bb_factor * (trace(A\u1d40A) / P). No penalty on intercept.\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                  # (15,15)\n    P = ATA.shape[0]                  # 15\n    # Adaptive ridge: scale lambda by average diagonal entry\n    lambda_factor = 1e-5\n    lam = lambda_factor * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2369), Performs well on nmae (3.1861), Performs well on r2 (-7.2369), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010space bounds for normalization\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010space.\n    For each sample x = [lr, bsz, data_size, non_embed_params],\n    we compute z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE,\n    and then features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix expects shape (N,4), got {X.shape}\")\n\n    # safe log and normalize\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE     # (N,4)\n    N, F = z.shape  # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append((z[:, i] * z[:, j])[:, None])\n\n    A = np.hstack(cols)  # (N,15)\n    return A\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      params:      array\u2010like, length 15\n    Output:\n      preds:       ndarray, shape (N,) of predicted losses\n    \"\"\"\n    A = _build_design_matrix(data_points)       # (N,15)\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    # clip for numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares on log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2, no penalty on \u03b80.\n    Inputs:\n      data_points:  array\u2010like, shape (N,4)\n      loss_values:  array\u2010like, shape (N,)\n      ridge_lambda: regularization strength (default 1e-3)\n    Returns:\n      theta_opt:    ndarray, shape (15,) of optimized parameters\n    \"\"\"\n    A = _build_design_matrix(data_points)       # (N,15)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if A.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have the same length\")\n\n    # log\u2010transform losses\n    y_log = np.log(y + _eps)\n\n    P = A.shape[1]  # number of features (15)\n    # ridge regularization matrix, no penalty on intercept\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for ill\u2010conditioned systems\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2375), Performs well on nmae (3.1862), Performs well on r2 (-7.2375), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for each feature in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features: [1, z_i, z_i^2, z_i * z_j for i<j]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z**2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010space:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A     = _build_design_matrix(X)         # shape (N,15)\n    eps   = 1e-12\n    y_log = np.log(y + eps)                 # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                        # shape (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-6 * np.trace(ATA) / P          # scale \u03bb by data scale\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                          # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # normalize ~[-1,1]\n    N, F = z.shape\n\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)    # (N,15)\n    log_pred = A.dot(theta)        # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (no penalty on intercept \u03b80)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      loss_values: array\u2010like of shape (N,)\n      ridge_lambda: float multiplier for adaptive regularization\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)               # (15,15)\n    P   = ATA.shape[0]\n    lam = ridge_lambda * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from the problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z_i for i in 0..3,\n       z_i^2 for i in 0..3,\n       z_i * z_j for 0<=i<j<4]\n    Returns A of shape (N, 1+4+4+6 = 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    logs = np.log(X + eps)                  # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z**2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    if cond > cond_thresh:\n        scale = cond / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # Solve reliably\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # normalize ~[-1,1]\n    N, F = z.shape\n\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)    # (N,15)\n    log_pred = A.dot(theta)        # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (no penalty on intercept \u03b80)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      loss_values: array\u2010like of shape (N,)\n      ridge_lambda: float multiplier for adaptive regularization\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)               # (15,15)\n    P   = ATA.shape[0]\n    lam = ridge_lambda * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 4 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    # compute log and normalize to roughly [-1,1]\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N = X.shape[0]\n\n    # build feature columns\n    cols = [np.ones((N, 1), dtype=np.float64)]    # intercept\n    cols.append(z)                                 # linear terms\n    cols.append(z**2)                              # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(4):\n        for j in range(i+1, 4):\n            term = (z[:, i] * z[:, j])[:, None]\n            inters.append(term)\n    if inters:\n        cols.append(np.hstack(inters))             # shape (N,6)\n\n    # concatenate into design matrix of shape (N,15)\n    A = np.hstack(cols)\n    return A\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n    where \u03bb = \u03bb_factor * (trace(A\u1d40A) / P). No penalty on intercept.\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                  # (15,15)\n    P = ATA.shape[0]                  # 15\n    # Adaptive ridge: scale lambda by average diagonal entry\n    lambda_factor = 1e-5\n    lam = lambda_factor * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.237), Excellent nmae (3.186)\n\n\n### Inspiration 5 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    # unpack parameters\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # small offset to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # build the log\u2010power\u2010law term\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(Np)\n    )\n    # return with additive bias\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law + bias model:\n      loss \u2248 b + exp(logA) * \u220f x_i^{e_i}\n\n    Fitting procedure:\n      1) Closed\u2010form log\u2010linear regression (no bias) to initialize [logA, e_i]\n      2) Initialize bias b=0\n      3) Refine all 6 parameters via L-BFGS-B minimizing MSE in original loss\u2010space\n    Returns optimized params [b, logA, e_lr, e_bsz, e_data, e_model].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # small constant for logs\n    eps = 1e-12\n\n    # 1) closed\u2010form log\u2010linear regression (ignoring bias b)\n    #    log(y) \u2243 logA + e_lr*log(lr) + e_bsz*log(bsz) + e_data*log(data) + e_model*log(params)\n    Z = np.log(X + eps)                     # shape (N,4)\n    A_design = np.column_stack([np.ones(len(y)), Z])  # shape (N,5)\n    y_log = np.log(y + eps)                 # shape (N,)\n    theta_ls, *_ = np.linalg.lstsq(A_design, y_log, rcond=None)\n    # theta_ls = [logA_init, e_lr_init, e_bsz_init, e_data_init, e_model_init]\n\n    # 2) build initial parameter vector\n    init_params = np.zeros(6, dtype=np.float64)\n    init_params[0] = 0.0            # bias b\n    init_params[1] = theta_ls[0]    # logA\n    init_params[2:] = theta_ls[1:]  # [e_lr, e_bsz, e_data, e_model]\n\n    # 3) bounds for stability\n    #    b >= 0, logA unbounded, exponents in reasonable range\n    bounds = [\n        (0.0, None),    # b >= 0\n        (None, None),   # logA free\n        (-5.0, 5.0),    # e_lr\n        (-5.0, 5.0),    # e_bsz\n        (-5.0, 5.0),    # e_data\n        (-5.0, 5.0)     # e_model\n    ]\n\n    # 4) objective: mean squared error on original loss\n    def _mse_obj(params_vec):\n        preds = scaling_law_func(X, params_vec)\n        return np.mean((preds - y) ** 2)\n\n    # 5) refine via L-BFGS-B\n    result = minimize(\n        _mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # return optimized if successful, else fallback\n    if result.success and result.x.shape == init_params.shape:\n        return result.x\n    else:\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-space bounds for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X + eps) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log and normalize\n    logs = np.log(X + _eps)                    # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE     # (N,4)\n    N, F = z.shape  # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append((z[:, i] * z[:, j])[:, None])\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    # clip for numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    No penalty on intercept \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)            # (N,15)\n    y_log = np.log(y + _eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    if cond > cond_thresh:\n        scale = cond / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # solve reliably\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}