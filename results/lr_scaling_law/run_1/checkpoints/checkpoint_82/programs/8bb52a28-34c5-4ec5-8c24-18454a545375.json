{"id": "8bb52a28-34c5-4ec5-8c24-18454a545375", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(lr)*ln(bsz)]\n                 + w10\u00b7[ln(data_size)*ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 11: [w0, w1, ..., w10]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 11:\n        raise ValueError(f\"params must have length 11, got {p.size}\")\n\n    # Safe log\u2010transform (avoid log(0))\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)   # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embedding_param_size)\n\n    # Design matrix Z: N\u00d711\n    Z = np.column_stack([\n        np.ones_like(x1),   # intercept\n        x1, x1**2,          # lr terms\n        x2, x2**2,          # bsz terms\n        x3, x3**2,          # data_size terms\n        x4, x4**2,          # model size terms\n        x1 * x2,            # lr \u00d7 bsz interaction\n        x3 * x4             # data_size \u00d7 model size interaction\n    ])  # shape = (N,11)\n\n    ln_pred = Z.dot(p)       # shape = (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law via ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010space features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 11 of fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform inputs and targets\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    lnX = np.log(X_clipped)  # shape (N,4)\n    lnY = np.log(y_clipped)  # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z: N\u00d711\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])  # shape = (N,11)\n\n    # Ridge regularization (no penalty on intercept)\n    lambd = 1e-4\n    P = Z.shape[1]\n    # Normal equations: (Z^T Z + \u039b) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # add \u03bb to diagonal entries except for intercept term\n    reg = np.zeros(P, dtype=np.float64)\n    reg[1:] = lambd\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape = (11,)\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1e572a58-a0e9-4e1c-82f1-289093c6a00b", "generation": 3, "timestamp": 1754799787.1538675, "iteration_found": 82, "metrics": {"nmse": 6.916441789505186, "nmae": 3.309884989891167, "r2": -5.916441789505186, "combined_score": 0.12631937764333698}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 180.65794597662702, "nmae": 18.175710750771902, "r2": -179.65794597662702, "combined_score": 0.005504851409740506}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 180.6579\n- nmae: 18.1757\n- r2: -179.6579\n- combined_score: 0.0055\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 6.4625, nmae: 2.8937, r2: -5.4625, combined_score: 0.1340\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.3497, nmae: 1.8601, r2: -2.3497, combined_score: 0.2299\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 2.9293, nmae: 1.9956, r2: -1.9293, combined_score: 0.2545\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.8125)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an expanded polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(lr) * ln(bsz)]\n                 + w10\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 11: [w0, w1, ..., w10]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 11:\n        raise ValueError(f\"params must have length 11, got {p.size}\")\n\n    # Safe log\u2010transform to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)    # shape (N,4)\n    x1 = lnX[:, 0]             # ln(lr)\n    x2 = lnX[:, 1]             # ln(bsz)\n    x3 = lnX[:, 2]             # ln(data_size)\n    x4 = lnX[:, 3]             # ln(non_embedding_param_size)\n\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,          # lr terms\n        x2, x2**2,          # bsz terms\n        x3, x3**2,          # data_size terms\n        x4, x4**2,          # model size terms\n        x1 * x2,            # lr \u00d7 bsz interaction\n        x3 * x4             # data_size \u00d7 model size interaction\n    ])  # shape (N,11)\n\n    ln_pred = Z.dot(p)        # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial\u2010in\u2010log scaling law via ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 11: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    lnX = np.log(X_clipped)  # shape (N,4)\n    lnY = np.log(y_clipped)  # shape (N,)\n\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embedding_param_size)\n\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])  # shape (N,11)\n\n    # Ridge regularization for numerical stability\n    lambd = 1e-4\n    M = Z.T.dot(Z)\n    # add \u03bb to diagonal\n    diag_idx = np.diag_indices_from(M)\n    M[diag_idx] += lambd\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (11,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (2.9293), Performs well on nmae (1.9956), Performs well on r2 (-1.9293), Performs well on combined_score (0.2545)\n\n\n### Program 2 (Score: 0.7725)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial-in-log-space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log-transform (avoid log(0))\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # shape (N,4)\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710):\n    # features: [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4]\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial-in-log-space scaling law by ridge regression in log-space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log-features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log-transform (avoid log(0))\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))    # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))    # shape (N,)\n\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization for stability\n    num_feats = Z.shape[1]\n    lambd = 1e-4\n    A = Z.T.dot(Z) + lambd * np.eye(num_feats)\n    b = Z.T.dot(lnY)\n\n    # Solve for weights in log-space\n    w = np.linalg.solve(A, b)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.3497), Performs well on nmae (1.8601), Performs well on r2 (-2.3497), Performs well on combined_score (0.2299)\n\n\n### Program 3 (Score: 1.0069)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nReduced-parameter polynomial log-space scaling law:\n  ln(loss) \u2248 w0\n             + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n             + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n             + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n             + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n             + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n\u21d2 10 parameters total.\nWe fit via closed-form ridge regression in log-space, omitting regularization on the intercept.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 10\n    Returns:\n      preds:       array of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log-transform\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)\n    x1 = lnX[:, 0]   # ln(lr)\n    x2 = lnX[:, 1]   # ln(bsz)\n    x3 = lnX[:, 2]   # ln(data_size)\n    x4 = lnX[:, 3]   # ln(non_embedding_param_size)\n\n    # Design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape = (N,10)\n\n    # Compute ln(pred) and return exp\n    ln_pred = Z.dot(p)    # shape = (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter polynomial log-space scaling law via ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      array of shape (10,) of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(f\"Number of data_points ({X.shape[0]}) and loss_values ({y.size}) must match\")\n\n    # Safe log-transform inputs and targets\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    lnX = np.log(X_clipped)\n    lnY = np.log(y_clipped)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N  = X.shape[0]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape = (N,10)\n\n    # Ridge regularization strength\n    lambd = 1e-6\n    P = Z.shape[1]\n\n    # Normal equations: (Z^T Z + \u039b) w = Z^T lnY\n    # No regularization on intercept term\n    M = Z.T.dot(Z)\n    reg = lambd * np.ones(P, dtype=np.float64)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape = (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.4625), Performs well on nmae (2.8937), Performs well on r2 (-5.4625), Performs well on combined_score (0.1340)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.1091)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with:\n  - second\u2010order terms for lr and bsz (to capture U\u2010shaped effects),\n  - squared terms for data_size and non\u2010embedding param size (to capture diminishing returns),\n  - interaction terms lr\u00d7bsz and data_size\u00d7param_size (to capture coupling).\nThis remains parameter\u2010efficient and numerically stable via ridge regression.\n\nFeatures (in log\u2010space):\n    x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params)\nZ = [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x1*x2, x3*x4]\n\nln(loss) \u2248 Z \u00b7 w    \u21d2    loss \u2248 exp(Z\u00b7w)\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the expanded polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 11 (or 2D array of shape (T,11)) for coefficients w\n    Returns:\n      preds:       array of shape (N,) (or (N,T) if params is 2D) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Clip and log-transform inputs\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])\n    # Prepare parameter array\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != Z.shape[1]:\n        raise ValueError(f\"params must have length {Z.shape[1]}, got {P}\")\n    # Compute log-predictions and exponentiate\n    lnY = Z.dot(p.T)         # shape (N, T)\n    Y   = np.exp(lnY)\n    # If single parameter set, return 1D array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial scaling law via ridge regression in log-space.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 11 of fitted coefficients w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    # Clip and log-transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])\n    # Ridge regularization (no penalty on intercept)\n    lambd = 1e-4\n    P = Z.shape[1]\n    M = Z.T.dot(Z)\n    reg = lambd * np.ones(P)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n    # Solve normal equations\n    w = np.linalg.solve(M, v)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0069)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training scenarios.\n\nModel in log\u2010space:\n    Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n    We fit a second\u2010order polynomial plus a key interaction term:\n      ln(loss) \u2248 w0\n               + w1\u00b7x1 + w2\u00b7x1^2\n               + w3\u00b7x2 + w4\u00b7x2^2\n               + w5\u00b7x3 + w6\u00b7x3^2\n               + w7\u00b7x4 + w8\u00b7x4^2\n               + w9\u00b7(x3 * x4)\n    loss = exp(ln(loss))\n\nThis captures U\u2010shaped lr/bsz effects, diminishing returns for data & params,\nand the coupling between data size and model size.\nFitting is done by ridge\u2010regularized least squares in log\u2010space,\nwith no penalty on the intercept for numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the enhanced polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10: [w0, w1, ..., w9]\n\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embed_param_size)\n\n    # design matrix Z: N\u00d710\n    Z = np.column_stack([\n        np.ones_like(x1),  # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge\u2010regularized\n    linear regression in log\u2010space:\n\n      ln(loss) \u2248 Z \u00b7 w,\n\n    where Z is built as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n    lnY = np.log(np.clip(y, eps, None))  # (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N = X.shape[0]\n\n    # build design matrix Z: N\u00d710\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    lambd = 1e-6\n    P = Z.shape[1]\n    M = Z.T.dot(Z)\n    # add \u03bb to all diagonal except intercept (index 0)\n    diag = np.arange(P)\n    for i in diag[1:]:\n        M[i, i] += lambd\n    v = Z.T.dot(lnY)\n\n    # solve normal equations\n    w = np.linalg.solve(M, v)  # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8125, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an expanded polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(lr) * ln(bsz)]\n                 + w10\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 11: [w0, w1, ..., w10]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 11:\n        raise ValueError(f\"params must have length 11, got {p.size}\")\n\n    # Safe log\u2010transform to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)    # shape (N,4)\n    x1 = lnX[:, 0]             # ln(lr)\n    x2 = lnX[:, 1]             # ln(bsz)\n    x3 = lnX[:, 2]             # ln(data_size)\n    x4 = lnX[:, 3]             # ln(non_embedding_param_size)\n\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,          # lr terms\n        x2, x2**2,          # bsz terms\n        x3, x3**2,          # data_size terms\n        x4, x4**2,          # model size terms\n        x1 * x2,            # lr \u00d7 bsz interaction\n        x3 * x4             # data_size \u00d7 model size interaction\n    ])  # shape (N,11)\n\n    ln_pred = Z.dot(p)        # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial\u2010in\u2010log scaling law via ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 11: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    lnX = np.log(X_clipped)  # shape (N,4)\n    lnY = np.log(y_clipped)  # shape (N,)\n\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embedding_param_size)\n\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])  # shape (N,11)\n\n    # Ridge regularization for numerical stability\n    lambd = 1e-4\n    M = Z.T.dot(Z)\n    # add \u03bb to diagonal\n    diag_idx = np.diag_indices_from(M)\n    M[diag_idx] += lambd\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (11,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.929), Excellent nmae (1.996)\n\n\n### Inspiration 2 (Score: 11.3484, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with:\n      - quadratic term in log(lr)\n      - interaction term between log(data_size) and log(non_embedding_param_size)\n\n    Model form in log-space:\n      ln(loss) = w0\n                + w1 * ln(lr)\n                + w2 * [ln(lr)]^2\n                + w3 * ln(bsz)\n                + w4 * ln(data_size)\n                + w5 * ln(non_embed_param_size)\n                + w6 * [ln(data_size) * ln(non_embed_param_size)]\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (7,) or (T,7)\n                   [w0, w1, w2, w3, w4, w5, w6]\n\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    # allow multiple parameter sets\n    if p.ndim == 1:\n        p = p.reshape(1, -1)\n    if p.shape[1] != 7:\n        raise ValueError(f\"params must have length 7, got {p.shape[1]}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    lr  = np.clip(X[:, 0], eps, None)\n    bsz = np.clip(X[:, 1], eps, None)\n    D   = np.clip(X[:, 2], eps, None)\n    M   = np.clip(X[:, 3], eps, None)\n\n    # log-transform\n    lrl  = np.log(lr)\n    lr2  = lrl * lrl\n    bszl = np.log(bsz)\n    Dl   = np.log(D)\n    Ml   = np.log(M)\n    # interaction\n    D_M_inter = Dl * Ml\n\n    # design matrix: [1, lrl, lrl^2, bszl, Dl, Ml, Dl*Ml]\n    Z = np.stack([\n        np.ones_like(lrl),\n        lrl,\n        lr2,\n        bszl,\n        Dl,\n        Ml,\n        D_M_inter\n    ], axis=1)  # shape (N,7)\n\n    # linear prediction in log-space\n    ln_pred = Z.dot(p.T)  # shape (N, T)\n    preds = np.exp(ln_pred)\n\n    # if single parameter set, return (N,) array\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear scaling law by ridge-regularized least squares:\n      ln(loss) \u2248 w0 + w1*ln(lr) + w2*[ln(lr)]^2\n                 + w3*ln(bsz) + w4*ln(data_size)\n                 + w5*ln(non_embed_param_size)\n                 + w6*[ln(data_size)*ln(non_embed_param_size)]\n\n    Returns fitted params [w0..w6].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # numerical safeguard\n    eps = 1e-12\n    lr  = np.clip(X[:, 0], eps, None)\n    bsz = np.clip(X[:, 1], eps, None)\n    D   = np.clip(X[:, 2], eps, None)\n    M   = np.clip(X[:, 3], eps, None)\n    y   = np.clip(y,    eps, None)\n\n    # log-transform\n    lrl  = np.log(lr)\n    lr2  = lrl * lrl\n    bszl = np.log(bsz)\n    Dl   = np.log(D)\n    Ml   = np.log(M)\n    lnY  = np.log(y)\n    # interaction\n    D_M_inter = Dl * Ml\n\n    # build design matrix Z: shape (N,7)\n    Z = np.stack([\n        np.ones_like(lrl),\n        lrl,\n        lr2,\n        bszl,\n        Dl,\n        Ml,\n        D_M_inter\n    ], axis=1)\n\n    # normal equations with ridge regularization\n    ATA = Z.T.dot(Z)                      # (7,7)\n    ATy = Z.T.dot(lnY)                    # (7,)\n    # scale regularization to feature magnitudes\n    ridge_factor = 1e-3 * np.mean(np.diag(ATA))\n    A_reg = ATA + ridge_factor * np.eye(7)\n\n    # solve for parameters\n    w = np.linalg.solve(A_reg, ATy)       # (7,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1070.796), Excellent nmae (44.393)\n\n\n### Inspiration 3 (Score: 8.1682, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning scenarios.\nWe extend the basic multiplicative power\u2010law with:\n  - a quadratic term in log(lr) to capture non\u2010monotonic LR effects,\n  - an interaction term between log(data_size) and log(non_embed_param_size)\nfor better modeling capacity while keeping parameter count low.\n\nModel form in log\u2010space:\n  log(loss) \u2248 w0\n            + w1 * log(lr)\n            + w2 * (log(lr))^2\n            + w3 * log(bsz)\n            + w4 * log(data_size)\n            + w5 * log(non_embed_param_size)\n            + w6 * log(data_size) * log(non_embed_param_size)\n\nWe fit via ridge\u2010regularized least squares in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using the enhanced log\u2010linear + interaction model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 7 (or shape (T,7) for T separate fits):\n                   [w0, w1, w2, w3, w4, w5, w6]\n    Returns:\n      preds:       array of shape (N,) (or (N,T) if params is 2D)\n                   of predicted lm loss values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(f\"params must have length 7, got {P}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)  # shape (N,4)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix A of shape (N,7)\n    # f0 = 1\n    # f1 = log(lr)\n    # f2 = (log(lr))^2\n    # f3 = log(bsz)\n    # f4 = log(data_size)\n    # f5 = log(param_size)\n    # f6 = log(data_size) * log(param_size)\n    N = X.shape[0]\n    A = np.empty((N, 7), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = lr\n    A[:, 2] = lr * lr\n    A[:, 3] = bsz\n    A[:, 4] = data_sz\n    A[:, 5] = param_sz\n    A[:, 6] = data_sz * param_sz\n\n    # compute log\u2010predictions: shape (N,T)\n    log_pred = A.dot(p.T)\n    # exponentiate to get loss\n    Y = np.exp(log_pred)\n\n    # if a single parameter vector, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law model by ridge\u2010regularized\n    least squares in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7:\n                   [w0, w1, w2, w3, w4, w5, w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    # log\u2010transform\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build design matrix A (N\u00d77)\n    N = X.shape[0]\n    A = np.empty((N, 7), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = lr\n    A[:, 2] = lr * lr\n    A[:, 3] = bsz\n    A[:, 4] = data_sz\n    A[:, 5] = param_sz\n    A[:, 6] = data_sz * param_sz\n\n    # solve ridge\u2010regularized normal equations\n    ATA = A.T.dot(A)                # shape (7,7)\n    ATy = A.T.dot(logy)             # shape (7,)\n    # adapt regularization scale to data\n    ridge_coeff = 1e-4 * np.mean(np.diag(ATA))\n    W = np.linalg.solve(ATA + ridge_coeff * np.eye(7), ATy)\n    return W\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (545.667), Excellent nmae (31.671)\n\n\n### Inspiration 4 (Score: 3.2231, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize_scalar\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an offset plus a second\u2010order power\u2010law in log(lr):\n      loss = L_inf + exp(w0 + w1*ln(lr) + w2*(ln(lr))^2\n                         + w3*ln(bsz) + w4*ln(data_size) + w5*ln(param_size))\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      (7,) array [L_inf, w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds:       (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {p.size}\")\n    # clip to avoid log(0)\n    eps = 1e-12\n    lr = np.clip(X[:,0], eps, None)\n    bsz = np.clip(X[:,1], eps, None)\n    data_sz = np.clip(X[:,2], eps, None)\n    param_sz = np.clip(X[:,3], eps, None)\n    # log\u2010features\n    x1 = np.log(lr)\n    x2 = np.log(bsz)\n    x3 = np.log(data_sz)\n    x4 = np.log(param_sz)\n    # design matrix Z: [1, x1, x1^2, x2, x3, x4]\n    Z = np.stack([np.ones_like(x1), x1, x1*x1, x2, x3, x4], axis=1)  # (N,6)\n    L_inf = p[0]\n    w = p[1:]  # length 6\n    # compute prediction\n    preds = L_inf + np.exp(Z.dot(w))\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above model by optimizing L_inf with closed\u2010form ridge on the log\u2010shifted target.\n    Returns params = [L_inf, w0, w1, w2, w3, w4, w5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"data_points must be (N,4) and loss_values length N\")\n    # clip to avoid log(0)\n    eps = 1e-12\n    lr = np.clip(X[:,0], eps, None)\n    bsz = np.clip(X[:,1], eps, None)\n    data_sz = np.clip(X[:,2], eps, None)\n    param_sz = np.clip(X[:,3], eps, None)\n    # log\u2010features\n    x1 = np.log(lr)\n    x2 = np.log(bsz)\n    x3 = np.log(data_sz)\n    x4 = np.log(param_sz)\n    # design matrix Z: [1, x1, x1^2, x2, x3, x4]\n    Z = np.stack([np.ones_like(x1), x1, x1*x1, x2, x3, x4], axis=1)  # (N,6)\n    # precompute for ridge solve\n    lambda_ridge = 1e-6\n    ZTZ = Z.T.dot(Z)\n    I6 = np.eye(ZTZ.shape[0], dtype=np.float64)\n    # bracket L_inf in [0, 0.9*min(y)]\n    y_min = np.min(y)\n    L_low, L_high = 0.0, y_min * 0.9\n\n    def mse_for_L(L):\n        # ensure positive target for log\n        diff = y - L\n        if np.any(diff <= 0.0):\n            return np.inf\n        lnY = np.log(diff)\n        # ridge regression: w = (Z^T Z + \u03bbI)^{-1} Z^T lnY\n        w = np.linalg.solve(ZTZ + lambda_ridge * I6, Z.T.dot(lnY))\n        y_pred = L + np.exp(Z.dot(w))\n        return np.mean((y_pred - y) ** 2)\n\n    # optimize L_inf scalar\n    res = minimize_scalar(\n        mse_for_L,\n        bounds=(L_low, L_high),\n        method='bounded',\n        options={'xatol': 1e-6}\n    )\n    L_opt = res.x if res.success else (y_min * 0.5)\n    # solve final w coefficients\n    diff_opt = np.clip(y - L_opt, eps, None)\n    lnY_opt = np.log(diff_opt)\n    w_opt = np.linalg.solve(ZTZ + lambda_ridge * I6, Z.T.dot(lnY_opt))\n    params = np.concatenate(([L_opt], w_opt))\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (78.030), Excellent nmae (11.880)\n\n\n### Inspiration 5 (Score: 1.0069, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nReduced-parameter polynomial log-space scaling law:\n  ln(loss) \u2248 w0\n             + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n             + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n             + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n             + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n             + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n\u21d2 10 parameters total.\nWe fit via closed-form ridge regression in log-space, omitting regularization on the intercept.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 10\n    Returns:\n      preds:       array of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log-transform\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)\n    x1 = lnX[:, 0]   # ln(lr)\n    x2 = lnX[:, 1]   # ln(bsz)\n    x3 = lnX[:, 2]   # ln(data_size)\n    x4 = lnX[:, 3]   # ln(non_embedding_param_size)\n\n    # Design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape = (N,10)\n\n    # Compute ln(pred) and return exp\n    ln_pred = Z.dot(p)    # shape = (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter polynomial log-space scaling law via ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      array of shape (10,) of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(f\"Number of data_points ({X.shape[0]}) and loss_values ({y.size}) must match\")\n\n    # Safe log-transform inputs and targets\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    lnX = np.log(X_clipped)\n    lnY = np.log(y_clipped)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N  = X.shape[0]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape = (N,10)\n\n    # Ridge regularization strength\n    lambd = 1e-6\n    P = Z.shape[1]\n\n    # Normal equations: (Z^T Z + \u039b) w = Z^T lnY\n    # No regularization on intercept term\n    M = Z.T.dot(Z)\n    reg = lambd * np.ones(P, dtype=np.float64)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape = (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.462), Excellent nmae (2.894)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law with offset.\n\n    Model form:\n      loss = L_inf + exp( w0\n                         + w1 * ln(lr)\n                         + w2 * (ln(lr))^2\n                         + w3 * ln(bsz)\n                         + w4 * (ln(bsz))^2\n                         + w5 * ln(data_size)\n                         + w6 * ln(non_embed_param_size)\n                         + w7 * ln(data_size)*ln(non_embed_param_size)\n                       )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 9, or shape (T,9) for T parameter\u2010sets:\n                   [L_inf, w0, w1, w2, w3, w4, w5, w6, w7]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    # allow broadcasting over multiple fits\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 9:\n        raise ValueError(f\"params must have length 9, got {P}\")\n\n    # split offset and log\u2010polynomial weights\n    L_inf = p[:, 0]    # shape (T,)\n    w     = p[:, 1:]   # shape (T,8)\n\n    # build log\u2010polynomial features Z of shape (N,8)\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(param_size)\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=np.float64)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # compute predictions: shape (N,T)\n    ln_term = Z.dot(w.T)               # (N,8) \u00b7 (8,T) => (N,T)\n    Y = np.exp(ln_term) + L_inf[None, :]  # broadcast offset\n\n    # if a single parameter\u2010set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9\u2010param model:\n      loss = L_inf + exp( Z \u00b7 w )\n    where Z are 8 log\u2010polynomial features as above.\n\n    Uses a two\u2010stage procedure:\n      1) initialize (L_inf, w) by closed\u2010form ridge on ln(y - L_inf_init)\n      2) refine all 9 params with bounded L-BFGS-B minimizing MSE.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 9: [L_inf, w0, w1, ..., w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # avoid log(0) / negative\n    eps = 1e-12\n    y = np.clip(y, eps, None)\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n\n    # build Z like above\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=np.float64)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # initialize L_inf at half the minimum loss\n    min_y = y.min()\n    L_inf_init = 0.5 * min_y\n\n    # closed\u2010form ridge on ln(y - L_inf_init)\n    y_off = np.clip(y - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n    ridge = 1e-6\n    M = Z.T.dot(Z) + ridge * np.eye(8)\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M, v)  # (8,)\n\n    # pack initial parameter vector\n    p_init = np.concatenate(([L_inf_init], w_init))\n\n    # bounds: keep L_inf >= 0 and less than the data's min\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 8\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        L_inf = p[0]\n        w = p[1:]\n        pred = L_inf + np.exp(Z.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # refine via L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       p_init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else p_init\n    except Exception:\n        params_opt = p_init\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(lr)*ln(bsz)]\n                 + w10\u00b7[ln(data_size)*ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 11: [w0, w1, ..., w10]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 11:\n        raise ValueError(f\"params must have length 11, got {p.size}\")\n\n    # Safe log\u2010transform (avoid log(0))\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)   # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embedding_param_size)\n\n    # Design matrix Z: N\u00d711\n    Z = np.column_stack([\n        np.ones_like(x1),   # intercept\n        x1, x1**2,          # lr terms\n        x2, x2**2,          # bsz terms\n        x3, x3**2,          # data_size terms\n        x4, x4**2,          # model size terms\n        x1 * x2,            # lr \u00d7 bsz interaction\n        x3 * x4             # data_size \u00d7 model size interaction\n    ])  # shape = (N,11)\n\n    ln_pred = Z.dot(p)       # shape = (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law via ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010space features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 11 of fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform inputs and targets\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    lnX = np.log(X_clipped)  # shape (N,4)\n    lnY = np.log(y_clipped)  # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z: N\u00d711\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])  # shape = (N,11)\n\n    # Ridge regularization (no penalty on intercept)\n    lambd = 1e-4\n    P = Z.shape[1]\n    # Normal equations: (Z^T Z + \u039b) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # add \u03bb to diagonal entries except for intercept term\n    reg = np.zeros(P, dtype=np.float64)\n    reg[1:] = lambd\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape = (11,)\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}