{"id": "ad9d1d87-1492-4f21-bcfe-f1b673ea990a", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010space polynomial scaling law for LLM training hyperparameters.\nModel form (in log\u2010space):\n    ln(loss) \u2248 w0\n               + w1\u00b7ln(lr)    + w2\u00b7[ln(lr)]^2\n               + w3\u00b7ln(bsz)   + w4\u00b7[ln(bsz)]^2\n               + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n               + w7\u00b7ln(non_embedding_param_size) + w8\u00b7[ln(non_embedding_param_size)]^2\n               + w9\u00b7[ln(data_size) * ln(non_embedding_param_size)]\n\nWe standardize features (except intercept) for numerical stability,\napply light ridge regularization (no penalty on intercept),\nand recover original coefficients after solving the normal equations.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (10,) or (T,10) with coefficients\n                   [w0, w1, w2, w3, w4, w5, w6, w7, w8, w9]\n    Returns:\n      preds: array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Prepare parameter matrix\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.ndim != 2 or p.shape[1] != 10:\n        raise ValueError(f\"params must have shape (10,) or (T,10), got {p.shape}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lnX = np.log(Xc)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # intercept\n        x1, x1**2,          # ln(lr) & [ln(lr)]^2\n        x2, x2**2,          # ln(bsz) & [ln(bsz)]^2\n        x3, x3**2,          # ln(data_size) & [ln(data_size)]^2\n        x4, x4**2,          # ln(param_size) & [ln(param_size)]^2\n        x3 * x4             # interaction term\n    ])\n\n    # Compute log\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)       # shape (N,T)\n    Y = np.exp(lnY)\n    # If single parameter set, return (N,) array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge\u2010regularized least squares in log\u2010space.\n\n    Solves for w in:\n        ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func, with\n    feature standardization (except intercept) and light ridge regularization\n    (no penalty on intercept).\n    \n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of length 10: the fitted coefficients [w0..w9]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # Clip and log\u2010transform inputs and targets\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    lnX = np.log(Xc)\n    lnY = np.log(yc)\n\n    # Unpack log\u2010features\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,     # ln(lr), [ln(lr)]^2\n        x2, x2**2,     # ln(bsz), [ln(bsz)]^2\n        x3, x3**2,     # ln(data_size), [ln(data_size)]^2\n        x4, x4**2,     # ln(param_size), [ln(param_size)]^2\n        x3 * x4        # interaction\n    ])\n\n    # Standardize non\u2010intercept features for numerical stability\n    P = Z.shape[1]\n    means = np.zeros(P, dtype=np.float64)\n    scales = np.ones(P, dtype=np.float64)\n    for j in range(1, P):\n        col = Z[:, j]\n        m, s = col.mean(), col.std()\n        # Prevent degenerate scales\n        if s < eps:\n            s = 1.0\n        means[j] = m\n        scales[j] = s\n        Z[:, j] = (col - m) / s\n\n    # Light ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.zeros(P, dtype=np.float64)\n    reg[1:] = lambda_reg\n\n    # Solve normal equations: (Z^T Z + diag(reg)) w_scaled = Z^T lnY\n    A = Z.T.dot(Z) + np.diag(reg)\n    b = Z.T.dot(lnY)\n    w_scaled = np.linalg.solve(A, b)\n\n    # Recover original coefficients\n    w = np.empty_like(w_scaled)\n    # rescale linear/quadratic & interaction terms\n    w[1:] = w_scaled[1:] / scales[1:]\n    # adjust intercept\n    w[0] = w_scaled[0] - np.dot(w_scaled[1:] / scales[1:], means[1:])\n\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "8bef719c-ac87-42b2-a879-7697dd3b5334", "generation": 3, "timestamp": 1754799736.6341667, "iteration_found": 78, "metrics": {"nmse": 6.462390005103453, "nmae": 2.8936619709453617, "r2": -5.462390005103453, "combined_score": 0.13400532527998538}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 6.412690177207895, "nmae": 2.8789034283028445, "r2": -5.412690177207895, "combined_score": 0.13490379013475315}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 6.4127\n- nmae: 2.8789\n- r2: -5.4127\n- combined_score: 0.1349\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 6.4456, nmae: 2.8887, r2: -5.4456, combined_score: 0.1343\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 6.4127, nmae: 2.8789, r2: -5.4127, combined_score: 0.1349\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 6.4127, nmae: 2.8789, r2: -5.4127, combined_score: 0.1349\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0035)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n    loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)   # shape (N,4)\n    x1 = lnX[:, 0]          # ln(lr)\n    x2 = lnX[:, 1]          # ln(bsz)\n    x3 = lnX[:, 2]          # ln(data_size)\n    x4 = lnX[:, 3]          # ln(non_embed_param_size)\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Compute log\u2010predictions and return in original scale\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)    # shape (N,4)\n    lnY = np.log(y + eps)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization strength\n    lambd = 1e-6\n\n    # Solve (Z^T Z + \u03bbI) w = Z^T lnY\n    # We add \u03bb to the diagonal of Z^T Z for numerical stability\n    M = Z.T.dot(Z)\n    # Add ridge to diagonal entries\n    diag_indices = np.arange(M.shape[0])\n    M[diag_indices, diag_indices] += lambd\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n\n    return w\n```\nKey features: Performs well on nmse (6.4127), Performs well on nmae (2.8789), Performs well on r2 (-5.4127), Performs well on combined_score (0.1349)\n\n\n### Program 2 (Score: 1.0035)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with second\u2010order terms for each feature\nand an interaction term between data_size and non\u2010embedding parameter size.\nThis captures U\u2010shaped effects in lr/bsz, diminishing returns in data_size/params,\nand their coupling, while remaining parameter\u2010efficient and numerically stable.\nModel form (in log\u2010space):\n    ln(loss) \u2248 w0\n               + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n               + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n               + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n               + w7\u00b7ln(non_embedding_param_size) + w8\u00b7[ln(non_embedding_param_size)]^2\n               + w9\u00b7[ln(data_size) * ln(non_embedding_param_size)]\nThus loss \u2248 exp(Z \u00b7 w), where Z is the design matrix of the above features.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10, or shape (T,10) for T different parameter sets:\n                   [w0, w1, w2, w3, w4, w5, w6, w7, w8, w9]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Prepare parameters array\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 10:\n        raise ValueError(f\"params must have length 10, got {P}\")\n\n    # Safe log\u2010transform of inputs\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embedding_param_size)\n\n    # Build design matrix Z of shape (N,10)\n    Z = np.column_stack([\n        np.ones_like(x1),     # bias term\n        x1, x1**2,            # lr linear & quadratic\n        x2, x2**2,            # bsz linear & quadratic\n        x3, x3**2,            # data_size linear & quadratic\n        x4, x4**2,            # param_size linear & quadratic\n        x3 * x4               # interaction term\n    ])\n\n    # Compute log\u2010predictions and exponentiate\n    # lnY = Z (N\u00d710) dot p.T (10\u00d7T) \u2192 (N\u00d7T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n\n    # If only one parameter set, return (N,) vector\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge\u2010regularized linear regression in log\u2010space.\n\n    Solves for w in:\n        ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 10: the fitted weights w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # Safe log\u2010transform of inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))  # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization parameter for numerical stability\n    lambd = 1e-6\n    # Normal equations: (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.4127), Performs well on nmae (2.8789), Performs well on r2 (-5.4127), Performs well on combined_score (0.1349)\n\n\n### Program 3 (Score: 1.0057)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial-in-log-space scaling law with\n    second-order terms for each feature and one cross-term for data_size \u00d7 model_size.\n\n    Model in log-space:\n        ln(loss) \u2248 w0\n                   + w1\u00b7ln(lr)    + w2\u00b7[ln(lr)]^2\n                   + w3\u00b7ln(bsz)   + w4\u00b7[ln(bsz)]^2\n                   + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                   + w7\u00b7ln(model_size) + w8\u00b7[ln(model_size)]^2\n                   + w9\u00b7[ln(data_size) * ln(model_size)]\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, \u2026, w9]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log-transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),  # w0\n        x1, x1**2,         # lr terms\n        x2, x2**2,         # bsz terms\n        x3, x3**2,         # data_size terms\n        x4, x4**2,         # model_size terms\n        x3 * x4           # interaction\n    ])  # shape (N,10)\n\n    ln_pred = Z.dot(p)       # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter polynomial-in-log-space scaling law via\n    ridge-regularized least squares in log-space.\n\n    We solve\n        ln(y) \u2248 Z \u00b7 w\n    with Z as in scaling_law_func, adding a small diagonal ridge \u03bb\u00b7I.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      w: array of length 10 of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe log-transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))  # shape (N,)\n\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (no penalty on intercept)\n    lambd = 1e-4\n    P = Z.shape[1]\n    A = Z.T.dot(Z)\n    # add \u03bb to diag except intercept term\n    diag = lambd * np.ones(P)\n    diag[0] = 0.0\n    A += np.diag(diag)\n\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(A, b)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.4456), Performs well on nmae (2.8887), Performs well on r2 (-5.4456), Performs well on combined_score (0.1343)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0069)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using a log\u2010space polynomial scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      => loss = exp(ln(loss))\n\n    Features: intercept, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4\n    where x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_param_size).\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10, or shape (T,10), coefficients [w0..w9]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted LM loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    # Safe log transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build feature matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    # Prepare params array\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]   # shape (1,10)\n    if p.ndim != 2 or p.shape[1] != Z.shape[1]:\n        raise ValueError(f\"params must have shape (10,) or (T,10), got {p.shape}\")\n    # Compute ln\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)       # shape (N,T)\n    Y = np.exp(lnY)\n    # If single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010space polynomial scaling law via ridge regression:\n\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n\n    Closed\u2010form ridge solution in log\u2010space with light regularization and feature\n    standardization for numerical stability.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: fitted coefficients [w0..w9]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    # Safe log\u2010transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    P = Z.shape[1]\n    # Standardize features (except intercept) for numerical stability\n    means = np.zeros(P, dtype=np.float64)\n    scales = np.ones(P, dtype=np.float64)\n    # Compute mean and std for columns 1..P-1\n    for j in range(1, P):\n        col = Z[:, j]\n        m = col.mean()\n        s = col.std()\n        # avoid degenerate scale\n        if s < eps:\n            s = 1.0\n        means[j] = m\n        scales[j] = s\n        Z[:, j] = (col - m) / s\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    # Build normal equations: (Z^T Z + \u03bb\u00b7diag([0,1,..,1])) \u03b2 = Z^T lnY\n    M = Z.T.dot(Z)\n    # add regularization to diag entries 1..P-1\n    diag_idx = np.arange(P)\n    M[diag_idx[1:], diag_idx[1:]] += lam\n    v = Z.T.dot(lnY)\n    # Solve for scaled weights \u03b2\n    beta = np.linalg.solve(M, v)  # shape (P,)\n    # Un\u2010scale to original weights w\n    w = np.empty_like(beta)\n    # for j>=1: w[j] = \u03b2[j] / scales[j]\n    w[1:] = beta[1:] / scales[1:]\n    # intercept: w[0] = \u03b2[0] - sum_{j>=1}(\u03b2[j] * means[j] / scales[j])\n    w[0] = beta[0] - np.dot(beta[1:] / scales[1:], means[1:])\n    return w\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.1091)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe extend the polynomial log\u2010space form by including second\u2010order terms\nfor all features (lr, bsz, data_size, non\u2010embed_params) plus two interactions:\n  - lr\u00d7bsz to capture U\u2010shaped learning\u2010rate/batch\u2010size effects,\n  - data_size\u00d7non_embed_params to capture D\u00d7P coupling.\n\nFeatures in log\u2010space:\n    x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params)\nZ = [1,\n     x1, x1^2,\n     x2, x2^2,\n     x3, x3^2,\n     x4, x4^2,\n     x1*x2,\n     x3*x4]\n\u21d2 11 features total.\n\nln(loss) \u2248 Z \u00b7 w    \u21d2    loss \u2248 exp(Z\u00b7w)\nFitted via ridge regression in log\u2010space for numerical and theoretical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the expanded polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (11,) or (T,11) for T separate fits\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Clip and log-transform inputs\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N \u00d7 11)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1*x1,\n        x2, x2*x2,\n        x3, x3*x3,\n        x4, x4*x4,\n        x1*x2,\n        x3*x4\n    ])  # shape (N,11)\n\n    # Prepare parameter matrix (T \u00d7 11)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != Z.shape[1]:\n        raise ValueError(f\"params must have length {Z.shape[1]}, got {P}\")\n\n    # Compute log\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)        # shape (N, T)\n    Y   = np.exp(lnY)\n    # If single parameter set, return 1D array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial scaling law via ridge regression in log\u2010space.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of shape (11,) of fitted coefficients w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # Clip and log-transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N \u00d7 11)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1*x1,\n        x2, x2*x2,\n        x3, x3*x3,\n        x4, x4*x4,\n        x1*x2,\n        x3*x4\n    ])  # shape (N,11)\n\n    # Ridge regularization (no penalty on intercept)\n    lambd = 1e-4\n    P = Z.shape[1]\n    # Normal equations: (Z^T Z + reg) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # Add \u03bb to diagonal entries except intercept term\n    reg = lambd * np.ones(P, dtype=float)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n\n    # Solve for w\n    w = np.linalg.solve(M, v)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0035, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n    loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)   # shape (N,4)\n    x1 = lnX[:, 0]          # ln(lr)\n    x2 = lnX[:, 1]          # ln(bsz)\n    x3 = lnX[:, 2]          # ln(data_size)\n    x4 = lnX[:, 3]          # ln(non_embed_param_size)\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Compute log\u2010predictions and return in original scale\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)    # shape (N,4)\n    lnY = np.log(y + eps)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization strength\n    lambd = 1e-6\n\n    # Solve (Z^T Z + \u03bbI) w = Z^T lnY\n    # We add \u03bb to the diagonal of Z^T Z for numerical stability\n    M = Z.T.dot(Z)\n    # Add ridge to diagonal entries\n    diag_indices = np.arange(M.shape[0])\n    M[diag_indices, diag_indices] += lambd\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n\n    return w\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.413), Excellent nmae (2.879)\n\n\n### Inspiration 2 (Score: 5.8442, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an extended power\u2010law with an interaction term:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 *\n             param_size**w4 * exp(w5 * log(data_size)*log(param_size))\n\n    In log\u2010space this is:\n      log(loss) = w0\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(param_size)\n                  + w5*log(data_size)*log(param_size)\n\n    Inputs:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds:       (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim != 1 or p.shape[0] != 6:\n        raise ValueError(f\"params must be length 6, got shape {p.shape}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr    = np.clip(X[:, 0], eps, None)\n    bsz   = np.clip(X[:, 1], eps, None)\n    data  = np.clip(X[:, 2], eps, None)\n    param = np.clip(X[:, 3], eps, None)\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data)\n    log_param = np.log(param)\n\n    # interaction term\n    inter = log_data * log_param\n\n    # unpack parameters\n    w0, w1, w2, w3, w4, w5 = p\n\n    # compute log\u2010prediction\n    log_pred = (\n        w0\n        + w1 * log_lr\n        + w2 * log_bsz\n        + w3 * log_data\n        + w4 * log_param\n        + w5 * inter\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power\u2010law model via ridge\u2010regularized least squares in log\u2010space:\n      log(loss) = w0\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(param_size)\n                  + w5*log(data_size)*log(param_size)\n\n    Returns:\n      params: (6,) array [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must have 4 columns, got {X.shape[1]}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr    = np.clip(X[:, 0], eps, None)\n    bsz   = np.clip(X[:, 1], eps, None)\n    data  = np.clip(X[:, 2], eps, None)\n    param = np.clip(X[:, 3], eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data)\n    log_param = np.log(param)\n    log_y     = np.log(y_clipped)\n\n    # interaction feature\n    inter = log_data * log_param\n\n    # build design matrix [1, log_lr, log_bsz, log_data, log_param, inter]\n    Z = np.stack(\n        [\n            np.ones_like(log_lr),\n            log_lr,\n            log_bsz,\n            log_data,\n            log_param,\n            inter,\n        ],\n        axis=1,\n    )\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Z.shape[1]\n    M = Z.T.dot(Z) + ridge * np.eye(P)\n    v = Z.T.dot(log_y)\n\n    # solve for parameters\n    w = np.linalg.solve(M, v)\n    return w\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (272.443), Excellent nmae (22.373)\n\n\n### Inspiration 3 (Score: 1.1091, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe extend the polynomial log\u2010space form by including second\u2010order terms\nfor all features (lr, bsz, data_size, non\u2010embed_params) plus two interactions:\n  - lr\u00d7bsz to capture U\u2010shaped learning\u2010rate/batch\u2010size effects,\n  - data_size\u00d7non_embed_params to capture D\u00d7P coupling.\n\nFeatures in log\u2010space:\n    x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params)\nZ = [1,\n     x1, x1^2,\n     x2, x2^2,\n     x3, x3^2,\n     x4, x4^2,\n     x1*x2,\n     x3*x4]\n\u21d2 11 features total.\n\nln(loss) \u2248 Z \u00b7 w    \u21d2    loss \u2248 exp(Z\u00b7w)\nFitted via ridge regression in log\u2010space for numerical and theoretical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the expanded polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (11,) or (T,11) for T separate fits\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Clip and log-transform inputs\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N \u00d7 11)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1*x1,\n        x2, x2*x2,\n        x3, x3*x3,\n        x4, x4*x4,\n        x1*x2,\n        x3*x4\n    ])  # shape (N,11)\n\n    # Prepare parameter matrix (T \u00d7 11)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != Z.shape[1]:\n        raise ValueError(f\"params must have length {Z.shape[1]}, got {P}\")\n\n    # Compute log\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)        # shape (N, T)\n    Y   = np.exp(lnY)\n    # If single parameter set, return 1D array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial scaling law via ridge regression in log\u2010space.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of shape (11,) of fitted coefficients w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # Clip and log-transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N \u00d7 11)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1*x1,\n        x2, x2*x2,\n        x3, x3*x3,\n        x4, x4*x4,\n        x1*x2,\n        x3*x4\n    ])  # shape (N,11)\n\n    # Ridge regularization (no penalty on intercept)\n    lambd = 1e-4\n    P = Z.shape[1]\n    # Normal equations: (Z^T Z + reg) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # Add \u03bb to diagonal entries except intercept term\n    reg = lambd * np.ones(P, dtype=float)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n\n    # Solve for w\n    w = np.linalg.solve(M, v)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.916), Excellent nmae (3.310)\n\n\n### Inspiration 4 (Score: 1.0069, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using a log\u2010space polynomial scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      => loss = exp(ln(loss))\n\n    Features: intercept, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4\n    where x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_param_size).\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10, or shape (T,10), coefficients [w0..w9]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted LM loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    # Safe log transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build feature matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    # Prepare params array\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]   # shape (1,10)\n    if p.ndim != 2 or p.shape[1] != Z.shape[1]:\n        raise ValueError(f\"params must have shape (10,) or (T,10), got {p.shape}\")\n    # Compute ln\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)       # shape (N,T)\n    Y = np.exp(lnY)\n    # If single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010space polynomial scaling law via ridge regression:\n\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n\n    Closed\u2010form ridge solution in log\u2010space with light regularization and feature\n    standardization for numerical stability.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: fitted coefficients [w0..w9]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    # Safe log\u2010transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    P = Z.shape[1]\n    # Standardize features (except intercept) for numerical stability\n    means = np.zeros(P, dtype=np.float64)\n    scales = np.ones(P, dtype=np.float64)\n    # Compute mean and std for columns 1..P-1\n    for j in range(1, P):\n        col = Z[:, j]\n        m = col.mean()\n        s = col.std()\n        # avoid degenerate scale\n        if s < eps:\n            s = 1.0\n        means[j] = m\n        scales[j] = s\n        Z[:, j] = (col - m) / s\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    # Build normal equations: (Z^T Z + \u03bb\u00b7diag([0,1,..,1])) \u03b2 = Z^T lnY\n    M = Z.T.dot(Z)\n    # add regularization to diag entries 1..P-1\n    diag_idx = np.arange(P)\n    M[diag_idx[1:], diag_idx[1:]] += lam\n    v = Z.T.dot(lnY)\n    # Solve for scaled weights \u03b2\n    beta = np.linalg.solve(M, v)  # shape (P,)\n    # Un\u2010scale to original weights w\n    w = np.empty_like(beta)\n    # for j>=1: w[j] = \u03b2[j] / scales[j]\n    w[1:] = beta[1:] / scales[1:]\n    # intercept: w[0] = \u03b2[0] - sum_{j>=1}(\u03b2[j] * means[j] / scales[j])\n    w[0] = beta[0] - np.dot(beta[1:] / scales[1:], means[1:])\n    return w\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.462), Excellent nmae (2.894)\n\n\n### Inspiration 5 (Score: 5.5496, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model combining\n  - quadratic term in log(lr) to capture the U\u2010shaped lr dependence,\n  - a power\u2010law in bsz, data_size, and non_embedding_param_size,\n  - an interaction term between data_size and non_embedding_param_size\nfor improved extrapolation to large scale.\n\nIn log\u2010space:\n    ln(loss) \u2248 w0\n              + w1\u00b7ln(lr)\n              + w2\u00b7[ln(lr)]^2\n              + w3\u00b7ln(bsz)\n              + w4\u00b7ln(data_size)\n              + w5\u00b7ln(non_embedding_param_size)\n              + w6\u00b7(ln(data_size)\u00b7ln(non_embedding_param_size)/100)\n\nClosed\u2010form ridge\u2010regularized fit in log\u2010space for stability.\n\"\"\"\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via the enhanced scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (7,) or (T,7) with weights\n                   [w0, w1, w2, w3, w4, w5, w6]\n\n    Returns:\n      preds: array of shape (N,) or (N,T) of predicted lm loss.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    # allow multiple parameter\u2010sets\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected params of length 7, got {P}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    # interaction term, scaled to keep magnitude ~O(1\u201310)\n    interaction = (ln_D * ln_M) / 100.0\n\n    # build design matrix Z: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M, interaction]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M,\n        interaction\n    ], axis=1)  # shape (N,7)\n\n    # compute lnY = Z \u00b7 p^T => shape (N,T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n\n    # if single parameter\u2010set, return shape (N,)\n    return Y[:, 0] if T == 1 else Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by ridge\u2010regularized linear regression\n    in log\u2010space:\n      ln(loss) = w0 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                  + w3\u00b7ln(bsz) + w4\u00b7ln(data_size)\n                  + w5\u00b7ln(non_embedding_param_size)\n                  + w6\u00b7(ln(data_size)\u00b7ln(non_embedding_param_size)/100)\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 7 [w0, w1, w2, w3, w4, w5, w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_y = np.log(y + eps)\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    interaction = (ln_D * ln_M) / 100.0\n\n    # build design matrix Z: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M, interaction]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M,\n        interaction\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n    w = np.linalg.solve(A, b)  # shape (7,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (245.674), Excellent nmae (21.194)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with second\u2010order terms for each feature\nand an interaction term between data_size and non\u2010embedding parameter size.\nThis captures U\u2010shaped effects in lr/bsz, diminishing returns in data_size/params,\nand their coupling, while remaining parameter\u2010efficient and numerically stable.\nModel form (in log\u2010space):\n    ln(loss) \u2248 w0\n               + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n               + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n               + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n               + w7\u00b7ln(non_embedding_param_size) + w8\u00b7[ln(non_embedding_param_size)]^2\n               + w9\u00b7[ln(data_size) * ln(non_embedding_param_size)]\nThus loss \u2248 exp(Z \u00b7 w), where Z is the design matrix of the above features.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10, or shape (T,10) for T different parameter sets:\n                   [w0, w1, w2, w3, w4, w5, w6, w7, w8, w9]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Prepare parameters array\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 10:\n        raise ValueError(f\"params must have length 10, got {P}\")\n\n    # Safe log\u2010transform of inputs\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(non_embedding_param_size)\n\n    # Build design matrix Z of shape (N,10)\n    Z = np.column_stack([\n        np.ones_like(x1),     # bias term\n        x1, x1**2,            # lr linear & quadratic\n        x2, x2**2,            # bsz linear & quadratic\n        x3, x3**2,            # data_size linear & quadratic\n        x4, x4**2,            # param_size linear & quadratic\n        x3 * x4               # interaction term\n    ])\n\n    # Compute log\u2010predictions and exponentiate\n    # lnY = Z (N\u00d710) dot p.T (10\u00d7T) \u2192 (N\u00d7T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n\n    # If only one parameter set, return (N,) vector\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge\u2010regularized linear regression in log\u2010space.\n\n    Solves for w in:\n        ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 10: the fitted weights w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # Safe log\u2010transform of inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))  # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization parameter for numerical stability\n    lambd = 1e-6\n    # Normal equations: (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010space polynomial scaling law for LLM training hyperparameters.\nModel form (in log\u2010space):\n    ln(loss) \u2248 w0\n               + w1\u00b7ln(lr)    + w2\u00b7[ln(lr)]^2\n               + w3\u00b7ln(bsz)   + w4\u00b7[ln(bsz)]^2\n               + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n               + w7\u00b7ln(non_embedding_param_size) + w8\u00b7[ln(non_embedding_param_size)]^2\n               + w9\u00b7[ln(data_size) * ln(non_embedding_param_size)]\n\nWe standardize features (except intercept) for numerical stability,\napply light ridge regularization (no penalty on intercept),\nand recover original coefficients after solving the normal equations.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (10,) or (T,10) with coefficients\n                   [w0, w1, w2, w3, w4, w5, w6, w7, w8, w9]\n    Returns:\n      preds: array of shape (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Prepare parameter matrix\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.ndim != 2 or p.shape[1] != 10:\n        raise ValueError(f\"params must have shape (10,) or (T,10), got {p.shape}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lnX = np.log(Xc)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # intercept\n        x1, x1**2,          # ln(lr) & [ln(lr)]^2\n        x2, x2**2,          # ln(bsz) & [ln(bsz)]^2\n        x3, x3**2,          # ln(data_size) & [ln(data_size)]^2\n        x4, x4**2,          # ln(param_size) & [ln(param_size)]^2\n        x3 * x4             # interaction term\n    ])\n\n    # Compute log\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)       # shape (N,T)\n    Y = np.exp(lnY)\n    # If single parameter set, return (N,) array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge\u2010regularized least squares in log\u2010space.\n\n    Solves for w in:\n        ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func, with\n    feature standardization (except intercept) and light ridge regularization\n    (no penalty on intercept).\n    \n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of length 10: the fitted coefficients [w0..w9]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # Clip and log\u2010transform inputs and targets\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    lnX = np.log(Xc)\n    lnY = np.log(yc)\n\n    # Unpack log\u2010features\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,     # ln(lr), [ln(lr)]^2\n        x2, x2**2,     # ln(bsz), [ln(bsz)]^2\n        x3, x3**2,     # ln(data_size), [ln(data_size)]^2\n        x4, x4**2,     # ln(param_size), [ln(param_size)]^2\n        x3 * x4        # interaction\n    ])\n\n    # Standardize non\u2010intercept features for numerical stability\n    P = Z.shape[1]\n    means = np.zeros(P, dtype=np.float64)\n    scales = np.ones(P, dtype=np.float64)\n    for j in range(1, P):\n        col = Z[:, j]\n        m, s = col.mean(), col.std()\n        # Prevent degenerate scales\n        if s < eps:\n            s = 1.0\n        means[j] = m\n        scales[j] = s\n        Z[:, j] = (col - m) / s\n\n    # Light ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.zeros(P, dtype=np.float64)\n    reg[1:] = lambda_reg\n\n    # Solve normal equations: (Z^T Z + diag(reg)) w_scaled = Z^T lnY\n    A = Z.T.dot(Z) + np.diag(reg)\n    b = Z.T.dot(lnY)\n    w_scaled = np.linalg.solve(A, b)\n\n    # Recover original coefficients\n    w = np.empty_like(w_scaled)\n    # rescale linear/quadratic & interaction terms\n    w[1:] = w_scaled[1:] / scales[1:]\n    # adjust intercept\n    w[0] = w_scaled[0] - np.dot(w_scaled[1:] / scales[1:], means[1:])\n\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}