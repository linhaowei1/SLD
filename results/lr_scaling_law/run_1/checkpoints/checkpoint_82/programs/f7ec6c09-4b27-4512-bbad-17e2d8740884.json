{"id": "f7ec6c09-4b27-4512-bbad-17e2d8740884", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cd5a4fe4-ef0d-475c-ba6a-a9916c543909", "generation": 2, "timestamp": 1754799143.4327855, "iteration_found": 11, "metrics": {"nmse": 49.99699934619324, "nmae": 9.523181842848246, "r2": -48.99699934619324, "combined_score": 0.019608996859040623}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00324575865645, "nmae": 17.3975027158323, "r2": -164.00324575865645, "combined_score": 0.00602397860011634}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0032\n- nmae: 17.3975\n- r2: -164.0032\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0032, nmae: 17.3975, r2: -164.0032, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 165.0032, nmae: 17.3975, r2: -164.0032, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 165.0032, nmae: 17.3975, r2: -164.0032, combined_score: 0.0060\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0032), Performs well on nmae (17.3975), Performs well on r2 (-164.0032), Performs well on combined_score (0.0060)\n\n\n### Program 2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0032), Performs well on nmae (17.3975), Performs well on r2 (-164.0032), Performs well on combined_score (0.0060)\n\n\n### Program 3 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0032), Performs well on nmae (17.3975), Performs well on r2 (-164.0032), Performs well on combined_score (0.0060)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.398)\n\n\n### Inspiration 2 (Score: 107072192777609.4375, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (99589215585519330125424885760.000), Excellent nmae (428288771110437.750), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a revised version that adds an explicit \u201cirreducible\u2010loss\u201d offset term and fits all six parameters \\([L_\\infty,w_0,w_1,w_2,w_3,w_4]\\) via a bounded L-BFGS-B solve.  This extra degree of freedom often captures the asymptotic floor in LM loss and substantially reduces systematic bias.  The interface remains unchanged.\n\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\nKey improvements:\n- Introduces an explicit irreducible offset \\(L_{\\infty}\\) to capture the loss floor.\n- Keeps the simple log-linear/power-law structure for interpretability and efficiency.\n- Fits all six parameters jointly via a bounded L-BFGS-B solve for robustness across scales.\n- Maintains the original API:  \n  - `scaling_law_func(data_points, params)` \u2192 predictions  \n  - `fit_scaling_law(data_points, loss_values)` \u2192 a single 6-element parameter vector"]}}}