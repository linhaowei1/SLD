{"id": "cd01d4ec-f591-43da-83f9-535d0c8ea27b", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias multiplicative power law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n\n    # Add epsilon for numerical stability in logs\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    log_term = (\n        logA\n        + e_lr   * logX[:, 0]\n        + e_bsz  * logX[:, 1]\n        + e_data * logX[:, 2]\n        + e_model* logX[:, 3]\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      1) Initializing b via the smallest observed loss\n      2) Running a log\u2010linear least squares on y - b to get logA and exponents\n      3) Refining all 6 parameters via bounded L\u2010BFGS\u2010B to minimize MSE\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    eps = 1e-12\n    y_min, y_max = np.min(y), np.max(y)\n\n    # 1) Initialize bias b close to the minimum observed loss\n    b0 = max(0.0, 0.9 * y_min)\n    y_adj = y - b0\n    # Ensure positivity for log\u2010linear step\n    if np.any(y_adj <= 0):\n        b0 = max(0.0, 0.5 * y_min)\n        y_adj = y - b0 + eps\n\n    # 2) Log\u2010linear least squares on y_adj = exp(logA + E\u00b7logX)\n    N = X.shape[0]\n    Z = np.log(X + eps)                   # shape (N,4)\n    A_mat = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA, e_lr, e_bsz, e_data, e_model]\n\n    init_params = np.zeros(6, dtype=np.float64)\n    init_params[0] = b0\n    init_params[1:] = theta_ls\n\n    # 3) Bounds reflecting plausible physics\u2010inspired ranges\n    b_upper = max(y_max * 2.0, 1.0)\n    bounds = [\n        (0.0,        b_upper),   # b \u2265 0\n        (None,       None),      # logA unbounded\n        (-1.0,       1.0),       # e_lr\n        (-1.0,       1.0),       # e_bsz\n        (-1.0,       0.0),       # e_data (loss should decrease w/ more data)\n        (-1.0,       0.0),       # e_model (loss should decrease w/ larger model)\n    ]\n\n    # Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 500, \"ftol\": 1e-12}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "170d9a0d-08c6-4198-bbe7-95c7b1adaca3", "generation": 3, "timestamp": 1754803056.282592, "iteration_found": 23, "metrics": {"nmse": 33.38592855298367, "nmae": 7.588690756697026, "r2": -32.38592855298367, "combined_score": 0.029081663403654978}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 65.34761150152974, "nmae": 10.735191412974888, "r2": -64.34761150152974, "combined_score": 0.01507213262646152}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 65.3476\n- nmae: 10.7352\n- r2: -64.3476\n- combined_score: 0.0151\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 33.3679, nmae: 7.5866, r2: -32.3679, combined_score: 0.0291\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1539)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss using an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = params\n    # Add small epsilon to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # Compute power-law term in log\u2010space for numerical stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_data * np.log(D) \\\n             + e_model* np.log(Np)\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model to minimize MSE:\n      params = [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Uses a closed\u2010form log\u2010linear regression to initialize exponents,\n    then refines via L-BFGS-B with bounded exponents for stability.\n    Returns: optimized (6,) parameter array.\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n\n    # 1) Closed-form log\u2010linear regression (no additive bias)\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.column_stack([np.ones(len(y)), Z])  # design matrix (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    theta_ls, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    # theta_ls = [logA_init, e_lr_init, e_bsz_init, e_data_init, e_model_init]\n\n    # 2) Build initial parameter vector: b=0, rest from LS\n    init_params = np.zeros(6, dtype=float)\n    init_params[0] = 0.0            # b\n    init_params[1] = theta_ls[0]    # logA\n    init_params[2:] = theta_ls[1:]  # [e_lr, e_bsz, e_data, e_model]\n\n    # 3) Define bounds for stability\n    y_max = np.max(y)\n    bounds = [\n        (0.0, max(y_max, 1.0)),  # b >= 0\n        (None, None),            # logA free\n        (-5.0, 5.0),             # e_lr\n        (-5.0, 5.0),             # e_bsz\n        (-5.0, 5.0),             # e_data\n        (-5.0, 5.0),             # e_model\n    ]\n\n    # 4) Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # 5) Optimize with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # Return optimized params or fallback to initial\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3679), Performs well on nmae (7.5866), Performs well on r2 (-32.3679), Performs well on combined_score (0.0291)\n\n\n### Program 2 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed_p^{e_model}\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # numerical stability\n    eps = 1e-12\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr  + eps)\n        + e_bsz  * np.log(bsz + eps)\n        + e_data * np.log(D    + eps)\n        + e_model*np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE with bounded L-BFGS-B.\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    # loss range for initializing bias and amplitude\n    y_min, y_max = np.min(y), np.max(y)\n\n    # two candidate initial guesses\n    inits = [\n        np.array([max(0.0, 0.5*y_min), np.log(max(1e-3, y_max - y_min)), -0.5, -0.5, -0.5, -0.5], dtype=float),\n        np.array([0.0,               np.log(max(1e-3, y_max)),         -1.0, -1.0, -0.1, -0.1], dtype=float),\n    ]\n\n    # bounds for parameters\n    bounds = [\n        (0.0,         max(1.0, 2.0*y_max)),  # bias b \u2265 0\n        (None,        None),                 # logA unbounded\n        (-5.0,        5.0),                  # exponent on lr\n        (-5.0,        5.0),                  # exponent on bsz\n        (-5.0,        5.0),                  # exponent on data_size\n        (-5.0,        5.0),                  # exponent on non_embedding_param_size\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2.0)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to first init if optimization fails\n    if best_params is None:\n        best_params = inits[0].copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.1539, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss using an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = params\n    # Add small epsilon to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # Compute power-law term in log\u2010space for numerical stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_data * np.log(D) \\\n             + e_model* np.log(Np)\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model to minimize MSE:\n      params = [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Uses a closed\u2010form log\u2010linear regression to initialize exponents,\n    then refines via L-BFGS-B with bounded exponents for stability.\n    Returns: optimized (6,) parameter array.\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n\n    # 1) Closed-form log\u2010linear regression (no additive bias)\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.column_stack([np.ones(len(y)), Z])  # design matrix (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    theta_ls, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    # theta_ls = [logA_init, e_lr_init, e_bsz_init, e_data_init, e_model_init]\n\n    # 2) Build initial parameter vector: b=0, rest from LS\n    init_params = np.zeros(6, dtype=float)\n    init_params[0] = 0.0            # b\n    init_params[1] = theta_ls[0]    # logA\n    init_params[2:] = theta_ls[1:]  # [e_lr, e_bsz, e_data, e_model]\n\n    # 3) Define bounds for stability\n    y_max = np.max(y)\n    bounds = [\n        (0.0, max(y_max, 1.0)),  # b >= 0\n        (None, None),            # logA free\n        (-5.0, 5.0),             # e_lr\n        (-5.0, 5.0),             # e_bsz\n        (-5.0, 5.0),             # e_data\n        (-5.0, 5.0),             # e_model\n    ]\n\n    # 4) Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # 5) Optimize with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # Return optimized params or fallback to initial\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.368), Excellent nmae (7.587)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed_p^{e_model}\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # numerical stability\n    eps = 1e-12\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr  + eps)\n        + e_bsz  * np.log(bsz + eps)\n        + e_data * np.log(D    + eps)\n        + e_model*np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE with bounded L-BFGS-B.\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    # loss range for initializing bias and amplitude\n    y_min, y_max = np.min(y), np.max(y)\n\n    # two candidate initial guesses\n    inits = [\n        np.array([max(0.0, 0.5*y_min), np.log(max(1e-3, y_max - y_min)), -0.5, -0.5, -0.5, -0.5], dtype=float),\n        np.array([0.0,               np.log(max(1e-3, y_max)),         -1.0, -1.0, -0.1, -0.1], dtype=float),\n    ]\n\n    # bounds for parameters\n    bounds = [\n        (0.0,         max(1.0, 2.0*y_max)),  # bias b \u2265 0\n        (None,        None),                 # logA unbounded\n        (-5.0,        5.0),                  # exponent on lr\n        (-5.0,        5.0),                  # exponent on bsz\n        (-5.0,        5.0),                  # exponent on data_size\n        (-5.0,        5.0),                  # exponent on non_embedding_param_size\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2.0)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to first init if optimization fails\n    if best_params is None:\n        best_params = inits[0].copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias multiplicative power law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n\n    # Add epsilon for numerical stability in logs\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    log_term = (\n        logA\n        + e_lr   * logX[:, 0]\n        + e_bsz  * logX[:, 1]\n        + e_data * logX[:, 2]\n        + e_model* logX[:, 3]\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      1) Initializing b via the smallest observed loss\n      2) Running a log\u2010linear least squares on y - b to get logA and exponents\n      3) Refining all 6 parameters via bounded L\u2010BFGS\u2010B to minimize MSE\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    eps = 1e-12\n    y_min, y_max = np.min(y), np.max(y)\n\n    # 1) Initialize bias b close to the minimum observed loss\n    b0 = max(0.0, 0.9 * y_min)\n    y_adj = y - b0\n    # Ensure positivity for log\u2010linear step\n    if np.any(y_adj <= 0):\n        b0 = max(0.0, 0.5 * y_min)\n        y_adj = y - b0 + eps\n\n    # 2) Log\u2010linear least squares on y_adj = exp(logA + E\u00b7logX)\n    N = X.shape[0]\n    Z = np.log(X + eps)                   # shape (N,4)\n    A_mat = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA, e_lr, e_bsz, e_data, e_model]\n\n    init_params = np.zeros(6, dtype=np.float64)\n    init_params[0] = b0\n    init_params[1:] = theta_ls\n\n    # 3) Bounds reflecting plausible physics\u2010inspired ranges\n    b_upper = max(y_max * 2.0, 1.0)\n    bounds = [\n        (0.0,        b_upper),   # b \u2265 0\n        (None,       None),      # logA unbounded\n        (-1.0,       1.0),       # e_lr\n        (-1.0,       1.0),       # e_bsz\n        (-1.0,       0.0),       # e_data (loss should decrease w/ more data)\n        (-1.0,       0.0),       # e_model (loss should decrease w/ larger model)\n    ]\n\n    # Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 500, \"ftol\": 1e-12}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```"]}}}