{"id": "c712af08-606a-48da-a585-826020ad2e38", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss using a 6-parameter power-law with additive floor:\n      y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_params))\n           + c\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    w0, w1, w2, w3, w4, c = p\n\n    # compute linear combination in log-space\n    logX = np.log(X)\n    lin = (\n        w0\n        + w1 * logX[:, 0]\n        + w2 * logX[:, 1]\n        + w3 * logX[:, 2]\n        + w4 * logX[:, 3]\n    )\n    # exponentiate and add floor\n    y_pred = np.exp(lin) + c\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model:\n      loss \u2248 exp(w0 + \u03a3 wi\u00b7log(xi)) + c\n    by alternating least squares in log-space for numerical stability.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 6 [w0, w1, w2, w3, w4, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected input with 4 features, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # constants\n    eps = 1e-12\n    max_iter = 5\n\n    # avoid zeros\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-features\n    logX = np.log(X)\n\n    # initialize floor c just below the minimum observed loss\n    c = 0.9 * np.min(y)\n\n    # alternating least squares\n    for _ in range(max_iter):\n        # subtract current floor and clamp positive\n        y_adj = np.clip(y - c, eps, None)\n        # fit linear model in log-space: log(y_adj) \u2248 w0 + \u03a3 wi logX\n        y_log = np.log(y_adj)\n        # design matrix: column of ones + log-features\n        M = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n        # solve least squares for [w0, w1..w4]\n        w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n        # compute predictions without floor\n        lin = M.dot(w)\n        pred_no_c = np.exp(lin)\n        # update floor c as mean residual, clipped to [0, min(y)-eps]\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - eps)\n\n    # assemble final parameters\n    params = np.empty(6, dtype=float)\n    params[0:5] = w  # w0,w1..w4\n    params[5] = c\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d939a6b5-8909-4290-81fc-0cece9ad88f4", "generation": 1, "timestamp": 1754802726.5064218, "iteration_found": 30, "metrics": {"nmse": 0.48349320618439673, "nmae": 0.6055960975037091, "r2": 0.5165067938156033, "combined_score": 0.6740846508977547}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.109385903936407e+27, "nmae": 56333765835662.48, "r2": -5.109385903936407e+27, "combined_score": 1.9571823675122549e-28}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 5109385903936407163786756096.0000\n- nmae: 56333765835662.4766\n- r2: -5109385903936407163786756096.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 6.5868, nmae: 2.2673, r2: -5.5868, combined_score: 0.1318\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 1.3619, nmae: 1.1056, r2: -0.3619, combined_score: 0.4234\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4835, nmae: 0.6056, r2: 0.5165, combined_score: 0.6741\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5699)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss via a power\u2010law with additive floor:\n      y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_emb_params))\n           + c\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_params]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input features of width 4, got {X.shape[1]}\")\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    w0, w1, w2, w3, w4, c = p\n    # compute log\u2010space linear part\n    logX = np.log(X)\n    lin = w0 \\\n          + w1 * logX[:, 0] \\\n          + w2 * logX[:, 1] \\\n          + w3 * logX[:, 2] \\\n          + w4 * logX[:, 3]\n    y_pred = np.exp(lin) + c\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=5):\n    \"\"\"\n    Fit the 6\u2010parameter model by alternating least squares:\n      y = exp(w0 + \u03a3 wi\u00b7log(xi)) + c.\n\n    Steps:\n      1. Initialize c \u2248 0.9\u00b7min(y).\n      2. Repeat:\n         a) y' = y - c  (clamp > 0)\n         b) log(y') = w0 + \u03a3 wi\u00b7log(xi)  \u2192 solve by OLS in log\u2010space.\n         c) compute preds_without_c = exp(w0+\u03a3 wi\u00b7log(xi))\n         d) update c = mean(y - preds_without_c), clipped to [0, min(y)-\u03b5].\n      3. Return [w0, w1, w2, w3, w4, c].\n\n    Inputs:\n      data_points: shape (N,4)\n      loss_values: shape (N,)\n      max_iter:    number of ALS iterations (default=5)\n\n    Returns:\n      params: array of length 6\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 input dims, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Avoid zeros\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Precompute log features\n    logX = np.log(X)\n\n    # Initialize c just below minimum loss\n    c = 0.9 * np.min(y)\n\n    # Alternating least squares\n    for _ in range(max_iter):\n        # 1) subtract floor\n        y_adj = y - c\n        # clamp to positive\n        y_adj = np.clip(y_adj, eps, None)\n        # 2) fit linear model in log\u2010space: log(y_adj) \u2248 w0 + \u03a3 wi\u00b7logX\n        y_log = np.log(y_adj)\n        # design matrix: [1 | logX]\n        M = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # solve least squares for [w0, w1..w4]\n        w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n        # 3) compute predictions without c\n        lin = M.dot(w)\n        pred_no_c = np.exp(lin)\n        # 4) update c via mean residual, clipped to [0, min(y)-eps]\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - eps)\n\n    # Final parameters: [w0, w1, w2, w3, w4, c]\n    params = np.empty(6, dtype=float)\n    params[:5] = w\n    params[5] = c\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4835), Performs well on nmae (0.6056), Performs well on r2 (0.5165), Performs well on combined_score (0.6741)\n\n\n### Program 2 (Score: 0.6323)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters with numerical stability\nand a simple six\u2010parameter form:\n\n    L\u0302 = c + exp( w0\n                 + w_lr\u00b7log(lr)\n                 + w_bsz\u00b7log(bsz)\n                 + w_D\u00b7log(data_size)\n                 + w_P\u00b7log(non_embedding_param_size) )\n\nParameters: [w0, w_lr, w_bsz, w_D, w_P, c]\n\nWe fit these by minimizing MSE in the original loss\u2010space via L-BFGS-B,\nusing analytic gradients and enforcing c \u2265 0 for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and fitted params.\n\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:      either (6,) or (T,6) array of [w0, w_lr, w_bsz, w_D, w_P, c]\n\n    Returns:\n      If params is (6,), returns (N,) predictions.\n      If params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.array(data_points, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # log\u2010transform features (all positive in practice)\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.array(params, dtype=np.float64)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pdim = p.shape\n    if Pdim != 6:\n        raise ValueError(f\"Expected params of length 6, got {Pdim}\")\n\n    # unpack parameter sets\n    w0, w_lr, w_bsz, w_D, w_P, c = p.T  # each is shape (T,)\n\n    # compute linear combination in log\u2010space\n    # s has shape (N, T)\n    s = (\n        w0[None, :]\n        + np.outer(log_lr,  w_lr)\n        + np.outer(log_bsz, w_bsz)\n        + np.outer(log_D,   w_D)\n        + np.outer(log_P,   w_P)\n    )\n    # final prediction: exponential plus floor c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if single parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six\u2010parameter scaling\u2010law by minimizing MSE:\n\n      params = [w0, w_lr, w_bsz, w_D, w_P, c]\n\n    Returns params of shape (6,) or (T,6) if multiple targets.\n    \"\"\"\n    X = np.array(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    y = np.array(loss_values, dtype=np.float64)\n    # support multiple targets\n    if y.ndim == 1:\n        y = y[:, None]\n    _, T = y.shape\n\n    # precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    params_opt = np.zeros((T, 6), dtype=np.float64)\n\n    for t in range(T):\n        yt = y[:, t]\n        # init: assume y ~ exp(w0), plus floor ~ half of min\n        floor_init = max(np.min(yt) * 0.5, 1e-6)\n        scale_init = max(np.mean(yt - floor_init), 1e-6)\n        p0 = np.array([np.log(scale_init), 0, 0, 0, 0, floor_init], dtype=np.float64)\n\n        # MSE objective\n        def obj(p):\n            w0_, w_lr_, w_bsz_, w_D_, w_P_, c_ = p\n            s_ = (\n                w0_\n                + w_lr_ * log_lr\n                + w_bsz_ * log_bsz\n                + w_D_   * log_D\n                + w_P_   * log_P\n            )\n            yhat = np.exp(s_) + c_\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient\n        def jac(p):\n            w0_, w_lr_, w_bsz_, w_D_, w_P_, c_ = p\n            s_ = (\n                w0_\n                + w_lr_ * log_lr\n                + w_bsz_ * log_bsz\n                + w_D_   * log_D\n                + w_P_   * log_P\n            )\n            exp_s = np.exp(s_)\n            yhat = exp_s + c_\n            diff = yhat - yt  # shape (N,)\n            # dMSE/dp = (2/N) * sum(diff * dyhat/dp)\n            invN2 = 2.0 / N\n            grad = np.empty_like(p)\n            # derivative w.r.t. w0: exp_s\n            grad[0] = invN2 * np.dot(diff, exp_s)\n            # w_lr, w_bsz, w_D, w_P\n            grad[1] = invN2 * np.dot(diff, exp_s * log_lr)\n            grad[2] = invN2 * np.dot(diff, exp_s * log_bsz)\n            grad[3] = invN2 * np.dot(diff, exp_s * log_D)\n            grad[4] = invN2 * np.dot(diff, exp_s * log_P)\n            # derivative w.r.t. c: 1\n            grad[5] = invN2 * np.sum(diff)\n            return grad\n\n        # enforce c >= 0\n        bounds = [(-np.inf, np.inf)] * 5 + [(0.0, np.inf)]\n        res = minimize(\n            obj,\n            p0,\n            jac=jac,\n            method=\"L-BFGS-B\",\n            bounds=bounds,\n            options={\"maxiter\": 1000, \"ftol\": 1e-12}\n        )\n        if res.success:\n            params_opt[t] = res.x\n        else:\n            # fallback to initial guess\n            params_opt[t] = p0\n\n    # return 1D if single target\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.3619), Performs well on nmae (1.1056), Performs well on r2 (-0.3619), Performs well on combined_score (0.4234)\n\n\n### Program 3 (Score: 0.8498)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via an extended power-law in log-space with\n    interaction and curvature terms. The model is:\n      log(loss) \u2248 \u03b20\n                  + \u03b21\u00b7log(lr)\n                  + \u03b22\u00b7log(bsz)\n                  + \u03b23\u00b7log(data_size)\n                  + \u03b24\u00b7log(non_embedding_param_size)\n                  + \u03b25\u00b7[log(lr)\u00b7log(data_size)]\n                  + \u03b26\u00b7[log(non_embedding_param_size)^2]\n\n    data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n    params: array-like of length 7 = [\u03b20, \u03b21, \u03b22, \u03b23, \u03b24, \u03b25, \u03b26]\n    Returns: array of length N with predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)    # G for data_size\n    P = np.log(Np)   # P for non_embedding_param_size\n    # build design matrix (N,7)\n    # cols: [1, L, B, G, P, L*G, P^2]\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)\n    # linear combination in log-space\n    log_y = M.dot(p)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended log-linear model by ordinary least squares:\n      log(loss) = M \u00b7 \u03b2\n    where M has columns [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                        log(lr)*log(data_size), (log(non_embedding_param_size))^2].\n    Returns \u03b2 of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    y_clipped = np.clip(y, eps, None)\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)\n    P = np.log(Np)\n    # build design matrix\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)  # shape (N,7)\n    # target is log(loss)\n    y_log = np.log(y_clipped)\n    # solve least-squares: M @ \u03b2 \u2248 y_log\n    \u03b2, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return \u03b2\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.5868), Performs well on nmae (2.2673), Performs well on r2 (-5.5868), Performs well on combined_score (0.1318)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 14083441458915.6191)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5699, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss via a power\u2010law with additive floor:\n      y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_emb_params))\n           + c\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_params]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input features of width 4, got {X.shape[1]}\")\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    w0, w1, w2, w3, w4, c = p\n    # compute log\u2010space linear part\n    logX = np.log(X)\n    lin = w0 \\\n          + w1 * logX[:, 0] \\\n          + w2 * logX[:, 1] \\\n          + w3 * logX[:, 2] \\\n          + w4 * logX[:, 3]\n    y_pred = np.exp(lin) + c\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=5):\n    \"\"\"\n    Fit the 6\u2010parameter model by alternating least squares:\n      y = exp(w0 + \u03a3 wi\u00b7log(xi)) + c.\n\n    Steps:\n      1. Initialize c \u2248 0.9\u00b7min(y).\n      2. Repeat:\n         a) y' = y - c  (clamp > 0)\n         b) log(y') = w0 + \u03a3 wi\u00b7log(xi)  \u2192 solve by OLS in log\u2010space.\n         c) compute preds_without_c = exp(w0+\u03a3 wi\u00b7log(xi))\n         d) update c = mean(y - preds_without_c), clipped to [0, min(y)-\u03b5].\n      3. Return [w0, w1, w2, w3, w4, c].\n\n    Inputs:\n      data_points: shape (N,4)\n      loss_values: shape (N,)\n      max_iter:    number of ALS iterations (default=5)\n\n    Returns:\n      params: array of length 6\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 input dims, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Avoid zeros\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Precompute log features\n    logX = np.log(X)\n\n    # Initialize c just below minimum loss\n    c = 0.9 * np.min(y)\n\n    # Alternating least squares\n    for _ in range(max_iter):\n        # 1) subtract floor\n        y_adj = y - c\n        # clamp to positive\n        y_adj = np.clip(y_adj, eps, None)\n        # 2) fit linear model in log\u2010space: log(y_adj) \u2248 w0 + \u03a3 wi\u00b7logX\n        y_log = np.log(y_adj)\n        # design matrix: [1 | logX]\n        M = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # solve least squares for [w0, w1..w4]\n        w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n        # 3) compute predictions without c\n        lin = M.dot(w)\n        pred_no_c = np.exp(lin)\n        # 4) update c via mean residual, clipped to [0, min(y)-eps]\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - eps)\n\n    # Final parameters: [w0, w1, w2, w3, w4, c]\n    params = np.empty(6, dtype=float)\n    params[:5] = w\n    params[5] = c\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 0.8498, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via an extended power-law in log-space with\n    interaction and curvature terms. The model is:\n      log(loss) \u2248 \u03b20\n                  + \u03b21\u00b7log(lr)\n                  + \u03b22\u00b7log(bsz)\n                  + \u03b23\u00b7log(data_size)\n                  + \u03b24\u00b7log(non_embedding_param_size)\n                  + \u03b25\u00b7[log(lr)\u00b7log(data_size)]\n                  + \u03b26\u00b7[log(non_embedding_param_size)^2]\n\n    data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n    params: array-like of length 7 = [\u03b20, \u03b21, \u03b22, \u03b23, \u03b24, \u03b25, \u03b26]\n    Returns: array of length N with predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)    # G for data_size\n    P = np.log(Np)   # P for non_embedding_param_size\n    # build design matrix (N,7)\n    # cols: [1, L, B, G, P, L*G, P^2]\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)\n    # linear combination in log-space\n    log_y = M.dot(p)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended log-linear model by ordinary least squares:\n      log(loss) = M \u00b7 \u03b2\n    where M has columns [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                        log(lr)*log(data_size), (log(non_embedding_param_size))^2].\n    Returns \u03b2 of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    y_clipped = np.clip(y, eps, None)\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)\n    P = np.log(Np)\n    # build design matrix\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)  # shape (N,7)\n    # target is log(loss)\n    y_log = np.log(y_clipped)\n    # solve least-squares: M @ \u03b2 \u2248 y_log\n    \u03b2, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return \u03b2\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.587), Excellent nmae (2.267)\n\n\n### Inspiration 3 (Score: 0.6323, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters with numerical stability\nand a simple six\u2010parameter form:\n\n    L\u0302 = c + exp( w0\n                 + w_lr\u00b7log(lr)\n                 + w_bsz\u00b7log(bsz)\n                 + w_D\u00b7log(data_size)\n                 + w_P\u00b7log(non_embedding_param_size) )\n\nParameters: [w0, w_lr, w_bsz, w_D, w_P, c]\n\nWe fit these by minimizing MSE in the original loss\u2010space via L-BFGS-B,\nusing analytic gradients and enforcing c \u2265 0 for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and fitted params.\n\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:      either (6,) or (T,6) array of [w0, w_lr, w_bsz, w_D, w_P, c]\n\n    Returns:\n      If params is (6,), returns (N,) predictions.\n      If params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.array(data_points, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # log\u2010transform features (all positive in practice)\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.array(params, dtype=np.float64)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pdim = p.shape\n    if Pdim != 6:\n        raise ValueError(f\"Expected params of length 6, got {Pdim}\")\n\n    # unpack parameter sets\n    w0, w_lr, w_bsz, w_D, w_P, c = p.T  # each is shape (T,)\n\n    # compute linear combination in log\u2010space\n    # s has shape (N, T)\n    s = (\n        w0[None, :]\n        + np.outer(log_lr,  w_lr)\n        + np.outer(log_bsz, w_bsz)\n        + np.outer(log_D,   w_D)\n        + np.outer(log_P,   w_P)\n    )\n    # final prediction: exponential plus floor c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if single parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six\u2010parameter scaling\u2010law by minimizing MSE:\n\n      params = [w0, w_lr, w_bsz, w_D, w_P, c]\n\n    Returns params of shape (6,) or (T,6) if multiple targets.\n    \"\"\"\n    X = np.array(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    y = np.array(loss_values, dtype=np.float64)\n    # support multiple targets\n    if y.ndim == 1:\n        y = y[:, None]\n    _, T = y.shape\n\n    # precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    params_opt = np.zeros((T, 6), dtype=np.float64)\n\n    for t in range(T):\n        yt = y[:, t]\n        # init: assume y ~ exp(w0), plus floor ~ half of min\n        floor_init = max(np.min(yt) * 0.5, 1e-6)\n        scale_init = max(np.mean(yt - floor_init), 1e-6)\n        p0 = np.array([np.log(scale_init), 0, 0, 0, 0, floor_init], dtype=np.float64)\n\n        # MSE objective\n        def obj(p):\n            w0_, w_lr_, w_bsz_, w_D_, w_P_, c_ = p\n            s_ = (\n                w0_\n                + w_lr_ * log_lr\n                + w_bsz_ * log_bsz\n                + w_D_   * log_D\n                + w_P_   * log_P\n            )\n            yhat = np.exp(s_) + c_\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient\n        def jac(p):\n            w0_, w_lr_, w_bsz_, w_D_, w_P_, c_ = p\n            s_ = (\n                w0_\n                + w_lr_ * log_lr\n                + w_bsz_ * log_bsz\n                + w_D_   * log_D\n                + w_P_   * log_P\n            )\n            exp_s = np.exp(s_)\n            yhat = exp_s + c_\n            diff = yhat - yt  # shape (N,)\n            # dMSE/dp = (2/N) * sum(diff * dyhat/dp)\n            invN2 = 2.0 / N\n            grad = np.empty_like(p)\n            # derivative w.r.t. w0: exp_s\n            grad[0] = invN2 * np.dot(diff, exp_s)\n            # w_lr, w_bsz, w_D, w_P\n            grad[1] = invN2 * np.dot(diff, exp_s * log_lr)\n            grad[2] = invN2 * np.dot(diff, exp_s * log_bsz)\n            grad[3] = invN2 * np.dot(diff, exp_s * log_D)\n            grad[4] = invN2 * np.dot(diff, exp_s * log_P)\n            # derivative w.r.t. c: 1\n            grad[5] = invN2 * np.sum(diff)\n            return grad\n\n        # enforce c >= 0\n        bounds = [(-np.inf, np.inf)] * 5 + [(0.0, np.inf)]\n        res = minimize(\n            obj,\n            p0,\n            jac=jac,\n            method=\"L-BFGS-B\",\n            bounds=bounds,\n            options={\"maxiter\": 1000, \"ftol\": 1e-12}\n        )\n        if res.success:\n            params_opt[t] = res.x\n        else:\n            # fallback to initial guess\n            params_opt[t] = p0\n\n    # return 1D if single target\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.362), Excellent nmae (1.106)\n\n\n### Inspiration 4 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 5 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss using a 6-parameter power-law with additive floor:\n      y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_params))\n           + c\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    w0, w1, w2, w3, w4, c = p\n\n    # compute linear combination in log-space\n    logX = np.log(X)\n    lin = (\n        w0\n        + w1 * logX[:, 0]\n        + w2 * logX[:, 1]\n        + w3 * logX[:, 2]\n        + w4 * logX[:, 3]\n    )\n    # exponentiate and add floor\n    y_pred = np.exp(lin) + c\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model:\n      loss \u2248 exp(w0 + \u03a3 wi\u00b7log(xi)) + c\n    by alternating least squares in log-space for numerical stability.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 6 [w0, w1, w2, w3, w4, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected input with 4 features, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # constants\n    eps = 1e-12\n    max_iter = 5\n\n    # avoid zeros\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-features\n    logX = np.log(X)\n\n    # initialize floor c just below the minimum observed loss\n    c = 0.9 * np.min(y)\n\n    # alternating least squares\n    for _ in range(max_iter):\n        # subtract current floor and clamp positive\n        y_adj = np.clip(y - c, eps, None)\n        # fit linear model in log-space: log(y_adj) \u2248 w0 + \u03a3 wi logX\n        y_log = np.log(y_adj)\n        # design matrix: column of ones + log-features\n        M = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n        # solve least squares for [w0, w1..w4]\n        w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n        # compute predictions without floor\n        lin = M.dot(w)\n        pred_no_c = np.exp(lin)\n        # update floor c as mean residual, clipped to [0, min(y)-eps]\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - eps)\n\n    # assemble final parameters\n    params = np.empty(6, dtype=float)\n    params[0:5] = w  # w0,w1..w4\n    params[5] = c\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}