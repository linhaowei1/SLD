{"id": "6aa9d372-f2de-4fdf-9174-cee457777c67", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with second\u2010order terms for lr and bsz,\nplus an interaction between data size and non\u2010embedding parameter size.\nThis captures U\u2010shaped lr/bsz effects and D\u00d7P coupling while remaining\nparameter\u2010efficient and numerically stable via ridge regression.\n\nModel form (in log\u2010space):\n    Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n    Features z = [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n    ln(loss) \u2248 w \u00b7 z\n\nThus loss \u2248 exp(w0 + w1\u00b7x1 + w2\u00b7x1^2 + w3\u00b7x2 + w4\u00b7x2^2 + w5\u00b7x3 + w6\u00b7x4 + w7\u00b7x3\u00b7x4).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 8, or shape (T,8) for T parameter sets:\n                     [w0, w1, w2, w3, w4, w5, w6, w7]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,8)\n    T, P = p.shape\n    if P != 8:\n        raise ValueError(f\"params must have length 8, got {P}\")\n\n    # log\u2010transform features (add tiny epsilon for safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)  # shape (N,4)\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,8)\n    # columns: [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # compute ln\u2010predictions: shape (N,T)\n    lnY = Z.dot(p.T)      # (N,8) dot (8,T) -> (N,T)\n    Y = np.exp(lnY)\n\n    # if only one parameter set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 8:\n                     [w0, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # log\u2010transform inputs and targets (tiny eps for numerical safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)    # (N,4)\n    lnY = np.log(y + eps)    # (N,)\n\n    # extract log\u2010features\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,8)\n    Z = np.empty((N, 8), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # ridge regularization parameter\n    lambd = 1e-6\n\n    # normal equation: (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # add small ridge to diagonal for numerical stability\n    M.flat[::9] += lambd\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)  # shape (8,)\n\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7287baa5-3e65-41ed-8ac0-ad4581219c4c", "generation": 2, "timestamp": 1754799148.3395026, "iteration_found": 12, "metrics": {"nmse": 255.23935427940594, "nmae": 21.60905741275988, "r2": -254.23935427940594, "combined_score": 0.0039026011551277565}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00266345046407, "nmae": 17.397471889837, "r2": -164.00266345046407, "combined_score": 0.006023999731175424}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0027\n- nmae: 17.3975\n- r2: -164.0027\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with second\u2010order terms for lr and bsz,\nplus an interaction between data size and non\u2010embedding parameter size.\nThis captures U\u2010shaped lr/bsz effects and D\u00d7P coupling while remaining\nparameter\u2010efficient and numerically stable via ridge regression.\n\nModel form (in log\u2010space):\n    Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n    Features z = [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n    ln(loss) \u2248 w \u00b7 z\n\nThus loss \u2248 exp(w0 + w1\u00b7x1 + w2\u00b7x1^2 + w3\u00b7x2 + w4\u00b7x2^2 + w5\u00b7x3 + w6\u00b7x4 + w7\u00b7x3\u00b7x4).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 8, or shape (T,8) for T parameter sets:\n                     [w0, w1, w2, w3, w4, w5, w6, w7]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,8)\n    T, P = p.shape\n    if P != 8:\n        raise ValueError(f\"params must have length 8, got {P}\")\n\n    # log\u2010transform features (add tiny epsilon for safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)  # shape (N,4)\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,8)\n    # columns: [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # compute ln\u2010predictions: shape (N,T)\n    lnY = Z.dot(p.T)      # (N,8) dot (8,T) -> (N,T)\n    Y = np.exp(lnY)\n\n    # if only one parameter set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 8:\n                     [w0, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # log\u2010transform inputs and targets (tiny eps for numerical safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)    # (N,4)\n    lnY = np.log(y + eps)    # (N,)\n\n    # extract log\u2010features\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,8)\n    Z = np.empty((N, 8), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # ridge regularization parameter\n    lambd = 1e-6\n\n    # normal equation: (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # add small ridge to diagonal for numerical stability\n    M.flat[::9] += lambd\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)  # shape (8,)\n\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}