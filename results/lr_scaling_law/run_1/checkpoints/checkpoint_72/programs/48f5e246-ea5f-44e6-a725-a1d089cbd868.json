{"id": "48f5e246-ea5f-44e6-a725-a1d089cbd868", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using a log\u2010space polynomial scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      => loss = exp(ln(loss))\n\n    Features: intercept, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4\n    where x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_param_size).\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10, or shape (T,10), coefficients [w0..w9]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted LM loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    # Safe log transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build feature matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    # Prepare params array\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]   # shape (1,10)\n    if p.ndim != 2 or p.shape[1] != Z.shape[1]:\n        raise ValueError(f\"params must have shape (10,) or (T,10), got {p.shape}\")\n    # Compute ln\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)       # shape (N,T)\n    Y = np.exp(lnY)\n    # If single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010space polynomial scaling law via ridge regression:\n\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n\n    Closed\u2010form ridge solution in log\u2010space with light regularization and feature\n    standardization for numerical stability.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: fitted coefficients [w0..w9]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    # Safe log\u2010transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    P = Z.shape[1]\n    # Standardize features (except intercept) for numerical stability\n    means = np.zeros(P, dtype=np.float64)\n    scales = np.ones(P, dtype=np.float64)\n    # Compute mean and std for columns 1..P-1\n    for j in range(1, P):\n        col = Z[:, j]\n        m = col.mean()\n        s = col.std()\n        # avoid degenerate scale\n        if s < eps:\n            s = 1.0\n        means[j] = m\n        scales[j] = s\n        Z[:, j] = (col - m) / s\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    # Build normal equations: (Z^T Z + \u03bb\u00b7diag([0,1,..,1])) \u03b2 = Z^T lnY\n    M = Z.T.dot(Z)\n    # add regularization to diag entries 1..P-1\n    diag_idx = np.arange(P)\n    M[diag_idx[1:], diag_idx[1:]] += lam\n    v = Z.T.dot(lnY)\n    # Solve for scaled weights \u03b2\n    beta = np.linalg.solve(M, v)  # shape (P,)\n    # Un\u2010scale to original weights w\n    w = np.empty_like(beta)\n    # for j>=1: w[j] = \u03b2[j] / scales[j]\n    w[1:] = beta[1:] / scales[1:]\n    # intercept: w[0] = \u03b2[0] - sum_{j>=1}(\u03b2[j] * means[j] / scales[j])\n    w[0] = beta[0] - np.dot(beta[1:] / scales[1:], means[1:])\n    return w", "language": "python", "parent_id": "714daac2-356e-4300-a44c-e3433ec5b6c0", "generation": 4, "timestamp": 1754799560.6937618, "iteration_found": 54, "metrics": {"nmse": 6.462390005103453, "nmae": 2.8936619709453617, "r2": -5.462390005103453, "combined_score": 0.13400532527998538}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 6.916441789505186, "nmae": 3.309884989891167, "r2": -5.916441789505186, "combined_score": 0.12631937764333698}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 6.9164\n- nmae: 3.3099\n- r2: -5.9164\n- combined_score: 0.1263\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 49.9970, nmae: 9.5232, r2: -48.9970, combined_score: 0.0196\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 6.9164, nmae: 3.3099, r2: -5.9164, combined_score: 0.1263\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 6.4127, nmae: 2.8789, r2: -5.4127, combined_score: 0.1349\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0035)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform to avoid log(0)\n    eps = 1e-12\n    lnX = np.log(X + eps)   # shape (N,4)\n    x1 = lnX[:, 0]          # ln(lr)\n    x2 = lnX[:, 1]          # ln(bsz)\n    x3 = lnX[:, 2]          # ln(data_size)\n    x4 = lnX[:, 3]          # ln(non_embed_param_size)\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Compute log\u2010predictions and return in original scale\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)    # shape (N,4)\n    lnY = np.log(y + eps)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization strength for numerical stability\n    lambd = 1e-6\n    M = Z.T.dot(Z)\n    np.fill_diagonal(M, M.diagonal() + lambd)\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.4127), Performs well on nmae (2.8789), Performs well on r2 (-5.4127), Performs well on combined_score (0.1349)\n\n\n### Program 2 (Score: 1.1091)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with:\n  - second\u2010order terms for lr and bsz (to capture U\u2010shaped effects),\n  - squared terms for data_size and non-embedding param size (to capture diminishing returns),\n  - interaction terms lr\u00d7bsz and data_size\u00d7param_size (to capture coupling).\nThis remains parameter\u2010efficient and numerically stable via ridge regression.\n\nFeatures (in log\u2010space):\n    x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params)\nZ = [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x1*x2, x3*x4]\n\nln(loss) \u2248 Z \u00b7 w    \u21d2    loss \u2248 exp(Z\u00b7w)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the expanded polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embed_params]\n      params:      1D array of length 11 (or 2D of shape (T,11)) for coefficients w\n    Returns:\n      preds:       array of shape (N,) (or (N,T) if params is 2D) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # log-transform with clipping to avoid log(0)\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])\n    # Prepare parameters\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != Z.shape[1]:\n        raise ValueError(f\"params must have length {Z.shape[1]}, got {P}\")\n    # Compute predictions in log-space then exponentiate\n    lnY = Z.dot(p.T)         # shape (N,T)\n    Y   = np.exp(lnY)\n    # If single parameter set, return (N,) vector\n    if Y.shape[1] == 1:\n        return Y[:,0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial scaling law via ridge regression in log-space.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 11 of fitted coefficients w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    # log-transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])\n    # Ridge regularization: no penalty on intercept (w[0])\n    lambd = 1e-4\n    P = Z.shape[1]\n    M = Z.T.dot(Z)\n    reg = lambd * np.ones(P)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n    # Solve for coefficients\n    w = np.linalg.solve(M, v)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.9164), Performs well on nmae (3.3099), Performs well on r2 (-5.9164), Performs well on combined_score (0.1263)\n\n\n### Program 3 (Score: 2.6357)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus multiplicative power\u2010law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log\u2010transform the four features\n    X_log = np.log(X)               # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.shape[0] != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.shape[0]}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]                  # length 4\n\n    # compute the log\u2010term and apply exponential, then add offset\n    log_term = w0 + X_log.dot(w)   # shape (N,)\n    preds    = L_inf + np.exp(log_term)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six\u2010parameter model\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    by minimizing mean\u2010squared error with L-BFGS-B under bounds on L_inf.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,)   array of LM losses\n    Returns:\n      params:      (6,)   array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # safeguard against zeros or negatives\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # work in log\u2010feature space\n    X_log = np.log(X)   # (N,4)\n    # prepare a good initial guess\n    min_y = y.min()\n    # initial offset at half the minimum observed loss\n    init_L = 0.5 * min_y\n    # y - init_L must be positive for the log\n    y_off = np.clip(y - init_L, eps, None)\n    # initial magnitude term\n    init_w0 = np.log(np.mean(y_off))\n    # start the four power\u2010law exponents at zero\n    init_ws = np.zeros(4, dtype=np.float64)\n    init_params = np.concatenate(([init_L], [init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so model stays well\u2010behaved\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B to refine all parameters\n    try:\n        res = minimize(\n            _obj,\n            init_params,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        return res.x if res.success else init_params\n    except Exception:\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (49.9970), Performs well on nmae (9.5232), Performs well on r2 (-48.9970), Performs well on combined_score (0.0196)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.5588)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a log\u2013linear model with a quadratic term for learning rate:\n      log(loss) = w0\n                  + w1 * log(lr)\n                  + w2 * (log(lr))^2\n                  + w3 * log(bsz)\n                  + w4 * log(data_size)\n                  + w5 * log(non_embedding_param_size)\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform inputs\n    X_log = np.log(X)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    # quadratic term for learning rate\n    lr_sq = lr * lr\n    # design matrix: [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    A = np.hstack([\n        np.ones((X.shape[0], 1), dtype=np.float64),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n    # linear model in log-space, then exponentiate\n    log_pred = A.dot(np.asarray(params, dtype=np.float64))\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear model with quadratic lr term via ridge regression:\n      log(loss) = w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                  + w4*log(data_size) + w5*log(non_embedding_param_size)\n    Returns:\n      params: (6,) array [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log-transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    lr_sq    = lr * lr\n    # build design matrix\n    A = np.hstack([\n        np.ones((X.shape[0], 1), dtype=np.float64),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])  # shape (N,6)\n    # standardize columns (except intercept) for numerical stability\n    # compute std dev per column\n    stds = A.std(axis=0)\n    # avoid dividing by zero\n    stds[stds < eps] = 1.0\n    # intercept (col 0) not scaled\n    stds[0] = 1.0\n    A_scaled = A / stds[np.newaxis, :]\n    # ridge regularization (do not regularize intercept)\n    d = A_scaled.shape[1]\n    ridge = 1e-6\n    # build regularization matrix\n    reg = ridge * np.eye(d, dtype=np.float64)\n    reg[0, 0] = 0.0\n    # closed-form solution: w = (A^T A + reg)^-1 A^T y\n    ATA = A_scaled.T.dot(A_scaled)\n    ATy = A_scaled.T.dot(y_log)\n    w_scaled = np.linalg.solve(ATA + reg, ATy)\n    # unscale weights\n    params = w_scaled / stds\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.6357)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0035, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform to avoid log(0)\n    eps = 1e-12\n    lnX = np.log(X + eps)   # shape (N,4)\n    x1 = lnX[:, 0]          # ln(lr)\n    x2 = lnX[:, 1]          # ln(bsz)\n    x3 = lnX[:, 2]          # ln(data_size)\n    x4 = lnX[:, 3]          # ln(non_embed_param_size)\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Compute log\u2010predictions and return in original scale\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)    # shape (N,4)\n    lnY = np.log(y + eps)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization strength for numerical stability\n    lambd = 1e-6\n    M = Z.T.dot(Z)\n    np.fill_diagonal(M, M.diagonal() + lambd)\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.413), Excellent nmae (2.879)\n\n\n### Inspiration 2 (Score: 5.6532, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with second\u2010order terms for lr and bsz,\nplus an interaction between data size and non\u2010embedding parameter size.\nThis captures U\u2010shaped lr/bsz effects and D\u00d7P coupling while remaining\nparameter\u2010efficient and numerically stable via ridge regression.\n\nModel form (in log\u2010space):\n    Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n    Features z = [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n    ln(loss) \u2248 w \u00b7 z\n\nThus loss \u2248 exp(w0 + w1\u00b7x1 + w2\u00b7x1^2 + w3\u00b7x2 + w4\u00b7x2^2 + w5\u00b7x3 + w6\u00b7x4 + w7\u00b7x3\u00b7x4).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 8, or shape (T,8) for T parameter sets:\n                     [w0, w1, w2, w3, w4, w5, w6, w7]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,8)\n    T, P = p.shape\n    if P != 8:\n        raise ValueError(f\"params must have length 8, got {P}\")\n\n    # log\u2010transform features (add tiny epsilon for safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)  # shape (N,4)\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,8)\n    # columns: [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # compute ln\u2010predictions: shape (N,T)\n    lnY = Z.dot(p.T)      # (N,8) dot (8,T) -> (N,T)\n    Y = np.exp(lnY)\n\n    # if only one parameter set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 8:\n                     [w0, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # log\u2010transform inputs and targets (tiny eps for numerical safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)    # (N,4)\n    lnY = np.log(y + eps)    # (N,)\n\n    # extract log\u2010features\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,8)\n    Z = np.empty((N, 8), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # ridge regularization parameter\n    lambd = 1e-6\n\n    # normal equation: (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # add small ridge to diagonal for numerical stability\n    M.flat[::9] += lambd\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)  # shape (8,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (255.239), Excellent nmae (21.609)\n\n\n### Inspiration 3 (Score: 4.5588, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a log\u2013linear model with a quadratic term for learning rate:\n      log(loss) = w0\n                  + w1 * log(lr)\n                  + w2 * (log(lr))^2\n                  + w3 * log(bsz)\n                  + w4 * log(data_size)\n                  + w5 * log(non_embedding_param_size)\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform inputs\n    X_log = np.log(X)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    # quadratic term for learning rate\n    lr_sq = lr * lr\n    # design matrix: [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    A = np.hstack([\n        np.ones((X.shape[0], 1), dtype=np.float64),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n    # linear model in log-space, then exponentiate\n    log_pred = A.dot(np.asarray(params, dtype=np.float64))\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear model with quadratic lr term via ridge regression:\n      log(loss) = w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                  + w4*log(data_size) + w5*log(non_embedding_param_size)\n    Returns:\n      params: (6,) array [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log-transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    lr_sq    = lr * lr\n    # build design matrix\n    A = np.hstack([\n        np.ones((X.shape[0], 1), dtype=np.float64),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])  # shape (N,6)\n    # standardize columns (except intercept) for numerical stability\n    # compute std dev per column\n    stds = A.std(axis=0)\n    # avoid dividing by zero\n    stds[stds < eps] = 1.0\n    # intercept (col 0) not scaled\n    stds[0] = 1.0\n    A_scaled = A / stds[np.newaxis, :]\n    # ridge regularization (do not regularize intercept)\n    d = A_scaled.shape[1]\n    ridge = 1e-6\n    # build regularization matrix\n    reg = ridge * np.eye(d, dtype=np.float64)\n    reg[0, 0] = 0.0\n    # closed-form solution: w = (A^T A + reg)^-1 A^T y\n    ATA = A_scaled.T.dot(A_scaled)\n    ATy = A_scaled.T.dot(y_log)\n    w_scaled = np.linalg.solve(ATA + reg, ATy)\n    # unscale weights\n    params = w_scaled / stds\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (163.095), Excellent nmae (17.229)\n\n\n### Inspiration 4 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.397)\n\n\n### Inspiration 5 (Score: 2.6357, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.997), Excellent nmae (9.523)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe fit a log\u2010space polynomial model with:\n  - second\u2010order terms for lr and bsz (to capture U\u2010shaped effects),\n  - squared terms for data_size and non-embedding param size (to capture diminishing returns),\n  - interaction terms lr\u00d7bsz and data_size\u00d7param_size (to capture coupling).\nThis remains parameter\u2010efficient and numerically stable via ridge regression.\n\nFeatures (in log\u2010space):\n    x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params)\nZ = [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x1*x2, x3*x4]\n\nln(loss) \u2248 Z \u00b7 w    \u21d2    loss \u2248 exp(Z\u00b7w)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the expanded polynomial scaling law.\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embed_params]\n      params:      1D array of length 11 (or 2D of shape (T,11)) for coefficients w\n    Returns:\n      preds:       array of shape (N,) (or (N,T) if params is 2D) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # log-transform with clipping to avoid log(0)\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])\n    # Prepare parameters\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != Z.shape[1]:\n        raise ValueError(f\"params must have length {Z.shape[1]}, got {P}\")\n    # Compute predictions in log-space then exponentiate\n    lnY = Z.dot(p.T)         # shape (N,T)\n    Y   = np.exp(lnY)\n    # If single parameter set, return (N,) vector\n    if Y.shape[1] == 1:\n        return Y[:,0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the expanded polynomial scaling law via ridge regression in log-space.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 11 of fitted coefficients w\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    # log-transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d711)\n    Z = np.column_stack([\n        np.ones(N),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x1 * x2,\n        x3 * x4\n    ])\n    # Ridge regularization: no penalty on intercept (w[0])\n    lambd = 1e-4\n    P = Z.shape[1]\n    M = Z.T.dot(Z)\n    reg = lambd * np.ones(P)\n    reg[0] = 0.0\n    M += np.diag(reg)\n    v = Z.T.dot(lnY)\n    # Solve for coefficients\n    w = np.linalg.solve(M, v)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using a log\u2010space polynomial scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      => loss = exp(ln(loss))\n\n    Features: intercept, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4\n    where x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_param_size).\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10, or shape (T,10), coefficients [w0..w9]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted LM loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    # Safe log transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build feature matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    # Prepare params array\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]   # shape (1,10)\n    if p.ndim != 2 or p.shape[1] != Z.shape[1]:\n        raise ValueError(f\"params must have shape (10,) or (T,10), got {p.shape}\")\n    # Compute ln\u2010predictions and exponentiate\n    lnY = Z.dot(p.T)       # shape (N,T)\n    Y = np.exp(lnY)\n    # If single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010space polynomial scaling law via ridge regression:\n\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                 + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n                 + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7[ln(non_embed_param_size)]^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n\n    Closed\u2010form ridge solution in log\u2010space with light regularization and feature\n    standardization for numerical stability.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: fitted coefficients [w0..w9]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    # Safe log\u2010transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))\n    lnY = np.log(np.clip(y, eps, None))\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n    N = X.shape[0]\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones(N),    # intercept\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n    P = Z.shape[1]\n    # Standardize features (except intercept) for numerical stability\n    means = np.zeros(P, dtype=np.float64)\n    scales = np.ones(P, dtype=np.float64)\n    # Compute mean and std for columns 1..P-1\n    for j in range(1, P):\n        col = Z[:, j]\n        m = col.mean()\n        s = col.std()\n        # avoid degenerate scale\n        if s < eps:\n            s = 1.0\n        means[j] = m\n        scales[j] = s\n        Z[:, j] = (col - m) / s\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    # Build normal equations: (Z^T Z + \u03bb\u00b7diag([0,1,..,1])) \u03b2 = Z^T lnY\n    M = Z.T.dot(Z)\n    # add regularization to diag entries 1..P-1\n    diag_idx = np.arange(P)\n    M[diag_idx[1:], diag_idx[1:]] += lam\n    v = Z.T.dot(lnY)\n    # Solve for scaled weights \u03b2\n    beta = np.linalg.solve(M, v)  # shape (P,)\n    # Un\u2010scale to original weights w\n    w = np.empty_like(beta)\n    # for j>=1: w[j] = \u03b2[j] / scales[j]\n    w[1:] = beta[1:] / scales[1:]\n    # intercept: w[0] = \u03b2[0] - sum_{j>=1}(\u03b2[j] * means[j] / scales[j])\n    w[0] = beta[0] - np.dot(beta[1:] / scales[1:], means[1:])\n    return w\n```\n\nExplanation of key improvements:\n- Uses a proven 10\u2010parameter polynomial model in log\u2010space (intercept, quadratic lr & bsz, quadratic data & param, plus data\u00d7param interaction).\n- Applies feature standardization (zero mean, unit variance) before solving for numerical stability.\n- Employs closed\u2010form ridge regression in log\u2010space with light regularization (\u03bb=1e\u20106), penalizing only non\u2010intercept terms.\n- Un\u2010scales the solved coefficients back to the original feature basis.\n- Fully vectorized and requires only a single solve of size 10\u00d710."]}}}