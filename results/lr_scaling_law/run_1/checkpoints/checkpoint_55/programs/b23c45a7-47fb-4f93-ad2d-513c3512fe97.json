{"id": "b23c45a7-47fb-4f93-ad2d-513c3512fe97", "code": "import numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to log\u2010linear with floor init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a floor\u2010augmented\n    power\u2010law in log\u2010space:\n      log_pred = logsumexp(intercept + w\u00b7logX, u_floor)\n      loss = exp(log_pred)\n    where u_floor = log(floor) ensures floor >= 0.\n    Inputs:\n      data_points: np.ndarray (N,4) of positive hyperparameters\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (5,) or (T,5):\n                   params[...,0]    = intercept\n                   params[...,1:5]  = weights w_i\n                   params[...,5]    = u_floor (log floor)\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        # our model has 6 parameters: intercept + 4 weights + 1 u_floor\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]           # (T,)\n    weights   = p[:, 1:5]         # (T,4)\n    u_floor   = p[:, 5]           # (T,)\n\n    # compute log_term = intercept + w\u00b7logX, shape (N,T)\n    log_term = logX.dot(weights.T) + intercept[None, :]\n    # pred_log = logsumexp(log_term, u_floor)\n    # numpy.logaddexp does exactly log(exp(a)+exp(b))\n    pred_log = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(pred_log)  # (N,T)\n\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model by minimizing MSE in log\u2010loss domain:\n      minimize mean((log_pred - log(y))^2) + \u03bb||params||^2\n    where\n      log_pred = logaddexp(intercept + w\u00b7logX, u_floor)\n    Returns:\n      params: np.ndarray shape (6,) = [intercept, w1, w2, w3, w4, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # prepare log\u2010features and log\u2010targets\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)   # (N,4)\n    logy = np.log(yc)   # (N,)\n\n    N = X.shape[0]\n    F = 4\n\n    # initial linear fit on log\u2010loss to get intercept and weights\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    intercept0 = w_lin[0]\n    weights0   = w_lin[1:]\n    # initialize floor small fraction of min loss\n    y_min = np.min(yc)\n    floor0 = max(y_min * 0.05, eps)\n    u0 = np.log(floor0)\n    p0 = np.concatenate([[intercept0], weights0, [u0]])  # shape (6,)\n\n    # objective: MSE in log domain + ridge on all params\n    lambda_reg = 1e-3\n    def _objective(p):\n        # p: (6,)\n        b = p[0]\n        w = p[1:1+F]\n        uf = p[1+F]\n        # log_term: (N,)\n        lt = logX.dot(w) + b\n        pll = np.logaddexp(lt, uf)         # (N,)\n        res = pll - logy\n        mse = np.mean(res*res)\n        reg = lambda_reg * np.sum(p*p)\n        return mse + reg\n\n    # optimize\n    if _HAVE_MINIMIZE:\n        res = minimize(_objective, p0,\n                       method='L-BFGS-B',\n                       options={'maxiter':500, 'ftol':1e-9})\n        if res.success:\n            return res.x\n        else:\n            return p0\n    else:\n        # fallback: no optimizer\n        return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2faf5f44-8630-44d5-991b-7b16cc183a45", "generation": 3, "timestamp": 1754802011.5186238, "iteration_found": 27, "metrics": {"nmse": 4.5451550302496075, "nmae": 2.545778469878871, "r2": -3.5451550302496075, "combined_score": 0.18033760905598817}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.98774453498524, "nmae": 14.128391668137256, "r2": -111.98774453498524, "combined_score": 0.008772872944188126}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9877\n- nmae: 14.1284\n- r2: -111.9877\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 112.9877, nmae: 14.1284, r2: -111.9877, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 105.9241, nmae: 13.6727, r2: -104.9241, combined_score: 0.0094\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.6705)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to log\u2010linear fit\ntry:\n    from scipy.optimize import minimize\n    _have_minimize = True\nexcept ImportError:\n    _have_minimize = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a \n    power\u2010law plus floor model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    where floor >= 0 is parameterized as exp(u).\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (P,) or (T, P) with P = F + 2\n                   params[t,0] = intercept\n                   params[t,1:1+F] = weights w_i on log-features\n                   params[t,1+F] = u (log-floor), floor = exp(u)\n    Returns:\n      predictions: (N,) or (N, T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    params_arr = np.asarray(params, dtype=float)\n    # Ensure params are 2D: (T, P)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    expected_P = F + 2\n    if P != expected_P:\n        raise ValueError(f\"Expected params with {expected_P} elements, got {P}\")\n    # Clip inputs for log stability\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)          # shape (N, F)\n    intercept = params_arr[:, 0]           # (T,)\n    weights   = params_arr[:, 1:1+F]       # (T, F)\n    u_floor   = params_arr[:, 1+F]         # (T,)\n    floor     = np.exp(u_floor)            # (T,)\n    # Compute the power\u2010law term\n    # shape (N, T): each column t is intercept[t] + w[t]\u00b7logX\n    log_term = logX.dot(weights.T) + intercept\n    power_term = np.exp(log_term)          # (N, T)\n    # Add the floor\n    preds = power_term + floor[None, :]    # (N, T)\n    # If single target, return (N,)\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    by minimizing mean squared error in the loss domain.\n    Returns params of shape (P,) or (T, P).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n    P = F + 2\n\n    # Precompute log\u2010features\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)  # (N, F)\n\n    # Helper: initial guess via log\u2010linear regression with zero floor\n    def _init_params(target):\n        # Fit log(y) = b0 + w\u00b7logX\n        y_col = target\n        yc = np.clip(y_col, 1e-12, None)\n        logy = np.log(yc)\n        # design: [1, logX]\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n        # solve least squares\n        w, *_ = np.linalg.lstsq(A, logy, rcond=None)\n        intercept0 = w[0]\n        weights0   = w[1:]\n        # floor init: small fraction of min(y)\n        y_min = np.min(y_col)\n        floor0 = max(y_min * 0.05, 1e-8)\n        u0 = np.log(floor0)\n        return np.concatenate([[intercept0], weights0, [u0]])\n\n    # Objective for one target\n    def _objective(flat_p, target):\n        # flat_p: (P,)\n        intercept = flat_p[0]\n        wts       = flat_p[1:1+F]\n        u_floor   = flat_p[1+F]\n        floor     = np.exp(u_floor)\n        # predict\n        log_term = logX.dot(wts) + intercept\n        pred = np.exp(log_term) + floor\n        # MSE\n        resid = pred - target\n        return np.mean(resid*resid)\n\n    # Container for results\n    params_out = np.zeros((T, P), dtype=float)\n\n    # Loop over each output dimension\n    for t in range(T):\n        ycol = y2d[:, t]\n        # initial guess\n        p0 = _init_params(ycol)\n        if _have_minimize:\n            # optimize\n            res = minimize(\n                fun=lambda p: _objective(p, ycol),\n                x0=p0,\n                method='L-BFGS-B',\n                options={'maxiter': 500, 'ftol':1e-9}\n            )\n            if res.success:\n                params_out[t] = res.x\n            else:\n                # fallback to initial\n                params_out[t] = p0\n        else:\n            # no optimizer: just use the log\u2010linear solution and u0\n            params_out[t] = p0\n\n    # Return shape (P,) if single output\n    if T == 1:\n        return params_out[0]\n    return params_out\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (105.9241), Performs well on nmae (13.6727), Performs well on r2 (-104.9241), Performs well on combined_score (0.0094)\n\n\n### Program 2 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9877), Performs well on nmae (14.1284), Performs well on r2 (-111.9877), Performs well on combined_score (0.0088)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.6705, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to log\u2010linear fit\ntry:\n    from scipy.optimize import minimize\n    _have_minimize = True\nexcept ImportError:\n    _have_minimize = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a \n    power\u2010law plus floor model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    where floor >= 0 is parameterized as exp(u).\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (P,) or (T, P) with P = F + 2\n                   params[t,0] = intercept\n                   params[t,1:1+F] = weights w_i on log-features\n                   params[t,1+F] = u (log-floor), floor = exp(u)\n    Returns:\n      predictions: (N,) or (N, T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    params_arr = np.asarray(params, dtype=float)\n    # Ensure params are 2D: (T, P)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    expected_P = F + 2\n    if P != expected_P:\n        raise ValueError(f\"Expected params with {expected_P} elements, got {P}\")\n    # Clip inputs for log stability\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)          # shape (N, F)\n    intercept = params_arr[:, 0]           # (T,)\n    weights   = params_arr[:, 1:1+F]       # (T, F)\n    u_floor   = params_arr[:, 1+F]         # (T,)\n    floor     = np.exp(u_floor)            # (T,)\n    # Compute the power\u2010law term\n    # shape (N, T): each column t is intercept[t] + w[t]\u00b7logX\n    log_term = logX.dot(weights.T) + intercept\n    power_term = np.exp(log_term)          # (N, T)\n    # Add the floor\n    preds = power_term + floor[None, :]    # (N, T)\n    # If single target, return (N,)\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    by minimizing mean squared error in the loss domain.\n    Returns params of shape (P,) or (T, P).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n    P = F + 2\n\n    # Precompute log\u2010features\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)  # (N, F)\n\n    # Helper: initial guess via log\u2010linear regression with zero floor\n    def _init_params(target):\n        # Fit log(y) = b0 + w\u00b7logX\n        y_col = target\n        yc = np.clip(y_col, 1e-12, None)\n        logy = np.log(yc)\n        # design: [1, logX]\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n        # solve least squares\n        w, *_ = np.linalg.lstsq(A, logy, rcond=None)\n        intercept0 = w[0]\n        weights0   = w[1:]\n        # floor init: small fraction of min(y)\n        y_min = np.min(y_col)\n        floor0 = max(y_min * 0.05, 1e-8)\n        u0 = np.log(floor0)\n        return np.concatenate([[intercept0], weights0, [u0]])\n\n    # Objective for one target\n    def _objective(flat_p, target):\n        # flat_p: (P,)\n        intercept = flat_p[0]\n        wts       = flat_p[1:1+F]\n        u_floor   = flat_p[1+F]\n        floor     = np.exp(u_floor)\n        # predict\n        log_term = logX.dot(wts) + intercept\n        pred = np.exp(log_term) + floor\n        # MSE\n        resid = pred - target\n        return np.mean(resid*resid)\n\n    # Container for results\n    params_out = np.zeros((T, P), dtype=float)\n\n    # Loop over each output dimension\n    for t in range(T):\n        ycol = y2d[:, t]\n        # initial guess\n        p0 = _init_params(ycol)\n        if _have_minimize:\n            # optimize\n            res = minimize(\n                fun=lambda p: _objective(p, ycol),\n                x0=p0,\n                method='L-BFGS-B',\n                options={'maxiter': 500, 'ftol':1e-9}\n            )\n            if res.success:\n                params_out[t] = res.x\n            else:\n                # fallback to initial\n                params_out[t] = p0\n        else:\n            # no optimizer: just use the log\u2010linear solution and u0\n            params_out[t] = p0\n\n    # Return shape (P,) if single output\n    if T == 1:\n        return params_out[0]\n    return params_out\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105.924), Excellent nmae (13.673)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to log\u2010linear with floor init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a floor\u2010augmented\n    power\u2010law in log\u2010space:\n      log_pred = logsumexp(intercept + w\u00b7logX, u_floor)\n      loss = exp(log_pred)\n    where u_floor = log(floor) ensures floor >= 0.\n    Inputs:\n      data_points: np.ndarray (N,4) of positive hyperparameters\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (5,) or (T,5):\n                   params[...,0]    = intercept\n                   params[...,1:5]  = weights w_i\n                   params[...,5]    = u_floor (log floor)\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        # our model has 6 parameters: intercept + 4 weights + 1 u_floor\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]           # (T,)\n    weights   = p[:, 1:5]         # (T,4)\n    u_floor   = p[:, 5]           # (T,)\n\n    # compute log_term = intercept + w\u00b7logX, shape (N,T)\n    log_term = logX.dot(weights.T) + intercept[None, :]\n    # pred_log = logsumexp(log_term, u_floor)\n    # numpy.logaddexp does exactly log(exp(a)+exp(b))\n    pred_log = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(pred_log)  # (N,T)\n\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model by minimizing MSE in log\u2010loss domain:\n      minimize mean((log_pred - log(y))^2) + \u03bb||params||^2\n    where\n      log_pred = logaddexp(intercept + w\u00b7logX, u_floor)\n    Returns:\n      params: np.ndarray shape (6,) = [intercept, w1, w2, w3, w4, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # prepare log\u2010features and log\u2010targets\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)   # (N,4)\n    logy = np.log(yc)   # (N,)\n\n    N = X.shape[0]\n    F = 4\n\n    # initial linear fit on log\u2010loss to get intercept and weights\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    intercept0 = w_lin[0]\n    weights0   = w_lin[1:]\n    # initialize floor small fraction of min loss\n    y_min = np.min(yc)\n    floor0 = max(y_min * 0.05, eps)\n    u0 = np.log(floor0)\n    p0 = np.concatenate([[intercept0], weights0, [u0]])  # shape (6,)\n\n    # objective: MSE in log domain + ridge on all params\n    lambda_reg = 1e-3\n    def _objective(p):\n        # p: (6,)\n        b = p[0]\n        w = p[1:1+F]\n        uf = p[1+F]\n        # log_term: (N,)\n        lt = logX.dot(w) + b\n        pll = np.logaddexp(lt, uf)         # (N,)\n        res = pll - logy\n        mse = np.mean(res*res)\n        reg = lambda_reg * np.sum(p*p)\n        return mse + reg\n\n    # optimize\n    if _HAVE_MINIMIZE:\n        res = minimize(_objective, p0,\n                       method='L-BFGS-B',\n                       options={'maxiter':500, 'ftol':1e-9})\n        if res.success:\n            return res.x\n        else:\n            return p0\n    else:\n        # fallback: no optimizer\n        return p0\n# EVOLVE-BLOCK-END\n```"]}}}