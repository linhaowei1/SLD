{"id": "8a38ac7f-ab7c-4151-b24c-c03bec6b07f6", "code": "import numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A compact normalized\u2010log polynomial scaling law:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + \u03b81*z_lr + \u03b82*z_bsz + \u03b83*z_data + \u03b84*z_param\n               + \u03b85*z_lr^2 + \u03b86*z_bsz^2 + \u03b87*z_data^2 + \u03b88*z_param^2\n               + \u03b89*(z_lr*z_data) + \u03b810*(z_lr*z_param)\n      loss = exp(log_loss)\n\n    params: length\u201011 array [\u03b80 \u2026 \u03b810].\n    data_points: shape (N,4) with columns [lr, bsz, data_size, non_embed_param_size].\n    Returns: (N,) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {theta.size}\")\n\n    # Safe log transform and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n    z_lr, z_bsz, z_data, z_param = z.T\n\n    # Build design matrix\n    A = np.column_stack([\n        np.ones(N),           # \u03b80\n        z_lr,                 # \u03b81\n        z_bsz,                # \u03b82\n        z_data,               # \u03b83\n        z_param,              # \u03b84\n        z_lr * z_lr,          # \u03b85\n        z_bsz * z_bsz,        # \u03b86\n        z_data * z_data,      # \u03b87\n        z_param * z_param,    # \u03b88\n        z_lr * z_data,        # \u03b89\n        z_lr * z_param        # \u03b810\n    ])                       # shape (N,11)\n\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter normalized\u2010log polynomial scaling law via\n    ridge\u2010regularized least squares on log(loss). No penalty on \u03b80.\n    Returns optimized params of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Safe log transform and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n    z_lr, z_bsz, z_data, z_param = z.T\n\n    # Build design matrix A (N\u00d711)\n    A = np.column_stack([\n        np.ones(N),           # \u03b80\n        z_lr,                 # \u03b81\n        z_bsz,                # \u03b82\n        z_data,               # \u03b83\n        z_param,              # \u03b84\n        z_lr * z_lr,          # \u03b85\n        z_bsz * z_bsz,        # \u03b86\n        z_data * z_data,      # \u03b87\n        z_param * z_param,    # \u03b88\n        z_lr * z_data,        # \u03b89\n        z_lr * z_param        # \u03b810\n    ])                       # shape (N,11)\n\n    y_log = np.log(y + eps)\n\n    # Ridge regularization matrix (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize \u03b80\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "43fd7245-7f6d-4638-b96c-61c3287a451f", "generation": 3, "timestamp": 1754803826.233737, "iteration_found": 27, "metrics": {"nmse": 27.685915609815524, "nmae": 6.8948437535415215, "r2": -26.685915609815524, "combined_score": 0.034860313109818526}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.237640076708638, "nmae": 3.186254040646542, "r2": -7.237640076708638, "combined_score": 0.10825275629880342}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.2376\n- nmae: 3.1863\n- r2: -7.2376\n- combined_score: 0.1083\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 154.8389, nmae: 16.6143, r2: -153.8389, combined_score: 0.0064\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([1.2e-4,    # lr\n                            16.0,      # bsz\n                            4e9,       # data_size\n                            2.14e8     # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MAX = np.log(np.array([2.2e-2,    # lr\n                            4096.0,    # bsz\n                            1e11,      # data_size\n                            1e9        # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is a vector of length 1 + 4 + 4 + 6 = 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    theta0 = p[0]\n    lin_coeffs = p[1 : 1 + F]\n    quad_coeffs = p[1 + F : 1 + 2 * F]\n    cross_coeffs = p[1 + 2 * F :]\n\n    # Compute normalized logs\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Build log\u2010prediction\n    log_pred = theta0 + z.dot(lin_coeffs) + (z ** 2).dot(quad_coeffs)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += cross_coeffs[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    # Return in original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Intercept\n    A_cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    A_cols.append(z)\n    # Quadratic terms\n    A_cols.append(z ** 2)\n    # Pairwise interaction terms\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        A_cols.append(np.concatenate(cross_cols, axis=1))\n\n    A = np.concatenate(A_cols, axis=1)  # shape (N,15)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 4.4052)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A simplified log\u2013polynomial scaling law capturing:\n      - Power\u2010law effects of model size, data size, and batch size\n      - A U\u2010shaped dependence on learning rate via a quadratic term\n      - Interaction between learning rate and data/model size to let the optimal\n        learning rate shift with scale\n    Model form in log\u2010domain:\n      log L = \u03b80\n            + \u03b81*\u2113r + \u03b82*\u2113r^2\n            + \u03b83*\u2113bsz\n            + \u03b84*\u2113data\n            + \u03b85*\u2113param\n            + \u03b86*(\u2113r*\u2113data)\n            + \u03b87*(\u2113r*\u2113param)\n            + \u03b88*(\u2113data*\u2113param)\n    where \u2113r = log(lr), \u2113bsz = log(bsz), \u2113data = log(data_size), \u2113param = log(non_embed_param_size).\n    Returns exp(log L).\n    Inputs:\n      data_points: (N,4) array [[lr, bsz, data_size, non_embed_param_size], ...]\n      params:      length\u20109 array [\u03b80 \u2026 \u03b88]\n    Output:\n      preds: (N,) predicted language\u2010model losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)         # shape (N,4)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix with 9 features\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),             # intercept \u03b80\n        lr_log,                 # \u03b81 * \u2113r\n        lr_log**2,              # \u03b82 * \u2113r^2\n        bsz_log,                # \u03b83 * \u2113bsz\n        data_log,               # \u03b84 * \u2113data\n        param_log,              # \u03b85 * \u2113param\n        lr_log * data_log,      # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,     # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log    # \u03b88 * (\u2113data * \u2113param)\n    ])                          # shape (N,9)\n\n    log_pred = A.dot(theta)     # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2013polynomial model via ridge\u2010regularized least squares\n    on the log\u2010loss. Solves:\n      \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (No penalty on the intercept term \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,) observed lm losses\n    Output:\n      theta_opt: (9,) optimized parameter vector\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build the same design matrix A (N\u00d79)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (154.8389), Performs well on nmae (16.6143), Performs well on r2 (-153.8389), Performs well on combined_score (0.0064)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.4052, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A simplified log\u2013polynomial scaling law capturing:\n      - Power\u2010law effects of model size, data size, and batch size\n      - A U\u2010shaped dependence on learning rate via a quadratic term\n      - Interaction between learning rate and data/model size to let the optimal\n        learning rate shift with scale\n    Model form in log\u2010domain:\n      log L = \u03b80\n            + \u03b81*\u2113r + \u03b82*\u2113r^2\n            + \u03b83*\u2113bsz\n            + \u03b84*\u2113data\n            + \u03b85*\u2113param\n            + \u03b86*(\u2113r*\u2113data)\n            + \u03b87*(\u2113r*\u2113param)\n            + \u03b88*(\u2113data*\u2113param)\n    where \u2113r = log(lr), \u2113bsz = log(bsz), \u2113data = log(data_size), \u2113param = log(non_embed_param_size).\n    Returns exp(log L).\n    Inputs:\n      data_points: (N,4) array [[lr, bsz, data_size, non_embed_param_size], ...]\n      params:      length\u20109 array [\u03b80 \u2026 \u03b88]\n    Output:\n      preds: (N,) predicted language\u2010model losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)         # shape (N,4)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix with 9 features\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),             # intercept \u03b80\n        lr_log,                 # \u03b81 * \u2113r\n        lr_log**2,              # \u03b82 * \u2113r^2\n        bsz_log,                # \u03b83 * \u2113bsz\n        data_log,               # \u03b84 * \u2113data\n        param_log,              # \u03b85 * \u2113param\n        lr_log * data_log,      # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,     # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log    # \u03b88 * (\u2113data * \u2113param)\n    ])                          # shape (N,9)\n\n    log_pred = A.dot(theta)     # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2013polynomial model via ridge\u2010regularized least squares\n    on the log\u2010loss. Solves:\n      \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (No penalty on the intercept term \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,) observed lm losses\n    Output:\n      theta_opt: (9,) optimized parameter vector\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build the same design matrix A (N\u00d79)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (154.839), Excellent nmae (16.614)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([1.2e-4,    # lr\n                            16.0,      # bsz\n                            4e9,       # data_size\n                            2.14e8     # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MAX = np.log(np.array([2.2e-2,    # lr\n                            4096.0,    # bsz\n                            1e11,      # data_size\n                            1e9        # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is a vector of length 1 + 4 + 4 + 6 = 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    theta0 = p[0]\n    lin_coeffs = p[1 : 1 + F]\n    quad_coeffs = p[1 + F : 1 + 2 * F]\n    cross_coeffs = p[1 + 2 * F :]\n\n    # Compute normalized logs\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Build log\u2010prediction\n    log_pred = theta0 + z.dot(lin_coeffs) + (z ** 2).dot(quad_coeffs)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += cross_coeffs[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    # Return in original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Intercept\n    A_cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    A_cols.append(z)\n    # Quadratic terms\n    A_cols.append(z ** 2)\n    # Pairwise interaction terms\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        A_cols.append(np.concatenate(cross_cols, axis=1))\n\n    A = np.concatenate(A_cols, axis=1)  # shape (N,15)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A compact normalized\u2010log polynomial scaling law:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + \u03b81*z_lr + \u03b82*z_bsz + \u03b83*z_data + \u03b84*z_param\n               + \u03b85*z_lr^2 + \u03b86*z_bsz^2 + \u03b87*z_data^2 + \u03b88*z_param^2\n               + \u03b89*(z_lr*z_data) + \u03b810*(z_lr*z_param)\n      loss = exp(log_loss)\n\n    params: length\u201011 array [\u03b80 \u2026 \u03b810].\n    data_points: shape (N,4) with columns [lr, bsz, data_size, non_embed_param_size].\n    Returns: (N,) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {theta.size}\")\n\n    # Safe log transform and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n    z_lr, z_bsz, z_data, z_param = z.T\n\n    # Build design matrix\n    A = np.column_stack([\n        np.ones(N),           # \u03b80\n        z_lr,                 # \u03b81\n        z_bsz,                # \u03b82\n        z_data,               # \u03b83\n        z_param,              # \u03b84\n        z_lr * z_lr,          # \u03b85\n        z_bsz * z_bsz,        # \u03b86\n        z_data * z_data,      # \u03b87\n        z_param * z_param,    # \u03b88\n        z_lr * z_data,        # \u03b89\n        z_lr * z_param        # \u03b810\n    ])                       # shape (N,11)\n\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter normalized\u2010log polynomial scaling law via\n    ridge\u2010regularized least squares on log(loss). No penalty on \u03b80.\n    Returns optimized params of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Safe log transform and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n    z_lr, z_bsz, z_data, z_param = z.T\n\n    # Build design matrix A (N\u00d711)\n    A = np.column_stack([\n        np.ones(N),           # \u03b80\n        z_lr,                 # \u03b81\n        z_bsz,                # \u03b82\n        z_data,               # \u03b83\n        z_param,              # \u03b84\n        z_lr * z_lr,          # \u03b85\n        z_bsz * z_bsz,        # \u03b86\n        z_data * z_data,      # \u03b87\n        z_param * z_param,    # \u03b88\n        z_lr * z_data,        # \u03b89\n        z_lr * z_param        # \u03b810\n    ])                       # shape (N,11)\n\n    y_log = np.log(y + eps)\n\n    # Ridge regularization matrix (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize \u03b80\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\nExplanation of the improvements:\n1. Reduced parameter count from 15 to 11 by focusing on the most salient quadratic and interaction terms, improving statistical efficiency.\n2. Normalized each log\u2010feature to [\u22121,1] via fixed mid\u2010point and half\u2010range for numerical stability and cross\u2010scale consistency.\n3. Included quadratic terms for each feature (capturing U\u2010shapes, e.g. in learning rate) and two targeted interactions (learning\u2010rate\u00d7data and learning\u2010rate\u00d7model\u2010size) to allow optimal learning\u2010rate shifts with scale.\n4. Employed ridge regularization (excluding the intercept) for robust fitting with limited data."]}}}