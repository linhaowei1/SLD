{"id": "6cce337d-1fd7-4746-958b-3a0691f97a32", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Small constant to avoid numerical issues\n_eps = 1e-12\n\n# Hyperparameter ranges from problem statement\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 1e11\n_PARAM_MIN, _PARAM_MAX = 2.14e8, 1e9\n\n# Effective learning\u2010rate (= lr * batch_size) ranges\n_eff_min = _LR_MIN * _BSZ_MIN\n_eff_max = _LR_MAX * _BSZ_MAX\n\n# Precompute log\u2010space centers and half\u2010ranges for three features:\n#   f1 = ln(lr*bsz), f2 = ln(data_size), f3 = ln(param_size)\n_LOG_MIN   = np.log(np.array([_eff_min, _DATA_MIN,  _PARAM_MIN], dtype=np.float64) + _eps)\n_LOG_MAX   = np.log(np.array([_eff_max, _DATA_MAX,  _PARAM_MAX], dtype=np.float64) + _eps)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on three normalized log\u2010features:\n      z_i = (log(feature_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i], i=1..3\n    Features:\n      f1 = ln(lr * bsz),\n      f2 = ln(data_size),\n      f3 = ln(non_embedding_param_size)\n    Design columns (10 total):\n      [1,\n       z1, z2, z3,\n       z1^2, z2^2, z3^2,\n       z1*z2, z1*z3, z2*z3]\n    Returns A of shape (N,10).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # Extract and log\u2010transform features\n    lr    = X[:, 0] + _eps\n    bsz   = X[:, 1] + _eps\n    data  = X[:, 2] + _eps\n    param = X[:, 3] + _eps\n\n    ln_eff   = np.log(lr * bsz)   # effective learning rate\n    ln_data  = np.log(data)\n    ln_param = np.log(param)\n\n    # Stack and normalize\n    logs = np.stack([ln_eff, ln_data, ln_param], axis=1)  # (N,3)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE                 # normalized to ~[-1,1]\n\n    z1, z2, z3 = z[:, 0], z[:, 1], z[:, 2]\n    N = z.shape[0]\n\n    # Build design matrix with 10 columns\n    A = np.empty((N, 10), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = z1\n    A[:, 2] = z2\n    A[:, 3] = z3\n    A[:, 4] = z1 * z1\n    A[:, 5] = z2 * z2\n    A[:, 6] = z3 * z3\n    A[:, 7] = z1 * z2\n    A[:, 8] = z1 * z3\n    A[:, 9] = z2 * z3\n\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 10-parameter quadratic model on normalized log\u2010features.\n    Inputs:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 10\n    Returns:\n      preds: ndarray of shape (N,) with predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,10)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter quadratic scaling law by ridge-regularized least squares\n    on the log-transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,)   array of observed losses (>0)\n    Returns:\n      theta_opt:   ndarray of shape (10,) with optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)       # (N,10)\n    y_log = np.log(y + _eps)          # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    P = A.shape[1]                    # 10\n    ATA = A.T.dot(A)                  # (10,10)\n    lam = 1e-3 * np.trace(ATA) / P    # adaptive \u03bb (stronger regularization)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)              # (10,)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "698db692-a7b3-44c0-9f6e-883e3b370364", "generation": 6, "timestamp": 1754805126.2099903, "iteration_found": 161, "metrics": {"nmse": 22.178215574093972, "nmae": 5.577971120226609, "r2": -21.178215574093972, "combined_score": 0.043143959758390055}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.2376339654398, "nmae": 3.1862533679500347, "r2": -7.2376339654398, "combined_score": 0.10825282791472789}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.2376\n- nmae: 3.1863\n- r2: -7.2376\n- combined_score: 0.1083\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010computed log\u2010ranges for each feature to normalize into roughly [\u22121,1]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P        # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Predefined log\u2010ranges for normalization of each feature (from problem spec)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)                  # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) quadratic terms\n    cols.append(z**2)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix of shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    theta = np.ravel(params).astype(np.float64)\n    A = _build_design_matrix(data_points)     # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n    Returns:\n      theta_opt: ndarray of shape (15,) for single\u2010target,\n                 or (T,15) for multi\u2010target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # ensure 2D targets (N,T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    elif y.ndim == 2:\n        Y = y\n    else:\n        raise ValueError(f\"fit_scaling_law: loss_values must be 1D or 2D, got {y.ndim}D\")\n    if Y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)           # (N,15)\n    eps  = 1e-12\n    Ylog = np.log(Y + eps)                   # (N,T)\n\n    # Normal equations with adaptive ridge regularization\n    ATA  = A.T.dot(A)                        # (15,15)\n    P    = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for scale\u2010invariance\n    lam  = 1e-4 * np.trace(ATA) / P\n    reg  = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                           # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val    = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(Ylog)                      # (15,T)\n\n    # solve for \u03b8 (15,T)\n    try:\n        Theta = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        Theta = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    # return shape: (15,) or (T,15)\n    if Theta.shape[1] == 1:\n        return Theta.ravel()\n    else:\n        return Theta.T\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Input:\n      X: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_param_size]\n    Output:\n      A: array of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                 # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize ~[-1,1]\n    N, F = z.shape\n\n    # constant term\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N, 1+4+4+6 =15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)          # shape (N,15)\n    log_pred = A.dot(theta)              # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)          # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)              # shape (N,)\n\n    # normal equations with ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr minimum\n    16.0,      # batch size minimum\n    4e9,       # data_size (tokens) minimum\n    2.14e8     # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr maximum\n    4096.0,    # batch size maximum\n    1e11,      # data_size (tokens) maximum\n    1e9        # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range for z-score style normalization in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n_eps = 1e-12  # small constant to avoid log(0)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns an (N \u00d7 15) matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # safe log and normalize\n    logs = np.log(X + _eps)                  # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # (N,4), roughly in [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z * z)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # stack to (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter quadratic model in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter quadratic model by ridge-regularized least squares\n    in log-loss space:\n\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n      with \u03bb = 1e-4 * trace(A\u1d40A) / P, and no penalty on intercept \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    A = _build_design_matrix(X)        # (N,15)\n    y_log = np.log(y + _eps)           # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    P = A.shape[1]\n    ATA = A.T.dot(A)                   # (15,15)\n    lam = 1e-4 * np.trace(ATA) / P     # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                    # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants: mean and half\u2010range\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a degree\u20102 polynomial design matrix on normalized log\u2010features.\n    For each sample, features are:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to ~[-1,1]\n    N, F = z.shape\n\n    feats = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n\n    return np.stack(feats, axis=1)  # shape (N, 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]                   # 15\n    lam = 1e-4                       # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: Migrant)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010computed log\u2010ranges for each feature to normalize into roughly [\u22121,1]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P        # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 5.0982, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) hyperparameter ranges for normalization\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 100e9\n_PARAM_MIN, _PARAM_MAX = 214e6, 1e9\n\n# Pre\u2010compute log\u2010space centers and half\u2010ranges\n_eps = 1e-12\n_ln_lr_min, _ln_lr_max = np.log(_LR_MIN + _eps), np.log(_LR_MAX + _eps)\n_ln_bsz_min, _ln_bsz_max = np.log(_BSZ_MIN + _eps), np.log(_BSZ_MAX + _eps)\n_ln_data_min, _ln_data_max = np.log(_DATA_MIN + _eps), np.log(_DATA_MAX + _eps)\n_ln_param_min, _ln_param_max = np.log(_PARAM_MIN + _eps), np.log(_PARAM_MAX + _eps)\n\n_LR_C = 0.5 * (_ln_lr_min + _ln_lr_max)\n_LR_H = 0.5 * (_ln_lr_max - _ln_lr_min)\n_BSZ_C = 0.5 * (_ln_bsz_min + _ln_bsz_max)\n_BSZ_H = 0.5 * (_ln_bsz_max - _ln_bsz_min)\n_DATA_C = 0.5 * (_ln_data_min + _ln_data_max)\n_DATA_H = 0.5 * (_ln_data_max - _ln_data_min)\n_PARAM_C = 0.5 * (_ln_param_min + _ln_param_max)\n_PARAM_H = 0.5 * (_ln_param_max - _ln_param_min)\n\ndef _construct_design(log_feats):\n    \"\"\"\n    Given normalized log\u2010features f of shape (N,4),\n    return design matrix of shape (N,11):\n      [1, f1, f2, f3, f4, f1*f2, f1*f3, f1*f4, f2*f3, f2*f4, f3*f4]\n    \"\"\"\n    f1, f2, f3, f4 = log_feats[:,0], log_feats[:,1], log_feats[:,2], log_feats[:,3]\n    # pairwise interactions\n    i12 = f1 * f2\n    i13 = f1 * f3\n    i14 = f1 * f4\n    i23 = f2 * f3\n    i24 = f2 * f4\n    i34 = f3 * f4\n    ones = np.ones((log_feats.shape[0], 1), dtype=log_feats.dtype)\n    return np.hstack([ones,\n                      log_feats,\n                      i12[:,None], i13[:,None], i14[:,None],\n                      i23[:,None], i24[:,None], i34[:,None]])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters with a normalized\n    log\u2010quadratic scaling law (11 parameters).\n    \n    data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of coefficients [\u03b80 \u2026 \u03b810]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(\"Expected params of length 11, got {}\".format(theta.size))\n    # compute log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    # normalize to roughly [-1,1]\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # build design matrix and predict\n    A = _construct_design(log_feats)  # (N,11)\n    log_pred = A.dot(theta)           # (N,)\n    # return in original loss\u2010space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 11\u2010parameter normalized log\u2010quadratic model via\n    ridge\u2010regularized linear regression on log(loss).\n    \n    Returns optimized \u03b8 of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # compute and normalize log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # design matrix and target\n    A = _construct_design(log_feats)  # (N,11)\n    y_log = np.log(y + _eps)\n    # ridge\u2010regularization (do not penalize intercept)\n    P = A.shape[1]\n    AtA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=AtA.dtype)\n    reg[0,0] = 0.0\n    M = AtA + reg\n    b = A.T.dot(y_log)\n    # solve (M)\u03b8 = b robustly\n    try:\n        theta = np.linalg.solve(M, b)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta = np.linalg.pinv(M).dot(b)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.176), Excellent nmae (19.388)\n\n\n### Inspiration 3 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # Safe log and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # Build log\u2010loss prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # Safe log\u2010transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n    y_log = np.log(y + eps)\n\n    # Solve (A^T A + \u03bbI) \u03b8 = A^T y_log with small ridge for stability\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 4 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Predefined log\u2010ranges for normalization of each feature (from problem spec)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)                  # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) quadratic terms\n    cols.append(z**2)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix of shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    theta = np.ravel(params).astype(np.float64)\n    A = _build_design_matrix(data_points)     # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n    Returns:\n      theta_opt: ndarray of shape (15,) for single\u2010target,\n                 or (T,15) for multi\u2010target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # ensure 2D targets (N,T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    elif y.ndim == 2:\n        Y = y\n    else:\n        raise ValueError(f\"fit_scaling_law: loss_values must be 1D or 2D, got {y.ndim}D\")\n    if Y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)           # (N,15)\n    eps  = 1e-12\n    Ylog = np.log(Y + eps)                   # (N,T)\n\n    # Normal equations with adaptive ridge regularization\n    ATA  = A.T.dot(A)                        # (15,15)\n    P    = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for scale\u2010invariance\n    lam  = 1e-4 * np.trace(ATA) / P\n    reg  = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                           # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val    = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(Ylog)                      # (15,T)\n\n    # solve for \u03b8 (15,T)\n    try:\n        Theta = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        Theta = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    # return shape: (15,) or (T,15)\n    if Theta.shape[1] == 1:\n        return Theta.ravel()\n    else:\n        return Theta.T\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 5 (Score: 3.0722, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6\u2010parameter power law plus bias:\n\n      loss \u2248 b + exp( logA\n                       + e_lr  * ln(lr)\n                       + e_bsz * ln(bsz)\n                       + e_D   * ln(data_size)\n                       + e_N   * ln(non_embedding_param_size) )\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 = [b, logA, e_lr, e_bsz, e_D, e_N]\n\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # add tiny eps to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n\n    Model: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb^{e_N},\n           with A = exp(logA).\n\n    Returns:\n      params_opt: array of length 6 = [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    # small constant\n    eps = 1e-12\n\n    # 1) initialize bias b0 to half of min(y)\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) do linear regression in log\u2010space on y - b0\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    # design matrix: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    logs = np.log(X + eps)\n    A_mat = np.concatenate((np.ones((N, 1)), logs), axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_D0, e_N0]\n    logA0, e_lr0, e_bsz0, e_D0, e_N0 = theta_ls\n\n    # initial parameter vector\n    init_params = np.array([b0, logA0, e_lr0, e_bsz0, e_D0, e_N0], dtype=np.float64)\n\n    # bounds: b\u2208[0, 1.5*max(y)], logA unbounded, exponents \u2208[-5,5]\n    bounds = [(0.0, 1.5 * np.max(y)),  # b\n              (None, None),            # logA\n              (-5.0, 5.0),             # e_lr\n              (-5.0, 5.0),             # e_bsz\n              (-5.0, 5.0),             # e_D\n              (-5.0, 5.0)]             # e_N\n\n    # objective: mean squared error in original loss space\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize with L-BFGS-B\n    result = minimize(_mse, init_params, method='L-BFGS-B', bounds=bounds)\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (72.369), Excellent nmae (11.275)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Given X of shape (N,4), compute a design matrix A of shape (N,15):\n      columns = [1,\n                 z1, z2, z3, z4,\n                 z1^2, z2^2, z3^2, z4^2,\n                 z1*z2, z1*z3, z1*z4,\n                 z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                  # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # normalized to ~[-1,1]\n    N, F = z.shape\n\n    feats = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n\n    # stack into (N, 15)\n    return np.stack(feats, axis=1)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func expects 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)     # (N,15)\n    log_pred = A.dot(theta)         # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-4):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      \u03b8 = argmin ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points:  (N,4) array of hyperparameters\n      loss_values:  (N,)   array of observed losses (>0)\n      ridge_lambda: regularization strength (default 1e-4)\n    Output:\n      theta_opt:    (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    A = _build_design_matrix(X)     # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    P = A.shape[1]                  # 15\n    # ridge regularization matrix (no penalty on intercept)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Small constant to avoid numerical issues\n_eps = 1e-12\n\n# Hyperparameter ranges from problem statement\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 1e11\n_PARAM_MIN, _PARAM_MAX = 2.14e8, 1e9\n\n# Effective learning\u2010rate (= lr * batch_size) ranges\n_eff_min = _LR_MIN * _BSZ_MIN\n_eff_max = _LR_MAX * _BSZ_MAX\n\n# Precompute log\u2010space centers and half\u2010ranges for three features:\n#   f1 = ln(lr*bsz), f2 = ln(data_size), f3 = ln(param_size)\n_LOG_MIN   = np.log(np.array([_eff_min, _DATA_MIN,  _PARAM_MIN], dtype=np.float64) + _eps)\n_LOG_MAX   = np.log(np.array([_eff_max, _DATA_MAX,  _PARAM_MAX], dtype=np.float64) + _eps)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on three normalized log\u2010features:\n      z_i = (log(feature_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i], i=1..3\n    Features:\n      f1 = ln(lr * bsz),\n      f2 = ln(data_size),\n      f3 = ln(non_embedding_param_size)\n    Design columns (10 total):\n      [1,\n       z1, z2, z3,\n       z1^2, z2^2, z3^2,\n       z1*z2, z1*z3, z2*z3]\n    Returns A of shape (N,10).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # Extract and log\u2010transform features\n    lr    = X[:, 0] + _eps\n    bsz   = X[:, 1] + _eps\n    data  = X[:, 2] + _eps\n    param = X[:, 3] + _eps\n\n    ln_eff   = np.log(lr * bsz)   # effective learning rate\n    ln_data  = np.log(data)\n    ln_param = np.log(param)\n\n    # Stack and normalize\n    logs = np.stack([ln_eff, ln_data, ln_param], axis=1)  # (N,3)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE                 # normalized to ~[-1,1]\n\n    z1, z2, z3 = z[:, 0], z[:, 1], z[:, 2]\n    N = z.shape[0]\n\n    # Build design matrix with 10 columns\n    A = np.empty((N, 10), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = z1\n    A[:, 2] = z2\n    A[:, 3] = z3\n    A[:, 4] = z1 * z1\n    A[:, 5] = z2 * z2\n    A[:, 6] = z3 * z3\n    A[:, 7] = z1 * z2\n    A[:, 8] = z1 * z3\n    A[:, 9] = z2 * z3\n\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 10-parameter quadratic model on normalized log\u2010features.\n    Inputs:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 10\n    Returns:\n      preds: ndarray of shape (N,) with predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,10)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter quadratic scaling law by ridge-regularized least squares\n    on the log-transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,)   array of observed losses (>0)\n    Returns:\n      theta_opt:   ndarray of shape (10,) with optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point inputs\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)       # (N,10)\n    y_log = np.log(y + _eps)          # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    P = A.shape[1]                    # 10\n    ATA = A.T.dot(A)                  # (10,10)\n    lam = 1e-3 * np.trace(ATA) / P    # adaptive \u03bb (stronger regularization)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)              # (10,)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- We collapse learning\u2010rate and batch\u2010size into a single \u201ceffective learning\u2010rate\u201d feature (lr \u00d7 bsz) to capture their combined influence and reduce dimensionality.\n- We reduce the model to 10 parameters: intercept, three linear terms, three squared terms, and three pairwise interactions among the three normalized log\u2010features.\n- We increase the ridge regularization strength (\u03bb scaled by 1e-3) to improve generalization, especially on extreme data-size or parameter-size settings.\n- This simpler quadratic form with stronger regularization often yields better cross-configuration R\u00b2 and combined performance while maintaining good NMSE/NMAE."]}}}