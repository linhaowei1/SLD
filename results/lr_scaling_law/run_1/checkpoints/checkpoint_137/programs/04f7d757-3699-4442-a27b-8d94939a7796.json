{"id": "04f7d757-3699-4442-a27b-8d94939a7796", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010computed log\u2010ranges for each feature to normalize into roughly [\u22121,1]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P        # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "25b437dc-57b5-4d91-a2db-f2ec52ca30cd", "generation": 4, "timestamp": 1754804609.9412005, "iteration_found": 120, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 203.20928820779292, "nmae": 18.688065493799545, "r2": -202.20928820779292, "combined_score": 0.004896936906133531}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 203.2093\n- nmae: 18.6881\n- r2: -202.2093\n- combined_score: 0.0049\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # bsz minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # bsz maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range for each log\u2010feature (normalize to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log\u2010features with pairwise interactions:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z ** 2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # final shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by adaptive ridge-regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of corresponding LM loss values\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    # adaptive \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding parameter size max\n], dtype=np.float64))\n\n# Midpoints and half\u2010ranges for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features with\n    pairwise interactions. Output shape is (N,15), columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected X shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z**2)\n    # Pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    with \u03bb = 1e-4 * trace(A\u1d40A)/P and no penalty on the intercept \u03b80.\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non\u2010embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non\u2010embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns: ndarray of shape (N,15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8,\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80)\n\n    Returns optimized \u03b8 of shape (15,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)        # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)            # (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                   # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                    # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_thresh:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_thresh:\n                break\n\n    ATy = A.T.dot(y_log)\n\n    # Solve for \u03b8 robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non-embed param size max\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range for each feature in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features:\n      [1,\n       z_i for i in 0..3,\n       z_i^2 for i in 0..3,\n       z_i * z_j for 0 <= i < j < 4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    # log-transform and normalize\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # roughly in [-1,1]\n    N, F = z.shape\n\n    # assemble columns\n    cols = [np.ones((N,), dtype=np.float64)]  # intercept\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    # stack into (N,15)\n    return np.stack(cols, axis=1)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify shape to (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2, no penalty on \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify shape to (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # design matrix and log-target\n    A = _build_design_matrix(X)  # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)      # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)             # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range for each log\u2010feature to z\u2010score normalize\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010space:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    eps = 1e-12\n\n    # log and normalize to roughly [-1,1]\n    logs = np.log(X + eps)                  # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n\n    # start building columns\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    cols.extend([z[:, i] for i in range(F)])\n    # quadratic terms\n    cols.extend([z[:, i] * z[:, i] for i in range(F)])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    # stack into design matrix (N,15)\n    return np.stack(cols, axis=1)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010degree polynomial:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter scaling law by ridge\u2010regularized least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)  # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)      # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)             # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # bsz minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # bsz maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range for each log\u2010feature (normalize to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log\u2010features with pairwise interactions:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z ** 2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # final shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by adaptive ridge-regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of corresponding LM loss values\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    # adaptive \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 5.0983, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.179), Excellent nmae (19.389)\n\n\n### Inspiration 3 (Score: 4.8007, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range to normalize log\u2010features into roughly [-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design(X):\n    \"\"\"\n    Build a compact design matrix with:\n      - intercept\n      - normalized linear log\u2010features z_i\n      - one synergy interaction term z_data * z_params\n    Returns shape (N, 6).\n    \"\"\"\n    eps = 1e-12\n    # safe log and normalize\n    logs = np.log(X + eps)                 # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    # intercept and linear terms\n    N = X.shape[0]\n    intercept = np.ones((N,1), dtype=np.float64)\n    lin_terms  = z                         # (N,4)\n    # synergy term between data_size (idx=2) and non_embedding_param_size (idx=3)\n    synergy    = (z[:,2] * z[:,3])[:,None]  # (N,1)\n    # stack into (N,6): [1, z_lr, z_bsz, z_data, z_params, z_data*z_params]\n    return np.hstack([intercept, lin_terms, synergy])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 6\u2010parameter log\u2010linear model with one interaction:\n      log_loss \u2248 \u03b80 + \u03a3_{i=1..4} \u03b8_i * z_i + \u03b85 * (z_data * z_params)\n      loss      = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of shape (6,)\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 params, got {theta.size}\")\n    A = _build_design(X)    # (N,6)\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter compact scaling law by ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80 intercept)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (6,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n    # build design and target\n    A = _build_design(X)     # (N,6)\n    eps = 1e-12\n    y_log = np.log(y + eps)  # (N,)\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)         # (6,6)\n    P = ATA.shape[0]\n    lam = 1e-6 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0           # no penalty on intercept\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n    # solve\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (186.384), Excellent nmae (18.197)\n\n\n### Inspiration 4 (Score: 3.6361, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a simple 5-parameter power-law in the raw logs of the inputs:\n      log_loss = \u03b80\n               + \u03b81 * log(lr)\n               + \u03b82 * log(bsz)\n               + \u03b83 * log(data_size)\n               + \u03b84 * log(non_embedding_param_size)\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    # check shape\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {theta.size}\")\n\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_param)]\n    N = X.shape[0]\n    A = np.empty((N, 5), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1:] = logs\n\n    # linear model in log\u2010space\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law scaling law by ridge-regularized least squares\n    on the log of the loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (5,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)  # (N,4)\n\n    N = X.shape[0]\n    # A = [1, log(lr), log(bsz), log(data_size), log(non_emb_param)]\n    A = np.empty((N, 5), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1:] = logs\n\n    # target\n    y_log = np.log(y + eps)  # (N,)\n\n    # normal equations with ridge penalty on \u03b81: (excluding intercept)\n    ATA = A.T.dot(A)          # (5,5)\n    ATy = A.T.dot(y_log)      # (5,)\n\n    P = ATA.shape[0]          # =5\n    # adaptive regularization strength\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = np.eye(P, dtype=np.float64) * lam\n    reg[0, 0] = 0.0  # no penalty on \u03b80\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    try:\n        theta_opt = np.linalg.solve(ATA + reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA + reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (103.848), Excellent nmae (13.535)\n\n\n### Inspiration 5 (Score: 2.1537, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law for LLM hyperparameter tuning.\nModel:   loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embed_param_size^{e_N}\nwith A = exp(logA). Fitted by a closed\u2010form log\u2010linear initialization\nand a single bounded L-BFGS-B refinement.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power law plus bias.\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    \n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects input shape (N,4), got {X.shape}\")\n    \n    # Unpack parameters\n    b, logA, e_lr, e_bsz, e_D, e_N = np.ravel(params)\n    \n    # Feature columns\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    \n    # Numerical stability epsilon\n    eps = 1e-12\n    \n    # Compute log\u2010term and exponentiate\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      1) closed\u2010form ridge regression on log(y - b0)\n      2) single bounded L-BFGS-B refinement minimizing MSE\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n    \n    Returns:\n      params: ndarray of shape (6,) for single\u2010target or (T,6) for multi\u2010target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    \n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n    \n    # Precompute logs of inputs for closed\u2010form initial fit\n    eps = 1e-12\n    Z = np.log(X + eps)               # (N, 4)\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    # Ridge stability\n    lam = 1e-6\n    AtA = A_lin.T @ A_lin + lam * np.eye(5)\n    At  = A_lin.T\n    \n    def _fit_single(y_vec):\n        # Baseline bias estimate: floor on minimal observed loss\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, y_min * 0.9)\n        \n        # Shift and clamp target\n        y_shift = np.maximum(y_vec - b0, eps)\n        \n        # Closed\u2010form log\u2010linear solve: log(y_shift) \u2248 \u03b80 + \u03a3 \u03b8_i * log(x_i)\n        theta_lin = np.linalg.solve(AtA, At @ np.log(y_shift))\n        init = np.zeros(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_lin  # [logA, e_lr, e_bsz, e_D, e_N]\n        \n        # Bounds for optimization\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b \u2265 0\n            (None, None),                  # logA unbounded\n            (-5.0, 5.0),                   # e_lr\n            (-5.0, 5.0),                   # e_bsz\n            (-5.0, 5.0),                   # e_D\n            (-5.0, 5.0),                   # e_N\n        ]\n        \n        # Objective: mean squared error in original loss space\n        def obj(p):\n            preds = scaling_law_func(X, p)\n            return np.mean((preds - y_vec) ** 2)\n        \n        # Single L-BFGS-B refinement\n        res = minimize(\n            obj,\n            init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-12}\n        )\n        return res.x if res.success else init\n    \n    # Fit each target dimension\n    all_params = np.vstack([_fit_single(Y[:, i]) for i in range(T)])\n    return all_params[0] if T == 1 else all_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.362), Excellent nmae (7.586)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log-quadratic scaling law with pairwise interactions.\n    Model in log-domain:\n      \u2113 = \u03b80\n        + \u03b81*log(lr) + \u03b82*(log(lr))^2\n        + \u03b83*log(bsz)\n        + \u03b84*log(data_size)\n        + \u03b85*log(non_embed_param_size)\n        + \u03b86*log(lr)*log(bsz)\n        + \u03b87*log(lr)*log(data_size)\n        + \u03b88*log(lr)*log(non_embed_param_size)\n        + \u03b89*log(bsz)*log(data_size)\n        + \u03b810*log(bsz)*log(non_embed_param_size)\n        + \u03b811*log(data_size)*log(non_embed_param_size)\n    Returns exp(\u2113).\n    Inputs:\n      data_points: array\u2010like of shape (N,4): [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 12 \u03b80\u2026\u03b811\n    Output:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d712)\n    A = np.column_stack([\n        np.ones_like(lr_log),       # \u03b80\n        lr_log,                      # \u03b81\n        lr_log**2,                   # \u03b82\n        bsz_log,                     # \u03b83\n        data_log,                    # \u03b84\n        param_log,                   # \u03b85\n        lr_log * bsz_log,            # \u03b86\n        lr_log * data_log,           # \u03b87\n        lr_log * param_log,          # \u03b88\n        bsz_log * data_log,          # \u03b89\n        bsz_log * param_log,         # \u03b810\n        data_log * param_log         # \u03b811\n    ])\n\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 12\u2010parameter log-quadratic scaling law by ridge-regularized least squares\n    on the log-loss. Solves:\n      \u03b8 = argmin ||A\u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: numpy.ndarray of shape (12,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d712)\n    A = np.column_stack([\n        np.ones_like(lr_log),       # intercept\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * bsz_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        bsz_log * data_log,\n        bsz_log * param_log,\n        data_log * param_log\n    ])\n\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]\n    lam = 1e-6\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n\n    theta_opt = np.linalg.solve(lhs, rhs)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010computed log\u2010ranges for each feature to normalize into roughly [\u22121,1]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P        # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}