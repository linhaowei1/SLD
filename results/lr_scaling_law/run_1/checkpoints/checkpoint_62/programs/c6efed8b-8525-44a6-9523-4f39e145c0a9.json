{"id": "c6efed8b-8525-44a6-9523-4f39e145c0a9", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law with interaction:\n      Let x1=ln(lr), x2=ln(bsz), x3=ln(data_size), x4=ln(non_embedding_param_size).\n      Design features:\n        [1,\n         x1, x1^2,\n         x2, x2^2,\n         x3, x3^2,\n         x4, x4^2,\n         x3 * x4]\n      ln(loss) = Z \u00b7 w  \u2192 loss = exp(Z\u00b7w)\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: weights [w0\u2026w9]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4           # data \u00d7 model\u2010size interaction\n    ])                   # shape (N,10)\n\n    ln_pred = Z.dot(p)   # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law by ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is constructed as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # (N,4)\n    lnY = np.log(np.clip(y, eps, None))   # (N,)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (scale \u03bb by average diag for stability)\n    G = Z.T.dot(Z)\n    diag_mean = np.mean(np.diag(G))\n    lambd = 1e-6 * max(1.0, diag_mean)\n    G.flat[::11] += lambd   # add \u03bb to diagonal of (10\u00d710) matrix\n\n    # normal equations\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(G, b)   # shape (10,)\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ebaeecec-a478-43cd-9190-d568c3ba0052", "generation": 4, "timestamp": 1754799547.818125, "iteration_found": 60, "metrics": {"nmse": 82.10665049173558, "nmae": 12.23875040975977, "r2": -81.10665049173558, "combined_score": 0.012032731364855614}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 228.72097602134357, "nmae": 20.48956967567319, "r2": -227.72097602134357, "combined_score": 0.004353107048905665}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 228.7210\n- nmae: 20.4896\n- r2: -227.7210\n- combined_score: 0.0044\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 163.0945, nmae: 17.2291, r2: -162.0945, combined_score: 0.0061\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 163.0945, nmae: 17.2291, r2: -162.0945, combined_score: 0.0061\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 82.1067, nmae: 12.2388, r2: -81.1067, combined_score: 0.0120\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.3127)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law with interaction:\n      Let x1=ln(lr), x2=ln(bsz), x3=ln(data_size), x4=ln(non_embedding_param_size).\n      Design features:\n        [1,\n         x1, x1^2,\n         x2, x2^2,\n         x3, x3^2,\n         x4, x4^2,\n         x3 * x4]\n      ln(loss) = Z \u00b7 w  \u2192 loss = exp(Z\u00b7w)\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: weights [w0\u2026w9]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4           # data \u00d7 model\u2010size interaction\n    ])                   # shape (N,10)\n\n    ln_pred = Z.dot(p)   # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law by ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is constructed as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # (N,4)\n    lnY = np.log(np.clip(y, eps, None))   # (N,)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (scale \u03bb by average diag for stability)\n    G = Z.T.dot(Z)\n    diag_mean = np.mean(np.diag(G))\n    lambd = 1e-6 * max(1.0, diag_mean)\n    G.flat[::11] += lambd   # add \u03bb to diagonal of (10\u00d710) matrix\n\n    # normal equations\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(G, b)   # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (82.1067), Performs well on nmae (12.2388), Performs well on r2 (-81.1067), Performs well on combined_score (0.0120)\n\n\n### Program 2 (Score: 4.5588)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using a quadratic term for ln(lr) and a\nmultiplicative power\u2010law for other hyperparameters. Fitted in closed form\nvia ridge\u2010regularized linear regression in log\u2010space for stability and speed.\n\nModel form (in log\u2010space):\n    ln(loss) \u2248 w0\n              + w1\u00b7ln(lr)\n              + w2\u00b7[ln(lr)]^2\n              + w3\u00b7ln(bsz)\n              + w4\u00b7ln(data_size)\n              + w5\u00b7ln(non_embedding_param_size)\n\nloss \u2248 exp(ln(loss))\n\"\"\"\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via an enhanced power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [w0, w1, w2, w3, w4, w5]\n                   or (T,6) array for T separate parameter sets.\n\n    Returns:\n      preds: array of shape (N,) or (N,T) of predicted lm loss.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    # allow multiple parameter sets\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected params of length 6, got {P}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    # build feature matrix Z: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)  # shape (N,6)\n\n    # compute lnY = Z \u00b7 p^T => shape (N,T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n\n    # if single parameter set, return shape (N,)\n    return Y[:, 0] if T == 1 else Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law via ridge\u2010regularized linear regression in log\u2010space:\n       ln(loss) = w0 + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n                           + w3\u00b7ln(bsz) + w4\u00b7ln(data_size)\n                           + w5\u00b7ln(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: length\u20106 array [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_y = np.log(y + eps)\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    # build design matrix Z: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)  # shape (N,6)\n\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # normal equations: (Z^T Z + \u03bbI) w = Z^T ln_y\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n    w = np.linalg.solve(A, b)  # shape (6,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (163.0945), Performs well on nmae (17.2291), Performs well on r2 (-162.0945), Performs well on combined_score (0.0061)\n\n\n### Program 3 (Score: 4.5588)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning scenarios.\nWe extend the pure power\u2010law model by adding a quadratic term in log(lr)\nto capture the typical U-shaped dependence of loss on learning rate.\nModel form in log\u2010space:\n    ln(loss) \u2248 w0\n              + w1 * ln(lr) + w2 * [ln(lr)]^2\n              + w3 * ln(bsz)\n              + w4 * ln(data_size)\n              + w5 * ln(non_embedding_param_size)\nThis remains a linear model in transformed features, ensuring parameter\u2010efficiency\nand closed\u2010form ridge\u2010regularized fitting for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via an enhanced power law with\n    quadratic learning\u2010rate term.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 (or 2D array of shape (T,6) for T fits)\n                   [w0, w1, w2, w3, w4, w5]\n                   corresponding to terms:\n                     1, ln(lr), [ln(lr)]^2, ln(bsz), ln(data_size),\n                     ln(non_embedding_param_size)\n\n    Returns:\n      preds: array of shape (N,) (or (N,T)) of predicted lm losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"params must have length 6, got {P}\")\n    # log\u2010transform with small eps\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_lr   = np.log(lr)\n    ln_bsz  = np.log(bsz)\n    ln_D    = np.log(D)\n    ln_M    = np.log(M)\n    # build feature matrix Z: shape (N,6)\n    # columns: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)  # (N,6)\n    # compute lnY = Z dot p^T => shape (N,T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n    # if single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by ridge\u2010regularized linear regression\n    in the transformed feature space:\n      ln(loss) \u2248 w0 + w1*ln(lr) + w2*ln(lr)^2\n                 + w3*ln(bsz) + w4*ln(data_size) + w5*ln(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 6: [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    # transform inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_lr   = np.log(lr)\n    ln_bsz  = np.log(bsz)\n    ln_D    = np.log(D)\n    ln_M    = np.log(M)\n    ln_y    = np.log(y + eps)\n    # build design matrix Z (N,6)\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)\n    # ridge regularization\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T ln_y\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (163.0945), Performs well on nmae (17.2291), Performs well on r2 (-162.0945), Performs well on combined_score (0.0061)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 4.6009)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features (add small eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.3127, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law with interaction:\n      Let x1=ln(lr), x2=ln(bsz), x3=ln(data_size), x4=ln(non_embedding_param_size).\n      Design features:\n        [1,\n         x1, x1^2,\n         x2, x2^2,\n         x3, x3^2,\n         x4, x4^2,\n         x3 * x4]\n      ln(loss) = Z \u00b7 w  \u2192 loss = exp(Z\u00b7w)\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: weights [w0\u2026w9]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4           # data \u00d7 model\u2010size interaction\n    ])                   # shape (N,10)\n\n    ln_pred = Z.dot(p)   # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law by ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is constructed as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # (N,4)\n    lnY = np.log(np.clip(y, eps, None))   # (N,)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (scale \u03bb by average diag for stability)\n    G = Z.T.dot(Z)\n    diag_mean = np.mean(np.diag(G))\n    lambd = 1e-6 * max(1.0, diag_mean)\n    G.flat[::11] += lambd   # add \u03bb to diagonal of (10\u00d710) matrix\n\n    # normal equations\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(G, b)   # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (82.107), Excellent nmae (12.239)\n\n\n### Inspiration 2 (Score: 107072192777609.4375, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (99589215585519330125424885760.000), Excellent nmae (428288771110437.750), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.398)\n\n\n### Inspiration 4 (Score: 11.1187, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear power-law with two interaction terms\n    and a quadratic term in log(lr):\n      log(loss) = w0\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(param_size)\n                  + w5*(log(data_size)*log(param_size))\n                  + w6*(log(lr)*log(param_size))\n                  + w7*(log(lr))^2\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (8,)  array of weights [w0..w7]\n    Returns:\n      preds:       (N,)  array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim != 1 or p.shape[0] != 8:\n        raise ValueError(f\"params must be length 8, got shape {p.shape}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # log-transform inputs\n    logX = np.log(X)\n    lr_log    = logX[:, 0]\n    bsz_log   = logX[:, 1]\n    data_log  = logX[:, 2]\n    param_log = logX[:, 3]\n\n    # build features\n    f0 = np.ones_like(lr_log)\n    f1 = lr_log\n    f2 = bsz_log\n    f3 = data_log\n    f4 = param_log\n    f5 = data_log * param_log        # data \u00d7 params interaction\n    f6 = lr_log * param_log          # lr \u00d7 params interaction\n    f7 = lr_log * lr_log             # quadratic lr term\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6, f7], axis=1)\n    log_pred = A.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear power-law model by ridge-regularized least squares:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size)\n                   + w4*log(param_size)\n                   + w5*(log(data_size)*log(param_size))\n                   + w6*(log(lr)*log(param_size))\n                   + w7*(log(lr))^2\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,)   array of observed LM losses\n    Returns:\n      params:      (8,)   array of fitted weights [w0..w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n    lr_log    = logX[:, 0]\n    bsz_log   = logX[:, 1]\n    data_log  = logX[:, 2]\n    param_log = logX[:, 3]\n\n    # build same features as in the prediction function\n    f0 = np.ones_like(lr_log)\n    f1 = lr_log\n    f2 = bsz_log\n    f3 = data_log\n    f4 = param_log\n    f5 = data_log * param_log\n    f6 = lr_log * param_log\n    f7 = lr_log * lr_log\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6, f7], axis=1)\n\n    # ridge regularization scaled to feature magnitudes\n    ATA = A.T.dot(A)\n    ridge = 1e-3 * np.mean(np.diag(ATA))\n    ATy = A.T.dot(logy)\n\n    # solve for weights\n    w = np.linalg.solve(ATA + ridge * np.eye(ATA.shape[0]), ATy)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1027.036), Excellent nmae (43.474)\n\n\n### Inspiration 5 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.398)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus an enhanced power law:\n      loss \u2248 L_inf + exp(\n                      w0\n                    + w1 * ln(lr)\n                    + w2 * (ln(lr))^2\n                    + w3 * ln(bsz)\n                    + w4 * ln(data_size)\n                    + w5 * ln(non_embed_param_size)\n                    + w6 * (ln(data_size) * ln(non_embed_param_size))\n                  )\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      (8,) array [L_inf, w0, w1, w2, w3, w4, w5, w6]\n    Returns:\n      preds:       (N,) array of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 8:\n        raise ValueError(f\"params must have length 8, got {p.size}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)\n    lr_log    = logX[:, 0]\n    bsz_log   = logX[:, 1]\n    data_log  = logX[:, 2]\n    param_log = logX[:, 3]\n\n    # build feature matrix of shape (N,7):\n    # [1, ln(lr), (ln(lr))^2, ln(bsz), ln(data_size),\n    #  ln(param_size), ln(data_size)*ln(param_size)]\n    N = X.shape[0]\n    A = np.empty((N, 7), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = lr_log\n    A[:, 2] = lr_log * lr_log\n    A[:, 3] = bsz_log\n    A[:, 4] = data_log\n    A[:, 5] = param_log\n    A[:, 6] = data_log * param_log\n\n    # unpack params\n    L_inf = p[0]\n    w     = p[1:]  # shape (7,)\n\n    # compute predicted loss\n    log_term = A.dot(w)            # shape (N,)\n    preds    = L_inf + np.exp(log_term)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced eight-parameter model by minimizing MSE in\n    the original loss space, with a small ridge penalty on weights.\n    Model form:\n      loss \u2248 L_inf + exp(A \u00b7 w)\n    where A contains log-features and interactions.\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,)   array of corresponding lm losses\n    Returns:\n      params:      (8,)   array [L_inf, w0, w1, ..., w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # safeguard and log-transform\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)\n    lr_log    = logX[:, 0]\n    bsz_log   = logX[:, 1]\n    data_log  = logX[:, 2]\n    param_log = logX[:, 3]\n\n    # build feature matrix A (N,7)\n    N = X.shape[0]\n    A = np.empty((N, 7), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = lr_log\n    A[:, 2] = lr_log * lr_log\n    A[:, 3] = bsz_log\n    A[:, 4] = data_log\n    A[:, 5] = param_log\n    A[:, 6] = data_log * param_log\n\n    # initial guess for parameters\n    min_y = y.min()\n    init_L = min_y * 0.1\n    y_adj = y - init_L\n    y_adj = np.clip(y_adj, eps, None)\n    init_w0 = np.log(np.mean(y_adj))\n    init_ws = np.zeros(6, dtype=np.float64)  # for w1..w6 beyond intercept\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # ridge penalty on weights (exclude L_inf)\n    ridge = 1e-4\n\n    # objective: MSE + ridge * ||w||^2\n    def _obj(p):\n        L_inf = p[0]\n        w     = p[1:]\n        preds = L_inf + np.exp(A.dot(w))\n        mse   = np.mean((preds - y) ** 2)\n        reg   = ridge * np.sum(w[1:] ** 2)  # penalize non-intercept weights\n        return mse + reg\n\n    # bound L_inf to [0, 0.9*min_y]\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 7\n\n    try:\n        res = minimize(\n            _obj,\n            init_params,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 1000, 'ftol': 1e-9}\n        )\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law with interaction:\n      Let x1=ln(lr), x2=ln(bsz), x3=ln(data_size), x4=ln(non_embedding_param_size).\n      Design features:\n        [1,\n         x1, x1^2,\n         x2, x2^2,\n         x3, x3^2,\n         x4, x4^2,\n         x3 * x4]\n      ln(loss) = Z \u00b7 w  \u2192 loss = exp(Z\u00b7w)\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: weights [w0\u2026w9]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4           # data \u00d7 model\u2010size interaction\n    ])                   # shape (N,10)\n\n    ln_pred = Z.dot(p)   # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law by ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is constructed as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # (N,4)\n    lnY = np.log(np.clip(y, eps, None))   # (N,)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (scale \u03bb by average diag for stability)\n    G = Z.T.dot(Z)\n    diag_mean = np.mean(np.diag(G))\n    lambd = 1e-6 * max(1.0, diag_mean)\n    G.flat[::11] += lambd   # add \u03bb to diagonal of (10\u00d710) matrix\n\n    # normal equations\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(G, b)   # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}