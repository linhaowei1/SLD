{"id": "37922b3f-a54c-40fa-b76a-cee00030adcf", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using log\u2010linear regression (power\u2010law).\nModel form:\n    loss \u2248 exp(b0) * lr^b1 * bsz^b2 * data_size^b3 * param_size^b4\n\nWe fit by ordinary least squares on log\u2010log data for numerical stability\nand parameter efficiency. This yields a simple, generalizable 5\u2010parameter model.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a single power\u2010law model.\n    data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:    array of length 5, or shape (T,5)\n               params[:,0] = b0 (intercept in log\u2010space)\n               params[:,1] = exponent on lr\n               params[:,2] = exponent on bsz\n               params[:,3] = exponent on data_size\n               params[:,4] = exponent on non_embedding_param_size\n    Returns:\n        preds: shape (N,) if one model, or (N,T) for T parameter sets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,4)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    params = np.asarray(params, dtype=float)\n    # Ensure shape (T,5)\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected parameter length {F+1}, got {P}\")\n    # split intercept and exponents\n    b0 = params[:, 0:1]   # (T,1)\n    exps = params[:, 1:]  # (T,4)\n    # log features\n    # clip to avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)     # (N,4)\n    # compute predicted log\u2010loss: (N,T) = logX @ exps.T + b0.T\n    pred_log = logX.dot(exps.T) + b0.T  # (N,T)\n    pred = np.exp(pred_log)             # (N,T)\n    # return shape (N,) if single model\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law model by linear least squares in log\u2010space.\n    Solves:  log(loss) \u2248 b0 + b1*log(lr) + b2*log(bsz)\n                             + b3*log(data_size) + b4*log(param_size)\n    Returns:\n        params: array length 5 = [b0, b1, b2, b3, b4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float).ravel()         # (N,)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Mismatch between data_points and loss_values lengths\")\n    # take logs (clip to avoid log of zero)\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n    logX = np.log(X_safe)   # (N,4)\n    logy = np.log(y_safe)   # (N,)\n    # build design matrix [1, logX]\n    # shape (N, 1+F)\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n    # solve (A^T A + \u03bbI) \u03b2 = A^T logy for stability (tiny ridge)\n    \u03bb = 1e-8\n    ATA = A.T.dot(A)\n    reg = \u03bb * np.eye(F + 1)\n    coef = np.linalg.solve(ATA + reg, A.T.dot(logy))  # (5,)\n    return coef\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cf3e9a41-2c66-4ef0-ba16-07480195fb70", "generation": 1, "timestamp": 1754798724.9012136, "iteration_found": 8, "metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "atleast_2d() got an unexpected keyword argument 'dtype'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 9.958921558551933e+28, "nmae": 428288771110437.75, "r2": -9.958921558551933e+28, "combined_score": 1.0041247881315816e-29}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 99589215585519330125424885760.0000\n- nmae: 428288771110437.7500\n- r2: -99589215585519330125424885760.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 99589215585519330125424885760.0000, nmae: 428288771110437.7500, r2: -99589215585519330125424885760.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (99589215585519330125424885760.0000), Performs well on nmae (428288771110437.7500), Performs well on r2 (-99589215585519330125424885760.0000), Performs well on combined_score (0.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using log\u2010linear regression (power\u2010law).\nModel form:\n    loss \u2248 exp(b0) * lr^b1 * bsz^b2 * data_size^b3 * param_size^b4\n\nWe fit by ordinary least squares on log\u2010log data for numerical stability\nand parameter efficiency. This yields a simple, generalizable 5\u2010parameter model.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a single power\u2010law model.\n    data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:    array of length 5, or shape (T,5)\n               params[:,0] = b0 (intercept in log\u2010space)\n               params[:,1] = exponent on lr\n               params[:,2] = exponent on bsz\n               params[:,3] = exponent on data_size\n               params[:,4] = exponent on non_embedding_param_size\n    Returns:\n        preds: shape (N,) if one model, or (N,T) for T parameter sets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,4)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    params = np.asarray(params, dtype=float)\n    # Ensure shape (T,5)\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected parameter length {F+1}, got {P}\")\n    # split intercept and exponents\n    b0 = params[:, 0:1]   # (T,1)\n    exps = params[:, 1:]  # (T,4)\n    # log features\n    # clip to avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)     # (N,4)\n    # compute predicted log\u2010loss: (N,T) = logX @ exps.T + b0.T\n    pred_log = logX.dot(exps.T) + b0.T  # (N,T)\n    pred = np.exp(pred_log)             # (N,T)\n    # return shape (N,) if single model\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law model by linear least squares in log\u2010space.\n    Solves:  log(loss) \u2248 b0 + b1*log(lr) + b2*log(bsz)\n                             + b3*log(data_size) + b4*log(param_size)\n    Returns:\n        params: array length 5 = [b0, b1, b2, b3, b4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float).ravel()         # (N,)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Mismatch between data_points and loss_values lengths\")\n    # take logs (clip to avoid log of zero)\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n    logX = np.log(X_safe)   # (N,4)\n    logy = np.log(y_safe)   # (N,)\n    # build design matrix [1, logX]\n    # shape (N, 1+F)\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n    # solve (A^T A + \u03bbI) \u03b2 = A^T logy for stability (tiny ridge)\n    \u03bb = 1e-8\n    ATA = A.T.dot(A)\n    reg = \u03bb * np.eye(F + 1)\n    coef = np.linalg.solve(ATA + reg, A.T.dot(logy))  # (5,)\n    return coef\n# EVOLVE-BLOCK-END\n```"]}}}