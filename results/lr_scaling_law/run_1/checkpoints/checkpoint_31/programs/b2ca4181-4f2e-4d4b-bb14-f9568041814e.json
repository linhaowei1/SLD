{"id": "b2ca4181-4f2e-4d4b-bb14-f9568041814e", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a\n    shifted multiplicative power-law model:\n\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n\n    Arguments:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length-N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n\n    b, logA, e_lr, e_bsz, e_data, e_model = np.ravel(params).astype(np.float64)\n    # add tiny epsilon to avoid log(0)\n    eps = 1e-16\n    log_X = np.log(X + eps)  # shape (N,4)\n\n    # compute log-term and exponentiate\n    log_term = (\n        logA\n        + e_lr    * log_X[:, 0]\n        + e_bsz   * log_X[:, 1]\n        + e_data  * log_X[:, 2]\n        + e_model * log_X[:, 3]\n    )\n\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by robust non-linear least squares (Huber loss), with a\n    small grid-search over b for initialization.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,) or (N, T)\n\n    Returns:\n      If loss_values is (N,):  1D array of length 6\n      If loss_values is (N,T): 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # handle multi-output by fitting each target separately\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    # now single-target\n    y = y.ravel()\n    N = y.shape[0]\n\n    # 1) grid-search for offset b in [0, 0.8 * y_min]\n    y_min = np.min(y)\n    grid = np.linspace(0.0, 0.8 * y_min, num=9, endpoint=True)\n    best_mse = np.inf\n    best_b = 0.0\n    best_coeffs = None\n\n    # precompute logs of X\n    eps = 1e-12\n    log_X = np.log(X + eps)  # shape (N,4)\n    Z = np.column_stack([np.ones(N), log_X])  # design matrix for log-linear\n\n    for b0 in grid:\n        r = y - b0\n        # enforce positivity\n        r = np.clip(r, a_min=eps, a_max=None)\n        log_r = np.log(r)\n        # solve least-squares: Z @ coeffs \u2248 log(r)\n        coeffs, *_ = np.linalg.lstsq(Z, log_r, rcond=None)\n        # predict and compute mse on residuals y - b0\n        pred_r = np.exp(Z.dot(coeffs))\n        mse = np.mean((pred_r - r) ** 2)\n        if mse < best_mse:\n            best_mse = mse\n            best_b = b0\n            best_coeffs = coeffs\n\n    # initial parameter vector: [b, logA, e_lr, e_bsz, e_data, e_model]\n    init_params = np.concatenate(([best_b], best_coeffs))\n\n    # 2) refine all parameters via robust non-linear least squares\n    #    using Huber loss to reduce sensitivity to outliers\n    lower_bounds = [0.0,        -np.inf, -5.0, -5.0, -5.0, -5.0]\n    upper_bounds = [np.max(y)*2, np.inf,  5.0,  5.0,  5.0,  5.0]\n    bounds = (lower_bounds, upper_bounds)\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    res = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=bounds,\n        loss='huber',\n        f_scale=1.0,\n        max_nfev=2000\n    )\n\n    # if optimization succeeded, return refined params, else fallback\n    if res.success:\n        return res.x\n    else:\n        return init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3bca97ee-062c-4abc-ad12-2300cbbb4400", "generation": 4, "timestamp": 1754803052.488752, "iteration_found": 26, "metrics": {"nmse": 33.620520286475305, "nmae": 7.6162018952912565, "r2": -32.620520286475305, "combined_score": 0.02888460345844818}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 72.36946114292599, "nmae": 11.275117588813828, "r2": -71.36946114292599, "combined_score": 0.013629648963237838}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 72.3695\n- nmae: 11.2751\n- r2: -71.3695\n- combined_score: 0.0136\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 72.3695, nmae: 11.2751, r2: -71.3695, combined_score: 0.0136\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.0722)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nModel form (additive + multiplicative power\u2010law in log\u2010space):\n  loss \u2248 b + exp(logA\n                  + e_lr*log(lr)\n                  + e_bsz*log(bsz)\n                  + e_data*log(data_size)\n                  + e_model*log(non_embedding_param_size))\nFitting strategy:\n  1) Initialize b = 0.5 * min(loss) (floored at 0).\n  2) Linear least\u2010squares on log(loss - b) to get [logA, e_lr, e_bsz, e_data, e_model].\n  3) Refine all 6 parameters via L-BFGS-B minimizing MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.ravel(params).astype(float)\n    # Add small epsilon to inputs to avoid log(0)\n    eps = 1e-16\n    lr, bsz, D, Np = (X[:,0] + eps, X[:,1] + eps, X[:,2] + eps, X[:,3] + eps)\n    # Compute power\u2010law in log\u2010space\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error via L-BFGS-B, with a robust\n    linear least\u2010squares initialization in log\u2010space.\n\n    Supports single\u2010target (shape (N,)) or multi\u2010target (shape (N,T)).\n    Returns:\n      - single output: 1D array of length 6\n      - multi\u2010output : 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Multi\u2010target handling\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    # 1) Initial offset b0\n    y_min = float(np.min(y))\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare linear system for log(y - b0)\n    r = y - b0\n    # Clip to positive\n    r = np.clip(r, 1e-12, None)\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_params)]\n    logs = np.log(X + 1e-16)\n    Z = np.column_stack([\n        np.ones_like(r),\n        logs[:, 0],\n        logs[:, 1],\n        logs[:, 2],\n        logs[:, 3],\n    ])\n    # Solve least\u2010squares: Z @ coeffs \u2248 log(r)\n    coeffs, *_ = np.linalg.lstsq(Z, np.log(r), rcond=None)\n    # coeffs = [logA, e_lr, e_bsz, e_data, e_model]\n    init_params = np.concatenate([[b0], coeffs])\n\n    # 3) Bounds for robust optimization\n    y_max = float(np.max(y))\n    bounds = [\n        (0.0, max(y_max, b0 * 2)),  # b in [0, 2*y_max]\n        (None, None),               # logA unbounded\n        (-5.0, 5.0),                # e_lr\n        (-5.0, 5.0),                # e_bsz\n        (-5.0, 5.0),                # e_data\n        (-5.0, 5.0),                # e_model\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Refine via L-BFGS-B\n    res = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000}\n    )\n    if res.success:\n        return res.x\n    else:\n        # Fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (72.3695), Performs well on nmae (11.2751), Performs well on r2 (-71.3695), Performs well on combined_score (0.0136)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nModel form (additive + multiplicative power\u2010law in log\u2010space):\n  loss \u2248 b + exp(logA\n                  + e_lr*log(lr)\n                  + e_bsz*log(bsz)\n                  + e_data*log(data_size)\n                  + e_model*log(non_embedding_param_size))\nFitting strategy:\n  1) Initialize b = 0.5 * min(loss) (floored at 0).\n  2) Linear least\u2010squares on log(loss - b) to get [logA, e_lr, e_bsz, e_data, e_model].\n  3) Refine all 6 parameters via L-BFGS-B minimizing MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.ravel(params).astype(float)\n    # Add small epsilon to inputs to avoid log(0)\n    eps = 1e-16\n    lr, bsz, D, Np = (X[:,0] + eps, X[:,1] + eps, X[:,2] + eps, X[:,3] + eps)\n    # Compute power\u2010law in log\u2010space\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error via L-BFGS-B, with a robust\n    linear least\u2010squares initialization in log\u2010space.\n\n    Supports single\u2010target (shape (N,)) or multi\u2010target (shape (N,T)).\n    Returns:\n      - single output: 1D array of length 6\n      - multi\u2010output : 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Multi\u2010target handling\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    # 1) Initial offset b0\n    y_min = float(np.min(y))\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare linear system for log(y - b0)\n    r = y - b0\n    # Clip to positive\n    r = np.clip(r, 1e-12, None)\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_params)]\n    logs = np.log(X + 1e-16)\n    Z = np.column_stack([\n        np.ones_like(r),\n        logs[:, 0],\n        logs[:, 1],\n        logs[:, 2],\n        logs[:, 3],\n    ])\n    # Solve least\u2010squares: Z @ coeffs \u2248 log(r)\n    coeffs, *_ = np.linalg.lstsq(Z, np.log(r), rcond=None)\n    # coeffs = [logA, e_lr, e_bsz, e_data, e_model]\n    init_params = np.concatenate([[b0], coeffs])\n\n    # 3) Bounds for robust optimization\n    y_max = float(np.max(y))\n    bounds = [\n        (0.0, max(y_max, b0 * 2)),  # b in [0, 2*y_max]\n        (None, None),               # logA unbounded\n        (-5.0, 5.0),                # e_lr\n        (-5.0, 5.0),                # e_bsz\n        (-5.0, 5.0),                # e_data\n        (-5.0, 5.0),                # e_model\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Refine via L-BFGS-B\n    res = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000}\n    )\n    if res.success:\n        return res.x\n    else:\n        # Fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a\n    shifted multiplicative power-law model:\n\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n\n    Arguments:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length-N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n\n    b, logA, e_lr, e_bsz, e_data, e_model = np.ravel(params).astype(np.float64)\n    # add tiny epsilon to avoid log(0)\n    eps = 1e-16\n    log_X = np.log(X + eps)  # shape (N,4)\n\n    # compute log-term and exponentiate\n    log_term = (\n        logA\n        + e_lr    * log_X[:, 0]\n        + e_bsz   * log_X[:, 1]\n        + e_data  * log_X[:, 2]\n        + e_model * log_X[:, 3]\n    )\n\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by robust non-linear least squares (Huber loss), with a\n    small grid-search over b for initialization.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,) or (N, T)\n\n    Returns:\n      If loss_values is (N,):  1D array of length 6\n      If loss_values is (N,T): 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # handle multi-output by fitting each target separately\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    # now single-target\n    y = y.ravel()\n    N = y.shape[0]\n\n    # 1) grid-search for offset b in [0, 0.8 * y_min]\n    y_min = np.min(y)\n    grid = np.linspace(0.0, 0.8 * y_min, num=9, endpoint=True)\n    best_mse = np.inf\n    best_b = 0.0\n    best_coeffs = None\n\n    # precompute logs of X\n    eps = 1e-12\n    log_X = np.log(X + eps)  # shape (N,4)\n    Z = np.column_stack([np.ones(N), log_X])  # design matrix for log-linear\n\n    for b0 in grid:\n        r = y - b0\n        # enforce positivity\n        r = np.clip(r, a_min=eps, a_max=None)\n        log_r = np.log(r)\n        # solve least-squares: Z @ coeffs \u2248 log(r)\n        coeffs, *_ = np.linalg.lstsq(Z, log_r, rcond=None)\n        # predict and compute mse on residuals y - b0\n        pred_r = np.exp(Z.dot(coeffs))\n        mse = np.mean((pred_r - r) ** 2)\n        if mse < best_mse:\n            best_mse = mse\n            best_b = b0\n            best_coeffs = coeffs\n\n    # initial parameter vector: [b, logA, e_lr, e_bsz, e_data, e_model]\n    init_params = np.concatenate(([best_b], best_coeffs))\n\n    # 2) refine all parameters via robust non-linear least squares\n    #    using Huber loss to reduce sensitivity to outliers\n    lower_bounds = [0.0,        -np.inf, -5.0, -5.0, -5.0, -5.0]\n    upper_bounds = [np.max(y)*2, np.inf,  5.0,  5.0,  5.0,  5.0]\n    bounds = (lower_bounds, upper_bounds)\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    res = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=bounds,\n        loss='huber',\n        f_scale=1.0,\n        max_nfev=2000\n    )\n\n    # if optimization succeeded, return refined params, else fallback\n    if res.success:\n        return res.x\n    else:\n        return init_params\n# EVOLVE-BLOCK-END\n```"]}}}