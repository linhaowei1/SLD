{"id": "3be8a1fd-6cc1-4e14-ae65-30f5f590789f", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A log\u2013polynomial scaling law capturing:\n      - U-shaped dependence on learning rate via a quadratic term\n      - Power-law effects of batch size, data size, and model size\n      - Pairwise interactions between scale and learning rate or scale and model/data size\n\n    Model form in log-domain:\n      \u2113r    = log(lr)\n      \u2113bsz  = log(bsz)\n      \u2113data = log(data_size)\n      \u2113param= log(non_embedding_param_size)\n\n      log_loss = \u03b80\n               + \u03b81 * \u2113r\n               + \u03b82 * \u2113r^2\n               + \u03b83 * \u2113bsz\n               + \u03b84 * \u2113data\n               + \u03b85 * \u2113param\n               + \u03b86 * (\u2113r * \u2113data)\n               + \u03b87 * (\u2113r * \u2113param)\n               + \u03b88 * (\u2113data * \u2113param)\n\n    loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 9 [\u03b80 \u2026 \u03b88]\n    Returns:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got shape {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d79)\n    A = np.column_stack([\n        np.ones_like(lr_log),         # \u03b80\n        lr_log,                       # \u03b81 * \u2113r\n        lr_log**2,                    # \u03b82 * \u2113r^2\n        bsz_log,                      # \u03b83 * \u2113bsz\n        data_log,                     # \u03b84 * \u2113data\n        param_log,                    # \u03b85 * \u2113param\n        lr_log * data_log,            # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,           # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log          # \u03b88 * (\u2113data * \u2113param)\n    ])  # shape (N,9)\n\n    log_pred = A.dot(theta)        # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9-parameter log\u2013polynomial scaling law via ridge-regularized\n    least squares on the log(loss):\n\n      \u03b8 = argmin_\u03b8  ||A \u03b8 \u2212 log(y)||^2 + \u03bb * ||\u03b8_{1:}||^2\n\n    where A is the (N\u00d79) design matrix matching the structure in scaling_law_func.\n\n    Inputs:\n      data_points:  array-like of shape (N,4) [lr, bsz, data_size, non_emb_param_size]\n      loss_values:  array-like of shape (N,) of observed lm losses (>0)\n      ridge_lambda: float, regularization strength (default 1e-6)\n\n    Returns:\n      theta_opt: numpy.ndarray of shape (9,) of fitted parameters [\u03b80\u2026\u03b88]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)      # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    y_log     = np.log(y + eps) # shape (N,)\n\n    # Build design matrix A = [1, \u2113r, \u2113r^2, \u2113bsz, \u2113data, \u2113param, \u2113r*\u2113data, \u2113r*\u2113param, \u2113data*\u2113param]\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])  # shape (N,9)\n\n    # Ridge regularization matrix: penalize all but intercept\n    P = A.shape[1]\n    ATA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(lhs, rhs)\n    return theta_opt", "language": "python", "parent_id": "712004eb-0a78-4d95-917e-f796b6f2b1e4", "generation": 4, "timestamp": 1754804140.1247613, "iteration_found": 65, "metrics": {"nmse": 154.83886210192472, "nmae": 16.61434522119523, "r2": -153.83886210192472, "combined_score": 0.006416884636554654}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.9881533609737, "nmae": 14.128417603309249, "r2": -111.9881533609737, "combined_score": 0.008772841479703903}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 33.3978, nmae: 7.5901, r2: -32.3978, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 33.3619, nmae: 7.5859, r2: -32.3619, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([1.2e-4,    # lr\n                            16.0,      # bsz\n                            4e9,       # data_size\n                            2.14e8     # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MAX = np.log(np.array([2.2e-2,    # lr\n                            4096.0,    # bsz\n                            1e11,      # data_size\n                            1e9        # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is a vector of length 1 + 4 + 4 + 6 = 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    theta0 = p[0]\n    lin_coeffs = p[1 : 1 + F]\n    quad_coeffs = p[1 + F : 1 + 2 * F]\n    cross_coeffs = p[1 + 2 * F :]\n\n    # Compute normalized logs\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Build log\u2010prediction\n    log_pred = theta0 + z.dot(lin_coeffs) + (z ** 2).dot(quad_coeffs)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += cross_coeffs[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    # Return in original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Intercept\n    A_cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    A_cols.append(z)\n    # Quadratic terms\n    A_cols.append(z ** 2)\n    # Pairwise interaction terms\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        A_cols.append(np.concatenate(cross_cols, axis=1))\n\n    A = np.concatenate(A_cols, axis=1)  # shape (N,15)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 2.1537)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param^{e_N},\n    with A = exp(logA).\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects input shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Numerical stability\n    eps = 1e-12\n    # Compute log-term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by:\n      1) closed-form ridge regression on log(y - b0)\n      2) bounded L-BFGS-B refinement minimizing MSE\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n\n    Returns:\n      params: ndarray of shape (6,) for single-target or (T,6) for multi-target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n\n    # Precompute log-features for closed-form init\n    eps = 1e-12\n    Z = np.log(X + eps)                  # (N,4)\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    AtA = A_lin.T @ A_lin + lam * np.eye(5)\n    At  = A_lin.T\n\n    def _fit_single(y_vec):\n        # 1) bias init: floor near minimum\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, y_min * 0.9)\n        # 2) shift and clamp\n        y_shift = np.maximum(y_vec - b0, eps)\n        log_y = np.log(y_shift)\n        # 3) closed-form linear solve: [logA, e_lr, e_bsz, e_D, e_N]\n        theta_lin = np.linalg.solve(AtA, At @ log_y)\n        # pack init params\n        init = np.empty(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_lin\n\n        # bounds: b>=0, exponents in [-5,5], logA free\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b\n            (None, None),                  # logA\n            (-5.0, 5.0),                   # e_lr\n            (-5.0, 5.0),                   # e_bsz\n            (-5.0, 5.0),                   # e_D\n            (-5.0, 5.0),                   # e_N\n        ]\n\n        # objective: MSE in original loss space\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # single L-BFGS-B refinement\n        res = minimize(\n            obj,\n            init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-12}\n        )\n        return res.x if res.success else init\n\n    # fit per target\n    all_params = np.vstack([_fit_single(Y[:, i]) for i in range(T)])\n    return all_params[0] if T == 1 else all_params\n```\nKey features: Performs well on nmse (33.3619), Performs well on nmae (7.5859), Performs well on r2 (-32.3619), Performs well on combined_score (0.0291)\n\n\n### Program 3 (Score: 2.1548)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss using an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D shape and correct feature dimension\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # add tiny epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n\n    # compute the log\u2010term in a numerically stable manner\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law + bias model:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_emb^{e_model},\n      with A = exp(logA).\n\n    Uses closed\u2010form least squares in log\u2010space to initialize parameters,\n    then refines them with L-BFGS-B under sensible bounds.\n    Returns optimized params: array of length 6 = [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) Initialize bias b0 to a small positive fraction of minimum observed loss\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare adjusted target for log\u2010linear regression: y_adj = y - b0 (clipped)\n    y_adj = np.clip(y - b0, eps, None)\n    # design matrix for log\u2010linear fit: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    logs = np.log(X + eps)  # shape (N,4)\n    A_init = np.hstack([np.ones((N,1), dtype=np.float64), logs])  # (N,5)\n    # solve least squares in log\u2010space\n    theta_ls, *_ = np.linalg.lstsq(A_init, np.log(y_adj), rcond=None)\n    # unpack: theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n    logA0, e_lr0, e_bsz0, e_data0, e_model0 = theta_ls\n\n    # 3) Initial parameter vector\n    init_params = np.array([b0, logA0, e_lr0, e_bsz0, e_data0, e_model0], dtype=np.float64)\n\n    # 4) Parameter bounds for stability\n    y_max = np.max(y)\n    bounds = [\n        (0.0,       max(1.0, 1.5 * y_max)),  # b \u2208 [0, ~1.5*max_loss]\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_lr\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n    ]\n\n    # 5) Objective: mean squared error in original loss\u2010space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # 6) Optimize with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # return optimized parameters or initial if optimization failed\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3978), Performs well on nmae (7.5901), Performs well on r2 (-32.3978), Performs well on combined_score (0.0291)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.0393)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                       + e_D*log(data_size) + e_N*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: ndarray of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected params length 6, got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_term = (logA\n                + e_lr  * np.log(lr  + eps)\n                + e_bsz * np.log(bsz + eps)\n                + e_D   * np.log(D    + eps)\n                + e_N   * np.log(Np   + eps))\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by first performing a ridge\u2010regularized\n    linear regression in log\u2010space (with centering and whitening of covariates)\n    to initialize parameters [b, logA, e_lr, e_bsz, e_D, e_N], then refine via\n    a few L-BFGS-B multi-starts minimizing MSE in original space.\n    Supports single\u2010target (N,) or multi\u2010target (N,T) loss_values.\n    Returns optimized params array of shape (6,) or (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D targets\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, T = X.shape[0], y_mat.shape[1]\n\n    # Precompute log-features, their means and stds for centering & whitening\n    eps = 1e-12\n    logX = np.log(X + eps)             # shape (N,4)\n    mu = np.mean(logX, axis=0)         # (4,)\n    sigma = np.std(logX, axis=0) + eps # (4,)\n    Z = (logX - mu) / sigma            # whitened logs, shape (N,4)\n\n    # Design for linear solve: [1, Z]\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    # Regularize all except the intercept column lightly\n    Reg = lam * np.eye(5)\n    Reg[0,0] = 0.0\n    M = A_lin.T @ A_lin + Reg\n\n    def _fit_single(y_vec):\n        # 1) offset b0: ensure y - b0 > 0\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, np.percentile(y_vec, 5) * 0.5)\n        # 2) linearize target\n        y_shift = np.maximum(y_vec - b0, eps)\n        logy = np.log(y_shift)\n        y_mean = np.mean(logy)\n        y_cent = logy - y_mean\n        # 3) solve ridge on centered target\n        theta_lin = np.linalg.solve(M, A_lin.T @ y_cent)  # (5,)\n        # 4) convert linear coefficients to log-domain intercept and exponents\n        #    log_pred \u2248 mean(logy) + [1, Z]\u00b7theta_lin\n        #    but Z = (logX - mu)/sigma => expand to get exponents on logX\n        # sum_term = \u03a3_i theta_lin[i+1] * (mu[i]/sigma[i])\n        sum_mu = np.dot(theta_lin[1:], mu / sigma)\n        logA0 = y_mean + theta_lin[0] - sum_mu\n        exponents = theta_lin[1:] / sigma  # length-4\n        init_p = np.zeros(6, dtype=np.float64)\n        init_p[0] = b0\n        init_p[1] = logA0\n        init_p[2:] = exponents\n\n        # 5) refine with a few L-BFGS-B multi-starts in original MSE\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b \u2265 0\n            (None, None),                 # logA unbounded\n            (-10.0, 10.0),                # e_lr\n            (-10.0, 10.0),                # e_bsz\n            (-10.0, 10.0),                # e_D\n            (-10.0, 10.0),                # e_N\n        ]\n        def mse_obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n\n        best_p = init_p.copy()\n        best_loss = mse_obj(best_p)\n        # try multi-start jitter\n        for _ in range(3):\n            trial = best_p.copy()\n            trial[2:] += 0.2 * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] * (1.0 + 0.1 * np.random.randn()))\n            trial[1] += 0.1 * np.random.randn()\n            try:\n                res = minimize(\n                    mse_obj, trial,\n                    method='L-BFGS-B',\n                    bounds=bounds,\n                    options={'maxiter': 200, 'ftol': 1e-9}\n                )\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except Exception:\n                pass\n\n        return best_p\n\n    # Fit each target dimension independently\n    params = np.vstack([_fit_single(y_mat[:, i]) for i in range(T)])\n    return params[0] if params.shape[0] == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 3.0722)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a 6-parameter multiplicative power law plus bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                      + e_data*log(data_size) + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points with 4 columns, got {X.shape[1]}\")\n    # unpack parameters\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # safe log\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power law by minimizing MSE in original loss space.\n    1) Initialize via closed-form linear regression in log-space.\n    2) Refine with bounded L-BFGS-B multi-start.\n    Returns:\n      params: ndarray of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    # prepare data\n    X_raw = np.asarray(data_points, dtype=np.float64)\n    y     = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X_raw.ndim == 1:\n        X_raw = X_raw[None, :]\n    if X_raw.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points with 4 columns, got {X_raw.shape[1]}\")\n    if y.shape[0] != X_raw.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # constants\n    eps = 1e-12\n    # simple bias init: half the minimum loss (clipped \u22650)\n    y_min, y_max = np.min(y), np.max(y)\n    b0 = max(0.0, 0.5 * y_min)\n    # shift and log-transform targets\n    y_shift = np.clip(y - b0, eps, None)\n    y_log   = np.log(y_shift)\n\n    # log-transform features\n    logs = np.log(X_raw + eps)  # shape (N,4)\n    # build least-squares design matrix [1, ln(lr), ln(bsz), ln(D), ln(Np)]\n    A_ls = np.concatenate([np.ones((logs.shape[0],1)), logs], axis=1)  # (N,5)\n    # solve A_ls @ theta_ls = y_log in least squares\n    theta_ls, *_ = np.linalg.lstsq(A_ls, y_log, rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n\n    # assemble initial parameter sets for multi-start\n    init_main = np.empty(6, dtype=np.float64)\n    init_main[0]    = b0\n    init_main[1:]   = theta_ls\n    init_zero_bias  = init_main.copy()\n    init_zero_bias[0] = 0.0\n    init_alt = np.array([\n        b0 * 0.1,\n        np.log(max(y_max - b0, eps)),\n        -1.0, -1.0, -0.5, -0.5\n    ], dtype=np.float64)\n\n    inits = [init_main, init_zero_bias, init_alt]\n\n    # bounds for parameters: bias \u22650, exponents in a reasonable range\n    bounds = [\n        (0.0,      1.5 * y_max),  # b\n        (None,     None),         # logA\n        (-10.0,    10.0),         # e_lr\n        (-10.0,    10.0),         # e_bsz\n        (-10.0,    10.0),         # e_data\n        (-10.0,    10.0)          # e_model\n    ]\n\n    # precompute logs for objective\n    l_lr, l_bsz, l_D, l_Np = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    def mse_obj(p):\n        b_i, logA_i, e_lr_i, e_bsz_i, e_data_i, e_model_i = p\n        log_t = (\n            logA_i\n            + e_lr_i   * l_lr\n            + e_bsz_i  * l_bsz\n            + e_data_i * l_D\n            + e_model_i* l_Np\n        )\n        pred = b_i + np.exp(log_t)\n        return np.mean((pred - y) ** 2)\n\n    # multi-start L-BFGS-B\n    best_p, best_loss = init_main, np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                mse_obj,\n                init,\n                method='L-BFGS-B',\n                bounds=bounds,\n                options={'maxiter':1000, 'ftol':1e-9}\n            )\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        except Exception:\n            # ignore failures and keep looking\n            pass\n\n    return best_p\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([1.2e-4,    # lr\n                            16.0,      # bsz\n                            4e9,       # data_size\n                            2.14e8     # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MAX = np.log(np.array([2.2e-2,    # lr\n                            4096.0,    # bsz\n                            1e11,      # data_size\n                            1e9        # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is a vector of length 1 + 4 + 4 + 6 = 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    theta0 = p[0]\n    lin_coeffs = p[1 : 1 + F]\n    quad_coeffs = p[1 + F : 1 + 2 * F]\n    cross_coeffs = p[1 + 2 * F :]\n\n    # Compute normalized logs\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Build log\u2010prediction\n    log_pred = theta0 + z.dot(lin_coeffs) + (z ** 2).dot(quad_coeffs)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += cross_coeffs[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    # Return in original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Intercept\n    A_cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    A_cols.append(z)\n    # Quadratic terms\n    A_cols.append(z ** 2)\n    # Pairwise interaction terms\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        A_cols.append(np.concatenate(cross_cols, axis=1))\n\n    A = np.concatenate(A_cols, axis=1)  # shape (N,15)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 2 (Score: 4.4052, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A simplified log\u2013polynomial scaling law capturing:\n      - Power\u2010law effects of model size, data size, and batch size\n      - A U\u2010shaped dependence on learning rate via a quadratic term\n      - Interaction between learning rate and data/model size to let the optimal\n        learning rate shift with scale\n    Model form in log\u2010domain:\n      log L = \u03b80\n            + \u03b81*\u2113r + \u03b82*\u2113r^2\n            + \u03b83*\u2113bsz\n            + \u03b84*\u2113data\n            + \u03b85*\u2113param\n            + \u03b86*(\u2113r*\u2113data)\n            + \u03b87*(\u2113r*\u2113param)\n            + \u03b88*(\u2113data*\u2113param)\n    where \u2113r = log(lr), \u2113bsz = log(bsz), \u2113data = log(data_size), \u2113param = log(non_embed_param_size).\n    Returns exp(log L).\n    Inputs:\n      data_points: (N,4) array [[lr, bsz, data_size, non_embed_param_size], ...]\n      params:      length\u20109 array [\u03b80 \u2026 \u03b88]\n    Output:\n      preds: (N,) predicted language\u2010model losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)         # shape (N,4)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix with 9 features\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),             # intercept \u03b80\n        lr_log,                 # \u03b81 * \u2113r\n        lr_log**2,              # \u03b82 * \u2113r^2\n        bsz_log,                # \u03b83 * \u2113bsz\n        data_log,               # \u03b84 * \u2113data\n        param_log,              # \u03b85 * \u2113param\n        lr_log * data_log,      # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,     # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log    # \u03b88 * (\u2113data * \u2113param)\n    ])                          # shape (N,9)\n\n    log_pred = A.dot(theta)     # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2013polynomial model via ridge\u2010regularized least squares\n    on the log\u2010loss. Solves:\n      \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (No penalty on the intercept term \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,) observed lm losses\n    Output:\n      theta_opt: (9,) optimized parameter vector\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build the same design matrix A (N\u00d79)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (154.839), Excellent nmae (16.614)\n\n\n### Inspiration 3 (Score: 2.1548, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss using an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D shape and correct feature dimension\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # add tiny epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n\n    # compute the log\u2010term in a numerically stable manner\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law + bias model:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_emb^{e_model},\n      with A = exp(logA).\n\n    Uses closed\u2010form least squares in log\u2010space to initialize parameters,\n    then refines them with L-BFGS-B under sensible bounds.\n    Returns optimized params: array of length 6 = [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) Initialize bias b0 to a small positive fraction of minimum observed loss\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare adjusted target for log\u2010linear regression: y_adj = y - b0 (clipped)\n    y_adj = np.clip(y - b0, eps, None)\n    # design matrix for log\u2010linear fit: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    logs = np.log(X + eps)  # shape (N,4)\n    A_init = np.hstack([np.ones((N,1), dtype=np.float64), logs])  # (N,5)\n    # solve least squares in log\u2010space\n    theta_ls, *_ = np.linalg.lstsq(A_init, np.log(y_adj), rcond=None)\n    # unpack: theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n    logA0, e_lr0, e_bsz0, e_data0, e_model0 = theta_ls\n\n    # 3) Initial parameter vector\n    init_params = np.array([b0, logA0, e_lr0, e_bsz0, e_data0, e_model0], dtype=np.float64)\n\n    # 4) Parameter bounds for stability\n    y_max = np.max(y)\n    bounds = [\n        (0.0,       max(1.0, 1.5 * y_max)),  # b \u2208 [0, ~1.5*max_loss]\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_lr\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n    ]\n\n    # 5) Objective: mean squared error in original loss\u2010space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # 6) Optimize with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # return optimized parameters or initial if optimization failed\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.398), Excellent nmae (7.590)\n\n\n### Inspiration 4 (Score: 3.7368, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given [lr, bsz, data_size, non_emb_param_size]\n    via a 7-parameter law:\n\n      loss \u2248 b\n             + exp( logA\n                     + e_lr1 * ln(lr)\n                     + e_lr2 * (ln(lr))^2\n                     + e_bsz * ln(bsz)\n                     + e_D   * ln(data_size)\n                     + e_N   * ln(non_embedding_param_size)\n                   )\n\n    params = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"scaling_law_func expects shape (N,4) input\")\n    b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_lr1 * log_lr\n        + e_lr2 * (log_lr ** 2)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE in log-space:\n\n      param vector = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n\n    1) initialize b to ~0.5 * min(loss)\n    2) do linear LS on ln(loss - b) vs [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    3) refine all params with L-BFGS-B on log-MSE objective\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"fit_scaling_law expects shape (N,4) input\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) initialize bias b0\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) linear LS in log-space for the other 6 params\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    # design matrix: [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    A = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        np.log(bsz),\n        np.log(D),\n        np.log(Np),\n    ])\n    # solve for theta = [logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0]\n    theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0 = theta\n\n    init_params = np.array([b0, logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0],\n                           dtype=np.float64)\n\n    # 3) refine via L-BFGS-B on MSE in log-space\n    def loss_fn(p):\n        b, _, _, _, _, _, _ = p\n        y_pred = scaling_law_func(X, p)\n        # ensure positivity inside log\n        yp_adj = np.clip(y_pred - b, eps, None)\n        y_adj2 = np.clip(y - b, eps, None)\n        diff = np.log(yp_adj) - np.log(y_adj2)\n        return np.mean(diff * diff)\n\n    # reasonable bounds\n    bounds = [\n        (0.0, y_min),      # b \u2208 [0, ~min(y)]\n        (None, None),      # logA\n        (-5.0, 5.0),       # e_lr1\n        (-1.0, 1.0),       # e_lr2 (small quadratic curvature)\n        (-5.0, 5.0),       # e_bsz\n        (-5.0, 5.0),       # e_D\n        (-5.0, 5.0),       # e_N\n    ]\n\n    res = minimize(loss_fn, init_params,\n                   method=\"L-BFGS-B\", bounds=bounds)\n    if res.success:\n        return res.x\n    else:\n        # fallback to the LS initialization\n        return init_params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (109.187), Excellent nmae (13.938)\n\n\n### Inspiration 5 (Score: 3.0722, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a 6-parameter multiplicative power law plus bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                      + e_data*log(data_size) + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points with 4 columns, got {X.shape[1]}\")\n    # unpack parameters\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # safe log\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power law by minimizing MSE in original loss space.\n    1) Initialize via closed-form linear regression in log-space.\n    2) Refine with bounded L-BFGS-B multi-start.\n    Returns:\n      params: ndarray of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    # prepare data\n    X_raw = np.asarray(data_points, dtype=np.float64)\n    y     = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X_raw.ndim == 1:\n        X_raw = X_raw[None, :]\n    if X_raw.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points with 4 columns, got {X_raw.shape[1]}\")\n    if y.shape[0] != X_raw.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # constants\n    eps = 1e-12\n    # simple bias init: half the minimum loss (clipped \u22650)\n    y_min, y_max = np.min(y), np.max(y)\n    b0 = max(0.0, 0.5 * y_min)\n    # shift and log-transform targets\n    y_shift = np.clip(y - b0, eps, None)\n    y_log   = np.log(y_shift)\n\n    # log-transform features\n    logs = np.log(X_raw + eps)  # shape (N,4)\n    # build least-squares design matrix [1, ln(lr), ln(bsz), ln(D), ln(Np)]\n    A_ls = np.concatenate([np.ones((logs.shape[0],1)), logs], axis=1)  # (N,5)\n    # solve A_ls @ theta_ls = y_log in least squares\n    theta_ls, *_ = np.linalg.lstsq(A_ls, y_log, rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n\n    # assemble initial parameter sets for multi-start\n    init_main = np.empty(6, dtype=np.float64)\n    init_main[0]    = b0\n    init_main[1:]   = theta_ls\n    init_zero_bias  = init_main.copy()\n    init_zero_bias[0] = 0.0\n    init_alt = np.array([\n        b0 * 0.1,\n        np.log(max(y_max - b0, eps)),\n        -1.0, -1.0, -0.5, -0.5\n    ], dtype=np.float64)\n\n    inits = [init_main, init_zero_bias, init_alt]\n\n    # bounds for parameters: bias \u22650, exponents in a reasonable range\n    bounds = [\n        (0.0,      1.5 * y_max),  # b\n        (None,     None),         # logA\n        (-10.0,    10.0),         # e_lr\n        (-10.0,    10.0),         # e_bsz\n        (-10.0,    10.0),         # e_data\n        (-10.0,    10.0)          # e_model\n    ]\n\n    # precompute logs for objective\n    l_lr, l_bsz, l_D, l_Np = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    def mse_obj(p):\n        b_i, logA_i, e_lr_i, e_bsz_i, e_data_i, e_model_i = p\n        log_t = (\n            logA_i\n            + e_lr_i   * l_lr\n            + e_bsz_i  * l_bsz\n            + e_data_i * l_D\n            + e_model_i* l_Np\n        )\n        pred = b_i + np.exp(log_t)\n        return np.mean((pred - y) ** 2)\n\n    # multi-start L-BFGS-B\n    best_p, best_loss = init_main, np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                mse_obj,\n                init,\n                method='L-BFGS-B',\n                bounds=bounds,\n                options={'maxiter':1000, 'ftol':1e-9}\n            )\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        except Exception:\n            # ignore failures and keep looking\n            pass\n\n    return best_p\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (72.369), Excellent nmae (11.275)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n\n    # Compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n\n    # Exponentiate to get loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 5\u2010parameter log\u2010linear scaling law by solving a small\n    ridge\u2010regularized least squares problem in log\u2010space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8||^2\n    where A = [1, log(lr), log(bsz), log(data_size),\n               log(non_embedding_param_size)].\n    Inputs:\n      data_points:  array\u2010like of shape (N,4)\n      loss_values:  array\u2010like of shape (N,) of training losses (must be > 0)\n      ridge_lambda: regularization strength (default 1e-6)\n    Returns:\n      theta: numpy.ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # Safe log\u2010transform features and target\n    eps = 1e-12\n    Z = np.log(X + eps)       # shape (N,4)\n    y_log = np.log(y + eps)   # shape (N,)\n\n    # Build design matrix A = [1 | log_features]\n    N = Z.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.hstack((ones, Z))  # shape (N,5)\n\n    # Closed\u2010form ridge solution: (A^T A + \u03bbR) \u03b8 = A^T y_log\n    # We do not regularize the intercept term (\u03b80)\n    ATA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(ATA.shape[0], dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n\n    return theta\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A log\u2013polynomial scaling law capturing:\n      - U-shaped dependence on learning rate via a quadratic term\n      - Power-law effects of batch size, data size, and model size\n      - Pairwise interactions between scale and learning rate or scale and model/data size\n\n    Model form in log-domain:\n      \u2113r    = log(lr)\n      \u2113bsz  = log(bsz)\n      \u2113data = log(data_size)\n      \u2113param= log(non_embedding_param_size)\n\n      log_loss = \u03b80\n               + \u03b81 * \u2113r\n               + \u03b82 * \u2113r^2\n               + \u03b83 * \u2113bsz\n               + \u03b84 * \u2113data\n               + \u03b85 * \u2113param\n               + \u03b86 * (\u2113r * \u2113data)\n               + \u03b87 * (\u2113r * \u2113param)\n               + \u03b88 * (\u2113data * \u2113param)\n\n    loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 9 [\u03b80 \u2026 \u03b88]\n    Returns:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got shape {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d79)\n    A = np.column_stack([\n        np.ones_like(lr_log),         # \u03b80\n        lr_log,                       # \u03b81 * \u2113r\n        lr_log**2,                    # \u03b82 * \u2113r^2\n        bsz_log,                      # \u03b83 * \u2113bsz\n        data_log,                     # \u03b84 * \u2113data\n        param_log,                    # \u03b85 * \u2113param\n        lr_log * data_log,            # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,           # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log          # \u03b88 * (\u2113data * \u2113param)\n    ])  # shape (N,9)\n\n    log_pred = A.dot(theta)        # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9-parameter log\u2013polynomial scaling law via ridge-regularized\n    least squares on the log(loss):\n\n      \u03b8 = argmin_\u03b8  ||A \u03b8 \u2212 log(y)||^2 + \u03bb * ||\u03b8_{1:}||^2\n\n    where A is the (N\u00d79) design matrix matching the structure in scaling_law_func.\n\n    Inputs:\n      data_points:  array-like of shape (N,4) [lr, bsz, data_size, non_emb_param_size]\n      loss_values:  array-like of shape (N,) of observed lm losses (>0)\n      ridge_lambda: float, regularization strength (default 1e-6)\n\n    Returns:\n      theta_opt: numpy.ndarray of shape (9,) of fitted parameters [\u03b80\u2026\u03b88]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)      # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    y_log     = np.log(y + eps) # shape (N,)\n\n    # Build design matrix A = [1, \u2113r, \u2113r^2, \u2113bsz, \u2113data, \u2113param, \u2113r*\u2113data, \u2113r*\u2113param, \u2113data*\u2113param]\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])  # shape (N,9)\n\n    # Ridge regularization matrix: penalize all but intercept\n    P = A.shape[1]\n    ATA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(lhs, rhs)\n    return theta_opt\n```\n\nExplanation of key changes:\n- Expanded from a 5-parameter log-linear law to a 9-parameter log-polynomial law that captures:\n  \u2022 U-shaped dependency on learning rate via a quadratic term  \n  \u2022 direct power-law effects of batch size, data size, and model size  \n  \u2022 cross-interactions to allow scale-dependent shifts in optimal learning rate  \n- Fitting is done via a single closed-form ridge-regularized least squares solve on the log of the loss, giving a fast, numerically stable solution without iterative gradient-based optimization.\n- Regularization excludes the intercept to avoid biasing baseline loss predictions.\n"]}}}