{"id": "1a272e49-ead1-43cd-ad09-003cee2aae22", "code": "\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nLog\u2010linear scaling law fit by minimizing MSE in log\u2010loss space with analytic gradients.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using:\n        L_hat = exp(w0 + sum_i w_i * log(x_i)) + c\n    where x = [lr, bsz, data_size, non_emb_param_size].\n\n    Args:\n        data_points: array-like (N,4)\n        params:      array-like (6,) or (T,6)\n                     [w0, w1, w2, w3, w4, c]\n\n    Returns:\n        y_hat: shape (N,) if params is (6,)\n               or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    # avoid log(0)\n    X[X <= 0] = 1e-12\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"scaling_law_func: expected {F+2} parameters, got {P}\")\n\n    w0 = p[:, 0]          # (T,)\n    w_i = p[:, 1:-1]      # (T,4)\n    c  = p[:, -1]         # (T,)\n\n    # compute s = w0 + logX @ w_i.T -> (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, reg=1e-6):\n    \"\"\"\n    Fit the scaling law by minimizing mean squared error in log\u2010loss space:\n       minimize mean_i [ log(y_hat_i) - log(y_i) ]^2 + reg * ||p||^2\n    with analytic gradient and bound c >= 0.\n\n    Args:\n        data_points: array-like (N,4)\n        loss_values: array-like (N,) or (N,T)\n        reg:         float >= 0, L2 regularization weight\n\n    Returns:\n        params_opt:  array shape (6,) if single target, or (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n\n    # prepare target array shape (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # clamp features and compute logs once\n    Xpos = X.copy()\n    Xpos[Xpos <= 0] = 1e-12\n    logX = np.log(Xpos)  # (N,4)\n\n    P = F + 2  # number of parameters per target\n    params_opt = np.zeros((T, P), dtype=np.float64)\n    eps = 1e-12\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # clamp targets > 0\n        yt_clamped = np.clip(yt, eps, None)\n        logy = np.log(yt_clamped)  # (N,)\n\n        # init: w0 = mean(log y), w_i = 0, c = 0.1*min(y)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.mean(logy)\n        p0[-1] = max(0.1 * np.min(yt_clamped), eps)\n\n        # objective: MSE in log-space + reg\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0        # (N,)\n            exp_s = np.exp(s)             # (N,)\n            yhat = exp_s + c              # (N,)\n            # clamp to avoid log(0)\n            yhat[yhat <= 0] = eps\n            diff = np.log(yhat) - logy    # (N,)\n            return np.mean(diff * diff) + reg * np.sum(p * p)\n\n        # analytic gradient of objective\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0         # (N,)\n            exp_s = np.exp(s)              # (N,)\n            yhat = exp_s + c               # (N,)\n            # clamp to avoid division by zero\n            yhat[yhat <= 0] = eps\n            log_diff = np.log(yhat) - logy  # (N,)\n            # d/dp of log(yhat) = [exp_s/yhat, (exp_s*logX)/yhat, 1/yhat]\n            inv_yhat = 1.0 / yhat          # (N,)\n            coeff = 2.0 * log_diff / N     # scalar factor for mean\n            # gradient\n            grad = np.empty_like(p)\n            # grad w0\n            grad[0] = np.sum(coeff * exp_s * inv_yhat)\n            # grad w_i\n            # shape: sum over i of coeff * (exp_s*logX[:,i]/yhat)\n            tmp = (coeff * exp_s * inv_yhat)[:, None] * logX  # (N,4)\n            grad[1:-1] = np.sum(tmp, axis=0)\n            # grad c\n            grad[-1] = np.sum(coeff * inv_yhat)\n            # add L2 reg gradient\n            grad += 2.0 * reg * p\n            return grad\n\n        # bounds: only c >= 0\n        bounds = [(None, None)] * (P - 1) + [(0.0, None)]\n        res = minimize(\n            obj,\n            p0,\n            jac=jac,\n            bounds=bounds,\n            method='L-BFGS-B',\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        params_opt[t, :] = res.x if res.success else p0\n\n    return params_opt[0] if T == 1 else params_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "0f61b81a-acf2-4340-9cb1-d0180ccdd848", "generation": 2, "timestamp": 1754802716.8763707, "iteration_found": 26, "metrics": {"nmse": 8.87449486300547, "nmae": 2.5559504216526707, "r2": -7.87449486300547, "combined_score": 0.10127100311191342}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.5183653949051, "nmae": 1.6736186247008382, "r2": -2.5183653949051, "combined_score": 0.22131897547011095}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.5184\n- nmae: 1.6736\n- r2: -2.5184\n- combined_score: 0.2213\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.9510, nmae: 2.5694, r2: -7.9510, combined_score: 0.1005\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.5184, nmae: 1.6736, r2: -2.5184, combined_score: 0.2213\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.3619, nmae: 1.1056, r2: -0.3619, combined_score: 0.4234\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6323)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRevised scaling\u2010law discovery using a log\u2010linear exponential model:\n\n    L\u0302 = c + exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n\nThis form enforces positivity, handles many orders of magnitude,\nand remains simple (6 parameters). Fitting uses L-BFGS-B with an\nanalytic gradient and a non-negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    # Convert input to 2D array\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    # We expect exactly 4 features: [lr, bsz, data_size, non_emb_size]\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    # Log\u2010transform features\n    logX = np.log(X)\n\n    # Prepare parameter array\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    # We expect P = F + 2 (w0 plus 4 w_i plus c)\n    if P != F + 2:\n        raise ValueError(f\"scaling_law_func: expected {F+2} parameters, got {P}\")\n\n    # Unpack parameters\n    w0 = p[:, 0]            # shape (T,)\n    w_i = p[:, 1:-1]        # shape (T, F)\n    c  = p[:, -1]           # shape (T,)\n\n    # Compute s = w0 + sum_i w_i * logX_i -> shape (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    # Exponentiate and add bias\n    y_hat = np.exp(s) + c[None, :]\n\n    # If a single parameter vector was passed in, return 1D\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    # Prepare data arrays\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # Precompute logs\n    logX = np.log(X)\n\n    # Number of parameters: w0 + w1..w4 + c\n    P = F + 2\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # Initial guess: w0=log(mean(y)), w_i=0, c=half of min(y) (>=0)\n        w0_init = np.log(max(np.mean(yt), 1e-6))\n        wi_init = np.zeros(F, dtype=np.float64)\n        c_init  = max(0.5 * np.min(yt), 0.0)\n        p0 = np.concatenate(([w0_init], wi_init, [c_init]))\n\n        # Objective: mean squared error\n        def obj(p):\n            w0 = p[0]\n            wi = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(wi) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # Analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            wi = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(wi) + w0        # (N,)\n            exp_s = np.exp(s)            # (N,)\n            yhat = exp_s + c             # (N,)\n            diff = yhat - yt             # (N,)\n            # dMSE/dw0 = 2/N * sum(diff * exp_s)\n            grad_w0 = 2.0 * np.mean(diff * exp_s)\n            # dMSE/dw_i = 2/N * sum(diff * exp_s * logX[:, i])\n            grad_wi = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # dMSE/dc = 2/N * sum(diff)\n            grad_c = 2.0 * np.mean(diff)\n            return np.concatenate(([grad_w0], grad_wi, [grad_c]))\n\n        # Bound c >= 0 for physical realism (loss floor non-negative)\n        bounds = [(None, None)] * (P - 1) + [(0.0, None)]\n\n        # Minimize with L-BFGS-B\n        res = minimize(\n            obj,\n            p0,\n            jac=jac,\n            bounds=bounds,\n            method='L-BFGS-B',\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n\n        # Store result or fallback to init\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            params_opt[t, :] = p0\n\n    # Return in original shape\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.3619), Performs well on nmae (1.1056), Performs well on r2 (-0.3619), Performs well on combined_score (0.4234)\n\n\n### Program 2 (Score: 0.7237)\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log-linear model with analytic gradients and L2 regularization\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log-linear scaling law:\n        L_hat = c + exp(w0 + w1*log(lr) + w2*log(bsz)\n                        + w3*log(data_size) + w4*log(non_emb_param_size))\n    Args:\n        data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_emb_param_size]\n        params:      1D array of length 6 or 2D array of shape (T,6)\n                     param vector = [w0, w1, w2, w3, w4, c]\n    Returns:\n        If params is (6,), returns (N,) predictions;\n        if params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure positivity before log\n    if np.any(X <= 0):\n        # replace non-positive values with a tiny positive number for stability\n        X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # (T,)\n    w_i = p[:, 1:-1]     # (T,4)\n    c  = p[:, -1]        # (T,)\n\n    # compute linear term in log-space and exponentiate\n    # s = w0 + logX @ w_i.T  -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]  # shape (N,T)\n\n    # if single parameter set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, reg=1e-6):\n    \"\"\"\n    Fit the log-linear scaling law by minimizing mean squared error in loss space\n    with optional L2 regularization on the parameters.\n\n    Args:\n        data_points: array-like of shape (N,4)\n        loss_values: array-like of shape (N,) or (N,T)\n        reg:         L2 regularization coefficient (non-negative float)\n\n    Returns:\n        params_opt:  array of optimized parameters:\n                     shape (6,) if single target, or (T,6) for multiple targets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute logX and clamp to avoid -inf\n    Xpos = np.copy(X)\n    Xpos[Xpos <= 0] = 1e-12\n    logX = np.log(Xpos)  # (N,4)\n\n    P = F + 2  # number of parameters per target\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize parameters: w0 = log(mean(y)), others 0\n        ymean = np.mean(yt)\n        init_p = np.zeros(P, dtype=np.float64)\n        init_p[0] = np.log(max(ymean, 1e-6))\n        init_p[-1] = 0.0  # initial c\n\n        def obj(p):\n            # MSE + reg * ||p||^2\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0        # (N,)\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            mse = np.mean(diff * diff)\n            return mse + reg * np.sum(p * p)\n\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0       # (N,)\n            exp_s = np.exp(s)            # (N,)\n            yhat = exp_s + c             # (N,)\n            diff = yhat - yt             # (N,)\n            # gradient of MSE part\n            grad = np.empty_like(p)\n            # dw0: d/dw0 exp(s) = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # dw_i: each component = exp_s * logX[:,j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # dc\n            grad[-1] = 2.0 * np.mean(diff)\n            # add L2 regularization gradient\n            grad += 2.0 * reg * p\n            return grad\n\n        res = minimize(\n            obj,\n            init_p,\n            method='L-BFGS-B',\n            jac=jac,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            params_opt[t, :] = init_p\n\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.5184), Performs well on nmae (1.6736), Performs well on r2 (-2.5184), Performs well on combined_score (0.2213)\n\n\n### Program 3 (Score: 0.9175)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via a compact multiplicative power-law:\n      loss \u2248 exp(intercept + \u2211_{i} exponent_i * log(feature_i))\n    Features in data_points are [lr, bsz, data_size, non_embedding_param_size].\n    Params is a vector of length F+1 = 5: \n      [intercept, exp_lr, exp_bsz, exp_data_size, exp_param_size].\n    Returns an array of predicted losses (shape N,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    p = np.asarray(params, dtype=float).ravel()\n    F = X.shape[1]\n    if p.size != F + 1:\n        raise ValueError(f\"Expected {F+1} parameters, got {p.size}\")\n    intercept = p[0]\n    exponents = p[1:]\n    # compute in log-space for numerical stability\n    log_X = np.log(X)\n    log_y = intercept + log_X.dot(exponents)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power-law model:\n      log(loss) = intercept + \u2211_{i} exponent_i * log(feature_i)\n    by ordinary least squares in log-space. Returns params of length 5.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log-transform\n    Z = np.log(X)           # (N, F)\n    y_log = np.log(y)       # (N,)\n    N, F = Z.shape\n    # build design matrix [1, log(lr), log(bsz), log(data), log(params)]\n    M = np.hstack([np.ones((N, 1)), Z])  # (N, F+1)\n    # solve least-squares: M @ w \u2248 y_log\n    # w[0] = intercept, w[1:] = exponents\n    w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.9510), Performs well on nmae (2.5694), Performs well on r2 (-7.9510), Performs well on combined_score (0.1005)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6323, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRevised scaling\u2010law discovery using a log\u2010linear exponential model:\n\n    L\u0302 = c + exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n\nThis form enforces positivity, handles many orders of magnitude,\nand remains simple (6 parameters). Fitting uses L-BFGS-B with an\nanalytic gradient and a non-negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    # Convert input to 2D array\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    # We expect exactly 4 features: [lr, bsz, data_size, non_emb_size]\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    # Log\u2010transform features\n    logX = np.log(X)\n\n    # Prepare parameter array\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    # We expect P = F + 2 (w0 plus 4 w_i plus c)\n    if P != F + 2:\n        raise ValueError(f\"scaling_law_func: expected {F+2} parameters, got {P}\")\n\n    # Unpack parameters\n    w0 = p[:, 0]            # shape (T,)\n    w_i = p[:, 1:-1]        # shape (T, F)\n    c  = p[:, -1]           # shape (T,)\n\n    # Compute s = w0 + sum_i w_i * logX_i -> shape (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    # Exponentiate and add bias\n    y_hat = np.exp(s) + c[None, :]\n\n    # If a single parameter vector was passed in, return 1D\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    # Prepare data arrays\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # Precompute logs\n    logX = np.log(X)\n\n    # Number of parameters: w0 + w1..w4 + c\n    P = F + 2\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # Initial guess: w0=log(mean(y)), w_i=0, c=half of min(y) (>=0)\n        w0_init = np.log(max(np.mean(yt), 1e-6))\n        wi_init = np.zeros(F, dtype=np.float64)\n        c_init  = max(0.5 * np.min(yt), 0.0)\n        p0 = np.concatenate(([w0_init], wi_init, [c_init]))\n\n        # Objective: mean squared error\n        def obj(p):\n            w0 = p[0]\n            wi = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(wi) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # Analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            wi = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(wi) + w0        # (N,)\n            exp_s = np.exp(s)            # (N,)\n            yhat = exp_s + c             # (N,)\n            diff = yhat - yt             # (N,)\n            # dMSE/dw0 = 2/N * sum(diff * exp_s)\n            grad_w0 = 2.0 * np.mean(diff * exp_s)\n            # dMSE/dw_i = 2/N * sum(diff * exp_s * logX[:, i])\n            grad_wi = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # dMSE/dc = 2/N * sum(diff)\n            grad_c = 2.0 * np.mean(diff)\n            return np.concatenate(([grad_w0], grad_wi, [grad_c]))\n\n        # Bound c >= 0 for physical realism (loss floor non-negative)\n        bounds = [(None, None)] * (P - 1) + [(0.0, None)]\n\n        # Minimize with L-BFGS-B\n        res = minimize(\n            obj,\n            p0,\n            jac=jac,\n            bounds=bounds,\n            method='L-BFGS-B',\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n\n        # Store result or fallback to init\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            params_opt[t, :] = p0\n\n    # Return in original shape\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.362), Excellent nmae (1.106)\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log-linear model with analytic gradients and L2 regularization\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log-linear scaling law:\n        L_hat = c + exp(w0 + w1*log(lr) + w2*log(bsz)\n                        + w3*log(data_size) + w4*log(non_emb_param_size))\n    Args:\n        data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_emb_param_size]\n        params:      1D array of length 6 or 2D array of shape (T,6)\n                     param vector = [w0, w1, w2, w3, w4, c]\n    Returns:\n        If params is (6,), returns (N,) predictions;\n        if params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure positivity before log\n    if np.any(X <= 0):\n        # replace non-positive values with a tiny positive number for stability\n        X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # (T,)\n    w_i = p[:, 1:-1]     # (T,4)\n    c  = p[:, -1]        # (T,)\n\n    # compute linear term in log-space and exponentiate\n    # s = w0 + logX @ w_i.T  -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]  # shape (N,T)\n\n    # if single parameter set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, reg=1e-6):\n    \"\"\"\n    Fit the log-linear scaling law by minimizing mean squared error in loss space\n    with optional L2 regularization on the parameters.\n\n    Args:\n        data_points: array-like of shape (N,4)\n        loss_values: array-like of shape (N,) or (N,T)\n        reg:         L2 regularization coefficient (non-negative float)\n\n    Returns:\n        params_opt:  array of optimized parameters:\n                     shape (6,) if single target, or (T,6) for multiple targets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute logX and clamp to avoid -inf\n    Xpos = np.copy(X)\n    Xpos[Xpos <= 0] = 1e-12\n    logX = np.log(Xpos)  # (N,4)\n\n    P = F + 2  # number of parameters per target\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize parameters: w0 = log(mean(y)), others 0\n        ymean = np.mean(yt)\n        init_p = np.zeros(P, dtype=np.float64)\n        init_p[0] = np.log(max(ymean, 1e-6))\n        init_p[-1] = 0.0  # initial c\n\n        def obj(p):\n            # MSE + reg * ||p||^2\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0        # (N,)\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            mse = np.mean(diff * diff)\n            return mse + reg * np.sum(p * p)\n\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0       # (N,)\n            exp_s = np.exp(s)            # (N,)\n            yhat = exp_s + c             # (N,)\n            diff = yhat - yt             # (N,)\n            # gradient of MSE part\n            grad = np.empty_like(p)\n            # dw0: d/dw0 exp(s) = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # dw_i: each component = exp_s * logX[:,j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # dc\n            grad[-1] = 2.0 * np.mean(diff)\n            # add L2 regularization gradient\n            grad += 2.0 * reg * p\n            return grad\n\n        res = minimize(\n            obj,\n            init_p,\n            method='L-BFGS-B',\n            jac=jac,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            params_opt[t, :] = init_p\n\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nLog\u2010linear scaling law fit by minimizing MSE in log\u2010loss space with analytic gradients.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using:\n        L_hat = exp(w0 + sum_i w_i * log(x_i)) + c\n    where x = [lr, bsz, data_size, non_emb_param_size].\n\n    Args:\n        data_points: array-like (N,4)\n        params:      array-like (6,) or (T,6)\n                     [w0, w1, w2, w3, w4, c]\n\n    Returns:\n        y_hat: shape (N,) if params is (6,)\n               or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    # avoid log(0)\n    X[X <= 0] = 1e-12\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"scaling_law_func: expected {F+2} parameters, got {P}\")\n\n    w0 = p[:, 0]          # (T,)\n    w_i = p[:, 1:-1]      # (T,4)\n    c  = p[:, -1]         # (T,)\n\n    # compute s = w0 + logX @ w_i.T -> (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, reg=1e-6):\n    \"\"\"\n    Fit the scaling law by minimizing mean squared error in log\u2010loss space:\n       minimize mean_i [ log(y_hat_i) - log(y_i) ]^2 + reg * ||p||^2\n    with analytic gradient and bound c >= 0.\n\n    Args:\n        data_points: array-like (N,4)\n        loss_values: array-like (N,) or (N,T)\n        reg:         float >= 0, L2 regularization weight\n\n    Returns:\n        params_opt:  array shape (6,) if single target, or (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n\n    # prepare target array shape (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # clamp features and compute logs once\n    Xpos = X.copy()\n    Xpos[Xpos <= 0] = 1e-12\n    logX = np.log(Xpos)  # (N,4)\n\n    P = F + 2  # number of parameters per target\n    params_opt = np.zeros((T, P), dtype=np.float64)\n    eps = 1e-12\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # clamp targets > 0\n        yt_clamped = np.clip(yt, eps, None)\n        logy = np.log(yt_clamped)  # (N,)\n\n        # init: w0 = mean(log y), w_i = 0, c = 0.1*min(y)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.mean(logy)\n        p0[-1] = max(0.1 * np.min(yt_clamped), eps)\n\n        # objective: MSE in log-space + reg\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0        # (N,)\n            exp_s = np.exp(s)             # (N,)\n            yhat = exp_s + c              # (N,)\n            # clamp to avoid log(0)\n            yhat[yhat <= 0] = eps\n            diff = np.log(yhat) - logy    # (N,)\n            return np.mean(diff * diff) + reg * np.sum(p * p)\n\n        # analytic gradient of objective\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0         # (N,)\n            exp_s = np.exp(s)              # (N,)\n            yhat = exp_s + c               # (N,)\n            # clamp to avoid division by zero\n            yhat[yhat <= 0] = eps\n            log_diff = np.log(yhat) - logy  # (N,)\n            # d/dp of log(yhat) = [exp_s/yhat, (exp_s*logX)/yhat, 1/yhat]\n            inv_yhat = 1.0 / yhat          # (N,)\n            coeff = 2.0 * log_diff / N     # scalar factor for mean\n            # gradient\n            grad = np.empty_like(p)\n            # grad w0\n            grad[0] = np.sum(coeff * exp_s * inv_yhat)\n            # grad w_i\n            # shape: sum over i of coeff * (exp_s*logX[:,i]/yhat)\n            tmp = (coeff * exp_s * inv_yhat)[:, None] * logX  # (N,4)\n            grad[1:-1] = np.sum(tmp, axis=0)\n            # grad c\n            grad[-1] = np.sum(coeff * inv_yhat)\n            # add L2 reg gradient\n            grad += 2.0 * reg * p\n            return grad\n\n        # bounds: only c >= 0\n        bounds = [(None, None)] * (P - 1) + [(0.0, None)]\n        res = minimize(\n            obj,\n            p0,\n            jac=jac,\n            bounds=bounds,\n            method='L-BFGS-B',\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        params_opt[t, :] = res.x if res.success else p0\n\n    return params_opt[0] if T == 1 else params_opt\n\n# EVOLVE-BLOCK-END\n```"]}}}