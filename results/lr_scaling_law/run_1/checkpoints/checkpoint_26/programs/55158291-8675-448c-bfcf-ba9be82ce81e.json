{"id": "55158291-8675-448c-bfcf-ba9be82ce81e", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss given hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params].\n    params = [logk, \u03b11..\u03b1F, logc] of length F+2.\n    Supports 1D or 2D params (for T independent fits).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N, F)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow single or multiple parameter vectors\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]           # shape (T,)\n    exponents = p[:, 1:1+F]       # shape (T, F)\n    logc      = p[:, -1]          # shape (T,)\n\n    # compute prediction\n    logX = np.log(X)              # shape (N, F)\n    # linear term in log-space: (N, T)\n    log_term = logX.dot(exponents.T) + logk[None, :]\n    # back to original space, plus constant floor\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    # if single parameter vector, return 1D array\n    return pred[:, 0] if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law scaling law by minimizing MSE in the original loss space.\n    Returns a parameter vector [logk, \u03b11..\u03b1F, logc] of length F+2.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure positivity\n    y = np.maximum(y, 1e-8)\n\n    # --- Robust initialization via subtractive constant and linear regression on logs ---\n    # initial floor c0 just below the minimum observed loss\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    min_adj = np.min(y_adj)\n    if min_adj <= 1e-8:\n        # if any adjusted values non-positive, lower the floor\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    # enforce positivity\n    y_adj = np.maximum(y_adj, 1e-8)\n\n    # solve log(y_adj) \u2248 logk + \u03a3 \u03b1_i log(x_i) via least squares\n    logy = np.log(y_adj)           # (N,)\n    logX = np.log(X)               # (N, F)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n    sol, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]           # length F\n\n    # initial parameter vector\n    p0 = np.concatenate([ [logk_init], alpha_init, [np.log(c0)] ])  # length F+2\n\n    # --- Define objective: MSE in original loss space ---\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # --- Bounds for stability ---\n    # logk unbounded, exponents in [-5, 5], logc \u2264 log(min(y)*0.99)\n    bnds = []\n    bnds.append((None, None))  # logk\n    for _ in range(F):\n        bnds.append((-5.0, 5.0))  # each exponent \u03b1_i\n    bnds.append((None, np.log(np.min(y) * 0.99)))  # logc\n\n    # --- Optimize ---\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0", "language": "python", "parent_id": "bd60ca51-324d-4014-a1b0-a2354dc471ba", "generation": 2, "timestamp": 1754798737.8108068, "iteration_found": 9, "metrics": {"nmse": 49.806181569715484, "nmae": 9.504680227443066, "r2": -48.806181569715484, "combined_score": 0.01968264429846622}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 158.49162185748884, "nmae": 17.048856771924793, "r2": -157.49162185748884, "combined_score": 0.006269921820053557}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 158.4916\n- nmae: 17.0489\n- r2: -157.4916\n- combined_score: 0.0063\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 99589215585519330125424885760.0000, nmae: 428288771110437.7500, r2: -99589215585519330125424885760.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 2 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (99589215585519330125424885760.0000), Performs well on nmae (428288771110437.7500), Performs well on r2 (-99589215585519330125424885760.0000), Performs well on combined_score (0.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 107072192777609.4375, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (99589215585519330125424885760.000), Excellent nmae (428288771110437.750), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss given hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params].\n    params = [logk, \u03b11..\u03b1F, logc] of length F+2.\n    Supports 1D or 2D params (for T independent fits).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N, F)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow single or multiple parameter vectors\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]           # shape (T,)\n    exponents = p[:, 1:1+F]       # shape (T, F)\n    logc      = p[:, -1]          # shape (T,)\n\n    # compute prediction\n    logX = np.log(X)              # shape (N, F)\n    # linear term in log-space: (N, T)\n    log_term = logX.dot(exponents.T) + logk[None, :]\n    # back to original space, plus constant floor\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    # if single parameter vector, return 1D array\n    return pred[:, 0] if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law scaling law by minimizing MSE in the original loss space.\n    Returns a parameter vector [logk, \u03b11..\u03b1F, logc] of length F+2.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure positivity\n    y = np.maximum(y, 1e-8)\n\n    # --- Robust initialization via subtractive constant and linear regression on logs ---\n    # initial floor c0 just below the minimum observed loss\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    min_adj = np.min(y_adj)\n    if min_adj <= 1e-8:\n        # if any adjusted values non-positive, lower the floor\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    # enforce positivity\n    y_adj = np.maximum(y_adj, 1e-8)\n\n    # solve log(y_adj) \u2248 logk + \u03a3 \u03b1_i log(x_i) via least squares\n    logy = np.log(y_adj)           # (N,)\n    logX = np.log(X)               # (N, F)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n    sol, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]           # length F\n\n    # initial parameter vector\n    p0 = np.concatenate([ [logk_init], alpha_init, [np.log(c0)] ])  # length F+2\n\n    # --- Define objective: MSE in original loss space ---\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # --- Bounds for stability ---\n    # logk unbounded, exponents in [-5, 5], logc \u2264 log(min(y)*0.99)\n    bnds = []\n    bnds.append((None, None))  # logk\n    for _ in range(F):\n        bnds.append((-5.0, 5.0))  # each exponent \u03b1_i\n    bnds.append((None, np.log(np.min(y) * 0.99)))  # logc\n\n    # --- Optimize ---\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\n\nExplanation of key improvements:\n- Used a subtractive\u2010constant form: loss \u2248 exp(logk + \u2211 \u03b1\u1d62 log x\u1d62) + exp(logc), which captures both power\u2010law decay and a nonzero loss floor.\n- Initialized parameters via linear least squares on log(y \u2212 c\u2080) to get a principled starting point for (log k, \u03b1\u1d62).\n- Introduced simple, interpretable bounds on exponents (e.g. \u00b15) and on the loss\u2010floor term for numerical stability.\n- Retained the same function signatures and output format while improving convergence and generalization with better initialization and bounds."]}}}