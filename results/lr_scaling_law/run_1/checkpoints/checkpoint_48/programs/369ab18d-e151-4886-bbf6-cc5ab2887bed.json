{"id": "369ab18d-e151-4886-bbf6-cc5ab2887bed", "code": "import numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to log\u2010linear fit\ntry:\n    from scipy.optimize import minimize\n    _have_minimize = True\nexcept ImportError:\n    _have_minimize = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a \n    power\u2010law plus floor model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    where floor >= 0 is parameterized as exp(u).\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (P,) or (T, P) with P = F + 2\n                   params[t,0] = intercept\n                   params[t,1:1+F] = weights w_i on log-features\n                   params[t,1+F] = u (log-floor), floor = exp(u)\n    Returns:\n      predictions: (N,) or (N, T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    params_arr = np.asarray(params, dtype=float)\n    # Ensure params are 2D: (T, P)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    expected_P = F + 2\n    if P != expected_P:\n        raise ValueError(f\"Expected params with {expected_P} elements, got {P}\")\n    # Clip inputs for log stability\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)          # shape (N, F)\n    intercept = params_arr[:, 0]           # (T,)\n    weights   = params_arr[:, 1:1+F]       # (T, F)\n    u_floor   = params_arr[:, 1+F]         # (T,)\n    floor     = np.exp(u_floor)            # (T,)\n    # Compute the power\u2010law term\n    # shape (N, T): each column t is intercept[t] + w[t]\u00b7logX\n    log_term = logX.dot(weights.T) + intercept\n    power_term = np.exp(log_term)          # (N, T)\n    # Add the floor\n    preds = power_term + floor[None, :]    # (N, T)\n    # If single target, return (N,)\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    by minimizing mean squared error in the loss domain.\n    Returns params of shape (P,) or (T, P).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n    P = F + 2\n\n    # Precompute log\u2010features\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)  # (N, F)\n\n    # Helper: initial guess via log\u2010linear regression with zero floor\n    def _init_params(target):\n        # Fit log(y) = b0 + w\u00b7logX\n        y_col = target\n        yc = np.clip(y_col, 1e-12, None)\n        logy = np.log(yc)\n        # design: [1, logX]\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n        # solve least squares\n        w, *_ = np.linalg.lstsq(A, logy, rcond=None)\n        intercept0 = w[0]\n        weights0   = w[1:]\n        # floor init: small fraction of min(y)\n        y_min = np.min(y_col)\n        floor0 = max(y_min * 0.05, 1e-8)\n        u0 = np.log(floor0)\n        return np.concatenate([[intercept0], weights0, [u0]])\n\n    # Objective for one target\n    def _objective(flat_p, target):\n        # flat_p: (P,)\n        intercept = flat_p[0]\n        wts       = flat_p[1:1+F]\n        u_floor   = flat_p[1+F]\n        floor     = np.exp(u_floor)\n        # predict\n        log_term = logX.dot(wts) + intercept\n        pred = np.exp(log_term) + floor\n        # MSE\n        resid = pred - target\n        return np.mean(resid*resid)\n\n    # Container for results\n    params_out = np.zeros((T, P), dtype=float)\n\n    # Loop over each output dimension\n    for t in range(T):\n        ycol = y2d[:, t]\n        # initial guess\n        p0 = _init_params(ycol)\n        if _have_minimize:\n            # optimize\n            res = minimize(\n                fun=lambda p: _objective(p, ycol),\n                x0=p0,\n                method='L-BFGS-B',\n                options={'maxiter': 500, 'ftol':1e-9}\n            )\n            if res.success:\n                params_out[t] = res.x\n            else:\n                # fallback to initial\n                params_out[t] = p0\n        else:\n            # no optimizer: just use the log\u2010linear solution and u0\n            params_out[t] = p0\n\n    # Return shape (P,) if single output\n    if T == 1:\n        return params_out[0]\n    return params_out\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6d050fae-217b-4514-8ed6-74a4cb31ad08", "generation": 2, "timestamp": 1754801876.9581413, "iteration_found": 9, "metrics": {"nmse": 105.92412635628216, "nmae": 13.672737438116954, "r2": -104.92412635628216, "combined_score": 0.009352426193017443}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.98815363646227, "nmae": 14.12841762077262, "r2": -111.98815363646227, "combined_score": 0.008772841458501546}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 68641835630241626816321159168.0000, nmae: 350621078612143.1875, r2: -68641835630241626816321159168.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log\u2013linear scaling law:\n      log(loss) = intercept + sum_i weight_i * log(feature_i)\n    Loss = exp(log(loss))\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (P,) or (T, P), where P = F + 1\n                   first column is intercept, next F are weights on log(features)\n    Returns:\n      predictions: (N,) or (N, T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n\n    # Ensure params is 2D: (T, P)\n    pars = np.asarray(params, dtype=float)\n    if pars.ndim == 1:\n        pars = pars[None, :]\n    T, P = pars.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected params with {F+1} elements, got {P}\")\n\n    # Compute log of inputs (all inputs must be positive)\n    # Clip to a small positive number to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)             # shape (N, F)\n\n    intercept = pars[:, 0]               # shape (T,)\n    weights   = pars[:, 1:]              # shape (T, F)\n\n    # Compute log-loss predictions: shape (N, T)\n    # log_loss[n, t] = intercept[t] + sum_i weights[t,i] * logX[n,i]\n    log_loss = logX.dot(weights.T) + intercept\n\n    # Exponentiate to get loss\n    loss_pred = np.exp(log_loss)\n\n    # If only one target, return shape (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law by solving a least-squares problem:\n      minimize || log(y) - [1, log(X)] \u00b7 w ||^2\n    Returns:\n      params: array of shape (P,) or (T, P), P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n\n    # Build design matrix [1, log(X)] of shape (N, P)\n    # Clip X to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n\n    # Prepare target log(y)\n    # Clip y to avoid log(0) / negative\n    y_clipped = np.clip(y, 1e-12, None)\n    logy = np.log(y_clipped)                                   # shape (N,) or (N, T)\n\n    # Solve least squares; supports multi\u2010output if logy is (N, T)\n    # w has shape (F+1,) or (F+1, T)\n    w, *_ = np.linalg.lstsq(X_design, logy, rcond=None)\n\n    # Return in shape (T, P) or (P,)\n    if w.ndim == 1:\n        return w\n    # w is (P, T) -> transpose to (T, P)\n    return w.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n\n### Program 2 (Score: 87655269653035.7969)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (68641835630241626816321159168.0000), Performs well on nmae (350621078612143.1875), Performs well on r2 (-68641835630241626816321159168.0000), Performs well on combined_score (0.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log\u2013linear scaling law:\n      log(loss) = intercept + sum_i weight_i * log(feature_i)\n    Loss = exp(log(loss))\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (P,) or (T, P), where P = F + 1\n                   first column is intercept, next F are weights on log(features)\n    Returns:\n      predictions: (N,) or (N, T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n\n    # Ensure params is 2D: (T, P)\n    pars = np.asarray(params, dtype=float)\n    if pars.ndim == 1:\n        pars = pars[None, :]\n    T, P = pars.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected params with {F+1} elements, got {P}\")\n\n    # Compute log of inputs (all inputs must be positive)\n    # Clip to a small positive number to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)             # shape (N, F)\n\n    intercept = pars[:, 0]               # shape (T,)\n    weights   = pars[:, 1:]              # shape (T, F)\n\n    # Compute log-loss predictions: shape (N, T)\n    # log_loss[n, t] = intercept[t] + sum_i weights[t,i] * logX[n,i]\n    log_loss = logX.dot(weights.T) + intercept\n\n    # Exponentiate to get loss\n    loss_pred = np.exp(log_loss)\n\n    # If only one target, return shape (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law by solving a least-squares problem:\n      minimize || log(y) - [1, log(X)] \u00b7 w ||^2\n    Returns:\n      params: array of shape (P,) or (T, P), P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n\n    # Build design matrix [1, log(X)] of shape (N, P)\n    # Clip X to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n\n    # Prepare target log(y)\n    # Clip y to avoid log(0) / negative\n    y_clipped = np.clip(y, 1e-12, None)\n    logy = np.log(y_clipped)                                   # shape (N,) or (N, T)\n\n    # Solve least squares; supports multi\u2010output if logy is (N, T)\n    # w has shape (F+1,) or (F+1, T)\n    w, *_ = np.linalg.lstsq(X_design, logy, rcond=None)\n\n    # Return in shape (T, P) or (P,)\n    if w.ndim == 1:\n        return w\n    # w is (P, T) -> transpose to (T, P)\n    return w.T\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to log\u2010linear fit\ntry:\n    from scipy.optimize import minimize\n    _have_minimize = True\nexcept ImportError:\n    _have_minimize = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a \n    power\u2010law plus floor model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    where floor >= 0 is parameterized as exp(u).\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (P,) or (T, P) with P = F + 2\n                   params[t,0] = intercept\n                   params[t,1:1+F] = weights w_i on log-features\n                   params[t,1+F] = u (log-floor), floor = exp(u)\n    Returns:\n      predictions: (N,) or (N, T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    params_arr = np.asarray(params, dtype=float)\n    # Ensure params are 2D: (T, P)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    expected_P = F + 2\n    if P != expected_P:\n        raise ValueError(f\"Expected params with {expected_P} elements, got {P}\")\n    # Clip inputs for log stability\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)          # shape (N, F)\n    intercept = params_arr[:, 0]           # (T,)\n    weights   = params_arr[:, 1:1+F]       # (T, F)\n    u_floor   = params_arr[:, 1+F]         # (T,)\n    floor     = np.exp(u_floor)            # (T,)\n    # Compute the power\u2010law term\n    # shape (N, T): each column t is intercept[t] + w[t]\u00b7logX\n    log_term = logX.dot(weights.T) + intercept\n    power_term = np.exp(log_term)          # (N, T)\n    # Add the floor\n    preds = power_term + floor[None, :]    # (N, T)\n    # If single target, return (N,)\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    by minimizing mean squared error in the loss domain.\n    Returns params of shape (P,) or (T, P).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n    P = F + 2\n\n    # Precompute log\u2010features\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)  # (N, F)\n\n    # Helper: initial guess via log\u2010linear regression with zero floor\n    def _init_params(target):\n        # Fit log(y) = b0 + w\u00b7logX\n        y_col = target\n        yc = np.clip(y_col, 1e-12, None)\n        logy = np.log(yc)\n        # design: [1, logX]\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n        # solve least squares\n        w, *_ = np.linalg.lstsq(A, logy, rcond=None)\n        intercept0 = w[0]\n        weights0   = w[1:]\n        # floor init: small fraction of min(y)\n        y_min = np.min(y_col)\n        floor0 = max(y_min * 0.05, 1e-8)\n        u0 = np.log(floor0)\n        return np.concatenate([[intercept0], weights0, [u0]])\n\n    # Objective for one target\n    def _objective(flat_p, target):\n        # flat_p: (P,)\n        intercept = flat_p[0]\n        wts       = flat_p[1:1+F]\n        u_floor   = flat_p[1+F]\n        floor     = np.exp(u_floor)\n        # predict\n        log_term = logX.dot(wts) + intercept\n        pred = np.exp(log_term) + floor\n        # MSE\n        resid = pred - target\n        return np.mean(resid*resid)\n\n    # Container for results\n    params_out = np.zeros((T, P), dtype=float)\n\n    # Loop over each output dimension\n    for t in range(T):\n        ycol = y2d[:, t]\n        # initial guess\n        p0 = _init_params(ycol)\n        if _have_minimize:\n            # optimize\n            res = minimize(\n                fun=lambda p: _objective(p, ycol),\n                x0=p0,\n                method='L-BFGS-B',\n                options={'maxiter': 500, 'ftol':1e-9}\n            )\n            if res.success:\n                params_out[t] = res.x\n            else:\n                # fallback to initial\n                params_out[t] = p0\n        else:\n            # no optimizer: just use the log\u2010linear solution and u0\n            params_out[t] = p0\n\n    # Return shape (P,) if single output\n    if T == 1:\n        return params_out[0]\n    return params_out\n# EVOLVE-BLOCK-END\n```"]}}}