{"id": "954eb624-7e80-438a-a1a8-36a259b5db2d", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given [lr, bsz, data_size, non_emb_param_size]\n    via a 7-parameter law:\n\n      loss \u2248 b\n             + exp( logA\n                     + e_lr1 * ln(lr)\n                     + e_lr2 * (ln(lr))^2\n                     + e_bsz * ln(bsz)\n                     + e_D   * ln(data_size)\n                     + e_N   * ln(non_embedding_param_size)\n                   )\n\n    params = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"scaling_law_func expects shape (N,4) input\")\n    b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_lr1 * log_lr\n        + e_lr2 * (log_lr ** 2)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE in log-space:\n\n      param vector = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n\n    1) initialize b to ~0.5 * min(loss)\n    2) do linear LS on ln(loss - b) vs [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    3) refine all params with L-BFGS-B on log-MSE objective\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"fit_scaling_law expects shape (N,4) input\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) initialize bias b0\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) linear LS in log-space for the other 6 params\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    # design matrix: [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    A = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        np.log(bsz),\n        np.log(D),\n        np.log(Np),\n    ])\n    # solve for theta = [logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0]\n    theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0 = theta\n\n    init_params = np.array([b0, logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0],\n                           dtype=np.float64)\n\n    # 3) refine via L-BFGS-B on MSE in log-space\n    def loss_fn(p):\n        b, _, _, _, _, _, _ = p\n        y_pred = scaling_law_func(X, p)\n        # ensure positivity inside log\n        yp_adj = np.clip(y_pred - b, eps, None)\n        y_adj2 = np.clip(y - b, eps, None)\n        diff = np.log(yp_adj) - np.log(y_adj2)\n        return np.mean(diff * diff)\n\n    # reasonable bounds\n    bounds = [\n        (0.0, y_min),      # b \u2208 [0, ~min(y)]\n        (None, None),      # logA\n        (-5.0, 5.0),       # e_lr1\n        (-1.0, 1.0),       # e_lr2 (small quadratic curvature)\n        (-5.0, 5.0),       # e_bsz\n        (-5.0, 5.0),       # e_D\n        (-5.0, 5.0),       # e_N\n    ]\n\n    res = minimize(loss_fn, init_params,\n                   method=\"L-BFGS-B\", bounds=bounds)\n    if res.success:\n        return res.x\n    else:\n        # fallback to the LS initialization\n        return init_params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "026fd3e5-7c46-4fb7-863a-3f034fd53941", "generation": 3, "timestamp": 1754803776.4734461, "iteration_found": 22, "metrics": {"nmse": 109.18666984048689, "nmae": 13.938236217167217, "r2": -108.18666984048689, "combined_score": 0.009075507967049576}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 72.36945983415181, "nmae": 11.2751175498048, "r2": -71.36945983415181, "combined_score": 0.013629649206365326}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 72.3695\n- nmae: 11.2751\n- r2: -71.3695\n- combined_score: 0.0136\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 72.3695, nmae: 11.2751, r2: -71.3695, combined_score: 0.0136\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.0722)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6\u2010parameter power law plus bias:\n\n      loss \u2248 b + exp( logA\n                       + e_lr  * ln(lr)\n                       + e_bsz * ln(bsz)\n                       + e_D   * ln(data_size)\n                       + e_N   * ln(non_embedding_param_size) )\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 = [b, logA, e_lr, e_bsz, e_D, e_N]\n\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # add tiny eps to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n\n    Model: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb^{e_N},\n           with A = exp(logA).\n\n    Returns:\n      params_opt: array of length 6 = [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    # small constant\n    eps = 1e-12\n\n    # 1) initialize bias b0 to half of min(y)\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) do linear regression in log\u2010space on y - b0\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    # design matrix: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    logs = np.log(X + eps)\n    A_mat = np.concatenate((np.ones((N, 1)), logs), axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_D0, e_N0]\n    logA0, e_lr0, e_bsz0, e_D0, e_N0 = theta_ls\n\n    # initial parameter vector\n    init_params = np.array([b0, logA0, e_lr0, e_bsz0, e_D0, e_N0], dtype=np.float64)\n\n    # bounds: b\u2208[0, 1.5*max(y)], logA unbounded, exponents \u2208[-5,5]\n    bounds = [(0.0, 1.5 * np.max(y)),  # b\n              (None, None),            # logA\n              (-5.0, 5.0),             # e_lr\n              (-5.0, 5.0),             # e_bsz\n              (-5.0, 5.0),             # e_D\n              (-5.0, 5.0)]             # e_N\n\n    # objective: mean squared error in original loss space\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize with L-BFGS-B\n    result = minimize(_mse, init_params, method='L-BFGS-B', bounds=bounds)\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\nKey features: Performs well on nmse (72.3695), Performs well on nmae (11.2751), Performs well on r2 (-71.3695), Performs well on combined_score (0.0136)\n\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6\u2010parameter power law plus bias:\n\n      loss \u2248 b + exp( logA\n                       + e_lr  * ln(lr)\n                       + e_bsz * ln(bsz)\n                       + e_D   * ln(data_size)\n                       + e_N   * ln(non_embedding_param_size) )\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 = [b, logA, e_lr, e_bsz, e_D, e_N]\n\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # add tiny eps to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n\n    Model: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb^{e_N},\n           with A = exp(logA).\n\n    Returns:\n      params_opt: array of length 6 = [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    # small constant\n    eps = 1e-12\n\n    # 1) initialize bias b0 to half of min(y)\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) do linear regression in log\u2010space on y - b0\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    # design matrix: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    logs = np.log(X + eps)\n    A_mat = np.concatenate((np.ones((N, 1)), logs), axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_D0, e_N0]\n    logA0, e_lr0, e_bsz0, e_D0, e_N0 = theta_ls\n\n    # initial parameter vector\n    init_params = np.array([b0, logA0, e_lr0, e_bsz0, e_D0, e_N0], dtype=np.float64)\n\n    # bounds: b\u2208[0, 1.5*max(y)], logA unbounded, exponents \u2208[-5,5]\n    bounds = [(0.0, 1.5 * np.max(y)),  # b\n              (None, None),            # logA\n              (-5.0, 5.0),             # e_lr\n              (-5.0, 5.0),             # e_bsz\n              (-5.0, 5.0),             # e_D\n              (-5.0, 5.0)]             # e_N\n\n    # objective: mean squared error in original loss space\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize with L-BFGS-B\n    result = minimize(_mse, init_params, method='L-BFGS-B', bounds=bounds)\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Below is a revised implementation that (1) adds a small quadratic term in log-learning-rate to capture the \u201coptimum-shaped\u201d effect of lr, (2) fits in log-space (i.e. minimizes MSE of log-predictions) to balance relative errors across scales, and (3) retains a simple closed-form initialization via linear least squares in log-space before a short L-BFGS-B refinement.  Overall the model grows from 6\u21927 parameters but remains highly parsimonious and more numerically robust.\n\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given [lr, bsz, data_size, non_emb_param_size]\n    via a 7-parameter law:\n\n      loss \u2248 b\n             + exp( logA\n                     + e_lr1 * ln(lr)\n                     + e_lr2 * (ln(lr))^2\n                     + e_bsz * ln(bsz)\n                     + e_D   * ln(data_size)\n                     + e_N   * ln(non_embedding_param_size)\n                   )\n\n    params = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"scaling_law_func expects shape (N,4) input\")\n    b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_lr1 * log_lr\n        + e_lr2 * (log_lr ** 2)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE in log-space:\n\n      param vector = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n\n    1) initialize b to ~0.5 * min(loss)\n    2) do linear LS on ln(loss - b) vs [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    3) refine all params with L-BFGS-B on log-MSE objective\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"fit_scaling_law expects shape (N,4) input\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) initialize bias b0\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) linear LS in log-space for the other 6 params\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    # design matrix: [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    A = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        np.log(bsz),\n        np.log(D),\n        np.log(Np),\n    ])\n    # solve for theta = [logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0]\n    theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0 = theta\n\n    init_params = np.array([b0, logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0],\n                           dtype=np.float64)\n\n    # 3) refine via L-BFGS-B on MSE in log-space\n    def loss_fn(p):\n        b, _, _, _, _, _, _ = p\n        y_pred = scaling_law_func(X, p)\n        # ensure positivity inside log\n        yp_adj = np.clip(y_pred - b, eps, None)\n        y_adj2 = np.clip(y - b, eps, None)\n        diff = np.log(yp_adj) - np.log(y_adj2)\n        return np.mean(diff * diff)\n\n    # reasonable bounds\n    bounds = [\n        (0.0, y_min),      # b \u2208 [0, ~min(y)]\n        (None, None),      # logA\n        (-5.0, 5.0),       # e_lr1\n        (-1.0, 1.0),       # e_lr2 (small quadratic curvature)\n        (-5.0, 5.0),       # e_bsz\n        (-5.0, 5.0),       # e_D\n        (-5.0, 5.0),       # e_N\n    ]\n\n    res = minimize(loss_fn, init_params,\n                   method=\"L-BFGS-B\", bounds=bounds)\n    if res.success:\n        return res.x\n    else:\n        # fallback to the LS initialization\n        return init_params\n\n# EVOLVE-BLOCK-END\n```\n\nKey improvements:\n\n\u2022 A small \u201clog-lr\u00b2\u201d term (e_lr2) lets the model capture an optimum-shaped dependence on learning rate.  \n\u2022 We minimize MSE in log-space (`mean((log y_pred \u2013 log y)^2)`), which better balances relative errors across the full range of losses.  \n\u2022 Initialization still uses a fast closed-form least squares in log domain for stability, followed by a short L-BFGS-B refinement.  \n\nThis remains a 7-parameter, fully differentiable model with robust fitting and improved expressivity."]}}}