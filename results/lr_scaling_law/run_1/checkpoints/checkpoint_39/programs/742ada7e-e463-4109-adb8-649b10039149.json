{"id": "742ada7e-e463-4109-adb8-649b10039149", "code": "\"\"\"\nImproved two\u2010term power\u2010law scaling model for LLM fine\u2010tuning scenarios.\nWe model the loss as a sum of a multiplicative power\u2010law term plus a constant floor:\n   loss(x) = term1(x) + term2\n   term1(x) = exp(log_k + \u03a3_i \u03b1_i * log(x_i))\n   term2    = exp(log_c)\nParameters: [log_k, \u03b1_1\u2026\u03b1_4, log_c]\nFitted by minimizing MSE in log\u2010loss space with mild regularization on \u03b1's,\nusing L\u2010BFGS\u2010B for robust, bounded nonlinear optimization.\nFeatures: [lr, bsz, data_size, non_embedding_param_size]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a two\u2010term power law.\n    loss = exp(log_k + \u03a3_i \u03b1_i * log(x_i)) + exp(log_c)\n\n    Inputs:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6):\n                   [log_k, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, log_c]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got {P}\")\n    # unpack parameters\n    log_k  = p[:, 0]      # (T,)\n    alphas = p[:, 1:5]    # (T,4)\n    log_c  = p[:, 5]      # (T,)\n\n    # term1 = exp(log_k + logX @ alphas.T)\n    lin = log_k[None, :] + logX.dot(alphas.T)  # (N,T)\n    term1 = np.exp(lin)\n    # term2 = exp(log_c)\n    term2 = np.exp(log_c)[None, :]             # (1,T)\n\n    loss_pred = term1 + term2                  # (N,T)\n    # if single parameter set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model by minimizing MSE in log\u2010loss space:\n      minimize  mean( ( log(pred) - log(y) )^2 )  + reg * ||\u03b1||^2\n    over parameters [log_k, \u03b1_1..\u03b1_4, log_c], using L\u2010BFGS\u2010B.\n\n    Returns optimized params: array of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # clip to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    # precompute log(y)\n    y_log = np.log(y)\n\n    # initial guess: power\u2010law dominates median, floor at 10% of minimum\n    med = np.median(y)\n    mn  = np.min(y)\n    init = np.zeros(6, dtype=np.float64)\n    init[0]   = np.log(med + 1e-12)   # log_k\n    init[1:5] = 0.0                   # \u03b1's\n    init[5]   = np.log(mn * 0.1 + 1e-12)  # log_c\n\n    # regularization weight on alphas\n    reg_alpha = 1e-2\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # ensure positive for log\n        pred = np.clip(pred, 1e-12, None)\n        # MSE in log\u2010loss space\n        loss_mse = np.mean((np.log(pred) - y_log) ** 2)\n        # L2 regularization on exponents\n        reg = reg_alpha * np.sum(p[1:5] ** 2)\n        return loss_mse + reg\n\n    # bounds: keep parameters in reasonable ranges\n    bounds = [\n        (-20, 20),    # log_k\n        (-3, 3),      # \u03b1_lr\n        (-3, 3),      # \u03b1_bsz\n        (-3, 3),      # \u03b1_data_size\n        (-3, 3),      # \u03b1_param_size\n        (-20, 20),    # log_c\n    ]\n\n    res = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter':1000, 'ftol':1e-12}\n    )\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess\n        return init", "language": "python", "parent_id": "645be9bd-ed1e-4eff-8fca-44f1d1e6a460", "generation": 3, "timestamp": 1754798891.499105, "iteration_found": 29, "metrics": {"nmse": 158.2324498431723, "nmae": 17.03540295855238, "r2": -157.2324498431723, "combined_score": 0.00628012695267138}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 252.6072932858114, "nmae": 21.53925179470747, "r2": -251.6072932858114, "combined_score": 0.003943104265826519}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 252.6073\n- nmae: 21.5393\n- r2: -251.6073\n- combined_score: 0.0039\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 252.6073, nmae: 21.5393, r2: -251.6073, combined_score: 0.0039\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 165.0033, nmae: 17.3975, r2: -164.0033, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 158.3592, nmae: 17.0417, r2: -157.3592, combined_score: 0.0063\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.5120)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM finetuning:\n  loss \u2248 exp(logk + \u03a3_i \u03b1_i \u00b7 log(x_i)) + exp(logc)\n\nHere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit [logk, \u03b11..\u03b14, logc] by minimizing MSE in loss\u2010space\nwith L\u2010BFGS\u2010B and mild regularization for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a two\u2010term power law:\n       loss = term1 + term2\n       term1 = exp(logk + \u03a3_i \u03b1_i * log(x_i))\n       term2 = exp(logc)\n    Inputs:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6):\n                   [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to positive\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow both single\u2010set or multi\u2010set of parameters\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got {P}\")\n    # unpack\n    logk      = p[:, 0]         # (T,)\n    alphas    = p[:, 1:5]       # (T,4)\n    logc      = p[:, 5]         # (T,)\n    # compute term1: exp(logk + logX @ alphas.T)\n    lin_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    term1    = np.exp(lin_term)\n    term2    = np.exp(logc)[None, :]               # (1,T)\n    loss_pred = term1 + term2                      # (N,T)\n\n    # if single parameter\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model by minimizing mean squared error\n    in original loss space, over parameters [logk, \u03b11..\u03b14, logc].\n    Returns optimized params of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce lower bound on y for log-safety\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # prepare initial guess\n    # logk init = log(median(y)), \u03b1_i init = 0, logc init = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(6, dtype=np.float64)\n    init[0]     = np.log(median_y + 1e-8)\n    init[1:5]   = 0.0\n    init[5]     = np.log(min_y * 0.1 + 1e-8)\n\n    # mild L2 regularization on alphas to keep exponents reasonable\n    reg_alpha = 1e-3\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        mse  = np.mean((pred - y)**2)\n        # regularize only the four alpha terms\n        reg  = reg_alpha * np.sum(p[1:5]**2)\n        return mse + reg\n\n    # use bounds to avoid pathological values\n    # logk \u2208 [\u221250,50], \u03b1_i \u2208 [\u22125,5], logc \u2208 [\u221250,50]\n    bounds = [(-50, 50)] + [(-5, 5)]*4 + [(-50, 50)]\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.3592), Performs well on nmae (17.0417), Performs well on r2 (-157.3592), Performs well on combined_score (0.0063)\n\n\n### Program 2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using a log\u2010linear (multiplicative power\u2010law) form \nwith closed\u2010form least\u2010squares fitting in the log domain for stability, \ncross\u2010scale generalization, and parameter efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a multiplicative power law:\n      loss \u2248 exp(intercept + \u03a3_i coef_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embed_param_size].\n    \n    Inputs:\n      data_points: (N,4) array of positive hyperparameters\n      params: either shape (P,) or (T,P), P=5 = 1 intercept + 4 coefs\n    Output:\n      preds: shape (N,) if single\u2010output, else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if np.any(X <= 0):\n        raise ValueError(\"All input features must be positive for log transform.\")\n    N, F = X.shape\n    params = np.asarray(params, dtype=float)\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected {F+1} parameters, got {P}\")\n    intercept = params[:, 0]       # (T,)\n    coefs     = params[:, 1:]      # (T, F)\n    logX      = np.log(X)          # (N, F)\n    # log\u2010domain prediction: (N,T)\n    log_pred  = logX.dot(coefs.T) + intercept[None, :]\n    pred      = np.exp(log_pred)   # (N, T)\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by solving:\n      minimize || log(y) \u2212 [1, log(x)]\u00b7theta ||^2\n    in closed form via np.linalg.lstsq.\n    \n    Returns params of shape (5,) or (T,5).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if np.any(X <= 0):\n        raise ValueError(\"All input features must be positive for log transform.\")\n    # handle single vs. multi\u2010target\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    if np.any(y2d <= 0):\n        raise ValueError(\"All target loss values must be positive for log transform.\")\n    N, F = X.shape\n    # build design matrix [1, log(x1), ..., log(xF)]\n    logX   = np.log(X)                             # (N, F)\n    Design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    # solve in log\u2010domain: theta has shape (F+1, ) or (F+1, T)\n    theta, *_ = np.linalg.lstsq(Design, np.log(y2d), rcond=None)\n    # reshape to match original API: (P,) or (T, P)\n    if theta.ndim == 1:\n        return theta\n    else:\n        return theta.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0033), Performs well on nmae (17.3975), Performs well on r2 (-164.0033), Performs well on combined_score (0.0060)\n\n\n### Program 3 (Score: 5.6358)\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nExtended log\u2013quadratic power\u2010law model fitted via closed\u2010form ridge regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel form:\n   log(loss) \u2248 \u03b8\u2080 \n              + \u03a3\u1d62 \u03b8\u1d62 \u00b7 log(x\u1d62) \n              + \u03a3\u1d62 \u03c6\u1d62 \u00b7 (log(x\u1d62))\u00b2\nTotal parameters: 1 intercept + 4 linear + 4 quadratic = 9\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (9,) or (T,9) array [\u03b8\u2080, \u03b8\u2081\u2026\u03b8\u2084, \u03c6\u2081\u2026\u03c6\u2084]\n    Returns:     (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure strictly positive to take logs\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # form log\u2010features\n    logX = np.log(X)                                         # (N,4)\n    # build design matrix [1, logX1\u2026logX4, (logX1)^2\u2026(logX4)^2]\n    N, F = logX.shape                                         # F should be 4\n    quad = logX**2                                            # (N,4)\n    design = np.concatenate([np.ones((N,1)), logX, quad], axis=1)  # (N,9)\n\n    # handle param shapes\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                        # (1,9)\n    T, P = p.shape\n    assert P == design.shape[1], f\"Expected params of length {design.shape[1]}, got {P}\"\n    # compute log\u2010predictions and exponentiate\n    log_preds = design @ p.T                                 # (N,T)\n    preds = np.exp(log_preds)\n    return preds[:,0] if T == 1 else preds                   # (N,) or (N,T)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law via ridge regression in log space:\n      log(loss) = \u03b8\u2080 \n                  + \u03a3\u1d62 \u03b8\u1d62 \u00b7 log(x\u1d62) \n                  + \u03a3\u1d62 \u03c6\u1d62 \u00b7 (log(x\u1d62))\u00b2\n    Returns params: (9,) array [\u03b8\u2080, \u03b8\u2081\u2026\u03b8\u2084, \u03c6\u2081\u2026\u03c6\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)                 # (N,) or (N,1)\n\n    # ensure strictly positive for logs\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None).reshape(-1)                     # flatten to (N,)\n\n    # build design matrix same as in scaling_law_func\n    logX = np.log(X)                                         # (N,4)\n    quad = logX**2                                            # (N,4)\n    N, F = logX.shape                                         # F == 4\n    design = np.concatenate([np.ones((N,1)), logX, quad], axis=1)  # (N,9)\n\n    # target is log(loss)\n    t = np.log(y)                                             # (N,)\n\n    # ridge parameter scaled to data magnitude for stability\n    P = design.shape[1]                                       # 9\n    # raw XtX for trace\n    XtX_raw = design.T @ design\n    ridge = 1e-6 * np.trace(XtX_raw) / P\n    # solve (X\u1d40X + ridge\u00b7I) \u03b8 = X\u1d40 t\n    A = XtX_raw + ridge * np.eye(P)\n    b = design.T @ t                                          # (9,)\n    theta = np.linalg.solve(A, b)                             # (9,)\n\n    return theta\n```\nKey features: Performs well on nmse (252.6073), Performs well on nmae (21.5393), Performs well on r2 (-251.6073), Performs well on combined_score (0.0039)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.5120, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM finetuning:\n  loss \u2248 exp(logk + \u03a3_i \u03b1_i \u00b7 log(x_i)) + exp(logc)\n\nHere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit [logk, \u03b11..\u03b14, logc] by minimizing MSE in loss\u2010space\nwith L\u2010BFGS\u2010B and mild regularization for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a two\u2010term power law:\n       loss = term1 + term2\n       term1 = exp(logk + \u03a3_i \u03b1_i * log(x_i))\n       term2 = exp(logc)\n    Inputs:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6):\n                   [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to positive\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow both single\u2010set or multi\u2010set of parameters\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got {P}\")\n    # unpack\n    logk      = p[:, 0]         # (T,)\n    alphas    = p[:, 1:5]       # (T,4)\n    logc      = p[:, 5]         # (T,)\n    # compute term1: exp(logk + logX @ alphas.T)\n    lin_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    term1    = np.exp(lin_term)\n    term2    = np.exp(logc)[None, :]               # (1,T)\n    loss_pred = term1 + term2                      # (N,T)\n\n    # if single parameter\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model by minimizing mean squared error\n    in original loss space, over parameters [logk, \u03b11..\u03b14, logc].\n    Returns optimized params of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce lower bound on y for log-safety\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # prepare initial guess\n    # logk init = log(median(y)), \u03b1_i init = 0, logc init = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(6, dtype=np.float64)\n    init[0]     = np.log(median_y + 1e-8)\n    init[1:5]   = 0.0\n    init[5]     = np.log(min_y * 0.1 + 1e-8)\n\n    # mild L2 regularization on alphas to keep exponents reasonable\n    reg_alpha = 1e-3\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        mse  = np.mean((pred - y)**2)\n        # regularize only the four alpha terms\n        reg  = reg_alpha * np.sum(p[1:5]**2)\n        return mse + reg\n\n    # use bounds to avoid pathological values\n    # logk \u2208 [\u221250,50], \u03b1_i \u2208 [\u22125,5], logc \u2208 [\u221250,50]\n    bounds = [(-50, 50)] + [(-5, 5)]*4 + [(-50, 50)]\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (158.359), Excellent nmae (17.042)\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nExtended log\u2013quadratic power\u2010law model fitted via closed\u2010form ridge regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel form:\n   log(loss) \u2248 \u03b8\u2080 \n              + \u03a3\u1d62 \u03b8\u1d62 \u00b7 log(x\u1d62) \n              + \u03a3\u1d62 \u03c6\u1d62 \u00b7 (log(x\u1d62))\u00b2\nTotal parameters: 1 intercept + 4 linear + 4 quadratic = 9\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (9,) or (T,9) array [\u03b8\u2080, \u03b8\u2081\u2026\u03b8\u2084, \u03c6\u2081\u2026\u03c6\u2084]\n    Returns:     (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure strictly positive to take logs\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # form log\u2010features\n    logX = np.log(X)                                         # (N,4)\n    # build design matrix [1, logX1\u2026logX4, (logX1)^2\u2026(logX4)^2]\n    N, F = logX.shape                                         # F should be 4\n    quad = logX**2                                            # (N,4)\n    design = np.concatenate([np.ones((N,1)), logX, quad], axis=1)  # (N,9)\n\n    # handle param shapes\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                        # (1,9)\n    T, P = p.shape\n    assert P == design.shape[1], f\"Expected params of length {design.shape[1]}, got {P}\"\n    # compute log\u2010predictions and exponentiate\n    log_preds = design @ p.T                                 # (N,T)\n    preds = np.exp(log_preds)\n    return preds[:,0] if T == 1 else preds                   # (N,) or (N,T)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law via ridge regression in log space:\n      log(loss) = \u03b8\u2080 \n                  + \u03a3\u1d62 \u03b8\u1d62 \u00b7 log(x\u1d62) \n                  + \u03a3\u1d62 \u03c6\u1d62 \u00b7 (log(x\u1d62))\u00b2\n    Returns params: (9,) array [\u03b8\u2080, \u03b8\u2081\u2026\u03b8\u2084, \u03c6\u2081\u2026\u03c6\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)                 # (N,) or (N,1)\n\n    # ensure strictly positive for logs\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None).reshape(-1)                     # flatten to (N,)\n\n    # build design matrix same as in scaling_law_func\n    logX = np.log(X)                                         # (N,4)\n    quad = logX**2                                            # (N,4)\n    N, F = logX.shape                                         # F == 4\n    design = np.concatenate([np.ones((N,1)), logX, quad], axis=1)  # (N,9)\n\n    # target is log(loss)\n    t = np.log(y)                                             # (N,)\n\n    # ridge parameter scaled to data magnitude for stability\n    P = design.shape[1]                                       # 9\n    # raw XtX for trace\n    XtX_raw = design.T @ design\n    ridge = 1e-6 * np.trace(XtX_raw) / P\n    # solve (X\u1d40X + ridge\u00b7I) \u03b8 = X\u1d40 t\n    A = XtX_raw + ridge * np.eye(P)\n    b = design.T @ t                                          # (9,)\n    theta = np.linalg.solve(A, b)                             # (9,)\n\n    return theta\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nImproved two\u2010term power\u2010law scaling model for LLM fine\u2010tuning scenarios.\nWe model the loss as a sum of a multiplicative power\u2010law term plus a constant floor:\n   loss(x) = term1(x) + term2\n   term1(x) = exp(log_k + \u03a3_i \u03b1_i * log(x_i))\n   term2    = exp(log_c)\nParameters: [log_k, \u03b1_1\u2026\u03b1_4, log_c]\nFitted by minimizing MSE in log\u2010loss space with mild regularization on \u03b1's,\nusing L\u2010BFGS\u2010B for robust, bounded nonlinear optimization.\nFeatures: [lr, bsz, data_size, non_embedding_param_size]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a two\u2010term power law.\n    loss = exp(log_k + \u03a3_i \u03b1_i * log(x_i)) + exp(log_c)\n\n    Inputs:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6):\n                   [log_k, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, log_c]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got {P}\")\n    # unpack parameters\n    log_k  = p[:, 0]      # (T,)\n    alphas = p[:, 1:5]    # (T,4)\n    log_c  = p[:, 5]      # (T,)\n\n    # term1 = exp(log_k + logX @ alphas.T)\n    lin = log_k[None, :] + logX.dot(alphas.T)  # (N,T)\n    term1 = np.exp(lin)\n    # term2 = exp(log_c)\n    term2 = np.exp(log_c)[None, :]             # (1,T)\n\n    loss_pred = term1 + term2                  # (N,T)\n    # if single parameter set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model by minimizing MSE in log\u2010loss space:\n      minimize  mean( ( log(pred) - log(y) )^2 )  + reg * ||\u03b1||^2\n    over parameters [log_k, \u03b1_1..\u03b1_4, log_c], using L\u2010BFGS\u2010B.\n\n    Returns optimized params: array of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # clip to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    # precompute log(y)\n    y_log = np.log(y)\n\n    # initial guess: power\u2010law dominates median, floor at 10% of minimum\n    med = np.median(y)\n    mn  = np.min(y)\n    init = np.zeros(6, dtype=np.float64)\n    init[0]   = np.log(med + 1e-12)   # log_k\n    init[1:5] = 0.0                   # \u03b1's\n    init[5]   = np.log(mn * 0.1 + 1e-12)  # log_c\n\n    # regularization weight on alphas\n    reg_alpha = 1e-2\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # ensure positive for log\n        pred = np.clip(pred, 1e-12, None)\n        # MSE in log\u2010loss space\n        loss_mse = np.mean((np.log(pred) - y_log) ** 2)\n        # L2 regularization on exponents\n        reg = reg_alpha * np.sum(p[1:5] ** 2)\n        return loss_mse + reg\n\n    # bounds: keep parameters in reasonable ranges\n    bounds = [\n        (-20, 20),    # log_k\n        (-3, 3),      # \u03b1_lr\n        (-3, 3),      # \u03b1_bsz\n        (-3, 3),      # \u03b1_data_size\n        (-3, 3),      # \u03b1_param_size\n        (-20, 20),    # log_c\n    ]\n\n    res = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter':1000, 'ftol':1e-12}\n    )\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess\n        return init\n```\n"]}}}