{"id": "cba1a866-68e9-4025-af73-d6a1d45e6bef", "code": "import numpy as np\nfrom scipy.optimize import minimize_scalar\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via a bias + log-linear power law:\n      loss \u2248 b + exp(\u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                      + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size))\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-6 array [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b = float(params[0])\n    theta = np.asarray(params[1:], dtype=float)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    # linear combination in log\u2010space\n    log_term = theta[0] + logs.dot(theta[1:])\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law:\n      loss = b + exp(\u03b80 + \u03a3_i \u03b8_{i+1} * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    We optimize bias b by a bounded 1D search and solve for \u03b8 in closed form:\n      1) For a candidate b, compute y' = log(loss_values - b)\n      2) Fit \u03b8 by linear least squares:  y' \u2248 [1, log(x)] \u00b7 \u03b8\n      3) Evaluate MSE in original domain.\n    Inputs:\n      data_points: (N,4) array of floats\n      loss_values: (N,) array of floats (all > 0)\n    Returns:\n      params: length-6 array [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points with 4 features, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    # Precompute design matrix for theta: A = [1, log(x)]\n    eps = 1e-12\n    Z = np.log(X + eps)                     # (N,4)\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # (N,5)\n    y_min = np.min(y)\n    # Objective: for a given bias b, fit \u03b8 via least squares on log(y - b)\n    def obj(bias):\n        # bias must be in [0, y_min)\n        if bias < 0 or bias >= y_min:\n            return np.inf\n        y_shift = y - bias\n        if np.any(y_shift <= 0):\n            return np.inf\n        y_log = np.log(y_shift)\n        theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n        pred = bias + np.exp(A.dot(theta))\n        return np.mean((pred - y)**2)\n    # If minimal y \u2264 0, fix bias to zero\n    if y_min <= 0:\n        b_opt = 0.0\n    else:\n        # search in [0, y_min*0.999] for best bias\n        upper = y_min * 0.999\n        res = minimize_scalar(\n            obj,\n            bounds=(0.0, upper),\n            method='bounded',\n            options={'xatol': 1e-6, 'maxiter': 50}\n        )\n        b_opt = float(res.x) if res.success else 0.0\n    # Final \u03b8 fit\n    y_shift = y - b_opt\n    y_shift = np.clip(y_shift, eps, None)\n    theta, *_ = np.linalg.lstsq(A, np.log(y_shift), rcond=None)\n    # return [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    return np.concatenate(([b_opt], theta))\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "36950f5a-d6ca-4e2c-af28-019becaa6c45", "generation": 2, "timestamp": 1754803163.9214914, "iteration_found": 37, "metrics": {"nmse": 50.025426435303324, "nmae": 9.342195960203316, "r2": -49.025426435303324, "combined_score": 0.01959807237021194}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 63.27991527274686, "nmae": 10.5314201590291, "r2": -62.27991527274686, "combined_score": 0.015556958900099484}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 63.2799\n- nmae: 10.5314\n- r2: -62.2799\n- combined_score: 0.0156\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 63.2799, nmae: 10.5314, r2: -62.2799, combined_score: 0.0156\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 50.0254, nmae: 9.3422, r2: -49.0254, combined_score: 0.0196\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 33.6590, nmae: 7.6206, r2: -32.6590, combined_score: 0.0289\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1624)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter power\u2010law + bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_emb_p^{e_model}\n    with A = exp(logA).\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:       length-6 array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    lr   = np.log(X[:,0] + eps) * e_lr\n    bsz  = np.log(X[:,1] + eps) * e_bsz\n    D    = np.log(X[:,2] + eps) * e_data\n    M    = np.log(X[:,3] + eps) * e_model\n    # exponentiate combined exponent\n    term = np.exp(logA + lr + bsz + D + M)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit [b, logA, e_lr, e_bsz, e_data, e_model] by minimizing MSE.\n    Returns length-6 array of optimized parameters.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # simple fallback if all y equal\n    if np.allclose(y, y[0]):\n        return np.array([y[0], np.log(max(y[0],1e-6)), 0,0,0,0], dtype=np.float64)\n\n    # initial guess from ordinary log-linear regression (drop bias)\n    eps = 1e-12\n    Z = np.log(X + eps)                          # (N,4)\n    y_log = np.log(np.maximum(y - y.min()*0.5, eps))\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # (N,5)\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)         # length-5\n    # interpret theta: theta[0] ~ logA, theta[1..4] ~ exponents\n    logA0     = theta[0]\n    exponents0= theta[1:].tolist()\n    # bias initial: small fraction of minimum y\n    b0 = max(0.0, y.min()*0.4)\n\n    # pack two inits: one from LS, one more conservative\n    inits = [\n        np.array([b0, logA0] + exponents0, dtype=np.float64),\n        np.array([0.0, logA0 - 1.0] + [e*0.5 for e in exponents0], dtype=np.float64)\n    ]\n\n    # bounds: bias \u2208 [0, max(y)], logA unbounded, exponents \u2208 [-5, +5]\n    bounds = [\n        (0.0, float(y.max())),\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    best_p = None\n    best_val = np.inf\n    for init in inits:\n        res = minimize(mse_obj, init, method=\"L-BFGS-B\", bounds=bounds)\n        if res.success and res.fun < best_val:\n            best_val = res.fun\n            best_p = res.x\n\n    # fallback\n    if best_p is None:\n        best_p = inits[0]\n    return best_p\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.6590), Performs well on nmae (7.6206), Performs well on r2 (-32.6590), Performs well on combined_score (0.0289)\n\n\n### Program 2 (Score: 2.5904)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nModel:\n  loss \u2248 b + exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                      + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n\nWe fit the bias b by a 1D bounded scalar optimization,\nand for each candidate b solve a closed\u2010form linear regression\nin the log\u2010domain for \u03b8 = [\u03b80\u2026\u03b84].\n\nThis approach is numerically stable, convex in \u03b8, and efficient.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize_scalar\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via bias + log\u2010linear power law.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: length\u20106 array [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n            where loss = b + exp(\u03b80 + \u03a3_i \u03b8_{i+1} * log(feature_i))\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    params = np.asarray(params, dtype=float).ravel()\n    if params.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 params, got {params.size}\")\n    b = params[0]\n    theta = params[1:]                # length\u20105: [\u03b80, \u03b81\u2026\u03b84]\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_term = theta[0] + logs.dot(theta[1:])  # \u03b80 + \u03a3 \u03b8_i * log(x_i)\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law:\n      loss = b + exp(\u03b80 + \u03a3_i \u03b8_{i+1} * log(feature_i))\n    by minimizing MSE in the original domain via:\n      1) a scalar bounded search on b \u2208 [0, min(y) * 0.999]\n      2) closed\u2010form least\u2010squares for \u03b8 given b.\n    Returns: params array [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    # Precompute log\u2010features design matrix A for \u03b8\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_min = np.min(y)\n    # Objective: given b, fit \u03b8 by linear least squares on log(y - b)\n    def obj(bias):\n        # bias must be strictly less than smallest y\n        if bias < 0 or bias >= y_min:\n            return np.inf\n        y_shift = y - bias\n        if np.any(y_shift <= 0):\n            return np.inf\n        y_log = np.log(y_shift)\n        # closed\u2010form LS for \u03b8\n        theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n        # compute MSE in original domain\n        pred = bias + np.exp(A.dot(theta))\n        return np.mean((pred - y)**2)\n    # find optimal bias b\n    if y_min <= 0:\n        b_opt = 0.0\n    else:\n        res = minimize_scalar(\n            obj,\n            bounds=(0.0, y_min * 0.999),\n            method='bounded',\n            options={'xatol':1e-8, 'maxiter':50}\n        )\n        b_opt = float(res.x) if res.success else 0.0\n    # final fit of \u03b8 given b_opt\n    y_shift = y - b_opt\n    y_shift = np.clip(y_shift, eps, None)\n    y_log = np.log(y_shift)\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    # assemble parameter vector\n    # [b_opt, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    params = np.concatenate(([b_opt], theta))\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (50.0254), Performs well on nmae (9.3422), Performs well on r2 (-49.0254), Performs well on combined_score (0.0196)\n\n\n### Program 3 (Score: 2.8867)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n\n    # Unpack parameters\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numeric stability\n    eps = 1e-12\n    # Compute in log\u2010space\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    # Back to linear\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target loss_values by returning an array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D for uniform handling\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    # Objective builder for a single target vector\n    def _fit_one(y_vec):\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two inits: one near zero bias, one with small exponents\n        init1 = np.array([\n            max(0.0, y_min * 0.5),           # bias b\n            np.log(max(y_max - y_min, 1e-3)),# logA\n            -0.5, -0.5, -0.5, -0.5           # exponents\n        ], dtype=float)\n        init2 = np.array([\n            0.0,\n            np.log(max(y_max, 1e-3)),\n            -1.0, -0.1, -0.1, -0.1\n        ], dtype=float)\n        # Bounds on parameters\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),  # b \u2265 0\n            (None, None),                # logA unbounded\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_data\n            (-5.0, 5.0),                 # e_model\n        ]\n\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        best_p, best_loss = None, np.inf\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        # Fallback\n        return best_p if best_p is not None else init1\n\n    # Fit each target separately\n    if T == 1:\n        return _fit_one(y2d[:, 0])\n    else:\n        return np.vstack([_fit_one(y2d[:, i]) for i in range(T)])\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (63.2799), Performs well on nmae (10.5314), Performs well on r2 (-62.2799), Performs well on combined_score (0.0156)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nModel form:\n  loss \u2248 b + exp(logA \n                + e_lr*log(lr) \n                + e_bsz*log(bsz) \n                + e_data*log(data_size) \n                + e_model*log(non_embedding_param_size))\nFitted by multi\u2010start L-BFGS-B on mean squared error.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: NumPy array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-6 array [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length-N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    # Add small epsilon to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # Log\u2010space power law\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error via L-BFGS-B with two starting points.\n    \n    Supports single\u2010target (shape (N,)) or multi\u2010target (shape (N,T)).\n    Returns:\n      - For single target: 1D array of length 6\n      - For multi\u2010target: 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n    # Handle multi\u2010target\n    if y.ndim == 2 and y.shape[1] > 1:\n        params_all = [fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])]\n        return np.vstack(params_all)\n    # Flatten single\u2010target\n    y_vec = y.ravel()\n    # Prepare two reasonable initial guesses\n    y_min, y_max = float(np.min(y_vec)), float(np.max(y_vec))\n    init1 = np.array([\n        max(0.0, y_min * 0.5),       # b\n        np.log(max(y_max - y_min, 1e-3)),  # logA\n        -0.5, -0.5, -0.5, -0.5       # exponents\n    ], dtype=float)\n    init2 = np.array([\n        0.0,\n        np.log(max(y_max, 1e-3)),\n        -1.0, -1.0, -0.1, -0.1\n    ], dtype=float)\n    # Parameter bounds\n    bounds = [\n        (0.0, max(y_max * 2, 1.0)),  # b \u2265 0\n        (None, None),                # logA unbounded\n        (-5.0, 5.0),                 # e_lr\n        (-5.0, 5.0),                 # e_bsz\n        (-5.0, 5.0),                 # e_data\n        (-5.0, 5.0),                 # e_model\n    ]\n    # Objective: mean squared error\n    def _obj(p):\n        preds = scaling_law_func(X, p)\n        return np.mean((preds - y_vec) ** 2)\n    # Multi\u2010start optimization\n    best_p, best_loss = None, np.inf\n    for init in (init1, init2):\n        res = minimize(_obj, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss, best_p = res.fun, res.x\n    # Fallback if both failed\n    return best_p if best_p is not None else init1\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.1624, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter power\u2010law + bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_emb_p^{e_model}\n    with A = exp(logA).\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:       length-6 array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    lr   = np.log(X[:,0] + eps) * e_lr\n    bsz  = np.log(X[:,1] + eps) * e_bsz\n    D    = np.log(X[:,2] + eps) * e_data\n    M    = np.log(X[:,3] + eps) * e_model\n    # exponentiate combined exponent\n    term = np.exp(logA + lr + bsz + D + M)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit [b, logA, e_lr, e_bsz, e_data, e_model] by minimizing MSE.\n    Returns length-6 array of optimized parameters.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # simple fallback if all y equal\n    if np.allclose(y, y[0]):\n        return np.array([y[0], np.log(max(y[0],1e-6)), 0,0,0,0], dtype=np.float64)\n\n    # initial guess from ordinary log-linear regression (drop bias)\n    eps = 1e-12\n    Z = np.log(X + eps)                          # (N,4)\n    y_log = np.log(np.maximum(y - y.min()*0.5, eps))\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # (N,5)\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)         # length-5\n    # interpret theta: theta[0] ~ logA, theta[1..4] ~ exponents\n    logA0     = theta[0]\n    exponents0= theta[1:].tolist()\n    # bias initial: small fraction of minimum y\n    b0 = max(0.0, y.min()*0.4)\n\n    # pack two inits: one from LS, one more conservative\n    inits = [\n        np.array([b0, logA0] + exponents0, dtype=np.float64),\n        np.array([0.0, logA0 - 1.0] + [e*0.5 for e in exponents0], dtype=np.float64)\n    ]\n\n    # bounds: bias \u2208 [0, max(y)], logA unbounded, exponents \u2208 [-5, +5]\n    bounds = [\n        (0.0, float(y.max())),\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    best_p = None\n    best_val = np.inf\n    for init in inits:\n        res = minimize(mse_obj, init, method=\"L-BFGS-B\", bounds=bounds)\n        if res.success and res.fun < best_val:\n            best_val = res.fun\n            best_p = res.x\n\n    # fallback\n    if best_p is None:\n        best_p = inits[0]\n    return best_p\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.659), Excellent nmae (7.621)\n\n\n### Inspiration 2 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nModel form:\n  loss \u2248 b + exp(logA \n                + e_lr*log(lr) \n                + e_bsz*log(bsz) \n                + e_data*log(data_size) \n                + e_model*log(non_embedding_param_size))\nFitted by multi\u2010start L-BFGS-B on mean squared error.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: NumPy array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-6 array [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length-N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    # Add small epsilon to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # Log\u2010space power law\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error via L-BFGS-B with two starting points.\n    \n    Supports single\u2010target (shape (N,)) or multi\u2010target (shape (N,T)).\n    Returns:\n      - For single target: 1D array of length 6\n      - For multi\u2010target: 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n    # Handle multi\u2010target\n    if y.ndim == 2 and y.shape[1] > 1:\n        params_all = [fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])]\n        return np.vstack(params_all)\n    # Flatten single\u2010target\n    y_vec = y.ravel()\n    # Prepare two reasonable initial guesses\n    y_min, y_max = float(np.min(y_vec)), float(np.max(y_vec))\n    init1 = np.array([\n        max(0.0, y_min * 0.5),       # b\n        np.log(max(y_max - y_min, 1e-3)),  # logA\n        -0.5, -0.5, -0.5, -0.5       # exponents\n    ], dtype=float)\n    init2 = np.array([\n        0.0,\n        np.log(max(y_max, 1e-3)),\n        -1.0, -1.0, -0.1, -0.1\n    ], dtype=float)\n    # Parameter bounds\n    bounds = [\n        (0.0, max(y_max * 2, 1.0)),  # b \u2265 0\n        (None, None),                # logA unbounded\n        (-5.0, 5.0),                 # e_lr\n        (-5.0, 5.0),                 # e_bsz\n        (-5.0, 5.0),                 # e_data\n        (-5.0, 5.0),                 # e_model\n    ]\n    # Objective: mean squared error\n    def _obj(p):\n        preds = scaling_law_func(X, p)\n        return np.mean((preds - y_vec) ** 2)\n    # Multi\u2010start optimization\n    best_p, best_loss = None, np.inf\n    for init in (init1, init2):\n        res = minimize(_obj, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss, best_p = res.fun, res.x\n    # Fallback if both failed\n    return best_p if best_p is not None else init1\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n\n    # Unpack parameters\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numeric stability\n    eps = 1e-12\n    # Compute in log\u2010space\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    # Back to linear\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target loss_values by returning an array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D for uniform handling\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    # Objective builder for a single target vector\n    def _fit_one(y_vec):\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two inits: one near zero bias, one with small exponents\n        init1 = np.array([\n            max(0.0, y_min * 0.5),           # bias b\n            np.log(max(y_max - y_min, 1e-3)),# logA\n            -0.5, -0.5, -0.5, -0.5           # exponents\n        ], dtype=float)\n        init2 = np.array([\n            0.0,\n            np.log(max(y_max, 1e-3)),\n            -1.0, -0.1, -0.1, -0.1\n        ], dtype=float)\n        # Bounds on parameters\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),  # b \u2265 0\n            (None, None),                # logA unbounded\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_data\n            (-5.0, 5.0),                 # e_model\n        ]\n\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        best_p, best_loss = None, np.inf\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        # Fallback\n        return best_p if best_p is not None else init1\n\n    # Fit each target separately\n    if T == 1:\n        return _fit_one(y2d[:, 0])\n    else:\n        return np.vstack([_fit_one(y2d[:, i]) for i in range(T)])\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize_scalar\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via a bias + log-linear power law:\n      loss \u2248 b + exp(\u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                      + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size))\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-6 array [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    b = float(params[0])\n    theta = np.asarray(params[1:], dtype=float)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    # linear combination in log\u2010space\n    log_term = theta[0] + logs.dot(theta[1:])\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law:\n      loss = b + exp(\u03b80 + \u03a3_i \u03b8_{i+1} * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    We optimize bias b by a bounded 1D search and solve for \u03b8 in closed form:\n      1) For a candidate b, compute y' = log(loss_values - b)\n      2) Fit \u03b8 by linear least squares:  y' \u2248 [1, log(x)] \u00b7 \u03b8\n      3) Evaluate MSE in original domain.\n    Inputs:\n      data_points: (N,4) array of floats\n      loss_values: (N,) array of floats (all > 0)\n    Returns:\n      params: length-6 array [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points with 4 features, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    # Precompute design matrix for theta: A = [1, log(x)]\n    eps = 1e-12\n    Z = np.log(X + eps)                     # (N,4)\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # (N,5)\n    y_min = np.min(y)\n    # Objective: for a given bias b, fit \u03b8 via least squares on log(y - b)\n    def obj(bias):\n        # bias must be in [0, y_min)\n        if bias < 0 or bias >= y_min:\n            return np.inf\n        y_shift = y - bias\n        if np.any(y_shift <= 0):\n            return np.inf\n        y_log = np.log(y_shift)\n        theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n        pred = bias + np.exp(A.dot(theta))\n        return np.mean((pred - y)**2)\n    # If minimal y \u2264 0, fix bias to zero\n    if y_min <= 0:\n        b_opt = 0.0\n    else:\n        # search in [0, y_min*0.999] for best bias\n        upper = y_min * 0.999\n        res = minimize_scalar(\n            obj,\n            bounds=(0.0, upper),\n            method='bounded',\n            options={'xatol': 1e-6, 'maxiter': 50}\n        )\n        b_opt = float(res.x) if res.success else 0.0\n    # Final \u03b8 fit\n    y_shift = y - b_opt\n    y_shift = np.clip(y_shift, eps, None)\n    theta, *_ = np.linalg.lstsq(A, np.log(y_shift), rcond=None)\n    # return [b, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    return np.concatenate(([b_opt], theta))\n# EVOLVE-BLOCK-END\n```\n"]}}}