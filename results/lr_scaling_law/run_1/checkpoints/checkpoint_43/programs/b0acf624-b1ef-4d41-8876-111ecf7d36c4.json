{"id": "b0acf624-b1ef-4d41-8876-111ecf7d36c4", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nExtended robust power\u2010law scaling\u2010law model for LLM training loss.\nWe augment the standard power\u2010law with a quadratic term in learning\u2010rate:\n    log L \u2248 a0 \n           + a1\u00b7log(lr) \n           + a2\u00b7(log(lr))^2 \n           + a3\u00b7log(bsz) \n           + a4\u00b7log(data_size) \n           + a5\u00b7log(non_embedding_param_size)\n\nWe fit by ridge\u2010regularized IRLS in log\u2010space with Huber weights\nfor robustness and small\u2010ridge for numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the extended power\u2010law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size], all > 0.\n      params:      array of shape (6,) or (T,6), where\n                   params[...,0] = intercept a0\n                   params[...,1] = a1 (log lr term)\n                   params[...,2] = a2 (log lr)^2 term\n                   params[...,3] = a3 (log bsz term)\n                   params[...,4] = a4 (log data_size term)\n                   params[...,5] = a5 (log param_size term)\n\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # all inputs must be positive for log\n    if np.any(X <= 0):\n        raise ValueError(\"All entries of data_points must be strictly positive\")\n    # extract and log\u2010transform features\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr   = np.log(lr)\n    log_lr2  = log_lr * log_lr\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_P    = np.log(P)\n    # stack extended log\u2010features: shape (N,5)\n    Z = np.stack([log_lr, log_lr2, log_bsz, log_D, log_P], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"params must have length 6, got {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # (5,)\n        log_pred = a0 + Z.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, M = p.shape\n        if M != 6:\n            raise ValueError(f\"params must have shape (T,6), got {p.shape}\")\n        a0 = p[:, 0]              # (T,)\n        slopes = p[:, 1:]         # (T,5)\n        # log_pred: shape (N,T)\n        log_pred = Z.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter extended power\u2010law by robust IRLS in log\u2010space.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters.\n      loss_values: (N,) array of positive LM losses.\n\n    Returns:\n      params: (6,) array [a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be shape (N,) matching data_points\")\n    # enforce positivity\n    if np.any(X <= 0) or np.any(y <= 0):\n        raise ValueError(\"All data_points and loss_values must be strictly positive\")\n\n    # build extended log\u2010feature matrix: (N,5)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr   = np.log(lr)\n    log_lr2  = log_lr * log_lr\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_P    = np.log(P)\n    logX_ext = np.stack([log_lr, log_lr2, log_bsz, log_D, log_P], axis=1)\n\n    # target\n    logy = np.log(y)\n\n    N, D_ext = logX_ext.shape  # D_ext == 5\n\n    # standardize features for conditioning\n    mu    = logX_ext.mean(axis=0)\n    sigma = logX_ext.std(axis=0)\n    # guard against zero std\n    sigma[sigma < 1e-8] = 1.0\n    Zs = (logX_ext - mu[None,:]) / sigma[None,:]\n\n    # design matrix with intercept: shape (N, 1 + D_ext) = (N,6)\n    A = np.concatenate([np.ones((N,1)), Zs], axis=1)\n\n    # small ridge for numerical stability\n    alpha = 1e-6\n\n    # initial OLS solution in log\u2010space\n    ATA = A.T.dot(A) + alpha * np.eye(D_ext+1)\n    ATy = A.T.dot(logy)\n    p = np.linalg.solve(ATA, ATy)    # shape (6,)\n\n    # IRLS with Huber weighting\n    max_iter = 12\n    for _ in range(max_iter):\n        logy_pred = A.dot(p)\n        resid = logy_pred - logy\n        # Huber threshold\n        med = np.median(np.abs(resid))\n        delta = 1.345 * max(med, 1e-3)\n        # weights\n        w = np.ones_like(resid)\n        mask = np.abs(resid) > delta\n        w[mask] = delta / np.abs(resid[mask])\n        W = w[:,None]\n        ATA_w = (A * W).T.dot(A) + alpha * np.eye(D_ext+1)\n        ATy_w = (A * W).T.dot(logy)\n        p_new = np.linalg.solve(ATA_w, ATy_w)\n        if np.allclose(p, p_new, rtol=1e-6, atol=1e-6):\n            p = p_new\n            break\n        p = p_new\n\n    # recover original\u2010scale slopes and intercept\n    slopes_std = p[1:]                 # shape (5,)\n    slopes = slopes_std / sigma        # un\u2010standardized slopes\n    intercept = p[0] - np.dot(slopes_std, mu / sigma)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "9869893d-6efa-4933-9503-b03a6b138eec", "generation": 3, "timestamp": 1754802106.1159172, "iteration_found": 37, "metrics": {"nmse": 99.63517405374061, "nmae": 13.312737566136489, "r2": -98.63517405374061, "combined_score": 0.009936883494293811}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 103.6811184330119, "nmae": 13.543357661432402, "r2": -102.6811184330119, "combined_score": 0.0095528211292462}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 103.6811\n- nmae: 13.5434\n- r2: -102.6811\n- combined_score: 0.0096\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 109.1430, nmae: 13.9355, r2: -108.1430, combined_score: 0.0091\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 105.9241, nmae: 13.6727, r2: -104.9241, combined_score: 0.0094\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 103.6811, nmae: 13.5434, r2: -102.6811, combined_score: 0.0096\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.6382)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust power\u2010law scaling\u2010law model for LLM training loss.\nWe model\n    L \u2248 exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\ni.e.  log L \u2248 a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nWe fit by robust ridge\u2010regularized linear regression in log\u2010space\nusing an iteratively reweighted least squares (IRLS) with Huber weights\nand small L2 regularization for numerical stability.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via fitted power\u2010law.\n\n    Args:\n      data_points: array of shape (N,4) or (N,4)-like with columns\n                   [lr, bsz, data_size, non_embedding_param_size], all > 0\n      params:      array of shape (5,) or (T,5).\n                   params[...,0] = a0 (intercept)\n                   params[...,i] = exponent for column i of data_points\n\n    Returns:\n      If params is shape (5,), returns (N,) array of predicted losses.\n      If params is shape (T,5), returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # numerical safety: all inputs must be positive\n    if np.any(X <= 0):\n        raise ValueError(\"All data_points entries must be strictly positive\")\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"params must have length 5, got {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, M = p.shape\n        if M != 5:\n            raise ValueError(f\"params must have shape (T,5), got (_, {M})\")\n        a0 = p[:, 0]           # shape (T,)\n        slopes = p[:, 1:]      # shape (T,4)\n        # log_pred: shape (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter power\u2010law model by robust IRLS in log\u2010space.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters\n      loss_values: (N,) array of positive LM losses\n\n    Returns:\n      params: (5,) array [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be shape (N,) matching data_points\")\n\n    # enforce positivity and small eps for logs\n    eps = 1e-12\n    if np.any(X <= 0) or np.any(y <= 0):\n        raise ValueError(\"All data_points and loss_values must be > 0\")\n    logX = np.log(X)\n    logy = np.log(y)\n\n    N, D = logX.shape  # D == 4\n    # standardize features for numerical conditioning\n    mu = logX.mean(axis=0)\n    sigma = logX.std(axis=0)\n    # avoid zero std\n    sigma[sigma < 1e-8] = 1.0\n    Z = (logX - mu) / sigma\n\n    # design matrix: intercept + D standardized features\n    A = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N, 1+D) = (N,5)\n\n    # IRLS with Huber weighting\n    # initial OLS solution\n    alpha = 1e-6\n    ATA = A.T.dot(A) + alpha * np.eye(D+1)\n    ATy = A.T.dot(logy)\n    p = np.linalg.solve(ATA, ATy)\n\n    # IRLS loop\n    max_iter = 10\n    for _ in range(max_iter):\n        logy_pred = A.dot(p)\n        resid = logy_pred - logy\n        # compute Huber delta based on median absolute dev\n        med_abs = np.median(np.abs(resid))\n        delta = 1.345 * max(med_abs, 1e-3)\n        # weights\n        w = np.ones_like(resid)\n        mask = np.abs(resid) > delta\n        w[mask] = delta / np.abs(resid[mask])\n        # weighted least squares\n        W = w[:, None]\n        ATA_w = (A * W).T.dot(A) + alpha * np.eye(D+1)\n        ATy_w = (A * W).T.dot(logy)\n        p_new = np.linalg.solve(ATA_w, ATy_w)\n        if np.allclose(p, p_new, rtol=1e-6, atol=1e-6):\n            p = p_new\n            break\n        p = p_new\n\n    # transform back from standardized slopes to original logs\n    slopes_std = p[1:]          # shape (4,)\n    slopes = slopes_std / sigma\n    intercept = p[0] - np.dot(slopes_std, mu / sigma)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (103.6811), Performs well on nmae (13.5434), Performs well on r2 (-102.6811), Performs well on combined_score (0.0096)\n\n\n### Program 2 (Score: 3.6705)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to log\u2010linear fit\ntry:\n    from scipy.optimize import minimize\n    _have_minimize = True\nexcept ImportError:\n    _have_minimize = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a \n    power\u2010law plus floor model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    where floor >= 0 is parameterized as exp(u).\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (P,) or (T, P) with P = F + 2\n                   params[t,0] = intercept\n                   params[t,1:1+F] = weights w_i on log-features\n                   params[t,1+F] = u (log-floor), floor = exp(u)\n    Returns:\n      predictions: (N,) or (N, T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    params_arr = np.asarray(params, dtype=float)\n    # Ensure params are 2D: (T, P)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    expected_P = F + 2\n    if P != expected_P:\n        raise ValueError(f\"Expected params with {expected_P} elements, got {P}\")\n    # Clip inputs for log stability\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)          # shape (N, F)\n    intercept = params_arr[:, 0]           # (T,)\n    weights   = params_arr[:, 1:1+F]       # (T, F)\n    u_floor   = params_arr[:, 1+F]         # (T,)\n    floor     = np.exp(u_floor)            # (T,)\n    # Compute the power\u2010law term\n    # shape (N, T): each column t is intercept[t] + w[t]\u00b7logX\n    log_term = logX.dot(weights.T) + intercept\n    power_term = np.exp(log_term)          # (N, T)\n    # Add the floor\n    preds = power_term + floor[None, :]    # (N, T)\n    # If single target, return (N,)\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    by minimizing mean squared error in the loss domain.\n    Returns params of shape (P,) or (T, P).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n    P = F + 2\n\n    # Precompute log\u2010features\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)  # (N, F)\n\n    # Helper: initial guess via log\u2010linear regression with zero floor\n    def _init_params(target):\n        # Fit log(y) = b0 + w\u00b7logX\n        y_col = target\n        yc = np.clip(y_col, 1e-12, None)\n        logy = np.log(yc)\n        # design: [1, logX]\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n        # solve least squares\n        w, *_ = np.linalg.lstsq(A, logy, rcond=None)\n        intercept0 = w[0]\n        weights0   = w[1:]\n        # floor init: small fraction of min(y)\n        y_min = np.min(y_col)\n        floor0 = max(y_min * 0.05, 1e-8)\n        u0 = np.log(floor0)\n        return np.concatenate([[intercept0], weights0, [u0]])\n\n    # Objective for one target\n    def _objective(flat_p, target):\n        # flat_p: (P,)\n        intercept = flat_p[0]\n        wts       = flat_p[1:1+F]\n        u_floor   = flat_p[1+F]\n        floor     = np.exp(u_floor)\n        # predict\n        log_term = logX.dot(wts) + intercept\n        pred = np.exp(log_term) + floor\n        # MSE\n        resid = pred - target\n        return np.mean(resid*resid)\n\n    # Container for results\n    params_out = np.zeros((T, P), dtype=float)\n\n    # Loop over each output dimension\n    for t in range(T):\n        ycol = y2d[:, t]\n        # initial guess\n        p0 = _init_params(ycol)\n        if _have_minimize:\n            # optimize\n            res = minimize(\n                fun=lambda p: _objective(p, ycol),\n                x0=p0,\n                method='L-BFGS-B',\n                options={'maxiter': 500, 'ftol':1e-9}\n            )\n            if res.success:\n                params_out[t] = res.x\n            else:\n                # fallback to initial\n                params_out[t] = p0\n        else:\n            # no optimizer: just use the log\u2010linear solution and u0\n            params_out[t] = p0\n\n    # Return shape (P,) if single output\n    if T == 1:\n        return params_out[0]\n    return params_out\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (105.9241), Performs well on nmae (13.6727), Performs well on r2 (-104.9241), Performs well on combined_score (0.0094)\n\n\n### Program 3 (Score: 3.7362)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using an extended\n    log\u2013linear scaling law with a quadratic term for learning rate:\n      log(loss) = a0\n                + a1 * log(lr)\n                + a2 * (log(lr))^2\n                + a3 * log(bsz)\n                + a4 * log(data_size)\n                + a5 * log(non_embedding_param_size)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: (N,4) array of positive hyperparameters\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (6,) or (T,6), where\n                   params[...,0] = a0   (intercept)\n                   params[...,1] = a1   (linear lr term)\n                   params[...,2] = a2   (quadratic lr term)\n                   params[...,3] = a3   (bsz term)\n                   params[...,4] = a4   (data_size term)\n                   params[...,5] = a5   (param_size term)\n\n    Returns:\n      loss_pred: shape (N,) if params is 1D else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Prepare parameter array\n    pars = np.asarray(params, dtype=float)\n    if pars.ndim == 1:\n        pars = pars[None, :]\n    T, P = pars.shape\n    if P != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {P}\")\n\n    # Extract and clip features to avoid log(0)\n    lr   = np.clip(X[:, 0], 1e-12, None)\n    bsz  = np.clip(X[:, 1], 1e-12, None)\n    D    = np.clip(X[:, 2], 1e-12, None)\n    N_np = np.clip(X[:, 3], 1e-12, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Np   = np.log(N_np)\n    log_lr2  = log_lr * log_lr\n\n    # Build design matrix: shape (N,6)\n    # columns = [1, log_lr, log_lr^2, log_bsz, log_D, log_Np]\n    Npnt = X.shape[0]\n    A = np.stack([\n        np.ones(Npnt),\n        log_lr,\n        log_lr2,\n        log_bsz,\n        log_D,\n        log_Np\n    ], axis=1)  # (N,6)\n\n    # Compute log\u2010loss predictions: (N, T)\n    log_loss = A.dot(pars.T)\n\n    # Exponentiate\n    loss_pred = np.exp(log_loss)\n\n    # If single parameter set, flatten\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear scaling law by regularized least squares:\n      minimize || log(y) - A @ a ||^2 + \u03bb * ||a[1:]||^2\n    where A columns = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n\n    # Extract and clip\n    lr   = np.clip(X[:, 0], 1e-12, None)\n    bsz  = np.clip(X[:, 1], 1e-12, None)\n    D    = np.clip(X[:, 2], 1e-12, None)\n    N_np = np.clip(X[:, 3], 1e-12, None)\n\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Np   = np.log(N_np)\n    log_lr2  = log_lr * log_lr\n\n    # Build design matrix A: (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr2,\n        log_bsz,\n        log_D,\n        log_Np\n    ], axis=1)\n\n    # Target vector\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # Regularization strength (small ridge on all except intercept)\n    lam = 1e-6\n    # Compute X^T X and X^T y\n    XtX = A.T.dot(A)\n    Xty = A.T.dot(logy)\n\n    # Add ridge: do not penalize intercept term\n    ridge = lam * np.eye(6)\n    ridge[0, 0] = 0.0\n    # Solve for parameters\n    params = np.linalg.solve(XtX + ridge, Xty)\n\n    return params\n```\nKey features: Performs well on nmse (109.1430), Performs well on nmae (13.9355), Performs well on r2 (-108.1430), Performs well on combined_score (0.0091)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust power\u2010law scaling\u2010law model for LLM training loss.\nWe model\n    L \u2248 exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\ni.e.  log L \u2248 a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nWe fit by robust ridge\u2010regularized linear regression in log\u2010space\nusing an iteratively reweighted least squares (IRLS) with Huber weights\nand small L2 regularization for numerical stability.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via fitted power\u2010law.\n\n    Args:\n      data_points: array of shape (N,4) or (N,4)-like with columns\n                   [lr, bsz, data_size, non_embedding_param_size], all > 0\n      params:      array of shape (5,) or (T,5).\n                   params[...,0] = a0 (intercept)\n                   params[...,i] = exponent for column i of data_points\n\n    Returns:\n      If params is shape (5,), returns (N,) array of predicted losses.\n      If params is shape (T,5), returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # numerical safety: all inputs must be positive\n    if np.any(X <= 0):\n        raise ValueError(\"All data_points entries must be strictly positive\")\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"params must have length 5, got {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, M = p.shape\n        if M != 5:\n            raise ValueError(f\"params must have shape (T,5), got (_, {M})\")\n        a0 = p[:, 0]           # shape (T,)\n        slopes = p[:, 1:]      # shape (T,4)\n        # log_pred: shape (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter power\u2010law model by robust IRLS in log\u2010space.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters\n      loss_values: (N,) array of positive LM losses\n\n    Returns:\n      params: (5,) array [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be shape (N,) matching data_points\")\n\n    # enforce positivity and small eps for logs\n    eps = 1e-12\n    if np.any(X <= 0) or np.any(y <= 0):\n        raise ValueError(\"All data_points and loss_values must be > 0\")\n    logX = np.log(X)\n    logy = np.log(y)\n\n    N, D = logX.shape  # D == 4\n    # standardize features for numerical conditioning\n    mu = logX.mean(axis=0)\n    sigma = logX.std(axis=0)\n    # avoid zero std\n    sigma[sigma < 1e-8] = 1.0\n    Z = (logX - mu) / sigma\n\n    # design matrix: intercept + D standardized features\n    A = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N, 1+D) = (N,5)\n\n    # IRLS with Huber weighting\n    # initial OLS solution\n    alpha = 1e-6\n    ATA = A.T.dot(A) + alpha * np.eye(D+1)\n    ATy = A.T.dot(logy)\n    p = np.linalg.solve(ATA, ATy)\n\n    # IRLS loop\n    max_iter = 10\n    for _ in range(max_iter):\n        logy_pred = A.dot(p)\n        resid = logy_pred - logy\n        # compute Huber delta based on median absolute dev\n        med_abs = np.median(np.abs(resid))\n        delta = 1.345 * max(med_abs, 1e-3)\n        # weights\n        w = np.ones_like(resid)\n        mask = np.abs(resid) > delta\n        w[mask] = delta / np.abs(resid[mask])\n        # weighted least squares\n        W = w[:, None]\n        ATA_w = (A * W).T.dot(A) + alpha * np.eye(D+1)\n        ATy_w = (A * W).T.dot(logy)\n        p_new = np.linalg.solve(ATA_w, ATy_w)\n        if np.allclose(p, p_new, rtol=1e-6, atol=1e-6):\n            p = p_new\n            break\n        p = p_new\n\n    # transform back from standardized slopes to original logs\n    slopes_std = p[1:]          # shape (4,)\n    slopes = slopes_std / sigma\n    intercept = p[0] - np.dot(slopes_std, mu / sigma)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nExtended robust power\u2010law scaling\u2010law model for LLM training loss.\nWe augment the standard power\u2010law with a quadratic term in learning\u2010rate:\n    log L \u2248 a0 \n           + a1\u00b7log(lr) \n           + a2\u00b7(log(lr))^2 \n           + a3\u00b7log(bsz) \n           + a4\u00b7log(data_size) \n           + a5\u00b7log(non_embedding_param_size)\n\nWe fit by ridge\u2010regularized IRLS in log\u2010space with Huber weights\nfor robustness and small\u2010ridge for numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the extended power\u2010law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size], all > 0.\n      params:      array of shape (6,) or (T,6), where\n                   params[...,0] = intercept a0\n                   params[...,1] = a1 (log lr term)\n                   params[...,2] = a2 (log lr)^2 term\n                   params[...,3] = a3 (log bsz term)\n                   params[...,4] = a4 (log data_size term)\n                   params[...,5] = a5 (log param_size term)\n\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # all inputs must be positive for log\n    if np.any(X <= 0):\n        raise ValueError(\"All entries of data_points must be strictly positive\")\n    # extract and log\u2010transform features\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr   = np.log(lr)\n    log_lr2  = log_lr * log_lr\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_P    = np.log(P)\n    # stack extended log\u2010features: shape (N,5)\n    Z = np.stack([log_lr, log_lr2, log_bsz, log_D, log_P], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"params must have length 6, got {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # (5,)\n        log_pred = a0 + Z.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, M = p.shape\n        if M != 6:\n            raise ValueError(f\"params must have shape (T,6), got {p.shape}\")\n        a0 = p[:, 0]              # (T,)\n        slopes = p[:, 1:]         # (T,5)\n        # log_pred: shape (N,T)\n        log_pred = Z.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter extended power\u2010law by robust IRLS in log\u2010space.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters.\n      loss_values: (N,) array of positive LM losses.\n\n    Returns:\n      params: (6,) array [a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be shape (N,) matching data_points\")\n    # enforce positivity\n    if np.any(X <= 0) or np.any(y <= 0):\n        raise ValueError(\"All data_points and loss_values must be strictly positive\")\n\n    # build extended log\u2010feature matrix: (N,5)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr   = np.log(lr)\n    log_lr2  = log_lr * log_lr\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_P    = np.log(P)\n    logX_ext = np.stack([log_lr, log_lr2, log_bsz, log_D, log_P], axis=1)\n\n    # target\n    logy = np.log(y)\n\n    N, D_ext = logX_ext.shape  # D_ext == 5\n\n    # standardize features for conditioning\n    mu    = logX_ext.mean(axis=0)\n    sigma = logX_ext.std(axis=0)\n    # guard against zero std\n    sigma[sigma < 1e-8] = 1.0\n    Zs = (logX_ext - mu[None,:]) / sigma[None,:]\n\n    # design matrix with intercept: shape (N, 1 + D_ext) = (N,6)\n    A = np.concatenate([np.ones((N,1)), Zs], axis=1)\n\n    # small ridge for numerical stability\n    alpha = 1e-6\n\n    # initial OLS solution in log\u2010space\n    ATA = A.T.dot(A) + alpha * np.eye(D_ext+1)\n    ATy = A.T.dot(logy)\n    p = np.linalg.solve(ATA, ATy)    # shape (6,)\n\n    # IRLS with Huber weighting\n    max_iter = 12\n    for _ in range(max_iter):\n        logy_pred = A.dot(p)\n        resid = logy_pred - logy\n        # Huber threshold\n        med = np.median(np.abs(resid))\n        delta = 1.345 * max(med, 1e-3)\n        # weights\n        w = np.ones_like(resid)\n        mask = np.abs(resid) > delta\n        w[mask] = delta / np.abs(resid[mask])\n        W = w[:,None]\n        ATA_w = (A * W).T.dot(A) + alpha * np.eye(D_ext+1)\n        ATy_w = (A * W).T.dot(logy)\n        p_new = np.linalg.solve(ATA_w, ATy_w)\n        if np.allclose(p, p_new, rtol=1e-6, atol=1e-6):\n            p = p_new\n            break\n        p = p_new\n\n    # recover original\u2010scale slopes and intercept\n    slopes_std = p[1:]                 # shape (5,)\n    slopes = slopes_std / sigma        # un\u2010standardized slopes\n    intercept = p[0] - np.dot(slopes_std, mu / sigma)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```"]}}}