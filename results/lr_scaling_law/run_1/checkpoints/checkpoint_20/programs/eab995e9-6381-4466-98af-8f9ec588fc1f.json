{"id": "eab995e9-6381-4466-98af-8f9ec588fc1f", "code": "\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log\u2013linear power-law model fitted via closed-form linear regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel: loss \u2248 exp(\u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz) + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size))\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, param_size]\n    params:     (5,) or (T,5) array [\u03b8\u2080, \u03b8\u2081, \u03b8\u2082, \u03b8\u2083, \u03b8\u2084]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    # params shape handling\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                      # (1,5)\n    T, P = p.shape\n    assert P == X.shape[1] + 1, f\"Expected params of length {X.shape[1]+1}, got {P}\"\n    # compute log-features\n    logX = np.log(X)                                       # (N,4)\n    # \u03b8\u2080 + \u2211 \u03b8\u1d62\u00b7logX[:,i]\n    logA = p[:, 0]                                         # (T,)\n    coefs = p[:, 1:]                                       # (T,4)\n    # log_preds: (N,T)\n    log_preds = logA[None, :] + logX @ coefs.T\n    preds = np.exp(log_preds)\n    # return (N,) if single target else (N,T)\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law:\n      log(loss) = \u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz)\n                  + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size)\n    via ordinary least squares in log space (with tiny ridge for stability).\n    Returns params: (5,) array [\u03b8\u2080\u2026\u03b8\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)\n    # flatten y to 2D\n    if y.ndim == 1:\n        y2d = y[:, None]                                      # (N,1)\n    else:\n        y2d = y\n    N, F = X.shape\n    T = y2d.shape[1]\n    # ensure strictly positive for log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y2d = np.clip(y2d, eps, None)\n    # build design matrix in log space: [1, log(x1), ..., log(xF)]\n    logX = np.log(X)                                        # (N,F)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    P = F + 1\n    # tiny ridge regularization for numerical stability\n    ridge = 1e-8\n    XtX = X_design.T @ X_design + ridge * np.eye(P)         # (P,P)\n    Xty = X_design.T @ np.log(y2d)                          # (P,T)\n    # solve for \u03b8 in each target column\n    thetas = np.linalg.solve(XtX, Xty)                      # (P,T)\n    # return shape (P,) if single target else (T,P)\n    if T == 1:\n        return thetas[:, 0]\n    else:\n        return thetas.T", "language": "python", "parent_id": "cf3e9a41-2c66-4ef0-ba16-07480195fb70", "generation": 1, "timestamp": 1754798716.2423775, "iteration_found": 6, "metrics": {"nmse": 165.00324575865645, "nmae": 17.3975027158323, "r2": -164.00324575865645, "combined_score": 0.00602397860011634}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 9.958921558551933e+28, "nmae": 428288771110437.75, "r2": -9.958921558551933e+28, "combined_score": 1.0041247881315816e-29}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 99589215585519330125424885760.0000\n- nmae: 428288771110437.7500\n- r2: -99589215585519330125424885760.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 99589215585519330125424885760.0000, nmae: 428288771110437.7500, r2: -99589215585519330125424885760.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (99589215585519330125424885760.0000), Performs well on nmae (428288771110437.7500), Performs well on r2 (-99589215585519330125424885760.0000), Performs well on combined_score (0.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log\u2013linear power-law model fitted via closed-form linear regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel: loss \u2248 exp(\u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz) + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size))\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, param_size]\n    params:     (5,) or (T,5) array [\u03b8\u2080, \u03b8\u2081, \u03b8\u2082, \u03b8\u2083, \u03b8\u2084]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    # params shape handling\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                      # (1,5)\n    T, P = p.shape\n    assert P == X.shape[1] + 1, f\"Expected params of length {X.shape[1]+1}, got {P}\"\n    # compute log-features\n    logX = np.log(X)                                       # (N,4)\n    # \u03b8\u2080 + \u2211 \u03b8\u1d62\u00b7logX[:,i]\n    logA = p[:, 0]                                         # (T,)\n    coefs = p[:, 1:]                                       # (T,4)\n    # log_preds: (N,T)\n    log_preds = logA[None, :] + logX @ coefs.T\n    preds = np.exp(log_preds)\n    # return (N,) if single target else (N,T)\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law:\n      log(loss) = \u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz)\n                  + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size)\n    via ordinary least squares in log space (with tiny ridge for stability).\n    Returns params: (5,) array [\u03b8\u2080\u2026\u03b8\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)\n    # flatten y to 2D\n    if y.ndim == 1:\n        y2d = y[:, None]                                      # (N,1)\n    else:\n        y2d = y\n    N, F = X.shape\n    T = y2d.shape[1]\n    # ensure strictly positive for log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y2d = np.clip(y2d, eps, None)\n    # build design matrix in log space: [1, log(x1), ..., log(xF)]\n    logX = np.log(X)                                        # (N,F)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    P = F + 1\n    # tiny ridge regularization for numerical stability\n    ridge = 1e-8\n    XtX = X_design.T @ X_design + ridge * np.eye(P)         # (P,P)\n    Xty = X_design.T @ np.log(y2d)                          # (P,T)\n    # solve for \u03b8 in each target column\n    thetas = np.linalg.solve(XtX, Xty)                      # (P,T)\n    # return shape (P,) if single target else (T,P)\n    if T == 1:\n        return thetas[:, 0]\n    else:\n        return thetas.T\n```\n\nExplanation of key improvements:\n- Models the loss with a single power-law term in each hyperparameter via a log\u2013linear regression, greatly reducing parameter count (5 vs. 9).\n- Fits parameters in closed form (ordinary least squares with tiny ridge) in log space for numerical stability and speed.\n- Eliminates expensive iterative optimization while naturally capturing multiplicative scaling effects.\n- Clips inputs to avoid log(0) and add regularization for well-conditioned linear solves."]}}}