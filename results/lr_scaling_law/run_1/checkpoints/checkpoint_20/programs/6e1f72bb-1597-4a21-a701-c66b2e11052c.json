{"id": "6e1f72bb-1597-4a21-a701-c66b2e11052c", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via an extended power-law in log-space with\n    interaction and curvature terms. The model is:\n      log(loss) \u2248 \u03b20\n                  + \u03b21\u00b7log(lr)\n                  + \u03b22\u00b7log(bsz)\n                  + \u03b23\u00b7log(data_size)\n                  + \u03b24\u00b7log(non_embedding_param_size)\n                  + \u03b25\u00b7[log(lr)\u00b7log(data_size)]\n                  + \u03b26\u00b7[log(non_embedding_param_size)^2]\n\n    data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n    params: array-like of length 7 = [\u03b20, \u03b21, \u03b22, \u03b23, \u03b24, \u03b25, \u03b26]\n    Returns: array of length N with predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)    # G for data_size\n    P = np.log(Np)   # P for non_embedding_param_size\n    # build design matrix (N,7)\n    # cols: [1, L, B, G, P, L*G, P^2]\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)\n    # linear combination in log-space\n    log_y = M.dot(p)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended log-linear model by ordinary least squares:\n      log(loss) = M \u00b7 \u03b2\n    where M has columns [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                        log(lr)*log(data_size), (log(non_embedding_param_size))^2].\n    Returns \u03b2 of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    y_clipped = np.clip(y, eps, None)\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)\n    P = np.log(Np)\n    # build design matrix\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)  # shape (N,7)\n    # target is log(loss)\n    y_log = np.log(y_clipped)\n    # solve least-squares: M @ \u03b2 \u2248 y_log\n    \u03b2, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return \u03b2\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "bd930d54-6656-438e-9be5-2053cefad58c", "generation": 2, "timestamp": 1754802595.6810462, "iteration_found": 15, "metrics": {"nmse": 6.586774449983067, "nmae": 2.267312082317284, "r2": -5.586774449983067, "combined_score": 0.13180832072874288}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.951042063054397, "nmae": 2.5693519223423507, "r2": -7.9510420630543965, "combined_score": 0.10049198804140695}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.9510\n- nmae: 2.5694\n- r2: -7.9510\n- combined_score: 0.1005\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.9510, nmae: 2.5694, r2: -7.9510, combined_score: 0.1005\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9175)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via a compact multiplicative power-law:\n      loss \u2248 exp(intercept + \u2211_{i} exponent_i * log(feature_i))\n    Features in data_points are [lr, bsz, data_size, non_embedding_param_size].\n    Params is a vector of length F+1 = 5: \n      [intercept, exp_lr, exp_bsz, exp_data_size, exp_param_size].\n    Returns an array of predicted losses (shape N,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    p = np.asarray(params, dtype=float).ravel()\n    F = X.shape[1]\n    if p.size != F + 1:\n        raise ValueError(f\"Expected {F+1} parameters, got {p.size}\")\n    intercept = p[0]\n    exponents = p[1:]\n    # compute in log-space for numerical stability\n    log_X = np.log(X)\n    log_y = intercept + log_X.dot(exponents)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power-law model:\n      log(loss) = intercept + \u2211_{i} exponent_i * log(feature_i)\n    by ordinary least squares in log-space. Returns params of length 5.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log-transform\n    Z = np.log(X)           # (N, F)\n    y_log = np.log(y)       # (N,)\n    N, F = Z.shape\n    # build design matrix [1, log(lr), log(bsz), log(data), log(params)]\n    M = np.hstack([np.ones((N, 1)), Z])  # (N, F+1)\n    # solve least-squares: M @ w \u2248 y_log\n    # w[0] = intercept, w[1:] = exponents\n    w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.9510), Performs well on nmae (2.5694), Performs well on r2 (-7.9510), Performs well on combined_score (0.1005)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via a compact multiplicative power-law:\n      loss \u2248 exp(intercept + \u2211_{i} exponent_i * log(feature_i))\n    Features in data_points are [lr, bsz, data_size, non_embedding_param_size].\n    Params is a vector of length F+1 = 5: \n      [intercept, exp_lr, exp_bsz, exp_data_size, exp_param_size].\n    Returns an array of predicted losses (shape N,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    p = np.asarray(params, dtype=float).ravel()\n    F = X.shape[1]\n    if p.size != F + 1:\n        raise ValueError(f\"Expected {F+1} parameters, got {p.size}\")\n    intercept = p[0]\n    exponents = p[1:]\n    # compute in log-space for numerical stability\n    log_X = np.log(X)\n    log_y = intercept + log_X.dot(exponents)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power-law model:\n      log(loss) = intercept + \u2211_{i} exponent_i * log(feature_i)\n    by ordinary least squares in log-space. Returns params of length 5.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log-transform\n    Z = np.log(X)           # (N, F)\n    y_log = np.log(y)       # (N,)\n    N, F = Z.shape\n    # build design matrix [1, log(lr), log(bsz), log(data), log(params)]\n    M = np.hstack([np.ones((N, 1)), Z])  # (N, F+1)\n    # solve least-squares: M @ w \u2248 y_log\n    # w[0] = intercept, w[1:] = exponents\n    w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language model loss via an extended power-law in log-space with\n    interaction and curvature terms. The model is:\n      log(loss) \u2248 \u03b20\n                  + \u03b21\u00b7log(lr)\n                  + \u03b22\u00b7log(bsz)\n                  + \u03b23\u00b7log(data_size)\n                  + \u03b24\u00b7log(non_embedding_param_size)\n                  + \u03b25\u00b7[log(lr)\u00b7log(data_size)]\n                  + \u03b26\u00b7[log(non_embedding_param_size)^2]\n\n    data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n    params: array-like of length 7 = [\u03b20, \u03b21, \u03b22, \u03b23, \u03b24, \u03b25, \u03b26]\n    Returns: array of length N with predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)    # G for data_size\n    P = np.log(Np)   # P for non_embedding_param_size\n    # build design matrix (N,7)\n    # cols: [1, L, B, G, P, L*G, P^2]\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)\n    # linear combination in log-space\n    log_y = M.dot(p)\n    return np.exp(log_y)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended log-linear model by ordinary least squares:\n      log(loss) = M \u00b7 \u03b2\n    where M has columns [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                        log(lr)*log(data_size), (log(non_embedding_param_size))^2].\n    Returns \u03b2 of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    lr, bsz, D, Np = [np.clip(col, eps, None) for col in X.T]\n    y_clipped = np.clip(y, eps, None)\n    # compute log-features\n    L = np.log(lr)\n    B = np.log(bsz)\n    G = np.log(D)\n    P = np.log(Np)\n    # build design matrix\n    N_samples = X.shape[0]\n    ones = np.ones(N_samples)\n    M = np.stack([ones, L, B, G, P, L * G, P * P], axis=1)  # shape (N,7)\n    # target is log(loss)\n    y_log = np.log(y_clipped)\n    # solve least-squares: M @ \u03b2 \u2248 y_log\n    \u03b2, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n    return \u03b2\n# EVOLVE-BLOCK-END\n```"]}}}