{"id": "0e2ca031-ed25-48bd-8905-a947a5a502ab", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size    min\n    4e9,      # data size     min\n    2.14e8    # non\u2010embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size    max\n    1e11,     # data size     max\n    1e9       # non\u2010embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate: (N, 1 + 4 + 4 + 6 = 15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # shape (15,15)\n    P   = ATA.shape[0]\n    # \u03bb scaled to data scale; smaller multiplier to reduce bias\n    lam = 1e-6 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "621792dc-1ea8-4fcc-8987-ef779d41dea6", "generation": 2, "timestamp": 1754804504.2969363, "iteration_found": 109, "metrics": {"nmse": 8.237574293913061, "nmae": 3.186237946802204, "r2": -7.237574293913061, "combined_score": 0.1082535271904587}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.98815363180442, "nmae": 14.128417620529426, "r2": -111.98815363180442, "combined_score": 0.008772841458860026}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Fixed log-ranges for normalization based on the problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non-embed param size max\n], dtype=np.float64))\n\n# Center and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n\n    # log and normalize\n    logs = np.log(X + eps)                   # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n\n    # build columns\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    # stack -> (N, 15)\n    return np.stack(cols, axis=1)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized-log 2nd-degree polynomial:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array-like, shape (N,4) or (4,)\n      params:      array-like of length 15\n    Output:\n      preds:       ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt:   ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix and log-target\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)                 # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)               # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # normalized to roughly [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:,None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2, no penalty on \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled to average diag entry\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Compute safe logs\n    logs = np.log(X + eps)               # shape (N,4)\n    # Normalize into roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate to get design matrix of shape (N, 1+4+4+6=15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"Expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points must match number of loss values\")\n\n    # Build design matrix and compute log\u2010target\n    A = _build_design_matrix(X)           # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # shape (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not regularize the intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for each feature in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features: [1, z_i, z_i^2, z_i * z_j for i<j]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z**2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010space:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A     = _build_design_matrix(X)         # shape (N,15)\n    eps   = 1e-12\n    y_log = np.log(y + eps)                 # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                        # shape (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-6 * np.trace(ATA) / P          # scale \u03bb by data scale\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                          # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# mid\u2010point and half\u2010range for each log\u2010feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a normalized\u2010log polynomial design matrix with:\n      - intercept\n      - linear terms z_i\n      - quadratic terms z_i^2\n      - pairwise interactions z_i * z_j for i<j\n\n    X: (N,4) array of raw features [lr, bsz, data_size, non_embed_param_size]\n    returns: A (N,15) design matrix\n    \"\"\"\n    eps = 1e-12\n    # compute and normalize logs\n    logs = np.log(X + eps)                         # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE            # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of shape (15,)\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)           # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)               # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least squares problem in log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    # scale lambda by average diagonal to adapt to data scale\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                         # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# mid\u2010point and half\u2010range for each log\u2010feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a normalized\u2010log polynomial design matrix with:\n      - intercept\n      - linear terms z_i\n      - quadratic terms z_i^2\n      - pairwise interactions z_i * z_j for i<j\n\n    X: (N,4) array of raw features [lr, bsz, data_size, non_embed_param_size]\n    returns: A (N,15) design matrix\n    \"\"\"\n    eps = 1e-12\n    # compute and normalize logs\n    logs = np.log(X + eps)                         # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE            # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of shape (15,)\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)           # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)               # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least squares problem in log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    # scale lambda by average diagonal to adapt to data scale\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                         # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 3.6003, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law:\n      log(loss) \u2248 \u03b80\n                 + \u03b81\u00b7log(lr)\n                 + \u03b82\u00b7log(bsz)\n                 + \u03b83\u00b7log(data_size)\n                 + \u03b84\u00b7log(non_embed_param_size)\n                 + \u03b85\u00b7[log(lr)]^2\n                 + \u03b86\u00b7[log(bsz)]^2\n    loss = exp(log(loss))\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 7:\n                   [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]\n    Returns:\n      preds: (N,) ndarray of predicted lm\u2010loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 7:\n        raise ValueError(f\"scaling_law_func: expected params length 7, got {theta.size}\")\n    \n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    l1, l2, l3, l4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n    \n    # build feature matrix: [1, l1, l2, l3, l4, l1^2, l2^2]\n    N = X.shape[0]\n    ones = np.ones((N,), dtype=np.float64)\n    feat = np.column_stack([\n        ones,\n        l1, l2, l3, l4,\n        l1 * l1,\n        l2 * l2\n    ])  # shape (N,7)\n    \n    log_pred = feat.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010quadratic model by ridge\u2010regularized least\u2010squares\n    in log\u2010space:\n      minimize \u2016F \u03b8 \u2212 log(y)\u2016^2 + \u03bb\u00b7\u2016\u03b8_except0\u2016^2\n    where F has columns [1, log(lr), log(bsz), log(data_size), log(non_emb_param),\n                        (log(lr))^2, (log(bsz))^2]\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) of lm\u2010loss (>0)\n      ridge_lambda: regularization strength (default 1e-6)\n    Returns:\n      theta: ndarray of shape (7,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1\u2010D of same length as data_points\")\n    \n    # safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    l1, l2, l3, l4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n    \n    # build design matrix\n    N = X.shape[0]\n    ones = np.ones((N,1), dtype=np.float64)\n    F = np.concatenate([\n        ones,\n        logs,\n        (l1**2)[:,None],\n        (l2**2)[:,None]\n    ], axis=1)  # shape (N,7)\n    \n    y_log = np.log(y + eps)  # (N,)\n    \n    # ridge\u2010reg: do not regularize intercept (\u03b80)\n    P = F.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n    \n    # solve (F\u1d40F + reg) \u03b8 = F\u1d40 y_log\n    lhs = F.T.dot(F) + reg\n    rhs = F.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100.722), Excellent nmae (13.391)\n\n\n### Inspiration 4 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Compute safe logs\n    logs = np.log(X + eps)               # shape (N,4)\n    # Normalize into roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate to get design matrix of shape (N, 1+4+4+6=15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"Expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points must match number of loss values\")\n\n    # Build design matrix and compute log\u2010target\n    A = _build_design_matrix(X)           # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # shape (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not regularize the intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 5 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size    min\n    4e9,      # data size     min\n    2.14e8    # non\u2010embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size    max\n    1e11,     # data size     max\n    1e9       # non\u2010embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate: (N, 1 + 4 + 4 + 6 = 15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # shape (15,15)\n    P   = ATA.shape[0]\n    # \u03bb scaled to data scale; smaller multiplier to reduce bias\n    lam = 1e-6 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}