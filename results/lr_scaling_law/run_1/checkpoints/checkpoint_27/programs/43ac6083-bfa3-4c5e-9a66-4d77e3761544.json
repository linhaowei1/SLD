{"id": "43ac6083-bfa3-4c5e-9a66-4d77e3761544", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved monomial\u2010plus\u2010offset scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss L as a single\u2010monomial scaling law plus an additive offset:\n\n    L\u0302(x) = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n            + c\n\nThis uses 6 parameters [w0, w1, w2, w3, w4, c].\nWe fit by minimizing mean\u2010squared error in L\u2010space, using an analytic Jacobian\nand an L\u2010BFGS\u2010B solver with a non\u2010negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via the 6\u2010parameter monomial+offset model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      array of shape (6,) or (T,6), each row = [w0, w1, w2, w3, w4, c].\n\n    Returns:\n      If params is (6,), returns (N,) predictions.\n      If params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # log\u2010transform features (all >0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected parameter vector of length 6, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]          # shape (T,)\n    w = p[:, 1:5]         # shape (T,4)\n    c = p[:, 5]           # shape (T,)\n\n    # compute s = w0 + \u03a3_i w_i * logX[:,i]  -> shape (N,T)\n    s = logX.dot(w.T) + w0[None, :]\n\n    # prediction = exp(s) + c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if single parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter monomial+offset model by minimizing MSE in L\u2010space.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      loss_values: array of shape (N,) of observed lm losses.\n\n    Returns:\n      params: 1D array of length 6 = [w0, w1, w2, w3, w4, c].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # precompute logs\n    logX = np.log(X)\n    # initialize c0 = max(0, half min observed loss)\n    c0 = max(0.0, 0.5 * np.min(y))\n    # linearize: log(y - c0) \u2248 w0 + \u03a3 w_i logX_i\n    eps = 1e-12\n    y_mod = np.clip(y - c0, eps, None)\n    y_lin = np.log(y_mod)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # shape (N,5)\n    # initial least\u2010squares for [w0,w1..w4]\n    beta, *_ = np.linalg.lstsq(A, y_lin, rcond=None)\n    p0 = np.zeros(6, dtype=np.float64)\n    p0[0:5] = beta\n    p0[5] = c0\n\n    # objective: MSE in original\u2010space\n    def obj(p):\n        w0_, w_i_, c_ = p[0], p[1:5], p[5]\n        s_ = logX.dot(w_i_) + w0_\n        yhat = np.exp(s_) + c_\n        diff = yhat - y\n        return np.mean(diff * diff)\n\n    # analytic gradient\n    def jac(p):\n        w0_, w_i_, c_ = p[0], p[1:5], p[5]\n        s_ = logX.dot(w_i_) + w0_\n        exp_s = np.exp(s_)                 # (N,)\n        yhat = exp_s + c_                  # (N,)\n        diff = yhat - y                    # (N,)\n        # dMSE/dp = 2/N * \u03a3 diff * \u2202yhat/\u2202p\n        grad = np.empty_like(p)\n        # \u2202yhat/\u2202w0 = exp_s\n        grad[0] = 2.0 * np.mean(diff * exp_s)\n        # \u2202yhat/\u2202w_i_j = exp_s * logX[:, j]\n        grad[1:5] = 2.0 * np.mean((diff[:,None]) * (exp_s[:,None] * logX), axis=0)\n        # \u2202yhat/\u2202c = 1\n        grad[5] = 2.0 * np.mean(diff)\n        return grad\n\n    # bounds: c >= 0 for stability\n    bounds = [(None, None)] * 6\n    bounds[5] = (0.0, None)\n\n    res = minimize(\n        obj,\n        p0,\n        method='L-BFGS-B',\n        jac=jac,\n        bounds=bounds,\n        options={'maxiter':1000, 'ftol':1e-12}\n    )\n\n    if not res.success:\n        # fallback to initial guess\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4aa71248-35d0-4663-af43-3ac1a44edfb5", "generation": 3, "timestamp": 1754802707.9279404, "iteration_found": 28, "metrics": {"nmse": 1.3616904448998264, "nmae": 1.1055516793575724, "r2": -0.3616904448998264, "combined_score": 0.4234255180053523}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.016119123457548, "nmae": 2.451273349226727, "r2": -7.016119123457548, "combined_score": 0.11091246536420149}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.0161\n- nmae: 2.4513\n- r2: -7.0161\n- combined_score: 0.1109\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.9510, nmae: 2.5694, r2: -7.9510, combined_score: 0.1005\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.0161, nmae: 2.4513, r2: -7.0161, combined_score: 0.1109\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.3617, nmae: 1.1056, r2: -0.3617, combined_score: 0.4234\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6322)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss L as a single\u2010monomial scaling law plus an additive offset:\n\n    L\u0302(x) = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n            + c\n\nThis uses 6 parameters [w0, w1, w2, w3, w4, c].\nWe fit by minimizing mean\u2010squared error in L-space, using an analytic Jacobian\nand an L-BFGS-B solver with a non\u2010negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      either shape (6,) or (T,6), each [w0, w1, w2, w3, w4, c]\n    returns:     if params is (6,), returns (N,) predictions;\n                 if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform features (all strictly positive in practice)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter vector of length {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # shape (T,)\n    w_i = p[:, 1:-1]     # shape (T,4)\n    c  = p[:, -1]        # shape (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #    -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n\n    # prediction is exp(s) + c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter scaling law by minimizing MSE in L-space.\n    Returns a 1D array of length 6 (or (T,6) if multiple targets).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute log-features\n    logX = np.log(X)  # (N,4)\n\n    P = F + 2  # parameters w0, w1..w4, c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]  # (N,)\n\n        # initialize c0 = half of minimum observed loss (\u22650)\n        c0 = max(0.0, yt.min() * 0.5)\n        # linearize log-space: y_lin \u2248 w0 + \u03a3 w_i logX_i\n        y_lin = np.log(np.clip(yt - c0, 1e-8, None))\n        A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # least-squares for initial [w0, w_i]\n        beta, *_ = np.linalg.lstsq(A, y_lin, rcond=None)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = beta[0]\n        p0[1:-1] = beta[1:]\n        p0[-1] = c0\n\n        # objective: mean squared error in L-space\n        def obj(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            yhat = np.exp(s_) + c_\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient\n        def jac(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            exp_s = np.exp(s_)            # (N,)\n            yhat = exp_s + c_             # (N,)\n            diff = yhat - yt              # (N,)\n            # dMSE/dp_k = 2/N \u03a3 diff * d yhat/dp_k\n            grad = np.empty_like(p)\n            # \u2202yhat/\u2202w0 = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # \u2202yhat/\u2202w_i_j = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # \u2202yhat/\u2202c = 1\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # bounds: c >= 0 for stability, other parameters unbounded\n        bnds = [(None, None)] * P\n        bnds[-1] = (0.0, None)\n\n        res = minimize(\n            obj,\n            p0,\n            method='L-BFGS-B',\n            jac=jac,\n            bounds=bnds,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initial guess\n            params_opt[t, :] = p0\n\n    # return shape (6,) if single target\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.3617), Performs well on nmae (1.1056), Performs well on r2 (-0.3617), Performs well on combined_score (0.4234)\n\n\n### Program 2 (Score: 0.8905)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the loss in log\u2010space as a ridge\u2010regularized linear function\nof the four log\u2010features plus two cross\u2010interaction terms:\n\n    log loss \u2248 w0\n             + w1\u00b7log(lr)\n             + w2\u00b7log(bsz)\n             + w3\u00b7log(data_size)\n             + w4\u00b7log(non_embedding_param_size)\n             + w5\u00b7[log(lr)\u00b7log(data_size)]\n             + w6\u00b7[log(bsz)\u00b7log(non_embedding_param_size)]\n\nThis yields a 7\u2010parameter vector w = [w0,\u2026,w6].  We fit w by solving\na small ridge\u2010regularized normal equation in log\u2010space for numerical\nstability and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from hyperparameters via the 7\u2010parameter log\u2010linear model.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params].\n      params:      1D array of length 7: [w0, w1, w2, w3, w4, w5, w6].\n\n    Returns:\n      preds: 1D array of length N with predicted lm loss.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    # avoid log of zero\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)  # shape (N,4)\n\n    # unpack log\u2010features\n    lr_log   = logX[:, 0]\n    bsz_log  = logX[:, 1]\n    data_log = logX[:, 2]\n    prm_log  = logX[:, 3]\n\n    # build design matrix M: (N,7)\n    # columns = [1, lr_log, bsz_log, data_log, prm_log,\n    #            lr_log * data_log, bsz_log * prm_log]\n    N = X.shape[0]\n    M = np.empty((N, 7), dtype=np.float64)\n    M[:, 0] = 1.0\n    M[:, 1] = lr_log\n    M[:, 2] = bsz_log\n    M[:, 3] = data_log\n    M[:, 4] = prm_log\n    M[:, 5] = lr_log * data_log\n    M[:, 6] = bsz_log * prm_log\n\n    w = np.asarray(params, dtype=np.float64).ravel()\n    if w.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {w.size}\")\n\n    log_pred = M.dot(w)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear model with ridge regularization.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params].\n      loss_values: array of shape (N,) of observed lm losses.\n\n    Returns:\n      w: 1D array of length 7 of fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.size:\n        raise ValueError(f\"Number of data points {X.shape[0]} and losses {y.size} must match\")\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    logX = np.log(X)\n    lr_log   = logX[:, 0]\n    bsz_log  = logX[:, 1]\n    data_log = logX[:, 2]\n    prm_log  = logX[:, 3]\n\n    N = X.shape[0]\n    M = np.empty((N, 7), dtype=np.float64)\n    M[:, 0] = 1.0\n    M[:, 1] = lr_log\n    M[:, 2] = bsz_log\n    M[:, 3] = data_log\n    M[:, 4] = prm_log\n    M[:, 5] = lr_log * data_log\n    M[:, 6] = bsz_log * prm_log\n\n    # target vector in log\u2010space\n    y_log = np.log(y)\n\n    # ridge regularization strength\n    alpha = 1e-6\n\n    # solve (M^T M + \u03b1 I) w = M^T y_log\n    A = M.T.dot(M)\n    A[np.diag_indices_from(A)] += alpha\n    b = M.T.dot(y_log)\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.0161), Performs well on nmae (2.4513), Performs well on r2 (-7.0161), Performs well on combined_score (0.1109)\n\n\n### Program 3 (Score: 0.9175)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEfficient log\u2010linear scaling\u2010law model for LLM training hyperparameters.\n\nWe assume the relationship\n    log L \u2248 w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n            + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size)\n\nso that\n    L\u0302 = exp( w0 + \u03a3_i w_i\u00b7log(x_i) )\n\nThis yields a simple OLS solution in log\u2010space, is numerically stable,\nand directly minimizes relative errors across scales.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (5,) or (T,5) array [w0, w_lr, w_bsz, w_data, w_param]\n    returns:    if params is (5,), returns (N,) predictions;\n                if params is (T,5), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]            # make it (1,5)\n    T, P = p.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected parameter dimension {F+1}, got {P}\")\n    # log\u2010transform features\n    logX = np.log(X)             # (N,4)\n    # intercept term and slopes\n    intercept = p[:, 0]          # (T,)\n    slopes    = p[:, 1:]         # (T,4)\n    # compute log\u2010predictions: (N,T) = 1\u00b7w0 + logX\u00b7w_i^T\n    log_pred = intercept[None, :] + logX.dot(slopes.T)\n    y_hat = np.exp(log_pred)     # back to original scale\n    return y_hat[:, 0] if T == 1 else y_hat\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear model by ordinary least squares\n    in log\u2010space. Returns a vector of length 5\n    [w0, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # guard against zero/negative losses\n    y = np.maximum(y, 1e-12)\n    # log\u2010transform both features and target\n    logX = np.log(X)             # (N,4)\n    logy = np.log(y)             # (N,) or (N,T)\n    # build design matrix \u03a6 = [1, logX]\n    Phi = np.concatenate([np.ones((N, 1), dtype=np.float64), logX], axis=1)  # (N,5)\n    # ensure 2D target for multiple outputs\n    if logy.ndim == 1:\n        logy2 = logy[:, None]\n    else:\n        logy2 = logy\n    _, T = logy2.shape\n    # solve OLS for each target dimension\n    params_opt = np.zeros((T, F+1), dtype=np.float64)  # (T,5)\n    # use numpy.linalg.lstsq for numeric stability\n    for t in range(T):\n        coeffs, *_ = np.linalg.lstsq(Phi, logy2[:, t], rcond=None)\n        params_opt[t] = coeffs\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.9510), Performs well on nmae (2.5694), Performs well on r2 (-7.9510), Performs well on combined_score (0.1005)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6322, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss L as a single\u2010monomial scaling law plus an additive offset:\n\n    L\u0302(x) = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n            + c\n\nThis uses 6 parameters [w0, w1, w2, w3, w4, c].\nWe fit by minimizing mean\u2010squared error in L-space, using an analytic Jacobian\nand an L-BFGS-B solver with a non\u2010negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      either shape (6,) or (T,6), each [w0, w1, w2, w3, w4, c]\n    returns:     if params is (6,), returns (N,) predictions;\n                 if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform features (all strictly positive in practice)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter vector of length {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # shape (T,)\n    w_i = p[:, 1:-1]     # shape (T,4)\n    c  = p[:, -1]        # shape (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #    -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n\n    # prediction is exp(s) + c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter scaling law by minimizing MSE in L-space.\n    Returns a 1D array of length 6 (or (T,6) if multiple targets).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute log-features\n    logX = np.log(X)  # (N,4)\n\n    P = F + 2  # parameters w0, w1..w4, c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]  # (N,)\n\n        # initialize c0 = half of minimum observed loss (\u22650)\n        c0 = max(0.0, yt.min() * 0.5)\n        # linearize log-space: y_lin \u2248 w0 + \u03a3 w_i logX_i\n        y_lin = np.log(np.clip(yt - c0, 1e-8, None))\n        A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # least-squares for initial [w0, w_i]\n        beta, *_ = np.linalg.lstsq(A, y_lin, rcond=None)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = beta[0]\n        p0[1:-1] = beta[1:]\n        p0[-1] = c0\n\n        # objective: mean squared error in L-space\n        def obj(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            yhat = np.exp(s_) + c_\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient\n        def jac(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            exp_s = np.exp(s_)            # (N,)\n            yhat = exp_s + c_             # (N,)\n            diff = yhat - yt              # (N,)\n            # dMSE/dp_k = 2/N \u03a3 diff * d yhat/dp_k\n            grad = np.empty_like(p)\n            # \u2202yhat/\u2202w0 = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # \u2202yhat/\u2202w_i_j = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # \u2202yhat/\u2202c = 1\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # bounds: c >= 0 for stability, other parameters unbounded\n        bnds = [(None, None)] * P\n        bnds[-1] = (0.0, None)\n\n        res = minimize(\n            obj,\n            p0,\n            method='L-BFGS-B',\n            jac=jac,\n            bounds=bnds,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initial guess\n            params_opt[t, :] = p0\n\n    # return shape (6,) if single target\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.362), Excellent nmae (1.106)\n\n\n### Inspiration 2 (Score: 0.9175, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEfficient log\u2010linear scaling\u2010law model for LLM training hyperparameters.\n\nWe assume the relationship\n    log L \u2248 w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n            + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size)\n\nso that\n    L\u0302 = exp( w0 + \u03a3_i w_i\u00b7log(x_i) )\n\nThis yields a simple OLS solution in log\u2010space, is numerically stable,\nand directly minimizes relative errors across scales.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (5,) or (T,5) array [w0, w_lr, w_bsz, w_data, w_param]\n    returns:    if params is (5,), returns (N,) predictions;\n                if params is (T,5), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]            # make it (1,5)\n    T, P = p.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected parameter dimension {F+1}, got {P}\")\n    # log\u2010transform features\n    logX = np.log(X)             # (N,4)\n    # intercept term and slopes\n    intercept = p[:, 0]          # (T,)\n    slopes    = p[:, 1:]         # (T,4)\n    # compute log\u2010predictions: (N,T) = 1\u00b7w0 + logX\u00b7w_i^T\n    log_pred = intercept[None, :] + logX.dot(slopes.T)\n    y_hat = np.exp(log_pred)     # back to original scale\n    return y_hat[:, 0] if T == 1 else y_hat\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear model by ordinary least squares\n    in log\u2010space. Returns a vector of length 5\n    [w0, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # guard against zero/negative losses\n    y = np.maximum(y, 1e-12)\n    # log\u2010transform both features and target\n    logX = np.log(X)             # (N,4)\n    logy = np.log(y)             # (N,) or (N,T)\n    # build design matrix \u03a6 = [1, logX]\n    Phi = np.concatenate([np.ones((N, 1), dtype=np.float64), logX], axis=1)  # (N,5)\n    # ensure 2D target for multiple outputs\n    if logy.ndim == 1:\n        logy2 = logy[:, None]\n    else:\n        logy2 = logy\n    _, T = logy2.shape\n    # solve OLS for each target dimension\n    params_opt = np.zeros((T, F+1), dtype=np.float64)  # (T,5)\n    # use numpy.linalg.lstsq for numeric stability\n    for t in range(T):\n        coeffs, *_ = np.linalg.lstsq(Phi, logy2[:, t], rcond=None)\n        params_opt[t] = coeffs\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.951), Excellent nmae (2.569)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the loss in log\u2010space as a ridge\u2010regularized linear function\nof the four log\u2010features plus two cross\u2010interaction terms:\n\n    log loss \u2248 w0\n             + w1\u00b7log(lr)\n             + w2\u00b7log(bsz)\n             + w3\u00b7log(data_size)\n             + w4\u00b7log(non_embedding_param_size)\n             + w5\u00b7[log(lr)\u00b7log(data_size)]\n             + w6\u00b7[log(bsz)\u00b7log(non_embedding_param_size)]\n\nThis yields a 7\u2010parameter vector w = [w0,\u2026,w6].  We fit w by solving\na small ridge\u2010regularized normal equation in log\u2010space for numerical\nstability and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from hyperparameters via the 7\u2010parameter log\u2010linear model.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params].\n      params:      1D array of length 7: [w0, w1, w2, w3, w4, w5, w6].\n\n    Returns:\n      preds: 1D array of length N with predicted lm loss.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    # avoid log of zero\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)  # shape (N,4)\n\n    # unpack log\u2010features\n    lr_log   = logX[:, 0]\n    bsz_log  = logX[:, 1]\n    data_log = logX[:, 2]\n    prm_log  = logX[:, 3]\n\n    # build design matrix M: (N,7)\n    # columns = [1, lr_log, bsz_log, data_log, prm_log,\n    #            lr_log * data_log, bsz_log * prm_log]\n    N = X.shape[0]\n    M = np.empty((N, 7), dtype=np.float64)\n    M[:, 0] = 1.0\n    M[:, 1] = lr_log\n    M[:, 2] = bsz_log\n    M[:, 3] = data_log\n    M[:, 4] = prm_log\n    M[:, 5] = lr_log * data_log\n    M[:, 6] = bsz_log * prm_log\n\n    w = np.asarray(params, dtype=np.float64).ravel()\n    if w.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {w.size}\")\n\n    log_pred = M.dot(w)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear model with ridge regularization.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params].\n      loss_values: array of shape (N,) of observed lm losses.\n\n    Returns:\n      w: 1D array of length 7 of fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.size:\n        raise ValueError(f\"Number of data points {X.shape[0]} and losses {y.size} must match\")\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    logX = np.log(X)\n    lr_log   = logX[:, 0]\n    bsz_log  = logX[:, 1]\n    data_log = logX[:, 2]\n    prm_log  = logX[:, 3]\n\n    N = X.shape[0]\n    M = np.empty((N, 7), dtype=np.float64)\n    M[:, 0] = 1.0\n    M[:, 1] = lr_log\n    M[:, 2] = bsz_log\n    M[:, 3] = data_log\n    M[:, 4] = prm_log\n    M[:, 5] = lr_log * data_log\n    M[:, 6] = bsz_log * prm_log\n\n    # target vector in log\u2010space\n    y_log = np.log(y)\n\n    # ridge regularization strength\n    alpha = 1e-6\n\n    # solve (M^T M + \u03b1 I) w = M^T y_log\n    A = M.T.dot(M)\n    A[np.diag_indices_from(A)] += alpha\n    b = M.T.dot(y_log)\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved monomial\u2010plus\u2010offset scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss L as a single\u2010monomial scaling law plus an additive offset:\n\n    L\u0302(x) = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n            + c\n\nThis uses 6 parameters [w0, w1, w2, w3, w4, c].\nWe fit by minimizing mean\u2010squared error in L\u2010space, using an analytic Jacobian\nand an L\u2010BFGS\u2010B solver with a non\u2010negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via the 6\u2010parameter monomial+offset model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      array of shape (6,) or (T,6), each row = [w0, w1, w2, w3, w4, c].\n\n    Returns:\n      If params is (6,), returns (N,) predictions.\n      If params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # log\u2010transform features (all >0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected parameter vector of length 6, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]          # shape (T,)\n    w = p[:, 1:5]         # shape (T,4)\n    c = p[:, 5]           # shape (T,)\n\n    # compute s = w0 + \u03a3_i w_i * logX[:,i]  -> shape (N,T)\n    s = logX.dot(w.T) + w0[None, :]\n\n    # prediction = exp(s) + c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if single parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter monomial+offset model by minimizing MSE in L\u2010space.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      loss_values: array of shape (N,) of observed lm losses.\n\n    Returns:\n      params: 1D array of length 6 = [w0, w1, w2, w3, w4, c].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # precompute logs\n    logX = np.log(X)\n    # initialize c0 = max(0, half min observed loss)\n    c0 = max(0.0, 0.5 * np.min(y))\n    # linearize: log(y - c0) \u2248 w0 + \u03a3 w_i logX_i\n    eps = 1e-12\n    y_mod = np.clip(y - c0, eps, None)\n    y_lin = np.log(y_mod)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # shape (N,5)\n    # initial least\u2010squares for [w0,w1..w4]\n    beta, *_ = np.linalg.lstsq(A, y_lin, rcond=None)\n    p0 = np.zeros(6, dtype=np.float64)\n    p0[0:5] = beta\n    p0[5] = c0\n\n    # objective: MSE in original\u2010space\n    def obj(p):\n        w0_, w_i_, c_ = p[0], p[1:5], p[5]\n        s_ = logX.dot(w_i_) + w0_\n        yhat = np.exp(s_) + c_\n        diff = yhat - y\n        return np.mean(diff * diff)\n\n    # analytic gradient\n    def jac(p):\n        w0_, w_i_, c_ = p[0], p[1:5], p[5]\n        s_ = logX.dot(w_i_) + w0_\n        exp_s = np.exp(s_)                 # (N,)\n        yhat = exp_s + c_                  # (N,)\n        diff = yhat - y                    # (N,)\n        # dMSE/dp = 2/N * \u03a3 diff * \u2202yhat/\u2202p\n        grad = np.empty_like(p)\n        # \u2202yhat/\u2202w0 = exp_s\n        grad[0] = 2.0 * np.mean(diff * exp_s)\n        # \u2202yhat/\u2202w_i_j = exp_s * logX[:, j]\n        grad[1:5] = 2.0 * np.mean((diff[:,None]) * (exp_s[:,None] * logX), axis=0)\n        # \u2202yhat/\u2202c = 1\n        grad[5] = 2.0 * np.mean(diff)\n        return grad\n\n    # bounds: c >= 0 for stability\n    bounds = [(None, None)] * 6\n    bounds[5] = (0.0, None)\n\n    res = minimize(\n        obj,\n        p0,\n        method='L-BFGS-B',\n        jac=jac,\n        bounds=bounds,\n        options={'maxiter':1000, 'ftol':1e-12}\n    )\n\n    if not res.success:\n        # fallback to initial guess\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```"]}}}