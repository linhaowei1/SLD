{"id": "5418989d-70c8-4155-aaf1-5941d34ab44c", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr minimum\n    16.0,      # bsz minimum\n    4e9,       # data size minimum\n    2.14e8     # non\u2010embedding param size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr maximum\n    4096.0,    # bsz maximum\n    1e11,      # data size maximum\n    1e9        # non\u2010embedding param size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization of log\u2010features\n_LOG_MID         = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a compact design matrix with 8 features:\n      z_i = (log x_i \u2212 _LOG_MID[i]) / _LOG_HALF_RANGE[i]\n    Features:\n      1,\n      z_lr, z_bsz, z_data, z_param,\n      z_lr^2, z_bsz^2,\n      z_data * z_param\n    Returns A of shape (N, 8).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                      # (N,4)\n    z    = (logs - _LOG_MID) / _LOG_HALF_RANGE  # normalized to ~[-1,1]\n    # unpack for clarity\n    z_lr    = z[:, 0]\n    z_bsz   = z[:, 1]\n    z_data  = z[:, 2]\n    z_param = z[:, 3]\n    # assemble columns\n    A = np.stack([\n        np.ones(N,       dtype=np.float64),  # intercept\n        z_lr,\n        z_bsz,\n        z_data,\n        z_param,\n        z_lr**2,\n        z_bsz**2,\n        z_data * z_param\n    ], axis=1)  # shape (N,8)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an 8\u2010parameter quadratic\u2010in\u2010normalized\u2010log model:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,8)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2016\u03b8_{1:}\u2016^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (8,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n    # build design matrix and target\n    A = _build_design_matrix(X)            # (N,8)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)                       # (8,8)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P         # small adaptive regularization\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # do not penalize intercept\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d22292e8-6bd7-4649-82ba-a249c6e104d2", "generation": 5, "timestamp": 1754804573.257556, "iteration_found": 111, "metrics": {"nmse": 157.7749713252385, "nmae": 16.78213594356377, "r2": -156.7749713252385, "combined_score": 0.006298221890096114}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.237651487090371, "nmae": 3.1862578960891783, "r2": -7.237651487090371, "combined_score": 0.10825262258459319}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.2377\n- nmae: 3.1863\n- r2: -7.2377\n- combined_score: 0.1083\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Fixed log-ranges for normalization based on the problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non-embed param size max\n], dtype=np.float64))\n\n# Center and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n\n    # log and normalize\n    logs = np.log(X + eps)                   # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n\n    # build columns\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    # stack -> (N, 15)\n    return np.stack(cols, axis=1)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized-log 2nd-degree polynomial:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array-like, shape (N,4) or (4,)\n      params:      array-like of length 15\n    Output:\n      preds:       ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt:   ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix and log-target\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)                 # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)               # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # normalized to roughly [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:,None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2, no penalty on \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled to average diag entry\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Compute safe logs\n    logs = np.log(X + eps)               # shape (N,4)\n    # Normalize into roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate to get design matrix of shape (N, 1+4+4+6=15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"Expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points must match number of loss values\")\n\n    # Build design matrix and compute log\u2010target\n    A = _build_design_matrix(X)           # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # shape (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not regularize the intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each log\u2010feature (z-score normalization)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      1 (intercept),\n      z_i (linear for i in 0..3),\n      z_i^2 (quadratic),\n      z_i * z_j (pairwise interactions for 0<=i<j<4)\n    Returns:\n      A of shape (N, 1+4+4+6 = 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all columns into design matrix\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (\u03b8)\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n      (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)      # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # shape (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                 # shape (15,15)\n    P   = ATA.shape[0]\n    # Adaptive ridge \u03bb: scaled by average diagonal\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    # compute log and normalize to roughly [-1,1]\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N = X.shape[0]\n\n    # build feature columns\n    cols = [np.ones((N, 1), dtype=np.float64)]    # intercept\n    cols.append(z)                                 # linear terms\n    cols.append(z**2)                              # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(4):\n        for j in range(i+1, 4):\n            term = (z[:, i] * z[:, j])[:, None]\n            inters.append(term)\n    if inters:\n        cols.append(np.hstack(inters))             # shape (N,6)\n\n    # concatenate into design matrix of shape (N,15)\n    A = np.hstack(cols)\n    return A\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n    where \u03bb = \u03bb_factor * (trace(A\u1d40A) / P). No penalty on intercept.\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                  # (15,15)\n    P = ATA.shape[0]                  # 15\n    # Adaptive ridge: scale lambda by average diagonal entry\n    lambda_factor = 1e-5\n    lam = lambda_factor * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Fixed log-ranges for normalization based on the problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non-embed param size max\n], dtype=np.float64))\n\n# Center and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n\n    # log and normalize\n    logs = np.log(X + eps)                   # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n\n    # build columns\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    # stack -> (N, 15)\n    return np.stack(cols, axis=1)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized-log 2nd-degree polynomial:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array-like, shape (N,4) or (4,)\n      params:      array-like of length 15\n    Output:\n      preds:       ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt:   ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix and log-target\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)                 # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# centers and half\u2010ranges of each log\u2010feature\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    15\u2010parameter normalized\u2010log quadratic scaling law with pairwise interactions:\n\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n\n    params must have length 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # force shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected (N,4) data, got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected {expected_len} params, got {p.size}\")\n\n    # unpack\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]             # linear terms\n    \u03b82 = p[1 + F : 1 + 2 * F]     # quadratic terms\n    \u03b83 = p[1 + 2 * F :]           # pairwise interactions\n\n    # compute normalized logs\n    eps = 1e-12\n    logs = np.log(X + eps)                        # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE        # (N,4)\n\n    # build log\u2010loss\n    log_pred = \u03b80 + z.dot(\u03b81) + (z * z).dot(\u03b82)\n\n    # add pairwise interactions\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter normalized\u2010log quadratic model by\n    ridge\u2010regularized linear least\u2010squares on log(loss).\n\n    Returns a length\u201015 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected (N,4) data, got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # log\u2010transform and normalize inputs\n    eps = 1e-12\n    logs = np.log(X + eps)                       # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # (N,4)\n\n    N, F = z.shape\n    # build design matrix A = [1, z, z^2, pairwise z_i * z_j]\n    cols = [np.ones((N, 1), dtype=np.float64),  # intercept\n            z,                                 # linear\n            z**2]                              # quadratic\n\n    # pairwise terms\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n\n    # target = log(loss)\n    y_log = np.log(y + eps)\n\n    # ridge regularization: do not penalize intercept\n    lam = 1e-5\n    P = A.shape[1]\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve normal equations\n    params_opt = np.linalg.solve(ATA_reg, ATy)\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 4 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    # compute log and normalize to roughly [-1,1]\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N = X.shape[0]\n\n    # build feature columns\n    cols = [np.ones((N, 1), dtype=np.float64)]    # intercept\n    cols.append(z)                                 # linear terms\n    cols.append(z**2)                              # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(4):\n        for j in range(i+1, 4):\n            term = (z[:, i] * z[:, j])[:, None]\n            inters.append(term)\n    if inters:\n        cols.append(np.hstack(inters))             # shape (N,6)\n\n    # concatenate into design matrix of shape (N,15)\n    A = np.hstack(cols)\n    return A\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n    where \u03bb = \u03bb_factor * (trace(A\u1d40A) / P). No penalty on intercept.\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                  # (15,15)\n    P = ATA.shape[0]                  # 15\n    # Adaptive ridge: scale lambda by average diagonal entry\n    lambda_factor = 1e-5\n    lam = lambda_factor * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.237), Excellent nmae (3.186)\n\n\n### Inspiration 5 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each log\u2010feature (z-score normalization)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      1 (intercept),\n      z_i (linear for i in 0..3),\n      z_i^2 (quadratic),\n      z_i * z_j (pairwise interactions for 0<=i<j<4)\n    Returns:\n      A of shape (N, 1+4+4+6 = 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all columns into design matrix\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (\u03b8)\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n      (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)      # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # shape (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                 # shape (15,15)\n    P   = ATA.shape[0]\n    # Adaptive ridge \u03bb: scaled by average diagonal\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr\n    16.0,      # bsz\n    4e9,       # data_size\n    2.14e8     # non_embedding_param_size\n], dtype=np.float64))\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr\n    4096.0,    # bsz\n    1e11,      # data_size\n    1e9        # non_embedding_param_size\n], dtype=np.float64))\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params is a vector of length 1 + 4 + 4 + 6 = 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n\n    # unpack parameters\n    theta0 = p[0]\n    lin_coefs = p[1 : 1 + F]\n    quad_coefs = p[1 + F : 1 + 2 * F]\n    cross_coefs = p[1 + 2 * F :]\n\n    # compute normalized log\u2010features\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # build log\u2010prediction\n    log_pred = theta0\n    log_pred += z.dot(lin_coefs)\n    log_pred += (z ** 2).dot(quad_coefs)\n\n    # add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += cross_coefs[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    # return loss in original space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-5):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (No penalty on the intercept term \u03b80.)\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # compute normalized log\u2010features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # build design matrix A: [1 | z | z^2 | pairwise z_i*z_j]\n    A_cols = [np.ones((N, 1), dtype=np.float64)]\n    A_cols.append(z)            # linear terms\n    A_cols.append(z ** 2)       # quadratic terms\n\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        A_cols.append(np.concatenate(cross_cols, axis=1))\n\n    A = np.concatenate(A_cols, axis=1)  # shape (N,15)\n\n    # target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # ridge\u2010regularized normal equations:\n    # (A^T A + \u039b) \u03b8 = A^T y_log\n    P = A.shape[1]\n    ATA = A.T.dot(A)\n    # no regularization on intercept (index 0)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr minimum\n    16.0,      # bsz minimum\n    4e9,       # data size minimum\n    2.14e8     # non\u2010embedding param size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr maximum\n    4096.0,    # bsz maximum\n    1e11,      # data size maximum\n    1e9        # non\u2010embedding param size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization of log\u2010features\n_LOG_MID         = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a compact design matrix with 8 features:\n      z_i = (log x_i \u2212 _LOG_MID[i]) / _LOG_HALF_RANGE[i]\n    Features:\n      1,\n      z_lr, z_bsz, z_data, z_param,\n      z_lr^2, z_bsz^2,\n      z_data * z_param\n    Returns A of shape (N, 8).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                      # (N,4)\n    z    = (logs - _LOG_MID) / _LOG_HALF_RANGE  # normalized to ~[-1,1]\n    # unpack for clarity\n    z_lr    = z[:, 0]\n    z_bsz   = z[:, 1]\n    z_data  = z[:, 2]\n    z_param = z[:, 3]\n    # assemble columns\n    A = np.stack([\n        np.ones(N,       dtype=np.float64),  # intercept\n        z_lr,\n        z_bsz,\n        z_data,\n        z_param,\n        z_lr**2,\n        z_bsz**2,\n        z_data * z_param\n    ], axis=1)  # shape (N,8)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an 8\u2010parameter quadratic\u2010in\u2010normalized\u2010log model:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,8)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2016\u03b8_{1:}\u2016^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (8,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n    # build design matrix and target\n    A = _build_design_matrix(X)            # (N,8)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)                       # (8,8)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P         # small adaptive regularization\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # do not penalize intercept\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Reduced parameter count from 15 to 8, focusing on the most predictive terms (model size, data size, learning rate, batch size, plus key squared and cross terms).\n- Retained normalized\u2010log inputs for numerical stability.\n- Adaptive ridge regularization in the normal equations improves conditioning.\n- Simpler model should generalize better, boosting R\u00b2 and combined score while maintaining low NMSE/NMAE."]}}}