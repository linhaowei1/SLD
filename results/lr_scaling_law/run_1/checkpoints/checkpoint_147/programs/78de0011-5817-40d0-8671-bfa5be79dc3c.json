{"id": "78de0011-5817-40d0-8671-bfa5be79dc3c", "code": "import numpy as np\nfrom scipy.optimize import minimize  # kept for compatibility though not used below\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a second-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    # start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms z_i\n    cols.append(z)\n    # quadratic terms z_i^2\n    cols.append(z * z)\n    # pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)         # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)             # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on intercept \u03b80)\n    with \u03bb = 1e-4 * trace(A\u1d40A)/P for scale invariance.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    A = _build_design_matrix(X)         # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # (N,)\n\n    # build normal equations\n    ATA = A.T.dot(A)                    # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P      # adaptive ridge \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                     # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cef53ea5-d9d3-4bf7-a090-02d956834f07", "generation": 4, "timestamp": 1754804668.55434, "iteration_found": 126, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 33.397849992536756, "nmae": 7.59009232125573, "r2": -32.397849992536756, "combined_score": 0.029071584422194072}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 33.3978\n- nmae: 7.5901\n- r2: -32.3978\n- combined_score: 0.0291\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Input:\n      X: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_param_size]\n    Output:\n      A: array of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                 # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize ~[-1,1]\n    N, F = z.shape\n\n    # constant term\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N, 1+4+4+6 =15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)          # shape (N,15)\n    log_pred = A.dot(theta)              # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)          # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)              # shape (N,)\n\n    # normal equations with ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features with pairwise interactions:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      1 (intercept),\n      z_i (4 linear terms),\n      z_i^2 (4 quadratic terms),\n      z_i * z_j for 0 <= i < j < 4 (6 interaction terms)\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                       # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge\u2010regularized least squares on log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: (N,)   array of observed LM losses\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: data points and losses must match in length\")\n\n    A = _build_design_matrix(X)   # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)       # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)              # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0               # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for each feature (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a second\u2010degree polynomial design matrix in normalized log\u2010features.\n    Inputs:\n      X: ndarray of shape (N,4) with columns [lr, bsz, data_size, non_embed_param_size]\n    Returns:\n      A: ndarray of shape (N, 15), columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4,\n          z2*z3, z2*z4, z3*z4]\n    where z = (log(X) \u2212 _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                      # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE      # normalized to roughly [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms z_i\n    cols.append(z)\n    # quadratic terms z_i^2\n    cols.append(z ** 2)\n    # pairwise interaction terms z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all into (N,15)\n    A = np.hstack(cols)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)               # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized\n    least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (no penalty on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) for single\u2010target,\n                 or shape (T,15) for multi\u2010target.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # ensure y is (N, T)\n    if y.ndim == 1:\n        Y = y.reshape(-1, 1)\n    elif y.ndim == 2:\n        Y = y\n    else:\n        raise ValueError(f\"fit_scaling_law: expected loss_values 1D or 2D, got {y.ndim}D\")\n\n    N, T = X.shape[0], Y.shape[1]\n    A = _build_design_matrix(X)               # (N,15)\n    eps = 1e-12\n    Y_log = np.log(Y + eps)                   # (N, T)\n\n    # Precompute ATA and regularization\n    ATA = A.T.dot(A)                          # (15,15)\n    P   = ATA.shape[0]\n    # adaptive ridge \u03bb for numerical stability\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                           # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(Y_log)                  # (15, T)\n\n    # solve for \u03b8 for each target dimension\n    try:\n        Theta = np.linalg.solve(ATA_reg, ATy) # (15, T)\n    except np.linalg.LinAlgError:\n        Theta = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    # return in shape (T,15) or (15,)\n    Theta = Theta.T                          # (T, 15)\n    return Theta[0] if T == 1 else Theta\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter count minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter count maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: (N,15) matrix.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(X, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {X.shape[1]}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms z_i\n    cols.append(z)\n    # 3) quadratic terms z_i^2\n    cols.append(z ** 2)\n    # 4) pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)               # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                 # do NOT penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate  min\n    16.0,     # batch size     min\n    4e9,      # data size      min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate  max\n    4096.0,   # batch size     max\n    1e11,     # data size      max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # shape (N,4)\n    N, F = z.shape\n\n    # assemble columns\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized-log 2nd-degree polynomial:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds:       ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)           # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)               # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt:   ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    ATA = A.T.dot(A)                      # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P        # adaptive ridge \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Input:\n      X: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_param_size]\n    Output:\n      A: array of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                 # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize ~[-1,1]\n    N, F = z.shape\n\n    # constant term\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N, 1+4+4+6 =15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)          # shape (N,15)\n    log_pred = A.dot(theta)              # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)          # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)              # shape (N,)\n\n    # normal equations with ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 5.0982, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range for normalization to ~[-1,1]\n_LOG_MEAN  = (_LOG_MIN + _LOG_MAX) * 0.5\n_LOG_SCALE = (_LOG_MAX - _LOG_MIN) * 0.5\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build design matrix for a quadratic\u2010cross interaction model in normalized logs:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns: A of shape (N, 11)\n    \"\"\"\n    eps = 1e-12\n    # Compute safe logs\n    logs = np.log(X + eps)                          # (N,4)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE             # (N,4)\n    N, F = z.shape\n    # Intercept\n    cols = [np.ones((N,), dtype=np.float64)]\n    # Linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # Pairwise cross terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n    # Stack into (N, 1+4+6=11)\n    return np.stack(cols, axis=1)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via an 11\u2010parameter quadratic\u2010cross model:\n      log_loss \u2248 \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_{i<j} \u03b82_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n    where z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 11\n    Returns:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)           # (N,11)\n    log_pred = A.dot(theta)               # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11\u2010parameter quadratic\u2010cross scaling law by ridge\u2010regularized\n    least squares on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Returns:\n      theta_opt: (11,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    A = _build_design_matrix(X)           # (N,11)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Ridge regularization: no penalty on intercept\n    P = A.shape[1]                        # 11\n    lam = 1e-3                            # stronger regularization for better generalization\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not penalize \u03b80\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg                # (11,11)\n    ATy = A.T.dot(y_log)                  # (11,)\n\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.176), Excellent nmae (19.388)\n\n\n### Inspiration 3 (Score: 2.1537, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param^{e_N},\n    with A = exp(logA).\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects input shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Numerical stability\n    eps = 1e-12\n    # Compute log-term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by:\n      1) closed-form ridge regression on log(y - b0)\n      2) bounded L-BFGS-B refinement minimizing MSE\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n\n    Returns:\n      params: ndarray of shape (6,) for single-target or (T,6) for multi-target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n\n    # Precompute log-features for closed-form init\n    eps = 1e-12\n    Z = np.log(X + eps)                  # (N,4)\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    AtA = A_lin.T @ A_lin + lam * np.eye(5)\n    At  = A_lin.T\n\n    def _fit_single(y_vec):\n        # 1) bias init: floor near minimum\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, y_min * 0.9)\n        # 2) shift and clamp\n        y_shift = np.maximum(y_vec - b0, eps)\n        log_y = np.log(y_shift)\n        # 3) closed-form linear solve: [logA, e_lr, e_bsz, e_D, e_N]\n        theta_lin = np.linalg.solve(AtA, At @ log_y)\n        # pack init params\n        init = np.empty(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_lin\n\n        # bounds: b>=0, exponents in [-5,5], logA free\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b\n            (None, None),                  # logA\n            (-5.0, 5.0),                   # e_lr\n            (-5.0, 5.0),                   # e_bsz\n            (-5.0, 5.0),                   # e_D\n            (-5.0, 5.0),                   # e_N\n        ]\n\n        # objective: MSE in original loss space\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # single L-BFGS-B refinement\n        res = minimize(\n            obj,\n            init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-12}\n        )\n        return res.x if res.success else init\n\n    # fit per target\n    all_params = np.vstack([_fit_single(Y[:, i]) for i in range(T)])\n    return all_params[0] if T == 1 else all_params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.362), Excellent nmae (7.586)\n\n\n### Inspiration 4 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants: mean and half\u2010range\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Features per sample:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to ~[-1,1]\n    N, F = z.shape\n\n    feats = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    feats.append(z)\n    # squared terms\n    feats.append(z * z)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if inters:\n        feats.append(np.hstack(inters))\n\n    return np.hstack(feats)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]                   # 15\n    lam = 1e-4                       # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 5 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter count minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter count maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: (N,15) matrix.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(X, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {X.shape[1]}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms z_i\n    cols.append(z)\n    # 3) quadratic terms z_i^2\n    cols.append(z ** 2)\n    # 4) pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)               # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                 # do NOT penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss using an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D shape and correct feature dimension\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # add tiny epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n\n    # compute the log\u2010term in a numerically stable manner\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law + bias model:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_emb^{e_model},\n      with A = exp(logA).\n\n    Uses closed\u2010form least squares in log\u2010space to initialize parameters,\n    then refines them with L-BFGS-B under sensible bounds.\n    Returns optimized params: array of length 6 = [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) Initialize bias b0 to a small positive fraction of minimum observed loss\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare adjusted target for log\u2010linear regression: y_adj = y - b0 (clipped)\n    y_adj = np.clip(y - b0, eps, None)\n    # design matrix for log\u2010linear fit: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    logs = np.log(X + eps)  # shape (N,4)\n    A_init = np.hstack([np.ones((N,1), dtype=np.float64), logs])  # (N,5)\n    # solve least squares in log\u2010space\n    theta_ls, *_ = np.linalg.lstsq(A_init, np.log(y_adj), rcond=None)\n    # unpack: theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n    logA0, e_lr0, e_bsz0, e_data0, e_model0 = theta_ls\n\n    # 3) Initial parameter vector\n    init_params = np.array([b0, logA0, e_lr0, e_bsz0, e_data0, e_model0], dtype=np.float64)\n\n    # 4) Parameter bounds for stability\n    y_max = np.max(y)\n    bounds = [\n        (0.0,       max(1.0, 1.5 * y_max)),  # b \u2208 [0, ~1.5*max_loss]\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_lr\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n    ]\n\n    # 5) Objective: mean squared error in original loss\u2010space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # 6) Optimize with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # return optimized parameters or initial if optimization failed\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize  # kept for compatibility though not used below\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a second-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    # start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms z_i\n    cols.append(z)\n    # quadratic terms z_i^2\n    cols.append(z * z)\n    # pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)         # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)             # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on intercept \u03b80)\n    with \u03bb = 1e-4 * trace(A\u1d40A)/P for scale invariance.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    A = _build_design_matrix(X)         # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # (N,)\n\n    # build normal equations\n    ATA = A.T.dot(A)                    # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P      # adaptive ridge \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                     # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}