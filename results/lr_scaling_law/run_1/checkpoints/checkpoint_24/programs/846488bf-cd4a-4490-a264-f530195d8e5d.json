{"id": "846488bf-cd4a-4490-a264-f530195d8e5d", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters with a hybrid absolute\u2010\nand relative\u2010error objective for improved generalization and stability.\n\nModel form:\n    y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n         + c\n\nWe fit [w0, w1, w2, w3, w4, c] by minimizing a weighted combination of\nmean\u2010squared error in L-space and mean\u2010squared error in log\u2010L space:\n\n    Obj(p) = \u03bb\u00b7MSE_abs + (1\u2212\u03bb)\u00b7MSE_log\n\nwhere\n    MSE_abs = mean[(y\u0302 \u2212 y)^2]\n    MSE_log = mean[(log(y\u0302+\u03b5) \u2212 log(y+\u03b5))^2]\n\nThis balances absolute and relative errors, improving both nmse/nmae and r\u00b2.\nWe derive analytic gradients and use L-BFGS-B with c \u2265 0.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and scaling\u2010law params.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) or (T,6) array [w0, w1, w2, w3, w4, c]\n    Returns:     (N,) or (N,T) predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {F}\")\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    w0 = p[:, 0]            # (T,)\n    w_i = p[:, 1:-1]        # (T,4)\n    c  = p[:, -1]           # (T,)\n\n    # compute s = w0 + logX \u00b7 w_i^T  => shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law to minimize a hybrid absolute/relative error.\n    Returns optimized params: shape (6,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    logX = np.log(X)  # (N,4)\n    yt = y\n\n    # initial guess for c: small non\u2010negative offset\n    c0 = max(0.0, yt.min() * 0.1)\n    # linearize log-space to obtain initial w0,w_i\n    # log(y - c0) \u2248 w0 + \u03a3 w_i*logX_i\n    z = np.clip(yt - c0, 1e-8, None)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    beta, *_ = np.linalg.lstsq(A, np.log(z), rcond=None)\n    p0 = np.zeros(F + 2, dtype=np.float64)\n    p0[0]      = beta[0]\n    p0[1:-1]   = beta[1:]\n    p0[-1]     = c0\n\n    # objective weights\n    \u03bb = 0.5\n    eps = 1e-8\n\n    def obj(p):\n        w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n        s_ = logX.dot(w_i_) + w0_                   # (N,)\n        exp_s = np.exp(s_)\n        yhat = exp_s + c_\n        # absolute error term\n        diff = yhat - yt\n        mse_abs = np.mean(diff * diff)\n        # log\u2010space error term\n        ld = np.log(yhat + eps) - np.log(yt + eps)\n        mse_log = np.mean(ld * ld)\n        return \u03bb * mse_abs + (1 - \u03bb) * mse_log\n\n    def jac(p):\n        w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n        s_ = logX.dot(w_i_) + w0_\n        exp_s = np.exp(s_)\n        yhat = exp_s + c_\n\n        diff = yhat - yt                            # (N,)\n        ld = np.log(yhat + eps) - np.log(yt + eps)  # (N,)\n\n        # derivative of yhat wrt params: dy_dw0 = exp_s; dy_dwi = exp_s*logX; dy_dc = 1\n        d0 = exp_s                                  # (N,)\n        di = exp_s[:, None] * logX                  # (N,4)\n        dc = np.ones_like(yhat)                     # (N,)\n\n        # grad_abs = 2/N \u03a3 diff * d yhat/dp\n        grad_abs_w0 = 2.0 * np.mean(diff * d0)\n        grad_abs_wi = 2.0 * np.mean(diff[:,None] * di, axis=0)\n        grad_abs_c  = 2.0 * np.mean(diff * dc)\n\n        # grad_log = 2/N \u03a3 ld * (1/(yhat+eps)) * d yhat/dp\n        inv = 1.0 / (yhat + eps)\n        common = 2.0 * ld * inv\n        grad_log_w0 = np.mean(common * d0)\n        grad_log_wi = np.mean(common[:,None] * di, axis=0)\n        grad_log_c  = np.mean(common * dc)\n\n        # combine\n        grad = np.empty_like(p)\n        grad[0]      = \u03bb * grad_abs_w0 + (1-\u03bb) * grad_log_w0\n        grad[1:-1]   = \u03bb * grad_abs_wi + (1-\u03bb) * grad_log_wi\n        grad[-1]     = \u03bb * grad_abs_c  + (1-\u03bb) * grad_log_c\n        return grad\n\n    # bound c >= 0 for stability\n    bnds = [(None, None)] * (F + 2)\n    bnds[-1] = (0.0, None)\n\n    res = minimize(\n        obj,\n        p0,\n        method='L-BFGS-B',\n        jac=jac,\n        bounds=bnds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if not res.success:\n        # fallback\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d9e91715-215d-4f8c-b9c5-4deba0a68cc2", "generation": 2, "timestamp": 1754802630.6388824, "iteration_found": 18, "metrics": {"nmse": 1.4347418225384778, "nmae": 1.1305877944355984, "r2": -0.4347418225384778, "combined_score": 0.41072116589240387}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.3616904448998264, "nmae": 1.1055516793575724, "r2": -0.3616904448998264, "combined_score": 0.4234255180053523}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.3617\n- nmae: 1.1056\n- r2: -0.3617\n- combined_score: 0.4234\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.3617, nmae: 1.1056, r2: -0.3617, combined_score: 0.4234\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6322)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss L as a single\u2010monomial scaling law plus an additive offset:\n\n    L\u0302(x) = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n            + c\n\nThis uses 6 parameters [w0, w1, w2, w3, w4, c].\nWe fit by minimizing mean\u2010squared error in L-space, using an analytic Jacobian\nand an L-BFGS-B solver with a non\u2010negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      either shape (6,) or (T,6), each [w0, w1, w2, w3, w4, c]\n    returns:     if params is (6,), returns (N,) predictions;\n                 if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform features (all strictly positive in practice)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter vector of length {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # shape (T,)\n    w_i = p[:, 1:-1]     # shape (T,4)\n    c  = p[:, -1]        # shape (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #    -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n\n    # prediction is exp(s) + c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter scaling law by minimizing MSE in L-space.\n    Returns a 1D array of length 6 (or (T,6) if multiple targets).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute log-features\n    logX = np.log(X)  # (N,4)\n\n    P = F + 2  # parameters w0, w1..w4, c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]  # (N,)\n\n        # initialize c0 = half of minimum observed loss (\u22650)\n        c0 = max(0.0, yt.min() * 0.5)\n        # linearize log-space: y_lin \u2248 w0 + \u03a3 w_i logX_i\n        y_lin = np.log(np.clip(yt - c0, 1e-8, None))\n        A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # least-squares for initial [w0, w_i]\n        beta, *_ = np.linalg.lstsq(A, y_lin, rcond=None)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = beta[0]\n        p0[1:-1] = beta[1:]\n        p0[-1] = c0\n\n        # objective: mean squared error in L-space\n        def obj(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            yhat = np.exp(s_) + c_\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient\n        def jac(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            exp_s = np.exp(s_)            # (N,)\n            yhat = exp_s + c_             # (N,)\n            diff = yhat - yt              # (N,)\n            # dMSE/dp_k = 2/N \u03a3 diff * d yhat/dp_k\n            grad = np.empty_like(p)\n            # \u2202yhat/\u2202w0 = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # \u2202yhat/\u2202w_i_j = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # \u2202yhat/\u2202c = 1\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # bounds: c >= 0 for stability, other parameters unbounded\n        bnds = [(None, None)] * P\n        bnds[-1] = (0.0, None)\n\n        res = minimize(\n            obj,\n            p0,\n            method='L-BFGS-B',\n            jac=jac,\n            bounds=bnds,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initial guess\n            params_opt[t, :] = p0\n\n    # return shape (6,) if single target\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.3617), Performs well on nmae (1.1056), Performs well on r2 (-0.3617), Performs well on combined_score (0.4234)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss L as a single\u2010monomial scaling law plus an additive offset:\n\n    L\u0302(x) = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n            + c\n\nThis uses 6 parameters [w0, w1, w2, w3, w4, c].\nWe fit by minimizing mean\u2010squared error in L-space, using an analytic Jacobian\nand an L-BFGS-B solver with a non\u2010negative bound on c for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      either shape (6,) or (T,6), each [w0, w1, w2, w3, w4, c]\n    returns:     if params is (6,), returns (N,) predictions;\n                 if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform features (all strictly positive in practice)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter vector of length {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # shape (T,)\n    w_i = p[:, 1:-1]     # shape (T,4)\n    c  = p[:, -1]        # shape (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #    -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n\n    # prediction is exp(s) + c\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter scaling law by minimizing MSE in L-space.\n    Returns a 1D array of length 6 (or (T,6) if multiple targets).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute log-features\n    logX = np.log(X)  # (N,4)\n\n    P = F + 2  # parameters w0, w1..w4, c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]  # (N,)\n\n        # initialize c0 = half of minimum observed loss (\u22650)\n        c0 = max(0.0, yt.min() * 0.5)\n        # linearize log-space: y_lin \u2248 w0 + \u03a3 w_i logX_i\n        y_lin = np.log(np.clip(yt - c0, 1e-8, None))\n        A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # least-squares for initial [w0, w_i]\n        beta, *_ = np.linalg.lstsq(A, y_lin, rcond=None)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = beta[0]\n        p0[1:-1] = beta[1:]\n        p0[-1] = c0\n\n        # objective: mean squared error in L-space\n        def obj(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            yhat = np.exp(s_) + c_\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient\n        def jac(p):\n            w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n            s_ = logX.dot(w_i_) + w0_\n            exp_s = np.exp(s_)            # (N,)\n            yhat = exp_s + c_             # (N,)\n            diff = yhat - yt              # (N,)\n            # dMSE/dp_k = 2/N \u03a3 diff * d yhat/dp_k\n            grad = np.empty_like(p)\n            # \u2202yhat/\u2202w0 = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # \u2202yhat/\u2202w_i_j = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # \u2202yhat/\u2202c = 1\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # bounds: c >= 0 for stability, other parameters unbounded\n        bnds = [(None, None)] * P\n        bnds[-1] = (0.0, None)\n\n        res = minimize(\n            obj,\n            p0,\n            method='L-BFGS-B',\n            jac=jac,\n            bounds=bnds,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initial guess\n            params_opt[t, :] = p0\n\n    # return shape (6,) if single target\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters with a hybrid absolute\u2010\nand relative\u2010error objective for improved generalization and stability.\n\nModel form:\n    y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size))\n         + c\n\nWe fit [w0, w1, w2, w3, w4, c] by minimizing a weighted combination of\nmean\u2010squared error in L-space and mean\u2010squared error in log\u2010L space:\n\n    Obj(p) = \u03bb\u00b7MSE_abs + (1\u2212\u03bb)\u00b7MSE_log\n\nwhere\n    MSE_abs = mean[(y\u0302 \u2212 y)^2]\n    MSE_log = mean[(log(y\u0302+\u03b5) \u2212 log(y+\u03b5))^2]\n\nThis balances absolute and relative errors, improving both nmse/nmae and r\u00b2.\nWe derive analytic gradients and use L-BFGS-B with c \u2265 0.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and scaling\u2010law params.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) or (T,6) array [w0, w1, w2, w3, w4, c]\n    Returns:     (N,) or (N,T) predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {F}\")\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    w0 = p[:, 0]            # (T,)\n    w_i = p[:, 1:-1]        # (T,4)\n    c  = p[:, -1]           # (T,)\n\n    # compute s = w0 + logX \u00b7 w_i^T  => shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law to minimize a hybrid absolute/relative error.\n    Returns optimized params: shape (6,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    logX = np.log(X)  # (N,4)\n    yt = y\n\n    # initial guess for c: small non\u2010negative offset\n    c0 = max(0.0, yt.min() * 0.1)\n    # linearize log-space to obtain initial w0,w_i\n    # log(y - c0) \u2248 w0 + \u03a3 w_i*logX_i\n    z = np.clip(yt - c0, 1e-8, None)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    beta, *_ = np.linalg.lstsq(A, np.log(z), rcond=None)\n    p0 = np.zeros(F + 2, dtype=np.float64)\n    p0[0]      = beta[0]\n    p0[1:-1]   = beta[1:]\n    p0[-1]     = c0\n\n    # objective weights\n    \u03bb = 0.5\n    eps = 1e-8\n\n    def obj(p):\n        w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n        s_ = logX.dot(w_i_) + w0_                   # (N,)\n        exp_s = np.exp(s_)\n        yhat = exp_s + c_\n        # absolute error term\n        diff = yhat - yt\n        mse_abs = np.mean(diff * diff)\n        # log\u2010space error term\n        ld = np.log(yhat + eps) - np.log(yt + eps)\n        mse_log = np.mean(ld * ld)\n        return \u03bb * mse_abs + (1 - \u03bb) * mse_log\n\n    def jac(p):\n        w0_, w_i_, c_ = p[0], p[1:-1], p[-1]\n        s_ = logX.dot(w_i_) + w0_\n        exp_s = np.exp(s_)\n        yhat = exp_s + c_\n\n        diff = yhat - yt                            # (N,)\n        ld = np.log(yhat + eps) - np.log(yt + eps)  # (N,)\n\n        # derivative of yhat wrt params: dy_dw0 = exp_s; dy_dwi = exp_s*logX; dy_dc = 1\n        d0 = exp_s                                  # (N,)\n        di = exp_s[:, None] * logX                  # (N,4)\n        dc = np.ones_like(yhat)                     # (N,)\n\n        # grad_abs = 2/N \u03a3 diff * d yhat/dp\n        grad_abs_w0 = 2.0 * np.mean(diff * d0)\n        grad_abs_wi = 2.0 * np.mean(diff[:,None] * di, axis=0)\n        grad_abs_c  = 2.0 * np.mean(diff * dc)\n\n        # grad_log = 2/N \u03a3 ld * (1/(yhat+eps)) * d yhat/dp\n        inv = 1.0 / (yhat + eps)\n        common = 2.0 * ld * inv\n        grad_log_w0 = np.mean(common * d0)\n        grad_log_wi = np.mean(common[:,None] * di, axis=0)\n        grad_log_c  = np.mean(common * dc)\n\n        # combine\n        grad = np.empty_like(p)\n        grad[0]      = \u03bb * grad_abs_w0 + (1-\u03bb) * grad_log_w0\n        grad[1:-1]   = \u03bb * grad_abs_wi + (1-\u03bb) * grad_log_wi\n        grad[-1]     = \u03bb * grad_abs_c  + (1-\u03bb) * grad_log_c\n        return grad\n\n    # bound c >= 0 for stability\n    bnds = [(None, None)] * (F + 2)\n    bnds[-1] = (0.0, None)\n\n    res = minimize(\n        obj,\n        p0,\n        method='L-BFGS-B',\n        jac=jac,\n        bounds=bnds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if not res.success:\n        # fallback\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```"]}}}