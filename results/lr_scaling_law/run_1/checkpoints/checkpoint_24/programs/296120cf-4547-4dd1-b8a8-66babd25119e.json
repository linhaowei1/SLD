{"id": "296120cf-4547-4dd1-b8a8-66babd25119e", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Loss \u2248 b\n           + exp(\n               logA\n             + e_bsz   * ln(batch_size)\n             + e_data  * ln(data_size)\n             + e_model * ln(non_embedding_param_size)\n             + e_lr1   * ln(lr)\n             + e_lr2   * (ln(lr))^2\n             )\n    This adds a quadratic term in log(lr) to capture the typical U-shaped\n    dependence on learning rate while retaining simple power-law\n    dependencies on the other inputs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # unpack parameters\n    b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2 = np.asarray(params, dtype=np.float64).ravel()\n\n    # unpack and stabilize inputs\n    lr   = X[:, 0] + 1e-12\n    bsz  = X[:, 1] + 1e-12\n    D    = X[:, 2] + 1e-12\n    Np   = X[:, 3] + 1e-12\n\n    # compute the composite log-term\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(Np)\n        + e_lr1   * log_lr\n        + e_lr2   * (log_lr ** 2)\n    )\n\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE with L-BFGS-B.\n    Returns:\n      params: array of length 7 [b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Quick stats for sensible init\n    y_min, y_max = np.min(y), np.max(y)\n\n    # Two diverse initializations to improve convergence\n    init1 = np.array([\n        max(0.0, 0.5 * y_min),       # bias b\n        np.log(max(1e-3, y_max - y_min)),  # logA\n        -0.1,  # e_bsz\n        -0.1,  # e_data\n        -0.1,  # e_model\n         0.0,  # e_lr1\n         0.0   # e_lr2\n    ], dtype=np.float64)\n\n    init2 = np.array([\n         0.0,                       # bias b\n         np.log(max(1e-3, y_max)),  # logA\n        -1.0,  # e_bsz\n        -0.5,  # e_data\n        -0.5,  # e_model\n        -1.0,  # e_lr1\n         1.0   # e_lr2\n    ], dtype=np.float64)\n\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0,       max(1.0, 2.0 * y_max)),  # b \u2265 0\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n        (-5.0,      5.0),                    # e_lr1\n        (-5.0,      5.0)                     # e_lr2\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective,\n                       init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 1000})\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # Fallback if optimization fails\n    if best_params is None:\n        best_params = init1.copy()\n\n    return best_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "170d9a0d-08c6-4198-bbe7-95c7b1adaca3", "generation": 3, "timestamp": 1754803011.032446, "iteration_found": 22, "metrics": {"nmse": 39.83716074702077, "nmae": 8.376024449607689, "r2": -38.83716074702077, "combined_score": 0.024487500641751984}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 65.34761150152974, "nmae": 10.735191412974888, "r2": -64.34761150152974, "combined_score": 0.01507213262646152}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 65.3476\n- nmae: 10.7352\n- r2: -64.3476\n- combined_score: 0.0151\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed_p^{e_model}\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # numerical stability\n    eps = 1e-12\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr  + eps)\n        + e_bsz  * np.log(bsz + eps)\n        + e_data * np.log(D    + eps)\n        + e_model*np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE with bounded L-BFGS-B.\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    # loss range for initializing bias and amplitude\n    y_min, y_max = np.min(y), np.max(y)\n\n    # two candidate initial guesses\n    inits = [\n        np.array([max(0.0, 0.5*y_min), np.log(max(1e-3, y_max - y_min)), -0.5, -0.5, -0.5, -0.5], dtype=float),\n        np.array([0.0,               np.log(max(1e-3, y_max)),         -1.0, -1.0, -0.1, -0.1], dtype=float),\n    ]\n\n    # bounds for parameters\n    bounds = [\n        (0.0,         max(1.0, 2.0*y_max)),  # bias b \u2265 0\n        (None,        None),                 # logA unbounded\n        (-5.0,        5.0),                  # exponent on lr\n        (-5.0,        5.0),                  # exponent on bsz\n        (-5.0,        5.0),                  # exponent on data_size\n        (-5.0,        5.0),                  # exponent on non_embedding_param_size\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2.0)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to first init if optimization fails\n    if best_params is None:\n        best_params = inits[0].copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed_p^{e_model}\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # numerical stability\n    eps = 1e-12\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr  + eps)\n        + e_bsz  * np.log(bsz + eps)\n        + e_data * np.log(D    + eps)\n        + e_model*np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE with bounded L-BFGS-B.\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    # loss range for initializing bias and amplitude\n    y_min, y_max = np.min(y), np.max(y)\n\n    # two candidate initial guesses\n    inits = [\n        np.array([max(0.0, 0.5*y_min), np.log(max(1e-3, y_max - y_min)), -0.5, -0.5, -0.5, -0.5], dtype=float),\n        np.array([0.0,               np.log(max(1e-3, y_max)),         -1.0, -1.0, -0.1, -0.1], dtype=float),\n    ]\n\n    # bounds for parameters\n    bounds = [\n        (0.0,         max(1.0, 2.0*y_max)),  # bias b \u2265 0\n        (None,        None),                 # logA unbounded\n        (-5.0,        5.0),                  # exponent on lr\n        (-5.0,        5.0),                  # exponent on bsz\n        (-5.0,        5.0),                  # exponent on data_size\n        (-5.0,        5.0),                  # exponent on non_embedding_param_size\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2.0)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to first init if optimization fails\n    if best_params is None:\n        best_params = inits[0].copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Loss \u2248 b\n           + exp(\n               logA\n             + e_bsz   * ln(batch_size)\n             + e_data  * ln(data_size)\n             + e_model * ln(non_embedding_param_size)\n             + e_lr1   * ln(lr)\n             + e_lr2   * (ln(lr))^2\n             )\n    This adds a quadratic term in log(lr) to capture the typical U-shaped\n    dependence on learning rate while retaining simple power-law\n    dependencies on the other inputs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # unpack parameters\n    b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2 = np.asarray(params, dtype=np.float64).ravel()\n\n    # unpack and stabilize inputs\n    lr   = X[:, 0] + 1e-12\n    bsz  = X[:, 1] + 1e-12\n    D    = X[:, 2] + 1e-12\n    Np   = X[:, 3] + 1e-12\n\n    # compute the composite log-term\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(Np)\n        + e_lr1   * log_lr\n        + e_lr2   * (log_lr ** 2)\n    )\n\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE with L-BFGS-B.\n    Returns:\n      params: array of length 7 [b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Quick stats for sensible init\n    y_min, y_max = np.min(y), np.max(y)\n\n    # Two diverse initializations to improve convergence\n    init1 = np.array([\n        max(0.0, 0.5 * y_min),       # bias b\n        np.log(max(1e-3, y_max - y_min)),  # logA\n        -0.1,  # e_bsz\n        -0.1,  # e_data\n        -0.1,  # e_model\n         0.0,  # e_lr1\n         0.0   # e_lr2\n    ], dtype=np.float64)\n\n    init2 = np.array([\n         0.0,                       # bias b\n         np.log(max(1e-3, y_max)),  # logA\n        -1.0,  # e_bsz\n        -0.5,  # e_data\n        -0.5,  # e_model\n        -1.0,  # e_lr1\n         1.0   # e_lr2\n    ], dtype=np.float64)\n\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0,       max(1.0, 2.0 * y_max)),  # b \u2265 0\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n        (-5.0,      5.0),                    # e_lr1\n        (-5.0,      5.0)                     # e_lr2\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective,\n                       init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 1000})\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # Fallback if optimization fails\n    if best_params is None:\n        best_params = init1.copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```"]}}}