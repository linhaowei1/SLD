{"id": "e1c5e806-e6e3-4a4c-bfcf-64d9f679dbf6", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined static log\u2010ranges for each feature based on known bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional Chebyshev-polynomial design matrix in normalized log-space.\n    For each sample and feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      [1,\n       z1, z2, z3, z4,             -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),  -- Chebyshev quadratic: 2*z^2 \u2212 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]        -- pairwise interactions\n    Returns an array of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # safe log and normalize\n    logs = np.log(X + _eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) Chebyshev quadratic terms T2(z)=2z^2\u22121\n    cols.append(2.0 * (z**2) - 1.0)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i:i+1] * z[:, j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 15-parameter Chebyshev-polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-polynomial scaling law by adaptive\n    ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,) of lm losses (>0)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A     = _build_design_matrix(X)     # (N,15)\n    y_log = np.log(y + _eps)            # (N,)\n\n    # Normal equations\n    ATA = A.T.dot(A)                    # (15,15)\n    ATy = A.T.dot(y_log)                # (15,)\n\n    # Adaptive ridge regularization \u03bb = 1e-4 * trace(ATA)/P\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if needed\n    cond_thresh = 1e8\n    count = 0\n    cond = np.linalg.cond(ATA_reg)\n    while cond > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3be8a1fd-6cc1-4e14-ae65-30f5f590789f", "generation": 5, "timestamp": 1754804941.853555, "iteration_found": 152, "metrics": {"nmse": 8.218594862826615, "nmae": 3.181234417025846, "r2": -7.218594862826615, "combined_score": 0.10847640175971232}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 154.83886210192472, "nmae": 16.61434522119523, "r2": -153.83886210192472, "combined_score": 0.006416884636554654}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 154.8389\n- nmae: 16.6143\n- r2: -153.8389\n- combined_score: 0.0064\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2186, nmae: 3.1812, r2: -7.2186, combined_score: 0.1085\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0724)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on known hyperparameter bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional design matrix of Chebyshev-polynomial features\n    in normalized log-space. For each sample and each feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    The columns are:\n      [1,\n       z1, z2, z3, z4,             -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),  -- Chebyshev quadratic: 2*z^2 - 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]        -- pairwise interactions\n    Returns an array of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # safe log and normalization\n    logs = np.log(X + _eps)               # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) Chebyshev-quadratic terms: T2(z) = 2 z^2 - 1\n    cols.append(2.0*(z**2) - 1.0)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i:i+1] * z[:,j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 15-parameter Chebyshev-polynomial model:\n      log_loss = A @ \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-polynomial scaling law by adaptive\n    ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 - log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)     # (N,15)\n    y_log = np.log(y + _eps)        # (N,)\n\n    # Normal equations\n    ATA = A.T.dot(A)                # (15,15)\n    ATy = A.T.dot(y_log)            # (15,)\n\n    # Adaptive ridge regularization\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # Ensure conditioning\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2186), Performs well on nmae (3.1812), Performs well on r2 (-7.2186), Performs well on combined_score (0.1085)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010computed log\u2010ranges for each feature to normalize into roughly [\u22121,1]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P        # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize  # kept for compatibility though not used below\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a second-degree polynomial design matrix in normalized log-features.\n    Let z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    # start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms z_i\n    cols.append(z)\n    # quadratic terms z_i^2\n    cols.append(z * z)\n    # pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)         # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)             # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on intercept \u03b80)\n    with \u03bb = 1e-4 * trace(A\u1d40A)/P for scale invariance.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    A = _build_design_matrix(X)         # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # (N,)\n\n    # build normal equations\n    ATA = A.T.dot(A)                    # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P      # adaptive ridge \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                     # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Input:\n      X: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_param_size]\n    Output:\n      A: array of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                 # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize ~[-1,1]\n    N, F = z.shape\n\n    # constant term\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N, 1+4+4+6 =15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)          # shape (N,15)\n    log_pred = A.dot(theta)              # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)          # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)              # shape (N,)\n\n    # normal equations with ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Fixed log\u2010space bounds for normalization\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Pre\u2010compute per\u2010feature mean and half\u2010range in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Features per sample:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010row\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log\n    logs = np.log(X + _eps)                   # (N,4)\n    # normalize\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # (N,4)\n    N, F = z.shape\n\n    # start with intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z * z)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial scaling law:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010row\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    with adaptive \u03bb = 1e-4 * trace(A\u1d40A) / P, no penalty on intercept \u03b80.\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses (>0)\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010row\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # (N,15)\n    y_log = np.log(y + _eps)              # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    count = 0\n    while np.linalg.cond(ATA_reg) > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        count += 1\n\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0724, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on known hyperparameter bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional design matrix of Chebyshev-polynomial features\n    in normalized log-space. For each sample and each feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    The columns are:\n      [1,\n       z1, z2, z3, z4,             -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),  -- Chebyshev quadratic: 2*z^2 - 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]        -- pairwise interactions\n    Returns an array of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # safe log and normalization\n    logs = np.log(X + _eps)               # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) Chebyshev-quadratic terms: T2(z) = 2 z^2 - 1\n    cols.append(2.0*(z**2) - 1.0)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i:i+1] * z[:,j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 15-parameter Chebyshev-polynomial model:\n      log_loss = A @ \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-polynomial scaling law by adaptive\n    ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 - log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)     # (N,15)\n    y_log = np.log(y + _eps)        # (N,)\n\n    # Normal equations\n    ATA = A.T.dot(A)                # (15,15)\n    ATy = A.T.dot(y_log)            # (15,)\n\n    # Adaptive ridge regularization\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # Ensure conditioning\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.219), Excellent nmae (3.181)\n\n\n### Inspiration 2 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 3.6003, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law:\n      log(loss) \u2248 \u03b80\n                 + \u03b81\u00b7log(lr)\n                 + \u03b82\u00b7log(bsz)\n                 + \u03b83\u00b7log(data_size)\n                 + \u03b84\u00b7log(non_embed_param_size)\n                 + \u03b85\u00b7[log(lr)]^2\n                 + \u03b86\u00b7[log(bsz)]^2\n    loss = exp(log(loss))\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 7:\n                   [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]\n    Returns:\n      preds: (N,) ndarray of predicted lm\u2010loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 7:\n        raise ValueError(f\"scaling_law_func: expected params length 7, got {theta.size}\")\n    \n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    l1, l2, l3, l4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n    \n    # build feature matrix: [1, l1, l2, l3, l4, l1^2, l2^2]\n    N = X.shape[0]\n    ones = np.ones((N,), dtype=np.float64)\n    feat = np.column_stack([\n        ones,\n        l1, l2, l3, l4,\n        l1 * l1,\n        l2 * l2\n    ])  # shape (N,7)\n    \n    log_pred = feat.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010quadratic model by ridge\u2010regularized least\u2010squares\n    in log\u2010space:\n      minimize \u2016F \u03b8 \u2212 log(y)\u2016^2 + \u03bb\u00b7\u2016\u03b8_except0\u2016^2\n    where F has columns [1, log(lr), log(bsz), log(data_size), log(non_emb_param),\n                        (log(lr))^2, (log(bsz))^2]\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) of lm\u2010loss (>0)\n      ridge_lambda: regularization strength (default 1e-6)\n    Returns:\n      theta: ndarray of shape (7,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1\u2010D of same length as data_points\")\n    \n    # safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    l1, l2, l3, l4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n    \n    # build design matrix\n    N = X.shape[0]\n    ones = np.ones((N,1), dtype=np.float64)\n    F = np.concatenate([\n        ones,\n        logs,\n        (l1**2)[:,None],\n        (l2**2)[:,None]\n    ], axis=1)  # shape (N,7)\n    \n    y_log = np.log(y + eps)  # (N,)\n    \n    # ridge\u2010reg: do not regularize intercept (\u03b80)\n    P = F.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n    \n    # solve (F\u1d40F + reg) \u03b8 = F\u1d40 y_log\n    lhs = F.T.dot(F) + reg\n    rhs = F.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100.722), Excellent nmae (13.391)\n\n\n### Inspiration 4 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 5 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for each feature in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features: [1, z_i, z_i^2, z_i * z_j for i<j]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z**2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010space:\n      log_loss = A \u00b7 \u03b8,  loss = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A     = _build_design_matrix(X)         # shape (N,15)\n    eps   = 1e-12\n    y_log = np.log(y + eps)                 # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                        # shape (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-6 * np.trace(ATA) / P          # scale \u03bb by data scale\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                          # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A log\u2013polynomial scaling law capturing:\n      - U-shaped dependence on learning rate via a quadratic term\n      - Power-law effects of batch size, data size, and model size\n      - Pairwise interactions between scale and learning rate or scale and model/data size\n\n    Model form in log-domain:\n      \u2113r    = log(lr)\n      \u2113bsz  = log(bsz)\n      \u2113data = log(data_size)\n      \u2113param= log(non_embedding_param_size)\n\n      log_loss = \u03b80\n               + \u03b81 * \u2113r\n               + \u03b82 * \u2113r^2\n               + \u03b83 * \u2113bsz\n               + \u03b84 * \u2113data\n               + \u03b85 * \u2113param\n               + \u03b86 * (\u2113r * \u2113data)\n               + \u03b87 * (\u2113r * \u2113param)\n               + \u03b88 * (\u2113data * \u2113param)\n\n    loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 9 [\u03b80 \u2026 \u03b88]\n    Returns:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got shape {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d79)\n    A = np.column_stack([\n        np.ones_like(lr_log),         # \u03b80\n        lr_log,                       # \u03b81 * \u2113r\n        lr_log**2,                    # \u03b82 * \u2113r^2\n        bsz_log,                      # \u03b83 * \u2113bsz\n        data_log,                     # \u03b84 * \u2113data\n        param_log,                    # \u03b85 * \u2113param\n        lr_log * data_log,            # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,           # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log          # \u03b88 * (\u2113data * \u2113param)\n    ])  # shape (N,9)\n\n    log_pred = A.dot(theta)        # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9-parameter log\u2013polynomial scaling law via ridge-regularized\n    least squares on the log(loss):\n\n      \u03b8 = argmin_\u03b8  ||A \u03b8 \u2212 log(y)||^2 + \u03bb * ||\u03b8_{1:}||^2\n\n    where A is the (N\u00d79) design matrix matching the structure in scaling_law_func.\n\n    Inputs:\n      data_points:  array-like of shape (N,4) [lr, bsz, data_size, non_emb_param_size]\n      loss_values:  array-like of shape (N,) of observed lm losses (>0)\n      ridge_lambda: float, regularization strength (default 1e-6)\n\n    Returns:\n      theta_opt: numpy.ndarray of shape (9,) of fitted parameters [\u03b80\u2026\u03b88]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)      # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    y_log     = np.log(y + eps) # shape (N,)\n\n    # Build design matrix A = [1, \u2113r, \u2113r^2, \u2113bsz, \u2113data, \u2113param, \u2113r*\u2113data, \u2113r*\u2113param, \u2113data*\u2113param]\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])  # shape (N,9)\n\n    # Ridge regularization matrix: penalize all but intercept\n    P = A.shape[1]\n    ATA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(lhs, rhs)\n    return theta_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined static log\u2010ranges for each feature based on known bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional Chebyshev-polynomial design matrix in normalized log-space.\n    For each sample and feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      [1,\n       z1, z2, z3, z4,             -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),  -- Chebyshev quadratic: 2*z^2 \u2212 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]        -- pairwise interactions\n    Returns an array of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # safe log and normalize\n    logs = np.log(X + _eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) Chebyshev quadratic terms T2(z)=2z^2\u22121\n    cols.append(2.0 * (z**2) - 1.0)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i:i+1] * z[:, j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 15-parameter Chebyshev-polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-polynomial scaling law by adaptive\n    ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,) of lm losses (>0)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A     = _build_design_matrix(X)     # (N,15)\n    y_log = np.log(y + _eps)            # (N,)\n\n    # Normal equations\n    ATA = A.T.dot(A)                    # (15,15)\n    ATy = A.T.dot(y_log)                # (15,)\n\n    # Adaptive ridge regularization \u03bb = 1e-4 * trace(ATA)/P\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if needed\n    cond_thresh = 1e8\n    count = 0\n    cond = np.linalg.cond(ATA_reg)\n    while cond > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```"]}}}