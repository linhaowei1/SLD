{"id": "9983eb43-6105-4f09-a2f9-8f7470c3de67", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute per\u2010feature mean and half\u2010range for normalized logs\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a 5-parameter log-linear scaling law:\n      Let z_i = (log(x_i) - mean_i) / half_range_i for each feature i.\n      Then\n         log_loss = \u03b80 + sum_{i=1..4} \u03b8i * z_i\n         loss     = exp(log_loss)\n    inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array-like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects 5 parameters, got {theta.size}\")\n\n    # safe log + normalization\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalized logs in ~[-1,1]\n\n    # linear model in z\n    log_pred = theta[0] + z.dot(theta[1:])    # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log-linear scaling law by ridge-regularized least squares on log(loss):\n        minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8[1:]||^2\n    where A = [1, z1, z2, z3, z4].\n    inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses (>0)\n    returns:\n      theta_opt: (5,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # build normalized\u2010log design matrix\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # (N,4)\n    N = X.shape[0]\n    A = np.hstack([np.ones((N,1), dtype=np.float64), z])  # (N,5)\n\n    # target = log(y)\n    y_log = np.log(y + eps)\n\n    # ridge regularization: no penalty on intercept\n    P = A.shape[1]  # =5\n    lam = 1e-6\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "400265ba-4331-4602-bd69-b83dcf142522", "generation": 4, "timestamp": 1754804225.288117, "iteration_found": 75, "metrics": {"nmse": 112.98815312597898, "nmae": 14.128417588539975, "r2": -111.98815312597898, "combined_score": 0.008772841497789743}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.2376339654398, "nmae": 3.1862533679500347, "r2": -7.2376339654398, "combined_score": 0.10825282791472789}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.2376\n- nmae: 3.1863\n- r2: -7.2376\n- combined_score: 0.1083\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants: mean and half\u2010range\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalized to ~[-1,1]\n    N, F = z.shape\n    feats = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n    return np.stack(feats, axis=1)           # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n    A = _build_design_matrix(X)              # (N,15)\n    log_pred = A.dot(theta)                  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)              # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization\n    P = A.shape[1]                           # 15\n    lam = 1e-4                               # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                         # no penalty on intercept\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute log\u2010space midpoint and half\u2010range for each feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # normalize ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)             # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization (no penalty on intercept)\n    P = A.shape[1]                            # 15\n    lam = 1e-4                                # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # Safe log and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # Build log\u2010loss prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # Safe log\u2010transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n    y_log = np.log(y + eps)\n\n    # Solve (A^T A + \u03bbI) \u03b8 = A^T y_log with small ridge for stability\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # batch size\n    4e9,      # data size (tokens)\n    2.14e8    # non-embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # batch size\n    1e11,     # data size (tokens)\n    1e9       # non-embedding parameter size\n], dtype=np.float64))\n\n# mid-point and half-range of the log\u2010features\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      Let z_i = (log(x_i) - mid_i) / half_range_i for each feature i.\n      Then\n        log_loss = \u03b80\n                 + sum_i \u03b81_i * z_i\n                 + sum_i \u03b82_i * z_i^2\n                 + sum_{i<j} \u03b83_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      flat array of length 1 + 4 + 4 + 6 = 15\n                   [\u03b80,\n                    \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n                    \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n                    \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n                    \u03b83_bsz_data, \u03b83_bsz_param, \u03b83_data_param]\n    Returns:\n      preds: array of shape (N,) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    # Expect 1 intercept + 4 linear terms + 4 quadratic terms + 6 pairwise terms = 15\n    if p.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {p.size}\")\n\n    # unpack\n    \u03b80 = p[0]\n    \u03b81 = p[1:1+4]            # linear coefficients\n    \u03b82 = p[1+4:1+8]          # quadratic coefficients\n    \u03b83 = p[1+8:]             # pairwise coefficients (6 of them)\n\n    # safe log and normalization\n    eps = 1e-12\n    logs = np.log(X + eps)                        # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE        # normalized logs, shape (N,4)\n\n    # compute log prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # add pairwise interaction terms\n    k = 0\n    for i in range(4):\n        for j in range(i+1, 4):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n\n    Returns:\n      params: length\u201015 array [\u03b80, \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n                              \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n                              \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n                              \u03b83_bsz_data, \u03b83_bsz_param, \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # safe log-transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)                          # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE          # (N,4)\n\n    N, F = z.shape  # F should be 4\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,                     # linear terms (N\u00d74)\n            z**2]                  # quadratic terms (N\u00d74)\n\n    # add pairwise cross-terms\n    cross = []\n    for i in range(F):\n        for j in range(i+1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))  # (N\u00d76)\n\n    A = np.hstack(cols)  # shape (N, 15)\n\n    # target is log(loss)\n    y_log = np.log(y + eps)\n\n    # ridge-regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr\n    16.0,      # bsz\n    4e9,       # data_size\n    2.14e8     # non_embedding_param_size\n], dtype=np.float64))\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr\n    4096.0,    # bsz\n    1e11,      # data_size\n    1e9        # non_embedding_param_size\n], dtype=np.float64))\n\n# mid\u2010point and half\u2010range for each feature in log\u2010space\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params: length = 1 (\u03b80) + 4 (linear) + 4 (quadratic) + 6 (cross terms) = 15\n    Order of params:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n\n    # unpack\n    theta0 = p[0]\n    lin_coefs = p[1:1+4]\n    quad_coefs = p[1+4:1+8]\n    cross_coefs = p[1+8:]\n\n    # compute normalized log\u2010features\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE    # normalized to ~[\u22121,1]\n\n    # build log\u2010loss prediction\n    log_pred = theta0 + z.dot(lin_coefs) + (z*z).dot(quad_coefs)\n\n    # add pairwise interaction terms\n    idx = 0\n    for i in range(4):\n        for j in range(i+1, 4):\n            log_pred += cross_coefs[idx] * (z[:, i] * z[:, j])\n            idx += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n\n    Returns a param vector of length 15 matching the layout described in\n    scaling_law_func.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # logs and normalized z\n    logs = np.log(X + eps)                     # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE     # (N,4)\n\n    # build design matrix A with columns:\n    # [1,\n    #  z1, z2, z3, z4,\n    #  z1^2, z2^2, z3^2, z4^2,\n    #  z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    A_cols = [np.ones((N,1), dtype=np.float64)]\n    A_cols.append(z)               # linear\n    A_cols.append(z*z)             # quadratic\n    # pairwise\n    cross = []\n    for i in range(4):\n        for j in range(i+1, 4):\n            cross.append((z[:, i] * z[:, j])[:, None])\n    A_cols.append(np.hstack(cross))\n\n    A = np.hstack(A_cols)          # shape (N,15)\n\n    # target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # ridge regularization\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.9199, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log\u2013polynomial scaling law with cross interactions.\n    Model (in natural-log domain):\n        log L = \u03b80\n              + \u03b81 * lr_log\n              + \u03b82 * bsz_log\n              + \u03b83 * data_log\n              + \u03b84 * param_log\n              + \u03b85 * lr_log^2\n              + \u03b86 * (lr_log * bsz_log)\n              + \u03b87 * (lr_log * data_log)\n              + \u03b88 * (lr_log * param_log)\n              + \u03b89 * (bsz_log * data_log)\n              + \u03b810* (bsz_log * param_log)\n              + \u03b811* (data_log * param_log)\n    where\n        lr_log     = log(lr)\n        bsz_log    = log(bsz)\n        data_log   = log(data_size)\n        param_log  = log(non_embedding_param_size)\n    Returns exp(log L).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 12 [\u03b80 \u2026 \u03b811]\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    # Build design matrix with 12 features\n    # 1, lr_log, bsz_log, data_log, param_log,\n    # lr_log^2,\n    # lr_log * bsz_log, lr_log * data_log, lr_log * param_log,\n    # bsz_log * data_log, bsz_log * param_log, data_log * param_log\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 12-parameter log\u2013polynomial scaling law via ridge-regularized least squares\n    on the log-transformed loss:\n        \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb * ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed losses\n      ridge_lambda:       regularization strength (default 1e-3)\n    Output:\n      theta_opt: (12,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points.\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    y_log = np.log(y + eps)\n    \n    P = A.shape[1]\n    # Ridge regularization matrix: no penalty on intercept\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    \n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    \n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (202.931), Excellent nmae (18.675)\n\n\n### Inspiration 2 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # batch size\n    4e9,      # data size (tokens)\n    2.14e8    # non-embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # batch size\n    1e11,     # data size (tokens)\n    1e9       # non-embedding parameter size\n], dtype=np.float64))\n\n# mid-point and half-range of the log\u2010features\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      Let z_i = (log(x_i) - mid_i) / half_range_i for each feature i.\n      Then\n        log_loss = \u03b80\n                 + sum_i \u03b81_i * z_i\n                 + sum_i \u03b82_i * z_i^2\n                 + sum_{i<j} \u03b83_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      flat array of length 1 + 4 + 4 + 6 = 15\n                   [\u03b80,\n                    \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n                    \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n                    \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n                    \u03b83_bsz_data, \u03b83_bsz_param, \u03b83_data_param]\n    Returns:\n      preds: array of shape (N,) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    # Expect 1 intercept + 4 linear terms + 4 quadratic terms + 6 pairwise terms = 15\n    if p.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {p.size}\")\n\n    # unpack\n    \u03b80 = p[0]\n    \u03b81 = p[1:1+4]            # linear coefficients\n    \u03b82 = p[1+4:1+8]          # quadratic coefficients\n    \u03b83 = p[1+8:]             # pairwise coefficients (6 of them)\n\n    # safe log and normalization\n    eps = 1e-12\n    logs = np.log(X + eps)                        # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE        # normalized logs, shape (N,4)\n\n    # compute log prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # add pairwise interaction terms\n    k = 0\n    for i in range(4):\n        for j in range(i+1, 4):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n\n    Returns:\n      params: length\u201015 array [\u03b80, \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n                              \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n                              \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n                              \u03b83_bsz_data, \u03b83_bsz_param, \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # safe log-transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)                          # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE          # (N,4)\n\n    N, F = z.shape  # F should be 4\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,                     # linear terms (N\u00d74)\n            z**2]                  # quadratic terms (N\u00d74)\n\n    # add pairwise cross-terms\n    cross = []\n    for i in range(F):\n        for j in range(i+1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))  # (N\u00d76)\n\n    A = np.hstack(cols)  # shape (N, 15)\n\n    # target is log(loss)\n    y_log = np.log(y + eps)\n\n    # ridge-regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 3 (Score: 1.9824, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A compact normalized\u2010log polynomial scaling law:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + \u03b81*z_lr + \u03b82*z_bsz + \u03b83*z_data + \u03b84*z_param\n               + \u03b85*z_lr^2 + \u03b86*z_bsz^2 + \u03b87*z_data^2 + \u03b88*z_param^2\n               + \u03b89*(z_lr*z_data) + \u03b810*(z_lr*z_param)\n      loss = exp(log_loss)\n\n    params: length\u201011 array [\u03b80 \u2026 \u03b810].\n    data_points: shape (N,4) with columns [lr, bsz, data_size, non_embed_param_size].\n    Returns: (N,) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {theta.size}\")\n\n    # Safe log transform and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n    z_lr, z_bsz, z_data, z_param = z.T\n\n    # Build design matrix\n    A = np.column_stack([\n        np.ones(N),           # \u03b80\n        z_lr,                 # \u03b81\n        z_bsz,                # \u03b82\n        z_data,               # \u03b83\n        z_param,              # \u03b84\n        z_lr * z_lr,          # \u03b85\n        z_bsz * z_bsz,        # \u03b86\n        z_data * z_data,      # \u03b87\n        z_param * z_param,    # \u03b88\n        z_lr * z_data,        # \u03b89\n        z_lr * z_param        # \u03b810\n    ])                       # shape (N,11)\n\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter normalized\u2010log polynomial scaling law via\n    ridge\u2010regularized least squares on log(loss). No penalty on \u03b80.\n    Returns optimized params of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Safe log transform and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n    z_lr, z_bsz, z_data, z_param = z.T\n\n    # Build design matrix A (N\u00d711)\n    A = np.column_stack([\n        np.ones(N),           # \u03b80\n        z_lr,                 # \u03b81\n        z_bsz,                # \u03b82\n        z_data,               # \u03b83\n        z_param,              # \u03b84\n        z_lr * z_lr,          # \u03b85\n        z_bsz * z_bsz,        # \u03b86\n        z_data * z_data,      # \u03b87\n        z_param * z_param,    # \u03b88\n        z_lr * z_data,        # \u03b89\n        z_lr * z_param        # \u03b810\n    ])                       # shape (N,11)\n\n    y_log = np.log(y + eps)\n\n    # Ridge regularization matrix (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize \u03b80\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (27.686), Excellent nmae (6.895)\n\n\n### Inspiration 4 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n### Inspiration 5 (Score: 2.1593, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM training:\n  loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embedding_param_size^{e_N}\nwith A = exp(logA). Fit by a two\u2010stage procedure:\n  1) Closed\u2010form log\u2010linear fit for initialization\n  2) Bounded L-BFGS-B refinement minimizing MSE\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a bias + multiplicative power law.\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # safe logs\n    eps = 1e-12\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by:\n      1) closed-form log-linear regression for init\n      2) bounded L-BFGS-B refinement minimizing MSE\n    Returns:\n      params: array of shape (6,) or (T,6) if multi-target\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # ensure 2D for multi-target\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    # prepare for log-linear init\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    A_lin = np.concatenate([np.ones((N,1)), logs], axis=1)  # (N,5)\n    # small ridge for stability\n    ridge = 1e-6\n    AtA = A_lin.T.dot(A_lin) + ridge * np.eye(5)\n\n    def _fit_one(y_vec):\n        # 1) init bias\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, 0.5 * y_min)\n        # 2) shift target and log\n        y_shift = np.clip(y_vec - b0, eps, None)\n        theta_lin = np.linalg.solve(AtA, A_lin.T.dot(np.log(y_shift)))\n        # assemble init params: [b, logA, e_lr, e_bsz, e_D, e_N]\n        init = np.empty(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_lin\n        # 3) bounds\n        bounds = [\n            (0.0, max(1.0, 2.0*y_max)),  # b \u2265 0\n            (None, None),                # logA\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_data\n            (-5.0, 5.0),                 # e_model\n        ]\n        # objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n        # 4) optimize\n        result = minimize(obj, init, method='L-BFGS-B', bounds=bounds,\n                          options={'maxiter':500, 'ftol':1e-12})\n        if result.success:\n            return result.x\n        else:\n            return init\n\n    # fit each target dimension\n    params = [ _fit_one(y2d[:,i]) for i in range(T) ]\n    params = np.stack(params, axis=0)  # shape (T,6)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.554), Excellent nmae (7.608)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants: mean and half\u2010range\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalized to ~[-1,1]\n    N, F = z.shape\n    feats = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n    return np.stack(feats, axis=1)           # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n    A = _build_design_matrix(X)              # (N,15)\n    log_pred = A.dot(theta)                  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)              # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization\n    P = A.shape[1]                           # 15\n    lam = 1e-4                               # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                         # no penalty on intercept\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a leaner 5-parameter power\u2010law (\u201clog-linear\u201d) model that should generalize better, especially when extrapolating to large model or data scales.  We normalize each log-feature into roughly [\u22121,1] using the same ranges as before, fit only an intercept plus four linear terms, and use a small ridge penalty for numerical stability.\n\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute per\u2010feature mean and half\u2010range for normalized logs\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a 5-parameter log-linear scaling law:\n      Let z_i = (log(x_i) - mean_i) / half_range_i for each feature i.\n      Then\n         log_loss = \u03b80 + sum_{i=1..4} \u03b8i * z_i\n         loss     = exp(log_loss)\n    inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array-like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects 5 parameters, got {theta.size}\")\n\n    # safe log + normalization\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalized logs in ~[-1,1]\n\n    # linear model in z\n    log_pred = theta[0] + z.dot(theta[1:])    # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log-linear scaling law by ridge-regularized least squares on log(loss):\n        minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8[1:]||^2\n    where A = [1, z1, z2, z3, z4].\n    inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses (>0)\n    returns:\n      theta_opt: (5,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # build normalized\u2010log design matrix\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # (N,4)\n    N = X.shape[0]\n    A = np.hstack([np.ones((N,1), dtype=np.float64), z])  # (N,5)\n\n    # target = log(y)\n    y_log = np.log(y + eps)\n\n    # ridge regularization: no penalty on intercept\n    P = A.shape[1]  # =5\n    lam = 1e-6\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\nExplanation of changes:\n\n\u2022 We collapse all features into a **single log-linear term** (plus intercept) instead of a full quadratic and interaction basis.  This yields only 5 parameters rather than 15, greatly improving robustness with limited data.  \n\u2022 Each raw feature is first \u201c**normalized**\u201d in log-space to \u00b11 using the pre-specified min/max.  This keeps the design matrix well-conditioned.  \n\u2022 We fit by **ridge-regularized least squares** on `log(loss)` (no penalty on the intercept).  A tiny \u03bb=1e-6 ensures numerical stability without significant bias.  \n\u2022 At prediction time we simply exponentiate the resulting log-loss.  \n\nThis leaner model tends to extrapolate more smoothly at large data or model scales, improving generalization and often lowering NMSE/NMAE on held-out high-scale points."]}}}