{"id": "e9f8bd7b-dc0d-4f52-99d6-0df9fd1ca05b", "code": "import numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to initial guess\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law model for LM loss:\n      log_term = intercept + slopes\u00b7log(features)\n      log_pred = logaddexp(log_term, u_floor)\n      loss_pred = exp(log_pred)\n    where features = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4) (or shape (4,) for a single point)\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                     params[...,0] = intercept\n                     params[...,1:5] = slopes for [lr, bsz, data_size, param_size]\n                     params[...,5] = u_floor = log(floor)\n\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # unify to shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]       # (T,)\n    slopes    = p[:, 1:5]     # (T,4)\n    u_floor   = p[:, 5]       # (T,)\n\n    # compute log_term = intercept + logX\u00b7slopes^T => shape (N,T)\n    log_term = logX.dot(slopes.T) + intercept[None, :]\n    # combine with floor in log-space\n    log_pred = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(log_pred)  # shape (N,T)\n\n    # if only one param\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter floor\u2010augmented power\u2010law by minimizing\n      mean((logaddexp(intercept + slopes\u00b7logX, u_floor) - log(y))^2)\n    with light ridge penalty on intercept and slopes.\n\n    Returns:\n      params: 1D array length 6 = [intercept, a_lr, a_bsz, a_data, a_param, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)    # (N,4)\n    logy = np.log(yc)    # (N,)\n\n    N = X.shape[0]\n    # Stage 1: OLS in log-space (ignore floor) to initialize intercept & slopes\n    A_lin = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A_lin, logy, rcond=None)\n    intercept0 = w_lin[0]\n    slopes0    = w_lin[1:]       # (4,)\n    # initialize floor as small fraction of observed min loss\n    floor0 = max(np.min(yc) * 0.05, eps)\n    u0 = np.log(floor0)\n\n    # initial parameter vector p0 = [intercept, slopes..., u_floor]\n    p0 = np.concatenate([[intercept0], slopes0, [u0]])  # (6,)\n\n    # regularization strength (only on intercept & slopes, not on floor)\n    lambda_reg = 1e-4\n\n    def _obj(p):\n        b = p[0]\n        w = p[1:5]\n        uf = p[5]\n        lt = logX.dot(w) + b          # (N,)\n        pll = np.logaddexp(lt, uf)    # (N,)\n        res = pll - logy\n        mse = np.mean(res * res)\n        # penalize intercept & slopes, not floor\n        reg = lambda_reg * (b*b + np.sum(w*w))\n        return mse + reg\n\n    if _HAVE_MINIMIZE:\n        res = minimize(_obj, p0,\n                       method='L-BFGS-B',\n                       options={'maxiter': 1000, 'ftol': 1e-9, 'gtol': 1e-6})\n        if res.success:\n            return res.x\n    # fallback or if optimizer not available/failed\n    return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b692b2ec-2b1e-4103-89b9-63f8f7ebbd00", "generation": 3, "timestamp": 1754802402.3038757, "iteration_found": 69, "metrics": {"nmse": 57.438652332666265, "nmae": 10.001791915326326, "r2": -56.438652332666265, "combined_score": 0.017111962033406033}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 109.14299689245415, "nmae": 13.935536910853266, "r2": -108.14299689245415, "combined_score": 0.009079106508936017}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 109.1430\n- nmae: 13.9355\n- r2: -108.1430\n- combined_score: 0.0091\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 4.5452, nmae: 2.5458, r2: -3.5452, combined_score: 0.1803\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9315)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to the initial linear\u2010power\u2010law solution\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010floor power\u2010law:\n      loss_pred = floor + exp(intercept + w\u00b7log(features))\n    where features = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      shape (6,) or (T,6):\n                   params[...,0] = intercept\n                   params[...,1:5] = slopes for log\u2010features\n                   params[...,5] = log(floor)\n\n    Returns:\n      If params is (6,), returns shape (N,) predicted losses.\n      If params is (T,6), returns shape (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # unify to (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]       # (T,)\n    slopes    = p[:, 1:5]     # (T,4)\n    u_floor   = p[:, 5]       # (T,)\n\n    # compute log_term = intercept + w\u00b7logX, shape (N,T)\n    log_term = logX.dot(slopes.T) + intercept[None, :]\n    # combine with floor in log\u2010space: logaddexp(log_term, u_floor)\n    # so exp(pred_log) = exp(log_term) + exp(u_floor)\n    log_pred = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(log_pred)  # (N,T)\n\n    # if only one param\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model by minimizing MSE in log\u2010loss domain plus ridge regularization:\n      minimize mean((logaddexp(intercept + w\u00b7logX, u_floor) - log(y))^2)\n              + \u03bb * ||params||^2\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # prepare log\u2010features and log\u2010targets\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)   # (N,4)\n    logy = np.log(yc)   # (N,)\n\n    N = X.shape[0]\n    F = 4\n\n    # Stage 1: linear fit in log\u2010space to get intercept & slopes\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    intercept0 = w_lin[0]\n    slopes0    = w_lin[1:]\n    # initialize floor as small fraction of min observed loss\n    floor0 = max(np.min(yc) * 0.05, eps)\n    u0 = np.log(floor0)\n\n    p0 = np.concatenate([[intercept0], slopes0, [u0]])  # (6,)\n\n    # objective: MSE in log\u2010domain + ridge\n    lambda_reg = 1e-3\n    def _obj(p):\n        b = p[0]\n        w = p[1:1+F]\n        uf = p[-1]\n        lt = logX.dot(w) + b\n        pll = np.logaddexp(lt, uf)\n        res = pll - logy\n        mse = np.mean(res*res)\n        reg = lambda_reg * np.sum(p*p)\n        return mse + reg\n\n    # optimize\n    if _HAVE_MINIMIZE:\n        res = minimize(_obj, p0,\n                       method='L-BFGS-B',\n                       options={'maxiter':1000, 'ftol':1e-9, 'gtol':1e-6})\n        return res.x if res.success else p0\n    else:\n        # fallback: return initial approximate parameters\n        return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.5452), Performs well on nmae (2.5458), Performs well on r2 (-3.5452), Performs well on combined_score (0.1803)\n\n\n### Program 2 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n### Program 3 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.1549)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LLM loss from hyperparameters using a simple additive\u2010floor power\u2010law:\n      loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                         + a3*log(data_size) + a4*log(non_embedding_param_size))\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (floor, >=0)\n                   params[...,1] = a0 (intercept in log\u2010space)\n                   params[...,2:] = [a1, a2, a3, a4] (slopes in log\u2010space)\n\n    Returns:\n      preds: if params is 1D, returns (N,) array of predicted losses;\n             if params is 2D (T,6), returns (N,T) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Avoid log of zero\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]           # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0    = p[:, 0]          # (T,)\n        a0    = p[:, 1]          # (T,)\n        slopes = p[:, 2:]        # (T,4)\n        # compute log_pred: (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter additive\u2010floor scaling law by minimizing MSE:\n      minimize mean[(c0 + exp(a0 + sum ai*log(xi)) - y)^2]\n    using L-BFGS-B with bound c0 >= 0.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters.\n      loss_values: (N,) array of observed LM losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)  # (N,4)\n\n    # Objective: mean squared error\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y\n        return np.mean(err * err)\n\n    # Initialize parameters\n    y_min, y_max = y.min(), y.max()\n    # c0 init as a small fraction of the minimum loss\n    c0_init = max(0.0, 0.3 * y_min)\n    # ensure exp(a0) roughly matches y_max - c0_init\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.hstack(([c0_init, a0_init], np.zeros(4, dtype=float)))\n\n    # Bounds: c0 >= 0, others unbounded\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(\n        _mse,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n    if res.success:\n        return res.x\n    # fallback to the initialization\n    return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.0976)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss.\n\nWe retain the familiar power\u2010law form\n   L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\n\nImprovements over the naive implementation:\n  1. Numerically stable linear algebra via ridge (Tikhonov) regularization\n     when fitting in log\u2010space: avoids ill\u2010conditioning on skewed hyperparameter scales.\n  2. Unified, concise handling of both single\u2010 and multi\u2010set parameter arrays.\n  3. Minimal eps added to logs to ensure safety without noticeable bias.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law scaling law.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length >=5: [a0, a1, a2, a3, a4, ...]\n        - or 2D array of shape (T, >=5) for T independent models in parallel.\n\n    Returns:\n      If params is 1D: returns array of shape (N,)\n      If params is 2D: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    # Take logs safely\n    eps = 1e-12\n    logX = np.log(X + eps)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size < 5:\n            raise ValueError(f\"params must have at least 5 elements, got {p.size}\")\n        a0 = p[0]\n        slopes = p[1:5]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P < 5:\n            raise ValueError(f\"params must have at least 5 columns, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:5]        # shape (T,4)\n        # compute for each t in T: log_pred[:,t] = a0[t] + logX @ slopes[t]\n        # which is logX @ slopes.T  + a0[None,:]\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear (power\u2010law) model via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || A @ p - log(y) ||^2 + \u03bb ||p||^2\n      where A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n\n    # Logs with tiny epsilon for safety\n    eps = 1e-12\n    logX = np.log(X + eps)    # shape (N,4)\n    logy = np.log(y + eps)    # shape (N,)\n\n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    D = A.shape[1]\n\n    # Compute normal equations with ridge regularization\n    #   (A^T A + \u03bb I) p = A^T logy\n    H = A.T.dot(A)                     # shape (5,5)\n    # Choose \u03bb relative to average scale of H\n    trace_H = np.trace(H)\n    lam = 1e-6 * (trace_H / D)         # small regularization\n    rhs = A.T.dot(logy)                # shape (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(H + lam * np.eye(D), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9315, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to the initial linear\u2010power\u2010law solution\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010floor power\u2010law:\n      loss_pred = floor + exp(intercept + w\u00b7log(features))\n    where features = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      shape (6,) or (T,6):\n                   params[...,0] = intercept\n                   params[...,1:5] = slopes for log\u2010features\n                   params[...,5] = log(floor)\n\n    Returns:\n      If params is (6,), returns shape (N,) predicted losses.\n      If params is (T,6), returns shape (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # unify to (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]       # (T,)\n    slopes    = p[:, 1:5]     # (T,4)\n    u_floor   = p[:, 5]       # (T,)\n\n    # compute log_term = intercept + w\u00b7logX, shape (N,T)\n    log_term = logX.dot(slopes.T) + intercept[None, :]\n    # combine with floor in log\u2010space: logaddexp(log_term, u_floor)\n    # so exp(pred_log) = exp(log_term) + exp(u_floor)\n    log_pred = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(log_pred)  # (N,T)\n\n    # if only one param\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model by minimizing MSE in log\u2010loss domain plus ridge regularization:\n      minimize mean((logaddexp(intercept + w\u00b7logX, u_floor) - log(y))^2)\n              + \u03bb * ||params||^2\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # prepare log\u2010features and log\u2010targets\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)   # (N,4)\n    logy = np.log(yc)   # (N,)\n\n    N = X.shape[0]\n    F = 4\n\n    # Stage 1: linear fit in log\u2010space to get intercept & slopes\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    intercept0 = w_lin[0]\n    slopes0    = w_lin[1:]\n    # initialize floor as small fraction of min observed loss\n    floor0 = max(np.min(yc) * 0.05, eps)\n    u0 = np.log(floor0)\n\n    p0 = np.concatenate([[intercept0], slopes0, [u0]])  # (6,)\n\n    # objective: MSE in log\u2010domain + ridge\n    lambda_reg = 1e-3\n    def _obj(p):\n        b = p[0]\n        w = p[1:1+F]\n        uf = p[-1]\n        lt = logX.dot(w) + b\n        pll = np.logaddexp(lt, uf)\n        res = pll - logy\n        mse = np.mean(res*res)\n        reg = lambda_reg * np.sum(p*p)\n        return mse + reg\n\n    # optimize\n    if _HAVE_MINIMIZE:\n        res = minimize(_obj, p0,\n                       method='L-BFGS-B',\n                       options={'maxiter':1000, 'ftol':1e-9, 'gtol':1e-6})\n        return res.x if res.success else p0\n    else:\n        # fallback: return initial approximate parameters\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.545), Excellent nmae (2.546)\n\n\n### Inspiration 2 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 2.7547, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to initial guess\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor-augmented power-law model for LM loss:\n      log_pred = logaddexp(intercept + slopes\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n\n    Inputs:\n      data_points: array (N,4) of positive hyperparameters\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6, or 2D array (T,6) for T parallel fits\n                   params[...,0] = intercept\n                   params[...,1:5] = slopes for [lr, bsz, data_size, param_size]\n                   params[...,5] = u_floor = log(floor)\n\n    Returns:\n      If params is shape (6,): returns (N,) predicted losses\n      If params is shape (T,6): returns (N,T) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # unify to shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]        # (T,)\n    slopes    = p[:, 1:5]      # (T,4)\n    u_floor   = p[:, 5]        # (T,)\n\n    # compute log_term = intercept + logX\u00b7slopes^T  => (N,T)\n    log_term = logX.dot(slopes.T) + intercept[None, :]\n    # combine with floor in log-space\n    # logaddexp(a,b) = log(exp(a) + exp(b))\n    pred_log = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(pred_log)  # (N,T)\n\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor-augmented power-law by minimizing\n      mean((logaddexp(intercept + slopes\u00b7logX, u_floor) - log(y))^2)\n    with a small ridge penalty.\n\n    Returns:\n      params: 1D array length 6 = [intercept, a_lr, a_bsz, a_data, a_param, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)    # (N,4)\n    logy = np.log(yc)    # (N,)\n\n    N = X.shape[0]\n\n    # Initial linear fit in log-space (ignore floor) to get intercept & slopes\n    A_lin = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A_lin, logy, rcond=None)\n    intercept0 = w_lin[0]\n    slopes0    = w_lin[1:]      # (4,)\n\n    # initialize floor as small fraction of min observed loss\n    y_min = np.min(yc)\n    floor0 = max(y_min * 0.05, eps)\n    u0 = np.log(floor0)\n\n    # initial parameter vector\n    p0 = np.concatenate([[intercept0], slopes0, [u0]])  # (6,)\n\n    # regularization strength\n    lambda_reg = 1e-4\n\n    # objective: MSE in log-space + ridge on slopes & intercept\n    def _obj(p):\n        b = p[0]\n        w = p[1:5]\n        uf = p[5]\n        lt = logX.dot(w) + b             # shape (N,)\n        pll = np.logaddexp(lt, uf)       # shape (N,)\n        res = pll - logy\n        mse = np.mean(res*res)\n        # penalize intercept and slopes lightly, not floor\n        reg = lambda_reg * (b*b + np.sum(w*w))\n        return mse + reg\n\n    # try to refine with L-BFGS-B if available\n    if _HAVE_MINIMIZE:\n        # no bounds needed; allow free parameters\n        res = minimize(_obj, p0, method='L-BFGS-B',\n                       options={'maxiter':1000, 'ftol':1e-9, 'gtol':1e-6})\n        if res.success:\n            return res.x\n    # fallback to initial guess if optimizer unavailable or failed\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (57.439), Excellent nmae (10.002)\n\n\n### Inspiration 4 (Score: 2.0976, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss.\n\nWe retain the familiar power\u2010law form\n   L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\n\nImprovements over the naive implementation:\n  1. Numerically stable linear algebra via ridge (Tikhonov) regularization\n     when fitting in log\u2010space: avoids ill\u2010conditioning on skewed hyperparameter scales.\n  2. Unified, concise handling of both single\u2010 and multi\u2010set parameter arrays.\n  3. Minimal eps added to logs to ensure safety without noticeable bias.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law scaling law.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length >=5: [a0, a1, a2, a3, a4, ...]\n        - or 2D array of shape (T, >=5) for T independent models in parallel.\n\n    Returns:\n      If params is 1D: returns array of shape (N,)\n      If params is 2D: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    # Take logs safely\n    eps = 1e-12\n    logX = np.log(X + eps)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size < 5:\n            raise ValueError(f\"params must have at least 5 elements, got {p.size}\")\n        a0 = p[0]\n        slopes = p[1:5]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P < 5:\n            raise ValueError(f\"params must have at least 5 columns, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:5]        # shape (T,4)\n        # compute for each t in T: log_pred[:,t] = a0[t] + logX @ slopes[t]\n        # which is logX @ slopes.T  + a0[None,:]\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear (power\u2010law) model via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || A @ p - log(y) ||^2 + \u03bb ||p||^2\n      where A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n\n    # Logs with tiny epsilon for safety\n    eps = 1e-12\n    logX = np.log(X + eps)    # shape (N,4)\n    logy = np.log(y + eps)    # shape (N,)\n\n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    D = A.shape[1]\n\n    # Compute normal equations with ridge regularization\n    #   (A^T A + \u03bb I) p = A^T logy\n    H = A.T.dot(A)                     # shape (5,5)\n    # Choose \u03bb relative to average scale of H\n    trace_H = np.trace(H)\n    lam = 1e-6 * (trace_H / D)         # small regularization\n    rhs = A.T.dot(logy)                # shape (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(H + lam * np.eye(D), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (31.886), Excellent nmae (7.360)\n\n\n### Inspiration 5 (Score: 3.5526, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LLM loss using an extended log\u2010quadratic scaling law with an\n    lr\u2013bsz interaction term:\n    \n    log L = p0\n          + p1\u00b7log(lr) + p2\u00b7log(bsz)\n          + p3\u00b7log(data_size) + p4\u00b7log(param_size)\n          + p5\u00b7[log(lr)]^2 + p6\u00b7[log(bsz)]^2\n          + p7\u00b7[log(lr)\u00b7log(bsz)]\n    \n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) or (T,8).  If 2D, T parallel\n                   parameter sets.\n    \n    Outputs:\n      If params is (8,), returns (N,) array of predicted losses.\n      If params is (T,8), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    \n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lr, bsz, data_sz, param_sz = X_clipped.T\n\n    # Log\u2010transform\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # Build design matrix phi of shape (N, 8)\n    ones = np.ones_like(log_lr)\n    phi = np.stack([\n        ones,\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        if p.shape[0] != phi.shape[1]:\n            raise ValueError(f\"Expected params length {phi.shape[1]}, got {p.shape[0]}\")\n        log_pred = phi.dot(p)\n        return np.exp(log_pred)\n\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != phi.shape[1]:\n            raise ValueError(f\"Expected params.shape[1]=={phi.shape[1]}, got {P}\")\n        # phi @ p.T yields shape (N, T)\n        log_pred = phi.dot(p.T)\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log\u2010quadratic scaling law via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || phi @ p - log(loss) ||^2 + \u03bb\u00b7||p_excluding_intercept||^2\n\n    where phi has columns\n      [1, log(lr), log(bsz), log(data_size), log(param_size),\n       (log lr)^2, (log bsz)^2, (log lr\u00b7log bsz)].\n\n    Returns:\n      params: 1D array of length 8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    lr, bsz, data_sz, param_sz = X_clipped.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n    logy      = np.log(y_clipped)\n\n    # Build design matrix phi (N,8)\n    ones = np.ones_like(log_lr)\n    phi = np.stack([\n        ones,\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    # Ridge regularization parameter (scaled by N)\n    N, F = phi.shape\n    lam = 1e-6 * N\n\n    # Build normal equations: (phi^T phi + lam\u00b7R) p = phi^T logy\n    # R is identity but do not regularize intercept term\n    R = np.eye(F, dtype=float)\n    R[0, 0] = 0.0\n\n    A = phi.T.dot(phi) + lam * R\n    b = phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (98.146), Excellent nmae (13.200)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a log-quadratic scaling law:\n      log(L) = a0 \n             + a1 * log(lr) \n             + a2 * (log(lr))^2 \n             + a3 * log(bsz) \n             + a4 * log(data_size) \n             + a5 * log(non_embedding_param_size)\n    Loss = exp(log(L)).\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                     params[...,0] = a0\n                     params[...,1] = a1\n                     params[...,2] = a2\n                     params[...,3] = a3\n                     params[...,4] = a4\n                     params[...,5] = a5\n\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log of zero or negative\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n\n    # build feature matrix F: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        log_pred = F.dot(p)\n        return np.exp(log_pred)\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-quadratic scaling law via ridge\u2010regularized least squares:\n      minimize ||F @ a - log(y)||^2 + \u03bb * sum_{i>0} a_i^2\n    where F = [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)].\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # avoid log of zero or negative\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    y_c = np.clip(y, eps, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(y_c)\n\n    # build feature matrix F: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n\n    # ridge regularization (exclude intercept from penalty)\n    lam = 1e-6\n    ATA = F.T.dot(F)\n    # add \u03bb to diagonal entries for slope terms only\n    for i in range(1, ATA.shape[0]):\n        ATA[i, i] += lam\n    ATy = F.T.dot(logy)\n\n    # solve (F^T F + \u03bbR) a = F^T logy\n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to initial guess\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law model for LM loss:\n      log_term = intercept + slopes\u00b7log(features)\n      log_pred = logaddexp(log_term, u_floor)\n      loss_pred = exp(log_pred)\n    where features = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4) (or shape (4,) for a single point)\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                     params[...,0] = intercept\n                     params[...,1:5] = slopes for [lr, bsz, data_size, param_size]\n                     params[...,5] = u_floor = log(floor)\n\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # clamp to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # unify to shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]       # (T,)\n    slopes    = p[:, 1:5]     # (T,4)\n    u_floor   = p[:, 5]       # (T,)\n\n    # compute log_term = intercept + logX\u00b7slopes^T => shape (N,T)\n    log_term = logX.dot(slopes.T) + intercept[None, :]\n    # combine with floor in log-space\n    log_pred = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(log_pred)  # shape (N,T)\n\n    # if only one param\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter floor\u2010augmented power\u2010law by minimizing\n      mean((logaddexp(intercept + slopes\u00b7logX, u_floor) - log(y))^2)\n    with light ridge penalty on intercept and slopes.\n\n    Returns:\n      params: 1D array length 6 = [intercept, a_lr, a_bsz, a_data, a_param, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)    # (N,4)\n    logy = np.log(yc)    # (N,)\n\n    N = X.shape[0]\n    # Stage 1: OLS in log-space (ignore floor) to initialize intercept & slopes\n    A_lin = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    w_lin, *_ = np.linalg.lstsq(A_lin, logy, rcond=None)\n    intercept0 = w_lin[0]\n    slopes0    = w_lin[1:]       # (4,)\n    # initialize floor as small fraction of observed min loss\n    floor0 = max(np.min(yc) * 0.05, eps)\n    u0 = np.log(floor0)\n\n    # initial parameter vector p0 = [intercept, slopes..., u_floor]\n    p0 = np.concatenate([[intercept0], slopes0, [u0]])  # (6,)\n\n    # regularization strength (only on intercept & slopes, not on floor)\n    lambda_reg = 1e-4\n\n    def _obj(p):\n        b = p[0]\n        w = p[1:5]\n        uf = p[5]\n        lt = logX.dot(w) + b          # (N,)\n        pll = np.logaddexp(lt, uf)    # (N,)\n        res = pll - logy\n        mse = np.mean(res * res)\n        # penalize intercept & slopes, not floor\n        reg = lambda_reg * (b*b + np.sum(w*w))\n        return mse + reg\n\n    if _HAVE_MINIMIZE:\n        res = minimize(_obj, p0,\n                       method='L-BFGS-B',\n                       options={'maxiter': 1000, 'ftol': 1e-9, 'gtol': 1e-6})\n        if res.success:\n            return res.x\n    # fallback or if optimizer not available/failed\n    return p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n\u2022 Introduced an additive \u201cfloor\u201d parameter in log-space (u_floor) to capture irreducible loss.  \n\u2022 Used numerically stable logaddexp to blend the main power-law term and the floor.  \n\u2022 Initialized via ordinary least squares in log-space, then refined with L-BFGS-B.  \n\u2022 Applied light ridge regularization only on intercept and slopes to prevent overfitting.  \n\u2022 Robust handling of single\u2010sample inputs and safety epsilons to avoid log(0)."]}}}