{"id": "779eeca8-d9e9-4591-833e-4ff11ab44ce0", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended\n    multiplicative power\u2010law in log\u2010space with quadratic terms:\n      log(loss) = \u03b80 \n                  + \u03a3_i w_i * log(x_i) \n                  + \u03a3_i v_i * (log(x_i))^2\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (1 + 4 + 4,) =\n                    [\u03b80, w_lr, w_bsz, w_data, w_param,\n                          v_lr, v_bsz, v_data, v_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid zeros or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # compute log\u2010features\n    logX  = np.log(X)                 # (N,4)\n    quadX = logX * logX               # (N,4)\n    N, F  = logX.shape                # F == 4\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + 2 * F\n    if theta.size != expected_len:\n        raise ValueError(f\"Expected params length {expected_len}, got {theta.size}\")\n\n    # build design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        quadX\n    ], axis=1)                       # (N, 1+2F)\n\n    # linear prediction in log\u2010space\n    log_pred = Z.dot(theta)          # (N,)\n    return np.exp(log_pred)          # back to original scale\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized\n    linear regression in log\u2010space with differentiated penalties:\n      log(loss) \u2248 \u03b80 + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n\n    Returns:\n      params: array of shape (1+4+4,) =\n              [\u03b80, w_lr, w_bsz, w_data, w_param,\n                    v_lr, v_bsz, v_data, v_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid zeros or negatives before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX  = np.log(X)                # (N,4)\n    quadX = logX * logX              # (N,4)\n    logy  = np.log(y)                # (N,)\n    N, F  = logX.shape               # F == 4\n\n    # design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        quadX\n    ], axis=1)                       # (N, 1+2F)\n    P = Z.shape[1]                   # P == 1 + 2F\n\n    # ridge regularization:\n    #   no penalty on intercept,\n    #   small penalty on linear terms,\n    #   larger penalty on quadratic terms\n    lambda_lin  = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # linear weights indices 1..F\n    lin_idx  = np.arange(1, 1 + F)\n    # quadratic weights indices (1+F)..(1+2F-1)\n    quad_idx = np.arange(1 + F, 1 + 2 * F)\n    reg[lin_idx,  lin_idx]  = lambda_lin\n    reg[quad_idx, quad_idx] = lambda_quad\n\n    # normal equations: (Z^T Z + reg) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg\n    b = Z.T.dot(logy)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        theta, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "364f0e2c-44cb-437f-a8b4-ab439c74d63f", "generation": 3, "timestamp": 1754717271.4280972, "iteration_found": 50, "metrics": {"nmse": 0.259892452175383, "nmae": 0.45676183373108786, "r2": 0.7401075478246171, "combined_score": 0.7937185418274062}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.35475711478799465, "nmae": 0.50644546542682, "r2": 0.6452428852120053, "combined_score": 0.7381396924100964}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3548\n- nmae: 0.5064\n- r2: 0.6452\n- combined_score: 0.7381\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3548, nmae: 0.5064, r2: 0.6452, combined_score: 0.7381\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3456, nmae: 0.4742, r2: 0.6544, combined_score: 0.7431\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2599, nmae: 0.4568, r2: 0.7401, combined_score: 0.7937\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5626)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended\n    multiplicative power\u2010law in log\u2010space with quadratic terms:\n      log(loss) = \u03b80 + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (1 + 4 + 4,) =\n                    [\u03b80, w_lr, w_bsz, w_data, w_param,\n                          v_lr, v_bsz, v_data, v_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid zeros or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # compute log\u2010features\n    logX  = np.log(X)                 # (N,4)\n    quadX = logX * logX               # (N,4)\n    N, F  = logX.shape                # F == 4\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + 2 * F\n    if theta.size != expected_len:\n        raise ValueError(f\"Expected params length {expected_len}, got {theta.size}\")\n\n    # build design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64), \n        logX, \n        quadX\n    ], axis=1)                       # (N, 1+2F)\n\n    # linear prediction in log\u2010space\n    log_pred = Z.dot(theta)          # (N,)\n    return np.exp(log_pred)          # back to original scale\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized\n    linear regression in log\u2010space with different penalties\n    on linear vs quadratic terms:\n      log(loss) \u2248 \u03b80 + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n\n    Returns:\n      params: array of shape (1+4+4,) =\n              [\u03b80, w_lr, w_bsz, w_data, w_param,\n                    v_lr, v_bsz, v_data, v_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid zeros or negatives before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX  = np.log(X)                # (N,4)\n    quadX = logX * logX              # (N,4)\n    logy  = np.log(y)                # (N,)\n    N, F  = logX.shape               # F == 4\n\n    # design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        quadX\n    ], axis=1)                       # (N, 1+2F)\n    P = Z.shape[1]                   # P == 1 + 2F\n\n    # ridge regularization: no penalty on intercept,\n    # small penalty on linear terms, larger on quadratic\n    lambda_lin  = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # linear weights indices 1..F\n    lin_idx  = np.arange(1, 1 + F)\n    # quadratic weights indices (1+F)..(1+2F-1)\n    quad_idx = np.arange(1 + F, 1 + 2 * F)\n    reg[lin_idx,  lin_idx]  = lambda_lin\n    reg[quad_idx, quad_idx] = lambda_quad\n\n    # normal equations: (Z^T Z + reg) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg\n    b = Z.T.dot(logy)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        theta, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n\n    return theta\n```\nKey features: Performs well on nmse (0.2599), Performs well on nmae (0.4568), Performs well on r2 (0.7401), Performs well on combined_score (0.7937)\n\n\n### Program 2 (Score: 0.5543)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (7,)\n                    [intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative input to log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # extract columns\n    lr = X[:, 0]\n    bsz = X[:, 1]\n    data_size = X[:, 2]\n    param_size = X[:, 3]\n\n    # compute logs\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions\n    inter_lr_bsz = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack params\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear combination in log-space\n    log_pred = (intercept\n                + w_lr * log_lr\n                + w_bsz * log_bsz\n                + w_data * log_data\n                + w_param * log_param\n                + w_lr_bsz * inter_lr_bsz\n                + w_data_param * inter_data_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge-regression in log-space \n    with two interaction terms.\n    Builds a design matrix:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(data_size)*log(param_size)]\n    and solves (X^T X + \u03bbI) p = X^T y for p in log-loss space.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,) = \n              [intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix: shape (N,7)\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (do not penalize intercept)\n    dim = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3456), Performs well on nmae (0.4742), Performs well on r2 (0.6544), Performs well on combined_score (0.7431)\n\n\n### Program 3 (Score: 0.5611)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for LLM training:\nAdds a quadratic term in log(lr) to capture the unimodal effect of learning rate,\nwhile retaining power\u2010law scaling in batch size, data size, and model size.\nFitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept \n                  + w1 * log(lr) \n                  + w2 * (log(lr))^2 \n                  + w3 * log(bsz) \n                  + w4 * log(data_size) \n                  + w5 * log(non_embedding_param_size))\n    where params = [intercept, w1, w2, w3, w4, w5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # split features\n    log_lr   = np.log(X[:, 0])\n    log_bsz  = np.log(X[:, 1])\n    log_data = np.log(X[:, 2])\n    log_mod  = np.log(X[:, 3])\n    # build feature matrix in log\u2010space\n    # columns: [1, log_lr, log_lr^2, log_bsz, log_data, log_mod]\n    ones     = np.ones_like(log_lr)\n    lr_sq    = log_lr * log_lr\n    design   = np.stack([ones, log_lr, lr_sq, log_bsz, log_data, log_mod], axis=1)  # (N,6)\n    # linear model in log\u2010space\n    log_pred = design.dot(np.asarray(params, dtype=np.float64))                             # (N,)\n    # map back to original scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law model by solving\n        log(loss) \u2248 intercept \n                    + w1 * log(lr) \n                    + w2 * (log(lr))^2 \n                    + w3 * log(bsz)\n                    + w4 * log(data_size)\n                    + w5 * log(non_embedding_param_size)\n    via ridge\u2010regularized normal equations.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # logs\n    log_lr   = np.log(X[:, 0])\n    log_bsz  = np.log(X[:, 1])\n    log_data = np.log(X[:, 2])\n    log_mod  = np.log(X[:, 3])\n    # construct design matrix\n    ones   = np.ones_like(log_lr)\n    lr_sq  = log_lr * log_lr\n    design = np.stack([ones, log_lr, lr_sq, log_bsz, log_data, log_mod], axis=1)  # (N,6)\n    # target in log\u2010space\n    logy   = np.log(y)\n    # ridge regularization parameter\n    lambda_reg = 1e-4\n    D = design.shape[1]  # 6\n    # build regularization matrix (do not penalize intercept => [0, 1, 1, 1, 1, 1])\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I  # (6,6)\n    b = design.T.dot(logy)                     # (6,)\n    # solve for params\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        params, *_ = np.linalg.lstsq(A, b, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3548), Performs well on nmae (0.5064), Performs well on r2 (0.6452), Performs well on combined_score (0.7381)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5611)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    # Ensure 2D array and numeric type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # Unpack hyperparameters\n    lr, bsz, data_size, param_size = X.T\n\n    # Compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build design matrix: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Linear model in log\u2010space\n    log_pred = phi.dot(params)  # shape (N,)\n\n    # Map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points:  array of shape (N,4)\n      loss_values:  array of shape (N,)\n\n    Returns:\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    # Prepare data arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Unpack hyperparameters\n    lr, bsz, data_size, param_size = X.T\n\n    # Compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build design matrix phi\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    M = phi.shape[1]\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # Solve (phi^T phi + \u03bbI) p = phi^T log(y)\n    A = phi.T.dot(phi) + lambda_reg * I\n    b = phi.T.dot(np.log(y))\n\n    # Direct solve; fallback to least\u2010squares if singular\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        params, *_ = np.linalg.lstsq(phi, np.log(y), rcond=None)\n\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Generalized power\u2010law model with a small quadratic term in log(lr):\n        log(loss) = p0\n                    + p1 * log(lr)\n                    + p2 * (log(lr))^2\n                    + p3 * log(bsz)\n                    + p4 * log(data_size)\n                    + p5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [p0, p1, p2, p3, p4, p5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    # avoid non-positive before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # build design matrix: [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    Phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # linear model in log\u2010space\n    log_pred = Phi.dot(params)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the generalized power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 p0 + p1*log(lr) + p2*(log(lr))^2 + p3*log(bsz) + p4*log(data_size) + p5*log(param_size)\n    Returns optimized params = [p0, p1, p2, p3, p4, p5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid non-positive before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # design matrix\n    Phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_y = np.log(y)\n\n    # ridge regularization (no penalty on intercept term)\n    M = Phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = Phi.T.dot(Phi) + lambda_reg * I\n    b = Phi.T.dot(log_y)\n\n    # solve for params\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least squares\n        params, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5626, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended\n    multiplicative power\u2010law in log\u2010space with quadratic terms:\n      log(loss) = \u03b80 + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (1 + 4 + 4,) =\n                    [\u03b80, w_lr, w_bsz, w_data, w_param,\n                          v_lr, v_bsz, v_data, v_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid zeros or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # compute log\u2010features\n    logX  = np.log(X)                 # (N,4)\n    quadX = logX * logX               # (N,4)\n    N, F  = logX.shape                # F == 4\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + 2 * F\n    if theta.size != expected_len:\n        raise ValueError(f\"Expected params length {expected_len}, got {theta.size}\")\n\n    # build design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64), \n        logX, \n        quadX\n    ], axis=1)                       # (N, 1+2F)\n\n    # linear prediction in log\u2010space\n    log_pred = Z.dot(theta)          # (N,)\n    return np.exp(log_pred)          # back to original scale\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized\n    linear regression in log\u2010space with different penalties\n    on linear vs quadratic terms:\n      log(loss) \u2248 \u03b80 + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n\n    Returns:\n      params: array of shape (1+4+4,) =\n              [\u03b80, w_lr, w_bsz, w_data, w_param,\n                    v_lr, v_bsz, v_data, v_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid zeros or negatives before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX  = np.log(X)                # (N,4)\n    quadX = logX * logX              # (N,4)\n    logy  = np.log(y)                # (N,)\n    N, F  = logX.shape               # F == 4\n\n    # design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        quadX\n    ], axis=1)                       # (N, 1+2F)\n    P = Z.shape[1]                   # P == 1 + 2F\n\n    # ridge regularization: no penalty on intercept,\n    # small penalty on linear terms, larger on quadratic\n    lambda_lin  = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # linear weights indices 1..F\n    lin_idx  = np.arange(1, 1 + F)\n    # quadratic weights indices (1+F)..(1+2F-1)\n    quad_idx = np.arange(1 + F, 1 + 2 * F)\n    reg[lin_idx,  lin_idx]  = lambda_lin\n    reg[quad_idx, quad_idx] = lambda_quad\n\n    # normal equations: (Z^T Z + reg) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg\n    b = Z.T.dot(logy)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        theta, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n\n    return theta\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5565, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5611, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for LLM training:\nAdds a quadratic term in log(lr) to capture the unimodal effect of learning rate,\nwhile retaining power\u2010law scaling in batch size, data size, and model size.\nFitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept \n                  + w1 * log(lr) \n                  + w2 * (log(lr))^2 \n                  + w3 * log(bsz) \n                  + w4 * log(data_size) \n                  + w5 * log(non_embedding_param_size))\n    where params = [intercept, w1, w2, w3, w4, w5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # split features\n    log_lr   = np.log(X[:, 0])\n    log_bsz  = np.log(X[:, 1])\n    log_data = np.log(X[:, 2])\n    log_mod  = np.log(X[:, 3])\n    # build feature matrix in log\u2010space\n    # columns: [1, log_lr, log_lr^2, log_bsz, log_data, log_mod]\n    ones     = np.ones_like(log_lr)\n    lr_sq    = log_lr * log_lr\n    design   = np.stack([ones, log_lr, lr_sq, log_bsz, log_data, log_mod], axis=1)  # (N,6)\n    # linear model in log\u2010space\n    log_pred = design.dot(np.asarray(params, dtype=np.float64))                             # (N,)\n    # map back to original scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law model by solving\n        log(loss) \u2248 intercept \n                    + w1 * log(lr) \n                    + w2 * (log(lr))^2 \n                    + w3 * log(bsz)\n                    + w4 * log(data_size)\n                    + w5 * log(non_embedding_param_size)\n    via ridge\u2010regularized normal equations.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # logs\n    log_lr   = np.log(X[:, 0])\n    log_bsz  = np.log(X[:, 1])\n    log_data = np.log(X[:, 2])\n    log_mod  = np.log(X[:, 3])\n    # construct design matrix\n    ones   = np.ones_like(log_lr)\n    lr_sq  = log_lr * log_lr\n    design = np.stack([ones, log_lr, lr_sq, log_bsz, log_data, log_mod], axis=1)  # (N,6)\n    # target in log\u2010space\n    logy   = np.log(y)\n    # ridge regularization parameter\n    lambda_reg = 1e-4\n    D = design.shape[1]  # 6\n    # build regularization matrix (do not penalize intercept => [0, 1, 1, 1, 1, 1])\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I  # (6,6)\n    b = design.T.dot(logy)                     # (6,)\n    # solve for params\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        params, *_ = np.linalg.lstsq(A, b, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Mixed iteration strategies\n\n\n### Inspiration 5 (Score: 0.5543, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (7,)\n                    [intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative input to log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # extract columns\n    lr = X[:, 0]\n    bsz = X[:, 1]\n    data_size = X[:, 2]\n    param_size = X[:, 3]\n\n    # compute logs\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions\n    inter_lr_bsz = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack params\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear combination in log-space\n    log_pred = (intercept\n                + w_lr * log_lr\n                + w_bsz * log_bsz\n                + w_data * log_data\n                + w_param * log_param\n                + w_lr_bsz * inter_lr_bsz\n                + w_data_param * inter_data_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge-regression in log-space \n    with two interaction terms.\n    Builds a design matrix:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(data_size)*log(param_size)]\n    and solves (X^T X + \u03bbI) p = X^T y for p in log-loss space.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,) = \n              [intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix: shape (N,7)\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (do not penalize intercept)\n    dim = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    # Ensure 2D array and numeric type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # Unpack hyperparameters\n    lr, bsz, data_size, param_size = X.T\n\n    # Compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build design matrix: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Linear model in log\u2010space\n    log_pred = phi.dot(params)  # shape (N,)\n\n    # Map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points:  array of shape (N,4)\n      loss_values:  array of shape (N,)\n\n    Returns:\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    # Prepare data arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Unpack hyperparameters\n    lr, bsz, data_size, param_size = X.T\n\n    # Compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build design matrix phi\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    M = phi.shape[1]\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # Solve (phi^T phi + \u03bbI) p = phi^T log(y)\n    A = phi.T.dot(phi) + lambda_reg * I\n    b = phi.T.dot(np.log(y))\n\n    # Direct solve; fallback to least\u2010squares if singular\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        params, *_ = np.linalg.lstsq(phi, np.log(y), rcond=None)\n\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended\n    multiplicative power\u2010law in log\u2010space with quadratic terms:\n      log(loss) = \u03b80 \n                  + \u03a3_i w_i * log(x_i) \n                  + \u03a3_i v_i * (log(x_i))^2\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (1 + 4 + 4,) =\n                    [\u03b80, w_lr, w_bsz, w_data, w_param,\n                          v_lr, v_bsz, v_data, v_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid zeros or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # compute log\u2010features\n    logX  = np.log(X)                 # (N,4)\n    quadX = logX * logX               # (N,4)\n    N, F  = logX.shape                # F == 4\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + 2 * F\n    if theta.size != expected_len:\n        raise ValueError(f\"Expected params length {expected_len}, got {theta.size}\")\n\n    # build design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        quadX\n    ], axis=1)                       # (N, 1+2F)\n\n    # linear prediction in log\u2010space\n    log_pred = Z.dot(theta)          # (N,)\n    return np.exp(log_pred)          # back to original scale\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized\n    linear regression in log\u2010space with differentiated penalties:\n      log(loss) \u2248 \u03b80 + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n\n    Returns:\n      params: array of shape (1+4+4,) =\n              [\u03b80, w_lr, w_bsz, w_data, w_param,\n                    v_lr, v_bsz, v_data, v_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid zeros or negatives before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX  = np.log(X)                # (N,4)\n    quadX = logX * logX              # (N,4)\n    logy  = np.log(y)                # (N,)\n    N, F  = logX.shape               # F == 4\n\n    # design matrix Z = [1, logX, quadX]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        quadX\n    ], axis=1)                       # (N, 1+2F)\n    P = Z.shape[1]                   # P == 1 + 2F\n\n    # ridge regularization:\n    #   no penalty on intercept,\n    #   small penalty on linear terms,\n    #   larger penalty on quadratic terms\n    lambda_lin  = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # linear weights indices 1..F\n    lin_idx  = np.arange(1, 1 + F)\n    # quadratic weights indices (1+F)..(1+2F-1)\n    quad_idx = np.arange(1 + F, 1 + 2 * F)\n    reg[lin_idx,  lin_idx]  = lambda_lin\n    reg[quad_idx, quad_idx] = lambda_quad\n\n    # normal equations: (Z^T Z + reg) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg\n    b = Z.T.dot(logy)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        theta, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of Key Improvements:\n- Reverted to an extended power\u2010law in log\u2010space with both linear and quadratic terms for all four hyperparameters, which best captured nonlinear effects (as in the highest\u2010scoring variant).\n- Applied differentiated ridge penalties: a very small regularizer on the linear terms to avoid under\u2010fitting, and a slightly larger one on the quadratic terms to prevent overfitting.\n- Maintained a compact 9\u2010parameter model for efficiency and stable fitting with limited data.\n- Ensured numerical stability by clipping inputs before taking logs and by providing a least\u2010squares fallback if the normal equations matrix is singular."]}}}