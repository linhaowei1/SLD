{"id": "955161f7-8559-4972-aae5-ffb739990765", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as a two\u2010term power\u2010law with a constant floor:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Arguments:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) or (T,6), each row = [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n\n    Returns:\n      preds: array of shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected {F+2} parameters, got {P}\")\n\n    # Unpack parameters\n    logk    = p[:, 0]           # shape (T,)\n    alphas  = p[:, 1:1+F]       # shape (T,4)\n    logc    = p[:, -1]          # shape (T,)\n\n    # Compute main power\u2010law term: exp(logk + logX @ alphas.T)\n    log_term = logk[None, :] + logX.dot(alphas.T)  # shape (N,T)\n    main_term = np.exp(log_term)                   # shape (N,T)\n\n    # Compute constant floor term\n    floor_term = np.exp(logc)[None, :]             # shape (1,T)\n\n    # Total prediction\n    preds = main_term + floor_term                 # shape (N,T)\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n\n    Minimizes mean squared error in the original loss space using L-BFGS-B\n    with an analytic gradient.\n\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-8,  None)\n    logX = np.log(X)  # shape (N,4)\n\n    # Good initial guess:\n    #   logk \u2248 log(median(y) - 0.5*min(y)), \u03b1_i = 0, logc \u2248 log(0.5*min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init_logk   = np.log(max(median_y - 0.5 * min_y, 1e-8))\n    init_alphas = np.zeros(F, dtype=float)\n    init_logc   = np.log(0.5 * min_y + 1e-8)\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))  # shape (6,)\n\n    # Objective and analytic gradient\n    def obj_and_grad(p):\n        logk   = p[0]\n        alphas = p[1:1+F]\n        logc   = p[-1]\n\n        c0       = np.exp(logc)              # scalar floor\n        linpred  = logk + logX.dot(alphas)   # shape (N,)\n        mainterm = np.exp(linpred)           # shape (N,)\n        pred     = mainterm + c0             # shape (N,)\n        res      = pred - y                  # shape (N,)\n\n        # Mean squared error\n        mse = np.mean(res * res)\n\n        # Gradients\n        #   \u2202m/\u2202logk   = mainterm\n        #   \u2202m/\u2202\u03b1_j    = mainterm * logX[:,j]\n        #   \u2202m/\u2202logc   = c0\n        grad_logk   = 2.0 * np.mean(res * mainterm)\n        grad_alphas = 2.0 * np.mean((res * mainterm)[:, None] * logX, axis=0)\n        grad_logc   = 2.0 * np.mean(res * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    result = minimize(lambda p: obj_and_grad(p)[0],\n                      init_params,\n                      jac=lambda p: obj_and_grad(p)[1],\n                      method='L-BFGS-B',\n                      options={'maxiter': 5000, 'ftol': 1e-12})\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "eab995e9-6381-4466-98af-8f9ec588fc1f", "generation": 2, "timestamp": 1754798874.0378182, "iteration_found": 28, "metrics": {"nmse": 50.18451243464907, "nmae": 9.541323078050919, "r2": -49.18451243464907, "combined_score": 0.019537159824991428}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00324575865645, "nmae": 17.3975027158323, "r2": -164.00324575865645, "combined_score": 0.00602397860011634}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0032\n- nmae: 17.3975\n- r2: -164.0032\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0032, nmae: 17.3975, r2: -164.0032, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 50.1845, nmae: 9.5413, r2: -49.1845, combined_score: 0.0195\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.6402)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a two\u2010term power\u2010law with a floor:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n\n    Arguments:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       array of shape (6,) or (T,6), where each row is\n                    [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n\n    Returns:\n      preds: array of shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Ensure positivity for the log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p_arr = np.asarray(params, dtype=float)\n    # unify shape to (T,6)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]\n    T, P = p_arr.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk    = p_arr[:, 0]           # (T,)\n    alphas  = p_arr[:, 1:1+F]       # (T,4)\n    logc    = p_arr[:, -1]          # (T,)\n\n    # compute main power\u2010law term\n    #   term = exp(logk + logX @ alphas.T)\n    log_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    main_term = np.exp(log_term)                   # (N,T)\n\n    # compute constant floor term\n    floor_term = np.exp(logc)[None, :]             # (1,T)\n\n    # total prediction\n    pred = main_term + floor_term                  # (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 exp(logk + \u03b1\u00b7log(x)) + exp(logc)\n\n    Minimizes mean squared error in the original loss space using L-BFGS-B\n    with an analytic gradient for stability and speed.\n\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-8,  None)\n    logX = np.log(X)  # (N,4)\n\n    # Good initial guess:\n    #   logk  \u2248 log(median(y) - 0.5*min(y))\n    #   \u03b1_i   = 0\n    #   logc  \u2248 log(0.5*min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init_logk   = np.log(max(median_y - 0.5*min_y, 1e-8))\n    init_alphas = np.zeros(F, dtype=float)\n    init_logc   = np.log(0.5 * min_y + 1e-8)\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))  # (6,)\n\n    # Objective and analytic gradient\n    def obj_and_grad(p):\n        logk   = p[0]\n        alphas = p[1:1+F]\n        logc   = p[-1]\n\n        c0       = np.exp(logc)              # scalar\n        linpred  = logk + logX.dot(alphas)   # (N,)\n        mainterm = np.exp(linpred)           # (N,)\n        pred     = mainterm + c0             # (N,)\n        res      = pred - y                  # (N,)\n\n        # MSE\n        mse = np.mean(res * res)\n\n        # Gradients:\n        # \u2202m/\u2202logk   = mainterm\n        # \u2202m/\u2202\u03b1_j    = mainterm * logX[:,j]\n        # \u2202m/\u2202logc   = c0\n        grad_logk   = 2.0 * np.mean(res * mainterm)\n        grad_alphas = 2.0 * np.mean((res * mainterm)[:, None] * logX, axis=0)\n        grad_logc   = 2.0 * np.mean(res * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    result = minimize(lambda p: obj_and_grad(p)[0],\n                      init_params,\n                      jac=lambda p: obj_and_grad(p)[1],\n                      method='L-BFGS-B',\n                      options={'maxiter': 5000, 'ftol': 1e-12})\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (50.1845), Performs well on nmae (9.5413), Performs well on r2 (-49.1845), Performs well on combined_score (0.0195)\n\n\n### Program 2 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    # ensure inputs are float arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # shape (N, F)\n    N, F = X.shape\n\n    # pack params into 2D if necessary\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]          # (T,)\n    exponents = p[:, 1:1+F]      # (T, F)\n    logc      = p[:, -1]         # (T,)\n\n    # compute power-law term: k * \u220f x_i^{\u03b1_i}\n    # in log-space: logk + \u03a3 \u03b1_i * log(x_i)\n    logX      = np.log(X)        # (N, F)\n    log_term  = logk[None, :] + logX.dot(exponents.T)  # (N, T)\n\n    # final prediction: exp(log_term) + exp(logc)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]    # (N, T)\n\n    # if single parameter set, return (N,) array\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law by minimizing MSE in original loss space.\n    Optimizes parameters [logk, \u03b11..\u03b1F, logc] via L-BFGS-B.\n    Returns optimized parameter vector of length F+2.\n    \"\"\"\n    # prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n    y = np.maximum(y, 1e-8)  # avoid zeros\n\n    N, F = X.shape\n    P = F + 2\n\n    # initialization:\n    #   logk = log(median(y))\n    #   \u03b1_i  = 0\n    #   logc = log(0.1 * min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init     = np.zeros(P, dtype=np.float64)\n    init[0]           = np.log(median_y + 1e-8)\n    init[1:1+F]       = 0.0\n    init[-1]          = np.log(min_y * 0.1 + 1e-8)\n\n    # objective: mean squared error in original loss\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 3 (Score: 4.6009)\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log\u2013linear power-law model fitted via closed-form linear regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel: loss \u2248 exp(\u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz) + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size))\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, param_size]\n    params:     (5,) or (T,5) array [\u03b8\u2080, \u03b8\u2081, \u03b8\u2082, \u03b8\u2083, \u03b8\u2084]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    # params shape handling\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                      # (1,5)\n    T, P = p.shape\n    assert P == X.shape[1] + 1, f\"Expected params of length {X.shape[1]+1}, got {P}\"\n    # compute log-features\n    logX = np.log(X)                                       # (N,4)\n    # \u03b8\u2080 + \u2211 \u03b8\u1d62\u00b7logX[:,i]\n    logA = p[:, 0]                                         # (T,)\n    coefs = p[:, 1:]                                       # (T,4)\n    # log_preds: (N,T)\n    log_preds = logA[None, :] + logX @ coefs.T\n    preds = np.exp(log_preds)\n    # return (N,) if single target else (N,T)\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law:\n      log(loss) = \u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz)\n                  + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size)\n    via ordinary least squares in log space (with tiny ridge for stability).\n    Returns params: (5,) array [\u03b8\u2080\u2026\u03b8\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)\n    # flatten y to 2D\n    if y.ndim == 1:\n        y2d = y[:, None]                                      # (N,1)\n    else:\n        y2d = y\n    N, F = X.shape\n    T = y2d.shape[1]\n    # ensure strictly positive for log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y2d = np.clip(y2d, eps, None)\n    # build design matrix in log space: [1, log(x1), ..., log(xF)]\n    logX = np.log(X)                                        # (N,F)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    P = F + 1\n    # tiny ridge regularization for numerical stability\n    ridge = 1e-8\n    XtX = X_design.T @ X_design + ridge * np.eye(P)         # (P,P)\n    Xty = X_design.T @ np.log(y2d)                          # (P,T)\n    # solve for \u03b8 in each target column\n    thetas = np.linalg.solve(XtX, Xty)                      # (P,T)\n    # return shape (P,) if single target else (T,P)\n    if T == 1:\n        return thetas[:, 0]\n    else:\n        return thetas.T\n```\nKey features: Performs well on nmse (165.0032), Performs well on nmae (17.3975), Performs well on r2 (-164.0032), Performs well on combined_score (0.0060)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.6402, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a two\u2010term power\u2010law with a floor:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n\n    Arguments:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       array of shape (6,) or (T,6), where each row is\n                    [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n\n    Returns:\n      preds: array of shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Ensure positivity for the log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p_arr = np.asarray(params, dtype=float)\n    # unify shape to (T,6)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]\n    T, P = p_arr.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk    = p_arr[:, 0]           # (T,)\n    alphas  = p_arr[:, 1:1+F]       # (T,4)\n    logc    = p_arr[:, -1]          # (T,)\n\n    # compute main power\u2010law term\n    #   term = exp(logk + logX @ alphas.T)\n    log_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    main_term = np.exp(log_term)                   # (N,T)\n\n    # compute constant floor term\n    floor_term = np.exp(logc)[None, :]             # (1,T)\n\n    # total prediction\n    pred = main_term + floor_term                  # (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 exp(logk + \u03b1\u00b7log(x)) + exp(logc)\n\n    Minimizes mean squared error in the original loss space using L-BFGS-B\n    with an analytic gradient for stability and speed.\n\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-8,  None)\n    logX = np.log(X)  # (N,4)\n\n    # Good initial guess:\n    #   logk  \u2248 log(median(y) - 0.5*min(y))\n    #   \u03b1_i   = 0\n    #   logc  \u2248 log(0.5*min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init_logk   = np.log(max(median_y - 0.5*min_y, 1e-8))\n    init_alphas = np.zeros(F, dtype=float)\n    init_logc   = np.log(0.5 * min_y + 1e-8)\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))  # (6,)\n\n    # Objective and analytic gradient\n    def obj_and_grad(p):\n        logk   = p[0]\n        alphas = p[1:1+F]\n        logc   = p[-1]\n\n        c0       = np.exp(logc)              # scalar\n        linpred  = logk + logX.dot(alphas)   # (N,)\n        mainterm = np.exp(linpred)           # (N,)\n        pred     = mainterm + c0             # (N,)\n        res      = pred - y                  # (N,)\n\n        # MSE\n        mse = np.mean(res * res)\n\n        # Gradients:\n        # \u2202m/\u2202logk   = mainterm\n        # \u2202m/\u2202\u03b1_j    = mainterm * logX[:,j]\n        # \u2202m/\u2202logc   = c0\n        grad_logk   = 2.0 * np.mean(res * mainterm)\n        grad_alphas = 2.0 * np.mean((res * mainterm)[:, None] * logX, axis=0)\n        grad_logc   = 2.0 * np.mean(res * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    result = minimize(lambda p: obj_and_grad(p)[0],\n                      init_params,\n                      jac=lambda p: obj_and_grad(p)[1],\n                      method='L-BFGS-B',\n                      options={'maxiter': 5000, 'ftol': 1e-12})\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (50.185), Excellent nmae (9.541)\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log\u2013linear power-law model fitted via closed-form linear regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel: loss \u2248 exp(\u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz) + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size))\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, param_size]\n    params:     (5,) or (T,5) array [\u03b8\u2080, \u03b8\u2081, \u03b8\u2082, \u03b8\u2083, \u03b8\u2084]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    # params shape handling\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                      # (1,5)\n    T, P = p.shape\n    assert P == X.shape[1] + 1, f\"Expected params of length {X.shape[1]+1}, got {P}\"\n    # compute log-features\n    logX = np.log(X)                                       # (N,4)\n    # \u03b8\u2080 + \u2211 \u03b8\u1d62\u00b7logX[:,i]\n    logA = p[:, 0]                                         # (T,)\n    coefs = p[:, 1:]                                       # (T,4)\n    # log_preds: (N,T)\n    log_preds = logA[None, :] + logX @ coefs.T\n    preds = np.exp(log_preds)\n    # return (N,) if single target else (N,T)\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law:\n      log(loss) = \u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz)\n                  + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size)\n    via ordinary least squares in log space (with tiny ridge for stability).\n    Returns params: (5,) array [\u03b8\u2080\u2026\u03b8\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)\n    # flatten y to 2D\n    if y.ndim == 1:\n        y2d = y[:, None]                                      # (N,1)\n    else:\n        y2d = y\n    N, F = X.shape\n    T = y2d.shape[1]\n    # ensure strictly positive for log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y2d = np.clip(y2d, eps, None)\n    # build design matrix in log space: [1, log(x1), ..., log(xF)]\n    logX = np.log(X)                                        # (N,F)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    P = F + 1\n    # tiny ridge regularization for numerical stability\n    ridge = 1e-8\n    XtX = X_design.T @ X_design + ridge * np.eye(P)         # (P,P)\n    Xty = X_design.T @ np.log(y2d)                          # (P,T)\n    # solve for \u03b8 in each target column\n    thetas = np.linalg.solve(XtX, Xty)                      # (P,T)\n    # return shape (P,) if single target else (T,P)\n    if T == 1:\n        return thetas[:, 0]\n    else:\n        return thetas.T\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as a two\u2010term power\u2010law with a constant floor:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Arguments:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) or (T,6), each row = [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n\n    Returns:\n      preds: array of shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected {F+2} parameters, got {P}\")\n\n    # Unpack parameters\n    logk    = p[:, 0]           # shape (T,)\n    alphas  = p[:, 1:1+F]       # shape (T,4)\n    logc    = p[:, -1]          # shape (T,)\n\n    # Compute main power\u2010law term: exp(logk + logX @ alphas.T)\n    log_term = logk[None, :] + logX.dot(alphas.T)  # shape (N,T)\n    main_term = np.exp(log_term)                   # shape (N,T)\n\n    # Compute constant floor term\n    floor_term = np.exp(logc)[None, :]             # shape (1,T)\n\n    # Total prediction\n    preds = main_term + floor_term                 # shape (N,T)\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n\n    Minimizes mean squared error in the original loss space using L-BFGS-B\n    with an analytic gradient.\n\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-8,  None)\n    logX = np.log(X)  # shape (N,4)\n\n    # Good initial guess:\n    #   logk \u2248 log(median(y) - 0.5*min(y)), \u03b1_i = 0, logc \u2248 log(0.5*min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init_logk   = np.log(max(median_y - 0.5 * min_y, 1e-8))\n    init_alphas = np.zeros(F, dtype=float)\n    init_logc   = np.log(0.5 * min_y + 1e-8)\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))  # shape (6,)\n\n    # Objective and analytic gradient\n    def obj_and_grad(p):\n        logk   = p[0]\n        alphas = p[1:1+F]\n        logc   = p[-1]\n\n        c0       = np.exp(logc)              # scalar floor\n        linpred  = logk + logX.dot(alphas)   # shape (N,)\n        mainterm = np.exp(linpred)           # shape (N,)\n        pred     = mainterm + c0             # shape (N,)\n        res      = pred - y                  # shape (N,)\n\n        # Mean squared error\n        mse = np.mean(res * res)\n\n        # Gradients\n        #   \u2202m/\u2202logk   = mainterm\n        #   \u2202m/\u2202\u03b1_j    = mainterm * logX[:,j]\n        #   \u2202m/\u2202logc   = c0\n        grad_logk   = 2.0 * np.mean(res * mainterm)\n        grad_alphas = 2.0 * np.mean((res * mainterm)[:, None] * logX, axis=0)\n        grad_logc   = 2.0 * np.mean(res * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    result = minimize(lambda p: obj_and_grad(p)[0],\n                      init_params,\n                      jac=lambda p: obj_and_grad(p)[1],\n                      method='L-BFGS-B',\n                      options={'maxiter': 5000, 'ftol': 1e-12})\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Switched from a simple log\u2010linear model to a two\u2010term power\u2010law with a constant floor, capturing both scale\u2010dependent behavior and an irreducible loss floor.\n- Added an analytic gradient for stable and fast convergence under L-BFGS-B.\n- Robust initialization based on the data\u2019s median and minimum to avoid poor local minima.\n- Input clipping ensures numerical stability across wide hyperparameter ranges.\n- Comprehensive shape and value checks guard against invalid inputs."]}}}