{"id": "2e279142-87a2-4b2a-881a-865144685c52", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model fitting with a small additive floor term\nand non\u2010linear refinement via robust least\u2010squares for improved accuracy\nand stability across hyperparameter scales.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a power\u2010law with optional floor:\n      y_pred = C + exp(beta0 + sum_i beta_i * log(x_i))\n    Supports two parameter shapes:\n      - length = 1 + F  => [beta0, beta_1, ..., beta_F]  (no floor, C=0)\n      - length = 2 + F  => [C, beta0, beta_1, ..., beta_F]\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (P,) or (T,P)\n    Returns:\n      preds: (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    # ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,F)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n\n    # detect floor term\n    if P == F + 1:\n        # no floor\n        C = np.zeros((T, 1), dtype=float)\n        beta0 = p[:, 0:1]         # (T,1)\n        slopes = p[:, 1:]         # (T,F)\n    elif P == F + 2:\n        # first param is floor\n        C = p[:, 0:1]             # (T,1)\n        beta0 = p[:, 1:2]         # (T,1)\n        slopes = p[:, 2:]         # (T,F)\n    else:\n        raise ValueError(f\"Parameter length must be {F+1} or {F+2}, got {P}\")\n\n    # compute exponent term: (N, T)\n    # exponent[n,t] = beta0[t] + sum_j slopes[t,j] * logX[n,j]\n    expo = beta0.T + logX.dot(slopes.T)  # (N,T)\n    power_term = np.exp(expo)            # (N,T)\n\n    y_pred = C.T + power_term            # (N,T)\n\n    # if single parameter set, return 1D\n    if T == 1:\n        return y_pred[:, 0]\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law + floor model via:\n      1) closed\u2010form ridge regression in log\u2010space to get initial slopes and intercept\n      2) small positive floor term init\n      3) robust non\u2010linear least squares refinement\n    Returns:\n      params: array of shape (6,) => [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    assert F == 4, \"Expected 4 features\"\n\n    # 1) initial log\u2010linear fit with ridge\n    Xp = np.clip(X, 1e-12, None)\n    logX = np.log(Xp)                   # (N,4)\n    yp = np.clip(y, 1e-12, None)\n    logY = np.log(yp)                   # (N,)\n\n    # design matrix\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    ridge = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::ZTZ.shape[0]+1] += ridge\n    ZTY = Z.T.dot(logY)\n    beta_init = np.linalg.solve(ZTZ, ZTY)  # (5,)\n\n    # 2) initial floor term\n    y_min = np.min(y)\n    C_init = max(0.0, 0.5 * y_min)\n\n    # form full initial param vector: [C, beta0, slopes...]\n    p0 = np.concatenate([[C_init], beta_init])  # length = 6\n\n    # 3) refine via robust least\u2010squares\n    def residuals(p):\n        y_pred = scaling_law_func(X, p)\n        return y_pred - y\n\n    # enforce floor >= 0\n    lb = np.concatenate([[0.0], np.full(beta_init.shape, -np.inf)])\n    ub = np.full_like(p0, np.inf)\n    # robust fitting to lessen outlier impact\n    res = least_squares(\n        residuals,\n        p0,\n        bounds=(lb, ub),\n        loss='soft_l1',\n        f_scale=1.0,\n        max_nfev=5000,\n        xtol=1e-8,\n        ftol=1e-8\n    )\n\n    return res.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c11193a7-73c8-4030-bbe1-ffa74f28ce2c", "generation": 2, "timestamp": 1754798771.055506, "iteration_found": 16, "metrics": {"nmse": 51.41661857496327, "nmae": 9.659698614053532, "r2": -50.41661857496327, "combined_score": 0.019077918934619117}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00266345584126, "nmae": 17.397471890096064, "r2": -164.00266345584126, "combined_score": 0.006023999730980294}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0027\n- nmae: 17.3975\n- r2: -164.0027\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model fitting with a small additive floor term\nand non\u2010linear refinement via robust least\u2010squares for improved accuracy\nand stability across hyperparameter scales.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a power\u2010law with optional floor:\n      y_pred = C + exp(beta0 + sum_i beta_i * log(x_i))\n    Supports two parameter shapes:\n      - length = 1 + F  => [beta0, beta_1, ..., beta_F]  (no floor, C=0)\n      - length = 2 + F  => [C, beta0, beta_1, ..., beta_F]\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (P,) or (T,P)\n    Returns:\n      preds: (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    # ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,F)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n\n    # detect floor term\n    if P == F + 1:\n        # no floor\n        C = np.zeros((T, 1), dtype=float)\n        beta0 = p[:, 0:1]         # (T,1)\n        slopes = p[:, 1:]         # (T,F)\n    elif P == F + 2:\n        # first param is floor\n        C = p[:, 0:1]             # (T,1)\n        beta0 = p[:, 1:2]         # (T,1)\n        slopes = p[:, 2:]         # (T,F)\n    else:\n        raise ValueError(f\"Parameter length must be {F+1} or {F+2}, got {P}\")\n\n    # compute exponent term: (N, T)\n    # exponent[n,t] = beta0[t] + sum_j slopes[t,j] * logX[n,j]\n    expo = beta0.T + logX.dot(slopes.T)  # (N,T)\n    power_term = np.exp(expo)            # (N,T)\n\n    y_pred = C.T + power_term            # (N,T)\n\n    # if single parameter set, return 1D\n    if T == 1:\n        return y_pred[:, 0]\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law + floor model via:\n      1) closed\u2010form ridge regression in log\u2010space to get initial slopes and intercept\n      2) small positive floor term init\n      3) robust non\u2010linear least squares refinement\n    Returns:\n      params: array of shape (6,) => [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    assert F == 4, \"Expected 4 features\"\n\n    # 1) initial log\u2010linear fit with ridge\n    Xp = np.clip(X, 1e-12, None)\n    logX = np.log(Xp)                   # (N,4)\n    yp = np.clip(y, 1e-12, None)\n    logY = np.log(yp)                   # (N,)\n\n    # design matrix\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    ridge = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::ZTZ.shape[0]+1] += ridge\n    ZTY = Z.T.dot(logY)\n    beta_init = np.linalg.solve(ZTZ, ZTY)  # (5,)\n\n    # 2) initial floor term\n    y_min = np.min(y)\n    C_init = max(0.0, 0.5 * y_min)\n\n    # form full initial param vector: [C, beta0, slopes...]\n    p0 = np.concatenate([[C_init], beta_init])  # length = 6\n\n    # 3) refine via robust least\u2010squares\n    def residuals(p):\n        y_pred = scaling_law_func(X, p)\n        return y_pred - y\n\n    # enforce floor >= 0\n    lb = np.concatenate([[0.0], np.full(beta_init.shape, -np.inf)])\n    ub = np.full_like(p0, np.inf)\n    # robust fitting to lessen outlier impact\n    res = least_squares(\n        residuals,\n        p0,\n        bounds=(lb, ub),\n        loss='soft_l1',\n        f_scale=1.0,\n        max_nfev=5000,\n        xtol=1e-8,\n        ftol=1e-8\n    )\n\n    return res.x\n# EVOLVE-BLOCK-END\n```"]}}}