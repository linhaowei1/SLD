{"id": "137f6657-f0f4-4932-a316-5b65b5e0845d", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Two\u2010term power law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    Implemented in log\u2010space for stability:\n      log_term = logk + \u03a3_i \u03b1_i * log(x_i)\n      loss = exp(log_term) + exp(logc)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6): [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, D = X.shape  # D should be 4\n\n    P = np.asarray(params, dtype=float)\n    if P.ndim == 1:\n        P = P[None, :]\n    T, npars = P.shape\n    if npars != D + 2:\n        raise ValueError(f\"Expected {D+2} params, got {npars}\")\n\n    logk   = P[:, 0]           # shape (T,)\n    alphas = P[:, 1:1+D]       # shape (T,D)\n    logc   = P[:, -1]          # shape (T,)\n\n    # Prevent log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)      # shape (N,D)\n\n    # Compute power\u2010law term in log space\n    # log_term[n,t] = logk[t] + \u03a3_i alphas[t,i] * logX[n,i]\n    log_term = logX.dot(alphas.T) + logk[None, :]\n    term = np.exp(log_term)    # shape (N,T)\n    floor = np.exp(logc)[None, :]  # shape (1,T)\n\n    loss_pred = term + floor     # shape (N,T)\n    if T == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    by minimizing MSE in loss space with L-BFGS-B.\n    Returns params = [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n\n    # Ensure positivity\n    y = np.clip(y, 1e-8, None)\n\n    # Initialize floor c0 just below min(y)\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    if np.any(y_adj <= 0):\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    y_adj = np.clip(y_adj, 1e-8, None)\n\n    # Fit log(y_adj) \u2248 logk + \u03a3 \u03b1_i * log(x_i) by linear regression\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)       # (N,D)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, D+1)\n    sol, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]        # length D\n\n    # Initial parameter vector\n    p0 = np.concatenate([\n        [logk_init],\n        alpha_init,\n        [np.log(c0)]\n    ])  # length D+2\n\n    # Bounds: exponents in [-5,5], floor logc \u2264 log(min(y)*0.9)\n    bounds = [(None, None)] + [(-5.0, 5.0)] * D + [(None, np.log(np.min(y) * 0.9))]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c11193a7-73c8-4030-bbe1-ffa74f28ce2c", "generation": 2, "timestamp": 1754798810.579521, "iteration_found": 21, "metrics": {"nmse": 49.7974662947051, "nmae": 9.503834530665202, "r2": -48.7974662947051, "combined_score": 0.01968602123181556}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00266345584126, "nmae": 17.397471890096064, "r2": -164.00266345584126, "combined_score": 0.006023999730980294}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0027\n- nmae: 17.3975\n- r2: -164.0027\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 49.8062, nmae: 9.5047, r2: -48.8062, combined_score: 0.0197\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.6311)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss given hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params].\n    params = [logk, \u03b11..\u03b1F, logc] of length F+2.\n    Supports 1D or 2D params (for T independent fits).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N, F)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow single or multiple parameter vectors\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]           # shape (T,)\n    exponents = p[:, 1:1+F]       # shape (T, F)\n    logc      = p[:, -1]          # shape (T,)\n\n    # compute prediction\n    logX = np.log(X)              # shape (N, F)\n    # linear term in log-space: (N, T)\n    log_term = logX.dot(exponents.T) + logk[None, :]\n    # back to original space, plus constant floor\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    # if single parameter vector, return 1D array\n    return pred[:, 0] if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law scaling law by minimizing MSE in the original loss space.\n    Returns a parameter vector [logk, \u03b11..\u03b1F, logc] of length F+2.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure positivity\n    y = np.maximum(y, 1e-8)\n\n    # --- Robust initialization via subtractive constant and linear regression on logs ---\n    # initial floor c0 just below the minimum observed loss\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    min_adj = np.min(y_adj)\n    if min_adj <= 1e-8:\n        # if any adjusted values non-positive, lower the floor\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    # enforce positivity\n    y_adj = np.maximum(y_adj, 1e-8)\n\n    # solve log(y_adj) \u2248 logk + \u03a3 \u03b1_i log(x_i) via least squares\n    logy = np.log(y_adj)           # (N,)\n    logX = np.log(X)               # (N, F)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n    sol, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]           # length F\n\n    # initial parameter vector\n    p0 = np.concatenate([ [logk_init], alpha_init, [np.log(c0)] ])  # length F+2\n\n    # --- Define objective: MSE in original loss space ---\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # --- Bounds for stability ---\n    # logk unbounded, exponents in [-5, 5], logc \u2264 log(min(y)*0.99)\n    bnds = []\n    bnds.append((None, None))  # logk\n    for _ in range(F):\n        bnds.append((-5.0, 5.0))  # each exponent \u03b1_i\n    bnds.append((None, np.log(np.min(y) * 0.99)))  # logc\n\n    # --- Optimize ---\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\nKey features: Performs well on nmse (49.8062), Performs well on nmae (9.5047), Performs well on r2 (-48.8062), Performs well on combined_score (0.0197)\n\n\n### Program 2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.6311, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss given hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params].\n    params = [logk, \u03b11..\u03b1F, logc] of length F+2.\n    Supports 1D or 2D params (for T independent fits).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N, F)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow single or multiple parameter vectors\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]           # shape (T,)\n    exponents = p[:, 1:1+F]       # shape (T, F)\n    logc      = p[:, -1]          # shape (T,)\n\n    # compute prediction\n    logX = np.log(X)              # shape (N, F)\n    # linear term in log-space: (N, T)\n    log_term = logX.dot(exponents.T) + logk[None, :]\n    # back to original space, plus constant floor\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    # if single parameter vector, return 1D array\n    return pred[:, 0] if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law scaling law by minimizing MSE in the original loss space.\n    Returns a parameter vector [logk, \u03b11..\u03b1F, logc] of length F+2.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure positivity\n    y = np.maximum(y, 1e-8)\n\n    # --- Robust initialization via subtractive constant and linear regression on logs ---\n    # initial floor c0 just below the minimum observed loss\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    min_adj = np.min(y_adj)\n    if min_adj <= 1e-8:\n        # if any adjusted values non-positive, lower the floor\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    # enforce positivity\n    y_adj = np.maximum(y_adj, 1e-8)\n\n    # solve log(y_adj) \u2248 logk + \u03a3 \u03b1_i log(x_i) via least squares\n    logy = np.log(y_adj)           # (N,)\n    logX = np.log(X)               # (N, F)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n    sol, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]           # length F\n\n    # initial parameter vector\n    p0 = np.concatenate([ [logk_init], alpha_init, [np.log(c0)] ])  # length F+2\n\n    # --- Define objective: MSE in original loss space ---\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # --- Bounds for stability ---\n    # logk unbounded, exponents in [-5, 5], logc \u2264 log(min(y)*0.99)\n    bnds = []\n    bnds.append((None, None))  # logk\n    for _ in range(F):\n        bnds.append((-5.0, 5.0))  # each exponent \u03b1_i\n    bnds.append((None, np.log(np.min(y) * 0.99)))  # logc\n\n    # --- Optimize ---\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.806), Excellent nmae (9.505)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Two\u2010term power law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    Implemented in log\u2010space for stability:\n      log_term = logk + \u03a3_i \u03b1_i * log(x_i)\n      loss = exp(log_term) + exp(logc)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6): [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, D = X.shape  # D should be 4\n\n    P = np.asarray(params, dtype=float)\n    if P.ndim == 1:\n        P = P[None, :]\n    T, npars = P.shape\n    if npars != D + 2:\n        raise ValueError(f\"Expected {D+2} params, got {npars}\")\n\n    logk   = P[:, 0]           # shape (T,)\n    alphas = P[:, 1:1+D]       # shape (T,D)\n    logc   = P[:, -1]          # shape (T,)\n\n    # Prevent log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)      # shape (N,D)\n\n    # Compute power\u2010law term in log space\n    # log_term[n,t] = logk[t] + \u03a3_i alphas[t,i] * logX[n,i]\n    log_term = logX.dot(alphas.T) + logk[None, :]\n    term = np.exp(log_term)    # shape (N,T)\n    floor = np.exp(logc)[None, :]  # shape (1,T)\n\n    loss_pred = term + floor     # shape (N,T)\n    if T == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    by minimizing MSE in loss space with L-BFGS-B.\n    Returns params = [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n\n    # Ensure positivity\n    y = np.clip(y, 1e-8, None)\n\n    # Initialize floor c0 just below min(y)\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    if np.any(y_adj <= 0):\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    y_adj = np.clip(y_adj, 1e-8, None)\n\n    # Fit log(y_adj) \u2248 logk + \u03a3 \u03b1_i * log(x_i) by linear regression\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)       # (N,D)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, D+1)\n    sol, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]        # length D\n\n    # Initial parameter vector\n    p0 = np.concatenate([\n        [logk_init],\n        alpha_init,\n        [np.log(c0)]\n    ])  # length D+2\n\n    # Bounds: exponents in [-5,5], floor logc \u2264 log(min(y)*0.9)\n    bounds = [(None, None)] + [(-5.0, 5.0)] * D + [(None, np.log(np.min(y) * 0.9))]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```"]}}}