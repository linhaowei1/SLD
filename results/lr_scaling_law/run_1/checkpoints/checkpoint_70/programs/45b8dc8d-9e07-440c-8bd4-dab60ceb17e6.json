{"id": "45b8dc8d-9e07-440c-8bd4-dab60ceb17e6", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a power\u2010law with asymptotic offset and an interaction term:\n      loss = L_inf + exp(\u03b80 + \u03b81\u00b7ln(lr) + \u03b82\u00b7[ln(lr)]^2\n                     + \u03b83\u00b7ln(bsz) + \u03b84\u00b7ln(data_size)\n                     + \u03b85\u00b7ln(param_size) + \u03b86\u00b7[ln(lr)\u00b7ln(param_size)])\n\n    Args:\n      data_points: array of shape (N,4) in columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 8:\n                   [L_inf, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 8:\n        raise ValueError(f\"params must have length 8, got {p.size}\")\n\n    # Numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)  # shape (N,4)\n    lr       = lnX[:, 0]\n    bsz      = lnX[:, 1]\n    data_sz  = lnX[:, 2]\n    param_sz = lnX[:, 3]\n\n    # Unpack parameters\n    L_inf = p[0]\n    theta = p[1:]  # length 7\n\n    # Design matrix Z: [1, ln(lr), ln(lr)^2, ln(bsz), ln(data), ln(param), ln(lr)*ln(param)]\n    Z = np.column_stack([\n        np.ones_like(lr),\n        lr,\n        lr * lr,\n        bsz,\n        data_sz,\n        param_sz,\n        lr * param_sz\n    ])  # shape (N,7)\n\n    ln_term = Z.dot(theta)  # shape (N,)\n    return L_inf + np.exp(ln_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter model by a two\u2010stage procedure:\n      1) closed\u2010form ridge regression in log\u2010space to initialize\n      2) L\u2010BFGS\u2010B to refine all parameters by minimizing MSE in original loss.\n\n    Model:\n      loss \u2248 L_inf + exp(Z \u00b7 \u03b8)\n    where columns of Z are as in scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safeguard zeros before logs\n    eps = 1e-12\n    X_cl = np.clip(X, eps, None)\n    y_cl = np.clip(y, eps, None)\n\n    lnX = np.log(X_cl)\n    lr       = lnX[:, 0]\n    bsz      = lnX[:, 1]\n    data_sz  = lnX[:, 2]\n    param_sz = lnX[:, 3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N\u00d77)\n    Z = np.column_stack([\n        np.ones(N),\n        lr,\n        lr * lr,\n        bsz,\n        data_sz,\n        param_sz,\n        lr * param_sz\n    ])\n\n    # --- Stage 1: initialize by ridge regression in log\u2010space ---\n    y_min = y_cl.min()\n    L_inf_init = 0.5 * y_min\n    y_off = np.clip(y_cl - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n\n    # ridge regularization scaled to feature magnitudes\n    M = Z.T.dot(Z)\n    ridge = 1e-6 * np.mean(np.diag(M))\n    A = M + ridge * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y_off)\n    theta_init = np.linalg.solve(A, b)  # shape (7,)\n\n    p_init = np.concatenate(([L_inf_init], theta_init))  # shape (8,)\n\n    # --- Stage 2: refine with L-BFGS-B minimizing MSE in original loss ---\n    bounds = [(0.0, y_min * 0.9)] + [(-np.inf, np.inf)] * (theta_init.size)\n\n    def objective(p):\n        # Recompute predictions and MSE\n        L_inf = p[0]\n        theta = p[1:]\n        ln_pred = Z.dot(theta)\n        preds = L_inf + np.exp(ln_pred)\n        return np.mean((preds - y_cl) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            p_init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 300, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n        else:\n            return p_init\n    except Exception:\n        return p_init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "16b4d0e5-106d-495c-922f-76a0dd282a0b", "generation": 4, "timestamp": 1754799639.1585073, "iteration_found": 65, "metrics": {"nmse": 122.82992619476519, "nmae": 15.017061452925468, "r2": -121.82992619476519, "combined_score": 0.008075592312210183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.3497496996616465, "nmae": 1.8601311458777188, "r2": -2.3497496996616465, "combined_score": 0.22989828588936664}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.3497\n- nmae: 1.8601\n- r2: -2.3497\n- combined_score: 0.2299\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 151.5895, nmae: 16.6718, r2: -150.5895, combined_score: 0.0066\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 49.9970, nmae: 9.5232, r2: -48.9970, combined_score: 0.0196\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.3497, nmae: 1.8601, r2: -2.3497, combined_score: 0.2299\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.7725)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # shape (N,4)\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    # features: [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4]\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial\u2010in\u2010log\u2010space scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))    # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))    # shape (N,)\n\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization for stability\n    num_feats = Z.shape[1]\n    lambd = 1e-4\n    A = Z.T.dot(Z)\n    A[np.diag_indices(num_feats)] += lambd\n    b = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.3497), Performs well on nmae (1.8601), Performs well on r2 (-2.3497), Performs well on combined_score (0.2299)\n\n\n### Program 2 (Score: 2.6357)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus multiplicative power\u2010law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) containing\n                   [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Avoid zeros or negatives before log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]      # length 4\n\n    log_terms = w0 + X_log.dot(w)      # shape (N,)\n    preds     = L_inf + np.exp(log_terms)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six\u2010parameter scaling\u2010law model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    by minimizing the mean squared error via L-BFGS-B.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of shape (6,) [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be 1D and match number of data_points\")\n\n    # Numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)\n\n    # Initial guess: offset half of minimum loss, zero slopes\n    min_y   = y.min()\n    init_L  = max(0.0, min_y * 0.5)\n    # w0 such that exp(w0) approximates the average surplus over L_inf\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(4, dtype=np.float64)\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # Bounds to keep L_inf in [0, 0.9*min_y], others unbounded\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # Objective: mean squared error in original loss space\n    def _objective(p):\n        L_inf = p[0]\n        w0    = p[1]\n        w     = p[2:]\n        preds = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((preds - y) ** 2)\n\n    try:\n        res = minimize(\n            _objective,\n            init_params,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n        else:\n            return init_params\n    except Exception:\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (49.9970), Performs well on nmae (9.5232), Performs well on r2 (-48.9970), Performs well on combined_score (0.0196)\n\n\n### Program 3 (Score: 4.4196)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an asymptotic offset plus multiplicative power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6) with entries\n                   [L_inf, w0, w1, w2, w3, w4]\n                   If params is 2D (T,6), returns shape (N,T).\n\n    Returns:\n      preds:       array of shape (N,) (or (N,T)) of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # Broadcast single param to shape (1,6)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"params must have shape (6,) or (T,6), got {p.shape}\")\n\n    # Unpack parameters\n    L_inf    = p[:, 0]        # shape (T,)\n    w0       = p[:, 1]        # shape (T,)\n    slopes   = p[:, 2:]       # shape (T,4)\n\n    # Compute log-term: (N,4) @ (4,T) + (T,) -> (N,T)\n    ln_term = lnX.dot(slopes.T) + w0\n    # Convert back to loss-space and add offset\n    Y = np.exp(ln_term) + L_inf\n\n    # If single parameter set, return 1D array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model:\n      loss = L_inf + exp(w0 + w1*ln(lr) + w2*ln(bsz)\n                     + w3*ln(data_size) + w4*ln(param_size))\n    via a two-stage procedure:\n      1) closed-form ridge regression to initialize [L_inf, w0..w4]\n      2) refine all parameters with L-BFGS-B minimizing MSE.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (6,) with optimized\n                   [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    # Convert inputs\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be 1D and match number of data_points\")\n\n    # Numerical safeguards\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    lnX = np.log(X)    # (N,4)\n\n    # Design matrix for multiplicative term: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    N = X.shape[0]\n    Z = np.hstack([np.ones((N,1)), lnX])  # (N,5)\n\n    # --- Stage 1: initialize L_inf and slopes via closed-form ridge ---\n    # Pick L_inf_init as half the minimum observed loss\n    y_min = y.min()\n    L_inf_init = 0.5 * y_min\n    # Offset targets\n    y_off = np.clip(y - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n\n    # Ridge regularization scale proportional to data variance\n    M = Z.T.dot(Z)\n    ridge = 1e-6 * np.mean(np.diag(M))\n    M_reg = M + ridge * np.eye(5)\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M_reg, v)  # shape (5,)\n\n    # Pack initial parameter vector: [L_inf, w0..w4]\n    p_init = np.empty(6, dtype=np.float64)\n    p_init[0] = L_inf_init\n    p_init[1:] = w_init\n\n    # --- Stage 2: refine with L-BFGS-B ---\n    # Bounds: L_inf in [0, 0.9 * y_min]; slopes unbounded\n    bounds = [(0.0, y_min * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # Objective: mean squared error in original loss space\n    def objective(p):\n        L_inf = p[0]\n        w_vec = p[1:]\n        ln_term = Z.dot(w_vec)\n        pred = L_inf + np.exp(ln_term)\n        return np.mean((pred - y) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            p_init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        p_opt = res.x if res.success else p_init\n    except Exception:\n        p_opt = p_init\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (151.5895), Performs well on nmae (16.6718), Performs well on r2 (-150.5895), Performs well on combined_score (0.0066)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.5588)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model with a quadratic learning\u2010rate term.\nWe model in log\u2010space:\n   ln(loss) = w0\n             + w1 * ln(lr)\n             + w2 * [ln(lr)]^2\n             + w3 * ln(bsz)\n             + w4 * ln(data_size)\n             + w5 * ln(non_embedding_param_size)\n\nThis form captures the typical U\u2010shaped lr dependence and\nremains linear in transformed features for stable, closed\u2010form fitting.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via the enhanced power law.\n\n    Args:\n        data_points: array of shape (N,4) with columns\n                     [lr, bsz, data_size, non_embedding_param_size]\n        params:      array of length 6 (or shape (T,6) for T sets)\n                     [w0, w1, w2, w3, w4, w5]\n\n    Returns:\n        preds: array of shape (N,) (or (N,T)) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    # allow broadcasting over multiple parameter sets\n    if p.ndim == 1:\n        p = p.reshape(1, -1)\n    if p.shape[1] != 6:\n        raise ValueError(f\"params must have length 6, got {p.shape[1]}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    lr  = np.clip(X[:, 0], eps, None)\n    bsz = np.clip(X[:, 1], eps, None)\n    D   = np.clip(X[:, 2], eps, None)\n    M   = np.clip(X[:, 3], eps, None)\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    # build feature matrix: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)  # shape (N,6)\n\n    # compute ln_pred = Z @ p^T  -> shape (N, T)\n    ln_pred = Z.dot(p.T)\n    preds = np.exp(ln_pred)\n\n    # if only one parameter set, return 1D array\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by ridge\u2010regularized linear regression\n    in the transformed feature space:\n        ln(loss) \u2248 w0 + w1*ln(lr) + w2*[ln(lr)]^2\n                   + w3*ln(bsz) + w4*ln(data_size) + w5*ln(non_embedding_param_size)\n\n    Args:\n        data_points: array of shape (N,4)\n        loss_values: array of shape (N,)\n\n    Returns:\n        params: array of length 6: [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    lr  = np.clip(X[:, 0], eps, None)\n    bsz = np.clip(X[:, 1], eps, None)\n    D   = np.clip(X[:, 2], eps, None)\n    M   = np.clip(X[:, 3], eps, None)\n    ln_y = np.log(np.clip(y, eps, None))\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    # build design matrix Z: shape (N,6)\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    lambd = 1e-6\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n    w = np.linalg.solve(A, b)  # shape (6,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 6.4171, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with:\n      - quadratic term in log(lr),\n      - one interaction between log(lr) and log(param_size).\n    Features:\n      f0 = 1\n      f1 = log(lr)\n      f2 = [log(lr)]^2\n      f3 = log(bsz)\n      f4 = log(data_size)\n      f5 = log(non_embedding_param_size)\n      f6 = log(lr) * log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      (7,) array of feature weights [w0..w6]\n\n    Returns:\n      preds: (N,) array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model via ridge-regularized least squares:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                   + w4*log(data_size) + w5*log(param_size)\n                   + w6*log(lr)*log(param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: (N,) array of observed LM losses\n\n    Returns:\n      params: (7,) array of fitted weights [w0..w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n\n    # ridge regression: adapt regularization to feature scale\n    ATA = A.T.dot(A)\n    # scale regularization by average diagonal magnitude\n    ridge = 1e-3 * np.mean(np.diag(ATA))\n    ATy = A.T.dot(logy)\n    w = np.linalg.solve(ATA + ridge * np.eye(ATA.shape[0]), ATy)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (332.536), Excellent nmae (24.665)\n\n\n### Inspiration 2 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Excellent nmse (165.003), Excellent nmae (17.397), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.397)\n\n\n### Inspiration 4 (Score: 4.4196, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an asymptotic offset plus multiplicative power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6) with entries\n                   [L_inf, w0, w1, w2, w3, w4]\n                   If params is 2D (T,6), returns shape (N,T).\n\n    Returns:\n      preds:       array of shape (N,) (or (N,T)) of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # Broadcast single param to shape (1,6)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"params must have shape (6,) or (T,6), got {p.shape}\")\n\n    # Unpack parameters\n    L_inf    = p[:, 0]        # shape (T,)\n    w0       = p[:, 1]        # shape (T,)\n    slopes   = p[:, 2:]       # shape (T,4)\n\n    # Compute log-term: (N,4) @ (4,T) + (T,) -> (N,T)\n    ln_term = lnX.dot(slopes.T) + w0\n    # Convert back to loss-space and add offset\n    Y = np.exp(ln_term) + L_inf\n\n    # If single parameter set, return 1D array\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model:\n      loss = L_inf + exp(w0 + w1*ln(lr) + w2*ln(bsz)\n                     + w3*ln(data_size) + w4*ln(param_size))\n    via a two-stage procedure:\n      1) closed-form ridge regression to initialize [L_inf, w0..w4]\n      2) refine all parameters with L-BFGS-B minimizing MSE.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (6,) with optimized\n                   [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    # Convert inputs\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be 1D and match number of data_points\")\n\n    # Numerical safeguards\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    lnX = np.log(X)    # (N,4)\n\n    # Design matrix for multiplicative term: [1, ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    N = X.shape[0]\n    Z = np.hstack([np.ones((N,1)), lnX])  # (N,5)\n\n    # --- Stage 1: initialize L_inf and slopes via closed-form ridge ---\n    # Pick L_inf_init as half the minimum observed loss\n    y_min = y.min()\n    L_inf_init = 0.5 * y_min\n    # Offset targets\n    y_off = np.clip(y - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n\n    # Ridge regularization scale proportional to data variance\n    M = Z.T.dot(Z)\n    ridge = 1e-6 * np.mean(np.diag(M))\n    M_reg = M + ridge * np.eye(5)\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M_reg, v)  # shape (5,)\n\n    # Pack initial parameter vector: [L_inf, w0..w4]\n    p_init = np.empty(6, dtype=np.float64)\n    p_init[0] = L_inf_init\n    p_init[1:] = w_init\n\n    # --- Stage 2: refine with L-BFGS-B ---\n    # Bounds: L_inf in [0, 0.9 * y_min]; slopes unbounded\n    bounds = [(0.0, y_min * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # Objective: mean squared error in original loss space\n    def objective(p):\n        L_inf = p[0]\n        w_vec = p[1:]\n        ln_term = Z.dot(w_vec)\n        pred = L_inf + np.exp(ln_term)\n        return np.mean((pred - y) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            p_init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        p_opt = res.x if res.success else p_init\n    except Exception:\n        p_opt = p_init\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (151.590), Excellent nmae (16.672)\n\n\n### Inspiration 5 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss under a simple power\u2010law (log\u2013linear) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:       (N,) array of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log features\n    X_log = np.log(X)\n    # linear combination in log\u2010space\n    # log_pred[i] = w0 + sum_{j=1..4} wj * X_log[i,j-1]\n    log_pred = params[0] + X_log.dot(params[1:])\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via ridge\u2010regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of observed lm losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log\u2010transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n    N, F = X_log.shape  # F should be 4\n    # build design matrix [1 | X_log]\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n    # ridge regularization for numerical stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    # solve (A^T A + \u03bbI) w = A^T y_log\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.398)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # shape (N,4)\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    # features: [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4]\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial\u2010in\u2010log\u2010space scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))    # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))    # shape (N,)\n\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization for stability\n    num_feats = Z.shape[1]\n    lambd = 1e-4\n    A = Z.T.dot(Z)\n    A[np.diag_indices(num_feats)] += lambd\n    b = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a power\u2010law with asymptotic offset and an interaction term:\n      loss = L_inf + exp(\u03b80 + \u03b81\u00b7ln(lr) + \u03b82\u00b7[ln(lr)]^2\n                     + \u03b83\u00b7ln(bsz) + \u03b84\u00b7ln(data_size)\n                     + \u03b85\u00b7ln(param_size) + \u03b86\u00b7[ln(lr)\u00b7ln(param_size)])\n\n    Args:\n      data_points: array of shape (N,4) in columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 8:\n                   [L_inf, \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 8:\n        raise ValueError(f\"params must have length 8, got {p.size}\")\n\n    # Numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)  # shape (N,4)\n    lr       = lnX[:, 0]\n    bsz      = lnX[:, 1]\n    data_sz  = lnX[:, 2]\n    param_sz = lnX[:, 3]\n\n    # Unpack parameters\n    L_inf = p[0]\n    theta = p[1:]  # length 7\n\n    # Design matrix Z: [1, ln(lr), ln(lr)^2, ln(bsz), ln(data), ln(param), ln(lr)*ln(param)]\n    Z = np.column_stack([\n        np.ones_like(lr),\n        lr,\n        lr * lr,\n        bsz,\n        data_sz,\n        param_sz,\n        lr * param_sz\n    ])  # shape (N,7)\n\n    ln_term = Z.dot(theta)  # shape (N,)\n    return L_inf + np.exp(ln_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter model by a two\u2010stage procedure:\n      1) closed\u2010form ridge regression in log\u2010space to initialize\n      2) L\u2010BFGS\u2010B to refine all parameters by minimizing MSE in original loss.\n\n    Model:\n      loss \u2248 L_inf + exp(Z \u00b7 \u03b8)\n    where columns of Z are as in scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safeguard zeros before logs\n    eps = 1e-12\n    X_cl = np.clip(X, eps, None)\n    y_cl = np.clip(y, eps, None)\n\n    lnX = np.log(X_cl)\n    lr       = lnX[:, 0]\n    bsz      = lnX[:, 1]\n    data_sz  = lnX[:, 2]\n    param_sz = lnX[:, 3]\n    N = X.shape[0]\n\n    # Build design matrix Z (N\u00d77)\n    Z = np.column_stack([\n        np.ones(N),\n        lr,\n        lr * lr,\n        bsz,\n        data_sz,\n        param_sz,\n        lr * param_sz\n    ])\n\n    # --- Stage 1: initialize by ridge regression in log\u2010space ---\n    y_min = y_cl.min()\n    L_inf_init = 0.5 * y_min\n    y_off = np.clip(y_cl - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n\n    # ridge regularization scaled to feature magnitudes\n    M = Z.T.dot(Z)\n    ridge = 1e-6 * np.mean(np.diag(M))\n    A = M + ridge * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y_off)\n    theta_init = np.linalg.solve(A, b)  # shape (7,)\n\n    p_init = np.concatenate(([L_inf_init], theta_init))  # shape (8,)\n\n    # --- Stage 2: refine with L-BFGS-B minimizing MSE in original loss ---\n    bounds = [(0.0, y_min * 0.9)] + [(-np.inf, np.inf)] * (theta_init.size)\n\n    def objective(p):\n        # Recompute predictions and MSE\n        L_inf = p[0]\n        theta = p[1:]\n        ln_pred = Z.dot(theta)\n        preds = L_inf + np.exp(ln_pred)\n        return np.mean((preds - y_cl) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            p_init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 300, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n        else:\n            return p_init\n    except Exception:\n        return p_init\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Introduced an asymptotic offset `L_inf` to capture residual loss floors.\n- Added a quadratic term in `ln(lr)` to model the U-shaped learning\u2010rate effect.\n- Included an interaction feature `ln(lr)\u00b7ln(param_size)` to capture joint effects of learning-rate and model size.\n- Employed a two-stage fitting procedure: ridge regression for a stable closed-form initialization, followed by L-BFGS-B refinement to directly minimize mean squared error in loss space.\n- Kept the total number of parameters modest (8) for parameter-efficiency and improved numerical stability.\n"]}}}