{"id": "d947d345-a5ca-4919-a264-4e0245f2bff2", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter\n    additive + multiplicative power-law model in log-space:\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:       array-like of length 6: [b, logA,\n                   e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds:        NumPy array of length N with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    # Add epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing a relative MSE with a small L2 penalty on the exponents.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n    Returns:\n      params: for single-target (N,) returns a 1D array length 6;\n              for multi-target (N,T) returns a 2D array shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Handle multi-target outputs by stacking solutions\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    N = X.shape[0]\n\n    # Trivial or degenerate case\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=float)\n\n    eps = 1e-12\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n    X_log = np.log(X + eps)\n\n    # Generate multiple initial guesses for [b, logA, e_lr, e_bsz, e_data, e_model]\n    b_guesses = [0.0, max(0.0, 0.3 * y_min)]\n    inits = []\n    for b0 in b_guesses:\n        # Adjusted target for linear regression\n        y_adj = np.clip(y - b0, eps, None)\n        A = np.concatenate([np.ones((N, 1)), X_log], axis=1)\n        theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n        # Primary initialization\n        base = np.concatenate([[b0], theta])\n        inits.append(base)\n        # Scaled-down variant to explore other basins\n        scaled = np.concatenate([[b0, theta[0] - 1.0], 0.5 * theta[1:]])\n        inits.append(scaled)\n\n    # Bounds for robustness\n    bounds = [\n        (0.0, 2.0 * y_max if y_max > 0 else None),  # b \u2265 0\n        (None, None),                               # logA unbounded\n        (-5.0, 5.0),                                # e_lr\n        (-5.0, 5.0),                                # e_bsz\n        (-5.0, 5.0),                                # e_data\n        (-5.0, 5.0),                                # e_model\n    ]\n\n    # Objective: relative MSE + tiny L2 penalty on exponents\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        w = 1.0 / (y + eps)\n        rel_mse = np.mean(((pred - y) * w) ** 2)\n        reg = 1e-6 * np.sum(p[2:] ** 2)\n        return rel_mse + reg\n\n    best_p = None\n    best_val = np.inf\n\n    # Optimize from each initialization\n    for init in inits:\n        init = init.copy()\n        # Clip bias term if it exceeds bounds\n        lo, hi = bounds[0]\n        if hi is not None:\n            init[0] = np.clip(init[0], lo, hi)\n        try:\n            res = minimize(\n                objective,\n                init,\n                method=\"L-BFGS-B\",\n                bounds=bounds,\n                options={'maxiter': 500}\n            )\n            if res.success and res.fun < best_val:\n                best_val = res.fun\n                best_p = res.x\n        except Exception:\n            continue\n\n    # Fallback to the first init if optimization fails across all\n    return best_p if best_p is not None else inits[0]\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3bca97ee-062c-4abc-ad12-2300cbbb4400", "generation": 4, "timestamp": 1754803067.9753158, "iteration_found": 27, "metrics": {"nmse": 92.12233886651549, "nmae": 12.74443493794578, "r2": -91.12233886651549, "combined_score": 0.010738561897950518}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 72.36946114292599, "nmae": 11.275117588813828, "r2": -71.36946114292599, "combined_score": 0.013629648963237838}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 72.3695\n- nmae: 11.2751\n- r2: -71.3695\n- combined_score: 0.0136\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 92.1223, nmae: 12.7444, r2: -91.1223, combined_score: 0.0107\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 72.3695, nmae: 11.2751, r2: -71.3695, combined_score: 0.0136\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.0722)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nModel form (additive + multiplicative power\u2010law in log\u2010space):\n  loss \u2248 b + exp(logA\n                  + e_lr*log(lr)\n                  + e_bsz*log(bsz)\n                  + e_data*log(data_size)\n                  + e_model*log(non_embedding_param_size))\nFitting strategy:\n  1) Initialize b = 0.5 * min(loss) (floored at 0).\n  2) Linear least\u2010squares on log(loss - b) to get [logA, e_lr, e_bsz, e_data, e_model].\n  3) Refine all 6 parameters via L-BFGS-B minimizing MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.ravel(params).astype(float)\n    # Add small epsilon to inputs to avoid log(0)\n    eps = 1e-16\n    lr, bsz, D, Np = (X[:,0] + eps, X[:,1] + eps, X[:,2] + eps, X[:,3] + eps)\n    # Compute power\u2010law in log\u2010space\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error via L-BFGS-B, with a robust\n    linear least\u2010squares initialization in log\u2010space.\n\n    Supports single\u2010target (shape (N,)) or multi\u2010target (shape (N,T)).\n    Returns:\n      - single output: 1D array of length 6\n      - multi\u2010output : 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Multi\u2010target handling\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    # 1) Initial offset b0\n    y_min = float(np.min(y))\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare linear system for log(y - b0)\n    r = y - b0\n    # Clip to positive\n    r = np.clip(r, 1e-12, None)\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_params)]\n    logs = np.log(X + 1e-16)\n    Z = np.column_stack([\n        np.ones_like(r),\n        logs[:, 0],\n        logs[:, 1],\n        logs[:, 2],\n        logs[:, 3],\n    ])\n    # Solve least\u2010squares: Z @ coeffs \u2248 log(r)\n    coeffs, *_ = np.linalg.lstsq(Z, np.log(r), rcond=None)\n    # coeffs = [logA, e_lr, e_bsz, e_data, e_model]\n    init_params = np.concatenate([[b0], coeffs])\n\n    # 3) Bounds for robust optimization\n    y_max = float(np.max(y))\n    bounds = [\n        (0.0, max(y_max, b0 * 2)),  # b in [0, 2*y_max]\n        (None, None),               # logA unbounded\n        (-5.0, 5.0),                # e_lr\n        (-5.0, 5.0),                # e_bsz\n        (-5.0, 5.0),                # e_data\n        (-5.0, 5.0),                # e_model\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Refine via L-BFGS-B\n    res = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000}\n    )\n    if res.success:\n        return res.x\n    else:\n        # Fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (72.3695), Performs well on nmae (11.2751), Performs well on r2 (-71.3695), Performs well on combined_score (0.0136)\n\n\n### Program 2 (Score: 3.4388)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a 6\u2010parameter power\u2010law + bias:\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       length\u20106 array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    eps = 1e-12\n    # ensure strictly positive before log\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    M   = X[:, 3] + eps\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing a weighted (relative) MSE with a small L2 penalty on exponents.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: length\u20106 array of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n    N = X.shape[0]\n    # trivial case\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=float)\n\n    eps = 1e-12\n    y_min, y_max = float(y.min()), float(y.max())\n    # precompute logs of inputs\n    X_log = np.log(X + eps)\n\n    # Generate initial candidates via simple log\u2010linear regression with two bias guesses\n    b_guesses = [0.0, max(0.0, y_min * 0.3)]\n    inits = []\n    for b0 in b_guesses:\n        y_adj = np.clip(y - b0, eps, None)\n        A = np.concatenate([np.ones((N, 1)), X_log], axis=1)\n        theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n        logA0 = theta[0]\n        exps0 = theta[1:]\n        # primary init\n        inits.append(np.concatenate([[b0, logA0], exps0]))\n        # scaled\u2010down variant to catch other basins\n        inits.append(np.concatenate([[b0, logA0 - 1.0], 0.5 * exps0]))\n\n    # bounds for optimization\n    bounds = [\n        (0.0, y_max * 2.0 if y_max > 0 else None),  # b \u2265 0\n        (None, None),                               # logA unbounded\n        (-5.0, 5.0), (-5.0, 5.0),                   # e_lr, e_bsz\n        (-5.0, 5.0), (-5.0, 5.0)                    # e_data, e_model\n    ]\n\n    # objective: relative MSE + small L2 penalty on exponents\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        w = 1.0 / (y + eps)                          # weight by 1/y\n        rel_mse = np.mean(((pred - y) * w) ** 2)\n        reg = 1e-6 * np.sum(np.square(p[2:]))       # tiny penalty on exponents\n        return rel_mse + reg\n\n    best_p, best_val = None, np.inf\n    for init in inits:\n        # ensure bias init within bounds\n        init = init.copy()\n        lo, hi = bounds[0]\n        if hi is not None:\n            init[0] = np.clip(init[0], lo, hi)\n        try:\n            res = minimize(objective,\n                           init,\n                           method=\"L-BFGS-B\",\n                           bounds=bounds)\n            if res.success and res.fun < best_val:\n                best_val, best_p = res.fun, res.x\n        except Exception:\n            continue\n\n    # fallback to first init if optimization failed\n    return best_p if best_p is not None else inits[0]\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (92.1223), Performs well on nmae (12.7444), Performs well on r2 (-91.1223), Performs well on combined_score (0.0107)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.4388, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a 6\u2010parameter power\u2010law + bias:\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       length\u20106 array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    eps = 1e-12\n    # ensure strictly positive before log\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    M   = X[:, 3] + eps\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing a weighted (relative) MSE with a small L2 penalty on exponents.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: length\u20106 array of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n    N = X.shape[0]\n    # trivial case\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=float)\n\n    eps = 1e-12\n    y_min, y_max = float(y.min()), float(y.max())\n    # precompute logs of inputs\n    X_log = np.log(X + eps)\n\n    # Generate initial candidates via simple log\u2010linear regression with two bias guesses\n    b_guesses = [0.0, max(0.0, y_min * 0.3)]\n    inits = []\n    for b0 in b_guesses:\n        y_adj = np.clip(y - b0, eps, None)\n        A = np.concatenate([np.ones((N, 1)), X_log], axis=1)\n        theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n        logA0 = theta[0]\n        exps0 = theta[1:]\n        # primary init\n        inits.append(np.concatenate([[b0, logA0], exps0]))\n        # scaled\u2010down variant to catch other basins\n        inits.append(np.concatenate([[b0, logA0 - 1.0], 0.5 * exps0]))\n\n    # bounds for optimization\n    bounds = [\n        (0.0, y_max * 2.0 if y_max > 0 else None),  # b \u2265 0\n        (None, None),                               # logA unbounded\n        (-5.0, 5.0), (-5.0, 5.0),                   # e_lr, e_bsz\n        (-5.0, 5.0), (-5.0, 5.0)                    # e_data, e_model\n    ]\n\n    # objective: relative MSE + small L2 penalty on exponents\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        w = 1.0 / (y + eps)                          # weight by 1/y\n        rel_mse = np.mean(((pred - y) * w) ** 2)\n        reg = 1e-6 * np.sum(np.square(p[2:]))       # tiny penalty on exponents\n        return rel_mse + reg\n\n    best_p, best_val = None, np.inf\n    for init in inits:\n        # ensure bias init within bounds\n        init = init.copy()\n        lo, hi = bounds[0]\n        if hi is not None:\n            init[0] = np.clip(init[0], lo, hi)\n        try:\n            res = minimize(objective,\n                           init,\n                           method=\"L-BFGS-B\",\n                           bounds=bounds)\n            if res.success and res.fun < best_val:\n                best_val, best_p = res.fun, res.x\n        except Exception:\n            continue\n\n    # fallback to first init if optimization failed\n    return best_p if best_p is not None else inits[0]\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (92.122), Excellent nmae (12.744)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nModel form (additive + multiplicative power\u2010law in log\u2010space):\n  loss \u2248 b + exp(logA\n                  + e_lr*log(lr)\n                  + e_bsz*log(bsz)\n                  + e_data*log(data_size)\n                  + e_model*log(non_embedding_param_size))\nFitting strategy:\n  1) Initialize b = 0.5 * min(loss) (floored at 0).\n  2) Linear least\u2010squares on log(loss - b) to get [logA, e_lr, e_bsz, e_data, e_model].\n  3) Refine all 6 parameters via L-BFGS-B minimizing MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.ravel(params).astype(float)\n    # Add small epsilon to inputs to avoid log(0)\n    eps = 1e-16\n    lr, bsz, D, Np = (X[:,0] + eps, X[:,1] + eps, X[:,2] + eps, X[:,3] + eps)\n    # Compute power\u2010law in log\u2010space\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error via L-BFGS-B, with a robust\n    linear least\u2010squares initialization in log\u2010space.\n\n    Supports single\u2010target (shape (N,)) or multi\u2010target (shape (N,T)).\n    Returns:\n      - single output: 1D array of length 6\n      - multi\u2010output : 2D array of shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Multi\u2010target handling\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    # 1) Initial offset b0\n    y_min = float(np.min(y))\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) Prepare linear system for log(y - b0)\n    r = y - b0\n    # Clip to positive\n    r = np.clip(r, 1e-12, None)\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_params)]\n    logs = np.log(X + 1e-16)\n    Z = np.column_stack([\n        np.ones_like(r),\n        logs[:, 0],\n        logs[:, 1],\n        logs[:, 2],\n        logs[:, 3],\n    ])\n    # Solve least\u2010squares: Z @ coeffs \u2248 log(r)\n    coeffs, *_ = np.linalg.lstsq(Z, np.log(r), rcond=None)\n    # coeffs = [logA, e_lr, e_bsz, e_data, e_model]\n    init_params = np.concatenate([[b0], coeffs])\n\n    # 3) Bounds for robust optimization\n    y_max = float(np.max(y))\n    bounds = [\n        (0.0, max(y_max, b0 * 2)),  # b in [0, 2*y_max]\n        (None, None),               # logA unbounded\n        (-5.0, 5.0),                # e_lr\n        (-5.0, 5.0),                # e_bsz\n        (-5.0, 5.0),                # e_data\n        (-5.0, 5.0),                # e_model\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Refine via L-BFGS-B\n    res = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000}\n    )\n    if res.success:\n        return res.x\n    else:\n        # Fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter\n    additive + multiplicative power-law model in log-space:\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:       array-like of length 6: [b, logA,\n                   e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds:        NumPy array of length N with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    # Add epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing a relative MSE with a small L2 penalty on the exponents.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n    Returns:\n      params: for single-target (N,) returns a 1D array length 6;\n              for multi-target (N,T) returns a 2D array shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Handle multi-target outputs by stacking solutions\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    N = X.shape[0]\n\n    # Trivial or degenerate case\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=float)\n\n    eps = 1e-12\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n    X_log = np.log(X + eps)\n\n    # Generate multiple initial guesses for [b, logA, e_lr, e_bsz, e_data, e_model]\n    b_guesses = [0.0, max(0.0, 0.3 * y_min)]\n    inits = []\n    for b0 in b_guesses:\n        # Adjusted target for linear regression\n        y_adj = np.clip(y - b0, eps, None)\n        A = np.concatenate([np.ones((N, 1)), X_log], axis=1)\n        theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n        # Primary initialization\n        base = np.concatenate([[b0], theta])\n        inits.append(base)\n        # Scaled-down variant to explore other basins\n        scaled = np.concatenate([[b0, theta[0] - 1.0], 0.5 * theta[1:]])\n        inits.append(scaled)\n\n    # Bounds for robustness\n    bounds = [\n        (0.0, 2.0 * y_max if y_max > 0 else None),  # b \u2265 0\n        (None, None),                               # logA unbounded\n        (-5.0, 5.0),                                # e_lr\n        (-5.0, 5.0),                                # e_bsz\n        (-5.0, 5.0),                                # e_data\n        (-5.0, 5.0),                                # e_model\n    ]\n\n    # Objective: relative MSE + tiny L2 penalty on exponents\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        w = 1.0 / (y + eps)\n        rel_mse = np.mean(((pred - y) * w) ** 2)\n        reg = 1e-6 * np.sum(p[2:] ** 2)\n        return rel_mse + reg\n\n    best_p = None\n    best_val = np.inf\n\n    # Optimize from each initialization\n    for init in inits:\n        init = init.copy()\n        # Clip bias term if it exceeds bounds\n        lo, hi = bounds[0]\n        if hi is not None:\n            init[0] = np.clip(init[0], lo, hi)\n        try:\n            res = minimize(\n                objective,\n                init,\n                method=\"L-BFGS-B\",\n                bounds=bounds,\n                options={'maxiter': 500}\n            )\n            if res.success and res.fun < best_val:\n                best_val = res.fun\n                best_p = res.x\n        except Exception:\n            continue\n\n    # Fallback to the first init if optimization fails across all\n    return best_p if best_p is not None else inits[0]\n# EVOLVE-BLOCK-END\n```"]}}}