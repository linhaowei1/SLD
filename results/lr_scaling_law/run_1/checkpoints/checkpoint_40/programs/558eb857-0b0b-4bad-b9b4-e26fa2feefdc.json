{"id": "558eb857-0b0b-4bad-b9b4-e26fa2feefdc", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i)) + c\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (6,) or (T,6),\n                   each row [beta0, beta_lr, beta_bsz, beta_data, beta_param, c]\n    Returns:\n      preds: numpy array, shape (N,) if single param set, or (N,T) if multiple\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # safe\u2010guard positivity\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params of length {F+2}, got {P}\")\n\n    beta0 = p[:, 0]           # (T,)\n    betas = p[:, 1:1+F]       # (T,4)\n    c      = p[:, -1]         # (T,)\n\n    # compute log\u2010term and then back to original space\n    # log_term[n,t] = beta0[t] + \u03a3_j betas[t,j] * logX[n,j]\n    log_term = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(log_term) + c[None, :]\n\n    # if only one parameter vector, return 1\u2010D array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model:\n        loss \u2248 exp(beta0 + \u03a3_i beta_i * log(x_i)) + c\n    using an alternating closed\u2010form ridge\u2010regression for (beta0,beta_i)\n    and a moment\u2010matching update for c.\n    Returns params shape (6,) = [beta0, beta_lr, beta_bsz, beta_data, beta_param, c]\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log of zero\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    # Initial floor estimate c\n    y_min = np.min(y)\n    c = max(0.0, 0.5 * y_min)\n\n    # Standardize log\u2010features for numerical stability\n    mu    = np.mean(logX, axis=0)\n    sigma = np.std(logX, axis=0)\n    sigma[sigma < 1e-6] = 1.0\n    Xs = (logX - mu) / sigma  # (N,4)\n\n    # Build design matrix Z = [1, Xs]\n    Z = np.concatenate([np.ones((N, 1)), Xs], axis=1)  # (N,5)\n    P = F + 1  # 5\n\n    # Precompute Z^T Z and add small ridge for stability\n    ridge_lambda = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::P+1] += ridge_lambda  # regularize diagonal\n\n    # Alternate: solve for beta given c, then update c\n    beta_s = np.zeros(P, dtype=float)\n    for _ in range(20):\n        # Adjust targets\n        y_adj = y - c\n        # Ensure positivity before log\n        min_adj = np.min(y_adj)\n        if min_adj <= 0:\n            # If any non\u2010positive, drop c just below min(y)\n            c = max(0.0, np.min(y) - 1e-6)\n            y_adj = y - c\n\n        logy = np.log(np.clip(y_adj, 1e-12, None))  # (N,)\n\n        # Closed\u2010form ridge solution: beta_s = inv(Z^T Z + \u03bbI) Z^T logy\n        ZTy = Z.T.dot(logy)  # (5,)\n        beta_s = np.linalg.solve(ZTZ, ZTy)  # (5,)\n\n        # Un\u2010standardize:\n        b0_s  = beta_s[0]\n        b_s   = beta_s[1:]\n        beta_i = b_s / sigma               # (4,)\n        beta0  = b0_s - np.dot(b_s, mu / sigma)\n\n        # Compute prediction (excluding c)\n        log_pred = beta0 + logX.dot(beta_i)  # (N,)\n        pred = np.exp(log_pred)              # (N,)\n\n        # Moment\u2010matching update for c: \u2202/\u2202c MSE = 0 \u21d2 c = mean(y \u2212 pred)\n        c_new = np.mean(y - pred)\n        # Clamp c to [0, 0.9*min(y)] for stability\n        c_new = max(0.0, min(c_new, 0.9 * y_min))\n\n        if abs(c_new - c) < 1e-6:\n            c = c_new\n            break\n        c = c_new\n\n    # Final parameter vector\n    params = np.concatenate(([beta0], beta_i, [c]))\n    return params", "language": "python", "parent_id": "c11193a7-73c8-4030-bbe1-ffa74f28ce2c", "generation": 2, "timestamp": 1754798917.0762486, "iteration_found": 31, "metrics": {"nmse": 100.19166421748565, "nmae": 13.536934003871957, "r2": -99.19166421748565, "combined_score": 0.009882236918752075}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00266345584126, "nmae": 17.397471890096064, "r2": -164.00266345584126, "combined_score": 0.006023999730980294}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0027\n- nmae: 17.3975\n- r2: -164.0027\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 153.4299, nmae: 16.7698, r2: -152.4299, combined_score: 0.0065\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 153.4299, nmae: 16.7698, r2: -152.4299, combined_score: 0.0065\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 49.8062, nmae: 9.5047, r2: -48.8062, combined_score: 0.0197\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.6311)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss given hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params].\n    params = [logk, \u03b11..\u03b1F, logc] of length F+2.\n    Supports 1D or 2D params (for T independent fits).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N, F)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow single or multiple parameter vectors\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]           # shape (T,)\n    exponents = p[:, 1:1+F]       # shape (T, F)\n    logc      = p[:, -1]          # shape (T,)\n\n    # compute prediction\n    logX = np.log(X)              # shape (N, F)\n    # linear term in log-space: (N, T)\n    log_term = logX.dot(exponents.T) + logk[None, :]\n    # back to original space, plus constant floor\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    # if single parameter vector, return 1D array\n    return pred[:, 0] if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law scaling law by minimizing MSE in the original loss space.\n    Returns a parameter vector [logk, \u03b11..\u03b1F, logc] of length F+2.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure positivity\n    y = np.maximum(y, 1e-8)\n\n    # --- Robust initialization via subtractive constant and linear regression on logs ---\n    # initial floor c0 just below the minimum observed loss\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    min_adj = np.min(y_adj)\n    if min_adj <= 1e-8:\n        # if any adjusted values non-positive, lower the floor\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    # enforce positivity\n    y_adj = np.maximum(y_adj, 1e-8)\n\n    # solve log(y_adj) \u2248 logk + \u03a3 \u03b1_i log(x_i) via least squares\n    logy = np.log(y_adj)           # (N,)\n    logX = np.log(X)               # (N, F)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n    sol, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]           # length F\n\n    # initial parameter vector\n    p0 = np.concatenate([ [logk_init], alpha_init, [np.log(c0)] ])  # length F+2\n\n    # --- Define objective: MSE in original loss space ---\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # --- Bounds for stability ---\n    # logk unbounded, exponents in [-5, 5], logc \u2264 log(min(y)*0.99)\n    bnds = []\n    bnds.append((None, None))  # logk\n    for _ in range(F):\n        bnds.append((-5.0, 5.0))  # each exponent \u03b1_i\n    bnds.append((None, np.log(np.min(y) * 0.99)))  # logc\n\n    # --- Optimize ---\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\nKey features: Performs well on nmse (49.8062), Performs well on nmae (9.5047), Performs well on r2 (-48.8062), Performs well on combined_score (0.0197)\n\n\n### Program 2 (Score: 4.4441)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a power-law form:\n      loss_pred = exp(b + w_lr*log(lr) + w_bsz*log(bsz)\n                     + w_data*log(data_size) + w_param*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like, shape (N,4)\n                   columns are [lr, bsz, data_size, non_embedding_param_size], all > 0\n      params:      array-like, shape (5,)\n                   [b, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds:       numpy array, shape (N,), the predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.size}\")\n    b = p[0]\n    w = p[1:]\n    # all inputs are strictly positive by design, so log is safe\n    logX = np.log(X)\n    log_pred = b + logX.dot(w)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a log\u2013log linear power\u2010law model with robust IRLS (Huber) weighting\n    and feature standardization for numerical stability:\n        log(loss) \u2248 b + \u03a3_i w_i \u00b7 log(x_i)\n    Returns:\n      params: array of shape (5,) = [b, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Log-transform (all entries > 0 by assumption)\n    logX = np.log(X)\n    logy = np.log(y + 1e-12)  # tiny offset to avoid log(0)\n\n    # Standardize log-features for conditioning\n    mu = np.mean(logX, axis=0)\n    sigma = np.std(logX, axis=0)\n    # Prevent division by zero\n    sigma[sigma < 1e-6] = 1.0\n    Xs = (logX - mu) / sigma\n\n    # Build design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), Xs], axis=1)  # shape (N,5)\n\n    # Regularization parameter\n    ridge_lambda = 1e-6\n    # Initial ridge-regularized least squares in log-space\n    A0 = Z.T.dot(Z) + ridge_lambda * np.eye(F + 1)\n    b0 = Z.T.dot(logy)\n    theta = np.linalg.solve(A0, b0)\n\n    # IRLS with Huber weighting for robustness\n    max_iter = 10\n    tol = 1e-6\n    for _ in range(max_iter):\n        resid = Z.dot(theta) - logy\n        # robust scale estimate: median absolute deviation\n        mad = np.median(np.abs(resid))\n        scale = mad if mad > 1e-6 else np.std(resid) + 1e-6\n        # Huber threshold\n        thresh = 1.345 * scale\n        # weights\n        w = np.ones_like(resid)\n        large = np.abs(resid) > thresh\n        w[large] = thresh / np.abs(resid[large])\n\n        # Weighted least squares solve\n        W = w[:, None]  # (N,1)\n        A = Z.T.dot(W * Z) + ridge_lambda * np.eye(F + 1)\n        b_vec = Z.T.dot(w * logy)\n        theta_new = np.linalg.solve(A, b_vec)\n\n        if np.max(np.abs(theta_new - theta)) < tol:\n            theta = theta_new\n            break\n        theta = theta_new\n\n    # Convert back from standardized space to original log-space parameters\n    b_std = theta[0]\n    w_std = theta[1:]\n    # w_i_orig = w_std_i / sigma_i\n    w_orig = w_std / sigma\n    # b_orig = b_std - \u03a3_i w_std_i * mu_i / sigma_i\n    b_orig = b_std - np.dot(w_std, mu / sigma)\n\n    params = np.concatenate(([b_orig], w_orig))\n    return params\n```\nKey features: Performs well on nmse (153.4299), Performs well on nmae (16.7698), Performs well on r2 (-152.4299), Performs well on combined_score (0.0065)\n\n\n### Program 3 (Score: 4.4441)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a power-law form:\n      loss_pred = exp(b + w_lr*log(lr) + w_bsz*log(bsz)\n                     + w_data*log(data_size) + w_param*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like, shape (N,4)\n                   columns are [lr, bsz, data_size, non_embedding_param_size], all > 0\n      params:      array-like, shape (5,)\n                   [b, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds:       numpy array, shape (N,), the predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.size}\")\n    b = p[0]\n    w = p[1:]\n    # all inputs are strictly positive by design, so log is safe\n    logX = np.log(X)\n    log_pred = b + logX.dot(w)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a log\u2013log linear power\u2010law model with robust IRLS (Huber) weighting\n    and feature standardization for numerical stability:\n        log(loss) \u2248 b + \u03a3_i w_i \u00b7 log(x_i)\n    Returns:\n      params: array of shape (5,) = [b, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Log-transform (all entries > 0 by assumption)\n    logX = np.log(X)\n    logy = np.log(y + 1e-12)  # tiny offset to avoid log(0)\n\n    # Standardize log-features for conditioning\n    mu = np.mean(logX, axis=0)\n    sigma = np.std(logX, axis=0)\n    # Prevent division by zero\n    sigma[sigma < 1e-6] = 1.0\n    Xs = (logX - mu) / sigma\n\n    # Build design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), Xs], axis=1)  # shape (N,5)\n\n    # Regularization parameter\n    ridge_lambda = 1e-6\n    # Initial ridge-regularized least squares in log-space\n    A0 = Z.T.dot(Z) + ridge_lambda * np.eye(F + 1)\n    b0 = Z.T.dot(logy)\n    theta = np.linalg.solve(A0, b0)\n\n    # IRLS with Huber weighting for robustness\n    max_iter = 10\n    tol = 1e-6\n    for _ in range(max_iter):\n        resid = Z.dot(theta) - logy\n        # robust scale estimate: median absolute deviation\n        mad = np.median(np.abs(resid))\n        scale = mad if mad > 1e-6 else np.std(resid) + 1e-6\n        # Huber threshold\n        thresh = 1.345 * scale\n        # weights\n        w = np.ones_like(resid)\n        large = np.abs(resid) > thresh\n        w[large] = thresh / np.abs(resid[large])\n\n        # Weighted least squares solve\n        W = w[:, None]  # (N,1)\n        A = Z.T.dot(W * Z) + ridge_lambda * np.eye(F + 1)\n        b_vec = Z.T.dot(w * logy)\n        theta_new = np.linalg.solve(A, b_vec)\n\n        if np.max(np.abs(theta_new - theta)) < tol:\n            theta = theta_new\n            break\n        theta = theta_new\n\n    # Convert back from standardized space to original log-space parameters\n    b_std = theta[0]\n    w_std = theta[1:]\n    # w_i_orig = w_std_i / sigma_i\n    w_orig = w_std / sigma\n    # b_orig = b_std - \u03a3_i w_std_i * mu_i / sigma_i\n    b_orig = b_std - np.dot(w_std, mu / sigma)\n\n    params = np.concatenate(([b_orig], w_orig))\n    return params\n```\nKey features: Performs well on nmse (153.4299), Performs well on nmae (16.7698), Performs well on r2 (-152.4299), Performs well on combined_score (0.0065)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.6311, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss given hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(logk + \u03a3_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params].\n    params = [logk, \u03b11..\u03b1F, logc] of length F+2.\n    Supports 1D or 2D params (for T independent fits).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N, F)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow single or multiple parameter vectors\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]           # shape (T,)\n    exponents = p[:, 1:1+F]       # shape (T, F)\n    logc      = p[:, -1]          # shape (T,)\n\n    # compute prediction\n    logX = np.log(X)              # shape (N, F)\n    # linear term in log-space: (N, T)\n    log_term = logX.dot(exponents.T) + logk[None, :]\n    # back to original space, plus constant floor\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    # if single parameter vector, return 1D array\n    return pred[:, 0] if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law scaling law by minimizing MSE in the original loss space.\n    Returns a parameter vector [logk, \u03b11..\u03b1F, logc] of length F+2.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure positivity\n    y = np.maximum(y, 1e-8)\n\n    # --- Robust initialization via subtractive constant and linear regression on logs ---\n    # initial floor c0 just below the minimum observed loss\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    min_adj = np.min(y_adj)\n    if min_adj <= 1e-8:\n        # if any adjusted values non-positive, lower the floor\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    # enforce positivity\n    y_adj = np.maximum(y_adj, 1e-8)\n\n    # solve log(y_adj) \u2248 logk + \u03a3 \u03b1_i log(x_i) via least squares\n    logy = np.log(y_adj)           # (N,)\n    logX = np.log(X)               # (N, F)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n    sol, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]           # length F\n\n    # initial parameter vector\n    p0 = np.concatenate([ [logk_init], alpha_init, [np.log(c0)] ])  # length F+2\n\n    # --- Define objective: MSE in original loss space ---\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # --- Bounds for stability ---\n    # logk unbounded, exponents in [-5, 5], logc \u2264 log(min(y)*0.99)\n    bnds = []\n    bnds.append((None, None))  # logk\n    for _ in range(F):\n        bnds.append((-5.0, 5.0))  # each exponent \u03b1_i\n    bnds.append((None, np.log(np.min(y) * 0.99)))  # logc\n\n    # --- Optimize ---\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.806), Excellent nmae (9.505)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a two\u2010term power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i)) + c\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (6,) or (T,6),\n                   each row [beta0, beta_lr, beta_bsz, beta_data, beta_param, c]\n    Returns:\n      preds: numpy array, shape (N,) if single param set, or (N,T) if multiple\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # safe\u2010guard positivity\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params of length {F+2}, got {P}\")\n\n    beta0 = p[:, 0]           # (T,)\n    betas = p[:, 1:1+F]       # (T,4)\n    c      = p[:, -1]         # (T,)\n\n    # compute log\u2010term and then back to original space\n    # log_term[n,t] = beta0[t] + \u03a3_j betas[t,j] * logX[n,j]\n    log_term = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(log_term) + c[None, :]\n\n    # if only one parameter vector, return 1\u2010D array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model:\n        loss \u2248 exp(beta0 + \u03a3_i beta_i * log(x_i)) + c\n    using an alternating closed\u2010form ridge\u2010regression for (beta0,beta_i)\n    and a moment\u2010matching update for c.\n    Returns params shape (6,) = [beta0, beta_lr, beta_bsz, beta_data, beta_param, c]\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log of zero\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    # Initial floor estimate c\n    y_min = np.min(y)\n    c = max(0.0, 0.5 * y_min)\n\n    # Standardize log\u2010features for numerical stability\n    mu    = np.mean(logX, axis=0)\n    sigma = np.std(logX, axis=0)\n    sigma[sigma < 1e-6] = 1.0\n    Xs = (logX - mu) / sigma  # (N,4)\n\n    # Build design matrix Z = [1, Xs]\n    Z = np.concatenate([np.ones((N, 1)), Xs], axis=1)  # (N,5)\n    P = F + 1  # 5\n\n    # Precompute Z^T Z and add small ridge for stability\n    ridge_lambda = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::P+1] += ridge_lambda  # regularize diagonal\n\n    # Alternate: solve for beta given c, then update c\n    beta_s = np.zeros(P, dtype=float)\n    for _ in range(20):\n        # Adjust targets\n        y_adj = y - c\n        # Ensure positivity before log\n        min_adj = np.min(y_adj)\n        if min_adj <= 0:\n            # If any non\u2010positive, drop c just below min(y)\n            c = max(0.0, np.min(y) - 1e-6)\n            y_adj = y - c\n\n        logy = np.log(np.clip(y_adj, 1e-12, None))  # (N,)\n\n        # Closed\u2010form ridge solution: beta_s = inv(Z^T Z + \u03bbI) Z^T logy\n        ZTy = Z.T.dot(logy)  # (5,)\n        beta_s = np.linalg.solve(ZTZ, ZTy)  # (5,)\n\n        # Un\u2010standardize:\n        b0_s  = beta_s[0]\n        b_s   = beta_s[1:]\n        beta_i = b_s / sigma               # (4,)\n        beta0  = b0_s - np.dot(b_s, mu / sigma)\n\n        # Compute prediction (excluding c)\n        log_pred = beta0 + logX.dot(beta_i)  # (N,)\n        pred = np.exp(log_pred)              # (N,)\n\n        # Moment\u2010matching update for c: \u2202/\u2202c MSE = 0 \u21d2 c = mean(y \u2212 pred)\n        c_new = np.mean(y - pred)\n        # Clamp c to [0, 0.9*min(y)] for stability\n        c_new = max(0.0, min(c_new, 0.9 * y_min))\n\n        if abs(c_new - c) < 1e-6:\n            c = c_new\n            break\n        c = c_new\n\n    # Final parameter vector\n    params = np.concatenate(([beta0], beta_i, [c]))\n    return params\n```"]}}}