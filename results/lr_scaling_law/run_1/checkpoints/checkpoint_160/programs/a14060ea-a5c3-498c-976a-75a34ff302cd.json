{"id": "a14060ea-a5c3-498c-976a-75a34ff302cd", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # batch size minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # batch size maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns (total 15):\n      1,\n      z1, z2, z3, z4,\n      z1^2, z2^2, z3^2, z4^2,\n      z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    cols.append(z)             # linear terms\n    cols.append(z**2)          # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A     = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge-regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    ATA = A.T.dot(A)                 # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "8821c73d-425d-4162-9c8b-01810a15d756", "generation": 4, "timestamp": 1754804879.0272348, "iteration_found": 147, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 72.36945983415181, "nmae": 11.2751175498048, "r2": -71.36945983415181, "combined_score": 0.013629649206365326}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 72.3695\n- nmae: 11.2751\n- r2: -71.3695\n- combined_score: 0.0136\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # bsz minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # bsz maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features:\n      [1,\n       z_i for i in 0..3,\n       z_i^2 for i in 0..3,\n       z_i * z_j for 0 <= i < j < 4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    # log-transform and normalize to roughly [-1,1]\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    cols = [np.ones((N, 1), dtype=np.float64)]  # intercept\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z ** 2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each log\u2010feature (z-score normalization)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      1 (intercept),\n      z_i (linear for i in 0..3),\n      z_i^2 (quadratic),\n      z_i * z_j (pairwise interactions for 0<=i<j<4)\n    Returns:\n      A of shape (N, 1+4+4+6 = 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all columns into design matrix\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (\u03b8)\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n      (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)      # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # shape (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                 # shape (15,15)\n    P   = ATA.shape[0]\n    # Adaptive ridge \u03bb: scaled by average diagonal\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      1,\n      z1, z2, z3, z4,\n      z1^2, z2^2, z3^2, z4^2,\n      z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    # Natural log and normalization to roughly [-1,1]\n    logs = np.log(X + eps)                     # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE         # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms z_i\n    cols.append(z)\n    # 3) quadratic terms z_i^2\n    cols.append(z ** 2)\n    # 4) pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate to form (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like length 15\n    Returns:\n      preds: ndarray shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80)\n    Returns optimized \u03b8 of shape (15,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)        # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)            # (N,)\n\n    # Normal equations with adaptive ridge \u03bb\n    ATA = A.T.dot(A)                   # (15,15)\n    P = ATA.shape[0]\n    # regularization scaled by average diagonal entry for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_thresh:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_thresh:\n                break\n\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants: mean and half\u2010range\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Features per sample:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to ~[-1,1]\n    N, F = z.shape\n\n    feats = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    feats.append(z)\n    # squared terms\n    feats.append(z * z)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if inters:\n        feats.append(np.hstack(inters))\n\n    return np.hstack(feats)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]                   # 15\n    lam = 1e-4                       # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([1.2e-4,    # lr\n                            16.0,      # bsz\n                            4e9,       # data_size\n                            2.14e8     # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MAX = np.log(np.array([2.2e-2,    # lr\n                            4096.0,    # bsz\n                            1e11,      # data_size\n                            1e9        # non_embedding_param_size\n                           ], dtype=np.float64))\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling law in normalized log\u2010space including pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is a vector of length 1 + 4 + 4 + 6 = 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    theta0 = p[0]\n    lin_coeffs = p[1 : 1 + F]\n    quad_coeffs = p[1 + F : 1 + 2 * F]\n    cross_coeffs = p[1 + 2 * F :]\n\n    # Compute normalized logs\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Build log\u2010prediction\n    log_pred = theta0 + z.dot(lin_coeffs) + (z ** 2).dot(quad_coeffs)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += cross_coeffs[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    # Return in original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    # Intercept\n    A_cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    A_cols.append(z)\n    # Quadratic terms\n    A_cols.append(z ** 2)\n    # Pairwise interaction terms\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        A_cols.append(np.concatenate(cross_cols, axis=1))\n\n    A = np.concatenate(A_cols, axis=1)  # shape (N,15)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: Migrant)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # bsz minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # bsz maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features:\n      [1,\n       z_i for i in 0..3,\n       z_i^2 for i in 0..3,\n       z_i * z_j for 0 <= i < j < 4]\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    eps = 1e-12\n\n    # log-transform and normalize to roughly [-1,1]\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    cols = [np.ones((N, 1), dtype=np.float64)]  # intercept\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z ** 2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 5.0982, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range for normalization to ~[-1,1]\n_LOG_MEAN  = (_LOG_MIN + _LOG_MAX) * 0.5\n_LOG_SCALE = (_LOG_MAX - _LOG_MIN) * 0.5\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build design matrix for a quadratic\u2010cross interaction model in normalized logs:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns: A of shape (N, 11)\n    \"\"\"\n    eps = 1e-12\n    # Compute safe logs\n    logs = np.log(X + eps)                          # (N,4)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE             # (N,4)\n    N, F = z.shape\n    # Intercept\n    cols = [np.ones((N,), dtype=np.float64)]\n    # Linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # Pairwise cross terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n    # Stack into (N, 1+4+6=11)\n    return np.stack(cols, axis=1)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via an 11\u2010parameter quadratic\u2010cross model:\n      log_loss \u2248 \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_{i<j} \u03b82_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n    where z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 11\n    Returns:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)           # (N,11)\n    log_pred = A.dot(theta)               # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11\u2010parameter quadratic\u2010cross scaling law by ridge\u2010regularized\n    least squares on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Returns:\n      theta_opt: (11,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    A = _build_design_matrix(X)           # (N,11)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Ridge regularization: no penalty on intercept\n    P = A.shape[1]                        # 11\n    lam = 1e-3                            # stronger regularization for better generalization\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not penalize \u03b80\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg                # (11,11)\n    ATy = A.T.dot(y_log)                  # (11,)\n\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.176), Excellent nmae (19.388)\n\n\n### Inspiration 3 (Score: 3.7368, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given [lr, bsz, data_size, non_emb_param_size]\n    via a 7-parameter law:\n\n      loss \u2248 b\n             + exp( logA\n                     + e_lr1 * ln(lr)\n                     + e_lr2 * (ln(lr))^2\n                     + e_bsz * ln(bsz)\n                     + e_D   * ln(data_size)\n                     + e_N   * ln(non_embedding_param_size)\n                   )\n\n    params = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"scaling_law_func expects shape (N,4) input\")\n    b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_lr1 * log_lr\n        + e_lr2 * (log_lr ** 2)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE in log-space:\n\n      param vector = [b, logA, e_lr1, e_lr2, e_bsz, e_D, e_N]\n\n    1) initialize b to ~0.5 * min(loss)\n    2) do linear LS on ln(loss - b) vs [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    3) refine all params with L-BFGS-B on log-MSE objective\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(\"fit_scaling_law expects shape (N,4) input\")\n\n    N = X.shape[0]\n    eps = 1e-12\n\n    # 1) initialize bias b0\n    y_min = np.min(y)\n    b0 = max(0.0, 0.5 * y_min)\n\n    # 2) linear LS in log-space for the other 6 params\n    y_adj = y - b0\n    y_adj = np.clip(y_adj, eps, None)\n    lr  = X[:,0] + eps\n    bsz = X[:,1] + eps\n    D   = X[:,2] + eps\n    Np  = X[:,3] + eps\n\n    log_lr = np.log(lr)\n    # design matrix: [1, ln(lr), (ln(lr))^2, ln(bsz), ln(D), ln(Np)]\n    A = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        np.log(bsz),\n        np.log(D),\n        np.log(Np),\n    ])\n    # solve for theta = [logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0]\n    theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0 = theta\n\n    init_params = np.array([b0, logA0, e_lr1_0, e_lr2_0, e_bsz0, e_D0, e_N0],\n                           dtype=np.float64)\n\n    # 3) refine via L-BFGS-B on MSE in log-space\n    def loss_fn(p):\n        b, _, _, _, _, _, _ = p\n        y_pred = scaling_law_func(X, p)\n        # ensure positivity inside log\n        yp_adj = np.clip(y_pred - b, eps, None)\n        y_adj2 = np.clip(y - b, eps, None)\n        diff = np.log(yp_adj) - np.log(y_adj2)\n        return np.mean(diff * diff)\n\n    # reasonable bounds\n    bounds = [\n        (0.0, y_min),      # b \u2208 [0, ~min(y)]\n        (None, None),      # logA\n        (-5.0, 5.0),       # e_lr1\n        (-1.0, 1.0),       # e_lr2 (small quadratic curvature)\n        (-5.0, 5.0),       # e_bsz\n        (-5.0, 5.0),       # e_D\n        (-5.0, 5.0),       # e_N\n    ]\n\n    res = minimize(loss_fn, init_params,\n                   method=\"L-BFGS-B\", bounds=bounds)\n    if res.success:\n        return res.x\n    else:\n        # fallback to the LS initialization\n        return init_params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (109.187), Excellent nmae (13.938)\n\n\n### Inspiration 4 (Score: 3.7843, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n\n    # Compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n\n    # Exponentiate to get loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 5\u2010parameter log\u2010linear scaling law by solving a small\n    ridge\u2010regularized least squares problem in log\u2010space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8||^2\n    where A = [1, log(lr), log(bsz), log(data_size),\n               log(non_embedding_param_size)].\n    Inputs:\n      data_points:  array\u2010like of shape (N,4)\n      loss_values:  array\u2010like of shape (N,) of training losses (must be > 0)\n      ridge_lambda: regularization strength (default 1e-6)\n    Returns:\n      theta: numpy.ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # Safe log\u2010transform features and target\n    eps = 1e-12\n    Z = np.log(X + eps)       # shape (N,4)\n    y_log = np.log(y + eps)   # shape (N,)\n\n    # Build design matrix A = [1 | log_features]\n    N = Z.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.hstack((ones, Z))  # shape (N,5)\n\n    # Closed\u2010form ridge solution: (A^T A + \u03bbR) \u03b8 = A^T y_log\n    # We do not regularize the intercept term (\u03b80)\n    ATA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(ATA.shape[0], dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n\n    return theta\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 5 (Score: 2.1537, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param^{e_N},\n    with A = exp(logA).\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects input shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.ravel(params).astype(np.float64)\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Numerical stability\n    eps = 1e-12\n    # Compute log-term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by:\n      1) closed-form ridge regression on log(y - b0)\n      2) bounded L-BFGS-B refinement minimizing MSE\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n\n    Returns:\n      params: ndarray of shape (6,) for single-target or (T,6) for multi-target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n\n    # Precompute log-features for closed-form init\n    eps = 1e-12\n    Z = np.log(X + eps)                  # (N,4)\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    AtA = A_lin.T @ A_lin + lam * np.eye(5)\n    At  = A_lin.T\n\n    def _fit_single(y_vec):\n        # 1) bias init: floor near minimum\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, y_min * 0.9)\n        # 2) shift and clamp\n        y_shift = np.maximum(y_vec - b0, eps)\n        log_y = np.log(y_shift)\n        # 3) closed-form linear solve: [logA, e_lr, e_bsz, e_D, e_N]\n        theta_lin = np.linalg.solve(AtA, At @ log_y)\n        # pack init params\n        init = np.empty(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_lin\n\n        # bounds: b>=0, exponents in [-5,5], logA free\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b\n            (None, None),                  # logA\n            (-5.0, 5.0),                   # e_lr\n            (-5.0, 5.0),                   # e_bsz\n            (-5.0, 5.0),                   # e_D\n            (-5.0, 5.0),                   # e_N\n        ]\n\n        # objective: MSE in original loss space\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # single L-BFGS-B refinement\n        res = minimize(\n            obj,\n            init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-12}\n        )\n        return res.x if res.success else init\n\n    # fit per target\n    all_params = np.vstack([_fit_single(Y[:, i]) for i in range(T)])\n    return all_params[0] if T == 1 else all_params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.362), Excellent nmae (7.586)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a 6-parameter multiplicative power law plus bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                      + e_data*log(data_size) + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points with 4 columns, got {X.shape[1]}\")\n    # unpack parameters\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # safe log\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr)\n        + e_bsz  * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power law by minimizing MSE in original loss space.\n    1) Initialize via closed-form linear regression in log-space.\n    2) Refine with bounded L-BFGS-B multi-start.\n    Returns:\n      params: ndarray of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    # prepare data\n    X_raw = np.asarray(data_points, dtype=np.float64)\n    y     = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X_raw.ndim == 1:\n        X_raw = X_raw[None, :]\n    if X_raw.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points with 4 columns, got {X_raw.shape[1]}\")\n    if y.shape[0] != X_raw.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # constants\n    eps = 1e-12\n    # simple bias init: half the minimum loss (clipped \u22650)\n    y_min, y_max = np.min(y), np.max(y)\n    b0 = max(0.0, 0.5 * y_min)\n    # shift and log-transform targets\n    y_shift = np.clip(y - b0, eps, None)\n    y_log   = np.log(y_shift)\n\n    # log-transform features\n    logs = np.log(X_raw + eps)  # shape (N,4)\n    # build least-squares design matrix [1, ln(lr), ln(bsz), ln(D), ln(Np)]\n    A_ls = np.concatenate([np.ones((logs.shape[0],1)), logs], axis=1)  # (N,5)\n    # solve A_ls @ theta_ls = y_log in least squares\n    theta_ls, *_ = np.linalg.lstsq(A_ls, y_log, rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n\n    # assemble initial parameter sets for multi-start\n    init_main = np.empty(6, dtype=np.float64)\n    init_main[0]    = b0\n    init_main[1:]   = theta_ls\n    init_zero_bias  = init_main.copy()\n    init_zero_bias[0] = 0.0\n    init_alt = np.array([\n        b0 * 0.1,\n        np.log(max(y_max - b0, eps)),\n        -1.0, -1.0, -0.5, -0.5\n    ], dtype=np.float64)\n\n    inits = [init_main, init_zero_bias, init_alt]\n\n    # bounds for parameters: bias \u22650, exponents in a reasonable range\n    bounds = [\n        (0.0,      1.5 * y_max),  # b\n        (None,     None),         # logA\n        (-10.0,    10.0),         # e_lr\n        (-10.0,    10.0),         # e_bsz\n        (-10.0,    10.0),         # e_data\n        (-10.0,    10.0)          # e_model\n    ]\n\n    # precompute logs for objective\n    l_lr, l_bsz, l_D, l_Np = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    def mse_obj(p):\n        b_i, logA_i, e_lr_i, e_bsz_i, e_data_i, e_model_i = p\n        log_t = (\n            logA_i\n            + e_lr_i   * l_lr\n            + e_bsz_i  * l_bsz\n            + e_data_i * l_D\n            + e_model_i* l_Np\n        )\n        pred = b_i + np.exp(log_t)\n        return np.mean((pred - y) ** 2)\n\n    # multi-start L-BFGS-B\n    best_p, best_loss = init_main, np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                mse_obj,\n                init,\n                method='L-BFGS-B',\n                bounds=bounds,\n                options={'maxiter':1000, 'ftol':1e-9}\n            )\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        except Exception:\n            # ignore failures and keep looking\n            pass\n\n    return best_p\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # batch size minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # batch size maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns (total 15):\n      1,\n      z1, z2, z3, z4,\n      z1^2, z2^2, z3^2, z4^2,\n      z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    cols.append(z)             # linear terms\n    cols.append(z**2)          # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A     = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge-regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    ATA = A.T.dot(A)                 # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```"]}}}