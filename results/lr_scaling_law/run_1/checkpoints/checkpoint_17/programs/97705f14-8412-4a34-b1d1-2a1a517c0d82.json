{"id": "97705f14-8412-4a34-b1d1-2a1a517c0d82", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM finetuning:\n  loss \u2248 exp(logk + \u03a3_i \u03b1_i \u00b7 log(x_i)) + exp(logc)\n\nHere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit [logk, \u03b11..\u03b14, logc] by minimizing MSE in loss\u2010space\nwith L\u2010BFGS\u2010B and mild regularization for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a two\u2010term power law:\n       loss = term1 + term2\n       term1 = exp(logk + \u03a3_i \u03b1_i * log(x_i))\n       term2 = exp(logc)\n    Inputs:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6):\n                   [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to positive\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow both single\u2010set or multi\u2010set of parameters\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got {P}\")\n    # unpack\n    logk      = p[:, 0]         # (T,)\n    alphas    = p[:, 1:5]       # (T,4)\n    logc      = p[:, 5]         # (T,)\n    # compute term1: exp(logk + logX @ alphas.T)\n    lin_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    term1    = np.exp(lin_term)\n    term2    = np.exp(logc)[None, :]               # (1,T)\n    loss_pred = term1 + term2                      # (N,T)\n\n    # if single parameter\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model by minimizing mean squared error\n    in original loss space, over parameters [logk, \u03b11..\u03b14, logc].\n    Returns optimized params of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce lower bound on y for log-safety\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # prepare initial guess\n    # logk init = log(median(y)), \u03b1_i init = 0, logc init = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(6, dtype=np.float64)\n    init[0]     = np.log(median_y + 1e-8)\n    init[1:5]   = 0.0\n    init[5]     = np.log(min_y * 0.1 + 1e-8)\n\n    # mild L2 regularization on alphas to keep exponents reasonable\n    reg_alpha = 1e-3\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        mse  = np.mean((pred - y)**2)\n        # regularize only the four alpha terms\n        reg  = reg_alpha * np.sum(p[1:5]**2)\n        return mse + reg\n\n    # use bounds to avoid pathological values\n    # logk \u2208 [\u221250,50], \u03b1_i \u2208 [\u22125,5], logc \u2208 [\u221250,50]\n    bounds = [(-50, 50)] + [(-5, 5)]*4 + [(-50, 50)]\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cf3e9a41-2c66-4ef0-ba16-07480195fb70", "generation": 1, "timestamp": 1754798746.6330929, "iteration_found": 12, "metrics": {"nmse": 158.359172122022, "nmae": 17.04170303908397, "r2": -157.359172122022, "combined_score": 0.006275133001031756}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 9.958921558551933e+28, "nmae": 428288771110437.75, "r2": -9.958921558551933e+28, "combined_score": 1.0041247881315816e-29}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 99589215585519330125424885760.0000\n- nmae: 428288771110437.7500\n- r2: -99589215585519330125424885760.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 2 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 3 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.5138, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (158.492), Excellent nmae (17.049)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM finetuning:\n  loss \u2248 exp(logk + \u03a3_i \u03b1_i \u00b7 log(x_i)) + exp(logc)\n\nHere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit [logk, \u03b11..\u03b14, logc] by minimizing MSE in loss\u2010space\nwith L\u2010BFGS\u2010B and mild regularization for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a two\u2010term power law:\n       loss = term1 + term2\n       term1 = exp(logk + \u03a3_i \u03b1_i * log(x_i))\n       term2 = exp(logc)\n    Inputs:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6):\n                   [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to positive\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # allow both single\u2010set or multi\u2010set of parameters\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got {P}\")\n    # unpack\n    logk      = p[:, 0]         # (T,)\n    alphas    = p[:, 1:5]       # (T,4)\n    logc      = p[:, 5]         # (T,)\n    # compute term1: exp(logk + logX @ alphas.T)\n    lin_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    term1    = np.exp(lin_term)\n    term2    = np.exp(logc)[None, :]               # (1,T)\n    loss_pred = term1 + term2                      # (N,T)\n\n    # if single parameter\u2010set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law model by minimizing mean squared error\n    in original loss space, over parameters [logk, \u03b11..\u03b14, logc].\n    Returns optimized params of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce lower bound on y for log-safety\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # prepare initial guess\n    # logk init = log(median(y)), \u03b1_i init = 0, logc init = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(6, dtype=np.float64)\n    init[0]     = np.log(median_y + 1e-8)\n    init[1:5]   = 0.0\n    init[5]     = np.log(min_y * 0.1 + 1e-8)\n\n    # mild L2 regularization on alphas to keep exponents reasonable\n    reg_alpha = 1e-3\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        mse  = np.mean((pred - y)**2)\n        # regularize only the four alpha terms\n        reg  = reg_alpha * np.sum(p[1:5]**2)\n        return mse + reg\n\n    # use bounds to avoid pathological values\n    # logk \u2208 [\u221250,50], \u03b1_i \u2208 [\u22125,5], logc \u2208 [\u221250,50]\n    bounds = [(-50, 50)] + [(-5, 5)]*4 + [(-50, 50)]\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```"]}}}