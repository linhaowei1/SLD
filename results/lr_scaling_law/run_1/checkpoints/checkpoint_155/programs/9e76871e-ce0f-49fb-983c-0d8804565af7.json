{"id": "9e76871e-ce0f-49fb-983c-0d8804565af7", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable design matrix using Chebyshev\u2010basis polynomials\n    on normalized log\u2010features z_i = (log x_i \u2212 _LOG_MEAN_i)/_LOG_SCALE_i.\n    Features for each sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2*z^2 \u2212 1 is the 2nd\u2010degree Chebyshev polynomial.\n    Returns:\n      A: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                # safe log\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE # normalize to roughly [-1,1]\n    N, F = z.shape  # F should be 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear Chebyshev features = z\n    cols.append(z)\n    # quadratic Chebyshev features T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # pairwise interaction terms on the normalized z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single-point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A     = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)          # (N,)\n    # optional clamp for numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev\u2010polynomial scaling law by ridge-regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log-target\n    A    = _build_design_matrix(X)  # (N,15)\n    eps  = 1e-12\n    ylog = np.log(y + eps)          # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)                # (15,15)\n    ATy = A.T.dot(ylog)             # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam = 1e-3 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    # no penalty on intercept\n    reg[0, 0] = 0.0\n\n    ATA_reg = ATA + reg\n\n    # If system is ill-conditioned, boost \u03bb\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_thresh:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            if np.linalg.cond(ATA_reg) <= cond_thresh:\n                break\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "28c1979e-a7b2-4226-a208-91ca30872453", "generation": 5, "timestamp": 1754804990.3716393, "iteration_found": 155, "metrics": {"nmse": 8.056121635175172, "nmae": 3.1365850349902997, "r2": -7.056121635175172, "combined_score": 0.11042254513409669}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.237640076708638, "nmae": 3.186254040646542, "r2": -7.237640076708638, "combined_score": 0.10825275629880342}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.2376\n- nmae: 3.1863\n- r2: -7.2376\n- combined_score: 0.1083\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.0561, nmae: 3.1366, r2: -7.0561, combined_score: 0.1104\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0618)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable design matrix using Chebyshev\u2010basis polynomials\n    on normalized log\u2010features z_i = (log x_i \u2212 _LOG_MEAN_i)/_LOG_SCALE_i.\n    Features for each sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2*z^2 \u2212 1 is the 2nd\u2010degree Chebyshev polynomial.\n    Returns:\n      A: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Safe log\n    logs = np.log(X + eps)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE\n    N, F = z.shape  # F should be 4\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear Chebyshev feature = z\n    cols.append(z)\n    # Quadratic Chebyshev features T2(z) = 2 z^2 - 1\n    T2 = 2.0 * (z**2) - 1.0\n    cols.append(T2)\n\n    # Pairwise interaction terms on the normalized z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix\n    A = np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    # Exponentiate to recover loss\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev\u2010polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)               # (15,15)\n    ATy = A.T.dot(y_log)           # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam_base = 1e-3\n    lam = lam_base * np.trace(ATA) / P\n    # Build regularization matrix\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # If system is ill\u2010conditioned, increase regularization\n    cond_threshold = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_threshold:\n        # boost \u03bb until condition number is acceptable\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_threshold:\n                break\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.0561), Performs well on nmae (3.1366), Performs well on r2 (-7.0561), Performs well on combined_score (0.1104)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010computed log\u2010ranges for each feature (based on expected min/max)\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9    ], dtype=np.float64))\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Input:\n      X: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_param_size]\n    Output:\n      A: array of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    # Clamp for numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt:   (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P         # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    # Improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # bsz minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # bsz maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range for each log\u2010feature (normalize to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log\u2010features with pairwise interactions:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z ** 2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # final shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by adaptive ridge-regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of corresponding LM loss values\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    # adaptive \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization based on problem spec\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding param size minimum\n], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding param size maximum\n], dtype=np.float64))\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n_eps = 1e-12  # small constant to avoid log(0)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # compute normalized log\u2010features\n    logs = np.log(X + _eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by adaptive ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)           # (N,15)\n    ylog = np.log(y + _eps)                  # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                         # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P           # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                          # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    cond_val    = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(ylog)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # batch size minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # batch size maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns (total 15):\n      1,\n      z1, z2, z3, z4,\n      z1^2, z2^2, z3^2, z4^2,\n      z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    cols.append(z)             # linear terms\n    cols.append(z**2)          # quadratic terms\n\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A     = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge-regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  \u03bb = 1e-4 * trace(A\u1d40A)/P\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    ATA = A.T.dot(A)                 # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0618, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable design matrix using Chebyshev\u2010basis polynomials\n    on normalized log\u2010features z_i = (log x_i \u2212 _LOG_MEAN_i)/_LOG_SCALE_i.\n    Features for each sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2*z^2 \u2212 1 is the 2nd\u2010degree Chebyshev polynomial.\n    Returns:\n      A: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Safe log\n    logs = np.log(X + eps)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE\n    N, F = z.shape  # F should be 4\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear Chebyshev feature = z\n    cols.append(z)\n    # Quadratic Chebyshev features T2(z) = 2 z^2 - 1\n    T2 = 2.0 * (z**2) - 1.0\n    cols.append(T2)\n\n    # Pairwise interaction terms on the normalized z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix\n    A = np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    # Exponentiate to recover loss\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev\u2010polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)               # (15,15)\n    ATy = A.T.dot(y_log)           # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam_base = 1e-3\n    lam = lam_base * np.trace(ATA) / P\n    # Build regularization matrix\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # If system is ill\u2010conditioned, increase regularization\n    cond_threshold = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_threshold:\n        # boost \u03bb until condition number is acceptable\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_threshold:\n                break\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.056), Excellent nmae (3.137)\n\n\n### Inspiration 2 (Score: 4.9199, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log\u2013polynomial scaling law with cross interactions.\n    Model (in natural-log domain):\n        log L = \u03b80\n              + \u03b81 * lr_log\n              + \u03b82 * bsz_log\n              + \u03b83 * data_log\n              + \u03b84 * param_log\n              + \u03b85 * lr_log^2\n              + \u03b86 * (lr_log * bsz_log)\n              + \u03b87 * (lr_log * data_log)\n              + \u03b88 * (lr_log * param_log)\n              + \u03b89 * (bsz_log * data_log)\n              + \u03b810* (bsz_log * param_log)\n              + \u03b811* (data_log * param_log)\n    where\n        lr_log     = log(lr)\n        bsz_log    = log(bsz)\n        data_log   = log(data_size)\n        param_log  = log(non_embedding_param_size)\n    Returns exp(log L).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 12 [\u03b80 \u2026 \u03b811]\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    # Build design matrix with 12 features\n    # 1, lr_log, bsz_log, data_log, param_log,\n    # lr_log^2,\n    # lr_log * bsz_log, lr_log * data_log, lr_log * param_log,\n    # bsz_log * data_log, bsz_log * param_log, data_log * param_log\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 12-parameter log\u2013polynomial scaling law via ridge-regularized least squares\n    on the log-transformed loss:\n        \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb * ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed losses\n      ridge_lambda:       regularization strength (default 1e-3)\n    Output:\n      theta_opt: (12,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points.\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    y_log = np.log(y + eps)\n    \n    P = A.shape[1]\n    # Ridge regularization matrix: no penalty on intercept\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    \n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    \n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (202.931), Excellent nmae (18.675)\n\n\n### Inspiration 3 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # batch size\n    4e9,      # data size (tokens)\n    2.14e8    # non-embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # batch size\n    1e11,     # data size (tokens)\n    1e9       # non-embedding parameter size\n], dtype=np.float64))\n\n# mid-point and half-range of the log\u2010features\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      Let z_i = (log(x_i) - mid_i) / half_range_i for each feature i.\n      Then\n        log_loss = \u03b80\n                 + sum_i \u03b81_i * z_i\n                 + sum_i \u03b82_i * z_i^2\n                 + sum_{i<j} \u03b83_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      flat array of length 1 + 4 + 4 + 6 = 15\n                   [\u03b80,\n                    \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n                    \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n                    \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n                    \u03b83_bsz_data, \u03b83_bsz_param, \u03b83_data_param]\n    Returns:\n      preds: array of shape (N,) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    # Expect 1 intercept + 4 linear terms + 4 quadratic terms + 6 pairwise terms = 15\n    if p.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {p.size}\")\n\n    # unpack\n    \u03b80 = p[0]\n    \u03b81 = p[1:1+4]            # linear coefficients\n    \u03b82 = p[1+4:1+8]          # quadratic coefficients\n    \u03b83 = p[1+8:]             # pairwise coefficients (6 of them)\n\n    # safe log and normalization\n    eps = 1e-12\n    logs = np.log(X + eps)                        # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE        # normalized logs, shape (N,4)\n\n    # compute log prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # add pairwise interaction terms\n    k = 0\n    for i in range(4):\n        for j in range(i+1, 4):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n\n    Returns:\n      params: length\u201015 array [\u03b80, \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n                              \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n                              \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n                              \u03b83_bsz_data, \u03b83_bsz_param, \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # safe log-transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)                          # (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE          # (N,4)\n\n    N, F = z.shape  # F should be 4\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,                     # linear terms (N\u00d74)\n            z**2]                  # quadratic terms (N\u00d74)\n\n    # add pairwise cross-terms\n    cross = []\n    for i in range(F):\n        for j in range(i+1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))  # (N\u00d76)\n\n    A = np.hstack(cols)  # shape (N, 15)\n\n    # target is log(loss)\n    y_log = np.log(y + eps)\n\n    # ridge-regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 4 (Score: 3.7783, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem statement)\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8 ], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9    ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Given X of shape (N,4), compute normalized log\u2010features z of shape (N,4):\n      z = (log(X + eps) - _LOG_MEAN) / _LOG_SCALE\n    This maps each feature roughly into [-1,1].\n    \"\"\"\n    logs = np.log(X + _eps)\n    return (logs - _LOG_MEAN) / _LOG_SCALE\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a simple power\u2010law in normalized log\u2010features:\n      log_loss = \u03b80 + sum_{i=1..4} \u03b8_i * z_i\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20105 array [\u03b80, \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {theta.size}\")\n\n    # normalize log-features\n    z = _normalize_log_features(X)                # shape (N,4)\n    # compute log-loss\n    log_pred = theta[0] + z.dot(theta[1:])        # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter power\u2010law scaling law by ridge\u2010regularized least\u2010squares\n    on the log-transformed loss:\n      minimize ||A\u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2,\n    with no penalty on the intercept \u03b80.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (5,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix: [1, z_lr, z_bsz, z_data, z_param]\n    z = _normalize_log_features(X)                # (N,4)\n    N = X.shape[0]\n    A = np.hstack([np.ones((N,1), dtype=np.float64), z])  # (N,5)\n\n    # log-target\n    y_log = np.log(y + _eps)                      # (N,)\n\n    # normal equations with ridge \u03bb (no penalty on intercept)\n    P = A.shape[1]                                # 5\n    ATA = A.T.dot(A)                              # (5,5)\n    lam = 1e-3 * np.trace(ATA) / P                # adaptive ridge strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                                # do not penalize \u03b80\n\n    M   = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(M, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(M).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.607), Excellent nmae (14.104)\n\n\n### Inspiration 5 (Score: 3.7846, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6-parameter power law plus bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                       + e_D*log(data_size) + e_N*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4)\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: ndarray of shape (N,) predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected params length 6, got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    # safe logs\n    eps = 1e-12\n    lr  = np.log(X[:, 0] + eps)\n    bsz = np.log(X[:, 1] + eps)\n    D   = np.log(X[:, 2] + eps)\n    Np  = np.log(X[:, 3] + eps)\n    log_term = logA + e_lr * lr + e_bsz * bsz + e_D * D + e_N * Np\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power law by:\n      1) Estimating bias b via robust percentile of losses.\n      2) Closed-form linear regression in log-space for [logA, exponents].\n      3) Refinement with L-BFGS-B minimizing MSE in log-loss space.\n    Supports single-target (N,) or multi-target (N,T) losses.\n    Returns params array of shape (6,) or (T,6).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # unify to (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # unify targets to 2D: (N, T)\n    if y.ndim == 1:\n        Y_mat = y[:, None]\n    elif y.ndim == 2:\n        Y_mat = y\n    else:\n        raise ValueError(f\"fit_scaling_law: expected loss_values 1D or 2D, got {y.ndim}D\")\n    N, T = X.shape[0], Y_mat.shape[1]\n\n    # precompute log-features\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n\n    # design matrix for linear LS: [1, log(lr), log(bsz), log(D), log(Np)]\n    A_ls = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n\n    # objective in log-space: MSE( log_term - log(y - b) )\n    def _fit_target(y_vec):\n        # 1) initial bias via 5th percentile\n        y_min = np.min(y_vec)\n        b0 = max(0.0, 0.5 * np.percentile(y_vec, 5))\n        # 2) linear LS for log-shifted target\n        y_shift = np.maximum(y_vec - b0, eps)\n        y_ls = np.log(y_shift)\n        theta_ls, *_ = np.linalg.lstsq(A_ls, y_ls, rcond=None)\n        # initial parameter vector [b, logA, e_lr, e_bsz, e_D, e_N]\n        init = np.zeros(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_ls\n\n        # 3) refine with L-BFGS-B minimizing log-MSE\n        # bounds: b >= 0, exponents moderate\n        y_max = np.max(y_vec)\n        bounds = [\n            (0.0, max(y_max*2.0, 1.0)),  # b\n            (None, None),                # logA\n            (-10.0, 10.0),               # e_lr\n            (-10.0, 10.0),               # e_bsz\n            (-10.0, 10.0),               # e_D\n            (-10.0, 10.0)                # e_N\n        ]\n\n        def obj_log_mse(p):\n            b, logA, e1, e2, e3, e4 = p\n            # compute predicted log_term\n            log_term = (logA\n                        + e1 * logX[:,0]\n                        + e2 * logX[:,1]\n                        + e3 * logX[:,2]\n                        + e4 * logX[:,3])\n            # true log-shift\n            y_s = np.maximum(y_vec - b, eps)\n            log_y = np.log(y_s)\n            return np.mean((log_term - log_y)**2)\n\n        best_p = init.copy()\n        best_loss = obj_log_mse(best_p)\n        # multi-start with small jitters\n        rng = np.random.RandomState(0)\n        for _ in range(3):\n            trial = best_p.copy()\n            trial[1:] += 0.1 * rng.randn(5)\n            trial[0]   = max(0.0, trial[0] * (1.0 + 0.1 * rng.randn()))\n            try:\n                res = minimize(\n                    obj_log_mse,\n                    trial,\n                    method='L-BFGS-B',\n                    bounds=bounds,\n                    options={'maxiter': 500, 'ftol': 1e-9}\n                )\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except Exception:\n                pass\n\n        return best_p\n\n    # fit each target independently\n    P_list = [_fit_target(Y_mat[:, i]) for i in range(T)]\n    P_arr = np.vstack(P_list)\n    # return shape (6,) if single-target else (T,6)\n    return P_arr[0] if T == 1 else P_arr\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (113.009), Excellent nmae (14.130)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # Safe log and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # Build log\u2010loss prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # Safe log\u2010transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n    y_log = np.log(y + eps)\n\n    # Solve (A^T A + \u03bbI) \u03b8 = A^T y_log with small ridge for stability\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable design matrix using Chebyshev\u2010basis polynomials\n    on normalized log\u2010features z_i = (log x_i \u2212 _LOG_MEAN_i)/_LOG_SCALE_i.\n    Features for each sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2*z^2 \u2212 1 is the 2nd\u2010degree Chebyshev polynomial.\n    Returns:\n      A: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                # safe log\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE # normalize to roughly [-1,1]\n    N, F = z.shape  # F should be 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear Chebyshev features = z\n    cols.append(z)\n    # quadratic Chebyshev features T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # pairwise interaction terms on the normalized z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single-point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A     = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)          # (N,)\n    # optional clamp for numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev\u2010polynomial scaling law by ridge-regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log-target\n    A    = _build_design_matrix(X)  # (N,15)\n    eps  = 1e-12\n    ylog = np.log(y + eps)          # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)                # (15,15)\n    ATy = A.T.dot(ylog)             # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam = 1e-3 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    # no penalty on intercept\n    reg[0, 0] = 0.0\n\n    ATA_reg = ATA + reg\n\n    # If system is ill-conditioned, boost \u03bb\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_thresh:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            if np.linalg.cond(ATA_reg) <= cond_thresh:\n                break\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```"]}}}