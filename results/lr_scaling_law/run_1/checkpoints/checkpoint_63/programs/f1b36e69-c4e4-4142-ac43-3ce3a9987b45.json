{"id": "f1b36e69-c4e4-4142-ac43-3ce3a9987b45", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n               + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n               + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n               + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n               + w7\u00b7ln(param_size) + w8\u00b7[ln(param_size)]^2\n               + w9\u00b7[ln(data_size)*ln(param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lnX = np.log(Xc)    # shape (N,4)\n    x1 = lnX[:, 0]      # ln(lr)\n    x2 = lnX[:, 1]      # ln(bsz)\n    x3 = lnX[:, 2]      # ln(data_size)\n    x4 = lnX[:, 3]      # ln(param_size)\n\n    # build design matrix Z with 10 features\n    Z = np.column_stack([\n        np.ones_like(x1),  # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4          # interaction term\n    ])  # shape (N,10)\n\n    ln_pred = Z.dot(p)  # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10\u2010parameter model by ridge\u2010regularized least squares in log\u2010space:\n      minimize || ln(y) - Z\u00b7w ||^2 + \u03bb ||w||^2\n    where Z is the design matrix built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of data_points and loss_values must match: {X.shape[0]} != {y.shape[0]}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    lnX = np.log(Xc)    # shape (N,4)\n    lnY = np.log(yc)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # (N,10)\n\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(lnY)\n\n    # solve normal equations\n    w = np.linalg.solve(A, b)  # shape (10,)\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2eceeca0-73db-46dc-ac7d-cd858a1337e5", "generation": 4, "timestamp": 1754799559.0564277, "iteration_found": 58, "metrics": {"nmse": 6.412690177207895, "nmae": 2.8789034283028445, "r2": -5.412690177207895, "combined_score": 0.13490379013475315}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 61.869975043677805, "nmae": 10.554795730850623, "r2": -60.869975043677805, "combined_score": 0.01590584375618517}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 61.8700\n- nmae: 10.5548\n- r2: -60.8700\n- combined_score: 0.0159\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 61.8700, nmae: 10.5548, r2: -60.8700, combined_score: 0.0159\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 49.9970, nmae: 9.5232, r2: -48.9970, combined_score: 0.0196\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 6.4127, nmae: 2.8789, r2: -5.4127, combined_score: 0.1349\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0035)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n    loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)   # shape (N,4)\n    x1 = lnX[:, 0]          # ln(lr)\n    x2 = lnX[:, 1]          # ln(bsz)\n    x3 = lnX[:, 2]          # ln(data_size)\n    x4 = lnX[:, 3]          # ln(non_embed_param_size)\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Compute log\u2010predictions and return in original scale\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)    # shape (N,4)\n    lnY = np.log(y + eps)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization strength\n    lambd = 1e-6\n\n    # Solve (Z^T Z + \u03bbI) w = Z^T lnY\n    # We add \u03bb to the diagonal of Z^T Z for numerical stability\n    M = Z.T.dot(Z)\n    # Add ridge to diagonal entries\n    diag_indices = np.arange(M.shape[0])\n    M[diag_indices, diag_indices] += lambd\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n\n    return w\n```\nKey features: Performs well on nmse (6.4127), Performs well on nmae (2.8789), Performs well on r2 (-5.4127), Performs well on combined_score (0.1349)\n\n\n### Program 2 (Score: 2.6357)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (49.9970), Performs well on nmae (9.5232), Performs well on r2 (-48.9970), Performs well on combined_score (0.0196)\n\n\n### Program 3 (Score: 2.8927)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus a quadratic power\u2010law term for lr:\n      loss = L_inf\n           + exp(\n               w0\n               + w_lr * ln(lr)\n               + w_lr2 * (ln(lr))^2\n               + w_bsz * ln(bsz)\n               + w_data * ln(data_size)\n               + w_param * ln(non_embedding_param_size)\n             )\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (7,)\n                   [L_inf, w0, w_lr, w_lr2, w_bsz, w_data, w_param]\n    Returns:\n      preds:       array of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # unpack parameters\n    L_inf, w0, w_lr, w_lr2, w_bsz, w_data, w_param = p\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)\n    lr_log   = lnX[:, 0]\n    bsz_log  = lnX[:, 1]\n    data_log = lnX[:, 2]\n    param_log= lnX[:, 3]\n    # build log term with quadratic lr effect\n    log_term = (\n        w0\n        + w_lr  * lr_log\n        + w_lr2 * (lr_log ** 2)\n        + w_bsz * bsz_log\n        + w_data* data_log\n        + w_param * param_log\n    )\n    return L_inf + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter model\n      loss = L_inf + exp(w0 + w_lr*ln(lr) + w_lr2*(ln(lr))^2\n                       + w_bsz*ln(bsz) + w_data*ln(data_size)\n                       + w_param*ln(non_embed_params))\n    by bounded L\u2010BFGS\u2010B minimizing mean squared error.\n\n    Returns:\n      params: array of shape (7,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # prepare log\u2010features\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lnX = np.log(Xc)\n    lr_log   = lnX[:, 0]\n    bsz_log  = lnX[:, 1]\n    data_log = lnX[:, 2]\n    param_log= lnX[:, 3]\n    # clip targets\n    yc = np.clip(y, eps, None)\n\n    # initial guess: place L_inf at half the minimal loss\n    min_y = yc.min()\n    init_L = min_y * 0.5\n    # intercept for exp\u2010term\n    init_w0 = np.log(max(eps, np.mean(yc - init_L)))\n    # other slopes start at zero\n    init_params = np.array([init_L, init_w0, 0., 0., 0., 0., 0.], dtype=np.float64)\n\n    # bounds: L_inf in [0,0.9*min_y], others unbounded\n    bounds = [(0.0, 0.9 * min_y)] + [(-np.inf, np.inf)] * 6\n\n    # objective: MSE in loss\u2010space\n    def objective(p):\n        L_inf, w0, w_lr, w_lr2, w_bsz, w_data, w_param = p\n        log_term = (\n            w0\n            + w_lr  * lr_log\n            + w_lr2 * (lr_log ** 2)\n            + w_bsz * bsz_log\n            + w_data* data_log\n            + w_param * param_log\n        )\n        preds = L_inf + np.exp(log_term)\n        return np.mean((preds - yc) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            init_params,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (61.8700), Performs well on nmae (10.5548), Performs well on r2 (-60.8700), Performs well on combined_score (0.0159)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.5588)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training hyperparameters.\nWe model the loss as a power\u2010law in batch size, data size, and model size,\nwith a quadratic term in the log\u2010learning\u2010rate to capture its U\u2010shaped effect:\n\n    ln(loss) \u2248 w0\n               + w1 * ln(lr)\n               + w2 * [ln(lr)]^2\n               + w3 * ln(bsz)\n               + w4 * ln(data_size)\n               + w5 * ln(non_embedding_param_size)\n\nThis remains linear in transformed features for closed\u2010form ridge\u2010regularized fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via the enhanced power\u2010law model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6):\n                   [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds: array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    # ensure params has shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"params must have length 6, got {P}\")\n    # log\u2010transform inputs (add eps to avoid log(0))\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n    # build design matrix Z: shape (N,6)\n    # [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr * ln_lr,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)\n    # compute ln(loss) and exponentiate\n    ln_pred = Z.dot(p.T)    # (N,6) dot (6,T) -> (N,T)\n    Y = np.exp(ln_pred)\n    # if single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law model by ridge\u2010regularized linear regression\n    in the transformed log\u2010feature space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of shape (6,):\n                   [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    # log\u2010transform inputs and targets\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_lr   = np.log(lr)\n    ln_bsz  = np.log(bsz)\n    ln_D    = np.log(D)\n    ln_M    = np.log(M)\n    ln_y    = np.log(y + eps)\n    # design matrix Z: (N,6)\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr * ln_lr,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)\n    # ridge regularization\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T ln_y\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 4.5588)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with a quadratic term for learning rate:\n      log(loss) = w0 \n                  + w1*log(lr) \n                  + w2*(log(lr))^2 \n                  + w3*log(bsz) \n                  + w4*log(data_size) \n                  + w5*log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # Log-transform inputs\n    X_log = np.log(X)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n\n    # Build design matrix with quadratic lr term\n    # columns = [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    lr_sq = lr * lr\n    A = np.hstack([\n        np.ones((X.shape[0], 1)),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n\n    # Linear prediction in log-space\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model:\n      log(loss) = w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz) + w4*log(data_size) + w5*log(param_size)\n    via ridge-regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n\n    Returns:\n      params: (6,) array of fitted [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    lr_sq    = lr * lr\n\n    # Build design matrix\n    A = np.hstack([\n        np.ones((X.shape[0], 1)),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n\n    # Closed-form ridge regression\n    ridge = 1e-6\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n    w = np.linalg.solve(ATA + reg, ATy)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0035, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n    loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)   # shape (N,4)\n    x1 = lnX[:, 0]          # ln(lr)\n    x2 = lnX[:, 1]          # ln(bsz)\n    x3 = lnX[:, 2]          # ln(data_size)\n    x4 = lnX[:, 3]          # ln(non_embed_param_size)\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias term\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Compute log\u2010predictions and return in original scale\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(X + eps)    # shape (N,4)\n    lnY = np.log(y + eps)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization strength\n    lambd = 1e-6\n\n    # Solve (Z^T Z + \u03bbI) w = Z^T lnY\n    # We add \u03bb to the diagonal of Z^T Z for numerical stability\n    M = Z.T.dot(Z)\n    # Add ridge to diagonal entries\n    diag_indices = np.arange(M.shape[0])\n    M[diag_indices, diag_indices] += lambd\n    v = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(M, v)  # shape (10,)\n\n    return w\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.413), Excellent nmae (2.879)\n\n\n### Inspiration 2 (Score: 5.8442, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an extended power\u2010law with an interaction term:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 *\n             param_size**w4 * exp(w5 * log(data_size)*log(param_size))\n\n    In log\u2010space this is:\n      log(loss) = w0\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(param_size)\n                  + w5*log(data_size)*log(param_size)\n\n    Inputs:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds:       (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim != 1 or p.shape[0] != 6:\n        raise ValueError(f\"params must be length 6, got shape {p.shape}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr    = np.clip(X[:, 0], eps, None)\n    bsz   = np.clip(X[:, 1], eps, None)\n    data  = np.clip(X[:, 2], eps, None)\n    param = np.clip(X[:, 3], eps, None)\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data)\n    log_param = np.log(param)\n\n    # interaction term\n    inter = log_data * log_param\n\n    # unpack parameters\n    w0, w1, w2, w3, w4, w5 = p\n\n    # compute log\u2010prediction\n    log_pred = (\n        w0\n        + w1 * log_lr\n        + w2 * log_bsz\n        + w3 * log_data\n        + w4 * log_param\n        + w5 * inter\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power\u2010law model via ridge\u2010regularized least squares in log\u2010space:\n      log(loss) = w0\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(param_size)\n                  + w5*log(data_size)*log(param_size)\n\n    Returns:\n      params: (6,) array [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must have 4 columns, got {X.shape[1]}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    lr    = np.clip(X[:, 0], eps, None)\n    bsz   = np.clip(X[:, 1], eps, None)\n    data  = np.clip(X[:, 2], eps, None)\n    param = np.clip(X[:, 3], eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data)\n    log_param = np.log(param)\n    log_y     = np.log(y_clipped)\n\n    # interaction feature\n    inter = log_data * log_param\n\n    # build design matrix [1, log_lr, log_bsz, log_data, log_param, inter]\n    Z = np.stack(\n        [\n            np.ones_like(log_lr),\n            log_lr,\n            log_bsz,\n            log_data,\n            log_param,\n            inter,\n        ],\n        axis=1,\n    )\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Z.shape[1]\n    M = Z.T.dot(Z) + ridge * np.eye(P)\n    v = Z.T.dot(log_y)\n\n    # solve for parameters\n    w = np.linalg.solve(M, v)\n    return w\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (272.443), Excellent nmae (22.373)\n\n\n### Inspiration 3 (Score: 2.6357, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.997), Excellent nmae (9.523)\n\n\n### Inspiration 4 (Score: 4.5588, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via an enhanced power\u2010law with\n    a quadratic term in ln(lr):\n      ln(loss) \u2248 w0\n                 + w1 * ln(lr)\n                 + w2 * [ln(lr)]^2\n                 + w3 * ln(bsz)\n                 + w4 * ln(data_size)\n                 + w5 * ln(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6)\n                   representing [w0, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: (N,) or (N,T) array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    # support broadcasting multiple parameter sets\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"params must have length 6, got {P}\")\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n\n    # build feature matrix Z: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)  # shape (N,6)\n\n    # compute ln(pred) = Z \u00b7 p^T => shape (N,T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n\n    # if only one parameter set, return shape (N,)\n    return Y[:, 0] if Y.shape[1] == 1 else Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by ridge\u2010regularized linear regression\n    in the transformed feature space:\n      ln(loss) \u2248 w0 + w1*ln(lr) + w2*ln(lr)^2\n                 + w3*ln(bsz) + w4*ln(data_size) + w5*ln(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 6: [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n\n    ln_lr   = np.log(lr)\n    ln_bsz  = np.log(bsz)\n    ln_D    = np.log(D)\n    ln_M    = np.log(M)\n    ln_y    = np.log(y + eps)\n\n    # build design matrix Z: [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr**2,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)  # shape (N,6)\n\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n\n    # solve normal equations\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (163.095), Excellent nmae (17.229)\n\n\n### Inspiration 5 (Score: 4.5588, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training hyperparameters.\nWe model the loss as a power\u2010law in batch size, data size, and model size,\nwith a quadratic term in the log\u2010learning\u2010rate to capture its U\u2010shaped effect:\n\n    ln(loss) \u2248 w0\n               + w1 * ln(lr)\n               + w2 * [ln(lr)]^2\n               + w3 * ln(bsz)\n               + w4 * ln(data_size)\n               + w5 * ln(non_embedding_param_size)\n\nThis remains linear in transformed features for closed\u2010form ridge\u2010regularized fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via the enhanced power\u2010law model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6):\n                   [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds: array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    # ensure params has shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"params must have length 6, got {P}\")\n    # log\u2010transform inputs (add eps to avoid log(0))\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_lr  = np.log(lr)\n    ln_bsz = np.log(bsz)\n    ln_D   = np.log(D)\n    ln_M   = np.log(M)\n    # build design matrix Z: shape (N,6)\n    # [1, ln_lr, ln_lr^2, ln_bsz, ln_D, ln_M]\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr * ln_lr,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)\n    # compute ln(loss) and exponentiate\n    ln_pred = Z.dot(p.T)    # (N,6) dot (6,T) -> (N,T)\n    Y = np.exp(ln_pred)\n    # if single parameter set, return (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law model by ridge\u2010regularized linear regression\n    in the transformed log\u2010feature space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of shape (6,):\n                   [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    # log\u2010transform inputs and targets\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    ln_lr   = np.log(lr)\n    ln_bsz  = np.log(bsz)\n    ln_D    = np.log(D)\n    ln_M    = np.log(M)\n    ln_y    = np.log(y + eps)\n    # design matrix Z: (N,6)\n    Z = np.stack([\n        np.ones_like(ln_lr),\n        ln_lr,\n        ln_lr * ln_lr,\n        ln_bsz,\n        ln_D,\n        ln_M\n    ], axis=1)\n    # ridge regularization\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T ln_y\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(ln_y)\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (163.095), Excellent nmae (17.229)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus a quadratic power\u2010law term for lr:\n      loss = L_inf\n           + exp(\n               w0\n               + w_lr * ln(lr)\n               + w_lr2 * (ln(lr))^2\n               + w_bsz * ln(bsz)\n               + w_data * ln(data_size)\n               + w_param * ln(non_embedding_param_size)\n             )\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (7,)\n                   [L_inf, w0, w_lr, w_lr2, w_bsz, w_data, w_param]\n    Returns:\n      preds:       array of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # unpack parameters\n    L_inf, w0, w_lr, w_lr2, w_bsz, w_data, w_param = p\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)\n    lr_log   = lnX[:, 0]\n    bsz_log  = lnX[:, 1]\n    data_log = lnX[:, 2]\n    param_log= lnX[:, 3]\n    # build log term with quadratic lr effect\n    log_term = (\n        w0\n        + w_lr  * lr_log\n        + w_lr2 * (lr_log ** 2)\n        + w_bsz * bsz_log\n        + w_data* data_log\n        + w_param * param_log\n    )\n    return L_inf + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter model\n      loss = L_inf + exp(w0 + w_lr*ln(lr) + w_lr2*(ln(lr))^2\n                       + w_bsz*ln(bsz) + w_data*ln(data_size)\n                       + w_param*ln(non_embed_params))\n    by bounded L\u2010BFGS\u2010B minimizing mean squared error.\n\n    Returns:\n      params: array of shape (7,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # prepare log\u2010features\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lnX = np.log(Xc)\n    lr_log   = lnX[:, 0]\n    bsz_log  = lnX[:, 1]\n    data_log = lnX[:, 2]\n    param_log= lnX[:, 3]\n    # clip targets\n    yc = np.clip(y, eps, None)\n\n    # initial guess: place L_inf at half the minimal loss\n    min_y = yc.min()\n    init_L = min_y * 0.5\n    # intercept for exp\u2010term\n    init_w0 = np.log(max(eps, np.mean(yc - init_L)))\n    # other slopes start at zero\n    init_params = np.array([init_L, init_w0, 0., 0., 0., 0., 0.], dtype=np.float64)\n\n    # bounds: L_inf in [0,0.9*min_y], others unbounded\n    bounds = [(0.0, 0.9 * min_y)] + [(-np.inf, np.inf)] * 6\n\n    # objective: MSE in loss\u2010space\n    def objective(p):\n        L_inf, w0, w_lr, w_lr2, w_bsz, w_data, w_param = p\n        log_term = (\n            w0\n            + w_lr  * lr_log\n            + w_lr2 * (lr_log ** 2)\n            + w_bsz * bsz_log\n            + w_data* data_log\n            + w_param * param_log\n        )\n        preds = L_inf + np.exp(log_term)\n        return np.mean((preds - yc) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            init_params,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n               + w1\u00b7ln(lr) + w2\u00b7[ln(lr)]^2\n               + w3\u00b7ln(bsz) + w4\u00b7[ln(bsz)]^2\n               + w5\u00b7ln(data_size) + w6\u00b7[ln(data_size)]^2\n               + w7\u00b7ln(param_size) + w8\u00b7[ln(param_size)]^2\n               + w9\u00b7[ln(data_size)*ln(param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lnX = np.log(Xc)    # shape (N,4)\n    x1 = lnX[:, 0]      # ln(lr)\n    x2 = lnX[:, 1]      # ln(bsz)\n    x3 = lnX[:, 2]      # ln(data_size)\n    x4 = lnX[:, 3]      # ln(param_size)\n\n    # build design matrix Z with 10 features\n    Z = np.column_stack([\n        np.ones_like(x1),  # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4          # interaction term\n    ])  # shape (N,10)\n\n    ln_pred = Z.dot(p)  # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10\u2010parameter model by ridge\u2010regularized least squares in log\u2010space:\n      minimize || ln(y) - Z\u00b7w ||^2 + \u03bb ||w||^2\n    where Z is the design matrix built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of data_points and loss_values must match: {X.shape[0]} != {y.shape[0]}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    lnX = np.log(Xc)    # shape (N,4)\n    lnY = np.log(yc)    # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # (N,10)\n\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    A = Z.T.dot(Z) + lambd * np.eye(Z.shape[1])\n    b = Z.T.dot(lnY)\n\n    # solve normal equations\n    w = np.linalg.solve(A, b)  # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}