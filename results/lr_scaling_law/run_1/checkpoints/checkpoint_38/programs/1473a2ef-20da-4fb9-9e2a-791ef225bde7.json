{"id": "1473a2ef-20da-4fb9-9e2a-791ef225bde7", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using a log\u2010linear (multiplicative power\u2010law) form \nwith closed\u2010form least\u2010squares fitting in the log domain for stability, \ncross\u2010scale generalization, and parameter efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a multiplicative power law:\n      loss \u2248 exp(intercept + \u03a3_i coef_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embed_param_size].\n    \n    Inputs:\n      data_points: (N,4) array of positive hyperparameters\n      params: either shape (P,) or (T,P), P=5 = 1 intercept + 4 coefs\n    Output:\n      preds: shape (N,) if single\u2010output, else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if np.any(X <= 0):\n        raise ValueError(\"All input features must be positive for log transform.\")\n    N, F = X.shape\n    params = np.asarray(params, dtype=float)\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected {F+1} parameters, got {P}\")\n    intercept = params[:, 0]       # (T,)\n    coefs     = params[:, 1:]      # (T, F)\n    logX      = np.log(X)          # (N, F)\n    # log\u2010domain prediction: (N,T)\n    log_pred  = logX.dot(coefs.T) + intercept[None, :]\n    pred      = np.exp(log_pred)   # (N, T)\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by solving:\n      minimize || log(y) \u2212 [1, log(x)]\u00b7theta ||^2\n    in closed form via np.linalg.lstsq.\n    \n    Returns params of shape (5,) or (T,5).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if np.any(X <= 0):\n        raise ValueError(\"All input features must be positive for log transform.\")\n    # handle single vs. multi\u2010target\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    if np.any(y2d <= 0):\n        raise ValueError(\"All target loss values must be positive for log transform.\")\n    N, F = X.shape\n    # build design matrix [1, log(x1), ..., log(xF)]\n    logX   = np.log(X)                             # (N, F)\n    Design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    # solve in log\u2010domain: theta has shape (F+1, ) or (F+1, T)\n    theta, *_ = np.linalg.lstsq(Design, np.log(y2d), rcond=None)\n    # reshape to match original API: (P,) or (T, P)\n    if theta.ndim == 1:\n        return theta\n    else:\n        return theta.T\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cf3e9a41-2c66-4ef0-ba16-07480195fb70", "generation": 1, "timestamp": 1754798721.8862307, "iteration_found": 5, "metrics": {"nmse": 165.00325163958752, "nmae": 17.39750302715468, "r2": -164.00325163958752, "combined_score": 0.00602397838670725}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 9.958921558551933e+28, "nmae": 428288771110437.75, "r2": -9.958921558551933e+28, "combined_score": 1.0041247881315816e-29}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 99589215585519330125424885760.0000\n- nmae: 428288771110437.7500\n- r2: -99589215585519330125424885760.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 99589215585519330125424885760.0000, nmae: 428288771110437.7500, r2: -99589215585519330125424885760.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (99589215585519330125424885760.0000), Performs well on nmae (428288771110437.7500), Performs well on r2 (-99589215585519330125424885760.0000), Performs well on combined_score (0.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using a log\u2010linear (multiplicative power\u2010law) form \nwith closed\u2010form least\u2010squares fitting in the log domain for stability, \ncross\u2010scale generalization, and parameter efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a multiplicative power law:\n      loss \u2248 exp(intercept + \u03a3_i coef_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embed_param_size].\n    \n    Inputs:\n      data_points: (N,4) array of positive hyperparameters\n      params: either shape (P,) or (T,P), P=5 = 1 intercept + 4 coefs\n    Output:\n      preds: shape (N,) if single\u2010output, else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if np.any(X <= 0):\n        raise ValueError(\"All input features must be positive for log transform.\")\n    N, F = X.shape\n    params = np.asarray(params, dtype=float)\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected {F+1} parameters, got {P}\")\n    intercept = params[:, 0]       # (T,)\n    coefs     = params[:, 1:]      # (T, F)\n    logX      = np.log(X)          # (N, F)\n    # log\u2010domain prediction: (N,T)\n    log_pred  = logX.dot(coefs.T) + intercept[None, :]\n    pred      = np.exp(log_pred)   # (N, T)\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by solving:\n      minimize || log(y) \u2212 [1, log(x)]\u00b7theta ||^2\n    in closed form via np.linalg.lstsq.\n    \n    Returns params of shape (5,) or (T,5).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if np.any(X <= 0):\n        raise ValueError(\"All input features must be positive for log transform.\")\n    # handle single vs. multi\u2010target\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    if np.any(y2d <= 0):\n        raise ValueError(\"All target loss values must be positive for log transform.\")\n    N, F = X.shape\n    # build design matrix [1, log(x1), ..., log(xF)]\n    logX   = np.log(X)                             # (N, F)\n    Design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    # solve in log\u2010domain: theta has shape (F+1, ) or (F+1, T)\n    theta, *_ = np.linalg.lstsq(Design, np.log(y2d), rcond=None)\n    # reshape to match original API: (P,) or (T, P)\n    if theta.ndim == 1:\n        return theta\n    else:\n        return theta.T\n# EVOLVE-BLOCK-END\n```"]}}}