{"id": "11434eda-d46b-41ed-9249-ebb522192220", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model: a power\u2010law term plus a constant floor.\nForm:\n    loss \u2248 A * \u220f_i x_i^{\u03b1_i}  +  C\nEquivalently in log\u2010space:\n    loss \u2248 exp(logA + \u03a3_i \u03b1_i log(x_i)) + exp(logC)\n\nWe fit [logA, \u03b1_1\u2026\u03b1_F, logC] by minimizing MSE in the original loss space\nusing L-BFGS-B. This keeps parameter count low (F+2) for stability\nand captures both diminishing returns (via exponents) and a loss floor.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss for N points from hyperparameters and params.\n    data_points: array (N, F) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array (F+2,) or (T, F+2) holding [logA, \u03b1_1\u2026\u03b1_F, logC]\n    Returns:\n        preds: (N,) if params is 1D, or (N, T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D samples\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=float)\n    # unify params to shape (T, P)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params of length {F+2}, got {P}\")\n\n    logA   = p[:, 0]           # shape (T,)\n    alphas = p[:, 1:1+F]       # shape (T, F)\n    logC   = p[:, -1]          # shape (T,)\n\n    # safe log of features\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)      # shape (N, F)\n\n    # compute power\u2010law term: logA + logX @ alphas.T\n    exponent_term = logA[None, :] + logX.dot(alphas.T)   # (N, T)\n    # back to original space and add constant term\n    preds = np.exp(exponent_term) + np.exp(logC)[None, :] # (N, T)\n\n    # if single parameter set, return 1D array\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the F+2 parameter model [logA, \u03b1_1\u2026\u03b1_F, logC] by minimizing\n    MSE(loss_pred, loss_values) in the original loss space.\n    Returns:\n      params: array of length F+2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # clamp to avoid zeros\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logA = log(median(y))\n    #   \u03b1_i  = 0\n    #   logC = log(0.1 * min(y))\n    median_y = np.median(y)\n    min_y = np.min(y)\n    init = np.zeros(P, dtype=float)\n    init[0] = np.log(median_y + 1e-8)\n    init[1:1+F] = 0.0\n    init[-1] = np.log(min_y * 0.1 + 1e-8)\n\n    # objective: mean squared error in original space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize with L-BFGS-B for robustness\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    # return optimized or fallback to init\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cf3e9a41-2c66-4ef0-ba16-07480195fb70", "generation": 1, "timestamp": 1754798799.8784149, "iteration_found": 20, "metrics": {"nmse": 158.49162185748884, "nmae": 17.048856771924793, "r2": -157.49162185748884, "combined_score": 0.006269921820053557}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 9.958921558551933e+28, "nmae": 428288771110437.75, "r2": -9.958921558551933e+28, "combined_score": 1.0041247881315816e-29}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 99589215585519330125424885760.0000\n- nmae: 428288771110437.7500\n- r2: -99589215585519330125424885760.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 2 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 3 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model using log\u2010linear regression (power\u2010law).\nModel form:\n    loss \u2248 exp(b0) * lr^b1 * bsz^b2 * data_size^b3 * param_size^b4\n\nWe fit by ordinary least squares on log\u2010log data for numerical stability\nand parameter efficiency. This yields a simple, generalizable 5\u2010parameter model.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a single power\u2010law model.\n    data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:    array of length 5, or shape (T,5)\n               params[:,0] = b0 (intercept in log\u2010space)\n               params[:,1] = exponent on lr\n               params[:,2] = exponent on bsz\n               params[:,3] = exponent on data_size\n               params[:,4] = exponent on non_embedding_param_size\n    Returns:\n        preds: shape (N,) if one model, or (N,T) for T parameter sets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,4)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    params = np.asarray(params, dtype=float)\n    # Ensure shape (T,5)\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected parameter length {F+1}, got {P}\")\n    # split intercept and exponents\n    b0 = params[:, 0:1]   # (T,1)\n    exps = params[:, 1:]  # (T,4)\n    # log features\n    # clip to avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)     # (N,4)\n    # compute predicted log\u2010loss: (N,T) = logX @ exps.T + b0.T\n    pred_log = logX.dot(exps.T) + b0.T  # (N,T)\n    pred = np.exp(pred_log)             # (N,T)\n    # return shape (N,) if single model\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law model by linear least squares in log\u2010space.\n    Solves:  log(loss) \u2248 b0 + b1*log(lr) + b2*log(bsz)\n                             + b3*log(data_size) + b4*log(param_size)\n    Returns:\n        params: array length 5 = [b0, b1, b2, b3, b4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float).ravel()         # (N,)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Mismatch between data_points and loss_values lengths\")\n    # take logs (clip to avoid log of zero)\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n    logX = np.log(X_safe)   # (N,4)\n    logy = np.log(y_safe)   # (N,)\n    # build design matrix [1, logX]\n    # shape (N, 1+F)\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n    # solve (A^T A + \u03bbI) \u03b2 = A^T logy for stability (tiny ridge)\n    \u03bb = 1e-8\n    ATA = A.T.dot(A)\n    reg = \u03bb * np.eye(F + 1)\n    coef = np.linalg.solve(ATA + reg, A.T.dot(logy))  # (5,)\n    return coef\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.5138, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (158.492), Excellent nmae (17.049)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model: a power\u2010law term plus a constant floor.\nForm:\n    loss \u2248 A * \u220f_i x_i^{\u03b1_i}  +  C\nEquivalently in log\u2010space:\n    loss \u2248 exp(logA + \u03a3_i \u03b1_i log(x_i)) + exp(logC)\n\nWe fit [logA, \u03b1_1\u2026\u03b1_F, logC] by minimizing MSE in the original loss space\nusing L-BFGS-B. This keeps parameter count low (F+2) for stability\nand captures both diminishing returns (via exponents) and a loss floor.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss for N points from hyperparameters and params.\n    data_points: array (N, F) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array (F+2,) or (T, F+2) holding [logA, \u03b1_1\u2026\u03b1_F, logC]\n    Returns:\n        preds: (N,) if params is 1D, or (N, T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D samples\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=float)\n    # unify params to shape (T, P)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params of length {F+2}, got {P}\")\n\n    logA   = p[:, 0]           # shape (T,)\n    alphas = p[:, 1:1+F]       # shape (T, F)\n    logC   = p[:, -1]          # shape (T,)\n\n    # safe log of features\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)      # shape (N, F)\n\n    # compute power\u2010law term: logA + logX @ alphas.T\n    exponent_term = logA[None, :] + logX.dot(alphas.T)   # (N, T)\n    # back to original space and add constant term\n    preds = np.exp(exponent_term) + np.exp(logC)[None, :] # (N, T)\n\n    # if single parameter set, return 1D array\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the F+2 parameter model [logA, \u03b1_1\u2026\u03b1_F, logC] by minimizing\n    MSE(loss_pred, loss_values) in the original loss space.\n    Returns:\n      params: array of length F+2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # clamp to avoid zeros\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logA = log(median(y))\n    #   \u03b1_i  = 0\n    #   logC = log(0.1 * min(y))\n    median_y = np.median(y)\n    min_y = np.min(y)\n    init = np.zeros(P, dtype=float)\n    init[0] = np.log(median_y + 1e-8)\n    init[1:1+F] = 0.0\n    init[-1] = np.log(min_y * 0.1 + 1e-8)\n\n    # objective: mean squared error in original space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize with L-BFGS-B for robustness\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    # return optimized or fallback to init\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```"]}}}