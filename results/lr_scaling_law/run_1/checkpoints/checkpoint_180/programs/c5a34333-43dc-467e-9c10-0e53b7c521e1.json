{"id": "c5a34333-43dc-467e-9c10-0e53b7c521e1", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010space bounds (from problem description) for normalization\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding parameter size min\n], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space => z \u2248 (\u22121, +1)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small constant to avoid log(0)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z = (log(X) \u2212 _LOG_MEAN) / _LOG_SCALE\n    Features per sample (15 total):\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns: (N,15) matrix\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    \n    # log\u2010transform and normalize to roughly [\u22121,1]\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) squared terms\n    cols.append(z * z)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    A = _build_design_matrix(data_points)    # (N,15)\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)                  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: mismatched number of points and losses\")\n\n    # design matrix and target\n    A     = _build_design_matrix(X)          # (N,15)\n    y_log = np.log(y + _eps)                 # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                         # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P           # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                          # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    if cond > cond_thresh:\n        scale = cond / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "387e9d7b-5f74-4c63-a463-844a915747fc", "generation": 3, "timestamp": 1754805315.2977722, "iteration_found": 178, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 218.13036572350856, "nmae": 19.38630818481267, "r2": -217.13036572350856, "combined_score": 0.004563493501680032}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 218.1304\n- nmae: 19.3863\n- r2: -217.1304\n- combined_score: 0.0046\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2375, nmae: 3.1862, r2: -7.2375, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-space bounds for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small constant to avoid log(0)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Builds a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features per sample (total 15):\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # Allow single-sample inputs\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    \n    # Log-transform and normalize to roughly [-1, 1]\n    logs = np.log(X + _eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE     # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z * z)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all feature columns into (N,15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a 15-parameter 2nd-degree polynomial scaling law:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    \n    Inputs:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-sample inputs\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 15-parameter polynomial scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n    with adaptive \u03bb = 1e-4 * trace(A\u1d40A) / P, no penalty on intercept \u03b80.\n    \n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-sample inputs\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A     = _build_design_matrix(X)      # (N,15)\n    y_log = np.log(y + _eps)             # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                      # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    if np.linalg.cond(ATA_reg) > cond_thresh:\n        # scale up regularization on non-intercept terms\n        scale = np.linalg.cond(ATA_reg) / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # Solve reliably\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Static log\u2010space normalization constants (from problem description)\n_LOG_MIN   = np.log(np.array([1.2e-4,   # lr\n                              16.0,     # batch size\n                              4e9,      # data size (tokens)\n                              2.14e8    # non\u2010embedding parameter size\n                             ], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2,   # lr\n                              4096.0,   # batch size\n                              1e11,     # data size (tokens)\n                              1e9       # non\u2010embedding parameter size\n                             ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010space:\n      z = (log(x) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Output shape: (N, 15)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {X.shape[1]}\")\n    # safe log and normalize\n    logs = np.log(X + _eps)                     # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE       # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z * z)\n    # Pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append((z[:, i] * z[:, j])[:, None])\n\n    return np.hstack(cols)  # (N, 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010space.\n    Inputs:\n      data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: (N,) predicted lm loss\n    \"\"\"\n    A = _build_design_matrix(data_points)       # (N,15)\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)                     # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter scaling law by ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    A = _build_design_matrix(data_points)       # (N,15)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if A.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # log\u2010transform target\n    y_log = np.log(y + _eps)\n\n    # ridge regularization (no penalty on intercept)\n    P   = A.shape[1]\n    lam = 1e-3                                  # increased regularization for stability\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA  = A.T.dot(A) + reg\n    ATy  = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2375), Performs well on nmae (3.1862), Performs well on r2 (-7.2375), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on problem description\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 100e9, 1e9    ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Given X of shape (N,4), build a 2nd-degree polynomial design matrix in\n    the normalized log-features z = (log(X) - _LOG_MEAN)/_LOG_SCALE.\n    Columns = [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Resulting matrix shape: (N,15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    feats = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n\n    return np.stack(feats, axis=1)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 2nd-degree polynomial in normalized\n    log-features:\n      log_loss = A(X) \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array-like of length 15 (\u03b80\u2026\u03b814)\n\n    Output:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func expects 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-4):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law via ridge-regularized\n    least squares on log-transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) with positive losses\n      ridge_lambda: regularization strength (default 1e-4)\n\n    Output:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    P = A.shape[1]                   # 15 parameters\n    # Ridge regularization (no penalty on intercept \u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for normalization to roughly [-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree Chebyshev\u2010basis polynomial design matrix on\n    normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Features per sample (N\u00d715):\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2 z^2 \u2212 1.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                       # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE           # normalize to ~[-1,1]\n    N, F = z.shape                                # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear Chebyshev terms = z\n    cols.append(z)\n    # quadratic Chebyshev terms = T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like (15,) Chebyshev coefficients\n\n    Returns:\n      preds: ndarray (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)      # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"Expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter Chebyshev\u2010polynomial scaling law by\n    ordinary least squares in log\u2010loss space. Falls back to\n    ridge regularization only if the normal equations are ill\u2010conditioned.\n\n      \u03b8 = argmin ||A \u03b8 \u2212 log(y)||^2\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: ndarray (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    # Solve ordinary least squares via SVD (np.linalg.lstsq)\n    # This yields the minimum\u2010norm solution without bias from regularization.\n    try:\n        theta_opt, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    except Exception:\n        # Fallback to pseudoinverse if something goes wrong\n        theta_opt = np.linalg.pinv(A).dot(y_log)\n\n    # Check conditioning; if extremely ill\u2010conditioned, add tiny ridge\n    # to stabilize for future predictions.\n    ATA = A.T.dot(A)\n    cond = np.linalg.cond(ATA)\n    if cond > 1e12:\n        P = ATA.shape[0]\n        lam = 1e-8 * np.trace(ATA) / P\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        ATy = A.T.dot(y_log)\n        try:\n            theta_opt = np.linalg.solve(ATA_reg, ATy)\n        except np.linalg.LinAlgError:\n            theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Middle and half\u2010range for each log\u2010feature (for normalization)\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z = (log(x) - _LOG_MID) / _LOG_HALF_RANGE\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15:\n        [\u03b80,\n         \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n         \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n         \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n         \u03b83_bsz_data, \u03b83_bsz_param,\n         \u03b83_data_param]\n    Returns:\n      preds: (N,) predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {F}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if theta.size != expected_len:\n        raise ValueError(f\"scaling_law_func expects {expected_len} params, got {theta.size}\")\n\n    # Safe log\u2010transform and z\u2010score normalization in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)              # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # normalized logs\n\n    # Build design matrix A of shape (N,15)\n    #  - intercept\n    #  - linear terms z_i\n    #  - quadratic terms z_i^2\n    #  - cross terms z_i * z_j for i<j\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z * z]  # (N, 1 + 4 + 4)\n    # pairwise interactions\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        cols.append(np.hstack(cross_cols))\n    A = np.hstack(cols)  # shape (N,15)\n\n    # Compute log\u2010loss and exponentiate\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law via\n    ridge\u2010regularized least squares on log(loss):\n\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb * ||\u03b8_{1:}||^2\n\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed lm losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {F}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Build the same design matrix A as in scaling_law_func\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z * z]\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        cols.append(np.hstack(cross_cols))\n    A = np.hstack(cols)  # (N,15)\n\n    # Target is log\u2010loss\n    y_log = np.log(y + eps)\n\n    # Ridge regularization: \u03bb > 0 for \u03b81:, but no penalty on \u03b80\n    P = A.shape[1]\n    ridge_lambda = 1e-5\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n\n    return theta_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-space bounds for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small constant to avoid log(0)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Builds a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features per sample (total 15):\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # Allow single-sample inputs\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n    \n    # Log-transform and normalize to roughly [-1, 1]\n    logs = np.log(X + _eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE     # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z * z)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all feature columns into (N,15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a 15-parameter 2nd-degree polynomial scaling law:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    \n    Inputs:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted lm losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-sample inputs\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 15-parameter polynomial scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n    with adaptive \u03bb = 1e-4 * trace(A\u1d40A) / P, no penalty on intercept \u03b80.\n    \n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-sample inputs\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A     = _build_design_matrix(X)      # (N,15)\n    y_log = np.log(y + _eps)             # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                      # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    if np.linalg.cond(ATA_reg) > cond_thresh:\n        # scale up regularization on non-intercept terms\n        scale = np.linalg.cond(ATA_reg) / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # Solve reliably\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 5.0983, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.179), Excellent nmae (19.389)\n\n\n### Inspiration 3 (Score: 3.7843, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      Loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    # compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2010linear scaling law by solving a small ridge\u2010regularized\n    least squares problem in log\u2010space:\n      minimize \u2016A \u03b8 \u2212 log(y)\u2016\u00b2 + \u03bb\u2016\u03b8\u2016\u00b2\n    where A = [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size)].\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of training losses (must be >0)\n    Returns:\n      theta: ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # shape (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    # ridge regularization strength (small for numerical stability)\n    lam = 1e-6\n    # solve (A\u1d40A + \u03bbI) \u03b8 = A\u1d40 y_log\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(ATA.shape[0], dtype=ATA.dtype)\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 4 (Score: 3.6361, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a simple 5-parameter power-law in the raw logs of the inputs:\n      log_loss = \u03b80\n               + \u03b81 * log(lr)\n               + \u03b82 * log(bsz)\n               + \u03b83 * log(data_size)\n               + \u03b84 * log(non_embedding_param_size)\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    # check shape\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {theta.size}\")\n\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_param)]\n    N = X.shape[0]\n    A = np.empty((N, 5), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1:] = logs\n\n    # linear model in log\u2010space\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law scaling law by ridge-regularized least squares\n    on the log of the loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (5,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)  # (N,4)\n\n    N = X.shape[0]\n    # A = [1, log(lr), log(bsz), log(data_size), log(non_emb_param)]\n    A = np.empty((N, 5), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1:] = logs\n\n    # target\n    y_log = np.log(y + eps)  # (N,)\n\n    # normal equations with ridge penalty on \u03b81: (excluding intercept)\n    ATA = A.T.dot(A)          # (5,5)\n    ATy = A.T.dot(y_log)      # (5,)\n\n    P = ATA.shape[0]          # =5\n    # adaptive regularization strength\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = np.eye(P, dtype=np.float64) * lam\n    reg[0, 0] = 0.0  # no penalty on \u03b80\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    try:\n        theta_opt = np.linalg.solve(ATA + reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA + reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (103.848), Excellent nmae (13.535)\n\n\n### Inspiration 5 (Score: 4.8007, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range to normalize log\u2010features into roughly [-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design(X):\n    \"\"\"\n    Build a compact design matrix with:\n      - intercept\n      - normalized linear log\u2010features z_i\n      - one synergy interaction term z_data * z_params\n    Returns shape (N, 6).\n    \"\"\"\n    eps = 1e-12\n    # safe log and normalize\n    logs = np.log(X + eps)                 # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    # intercept and linear terms\n    N = X.shape[0]\n    intercept = np.ones((N,1), dtype=np.float64)\n    lin_terms  = z                         # (N,4)\n    # synergy term between data_size (idx=2) and non_embedding_param_size (idx=3)\n    synergy    = (z[:,2] * z[:,3])[:,None]  # (N,1)\n    # stack into (N,6): [1, z_lr, z_bsz, z_data, z_params, z_data*z_params]\n    return np.hstack([intercept, lin_terms, synergy])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 6\u2010parameter log\u2010linear model with one interaction:\n      log_loss \u2248 \u03b80 + \u03a3_{i=1..4} \u03b8_i * z_i + \u03b85 * (z_data * z_params)\n      loss      = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of shape (6,)\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 params, got {theta.size}\")\n    A = _build_design(X)    # (N,6)\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter compact scaling law by ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80 intercept)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (6,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n    # build design and target\n    A = _build_design(X)     # (N,6)\n    eps = 1e-12\n    y_log = np.log(y + eps)  # (N,)\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)         # (6,6)\n    P = ATA.shape[0]\n    lam = 1e-6 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0           # no penalty on intercept\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n    # solve\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (186.384), Excellent nmae (18.197)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced log\u2010quadratic scaling law:\n      log(loss) \u2248 \u03b80\n                  + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n                  + \u03b85*log(lr)*log(bsz)\n                  + \u03b86*log(lr)*log(data_size)\n                  + \u03b87*log(lr)*log(non_embed_param_size)\n                  + \u03b88*log(bsz)*log(data_size)\n                  + \u03b89*log(bsz)*log(non_embed_param_size)\n                  + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log(loss))\n    Inputs:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embed_param_size]\n      params:      length\u201011 array of \u03b8 coefficients\n    Returns:\n      (N,) array of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects 11 params, got {theta.size}\")\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    l0, l1, l2, l3 = logs[:, 0], logs[:, 1], logs[:, 2], logs[:, 3]\n    # build log-domain prediction\n    log_pred = np.full_like(l0, theta[0])\n    log_pred += theta[1] * l0 + theta[2] * l1 + theta[3] * l2 + theta[4] * l3\n    log_pred += theta[5] * (l0 * l1)\n    log_pred += theta[6] * (l0 * l2)\n    log_pred += theta[7] * (l0 * l3)\n    log_pred += theta[8] * (l1 * l2)\n    log_pred += theta[9] * (l1 * l3)\n    log_pred += theta[10] * (l2 * l3)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the \u03b8 vector by ridge\u2010regularized least squares in log\u2010space.\n    Solves:\n      y_log = log(loss + eps)\n      \u0398 = argmin ||A \u0398 \u2212 y_log||^2 + \u03bb||\u0398||^2\n    where A has columns:\n      [1,\n       log(lr), log(bsz), log(data_size), log(non_embed_param_size),\n       log(lr)*log(bsz), log(lr)*log(data_size), log(lr)*log(non_embed_param_size),\n       log(bsz)*log(data_size), log(bsz)*log(non_embed_param_size), log(data_size)*log(non_embed_param_size)\n      ]\n    Returns:\n      \u03b8: length\u201011 coefficient array\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)  # (N,4)\n    l0, l1, l2, l3 = logs[:, 0], logs[:, 1], logs[:, 2], logs[:, 3]\n    N = X.shape[0]\n    # design matrix with intercept, 4 raw logs, and 6 pairwise log\u2010interactions\n    A = np.column_stack([\n        np.ones(N),\n        l0, l1, l2, l3,\n        l0 * l1,\n        l0 * l2,\n        l0 * l3,\n        l1 * l2,\n        l1 * l3,\n        l2 * l3\n    ])  # shape (N,11)\n    y_log = np.log(y + eps)\n    # closed\u2010form ridge regression\n    AtA = A.T @ A\n    lam = 1e-6\n    reg = lam * np.eye(AtA.shape[0])\n    theta = np.linalg.solve(AtA + reg, A.T @ y_log)\n    return theta\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010space bounds (from problem description) for normalization\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding parameter size min\n], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space => z \u2248 (\u22121, +1)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small constant to avoid log(0)\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z = (log(X) \u2212 _LOG_MEAN) / _LOG_SCALE\n    Features per sample (15 total):\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns: (N,15) matrix\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    \n    # log\u2010transform and normalize to roughly [\u22121,1]\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) squared terms\n    cols.append(z * z)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    A = _build_design_matrix(data_points)    # (N,15)\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)                  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: mismatched number of points and losses\")\n\n    # design matrix and target\n    A     = _build_design_matrix(X)          # (N,15)\n    y_log = np.log(y + _eps)                 # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                         # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P           # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                          # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond = np.linalg.cond(ATA_reg)\n    if cond > cond_thresh:\n        scale = cond / cond_thresh\n        reg[1:, 1:] *= scale\n        ATA_reg = ATA + reg\n\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of Improvements:\n1. Switched to a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010space (intercept, linear, squared, pairwise interactions), capturing both non\u2010linear and cross\u2010feature effects.\n2. Applied z\u2010score normalization in log\u2010space to keep feature ranges near [\u22121,1], improving numerical conditioning.\n3. Used adaptive ridge regularization (\u03bb \u221d trace(A\u1d40A)/P) with no penalty on the intercept, boosting stability across scales.\n4. Dynamically increased regularization if the condition number exceeds a threshold for robust fitting.\n5. Maintained the original function signatures and outputs while significantly enhancing expressiveness and numerical stability."]}}}