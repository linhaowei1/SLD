{"id": "4003e571-6ab7-49cc-befd-72d088c7a93c", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "229cf936-ceb4-4889-8fcc-38eaeced54ec", "generation": 2, "timestamp": 1754801878.1445606, "iteration_found": 12, "metrics": {"nmse": 15.70391590076868, "nmae": 4.243290137326089, "r2": -14.70391590076868, "combined_score": 0.059866201790083375}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.9881536359387, "nmae": 14.128417620739429, "r2": -111.9881536359387, "combined_score": 0.008772841458541842}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}