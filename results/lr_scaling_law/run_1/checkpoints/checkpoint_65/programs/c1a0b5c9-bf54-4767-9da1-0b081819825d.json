{"id": "c1a0b5c9-bf54-4767-9da1-0b081819825d", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 6\u2010parameter quadratic log\u2010law:\n      log L = a0\n            + a1*log(N)\n            + a2*log(D)\n            + a3*log(B)\n            + a4*log(\u03b7)\n            + a5*(log(\u03b7))^2\n    L = exp(log L)\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 [a0,a1,...,a5]\n                   or 2D array of shape (T,6) for T parallel models\n\n    Returns:\n      If params is 1D: (N,) array of predicted losses\n      If params is 2D: (N,T) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # safe log transform\n    eps = 1e-12\n    lr     = np.clip(X[:, 0], eps, None)\n    bsz    = np.clip(X[:, 1], eps, None)\n    D      = np.clip(X[:, 2], eps, None)\n    Nparam = np.clip(X[:, 3], eps, None)\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_N   = np.log(Nparam)\n\n    # design matrix: [1, log_N, log_D, log_bsz, log_lr, (log_lr)^2]\n    A = np.vstack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_L = A.dot(p)           # shape (N,)\n        return np.exp(log_L)\n\n    # multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # compute for each of T parameter sets\n        # log_L shape -> (N, T)\n        log_L = A.dot(p.T)\n        return np.exp(log_L)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by ridge\u2010regularized\n    least\u2010squares in log\u2010space:\n\n      minimize ||A\u00b7p \u2013 log(y)||^2 + \u03bb\u00b7||p_s||^2\n\n    where A columns = [1, log(N), log(D), log(B), log(\u03b7), (log(\u03b7))^2]\n    and p_s excludes the intercept term from regularization.\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # safe log transforms\n    eps = 1e-12\n    lr     = np.clip(X[:, 0], eps, None)\n    bsz    = np.clip(X[:, 1], eps, None)\n    D      = np.clip(X[:, 2], eps, None)\n    Nparam = np.clip(X[:, 3], eps, None)\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_N   = np.log(Nparam)\n    log_y   = np.log(np.clip(y, eps, None))\n\n    # Build design matrix A: shape (N,6)\n    # columns = [1, log_N, log_D, log_bsz, log_lr, (log_lr)^2]\n    A = np.vstack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ]).T\n\n    # Normal equations: (A^T A + R) p = A^T log_y\n    ATA = A.T.dot(A)  # (6,6)\n\n    # regularization: small \u03bb relative to trace(ATA)\n    # do not regularize intercept (index 0)\n    lam0 = 1e-6 * np.trace(ATA) / ATA.shape[0]\n    R = lam0 * np.eye(6)\n    R[0, 0] = 0.0\n\n    rhs = A.T.dot(log_y)  # (6,)\n\n    # solve for parameters\n    params = np.linalg.solve(ATA + R, rhs)\n    return params", "language": "python", "parent_id": "9d604dcf-f6dd-4ba7-b368-9f1a8ae0f9b5", "generation": 5, "timestamp": 1754802242.4861755, "iteration_found": 50, "metrics": {"nmse": 109.08081433521895, "nmae": 13.932806618135368, "r2": -108.08081433521895, "combined_score": 0.009084235123432066}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 93.67644059025956, "nmae": 12.906141739787834, "r2": -92.67644059025956, "combined_score": 0.010562289770987455}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 93.6764\n- nmae: 12.9061\n- r2: -92.6764\n- combined_score: 0.0106\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 31.8855, nmae: 7.3600, r2: -30.8855, combined_score: 0.0304\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n### Program 2 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n### Program 3 (Score: 2.0976)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss.\n\nWe retain the familiar power\u2010law form\n   L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\n\nImprovements over the naive implementation:\n  1. Numerically stable linear algebra via ridge (Tikhonov) regularization\n     when fitting in log\u2010space: avoids ill\u2010conditioning on skewed hyperparameter scales.\n  2. Unified, concise handling of both single\u2010 and multi\u2010set parameter arrays.\n  3. Minimal eps added to logs to ensure safety without noticeable bias.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law scaling law.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length >=5: [a0, a1, a2, a3, a4, ...]\n        - or 2D array of shape (T, >=5) for T independent models in parallel.\n\n    Returns:\n      If params is 1D: returns array of shape (N,)\n      If params is 2D: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    # Take logs safely\n    eps = 1e-12\n    logX = np.log(X + eps)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size < 5:\n            raise ValueError(f\"params must have at least 5 elements, got {p.size}\")\n        a0 = p[0]\n        slopes = p[1:5]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P < 5:\n            raise ValueError(f\"params must have at least 5 columns, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:5]        # shape (T,4)\n        # compute for each t in T: log_pred[:,t] = a0[t] + logX @ slopes[t]\n        # which is logX @ slopes.T  + a0[None,:]\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear (power\u2010law) model via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || A @ p - log(y) ||^2 + \u03bb ||p||^2\n      where A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n\n    # Logs with tiny epsilon for safety\n    eps = 1e-12\n    logX = np.log(X + eps)    # shape (N,4)\n    logy = np.log(y + eps)    # shape (N,)\n\n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    D = A.shape[1]\n\n    # Compute normal equations with ridge regularization\n    #   (A^T A + \u03bb I) p = A^T logy\n    H = A.T.dot(A)                     # shape (5,5)\n    # Choose \u03bb relative to average scale of H\n    trace_H = np.trace(H)\n    lam = 1e-6 * (trace_H / D)         # small regularization\n    rhs = A.T.dot(logy)                # shape (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(H + lam * np.eye(D), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (31.8855), Performs well on nmae (7.3600), Performs well on r2 (-30.8855), Performs well on combined_score (0.0304)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.1549)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LLM loss from hyperparameters using a simple additive\u2010floor power\u2010law:\n      loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                         + a3*log(data_size) + a4*log(non_embedding_param_size))\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (floor, >=0)\n                   params[...,1] = a0 (intercept in log\u2010space)\n                   params[...,2:] = [a1, a2, a3, a4] (slopes in log\u2010space)\n\n    Returns:\n      preds: if params is 1D, returns (N,) array of predicted losses;\n             if params is 2D (T,6), returns (N,T) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Avoid log of zero\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]           # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0    = p[:, 0]          # (T,)\n        a0    = p[:, 1]          # (T,)\n        slopes = p[:, 2:]        # (T,4)\n        # compute log_pred: (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter additive\u2010floor scaling law by minimizing MSE:\n      minimize mean[(c0 + exp(a0 + sum ai*log(xi)) - y)^2]\n    using L-BFGS-B with bound c0 >= 0.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters.\n      loss_values: (N,) array of observed LM losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)  # (N,4)\n\n    # Objective: mean squared error\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y\n        return np.mean(err * err)\n\n    # Initialize parameters\n    y_min, y_max = y.min(), y.max()\n    # c0 init as a small fraction of the minimum loss\n    c0_init = max(0.0, 0.3 * y_min)\n    # ensure exp(a0) roughly matches y_max - c0_init\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.hstack(([c0_init, a0_init], np.zeros(4, dtype=float)))\n\n    # Bounds: c0 >= 0, others unbounded\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(\n        _mse,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n    if res.success:\n        return res.x\n    # fallback to the initialization\n    return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 3.4792)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss with U\u2010shaped learning\u2010rate term,\nadditive loss floor, and small ridge penalty for stability.\n\nModel form:\n   Loss_pred = c0 + exp( a0\n                        + a1 * log(lr)\n                        + a2 * (log(lr))^2\n                        + a3 * log(bsz)\n                        + a4 * log(data_size)\n                        + a5 * log(non_embed_param_size) )\n\nWe fit the 7 parameters [c0 >= 0, a0..a5] by minimizing\n  mean((Loss_pred - y)^2) + \u03bb * sum(a1..a5)^2\nusing L-BFGS-B, initialized via a quick linear least-squares in log-space.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with U\u2010shaped lr term and additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns \n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 7 or 2D array of shape (T,7):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0  (intercept in log-space)\n                   params[...,2] = a1  (lr slope)\n                   params[...,3] = a2  (lr quadratic)\n                   params[...,4] = a3  (bsz slope)\n                   params[...,5] = a4  (data_size slope)\n                   params[...,6] = a5  (param_size slope)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,7), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_sz, pm = Xc.T\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_sz)\n    log_pm = np.log(pm)\n    # stack features: [1, log_lr, log_lr^2, log_bsz, log_data, log_pm]\n    F = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_pm\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single set\n    if p.ndim == 1:\n        if p.shape[0] != 7:\n            raise ValueError(f\"Expected params length 7, got {p.shape[0]}\")\n        c0 = p[0]\n        coeffs = p[1:]   # length 6\n        log_pred = F.dot(coeffs)\n        return c0 + np.exp(log_pred)\n    # multiple sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        c0 = p[:, 0]        # (T,)\n        coeffs = p[:, 1:]   # (T,6)\n        log_pred = F.dot(coeffs.T)  # (N,T)\n        return c0[None, :] + np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing\n      MSE + \u03bb * sum(coeffs[1:]^2)\n    using L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 7 = [c0, a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_sz, pm = Xc.T\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_sz)\n    log_pm = np.log(pm)\n\n    # Build design matrix for initialization: [1, log_lr, log_lr^2, log_bsz, log_data, log_pm]\n    F = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_pm\n    ]).T  # (N,6)\n\n    # initial floor c0 (small fraction of min loss)\n    y_min = np.min(y)\n    c0_init = float(max(0.0, 0.25 * y_min))\n\n    # linear LS to init coeffs: solve F @ coeffs \u2248 log(y - c0_init)\n    y_adj = y - c0_init\n    y_adj = np.clip(y_adj, eps, None)\n    log_y_adj = np.log(y_adj)\n    # least-squares for coeffs = [a0, a1, a2, a3, a4, a5]\n    coeffs_init, *_ = np.linalg.lstsq(F, log_y_adj, rcond=None)\n    # pack initial parameters\n    init = np.concatenate([[c0_init], coeffs_init])  # length 7\n\n    # ridge penalty on coeffs[1:] (exclude intercept a0)\n    lam = 1e-4\n\n    # objective: MSE + ridge\n    def _obj(p):\n        c0 = p[0]\n        coeffs = p[1:]\n        log_p = F.dot(coeffs)\n        pred = c0 + np.exp(log_p)\n        err = pred - y\n        mse = np.mean(err**2)\n        # ridge on coeffs except intercept\n        reg = lam * np.sum(coeffs[1:]**2)\n        return mse + reg\n\n    # bounds: c0 >= 0, others unbounded\n    bnds = [(0.0, None)] + [(None, None)] * 6\n\n    res = minimize(_obj, init, method='L-BFGS-B',\n                   bounds=bnds,\n                   options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000})\n    if res.success:\n        return res.x\n    # fallback\n    return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.3258, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  log L = a0 + a1\u00b7log(N) + a2\u00b7log(D) + a3\u00b7log(B) + a4\u00b7log(\u03b7) + a5\u00b7[log(\u03b7)]^2\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 6 (or 2D array (T,6) for T parallel models)\n              [a0, a1, a2, a3, a4, a5]\n    Returns:\n      If params is shape (6,), returns (N,) predicted losses.\n      If params is shape (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n\n    # Precompute logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_N   = np.log(X[:, 3])\n\n    # Single\u2010set parameters\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # Build design matrix (N \u00d7 6)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 6))\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n    Returns params: 1D array length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Compute logs\n    log_lr  = np.log(X[:, 0] + 1e-12)\n    log_bsz = np.log(X[:, 1] + 1e-12)\n    log_D   = np.log(X[:, 2] + 1e-12)\n    log_N   = np.log(X[:, 3] + 1e-12)\n    logy    = np.log(y + 1e-12)\n\n    # Build design matrix A (N \u00d7 6)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 6))\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n\n    # Ridge regularization strength: small fraction of trace(A\u1d40A)\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 6.0\n    ridge = lam * np.eye(6)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (15.704), Excellent nmae (4.243)\n\n\n### Inspiration 2 (Score: 87655269653035.7969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (68641835630241626816321159168.000), Excellent nmae (350621078612143.188), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 2.0976, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss.\n\nWe retain the familiar power\u2010law form\n   L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\n\nImprovements over the naive implementation:\n  1. Numerically stable linear algebra via ridge (Tikhonov) regularization\n     when fitting in log\u2010space: avoids ill\u2010conditioning on skewed hyperparameter scales.\n  2. Unified, concise handling of both single\u2010 and multi\u2010set parameter arrays.\n  3. Minimal eps added to logs to ensure safety without noticeable bias.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law scaling law.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length >=5: [a0, a1, a2, a3, a4, ...]\n        - or 2D array of shape (T, >=5) for T independent models in parallel.\n\n    Returns:\n      If params is 1D: returns array of shape (N,)\n      If params is 2D: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    # Take logs safely\n    eps = 1e-12\n    logX = np.log(X + eps)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size < 5:\n            raise ValueError(f\"params must have at least 5 elements, got {p.size}\")\n        a0 = p[0]\n        slopes = p[1:5]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P < 5:\n            raise ValueError(f\"params must have at least 5 columns, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:5]        # shape (T,4)\n        # compute for each t in T: log_pred[:,t] = a0[t] + logX @ slopes[t]\n        # which is logX @ slopes.T  + a0[None,:]\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear (power\u2010law) model via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || A @ p - log(y) ||^2 + \u03bb ||p||^2\n      where A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n\n    # Logs with tiny epsilon for safety\n    eps = 1e-12\n    logX = np.log(X + eps)    # shape (N,4)\n    logy = np.log(y + eps)    # shape (N,)\n\n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    D = A.shape[1]\n\n    # Compute normal equations with ridge regularization\n    #   (A^T A + \u03bb I) p = A^T logy\n    H = A.T.dot(A)                     # shape (5,5)\n    # Choose \u03bb relative to average scale of H\n    trace_H = np.trace(H)\n    lam = 1e-6 * (trace_H / D)         # small regularization\n    rhs = A.T.dot(logy)                # shape (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(H + lam * np.eye(D), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (31.886), Excellent nmae (7.360)\n\n\n### Inspiration 4 (Score: 3.7798, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a regularized,\n    normalized log-linear (power-law) form:\n      log(loss) = intercept + sum_i slope_i * log(feature_i)\n    Loss = exp(log(loss))\n    Args:\n      data_points: (N,4) array = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 5 or 2D array of shape (T,5)\n                   params[:,0] = intercept, params[:,1:] = slopes\n    Returns:\n      If params is 1D: (N,) array of predicted losses\n      If params is 2D: (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    # avoid zero or negative values\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected 5 parameters, got {p.shape[0]}\")\n        intercept = p[0]\n        slopes = p[1:]\n        log_pred = intercept + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        intercept = p[:, 0]           # shape (T,)\n        slopes = p[:, 1:]             # shape (T,4)\n        log_pred = logX.dot(slopes.T) + intercept[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the regularized, normalized log-linear scaling law:\n      minimize || log(y) - [1 | (log X - mean)/std ] \u00b7 p_norm - mean_y ||^2\n    with small ridge penalty on slopes (no penalty on intercept).\n    Returns:\n      p: 1D array of length 5 = [intercept, slopes...]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    # Log transform\n    logX = np.log(X_clipped)   # (N,4)\n    logy = np.log(y_clipped)   # (N,)\n\n    N, F = logX.shape\n\n    # Normalize features (zero mean, unit variance)\n    mean_x = np.mean(logX, axis=0)\n    std_x = np.std(logX, axis=0, ddof=0)\n    std_x = np.where(std_x > eps, std_x, 1.0)\n    X_norm = (logX - mean_x) / std_x  # (N,4)\n\n    # Center target\n    mean_y = np.mean(logy)\n    y_center = logy - mean_y         # (N,)\n\n    # Build design matrix [1 | X_norm]\n    A = np.hstack([np.ones((N, 1)), X_norm])  # (N,5)\n\n    # Normal equations with ridge regularization on slopes only\n    ATA = A.T.dot(A)        # (5,5)\n    ATy = A.T.dot(y_center) # (5,)\n\n    P = F + 1\n    lambda0 = 1e-3\n    ridge = (lambda0 * np.trace(ATA) / P)\n    Reg = np.eye(P) * ridge\n    Reg[0, 0] = 0.0   # no regularization on intercept\n\n    # Solve for normalized parameters\n    p_norm = np.linalg.solve(ATA + Reg, ATy)  # (5,)\n\n    # Un-normalize slopes and intercept back to original log-space\n    slopes = p_norm[1:] / std_x\n    intercept = mean_y + p_norm[0] - np.sum((p_norm[1:] * mean_x) / std_x)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.703), Excellent nmae (14.110)\n\n\n### Inspiration 5 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss with U\u2010shaped learning\u2010rate term,\nadditive loss floor, and small ridge penalty for stability.\n\nModel form:\n   Loss_pred = c0 + exp( a0\n                        + a1 * log(lr)\n                        + a2 * (log(lr))^2\n                        + a3 * log(bsz)\n                        + a4 * log(data_size)\n                        + a5 * log(non_embed_param_size) )\n\nWe fit the 7 parameters [c0 >= 0, a0..a5] by minimizing\n  mean((Loss_pred - y)^2) + \u03bb * sum(a1..a5)^2\nusing L-BFGS-B, initialized via a quick linear least-squares in log-space.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with U\u2010shaped lr term and additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns \n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 7 or 2D array of shape (T,7):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0  (intercept in log-space)\n                   params[...,2] = a1  (lr slope)\n                   params[...,3] = a2  (lr quadratic)\n                   params[...,4] = a3  (bsz slope)\n                   params[...,5] = a4  (data_size slope)\n                   params[...,6] = a5  (param_size slope)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,7), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_sz, pm = Xc.T\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_sz)\n    log_pm = np.log(pm)\n    # stack features: [1, log_lr, log_lr^2, log_bsz, log_data, log_pm]\n    F = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_pm\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single set\n    if p.ndim == 1:\n        if p.shape[0] != 7:\n            raise ValueError(f\"Expected params length 7, got {p.shape[0]}\")\n        c0 = p[0]\n        coeffs = p[1:]   # length 6\n        log_pred = F.dot(coeffs)\n        return c0 + np.exp(log_pred)\n    # multiple sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        c0 = p[:, 0]        # (T,)\n        coeffs = p[:, 1:]   # (T,6)\n        log_pred = F.dot(coeffs.T)  # (N,T)\n        return c0[None, :] + np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing\n      MSE + \u03bb * sum(coeffs[1:]^2)\n    using L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 7 = [c0, a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_sz, pm = Xc.T\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_sz)\n    log_pm = np.log(pm)\n\n    # Build design matrix for initialization: [1, log_lr, log_lr^2, log_bsz, log_data, log_pm]\n    F = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_pm\n    ]).T  # (N,6)\n\n    # initial floor c0 (small fraction of min loss)\n    y_min = np.min(y)\n    c0_init = float(max(0.0, 0.25 * y_min))\n\n    # linear LS to init coeffs: solve F @ coeffs \u2248 log(y - c0_init)\n    y_adj = y - c0_init\n    y_adj = np.clip(y_adj, eps, None)\n    log_y_adj = np.log(y_adj)\n    # least-squares for coeffs = [a0, a1, a2, a3, a4, a5]\n    coeffs_init, *_ = np.linalg.lstsq(F, log_y_adj, rcond=None)\n    # pack initial parameters\n    init = np.concatenate([[c0_init], coeffs_init])  # length 7\n\n    # ridge penalty on coeffs[1:] (exclude intercept a0)\n    lam = 1e-4\n\n    # objective: MSE + ridge\n    def _obj(p):\n        c0 = p[0]\n        coeffs = p[1:]\n        log_p = F.dot(coeffs)\n        pred = c0 + np.exp(log_p)\n        err = pred - y\n        mse = np.mean(err**2)\n        # ridge on coeffs except intercept\n        reg = lam * np.sum(coeffs[1:]**2)\n        return mse + reg\n\n    # bounds: c0 >= 0, others unbounded\n    bnds = [(0.0, None)] + [(None, None)] * 6\n\n    res = minimize(_obj, init, method='L-BFGS-B',\n                   bounds=bnds,\n                   options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000})\n    if res.success:\n        return res.x\n    # fallback\n    return init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 6\u2010parameter quadratic log\u2010law:\n      log L = a0\n            + a1*log(N)\n            + a2*log(D)\n            + a3*log(B)\n            + a4*log(\u03b7)\n            + a5*(log(\u03b7))^2\n    L = exp(log L)\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 [a0,a1,...,a5]\n                   or 2D array of shape (T,6) for T parallel models\n\n    Returns:\n      If params is 1D: (N,) array of predicted losses\n      If params is 2D: (N,T) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # safe log transform\n    eps = 1e-12\n    lr     = np.clip(X[:, 0], eps, None)\n    bsz    = np.clip(X[:, 1], eps, None)\n    D      = np.clip(X[:, 2], eps, None)\n    Nparam = np.clip(X[:, 3], eps, None)\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_N   = np.log(Nparam)\n\n    # design matrix: [1, log_N, log_D, log_bsz, log_lr, (log_lr)^2]\n    A = np.vstack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_L = A.dot(p)           # shape (N,)\n        return np.exp(log_L)\n\n    # multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # compute for each of T parameter sets\n        # log_L shape -> (N, T)\n        log_L = A.dot(p.T)\n        return np.exp(log_L)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by ridge\u2010regularized\n    least\u2010squares in log\u2010space:\n\n      minimize ||A\u00b7p \u2013 log(y)||^2 + \u03bb\u00b7||p_s||^2\n\n    where A columns = [1, log(N), log(D), log(B), log(\u03b7), (log(\u03b7))^2]\n    and p_s excludes the intercept term from regularization.\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # safe log transforms\n    eps = 1e-12\n    lr     = np.clip(X[:, 0], eps, None)\n    bsz    = np.clip(X[:, 1], eps, None)\n    D      = np.clip(X[:, 2], eps, None)\n    Nparam = np.clip(X[:, 3], eps, None)\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_N   = np.log(Nparam)\n    log_y   = np.log(np.clip(y, eps, None))\n\n    # Build design matrix A: shape (N,6)\n    # columns = [1, log_N, log_D, log_bsz, log_lr, (log_lr)^2]\n    A = np.vstack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ]).T\n\n    # Normal equations: (A^T A + R) p = A^T log_y\n    ATA = A.T.dot(A)  # (6,6)\n\n    # regularization: small \u03bb relative to trace(ATA)\n    # do not regularize intercept (index 0)\n    lam0 = 1e-6 * np.trace(ATA) / ATA.shape[0]\n    R = lam0 * np.eye(6)\n    R[0, 0] = 0.0\n\n    rhs = A.T.dot(log_y)  # (6,)\n\n    # solve for parameters\n    params = np.linalg.solve(ATA + R, rhs)\n    return params\n```"]}}}