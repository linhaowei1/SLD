{"id": "825a7b2c-b74c-4089-97e1-f848bd70e426", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias multiplicative power law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz}\n                    * data_size^{e_data} * non_embedding_param_size^{e_model}\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # Add epsilon for numerical stability\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    # Log\u2010term and exponentiate\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing a weighted MSE\n    plus a small L2 penalty on exponents to improve nmse/nmae/r2.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n    Returns:\n      params: for single\u2010target y returns shape (6,),\n              for multi\u2010target y returns shape (T,6).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Handle multi-target outputs\n    if y.ndim == 2 and y.shape[1] > 1:\n        # Fit each target separately\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    # Make y a flat vector\n    y = y.ravel()\n    N = X.shape[0]\n\n    # Early exit for degenerate data\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=np.float64)\n\n    # 1) Initialize bias b0 near the smallest loss\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n    b0 = max(0.0, y_min - 0.05 * (y_max - y_min))\n\n    # 2) Log\u2010linear least squares for initial [logA, e_lr, e_bsz, e_data, e_model]\n    eps = 1e-12\n    y_adj = np.clip(y - b0, eps, None)\n    Z = np.log(X + eps)                 # (N,4) matrix of log\u2010features\n    A_mat = np.concatenate([np.ones((N, 1)), Z], axis=1)  # (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # Build two initial guesses to escape local minima\n    init1 = np.concatenate([[b0], theta_ls])\n    # Scaled variant for exploration\n    init2 = np.array([\n        b0,\n        theta_ls[0] - 0.5,             # logA shifted\n        0.5 * theta_ls[1],             # e_lr\n        0.5 * theta_ls[2],             # e_bsz\n        0.5 * theta_ls[3],             # e_data\n        0.5 * theta_ls[4],             # e_model\n    ], dtype=np.float64)\n\n    # 3) Set bounds on parameters\n    bounds = [\n        (0.0,       max(2.0 * y_max, 1.0)),  # b \u2265 0\n        (None,      None),                   # logA unbounded\n        (-2.0,      2.0),                    # e_lr\n        (-2.0,      2.0),                    # e_bsz\n        (-2.0,      0.0),                    # e_data (loss \u2193 with more data)\n        (-2.0,      0.0),                    # e_model (loss \u2193 with larger model)\n    ]\n\n    # Weighted MSE + L2 penalty objective\n    def obj_and_grad(p):\n        b, logA, e_lr, e_bsz, e_data, e_model = p\n        # recompute predictions\n        lr   = X[:, 0] + eps\n        bsz  = X[:, 1] + eps\n        D    = X[:, 2] + eps\n        M    = X[:, 3] + eps\n        log_term = (\n            logA\n            + e_lr    * np.log(lr)\n            + e_bsz   * np.log(bsz)\n            + e_data  * np.log(D)\n            + e_model * np.log(M)\n        )\n        term = np.exp(log_term)\n        pred = b + term\n        # Residuals and weights (relative MSE)\n        resid = pred - y\n        w = 1.0 / (y + eps)\n        # Objective: mean((resid * w)^2) + \u03b1 * sum(exponents^2)\n        mse_weighted = np.mean((resid * w) ** 2)\n        reg = 1e-4 * (e_lr**2 + e_bsz**2 + e_data**2 + e_model**2)\n        loss = mse_weighted + reg\n\n        # Gradients\n        # dL/dpred = 2/N * (resid * w^2)\n        grad_pred = 2.0 / N * resid * (w ** 2)\n        # dL/db = sum(dL/dpred * dpred/db) = sum(grad_pred)\n        grad_b = np.sum(grad_pred)\n        # dL/dlogA: dpred/dlogA = term\n        grad_logA = np.sum(grad_pred * term)\n        # dpred/dexponent = term * log(feature)\n        log_lr  = np.log(lr)\n        log_bsz = np.log(bsz)\n        log_D   = np.log(D)\n        log_M   = np.log(M)\n        grad_e_lr    = np.sum(grad_pred * term * log_lr)   + 2e-4 * e_lr\n        grad_e_bsz   = np.sum(grad_pred * term * log_bsz)  + 2e-4 * e_bsz\n        grad_e_data  = np.sum(grad_pred * term * log_D)    + 2e-4 * e_data\n        grad_e_model = np.sum(grad_pred * term * log_M)    + 2e-4 * e_model\n\n        return loss, np.array([\n            grad_b,\n            grad_logA,\n            grad_e_lr,\n            grad_e_bsz,\n            grad_e_data,\n            grad_e_model\n        ], dtype=np.float64)\n\n    # Multi\u2010start optimization\n    best_p, best_loss = None, np.inf\n    for p0 in (init1, init2):\n        # Clip initial bias into its bounds\n        low, high = bounds[0]\n        p0[0] = np.clip(p0[0], low, high)\n        res = minimize(\n            fun=lambda p: obj_and_grad(p)[0],\n            x0=p0,\n            jac=lambda p: obj_and_grad(p)[1],\n            bounds=bounds,\n            method=\"L-BFGS-B\",\n            options={\"maxiter\": 500, \"ftol\": 1e-12}\n        )\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_p = res.x\n\n    # Fallback if all starts fail\n    return best_p if best_p is not None else init1", "language": "python", "parent_id": "8ca4d81b-b580-43da-9581-4c48caa587c6", "generation": 3, "timestamp": 1754803150.5592194, "iteration_found": 35, "metrics": {"nmse": 64.14730451793321, "nmae": 10.605949558507918, "r2": -63.14730451793321, "combined_score": 0.015349829243122842}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.3358769731194409, "nmae": 1.0418624112783623, "r2": -0.33587697311944087, "combined_score": 0.42810473818086087}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.3359\n- nmae: 1.0419\n- r2: -0.3359\n- combined_score: 0.4281\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 33.3859, nmae: 7.5887, r2: -32.3859, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.3359, nmae: 1.0419, r2: -0.3359, combined_score: 0.4281\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6175)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power\u2010law plus bias.\n    data_points: (N,4) array with [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    # Log\u2010features for stability\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D    + eps)\n    log_Np  = np.log(Np   + eps)\n    # Build log\u2010term and exponentiate\n    log_term = logA \\\n             + e_lr  * log_lr \\\n             + e_bsz * log_bsz \\\n             + e_D   * log_D \\\n             + e_N   * log_Np\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n    Returns params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target y: returns (T,6) array if loss_values is (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n\n    # Ensure 2D y\u2010matrix\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, F = X.shape\n    # Precompute log\u2010features once\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4): [log(lr), log(bsz), log(D), log(Np)]\n\n    def _fit_single(y_vec):\n        y_min, y_max = y_vec.min(), y_vec.max()\n\n        # Estimate a small offset for bias term b\n        b0 = max(0.0, y_min - 0.1 * (y_max - y_min))\n\n        # Prepare design matrix for a quick linear init in log\u2010space:\n        # A @ theta \u2248 log(y_vec - b0)\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n        z = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        y_log = np.log(z)\n\n        # Ridge\u2010regularized OLS: theta = (A^T A + \u03bbI)^-1 A^T y_log\n        lam = 1e-6\n        ATA = A.T.dot(A) + lam * np.eye(F+1)\n        ATy = A.T.dot(y_log)\n        theta = np.linalg.solve(ATA, ATy)  # shape (5,)\n\n        # Build two initial guesses for full 6\u2010param fit\n        init_lin = np.zeros(6)\n        init_lin[0] = b0\n        init_lin[1:] = theta  # logA, e_lr, e_bsz, e_D, e_N\n\n        init_alt = np.array([\n            b0,\n            np.log(max(y_vec.mean(), eps)),\n            -0.5, -0.5, -0.5, -0.5\n        ], dtype=float)\n\n        # Bounds: b in [0,y_max], logA unrestricted, exponents in [-10,10]\n        bounds = [(0.0, y_max), (None, None)] + [(-10.0, 10.0)] * 4\n\n        best_params = None\n        best_loss = np.inf\n\n        # Objective + gradient for L-BFGS-B\n        def obj_and_grad(p):\n            b, logA, e_lr, e_bsz, e_D, e_N = p\n            # compute log\u2010term and exp\n            log_term = (\n                logA\n                + e_lr  * logX[:, 0]\n                + e_bsz * logX[:, 1]\n                + e_D   * logX[:, 2]\n                + e_N   * logX[:, 3]\n            )\n            term = np.exp(log_term)\n            pred = b + term\n            resid = pred - y_vec\n            loss = np.mean(resid ** 2)\n            # gradients\n            grad = np.empty(6, dtype=float)\n            grad[0] = 2.0 * np.mean(resid)                # d/db\n            grad[1] = 2.0 * np.mean(resid * term)         # d/dlogA\n            # derivatives w.r.t exponents\n            grad[2] = 2.0 * np.mean(resid * term * logX[:, 0])\n            grad[3] = 2.0 * np.mean(resid * term * logX[:, 1])\n            grad[4] = 2.0 * np.mean(resid * term * logX[:, 2])\n            grad[5] = 2.0 * np.mean(resid * term * logX[:, 3])\n            return loss, grad\n\n        # Multi\u2010start optimization\n        for p0 in (init_lin, init_alt):\n            res = minimize(\n                fun=lambda p: obj_and_grad(p)[0],\n                x0=p0,\n                jac=lambda p: obj_and_grad(p)[1],\n                bounds=bounds,\n                method='L-BFGS-B'\n            )\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback if optimization fails\n        if best_params is None:\n            best_params = init_lin\n\n        return best_params\n\n    # Fit each target dimension\n    params_list = [ _fit_single(y_mat[:, i]) for i in range(y_mat.shape[1]) ]\n    params_arr = np.vstack(params_list)\n    return params_arr[0] if params_arr.shape[0] == 1 else params_arr\n```\nKey features: Performs well on nmse (1.3359), Performs well on nmae (1.0419), Performs well on r2 (-0.3359), Performs well on combined_score (0.4281)\n\n\n### Program 2 (Score: 2.1544)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias multiplicative power law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n\n    # Add epsilon for numerical stability in logs\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    log_term = (\n        logA\n        + e_lr   * logX[:, 0]\n        + e_bsz  * logX[:, 1]\n        + e_data * logX[:, 2]\n        + e_model* logX[:, 3]\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      1) Initializing b via the smallest observed loss\n      2) Running a log\u2010linear least squares on y - b to get logA and exponents\n      3) Refining all 6 parameters via bounded L\u2010BFGS\u2010B to minimize MSE\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    eps = 1e-12\n    y_min, y_max = np.min(y), np.max(y)\n\n    # 1) Initialize bias b close to the minimum observed loss\n    b0 = max(0.0, 0.9 * y_min)\n    y_adj = y - b0\n    # Ensure positivity for log\u2010linear step\n    if np.any(y_adj <= 0):\n        b0 = max(0.0, 0.5 * y_min)\n        y_adj = y - b0 + eps\n\n    # 2) Log\u2010linear least squares on y_adj = exp(logA + E\u00b7logX)\n    N = X.shape[0]\n    Z = np.log(X + eps)                   # shape (N,4)\n    A_mat = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA, e_lr, e_bsz, e_data, e_model]\n\n    init_params = np.zeros(6, dtype=np.float64)\n    init_params[0] = b0\n    init_params[1:] = theta_ls\n\n    # 3) Bounds reflecting plausible physics\u2010inspired ranges\n    b_upper = max(y_max * 2.0, 1.0)\n    bounds = [\n        (0.0,        b_upper),   # b \u2265 0\n        (None,       None),      # logA unbounded\n        (-1.0,       1.0),       # e_lr\n        (-1.0,       1.0),       # e_bsz\n        (-1.0,       0.0),       # e_data (loss should decrease w/ more data)\n        (-1.0,       0.0),       # e_model (loss should decrease w/ larger model)\n    ]\n\n    # Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 500, \"ftol\": 1e-12}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3859), Performs well on nmae (7.5887), Performs well on r2 (-32.3859), Performs well on combined_score (0.0291)\n\n\n### Program 3 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 3.4388)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter\n    additive + multiplicative power-law model in log-space:\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:       array-like of length 6: [b, logA,\n                   e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds:        NumPy array of length N with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    # Add epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing a relative MSE with a small L2 penalty on the exponents.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n    Returns:\n      params: for single-target (N,) returns a 1D array length 6;\n              for multi-target (N,T) returns a 2D array shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Handle multi-target outputs by stacking solutions\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    N = X.shape[0]\n\n    # Trivial or degenerate case\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=float)\n\n    eps = 1e-12\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n    X_log = np.log(X + eps)\n\n    # Generate multiple initial guesses for [b, logA, e_lr, e_bsz, e_data, e_model]\n    b_guesses = [0.0, max(0.0, 0.3 * y_min)]\n    inits = []\n    for b0 in b_guesses:\n        # Adjusted target for linear regression\n        y_adj = np.clip(y - b0, eps, None)\n        A = np.concatenate([np.ones((N, 1)), X_log], axis=1)\n        theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n        # Primary initialization\n        base = np.concatenate([[b0], theta])\n        inits.append(base)\n        # Scaled-down variant to explore other basins\n        scaled = np.concatenate([[b0, theta[0] - 1.0], 0.5 * theta[1:]])\n        inits.append(scaled)\n\n    # Bounds for robustness\n    bounds = [\n        (0.0, 2.0 * y_max if y_max > 0 else None),  # b \u2265 0\n        (None, None),                               # logA unbounded\n        (-5.0, 5.0),                                # e_lr\n        (-5.0, 5.0),                                # e_bsz\n        (-5.0, 5.0),                                # e_data\n        (-5.0, 5.0),                                # e_model\n    ]\n\n    # Objective: relative MSE + tiny L2 penalty on exponents\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        w = 1.0 / (y + eps)\n        rel_mse = np.mean(((pred - y) * w) ** 2)\n        reg = 1e-6 * np.sum(p[2:] ** 2)\n        return rel_mse + reg\n\n    best_p = None\n    best_val = np.inf\n\n    # Optimize from each initialization\n    for init in inits:\n        init = init.copy()\n        # Clip bias term if it exceeds bounds\n        lo, hi = bounds[0]\n        if hi is not None:\n            init[0] = np.clip(init[0], lo, hi)\n        try:\n            res = minimize(\n                objective,\n                init,\n                method=\"L-BFGS-B\",\n                bounds=bounds,\n                options={'maxiter': 500}\n            )\n            if res.success and res.fun < best_val:\n                best_val = res.fun\n                best_p = res.x\n        except Exception:\n            continue\n\n    # Fallback to the first init if optimization fails across all\n    return best_p if best_p is not None else inits[0]\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 2 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n### Inspiration 3 (Score: 3.4388, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter\n    additive + multiplicative power-law model in log-space:\n      loss \u2248 b + exp(logA\n                     + e_lr*log(lr)\n                     + e_bsz*log(bsz)\n                     + e_data*log(data_size)\n                     + e_model*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:       array-like of length 6: [b, logA,\n                   e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds:        NumPy array of length N with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points of shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=float)\n    # Add epsilon to avoid log(0)\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6 parameters [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing a relative MSE with a small L2 penalty on the exponents.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n    Returns:\n      params: for single-target (N,) returns a 1D array length 6;\n              for multi-target (N,T) returns a 2D array shape (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points of shape (N,4), got {X.shape}\")\n\n    # Handle multi-target outputs by stacking solutions\n    if y.ndim == 2 and y.shape[1] > 1:\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    y = y.ravel()\n    N = X.shape[0]\n\n    # Trivial or degenerate case\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=float)\n\n    eps = 1e-12\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n    X_log = np.log(X + eps)\n\n    # Generate multiple initial guesses for [b, logA, e_lr, e_bsz, e_data, e_model]\n    b_guesses = [0.0, max(0.0, 0.3 * y_min)]\n    inits = []\n    for b0 in b_guesses:\n        # Adjusted target for linear regression\n        y_adj = np.clip(y - b0, eps, None)\n        A = np.concatenate([np.ones((N, 1)), X_log], axis=1)\n        theta, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n        # Primary initialization\n        base = np.concatenate([[b0], theta])\n        inits.append(base)\n        # Scaled-down variant to explore other basins\n        scaled = np.concatenate([[b0, theta[0] - 1.0], 0.5 * theta[1:]])\n        inits.append(scaled)\n\n    # Bounds for robustness\n    bounds = [\n        (0.0, 2.0 * y_max if y_max > 0 else None),  # b \u2265 0\n        (None, None),                               # logA unbounded\n        (-5.0, 5.0),                                # e_lr\n        (-5.0, 5.0),                                # e_bsz\n        (-5.0, 5.0),                                # e_data\n        (-5.0, 5.0),                                # e_model\n    ]\n\n    # Objective: relative MSE + tiny L2 penalty on exponents\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        w = 1.0 / (y + eps)\n        rel_mse = np.mean(((pred - y) * w) ** 2)\n        reg = 1e-6 * np.sum(p[2:] ** 2)\n        return rel_mse + reg\n\n    best_p = None\n    best_val = np.inf\n\n    # Optimize from each initialization\n    for init in inits:\n        init = init.copy()\n        # Clip bias term if it exceeds bounds\n        lo, hi = bounds[0]\n        if hi is not None:\n            init[0] = np.clip(init[0], lo, hi)\n        try:\n            res = minimize(\n                objective,\n                init,\n                method=\"L-BFGS-B\",\n                bounds=bounds,\n                options={'maxiter': 500}\n            )\n            if res.success and res.fun < best_val:\n                best_val = res.fun\n                best_p = res.x\n        except Exception:\n            continue\n\n    # Fallback to the first init if optimization fails across all\n    return best_p if best_p is not None else inits[0]\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (92.122), Excellent nmae (12.744)\n\n\n### Inspiration 4 (Score: 2.1544, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias multiplicative power law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n\n    # Add epsilon for numerical stability in logs\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    log_term = (\n        logA\n        + e_lr   * logX[:, 0]\n        + e_bsz  * logX[:, 1]\n        + e_data * logX[:, 2]\n        + e_model* logX[:, 3]\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      1) Initializing b via the smallest observed loss\n      2) Running a log\u2010linear least squares on y - b to get logA and exponents\n      3) Refining all 6 parameters via bounded L\u2010BFGS\u2010B to minimize MSE\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    eps = 1e-12\n    y_min, y_max = np.min(y), np.max(y)\n\n    # 1) Initialize bias b close to the minimum observed loss\n    b0 = max(0.0, 0.9 * y_min)\n    y_adj = y - b0\n    # Ensure positivity for log\u2010linear step\n    if np.any(y_adj <= 0):\n        b0 = max(0.0, 0.5 * y_min)\n        y_adj = y - b0 + eps\n\n    # 2) Log\u2010linear least squares on y_adj = exp(logA + E\u00b7logX)\n    N = X.shape[0]\n    Z = np.log(X + eps)                   # shape (N,4)\n    A_mat = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # theta_ls = [logA, e_lr, e_bsz, e_data, e_model]\n\n    init_params = np.zeros(6, dtype=np.float64)\n    init_params[0] = b0\n    init_params[1:] = theta_ls\n\n    # 3) Bounds reflecting plausible physics\u2010inspired ranges\n    b_upper = max(y_max * 2.0, 1.0)\n    bounds = [\n        (0.0,        b_upper),   # b \u2265 0\n        (None,       None),      # logA unbounded\n        (-1.0,       1.0),       # e_lr\n        (-1.0,       1.0),       # e_bsz\n        (-1.0,       0.0),       # e_data (loss should decrease w/ more data)\n        (-1.0,       0.0),       # e_model (loss should decrease w/ larger model)\n    ]\n\n    # Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 500, \"ftol\": 1e-12}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.386), Excellent nmae (7.589)\n\n\n### Inspiration 5 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power\u2010law plus bias.\n    data_points: (N,4) array with [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    # Log\u2010features for stability\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D    + eps)\n    log_Np  = np.log(Np   + eps)\n    # Build log\u2010term and exponentiate\n    log_term = logA \\\n             + e_lr  * log_lr \\\n             + e_bsz * log_bsz \\\n             + e_D   * log_D \\\n             + e_N   * log_Np\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n    Returns params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target y: returns (T,6) array if loss_values is (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n\n    # Ensure 2D y\u2010matrix\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, F = X.shape\n    # Precompute log\u2010features once\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4): [log(lr), log(bsz), log(D), log(Np)]\n\n    def _fit_single(y_vec):\n        y_min, y_max = y_vec.min(), y_vec.max()\n\n        # Estimate a small offset for bias term b\n        b0 = max(0.0, y_min - 0.1 * (y_max - y_min))\n\n        # Prepare design matrix for a quick linear init in log\u2010space:\n        # A @ theta \u2248 log(y_vec - b0)\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n        z = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        y_log = np.log(z)\n\n        # Ridge\u2010regularized OLS: theta = (A^T A + \u03bbI)^-1 A^T y_log\n        lam = 1e-6\n        ATA = A.T.dot(A) + lam * np.eye(F+1)\n        ATy = A.T.dot(y_log)\n        theta = np.linalg.solve(ATA, ATy)  # shape (5,)\n\n        # Build two initial guesses for full 6\u2010param fit\n        init_lin = np.zeros(6)\n        init_lin[0] = b0\n        init_lin[1:] = theta  # logA, e_lr, e_bsz, e_D, e_N\n\n        init_alt = np.array([\n            b0,\n            np.log(max(y_vec.mean(), eps)),\n            -0.5, -0.5, -0.5, -0.5\n        ], dtype=float)\n\n        # Bounds: b in [0,y_max], logA unrestricted, exponents in [-10,10]\n        bounds = [(0.0, y_max), (None, None)] + [(-10.0, 10.0)] * 4\n\n        best_params = None\n        best_loss = np.inf\n\n        # Objective + gradient for L-BFGS-B\n        def obj_and_grad(p):\n            b, logA, e_lr, e_bsz, e_D, e_N = p\n            # compute log\u2010term and exp\n            log_term = (\n                logA\n                + e_lr  * logX[:, 0]\n                + e_bsz * logX[:, 1]\n                + e_D   * logX[:, 2]\n                + e_N   * logX[:, 3]\n            )\n            term = np.exp(log_term)\n            pred = b + term\n            resid = pred - y_vec\n            loss = np.mean(resid ** 2)\n            # gradients\n            grad = np.empty(6, dtype=float)\n            grad[0] = 2.0 * np.mean(resid)                # d/db\n            grad[1] = 2.0 * np.mean(resid * term)         # d/dlogA\n            # derivatives w.r.t exponents\n            grad[2] = 2.0 * np.mean(resid * term * logX[:, 0])\n            grad[3] = 2.0 * np.mean(resid * term * logX[:, 1])\n            grad[4] = 2.0 * np.mean(resid * term * logX[:, 2])\n            grad[5] = 2.0 * np.mean(resid * term * logX[:, 3])\n            return loss, grad\n\n        # Multi\u2010start optimization\n        for p0 in (init_lin, init_alt):\n            res = minimize(\n                fun=lambda p: obj_and_grad(p)[0],\n                x0=p0,\n                jac=lambda p: obj_and_grad(p)[1],\n                bounds=bounds,\n                method='L-BFGS-B'\n            )\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback if optimization fails\n        if best_params is None:\n            best_params = init_lin\n\n        return best_params\n\n    # Fit each target dimension\n    params_list = [ _fit_single(y_mat[:, i]) for i in range(y_mat.shape[1]) ]\n    params_arr = np.vstack(params_list)\n    return params_arr[0] if params_arr.shape[0] == 1 else params_arr\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias multiplicative power law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz}\n                    * data_size^{e_data} * non_embedding_param_size^{e_model}\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # Add epsilon for numerical stability\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    M    = X[:, 3] + eps\n    # Log\u2010term and exponentiate\n    log_term = (\n        logA\n        + e_lr    * np.log(lr)\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(M)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing a weighted MSE\n    plus a small L2 penalty on exponents to improve nmse/nmae/r2.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n    Returns:\n      params: for single\u2010target y returns shape (6,),\n              for multi\u2010target y returns shape (T,6).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Handle multi-target outputs\n    if y.ndim == 2 and y.shape[1] > 1:\n        # Fit each target separately\n        return np.vstack([fit_scaling_law(X, y[:, i]) for i in range(y.shape[1])])\n\n    # Make y a flat vector\n    y = y.ravel()\n    N = X.shape[0]\n\n    # Early exit for degenerate data\n    if N < 3 or np.allclose(y, y[0]):\n        b0 = float(y[0])\n        return np.array([b0, np.log(max(b0, 1e-6)), 0.0, 0.0, 0.0, 0.0], dtype=np.float64)\n\n    # 1) Initialize bias b0 near the smallest loss\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n    b0 = max(0.0, y_min - 0.05 * (y_max - y_min))\n\n    # 2) Log\u2010linear least squares for initial [logA, e_lr, e_bsz, e_data, e_model]\n    eps = 1e-12\n    y_adj = np.clip(y - b0, eps, None)\n    Z = np.log(X + eps)                 # (N,4) matrix of log\u2010features\n    A_mat = np.concatenate([np.ones((N, 1)), Z], axis=1)  # (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A_mat, np.log(y_adj), rcond=None)\n    # Build two initial guesses to escape local minima\n    init1 = np.concatenate([[b0], theta_ls])\n    # Scaled variant for exploration\n    init2 = np.array([\n        b0,\n        theta_ls[0] - 0.5,             # logA shifted\n        0.5 * theta_ls[1],             # e_lr\n        0.5 * theta_ls[2],             # e_bsz\n        0.5 * theta_ls[3],             # e_data\n        0.5 * theta_ls[4],             # e_model\n    ], dtype=np.float64)\n\n    # 3) Set bounds on parameters\n    bounds = [\n        (0.0,       max(2.0 * y_max, 1.0)),  # b \u2265 0\n        (None,      None),                   # logA unbounded\n        (-2.0,      2.0),                    # e_lr\n        (-2.0,      2.0),                    # e_bsz\n        (-2.0,      0.0),                    # e_data (loss \u2193 with more data)\n        (-2.0,      0.0),                    # e_model (loss \u2193 with larger model)\n    ]\n\n    # Weighted MSE + L2 penalty objective\n    def obj_and_grad(p):\n        b, logA, e_lr, e_bsz, e_data, e_model = p\n        # recompute predictions\n        lr   = X[:, 0] + eps\n        bsz  = X[:, 1] + eps\n        D    = X[:, 2] + eps\n        M    = X[:, 3] + eps\n        log_term = (\n            logA\n            + e_lr    * np.log(lr)\n            + e_bsz   * np.log(bsz)\n            + e_data  * np.log(D)\n            + e_model * np.log(M)\n        )\n        term = np.exp(log_term)\n        pred = b + term\n        # Residuals and weights (relative MSE)\n        resid = pred - y\n        w = 1.0 / (y + eps)\n        # Objective: mean((resid * w)^2) + \u03b1 * sum(exponents^2)\n        mse_weighted = np.mean((resid * w) ** 2)\n        reg = 1e-4 * (e_lr**2 + e_bsz**2 + e_data**2 + e_model**2)\n        loss = mse_weighted + reg\n\n        # Gradients\n        # dL/dpred = 2/N * (resid * w^2)\n        grad_pred = 2.0 / N * resid * (w ** 2)\n        # dL/db = sum(dL/dpred * dpred/db) = sum(grad_pred)\n        grad_b = np.sum(grad_pred)\n        # dL/dlogA: dpred/dlogA = term\n        grad_logA = np.sum(grad_pred * term)\n        # dpred/dexponent = term * log(feature)\n        log_lr  = np.log(lr)\n        log_bsz = np.log(bsz)\n        log_D   = np.log(D)\n        log_M   = np.log(M)\n        grad_e_lr    = np.sum(grad_pred * term * log_lr)   + 2e-4 * e_lr\n        grad_e_bsz   = np.sum(grad_pred * term * log_bsz)  + 2e-4 * e_bsz\n        grad_e_data  = np.sum(grad_pred * term * log_D)    + 2e-4 * e_data\n        grad_e_model = np.sum(grad_pred * term * log_M)    + 2e-4 * e_model\n\n        return loss, np.array([\n            grad_b,\n            grad_logA,\n            grad_e_lr,\n            grad_e_bsz,\n            grad_e_data,\n            grad_e_model\n        ], dtype=np.float64)\n\n    # Multi\u2010start optimization\n    best_p, best_loss = None, np.inf\n    for p0 in (init1, init2):\n        # Clip initial bias into its bounds\n        low, high = bounds[0]\n        p0[0] = np.clip(p0[0], low, high)\n        res = minimize(\n            fun=lambda p: obj_and_grad(p)[0],\n            x0=p0,\n            jac=lambda p: obj_and_grad(p)[1],\n            bounds=bounds,\n            method=\"L-BFGS-B\",\n            options={\"maxiter\": 500, \"ftol\": 1e-12}\n        )\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_p = res.x\n\n    # Fallback if all starts fail\n    return best_p if best_p is not None else init1\n```\n\nExplanation of key improvements:\n- Introduced a weighted MSE objective (`w = 1/(y+eps)`) to reduce relative errors, improving NMSE and NMAE.\n- Added a small L2 penalty on the exponent terms to stabilize fits across hyperparameter scales.\n- Employed two diverse initializations (least-squares and a scaled variant) to escape local minima.\n- Tightened parameter bounds based on physical intuition (e.g., negative exponents for data/model size).\n- Provided analytic gradients for faster and more reliable L-BFGS-B convergence."]}}}