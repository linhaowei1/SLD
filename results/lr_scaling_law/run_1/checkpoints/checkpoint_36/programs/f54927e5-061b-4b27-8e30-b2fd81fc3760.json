{"id": "f54927e5-061b-4b27-8e30-b2fd81fc3760", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language\u2010model loss using a log\u2010quadratic scaling law:\n      log(L) = a0 \n               + a1*log(lr) \n               + a2*(log(lr))^2 \n               + a3*log(bsz) \n               + a4*log(data_size) \n               + a5*log(non_embedding_param_size)\n    Loss = exp(log(L)).\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      array of shape (6,) or (T,6) containing\n                   [a0, a1, a2, a3, a4, a5].\n\n    Returns:\n      If params is 1D (6,), returns (N,) array of predicted losses.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n\n    # Ensure params is (T,6)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {P}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, nparams = Xc.T\n\n    # Compute log features\n    log_lr     = np.log(lr)\n    log_bsz    = np.log(bsz)\n    log_data   = np.log(data_size)\n    log_params = np.log(nparams)\n\n    # Build design matrix A: shape (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_params\n    ]).T  # (N,6)\n\n    # Compute log\u2010predictions\n    log_pred = A.dot(p.T)  # (N,T)\n    loss_pred = np.exp(log_pred)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter log\u2010quadratic model via ridge\u2010regularized least squares\n    in normalized log\u2010space:\n\n      log(L) = a0 \n               + a1*log(lr) \n               + a2*(log(lr))^2 \n               + a3*log(bsz) \n               + a4*log(data_size) \n               + a5*log(non_embedding_param_size)\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss_values must match number of data points\")\n\n    # Clip features and compute logs\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, nparams = Xc.T\n    log_lr     = np.log(lr)\n    log_bsz    = np.log(bsz)\n    log_data   = np.log(data_size)\n    log_params = np.log(nparams)\n\n    # Build raw design matrix A (N,6)\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_params\n    ]).T  # (N,6)\n\n    # Normalize columns 1\u20135 (leave intercept column unchanged)\n    means = np.mean(A[:, 1:], axis=0)\n    stds  = np.std(A[:, 1:],  axis=0, ddof=0)\n    stds  = np.where(stds < eps, 1.0, stds)\n    A_norm = A.copy()\n    A_norm[:, 1:] = (A[:, 1:] - means) / stds\n\n    # Prepare target log\u2010loss, centered\n    y_clip = np.clip(y, eps, None)\n    logy   = np.log(y_clip)\n    mean_y = np.mean(logy)\n    y_cent = logy - mean_y\n\n    # Ridge regularization on slopes only\n    P = A_norm.shape[1]\n    ATA = A_norm.T.dot(A_norm)\n    lam = 1e-3 * np.trace(ATA) / P\n    Reg = np.eye(P) * lam\n    Reg[0, 0] = 0.0  # no penalty on intercept\n\n    # Solve (A_norm^T A_norm + Reg) \u00b7 w_norm = A_norm^T \u00b7 y_cent\n    w_norm = np.linalg.solve(ATA + Reg, A_norm.T.dot(y_cent))\n\n    # Un\u2010normalize back to original coefficients\n    intercept_norm = w_norm[0]\n    slopes_norm    = w_norm[1:]\n    slopes         = slopes_norm / stds\n    intercept      = mean_y + intercept_norm - np.dot(slopes_norm, means / stds)\n\n    return np.concatenate([[intercept], slopes])", "language": "python", "parent_id": "5142d6d3-d22c-4023-8a41-f1e5967702ec", "generation": 2, "timestamp": 1754802057.068536, "iteration_found": 31, "metrics": {"nmse": 109.54412215874022, "nmae": 13.963451266227318, "r2": -108.54412215874022, "combined_score": 0.009046161663521199}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.98815363646227, "nmae": 14.12841762077262, "r2": -111.98815363646227, "combined_score": 0.008772841458501546}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 112.7033, nmae: 14.1104, r2: -111.7033, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 109.1426, nmae: 13.9355, r2: -108.1426, combined_score: 0.0091\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.7361)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with a quadratic term in log(lr)\nand light Tikhonov (ridge) regularization for stability and better generalization.\n\nModel form (in log-space):\n  log(L) = a0 \n           + a1 * log(lr) \n           + a2 * [log(lr)]^2 \n           + a3 * log(bsz) \n           + a4 * log(data_size) \n           + a5 * log(non_embedding_param_size)\n\nThus Loss = exp(log(L)).\n\nWe fit the 6 parameters [a0..a5] by solving a small ridge\u2010regularized\nlinear least squares in log-space:\n  minimize ||A\u00b7a \u2212 log(y)||^2 + \u03bb||a||^2\nwhere A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n\nThis captures the typical U-shaped effect of learning rate (via the quadratic term)\nand enforces numerical stability on small datasets via a tiny ridge penalty.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language-model loss given hyperparameters and fitted params.\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      params:      either 1D array of length 6, or 2D array of shape (T,6)\n                   containing [a0, a1, a2, a3, a4, a5].\n                   \n    Returns:\n      preds: If params is 1D, returns shape (N,) array of predicted losses.\n             If params is 2D (T,6), returns shape (N,T) array of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = X_clipped.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    \n    # Build design matrix in log-space: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n    \n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got length {p.shape[0]}\")\n        log_pred = F.dot(p)           # shape (N,)\n        return np.exp(log_pred)\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # compute F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter log-quadratic model via ridge-regularized least squares:\n    \n      minimize_a ||A\u00b7a - log(y)||^2 + \u03bb||a||^2\n    \n    where A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      loss_values: array of length N of observed LM losses.\n    \n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Clip and compute logs\n    Xc = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(np.clip(y, 1e-12, None))\n    \n    # Build design matrix A (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T\n    \n    # Small ridge penalty for numerical stability\n    lam = 1e-6\n    # Solve (A^T A + lam I) a = A^T logy\n    ATA = A.T.dot(A)\n    # Add ridge penalty on all coeffs equally\n    diag_idx = np.diag_indices(ATA.shape[0])\n    ATA[diag_idx] += lam\n    ATy = A.T.dot(logy)\n    \n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (109.1426), Performs well on nmae (13.9355), Performs well on r2 (-108.1426), Performs well on combined_score (0.0091)\n\n\n### Program 2 (Score: 3.7798)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a regularized,\nnormalized log\u2010linear (power\u2010law) form for enhanced stability.\n\nWe model:\n   log L = a0 + a1*log(lr) + a2*log(bsz) + a3*log(data_size) + a4*log(param_size)\nand fit by ridge\u2010regularized least squares in normalized feature space,\nthen transform back to the original scale.\n\nInputs:\n  data_points: (N,4) array = [lr, bsz, data_size, non_emb_param_size]\n  loss_values: (N,)    array = observed lm loss (all > 0)\nOutputs:\n  params:     (5,)      array = [a0, a1, a2, a3, a4]\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # avoid zero or negative\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)\n    p = np.asarray(params, dtype=float)\n    # single\u2010set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got {p.shape[0]}\")\n        a0, slopes = p[0], p[1:]\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    # parallel sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # (T,)\n        slopes = p[:, 1:]         # (T,4)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    # take logs\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    N, F = logX.shape\n\n    # center & scale each log\u2010feature\n    mean_x = np.mean(logX, axis=0)\n    std_x  = np.std(logX, axis=0, ddof=0)\n    std_x  = np.where(std_x < eps, 1.0, std_x)\n\n    X_norm = (logX - mean_x) / std_x\n\n    # center target\n    mean_y = np.mean(logy)\n    y_center = logy - mean_y\n\n    # build normalized design matrix\n    A = np.concatenate([np.ones((N,1)), X_norm], axis=1)  # shape (N,5)\n\n    # normal equations with ridge regularization (no reg on intercept)\n    ATA = A.T.dot(A)        # (5,5)\n    ATy = A.T.dot(y_center) # (5,)\n\n    P = F + 1\n    lambda_reg = 1e-3 * np.trace(ATA) / P\n    Reg = np.eye(P) * lambda_reg\n    Reg[0,0] = 0.0\n\n    # solve for normalized parameters\n    p_norm = np.linalg.solve(ATA + Reg, ATy)   # (5,)\n\n    # un\u2010normalize back to original log\u2010space\n    slopes    = p_norm[1:] / std_x\n    intercept = mean_y + p_norm[0] - np.dot(p_norm[1:], mean_x / std_x)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.7033), Performs well on nmae (14.1104), Performs well on r2 (-111.7033), Performs well on combined_score (0.0088)\n\n\n### Program 3 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log\u2013linear scaling law:\n      log(loss) = intercept + sum_i weight_i * log(feature_i)\n    Loss = exp(log(loss))\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (P,) or (T, P), where P = F + 1\n                   first column is intercept, next F are weights on log(features)\n    Returns:\n      predictions: (N,) or (N, T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n\n    # Ensure params is 2D: (T, P)\n    pars = np.asarray(params, dtype=float)\n    if pars.ndim == 1:\n        pars = pars[None, :]\n    T, P = pars.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected params with {F+1} elements, got {P}\")\n\n    # Compute log of inputs (all inputs must be positive)\n    # Clip to a small positive number to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)             # shape (N, F)\n\n    intercept = pars[:, 0]               # shape (T,)\n    weights   = pars[:, 1:]              # shape (T, F)\n\n    # Compute log-loss predictions: shape (N, T)\n    # log_loss[n, t] = intercept[t] + sum_i weights[t,i] * logX[n,i]\n    log_loss = logX.dot(weights.T) + intercept\n\n    # Exponentiate to get loss\n    loss_pred = np.exp(log_loss)\n\n    # If only one target, return shape (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law by solving a least-squares problem:\n      minimize || log(y) - [1, log(X)] \u00b7 w ||^2\n    Returns:\n      params: array of shape (P,) or (T, P), P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n\n    # Build design matrix [1, log(X)] of shape (N, P)\n    # Clip X to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n\n    # Prepare target log(y)\n    # Clip y to avoid log(0) / negative\n    y_clipped = np.clip(y, 1e-12, None)\n    logy = np.log(y_clipped)                                   # shape (N,) or (N, T)\n\n    # Solve least squares; supports multi\u2010output if logy is (N, T)\n    # w has shape (F+1,) or (F+1, T)\n    w, *_ = np.linalg.lstsq(X_design, logy, rcond=None)\n\n    # Return in shape (T, P) or (P,)\n    if w.ndim == 1:\n        return w\n    # w is (P, T) -> transpose to (T, P)\n    return w.T\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.7361, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with a quadratic term in log(lr)\nand light Tikhonov (ridge) regularization for stability and better generalization.\n\nModel form (in log-space):\n  log(L) = a0 \n           + a1 * log(lr) \n           + a2 * [log(lr)]^2 \n           + a3 * log(bsz) \n           + a4 * log(data_size) \n           + a5 * log(non_embedding_param_size)\n\nThus Loss = exp(log(L)).\n\nWe fit the 6 parameters [a0..a5] by solving a small ridge\u2010regularized\nlinear least squares in log-space:\n  minimize ||A\u00b7a \u2212 log(y)||^2 + \u03bb||a||^2\nwhere A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n\nThis captures the typical U-shaped effect of learning rate (via the quadratic term)\nand enforces numerical stability on small datasets via a tiny ridge penalty.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language-model loss given hyperparameters and fitted params.\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      params:      either 1D array of length 6, or 2D array of shape (T,6)\n                   containing [a0, a1, a2, a3, a4, a5].\n                   \n    Returns:\n      preds: If params is 1D, returns shape (N,) array of predicted losses.\n             If params is 2D (T,6), returns shape (N,T) array of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = X_clipped.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    \n    # Build design matrix in log-space: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n    \n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got length {p.shape[0]}\")\n        log_pred = F.dot(p)           # shape (N,)\n        return np.exp(log_pred)\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # compute F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter log-quadratic model via ridge-regularized least squares:\n    \n      minimize_a ||A\u00b7a - log(y)||^2 + \u03bb||a||^2\n    \n    where A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      loss_values: array of length N of observed LM losses.\n    \n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Clip and compute logs\n    Xc = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(np.clip(y, 1e-12, None))\n    \n    # Build design matrix A (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T\n    \n    # Small ridge penalty for numerical stability\n    lam = 1e-6\n    # Solve (A^T A + lam I) a = A^T logy\n    ATA = A.T.dot(A)\n    # Add ridge penalty on all coeffs equally\n    diag_idx = np.diag_indices(ATA.shape[0])\n    ATA[diag_idx] += lam\n    ATy = A.T.dot(logy)\n    \n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (109.143), Excellent nmae (13.936)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log\u2013linear scaling law:\n      log(loss) = intercept + sum_i weight_i * log(feature_i)\n    Loss = exp(log(loss))\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (P,) or (T, P), where P = F + 1\n                   first column is intercept, next F are weights on log(features)\n    Returns:\n      predictions: (N,) or (N, T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n\n    # Ensure params is 2D: (T, P)\n    pars = np.asarray(params, dtype=float)\n    if pars.ndim == 1:\n        pars = pars[None, :]\n    T, P = pars.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected params with {F+1} elements, got {P}\")\n\n    # Compute log of inputs (all inputs must be positive)\n    # Clip to a small positive number to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)             # shape (N, F)\n\n    intercept = pars[:, 0]               # shape (T,)\n    weights   = pars[:, 1:]              # shape (T, F)\n\n    # Compute log-loss predictions: shape (N, T)\n    # log_loss[n, t] = intercept[t] + sum_i weights[t,i] * logX[n,i]\n    log_loss = logX.dot(weights.T) + intercept\n\n    # Exponentiate to get loss\n    loss_pred = np.exp(log_loss)\n\n    # If only one target, return shape (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law by solving a least-squares problem:\n      minimize || log(y) - [1, log(X)] \u00b7 w ||^2\n    Returns:\n      params: array of shape (P,) or (T, P), P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n\n    # Build design matrix [1, log(X)] of shape (N, P)\n    # Clip X to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n\n    # Prepare target log(y)\n    # Clip y to avoid log(0) / negative\n    y_clipped = np.clip(y, 1e-12, None)\n    logy = np.log(y_clipped)                                   # shape (N,) or (N, T)\n\n    # Solve least squares; supports multi\u2010output if logy is (N, T)\n    # w has shape (F+1,) or (F+1, T)\n    w, *_ = np.linalg.lstsq(X_design, logy, rcond=None)\n\n    # Return in shape (T, P) or (P,)\n    if w.ndim == 1:\n        return w\n    # w is (P, T) -> transpose to (T, P)\n    return w.T\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language\u2010model loss using a log\u2010quadratic scaling law:\n      log(L) = a0 \n               + a1*log(lr) \n               + a2*(log(lr))^2 \n               + a3*log(bsz) \n               + a4*log(data_size) \n               + a5*log(non_embedding_param_size)\n    Loss = exp(log(L)).\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      array of shape (6,) or (T,6) containing\n                   [a0, a1, a2, a3, a4, a5].\n\n    Returns:\n      If params is 1D (6,), returns (N,) array of predicted losses.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n\n    # Ensure params is (T,6)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {P}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, nparams = Xc.T\n\n    # Compute log features\n    log_lr     = np.log(lr)\n    log_bsz    = np.log(bsz)\n    log_data   = np.log(data_size)\n    log_params = np.log(nparams)\n\n    # Build design matrix A: shape (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_params\n    ]).T  # (N,6)\n\n    # Compute log\u2010predictions\n    log_pred = A.dot(p.T)  # (N,T)\n    loss_pred = np.exp(log_pred)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter log\u2010quadratic model via ridge\u2010regularized least squares\n    in normalized log\u2010space:\n\n      log(L) = a0 \n               + a1*log(lr) \n               + a2*(log(lr))^2 \n               + a3*log(bsz) \n               + a4*log(data_size) \n               + a5*log(non_embedding_param_size)\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss_values must match number of data points\")\n\n    # Clip features and compute logs\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, nparams = Xc.T\n    log_lr     = np.log(lr)\n    log_bsz    = np.log(bsz)\n    log_data   = np.log(data_size)\n    log_params = np.log(nparams)\n\n    # Build raw design matrix A (N,6)\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_params\n    ]).T  # (N,6)\n\n    # Normalize columns 1\u20135 (leave intercept column unchanged)\n    means = np.mean(A[:, 1:], axis=0)\n    stds  = np.std(A[:, 1:],  axis=0, ddof=0)\n    stds  = np.where(stds < eps, 1.0, stds)\n    A_norm = A.copy()\n    A_norm[:, 1:] = (A[:, 1:] - means) / stds\n\n    # Prepare target log\u2010loss, centered\n    y_clip = np.clip(y, eps, None)\n    logy   = np.log(y_clip)\n    mean_y = np.mean(logy)\n    y_cent = logy - mean_y\n\n    # Ridge regularization on slopes only\n    P = A_norm.shape[1]\n    ATA = A_norm.T.dot(A_norm)\n    lam = 1e-3 * np.trace(ATA) / P\n    Reg = np.eye(P) * lam\n    Reg[0, 0] = 0.0  # no penalty on intercept\n\n    # Solve (A_norm^T A_norm + Reg) \u00b7 w_norm = A_norm^T \u00b7 y_cent\n    w_norm = np.linalg.solve(ATA + Reg, A_norm.T.dot(y_cent))\n\n    # Un\u2010normalize back to original coefficients\n    intercept_norm = w_norm[0]\n    slopes_norm    = w_norm[1:]\n    slopes         = slopes_norm / stds\n    intercept      = mean_y + intercept_norm - np.dot(slopes_norm, means / stds)\n\n    return np.concatenate([[intercept], slopes])\n```\n\nExplanation of key improvements:\n- Introduced a quadratic term in log(lr) to capture the U\u2010shaped learning\u2010rate effect.\n- Normalized the non\u2010intercept features before solving to improve numerical stability and conditioning.\n- Employed ridge regularization (penalizing only the slope coefficients) with a data\u2010adaptive \u03bb for better generalization.\n- Kept a closed\u2010form solve for speed and robustness."]}}}