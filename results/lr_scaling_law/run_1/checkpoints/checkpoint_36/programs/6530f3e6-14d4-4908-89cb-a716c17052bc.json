{"id": "6530f3e6-14d4-4908-89cb-a716c17052bc", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nSimplified and constrained scaling\u2010law model with robust fitting.\nWe model:\n    loss \u2248 C + exp(beta0 \n                     + beta_lr    * log(lr)\n                     + beta_bsz   * log(bsz)\n                     + beta_data  * log(data_size)\n                     + beta_param * log(non_embedding_param_size))\nConstraints:\n  C \u2265 0,\n  beta_lr \u2265 0  (higher lr \u2192 higher loss),\n  beta_bsz, beta_data, beta_param \u2264 0  (more data, larger batch/model \u2192 lower loss)\nFitting:\n  1) Closed\u2010form ridge regression in log\u2010space (no floor) for initial slopes & intercept\n  2) Initialize floor C = 0.5 * min(y)\n  3) Bound\u2010constrained robust least\u2010squares (Huber loss) refinement\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.shape[0]}\")\n    C, beta0, beta_lr, beta_bsz, beta_data, beta_param = p\n\n    # Numeric safety\n    X = np.clip(X, 1e-12, None)\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    expo = (beta0\n            + beta_lr    * log_lr\n            + beta_bsz   * log_bsz\n            + beta_data  * log_data\n            + beta_param * log_param)\n    return C + np.exp(expo)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling\u2010law model via:\n      1) closed\u2010form ridge regression in log\u2010space (no floor)\n      2) floor init C = 0.5 * min(loss)\n      3) bound\u2010constrained robust nonlinear refinement (Huber)\n    Returns:\n      params: (6,) array [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n\n    # 1) Closed\u2010form log\u2010linear ridge fit (no floor term)\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)                     # (N,4)\n    yc = np.clip(y, 1e-12, None)\n    logy = np.log(yc)                     # (N,)\n\n    N, F = logX.shape\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    ridge = 1e-6\n    A = Z.T.dot(Z) + ridge * np.eye(F+1)  # (5,5)\n    b = Z.T.dot(logy)                     # (5,)\n    sol = np.linalg.solve(A, b)           # [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    beta0_init, beta_lr_init, beta_bsz_init, beta_data_init, beta_param_init = sol\n\n    # 2) Floor term init: half of the minimum observed loss (but \u22650)\n    C_init = max(0.0, 0.5 * np.min(y))\n    p0 = np.array([\n        C_init,\n        beta0_init,\n        beta_lr_init,\n        beta_bsz_init,\n        beta_data_init,\n        beta_param_init\n    ], dtype=float)\n\n    # 3) Robust nonlinear least\u2010squares refinement with sign constraints\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: C \u2265 0; beta_lr \u2265 0; beta_bsz, beta_data, beta_param \u2264 0; beta0 free\n    lb = np.array([0.0,      -np.inf,  0.0,     -np.inf, -np.inf, -np.inf], dtype=float)\n    ub = np.array([np.inf,    np.inf,  np.inf,    0.0,     0.0,     0.0   ], dtype=float)\n\n    res = least_squares(\n        resid,\n        p0,\n        bounds=(lb, ub),\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=5000\n    )\n\n    return res.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2e279142-87a2-4b2a-881a-865144685c52", "generation": 3, "timestamp": 1754798874.4629593, "iteration_found": 27, "metrics": {"nmse": 52.211217762352135, "nmae": 9.73566928476518, "r2": -51.211217762352135, "combined_score": 0.01879302977928683}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 51.41661857496327, "nmae": 9.659698614053532, "r2": -50.41661857496327, "combined_score": 0.019077918934619117}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 51.4166\n- nmae: 9.6597\n- r2: -50.4166\n- combined_score: 0.0191\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 51.4166, nmae: 9.6597, r2: -50.4166, combined_score: 0.0191\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.6697)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model fitting with a small additive floor term\nand non\u2010linear refinement via robust least\u2010squares for improved accuracy\nand stability across hyperparameter scales.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a power\u2010law with optional floor:\n      y_pred = C + exp(beta0 + sum_i beta_i * log(x_i))\n    Supports two parameter shapes:\n      - length = 1 + F  => [beta0, beta_1, ..., beta_F]  (no floor, C=0)\n      - length = 2 + F  => [C, beta0, beta_1, ..., beta_F]\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (P,) or (T,P)\n    Returns:\n      preds: (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    # ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,F)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n\n    # detect floor term\n    if P == F + 1:\n        # no floor\n        C = np.zeros((T, 1), dtype=float)\n        beta0 = p[:, 0:1]         # (T,1)\n        slopes = p[:, 1:]         # (T,F)\n    elif P == F + 2:\n        # first param is floor\n        C = p[:, 0:1]             # (T,1)\n        beta0 = p[:, 1:2]         # (T,1)\n        slopes = p[:, 2:]         # (T,F)\n    else:\n        raise ValueError(f\"Parameter length must be {F+1} or {F+2}, got {P}\")\n\n    # compute exponent term: (N, T)\n    # exponent[n,t] = beta0[t] + sum_j slopes[t,j] * logX[n,j]\n    expo = beta0.T + logX.dot(slopes.T)  # (N,T)\n    power_term = np.exp(expo)            # (N,T)\n\n    y_pred = C.T + power_term            # (N,T)\n\n    # if single parameter set, return 1D\n    if T == 1:\n        return y_pred[:, 0]\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law + floor model via:\n      1) closed\u2010form ridge regression in log\u2010space to get initial slopes and intercept\n      2) small positive floor term init\n      3) robust non\u2010linear least squares refinement\n    Returns:\n      params: array of shape (6,) => [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    assert F == 4, \"Expected 4 features\"\n\n    # 1) initial log\u2010linear fit with ridge\n    Xp = np.clip(X, 1e-12, None)\n    logX = np.log(Xp)                   # (N,4)\n    yp = np.clip(y, 1e-12, None)\n    logY = np.log(yp)                   # (N,)\n\n    # design matrix\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    ridge = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::ZTZ.shape[0]+1] += ridge\n    ZTY = Z.T.dot(logY)\n    beta_init = np.linalg.solve(ZTZ, ZTY)  # (5,)\n\n    # 2) initial floor term\n    y_min = np.min(y)\n    C_init = max(0.0, 0.5 * y_min)\n\n    # form full initial param vector: [C, beta0, slopes...]\n    p0 = np.concatenate([[C_init], beta_init])  # length = 6\n\n    # 3) refine via robust least\u2010squares\n    def residuals(p):\n        y_pred = scaling_law_func(X, p)\n        return y_pred - y\n\n    # enforce floor >= 0\n    lb = np.concatenate([[0.0], np.full(beta_init.shape, -np.inf)])\n    ub = np.full_like(p0, np.inf)\n    # robust fitting to lessen outlier impact\n    res = least_squares(\n        residuals,\n        p0,\n        bounds=(lb, ub),\n        loss='soft_l1',\n        f_scale=1.0,\n        max_nfev=5000,\n        xtol=1e-8,\n        ftol=1e-8\n    )\n\n    return res.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (51.4166), Performs well on nmae (9.6597), Performs well on r2 (-50.4166), Performs well on combined_score (0.0191)\n\n\n### Program 2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling-law model using log\u2013log linear regression.\nWe assume\n    loss \u2248 exp(b + \u03a3_i w_i \u00b7 log(x_i))\nso that in log-space the relationship is linear.\nThis yields a closed-form least\u2010squares solution with optional ridge regularization\nfor stability and fast generalization across hyperparameter scales.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a power-law form.\n    data_points: array of shape (N, 4)  [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of shape (5, )\n                 [b, w_lr, w_bsz, w_data, w_param]\n    Returns:     array of shape (N, ) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.shape[0]}\")\n    b = p[0]\n    w = p[1:]\n    # log-transform inputs (all > 0 by construction)\n    logX = np.log(X)\n    # linear model in log-space\n    log_pred = b + np.dot(logX, w)\n    # back-transform to original space\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above power-law model by solving a linear least-squares problem\n    in log-space:\n        log(loss) \u2248 b + \u03a3_i w_i log(x_i)\n    Returns params array of shape (5, ).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform features and target\n    logX = np.log(X)\n    logy = np.log(y + 1e-12)  # tiny offset for numerical safety\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N, 5)\n    # ridge regularization for numerical stability\n    ridge_lambda = 1e-6\n    A = Z.T.dot(Z) + ridge_lambda * np.eye(F + 1)\n    b = Z.T.dot(logy)\n    # solve for [b, w1, w2, w3, w4]\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n### Program 3 (Score: 4.6009)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a power\u2010law, loss \u2248 exp(beta0 + sum_i beta_i * log(x_i)).\n    data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of shape (5,) or (T,5), each row = [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    # Ensure numeric array\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                     # (N,4)\n\n    # Prepare params array\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    T, P = p.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected params.shape[1] == {F+1}, got {P}\")\n\n    # Unpack\n    beta0 = p[:, 0]                      # (T,)\n    betas = p[:, 1:]                     # (T,4)\n\n    # Compute log\u2010predictions: (N,T) = logX.dot(betas.T) + beta0\n    log_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(log_pred)\n\n    # Return shape (N,) for single param\u2010set, else (N,T)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model in closed form with ridge regularization:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns params of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points shape (_,4), got {X.shape}\")\n\n    # Clip inputs and targets to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                     # (N,4)\n    y = np.clip(y, 1e-12, None)\n    logY = np.log(y)                     # (N,)\n\n    # Design matrix with intercept: Z = [1, logX]\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    P = F + 1  # 5 features including intercept\n\n    # Ridge regularization\n    ridge_lambda = 1e-6\n\n    # Closed-form solution: beta = (Z^T Z + \u03bbI)^(-1) Z^T logY\n    # Compute Z^T Z and add small ridge on diagonal\n    ZTZ = Z.T.dot(Z)                     # (5,5)\n    diag_indices = np.arange(P)\n    ZTZ[diag_indices, diag_indices] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                  # (5,)\n\n    beta = np.linalg.solve(ZTZ, ZTY)     # (5,)\n\n    return beta\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 4.6009, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a power\u2010law, loss \u2248 exp(beta0 + sum_i beta_i * log(x_i)).\n    data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of shape (5,) or (T,5), each row = [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    # Ensure numeric array\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                     # (N,4)\n\n    # Prepare params array\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    T, P = p.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected params.shape[1] == {F+1}, got {P}\")\n\n    # Unpack\n    beta0 = p[:, 0]                      # (T,)\n    betas = p[:, 1:]                     # (T,4)\n\n    # Compute log\u2010predictions: (N,T) = logX.dot(betas.T) + beta0\n    log_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(log_pred)\n\n    # Return shape (N,) for single param\u2010set, else (N,T)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model in closed form with ridge regularization:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns params of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points shape (_,4), got {X.shape}\")\n\n    # Clip inputs and targets to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                     # (N,4)\n    y = np.clip(y, 1e-12, None)\n    logY = np.log(y)                     # (N,)\n\n    # Design matrix with intercept: Z = [1, logX]\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    P = F + 1  # 5 features including intercept\n\n    # Ridge regularization\n    ridge_lambda = 1e-6\n\n    # Closed-form solution: beta = (Z^T Z + \u03bbI)^(-1) Z^T logY\n    # Compute Z^T Z and add small ridge on diagonal\n    ZTZ = Z.T.dot(Z)                     # (5,5)\n    diag_indices = np.arange(P)\n    ZTZ[diag_indices, diag_indices] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                  # (5,)\n\n    beta = np.linalg.solve(ZTZ, ZTY)     # (5,)\n\n    return beta\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.397)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model fitting with a small additive floor term\nand non\u2010linear refinement via robust least\u2010squares for improved accuracy\nand stability across hyperparameter scales.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a power\u2010law with optional floor:\n      y_pred = C + exp(beta0 + sum_i beta_i * log(x_i))\n    Supports two parameter shapes:\n      - length = 1 + F  => [beta0, beta_1, ..., beta_F]  (no floor, C=0)\n      - length = 2 + F  => [C, beta0, beta_1, ..., beta_F]\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (P,) or (T,P)\n    Returns:\n      preds: (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    # ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,F)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n\n    # detect floor term\n    if P == F + 1:\n        # no floor\n        C = np.zeros((T, 1), dtype=float)\n        beta0 = p[:, 0:1]         # (T,1)\n        slopes = p[:, 1:]         # (T,F)\n    elif P == F + 2:\n        # first param is floor\n        C = p[:, 0:1]             # (T,1)\n        beta0 = p[:, 1:2]         # (T,1)\n        slopes = p[:, 2:]         # (T,F)\n    else:\n        raise ValueError(f\"Parameter length must be {F+1} or {F+2}, got {P}\")\n\n    # compute exponent term: (N, T)\n    # exponent[n,t] = beta0[t] + sum_j slopes[t,j] * logX[n,j]\n    expo = beta0.T + logX.dot(slopes.T)  # (N,T)\n    power_term = np.exp(expo)            # (N,T)\n\n    y_pred = C.T + power_term            # (N,T)\n\n    # if single parameter set, return 1D\n    if T == 1:\n        return y_pred[:, 0]\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law + floor model via:\n      1) closed\u2010form ridge regression in log\u2010space to get initial slopes and intercept\n      2) small positive floor term init\n      3) robust non\u2010linear least squares refinement\n    Returns:\n      params: array of shape (6,) => [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    assert F == 4, \"Expected 4 features\"\n\n    # 1) initial log\u2010linear fit with ridge\n    Xp = np.clip(X, 1e-12, None)\n    logX = np.log(Xp)                   # (N,4)\n    yp = np.clip(y, 1e-12, None)\n    logY = np.log(yp)                   # (N,)\n\n    # design matrix\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    ridge = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::ZTZ.shape[0]+1] += ridge\n    ZTY = Z.T.dot(logY)\n    beta_init = np.linalg.solve(ZTZ, ZTY)  # (5,)\n\n    # 2) initial floor term\n    y_min = np.min(y)\n    C_init = max(0.0, 0.5 * y_min)\n\n    # form full initial param vector: [C, beta0, slopes...]\n    p0 = np.concatenate([[C_init], beta_init])  # length = 6\n\n    # 3) refine via robust least\u2010squares\n    def residuals(p):\n        y_pred = scaling_law_func(X, p)\n        return y_pred - y\n\n    # enforce floor >= 0\n    lb = np.concatenate([[0.0], np.full(beta_init.shape, -np.inf)])\n    ub = np.full_like(p0, np.inf)\n    # robust fitting to lessen outlier impact\n    res = least_squares(\n        residuals,\n        p0,\n        bounds=(lb, ub),\n        loss='soft_l1',\n        f_scale=1.0,\n        max_nfev=5000,\n        xtol=1e-8,\n        ftol=1e-8\n    )\n\n    return res.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified and constrained scaling\u2010law model with robust fitting.\nWe model:\n    loss \u2248 C + exp(beta0 \n                     + beta_lr    * log(lr)\n                     + beta_bsz   * log(bsz)\n                     + beta_data  * log(data_size)\n                     + beta_param * log(non_embedding_param_size))\nConstraints:\n  C \u2265 0,\n  beta_lr \u2265 0  (higher lr \u2192 higher loss),\n  beta_bsz, beta_data, beta_param \u2264 0  (more data, larger batch/model \u2192 lower loss)\nFitting:\n  1) Closed\u2010form ridge regression in log\u2010space (no floor) for initial slopes & intercept\n  2) Initialize floor C = 0.5 * min(y)\n  3) Bound\u2010constrained robust least\u2010squares (Huber loss) refinement\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.shape[0]}\")\n    C, beta0, beta_lr, beta_bsz, beta_data, beta_param = p\n\n    # Numeric safety\n    X = np.clip(X, 1e-12, None)\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    expo = (beta0\n            + beta_lr    * log_lr\n            + beta_bsz   * log_bsz\n            + beta_data  * log_data\n            + beta_param * log_param)\n    return C + np.exp(expo)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling\u2010law model via:\n      1) closed\u2010form ridge regression in log\u2010space (no floor)\n      2) floor init C = 0.5 * min(loss)\n      3) bound\u2010constrained robust nonlinear refinement (Huber)\n    Returns:\n      params: (6,) array [C, beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n\n    # 1) Closed\u2010form log\u2010linear ridge fit (no floor term)\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)                     # (N,4)\n    yc = np.clip(y, 1e-12, None)\n    logy = np.log(yc)                     # (N,)\n\n    N, F = logX.shape\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    ridge = 1e-6\n    A = Z.T.dot(Z) + ridge * np.eye(F+1)  # (5,5)\n    b = Z.T.dot(logy)                     # (5,)\n    sol = np.linalg.solve(A, b)           # [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    beta0_init, beta_lr_init, beta_bsz_init, beta_data_init, beta_param_init = sol\n\n    # 2) Floor term init: half of the minimum observed loss (but \u22650)\n    C_init = max(0.0, 0.5 * np.min(y))\n    p0 = np.array([\n        C_init,\n        beta0_init,\n        beta_lr_init,\n        beta_bsz_init,\n        beta_data_init,\n        beta_param_init\n    ], dtype=float)\n\n    # 3) Robust nonlinear least\u2010squares refinement with sign constraints\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: C \u2265 0; beta_lr \u2265 0; beta_bsz, beta_data, beta_param \u2264 0; beta0 free\n    lb = np.array([0.0,      -np.inf,  0.0,     -np.inf, -np.inf, -np.inf], dtype=float)\n    ub = np.array([np.inf,    np.inf,  np.inf,    0.0,     0.0,     0.0   ], dtype=float)\n\n    res = least_squares(\n        resid,\n        p0,\n        bounds=(lb, ub),\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=5000\n    )\n\n    return res.x\n# EVOLVE-BLOCK-END\n```"]}}}