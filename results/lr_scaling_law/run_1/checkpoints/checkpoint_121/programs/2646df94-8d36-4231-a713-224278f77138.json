{"id": "2646df94-8d36-4231-a713-224278f77138", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute log\u2010space midpoint and half\u2010range for each feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # normalize ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)             # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization (no penalty on intercept)\n    P = A.shape[1]                            # 15\n    lam = 1e-4                                # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "dd345a4a-7c74-4558-9fcd-28c48ae5bffa", "generation": 3, "timestamp": 1754804143.8782208, "iteration_found": 64, "metrics": {"nmse": 8.2376339654398, "nmae": 3.1862533679500347, "r2": -7.2376339654398, "combined_score": 0.10825282791472789}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 41.500567218955304, "nmae": 8.495647181122589, "r2": -40.500567218955304, "combined_score": 0.02352909773764146}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 41.5006\n- nmae: 8.4956\n- r2: -40.5006\n- combined_score: 0.0235\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - mean) / scale\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # normalize to ~[-1,1]\n    N = X.shape[0]\n    # intercept\n    feats = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    feats += [z[:, i] for i in range(4)]\n    # quadratic terms\n    feats += [z[:, i] * z[:, i] for i in range(4)]\n    # pairwise interactions\n    for i in range(4):\n        for j in range(i + 1, 4):\n            feats.append(z[:, i] * z[:, j])\n    return np.column_stack(feats)             # (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n    A = _build_design_matrix(X)               # (N,15)\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization\n    P = A.shape[1]                            # 15\n    lam = 1e-4                                # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                          # no penalty on intercept\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants: mean and half\u2010range\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a degree\u20102 polynomial design matrix on normalized log\u2010features.\n    For each sample, features are:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                   # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to ~[-1,1]\n    N, F = z.shape\n\n    feats = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n\n    return np.stack(feats, axis=1)  # shape (N, 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]                   # 15\n    lam = 1e-4                       # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on the problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range in log space for each feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    The columns are:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N, 15).\n    \"\"\"\n    eps = 1e-12\n    # Natural log and normalization\n    logs = np.log(X + eps)                     # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE         # shape (N,4), roughly in [-1,1]\n    N, F = z.shape\n\n    # Build features\n    # 1) constant\n    cols = [np.ones((N, ), dtype=np.float64)]\n    # 2) linear\n    for i in range(F):\n        cols.append(z[:, i])\n    # 3) quadratic\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # 4) pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(z[:, i] * z[:, j])\n    # Stack into design matrix\n    A = np.stack(cols, axis=1)  # shape (N,15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Ensure correct shape\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func expects 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)             # (N,15)\n    log_pred = A.dot(theta)                 # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Ensure 2D input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix\n    A = _build_design_matrix(X)             # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                 # (N,)\n\n    # Ridge regularization\n    P = A.shape[1]                          # 15\n    lam = 1e-4                              # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                         # do not penalize the intercept\n\n    # Solve normal equations: (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    # number of features\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # safe log and normalize to [-1,1]\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # linear and quadratic terms\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # add pairwise interactions\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # safe log-transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N,15)\n    y_log = np.log(y + eps)\n\n    # ridge regularization (no penalty on intercept)\n    lam = 1e-5\n    P = A.shape[1]\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA, ATy)\n\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # Safe log and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # Build log\u2010loss prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # Safe log\u2010transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n    y_log = np.log(y + eps)\n\n    # Solve (A^T A + \u03bbI) \u03b8 = A^T y_log with small ridge for stability\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute normalization constants\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - mean) / scale\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # normalize to ~[-1,1]\n    N = X.shape[0]\n    # intercept\n    feats = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    feats += [z[:, i] for i in range(4)]\n    # quadratic terms\n    feats += [z[:, i] * z[:, i] for i in range(4)]\n    # pairwise interactions\n    for i in range(4):\n        for j in range(i + 1, 4):\n            feats.append(z[:, i] * z[:, j])\n    return np.column_stack(feats)             # (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n    A = _build_design_matrix(X)               # (N,15)\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization\n    P = A.shape[1]                            # 15\n    lam = 1e-4                                # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                          # no penalty on intercept\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 2 (Score: 5.0982, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) hyperparameter ranges for normalization\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 100e9\n_PARAM_MIN, _PARAM_MAX = 214e6, 1e9\n\n# Pre\u2010compute log\u2010space centers and half\u2010ranges\n_eps = 1e-12\n_ln_lr_min, _ln_lr_max = np.log(_LR_MIN + _eps), np.log(_LR_MAX + _eps)\n_ln_bsz_min, _ln_bsz_max = np.log(_BSZ_MIN + _eps), np.log(_BSZ_MAX + _eps)\n_ln_data_min, _ln_data_max = np.log(_DATA_MIN + _eps), np.log(_DATA_MAX + _eps)\n_ln_param_min, _ln_param_max = np.log(_PARAM_MIN + _eps), np.log(_PARAM_MAX + _eps)\n\n_LR_C = 0.5 * (_ln_lr_min + _ln_lr_max)\n_LR_H = 0.5 * (_ln_lr_max - _ln_lr_min)\n_BSZ_C = 0.5 * (_ln_bsz_min + _ln_bsz_max)\n_BSZ_H = 0.5 * (_ln_bsz_max - _ln_bsz_min)\n_DATA_C = 0.5 * (_ln_data_min + _ln_data_max)\n_DATA_H = 0.5 * (_ln_data_max - _ln_data_min)\n_PARAM_C = 0.5 * (_ln_param_min + _ln_param_max)\n_PARAM_H = 0.5 * (_ln_param_max - _ln_param_min)\n\ndef _construct_design(log_feats):\n    \"\"\"\n    Given normalized log\u2010features f of shape (N,4),\n    return design matrix of shape (N,11):\n      [1, f1, f2, f3, f4, f1*f2, f1*f3, f1*f4, f2*f3, f2*f4, f3*f4]\n    \"\"\"\n    f1, f2, f3, f4 = log_feats[:,0], log_feats[:,1], log_feats[:,2], log_feats[:,3]\n    # pairwise interactions\n    i12 = f1 * f2\n    i13 = f1 * f3\n    i14 = f1 * f4\n    i23 = f2 * f3\n    i24 = f2 * f4\n    i34 = f3 * f4\n    ones = np.ones((log_feats.shape[0], 1), dtype=log_feats.dtype)\n    return np.hstack([ones,\n                      log_feats,\n                      i12[:,None], i13[:,None], i14[:,None],\n                      i23[:,None], i24[:,None], i34[:,None]])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters with a normalized\n    log\u2010quadratic scaling law (11 parameters).\n    \n    data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of coefficients [\u03b80 \u2026 \u03b810]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(\"Expected params of length 11, got {}\".format(theta.size))\n    # compute log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    # normalize to roughly [-1,1]\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # build design matrix and predict\n    A = _construct_design(log_feats)  # (N,11)\n    log_pred = A.dot(theta)           # (N,)\n    # return in original loss\u2010space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 11\u2010parameter normalized log\u2010quadratic model via\n    ridge\u2010regularized linear regression on log(loss).\n    \n    Returns optimized \u03b8 of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # compute and normalize log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # design matrix and target\n    A = _construct_design(log_feats)  # (N,11)\n    y_log = np.log(y + _eps)\n    # ridge\u2010regularization (do not penalize intercept)\n    P = A.shape[1]\n    AtA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=AtA.dtype)\n    reg[0,0] = 0.0\n    M = AtA + reg\n    b = A.T.dot(y_log)\n    # solve (M)\u03b8 = b robustly\n    try:\n        theta = np.linalg.solve(M, b)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta = np.linalg.pinv(M).dot(b)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.176), Excellent nmae (19.388)\n\n\n### Inspiration 3 (Score: 3.7362, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log-quadratic scaling law with a squared lr term:\n      log(loss) = \u03b80\n                + \u03b81 * log(lr)\n                + \u03b82 * (log(lr))^2\n                + \u03b83 * log(bsz)\n                + \u03b84 * log(data_size)\n                + \u03b85 * log(non_embedding_param_size)\n      loss = exp(log(loss))\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 6:\n        raise ValueError(f\"scaling_law_func: expected params length 6, got {theta.size}\")\n\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)          # (N,4)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    np_log = logs[:, 3]\n\n    # design matrix: [1, lr_log, lr_log^2, bsz_log, data_log, np_log]\n    design = np.column_stack([\n        np.ones_like(lr_log),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        np_log\n    ])  # (N,6)\n\n    log_pred = design.dot(theta)    # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log-quadratic scaling law by solving ridge-regularized\n    least-squares in log-space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8||^2\n    where A has columns [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(non_embedding_param_size)].\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of training losses (>0)\n    Returns:\n      theta: ndarray of shape (6,) of fitted parameters [\u03b80\u2026\u03b85]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)     # (N,4)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    np_log = logs[:, 3]\n\n    # build design matrix\n    A = np.column_stack([\n        np.ones_like(lr_log),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        np_log\n    ])  # (N,6)\n\n    y_log = np.log(y + eps)\n\n    # ridge regularization (do not penalize intercept)\n    lam = 1e-6\n    P = A.shape[1]\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    lhs = A.T.dot(A) + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (109.143), Excellent nmae (13.936)\n\n\n### Inspiration 4 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization based on the problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range in log space for each feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    The columns are:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N, 15).\n    \"\"\"\n    eps = 1e-12\n    # Natural log and normalization\n    logs = np.log(X + eps)                     # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE         # shape (N,4), roughly in [-1,1]\n    N, F = z.shape\n\n    # Build features\n    # 1) constant\n    cols = [np.ones((N, ), dtype=np.float64)]\n    # 2) linear\n    for i in range(F):\n        cols.append(z[:, i])\n    # 3) quadratic\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # 4) pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(z[:, i] * z[:, j])\n    # Stack into design matrix\n    A = np.stack(cols, axis=1)  # shape (N,15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Ensure correct shape\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func expects 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)             # (N,15)\n    log_pred = A.dot(theta)                 # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Ensure 2D input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix\n    A = _build_design_matrix(X)             # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                 # (N,)\n\n    # Ridge regularization\n    P = A.shape[1]                          # 15\n    lam = 1e-4                              # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                         # do not penalize the intercept\n\n    # Solve normal equations: (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 5 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # Safe log and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # Build log\u2010loss prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # Safe log\u2010transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n    y_log = np.log(y + eps)\n\n    # Solve (A^T A + \u03bbI) \u03b8 = A^T y_log with small ridge for stability\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010log scaling law:\n      Loss = exp( \u03b80 \n                  + sum_i \u03b81_i * log(x_i)\n                  + sum_i \u03b82_i * (log(x_i))^2 )\n    where x_i \u2208 {lr, bsz, data_size, non_embedding_param_size}.\n    params: length = 1 + 2*4 = 9\n      [\u03b80, \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n           \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D shape\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected = 1 + 2 * F\n    if p.size != expected:\n        raise ValueError(f\"Expected params length {expected}, got {p.size}\")\n\n    theta0 = p[0]\n    lin_coeffs = p[1:1 + F]\n    quad_coeffs = p[1 + F:1 + 2 * F]\n\n    # numerical stability\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta0 \\\n               + logs.dot(lin_coeffs) \\\n               + (logs ** 2).dot(quad_coeffs)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9\u2010parameter quadratic\u2010in\u2010log scaling law by least\u2010squares on log(Loss):\n      log(y) \u2243 \u03b80 \n               + sum_i \u03b81_i log(x_i)\n               + sum_i \u03b82_i (log(x_i))^2\n    Returns parameter vector of length 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # build design matrix: [1, log(x), (log(x))^2]\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    logs2 = logs ** 2                 # (N,4)\n    A = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logs,\n        logs2\n    ], axis=1)                        # (N, 1+4+4)\n\n    y_log = np.log(y + eps)           # (N,)\n\n    # solve regularized normal equations: (A\u1d40A + \u03bbI) \u03b8 = A\u1d40 y_log\n    lam = 1e-6\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute log\u2010space midpoint and half\u2010range for each feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns A with shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # normalize ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # quadratic terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)             # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law via ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Output:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    A = _build_design_matrix(X)               # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    # ridge regularization (no penalty on intercept)\n    P = A.shape[1]                            # 15\n    lam = 1e-4                                # regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}