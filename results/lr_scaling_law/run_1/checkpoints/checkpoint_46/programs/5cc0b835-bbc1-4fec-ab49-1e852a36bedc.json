{"id": "5cc0b835-bbc1-4fec-ab49-1e852a36bedc", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                       + e_D*log(data_size) + e_N*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: ndarray of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected params length 6, got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_term = (logA\n                + e_lr  * np.log(lr  + eps)\n                + e_bsz * np.log(bsz + eps)\n                + e_D   * np.log(D    + eps)\n                + e_N   * np.log(Np   + eps))\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by first performing a ridge\u2010regularized\n    linear regression in log\u2010space (with centering and whitening of covariates)\n    to initialize parameters [b, logA, e_lr, e_bsz, e_D, e_N], then refine via\n    a few L-BFGS-B multi-starts minimizing MSE in original space.\n    Supports single\u2010target (N,) or multi\u2010target (N,T) loss_values.\n    Returns optimized params array of shape (6,) or (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D targets\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, T = X.shape[0], y_mat.shape[1]\n\n    # Precompute log-features, their means and stds for centering & whitening\n    eps = 1e-12\n    logX = np.log(X + eps)             # shape (N,4)\n    mu = np.mean(logX, axis=0)         # (4,)\n    sigma = np.std(logX, axis=0) + eps # (4,)\n    Z = (logX - mu) / sigma            # whitened logs, shape (N,4)\n\n    # Design for linear solve: [1, Z]\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    # Regularize all except the intercept column lightly\n    Reg = lam * np.eye(5)\n    Reg[0,0] = 0.0\n    M = A_lin.T @ A_lin + Reg\n\n    def _fit_single(y_vec):\n        # 1) offset b0: ensure y - b0 > 0\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, np.percentile(y_vec, 5) * 0.5)\n        # 2) linearize target\n        y_shift = np.maximum(y_vec - b0, eps)\n        logy = np.log(y_shift)\n        y_mean = np.mean(logy)\n        y_cent = logy - y_mean\n        # 3) solve ridge on centered target\n        theta_lin = np.linalg.solve(M, A_lin.T @ y_cent)  # (5,)\n        # 4) convert linear coefficients to log-domain intercept and exponents\n        #    log_pred \u2248 mean(logy) + [1, Z]\u00b7theta_lin\n        #    but Z = (logX - mu)/sigma => expand to get exponents on logX\n        # sum_term = \u03a3_i theta_lin[i+1] * (mu[i]/sigma[i])\n        sum_mu = np.dot(theta_lin[1:], mu / sigma)\n        logA0 = y_mean + theta_lin[0] - sum_mu\n        exponents = theta_lin[1:] / sigma  # length-4\n        init_p = np.zeros(6, dtype=np.float64)\n        init_p[0] = b0\n        init_p[1] = logA0\n        init_p[2:] = exponents\n\n        # 5) refine with a few L-BFGS-B multi-starts in original MSE\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b \u2265 0\n            (None, None),                 # logA unbounded\n            (-10.0, 10.0),                # e_lr\n            (-10.0, 10.0),                # e_bsz\n            (-10.0, 10.0),                # e_D\n            (-10.0, 10.0),                # e_N\n        ]\n        def mse_obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n\n        best_p = init_p.copy()\n        best_loss = mse_obj(best_p)\n        # try multi-start jitter\n        for _ in range(3):\n            trial = best_p.copy()\n            trial[2:] += 0.2 * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] * (1.0 + 0.1 * np.random.randn()))\n            trial[1] += 0.1 * np.random.randn()\n            try:\n                res = minimize(\n                    mse_obj, trial,\n                    method='L-BFGS-B',\n                    bounds=bounds,\n                    options={'maxiter': 200, 'ftol': 1e-9}\n                )\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except Exception:\n                pass\n\n        return best_p\n\n    # Fit each target dimension independently\n    params = np.vstack([_fit_single(y_mat[:, i]) for i in range(T)])\n    return params[0] if params.shape[0] == 1 else params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e34a6ed0-425a-476b-b2f3-92d4064de884", "generation": 5, "timestamp": 1754803931.22859, "iteration_found": 38, "metrics": {"nmse": 70.7159892254245, "nmae": 11.143426593579706, "r2": -69.7159892254245, "combined_score": 0.013943891882418371}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 33.35144290710311, "nmae": 7.58463848917718, "r2": -32.35144290710311, "combined_score": 0.029110858682248317}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 33.3514\n- nmae: 7.5846\n- r2: -32.3514\n- combined_score: 0.0291\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 115.5701, nmae: 14.2902, r2: -114.5701, combined_score: 0.0086\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 112.9877, nmae: 14.1284, r2: -111.9877, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 33.3514, nmae: 7.5846, r2: -32.3514, combined_score: 0.0291\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1534)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param_size^{e_N}\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Stability epsilon\n    eps = 1e-12\n    # Build log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on prediction:\n      loss \u2248 b + exp(logA + \u03a3 e_i * log(x_i))\n    Returns optimized params array [b, logA, e_lr, e_bsz, e_D, e_N].\n    Supports multi\u2010target: if loss_values is (N,T), returns (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D target for uniform processing\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    # Precompute log\u2010features and feature statistics for centering\n    eps = 1e-12\n    logX = np.log(X + eps)            # (N,4)\n    mu = np.mean(logX, axis=0)        # (4,)\n    Z = logX - mu[None,:]             # center logs\n    \n    # Add intercept column for linear solve\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    # Regularized normal equation\n    lam = 1e-6\n    M = A_lin.T @ A_lin + lam * np.eye(5)\n\n    def _fit_single(yvec):\n        # 1) initialize bias b0 as small quantile to ensure positivity\n        y_min, y_max = np.min(yvec), np.max(yvec)\n        b0 = max(0.0, np.percentile(yvec, 5) * 0.5)\n        # 2) solve for log\u2010coeff by regression on log(y - b0)\n        y_shift = np.maximum(yvec - b0, eps)\n        logy = np.log(y_shift)\n        theta = np.linalg.solve(M, A_lin.T @ (logy - np.mean(logy)))  # centered y\n        # recover intercept shift\n        # initial logA = mean(logy) - \u03b8\u00b7mean(Z)\n        logA0 = np.mean(logy) - theta[1:].dot(np.zeros(4))  # since Z is centered, dot=0\n        init = np.array([b0, logA0, theta[1], theta[2], theta[3], theta[4]], dtype=np.float64)\n\n        # Prepare bounds\n        bounds = [\n            (0.0, max(y_max*2.0, 1.0)),  # b \u2265 0\n            (None, None),                # logA unbounded\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_D\n            (-5.0, 5.0),                 # e_N\n        ]\n        # Objective: MSE\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - yvec)**2)\n\n        # Multi\u2010start: use initial and a small jittered variant\n        best_p, best_loss = init, obj(init)\n        for offset in [0.0, 0.1]:\n            trial = init.copy()\n            # jitter exponents modestly\n            trial[2:] += offset * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] + offset*(y_max-y_min)*0.1)\n            trial[1] += offset * 0.1\n            try:\n                res = minimize(obj, trial, method='L-BFGS-B', bounds=bounds,\n                               options={'maxiter':500, 'ftol':1e-12})\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except:\n                pass\n\n        return best_p\n\n    # Fit each target dimension\n    params = []\n    for i in range(T):\n        params.append(_fit_single(y2d[:,i]))\n    params = np.stack(params, axis=0)  # (T,6)\n    return params[0] if params.shape[0]==1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3514), Performs well on nmae (7.5846), Performs well on r2 (-32.3514), Performs well on combined_score (0.0291)\n\n\n### Program 2 (Score: 3.7843)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      Loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    # compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2010linear scaling law by solving a small ridge\u2010regularized\n    least squares problem in log\u2010space:\n      minimize \u2016A \u03b8 \u2212 log(y)\u2016\u00b2 + \u03bb\u2016\u03b8\u2016\u00b2\n    where A = [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size)].\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of training losses (must be >0)\n    Returns:\n      theta: ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # shape (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    # ridge regularization strength (small for numerical stability)\n    lam = 1e-6\n    # solve (A\u1d40A + \u03bbI) \u03b8 = A\u1d40 y_log\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(ATA.shape[0], dtype=ATA.dtype)\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n```\nKey features: Performs well on nmse (112.9877), Performs well on nmae (14.1284), Performs well on r2 (-111.9877), Performs well on combined_score (0.0088)\n\n\n### Program 3 (Score: 3.8247)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative power-law scaling with bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param^{e_N}\n    params: [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features [lr, bsz, data_size, non_emb_param], got {X.shape[1]}\")\n    # unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters [b, logA, e_lr, e_bsz, e_D, e_N], got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    # numerical stability\n    eps = 1e-12\n    # log\u2010space computation\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model via bounded L-BFGS-B to minimize MSE.\n    Supports single\u2010target (N,) or multi\u2010target (N,T) loss_values.\n    Returns optimized params of shape (6,) or (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=float)\n    # ensure (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    def _fit_one(y_vec):\n        # reasonable inits based on data range\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0     = max(0.0, y_min * 0.5)\n        logA0  = np.log(max(y_max - b0, 1e-3))\n        init1  = np.array([b0,    logA0,   -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2  = np.array([0.0,   np.log(max(y_max,1e-3)), -1.0, -1.0, -0.1, -0.1], dtype=float)\n        bounds = [\n            (0.0,    max(y_max*2,1.0)),  # b \u2265 0\n            (None,   None),              # logA unbounded\n            (-10.0, 10.0),               # e_lr\n            (-10.0, 10.0),               # e_bsz\n            (-10.0, 10.0),               # e_D\n            (-10.0, 10.0),               # e_N\n        ]\n        best_p, best_loss = None, np.inf\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        return best_p if best_p is not None else init1\n\n    # fit each target independently\n    params = [ _fit_one(y2d[:,i]) for i in range(T) ]\n    params = np.vstack(params)\n    return params[0] if params.shape[0]==1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (115.5701), Performs well on nmae (14.2902), Performs well on r2 (-114.5701), Performs well on combined_score (0.0086)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 5.0977)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced log\u2010quadratic scaling law:\n      log(loss) \u2248 \u03b80\n                  + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n                  + \u03b85*log(lr)*log(bsz)\n                  + \u03b86*log(lr)*log(data_size)\n                  + \u03b87*log(lr)*log(non_embed_param_size)\n                  + \u03b88*log(bsz)*log(data_size)\n                  + \u03b89*log(bsz)*log(non_embed_param_size)\n                  + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log(loss))\n    Inputs:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embed_param_size]\n      params:      length\u201011 array of \u03b8 coefficients\n    Returns:\n      (N,) array of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects 11 params, got {theta.size}\")\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    l0, l1, l2, l3 = logs[:, 0], logs[:, 1], logs[:, 2], logs[:, 3]\n    # build log-domain prediction\n    log_pred = np.full_like(l0, theta[0])\n    log_pred += theta[1] * l0 + theta[2] * l1 + theta[3] * l2 + theta[4] * l3\n    log_pred += theta[5] * (l0 * l1)\n    log_pred += theta[6] * (l0 * l2)\n    log_pred += theta[7] * (l0 * l3)\n    log_pred += theta[8] * (l1 * l2)\n    log_pred += theta[9] * (l1 * l3)\n    log_pred += theta[10] * (l2 * l3)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the \u03b8 vector by ridge\u2010regularized least squares in log\u2010space.\n    Solves:\n      y_log = log(loss + eps)\n      \u0398 = argmin ||A \u0398 \u2212 y_log||^2 + \u03bb||\u0398||^2\n    where A has columns:\n      [1,\n       log(lr), log(bsz), log(data_size), log(non_embed_param_size),\n       log(lr)*log(bsz), log(lr)*log(data_size), log(lr)*log(non_embed_param_size),\n       log(bsz)*log(data_size), log(bsz)*log(non_embed_param_size), log(data_size)*log(non_embed_param_size)\n      ]\n    Returns:\n      \u03b8: length\u201011 coefficient array\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)  # (N,4)\n    l0, l1, l2, l3 = logs[:, 0], logs[:, 1], logs[:, 2], logs[:, 3]\n    N = X.shape[0]\n    # design matrix with intercept, 4 raw logs, and 6 pairwise log\u2010interactions\n    A = np.column_stack([\n        np.ones(N),\n        l0, l1, l2, l3,\n        l0 * l1,\n        l0 * l2,\n        l0 * l3,\n        l1 * l2,\n        l1 * l3,\n        l2 * l3\n    ])  # shape (N,11)\n    y_log = np.log(y + eps)\n    # closed\u2010form ridge regression\n    AtA = A.T @ A\n    lam = 1e-6\n    reg = lam * np.eye(AtA.shape[0])\n    theta = np.linalg.solve(AtA + reg, A.T @ y_log)\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 5.0983)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 5.0983, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.179), Excellent nmae (19.389)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param_size^{e_N}\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Stability epsilon\n    eps = 1e-12\n    # Build log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on prediction:\n      loss \u2248 b + exp(logA + \u03a3 e_i * log(x_i))\n    Returns optimized params array [b, logA, e_lr, e_bsz, e_D, e_N].\n    Supports multi\u2010target: if loss_values is (N,T), returns (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D target for uniform processing\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    # Precompute log\u2010features and feature statistics for centering\n    eps = 1e-12\n    logX = np.log(X + eps)            # (N,4)\n    mu = np.mean(logX, axis=0)        # (4,)\n    Z = logX - mu[None,:]             # center logs\n    \n    # Add intercept column for linear solve\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    # Regularized normal equation\n    lam = 1e-6\n    M = A_lin.T @ A_lin + lam * np.eye(5)\n\n    def _fit_single(yvec):\n        # 1) initialize bias b0 as small quantile to ensure positivity\n        y_min, y_max = np.min(yvec), np.max(yvec)\n        b0 = max(0.0, np.percentile(yvec, 5) * 0.5)\n        # 2) solve for log\u2010coeff by regression on log(y - b0)\n        y_shift = np.maximum(yvec - b0, eps)\n        logy = np.log(y_shift)\n        theta = np.linalg.solve(M, A_lin.T @ (logy - np.mean(logy)))  # centered y\n        # recover intercept shift\n        # initial logA = mean(logy) - \u03b8\u00b7mean(Z)\n        logA0 = np.mean(logy) - theta[1:].dot(np.zeros(4))  # since Z is centered, dot=0\n        init = np.array([b0, logA0, theta[1], theta[2], theta[3], theta[4]], dtype=np.float64)\n\n        # Prepare bounds\n        bounds = [\n            (0.0, max(y_max*2.0, 1.0)),  # b \u2265 0\n            (None, None),                # logA unbounded\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_D\n            (-5.0, 5.0),                 # e_N\n        ]\n        # Objective: MSE\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - yvec)**2)\n\n        # Multi\u2010start: use initial and a small jittered variant\n        best_p, best_loss = init, obj(init)\n        for offset in [0.0, 0.1]:\n            trial = init.copy()\n            # jitter exponents modestly\n            trial[2:] += offset * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] + offset*(y_max-y_min)*0.1)\n            trial[1] += offset * 0.1\n            try:\n                res = minimize(obj, trial, method='L-BFGS-B', bounds=bounds,\n                               options={'maxiter':500, 'ftol':1e-12})\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except:\n                pass\n\n        return best_p\n\n    # Fit each target dimension\n    params = []\n    for i in range(T):\n        params.append(_fit_single(y2d[:,i]))\n    params = np.stack(params, axis=0)  # (T,6)\n    return params[0] if params.shape[0]==1 else params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                       + e_D*log(data_size) + e_N*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: ndarray of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected params length 6, got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_term = (logA\n                + e_lr  * np.log(lr  + eps)\n                + e_bsz * np.log(bsz + eps)\n                + e_D   * np.log(D    + eps)\n                + e_N   * np.log(Np   + eps))\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by first performing a ridge\u2010regularized\n    linear regression in log\u2010space (with centering and whitening of covariates)\n    to initialize parameters [b, logA, e_lr, e_bsz, e_D, e_N], then refine via\n    a few L-BFGS-B multi-starts minimizing MSE in original space.\n    Supports single\u2010target (N,) or multi\u2010target (N,T) loss_values.\n    Returns optimized params array of shape (6,) or (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D targets\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, T = X.shape[0], y_mat.shape[1]\n\n    # Precompute log-features, their means and stds for centering & whitening\n    eps = 1e-12\n    logX = np.log(X + eps)             # shape (N,4)\n    mu = np.mean(logX, axis=0)         # (4,)\n    sigma = np.std(logX, axis=0) + eps # (4,)\n    Z = (logX - mu) / sigma            # whitened logs, shape (N,4)\n\n    # Design for linear solve: [1, Z]\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    # Regularize all except the intercept column lightly\n    Reg = lam * np.eye(5)\n    Reg[0,0] = 0.0\n    M = A_lin.T @ A_lin + Reg\n\n    def _fit_single(y_vec):\n        # 1) offset b0: ensure y - b0 > 0\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, np.percentile(y_vec, 5) * 0.5)\n        # 2) linearize target\n        y_shift = np.maximum(y_vec - b0, eps)\n        logy = np.log(y_shift)\n        y_mean = np.mean(logy)\n        y_cent = logy - y_mean\n        # 3) solve ridge on centered target\n        theta_lin = np.linalg.solve(M, A_lin.T @ y_cent)  # (5,)\n        # 4) convert linear coefficients to log-domain intercept and exponents\n        #    log_pred \u2248 mean(logy) + [1, Z]\u00b7theta_lin\n        #    but Z = (logX - mu)/sigma => expand to get exponents on logX\n        # sum_term = \u03a3_i theta_lin[i+1] * (mu[i]/sigma[i])\n        sum_mu = np.dot(theta_lin[1:], mu / sigma)\n        logA0 = y_mean + theta_lin[0] - sum_mu\n        exponents = theta_lin[1:] / sigma  # length-4\n        init_p = np.zeros(6, dtype=np.float64)\n        init_p[0] = b0\n        init_p[1] = logA0\n        init_p[2:] = exponents\n\n        # 5) refine with a few L-BFGS-B multi-starts in original MSE\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b \u2265 0\n            (None, None),                 # logA unbounded\n            (-10.0, 10.0),                # e_lr\n            (-10.0, 10.0),                # e_bsz\n            (-10.0, 10.0),                # e_D\n            (-10.0, 10.0),                # e_N\n        ]\n        def mse_obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n\n        best_p = init_p.copy()\n        best_loss = mse_obj(best_p)\n        # try multi-start jitter\n        for _ in range(3):\n            trial = best_p.copy()\n            trial[2:] += 0.2 * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] * (1.0 + 0.1 * np.random.randn()))\n            trial[1] += 0.1 * np.random.randn()\n            try:\n                res = minimize(\n                    mse_obj, trial,\n                    method='L-BFGS-B',\n                    bounds=bounds,\n                    options={'maxiter': 200, 'ftol': 1e-9}\n                )\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except Exception:\n                pass\n\n        return best_p\n\n    # Fit each target dimension independently\n    params = np.vstack([_fit_single(y_mat[:, i]) for i in range(T)])\n    return params[0] if params.shape[0] == 1 else params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of Improvements:\n- Features are now log\u2010centered and whitened (scaled by their standard deviation) before the initial linear solve, improving numerical conditioning and cross\u2010feature balance.\n- The closed\u2010form ridge regression is adapted to produce an initial estimate of the additive bias (`b`) and the log\u2010scale parameter (`logA`) plus exponents.\n- A lightweight multi\u2010start L-BFGS-B refinement in the original loss space further reduces MSE, ensuring accuracy across diverse hyperparameter regimes.\n- Regularization excludes the intercept term to avoid biasing the overall mean fit, while still stabilizing exponent estimates.\n- The overall parameter count remains six, preserving model parsimony and ease of fitting with limited data."]}}}