{"id": "1fcb614f-4768-4a3b-991c-0f1f29172e42", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  Loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embedding_param_size))\nFitting uses a two\u2010stage approach:\n  1) Linear least\u2010squares in log\u2010space (ignoring c0) for initial slopes.\n  2) Nonlinear L-BFGS-B refinement on all 6 parameters minimizing a\n     blend of MSE in output\u2010space and log\u2010space for balanced accuracy.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1,a2,a3,a4] (slopes for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {p.shape[1]}\")\n    # avoid log(0)\n    eps = 1e-12\n    logX = np.log(np.clip(X, eps, None))    # (N,4)\n    c0 = p[:, 0]                            # (T,)\n    a0 = p[:, 1]                            # (T,)\n    slopes = p[:, 2:]                       # (T,4)\n    # compute log\u2010prediction and final output\n    log_pred = logX.dot(slopes.T) + a0[None, :]  # (N,T)\n    output = c0[None, :] + np.exp(log_pred)      # (N,T)\n    # if single parameter set, return 1D\n    return output.ravel() if params.ndim == 1 else output\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by two\u2010stage optimization:\n      1) Linear least squares in log\u2010space (ignoring c0) to get [a0,a1..a4].\n      2) L-BFGS-B refinement on [c0,a0,a1..a4], minimizing a blend of\n         MSE in y and MSE in log(y) for balanced errors.\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(\"data_points must be shape (N,4)\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatch between data_points and loss_values lengths\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    logX = np.log(Xc)     # (N,4)\n    logy = np.log(y_clipped)\n    # Stage 1: solve linear LS for intercept+slopes (no c0)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    p_ls, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # p_ls = [a0, a1, a2, a3, a4]\n    # initialize c0 as small fraction of min loss\n    c0_init = max(0.0, 0.1 * y_clipped.min())\n    init = np.concatenate([[c0_init], p_ls])  # shape (6,)\n    # Stage 2: nonlinear refinement\n    alpha = 0.5  # blend factor between y-space and log-space MSE\n    def objective(p):\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        # MSE in y-space\n        err_y = pred - y_clipped\n        mse_y = np.mean(err_y * err_y)\n        # MSE in log-space\n        log_pred_clip = np.log(np.clip(pred, eps, None))\n        err_l = log_pred_clip - logy\n        mse_l = np.mean(err_l * err_l)\n        return alpha * mse_y + (1 - alpha) * mse_l\n    # bounds: c0>=0, slopes limited to avoid runaway\n    bounds = [(0.0, None), (None, None)] + [(-10.0, 10.0)] * 4\n    res = minimize(objective, init, method='L-BFGS-B', bounds=bounds,\n                   options={'ftol':1e-9, 'gtol':1e-6, 'maxiter':5000})\n    p_opt = res.x if res.success else init\n    return p_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "dd38f655-0b3c-43f4-82ab-3d9ebd149df0", "generation": 2, "timestamp": 1754802015.756509, "iteration_found": 25, "metrics": {"nmse": 110.64514795797992, "nmae": 13.97934150710263, "r2": -109.64514795797992, "combined_score": 0.008956949928324442}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.9881536359387, "nmae": 14.128417620739429, "r2": -111.9881536359387, "combined_score": 0.008772841458541842}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 33.5315, nmae: 7.6058, r2: -32.5315, combined_score: 0.0290\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1587)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  Loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embed_param_size))\nThis adds an additive floor c0 to improve extrapolation and numerical stability.\nParameters are fitted by minimizing mean squared error via L-BFGS-B.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n                   All entries must be positive.\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (slopes for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]             # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # Multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]               # (T,)\n        a0 = p[:, 1]               # (T,)\n        slopes = p[:, 2:]          # (T,4)\n        # logX.dot(slopes.T): (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE:\n      minimize mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n    Uses L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n    # Prepare logs\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # Objective: mean squared error\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        return np.mean(err * err)\n\n    # Initial guess:\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    # Set intercept so that exp(a0) ~ (y_max-c0_init)\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.concatenate([[c0_init, a0_init], np.zeros(4, dtype=float)])\n\n    # Bounds: c0 >= 0, others free\n    bnds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_mse, init, method='L-BFGS-B', bounds=bnds,\n                   options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':10000})\n    p_opt = res.x if res.success else init\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.5315), Performs well on nmae (7.6058), Performs well on r2 (-32.5315), Performs well on combined_score (0.0290)\n\n\n### Program 2 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n\n### Program 3 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.1587, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  Loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embed_param_size))\nThis adds an additive floor c0 to improve extrapolation and numerical stability.\nParameters are fitted by minimizing mean squared error via L-BFGS-B.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n                   All entries must be positive.\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (slopes for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]             # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # Multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]               # (T,)\n        a0 = p[:, 1]               # (T,)\n        slopes = p[:, 2:]          # (T,4)\n        # logX.dot(slopes.T): (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE:\n      minimize mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n    Uses L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n    # Prepare logs\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # Objective: mean squared error\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        return np.mean(err * err)\n\n    # Initial guess:\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    # Set intercept so that exp(a0) ~ (y_max-c0_init)\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.concatenate([[c0_init, a0_init], np.zeros(4, dtype=float)])\n\n    # Bounds: c0 >= 0, others free\n    bnds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_mse, init, method='L-BFGS-B', bounds=bnds,\n                   options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':10000})\n    p_opt = res.x if res.success else init\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.532), Excellent nmae (7.606)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  Loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embedding_param_size))\nFitting uses a two\u2010stage approach:\n  1) Linear least\u2010squares in log\u2010space (ignoring c0) for initial slopes.\n  2) Nonlinear L-BFGS-B refinement on all 6 parameters minimizing a\n     blend of MSE in output\u2010space and log\u2010space for balanced accuracy.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1,a2,a3,a4] (slopes for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {p.shape[1]}\")\n    # avoid log(0)\n    eps = 1e-12\n    logX = np.log(np.clip(X, eps, None))    # (N,4)\n    c0 = p[:, 0]                            # (T,)\n    a0 = p[:, 1]                            # (T,)\n    slopes = p[:, 2:]                       # (T,4)\n    # compute log\u2010prediction and final output\n    log_pred = logX.dot(slopes.T) + a0[None, :]  # (N,T)\n    output = c0[None, :] + np.exp(log_pred)      # (N,T)\n    # if single parameter set, return 1D\n    return output.ravel() if params.ndim == 1 else output\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by two\u2010stage optimization:\n      1) Linear least squares in log\u2010space (ignoring c0) to get [a0,a1..a4].\n      2) L-BFGS-B refinement on [c0,a0,a1..a4], minimizing a blend of\n         MSE in y and MSE in log(y) for balanced errors.\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(\"data_points must be shape (N,4)\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatch between data_points and loss_values lengths\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n    logX = np.log(Xc)     # (N,4)\n    logy = np.log(y_clipped)\n    # Stage 1: solve linear LS for intercept+slopes (no c0)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    p_ls, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # p_ls = [a0, a1, a2, a3, a4]\n    # initialize c0 as small fraction of min loss\n    c0_init = max(0.0, 0.1 * y_clipped.min())\n    init = np.concatenate([[c0_init], p_ls])  # shape (6,)\n    # Stage 2: nonlinear refinement\n    alpha = 0.5  # blend factor between y-space and log-space MSE\n    def objective(p):\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        # MSE in y-space\n        err_y = pred - y_clipped\n        mse_y = np.mean(err_y * err_y)\n        # MSE in log-space\n        log_pred_clip = np.log(np.clip(pred, eps, None))\n        err_l = log_pred_clip - logy\n        mse_l = np.mean(err_l * err_l)\n        return alpha * mse_y + (1 - alpha) * mse_l\n    # bounds: c0>=0, slopes limited to avoid runaway\n    bounds = [(0.0, None), (None, None)] + [(-10.0, 10.0)] * 4\n    res = minimize(objective, init, method='L-BFGS-B', bounds=bounds,\n                   options={'ftol':1e-9, 'gtol':1e-6, 'maxiter':5000})\n    p_opt = res.x if res.success else init\n    return p_opt\n# EVOLVE-BLOCK-END\n```"]}}}