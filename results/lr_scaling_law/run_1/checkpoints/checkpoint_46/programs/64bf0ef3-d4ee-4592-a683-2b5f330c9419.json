{"id": "64bf0ef3-d4ee-4592-a683-2b5f330c9419", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative\n    power\u2010law model with quadratic log\u2010terms:\n        log(loss) \u2248 intercept\n                   + sum_i [ w_i * log(x_i) + v_i * (log(x_i))^2 ]\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (1 + 4 + 4,) =\n                   [intercept,\n                    w_lr, w_bsz, w_data, w_param,\n                    v_lr, v_bsz, v_data, v_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zeros in log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # compute log\u2010features\n    logX = np.log(X)                          # (N,4)\n    lin  = logX                              # (N,4)\n    quad = logX * logX                       # (N,4)\n\n    # unpack parameters\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 1 + 2 * logX.shape[1]:\n        raise ValueError(f\"Expected {1+2*logX.shape[1]} params, got {p.size}\")\n    intercept = p[0]\n    w = p[1:1+4]\n    v = p[1+4:1+8]\n\n    # compute predicted log\u2010loss\n    log_pred = intercept + lin.dot(w) + quad.dot(v)  # (N,)\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space:\n        log(loss) \u2248 intercept\n                    + sum_i [ w_i * log(x_i) + v_i * (log(x_i))^2 ]\n\n    Returns params of shape (1 + 4 + 4,) =\n      [intercept, w_lr, w_bsz, w_data, w_param,\n                   v_lr, v_bsz, v_data, v_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX  = np.log(X)              # (N,4)\n    lin   = logX                   # (N,4)\n    quad  = logX * logX            # (N,4)\n    N, F = logX.shape              # F should be 4\n\n    # build design matrix Z = [1, lin, quad]\n    ones = np.ones((N, 1), dtype=np.float64)\n    Z = np.hstack([ones, lin, quad])  # (N, 1+2F)\n    P = Z.shape[1]                     # should be 9\n\n    # regularization: no penalty on intercept\n    # smaller penalty on linear terms, larger on quadratic\n    lambda_lin  = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # linear terms indices 1..F\n    reg[1:1+F, 1:1+F] = np.eye(F) * lambda_lin\n    # quadratic terms indices 1+F .. 1+2F-1\n    reg[1+F:1+2*F, 1+F:1+2*F] = np.eye(F) * lambda_quad\n\n    # normal equations\n    A = Z.T.dot(Z) + reg               # (P,P)\n    b = Z.T.dot(np.log(y))             # (P,)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback if singular\n        theta, *_ = np.linalg.lstsq(Z, np.log(y), rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "aed8da5c-9bd2-4608-9f7a-a95115724e24", "generation": 2, "timestamp": 1754717252.1413326, "iteration_found": 48, "metrics": {"nmse": 0.25989245217538565, "nmae": 0.456761833731092, "r2": 0.7401075478246144, "combined_score": 0.7937185418274045}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: Evaluation failed or timed out.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3548, nmae: 0.5064, r2: 0.6452, combined_score: 0.7381\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2599, nmae: 0.4568, r2: 0.7401, combined_score: 0.7937\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5626)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative power\u2010law model:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (1 + 4 + 4,) = [intercept, w1..w4, v1..v4]\n                    or shape (T, 9) for multi\u2010target\n    Returns:\n      preds: array of shape (N,) (or (N,T) if multi\u2010target)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    eps = 1e-12\n    # avoid log(0)\n    X = np.maximum(X, eps)\n    # compute log\u2010features\n    logX = np.log(X)                     # (N,4)\n    lin = logX                          # (N,4)\n    quad = logX * logX                  # (N,4)\n    \n    N, F = logX.shape                   # F == 4\n    # assemble design matrix Z = [1, lin, quad]\n    Z = np.concatenate([np.ones((N,1), dtype=np.float64), lin, quad], axis=1)  # (N,9)\n    \n    theta = np.asarray(params, dtype=np.float64)\n    # support multi\u2010target: ensure shape (T,P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    T, P = theta.shape\n    if P != 1 + 2*F:\n        raise ValueError(f\"Expected parameter length {1+2*F}, got {P}\")\n    \n    # predictive log\u2010loss, then exponentiate\n    pred_log = Z.dot(theta.T)           # (N,T)\n    pred = np.exp(pred_log)             # (N,T)\n    \n    # flatten if single\u2010target\n    return pred.ravel() if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space with quadratic terms:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n    \n    Returns params of shape (1 + 4 + 4,) = [intercept, w1..w4, v1..v4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    \n    logX = np.log(X)                    # (N,4)\n    logy = np.log(y)                    # (N,)\n    N, F = logX.shape                   # F == 4\n    \n    # design matrix Z = [1, logX, logX^2]\n    lin = logX\n    quad = logX * logX\n    Z = np.concatenate([np.ones((N,1), dtype=np.float64), lin, quad], axis=1)  # (N,1+2F)\n    P = Z.shape[1]\n    \n    # set up ridge regularization: no penalty on intercept,\n    # small \u03bb on linear terms, slightly larger on quadratic\n    lambda_lin = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # indices 1..F  \u2190 \u03bb_lin\n    for i in range(1, 1+F):\n        reg[i, i] = lambda_lin\n    # indices (1+F)..(1+2F-1)  \u2190 \u03bb_quad\n    for i in range(1+F, P):\n        reg[i, i] = lambda_quad\n    \n    # normal equations: (Z^T Z + reg) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg\n    b = Z.T.dot(logy)\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback if singular\n        theta, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n    \n    return theta\n```\nKey features: Performs well on nmse (0.2599), Performs well on nmae (0.4568), Performs well on r2 (0.7401), Performs well on combined_score (0.7937)\n\n\n### Program 2 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3548), Performs well on nmae (0.5064), Performs well on r2 (0.6452), Performs well on combined_score (0.7381)\n\n\n### Program 3 (Score: 0.5565)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a multiplicative\n    power\u2010law model in log\u2010space:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:      (F+1,) array [intercept, w_1, ..., w_F]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow passing a single 1D point\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != F + 1:\n        raise ValueError(f\"Expected params length {F+1}, got {p.size}\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)\n\n    intercept = p[0]\n    weights   = p[1:]\n\n    log_pred = intercept + logX.dot(weights)   # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit intercept + exponents by linear regression in log\u2010space:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Returns:\n      params: (F+1,) array [intercept, w_1, ..., w_F]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # allow passing a single 1D point\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)        # (N, F)\n    logy = np.log(y)        # (N,)\n\n    # Design matrix in log\u2010space with intercept\n    Z = np.hstack([np.ones((N, 1)), logX])   # (N, F+1)\n\n    # Tiny ridge for numerical stability\n    lambda_reg = 1e-6\n    sqrt_lam = np.sqrt(lambda_reg)\n\n    # Augment Z,y for ridge: [Z; sqrt\u03bb I], [logy; 0]\n    Z_aug = np.vstack([Z, sqrt_lam * np.eye(F + 1)])\n    y_aug = np.concatenate([logy, np.zeros(F + 1)])\n\n    # Solve least\u2010squares in one go\n    params, *_ = np.linalg.lstsq(Z_aug, y_aug, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5565)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power\u2010law model in log\u2010space:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                         # (N,4)\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != logX.shape[1] + 1:\n        raise ValueError(f\"Expected {logX.shape[1]+1} params, got {p.size}\")\n\n    intercept = p[0]                         # scalar\n    weights   = p[1:]                        # (4,)\n\n    # Compute log\u2010predictions and map back\n    log_pred = intercept + logX.dot(weights) # (N,)\n    return np.exp(log_pred)                  # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model via linear regression in log\u2010log space with feature\u2010centering\n    and a small ridge regularization:\n\n      log(loss) \u2248 intercept + w_lr*log(lr) + w_bsz*log(bsz)\n                         + w_data*log(data_size) + w_param*log(param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Avoid zeros before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Log\u2010transform\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n\n    # Center features and target\n    mu_X = logX.mean(axis=0)  # (4,)\n    mu_y = logy.mean()        # scalar\n    Xc   = logX - mu_X        # (N,4)\n    yc   = logy - mu_y        # (N,)\n\n    # Ridge\u2010regularized normal equations (no penalty on intercept)\n    lambda_reg = 1e-6\n    F = Xc.shape[1]\n    A = Xc.T.dot(Xc) + lambda_reg * np.eye(F, dtype=np.float64)  # (4,4)\n    b = Xc.T.dot(yc)                                            # (4,)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)  # (4,)\n\n    # Recover intercept\n    intercept = mu_y - mu_X.dot(w)\n\n    return np.concatenate(([intercept], w))\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5565)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRevised model: A log\u2010linear (multiplicative power\u2010law) form fitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # Ensure array shape and type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute in log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    # Unpack parameters\n    intercept = float(params[0])                                  # scalar\n    weights = np.asarray(params[1:], dtype=np.float64)           # (4,)\n    # Linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # Map back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model by solving\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    via ridge\u2010regularized normal equations for numerical stability.\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # Avoid zeros in logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # Transform to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # Design matrix with intercept term\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    D = F + 1                                                    # 5\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # Solve (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                    # (5,5)\n    b = design.T.dot(logy)                                       # (5,)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # Fallback to least squares if matrix is singular\n        params, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5626, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative power\u2010law model:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (1 + 4 + 4,) = [intercept, w1..w4, v1..v4]\n                    or shape (T, 9) for multi\u2010target\n    Returns:\n      preds: array of shape (N,) (or (N,T) if multi\u2010target)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    eps = 1e-12\n    # avoid log(0)\n    X = np.maximum(X, eps)\n    # compute log\u2010features\n    logX = np.log(X)                     # (N,4)\n    lin = logX                          # (N,4)\n    quad = logX * logX                  # (N,4)\n    \n    N, F = logX.shape                   # F == 4\n    # assemble design matrix Z = [1, lin, quad]\n    Z = np.concatenate([np.ones((N,1), dtype=np.float64), lin, quad], axis=1)  # (N,9)\n    \n    theta = np.asarray(params, dtype=np.float64)\n    # support multi\u2010target: ensure shape (T,P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    T, P = theta.shape\n    if P != 1 + 2*F:\n        raise ValueError(f\"Expected parameter length {1+2*F}, got {P}\")\n    \n    # predictive log\u2010loss, then exponentiate\n    pred_log = Z.dot(theta.T)           # (N,T)\n    pred = np.exp(pred_log)             # (N,T)\n    \n    # flatten if single\u2010target\n    return pred.ravel() if T == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space with quadratic terms:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i) + \u03a3_i v_i * (log(x_i))^2\n    \n    Returns params of shape (1 + 4 + 4,) = [intercept, w1..w4, v1..v4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    \n    logX = np.log(X)                    # (N,4)\n    logy = np.log(y)                    # (N,)\n    N, F = logX.shape                   # F == 4\n    \n    # design matrix Z = [1, logX, logX^2]\n    lin = logX\n    quad = logX * logX\n    Z = np.concatenate([np.ones((N,1), dtype=np.float64), lin, quad], axis=1)  # (N,1+2F)\n    P = Z.shape[1]\n    \n    # set up ridge regularization: no penalty on intercept,\n    # small \u03bb on linear terms, slightly larger on quadratic\n    lambda_lin = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # indices 1..F  \u2190 \u03bb_lin\n    for i in range(1, 1+F):\n        reg[i, i] = lambda_lin\n    # indices (1+F)..(1+2F-1)  \u2190 \u03bb_quad\n    for i in range(1+F, P):\n        reg[i, i] = lambda_quad\n    \n    # normal equations: (Z^T Z + reg) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg\n    b = Z.T.dot(logy)\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback if singular\n        theta, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n    \n    return theta\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power\u2010law model in log\u2010space:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                         # (N,4)\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != logX.shape[1] + 1:\n        raise ValueError(f\"Expected {logX.shape[1]+1} params, got {p.size}\")\n\n    intercept = p[0]                         # scalar\n    weights   = p[1:]                        # (4,)\n\n    # Compute log\u2010predictions and map back\n    log_pred = intercept + logX.dot(weights) # (N,)\n    return np.exp(log_pred)                  # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model via linear regression in log\u2010log space with feature\u2010centering\n    and a small ridge regularization:\n\n      log(loss) \u2248 intercept + w_lr*log(lr) + w_bsz*log(bsz)\n                         + w_data*log(data_size) + w_param*log(param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Avoid zeros before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Log\u2010transform\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n\n    # Center features and target\n    mu_X = logX.mean(axis=0)  # (4,)\n    mu_y = logy.mean()        # scalar\n    Xc   = logX - mu_X        # (N,4)\n    yc   = logy - mu_y        # (N,)\n\n    # Ridge\u2010regularized normal equations (no penalty on intercept)\n    lambda_reg = 1e-6\n    F = Xc.shape[1]\n    A = Xc.T.dot(Xc) + lambda_reg * np.eye(F, dtype=np.float64)  # (4,4)\n    b = Xc.T.dot(yc)                                            # (4,)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)  # (4,)\n\n    # Recover intercept\n    intercept = mu_y - mu_X.dot(w)\n\n    return np.concatenate(([intercept], w))\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a centered, ridge\u2010regularized power\u2010law model:\n        log(loss) = intercept + \u03a3_i w_i * log(x_i)\n    Returns loss = exp(log(loss)).\n\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embedding_param_size]\n      params:       array (5,) or (T,5) as [intercept, w_lr, w_bsz, w_data, w_param]\n    Output:\n      preds: array (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                          # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]                  # shape (1,5)\n    T, P = p.shape\n    if P != logX.shape[1] + 1:\n        raise ValueError(f\"Expected params with {logX.shape[1]+1} cols, got {P}\")\n\n    intercept = p[:, 0]                       # shape (T,)\n    weights   = p[:, 1:]                      # shape (T,4)\n\n    # Compute log\u2010predictions: shape (T,N) then transpose to (N,T)\n    # log_pred[t, n] = intercept[t] + weights[t] \u00b7 logX[n]\n    log_pred = weights.dot(logX.T) + intercept[:, np.newaxis]  # (T,N)\n    loss_pred = np.exp(log_pred).T                              # (N,T)\n\n    # Collapse last dim if single param set\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law via linear regression in log\u2010log space with\n    feature-centering and ridge regularization:\n\n      log(loss) = intercept + w_lr*log(lr) + w_bsz*log(bsz)\n                  + w_data*log(data_size) + w_param*log(param_size)\n\n    Steps:\n      1. Clip inputs to eps > 0, take logs.\n      2. Center features and target by subtracting column means.\n      3. Solve (Xc^T Xc + \u03bbI) w = Xc^T yc for weights.\n      4. Compute intercept = mean(logy) - mean(logX)\u00b7w.\n\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params: array (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Log-transform\n    logX = np.log(X)      # (N,4)\n    logy = np.log(y)      # (N,)\n\n    # Center features and target\n    mu_X = logX.mean(axis=0)      # (4,)\n    mu_y = logy.mean()            # scalar\n    Xc = logX - mu_X[np.newaxis, :]\n    yc = logy - mu_y\n\n    # Ridge regularization (do not regularize intercept)\n    F = Xc.shape[1]\n    lambda_reg = 1e-6\n    A = Xc.T.dot(Xc) + lambda_reg * np.eye(F, dtype=np.float64)  # (4,4)\n    b = Xc.T.dot(yc)                                            # (4,)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)      # (4,)\n\n    # Recover intercept\n    intercept = mu_y - np.dot(mu_X, w)\n\n    # Return full params\n    return np.concatenate(([intercept], w))\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5565, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRevised model: A log\u2010linear (multiplicative power\u2010law) form fitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # Ensure array shape and type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute in log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    # Unpack parameters\n    intercept = float(params[0])                                  # scalar\n    weights = np.asarray(params[1:], dtype=np.float64)           # (4,)\n    # Linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # Map back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model by solving\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    via ridge\u2010regularized normal equations for numerical stability.\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # Avoid zeros in logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # Transform to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # Design matrix with intercept term\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    D = F + 1                                                    # 5\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # Solve (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                    # (5,5)\n    b = design.T.dot(logy)                                       # (5,)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # Fallback to least squares if matrix is singular\n        params, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5611, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative\n    power\u2010law model with quadratic log\u2010terms:\n        log(loss) \u2248 intercept\n                   + sum_i [ w_i * log(x_i) + v_i * (log(x_i))^2 ]\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (1 + 4 + 4,) =\n                   [intercept,\n                    w_lr, w_bsz, w_data, w_param,\n                    v_lr, v_bsz, v_data, v_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zeros in log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # compute log\u2010features\n    logX = np.log(X)                          # (N,4)\n    lin  = logX                              # (N,4)\n    quad = logX * logX                       # (N,4)\n\n    # unpack parameters\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 1 + 2 * logX.shape[1]:\n        raise ValueError(f\"Expected {1+2*logX.shape[1]} params, got {p.size}\")\n    intercept = p[0]\n    w = p[1:1+4]\n    v = p[1+4:1+8]\n\n    # compute predicted log\u2010loss\n    log_pred = intercept + lin.dot(w) + quad.dot(v)  # (N,)\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space:\n        log(loss) \u2248 intercept\n                    + sum_i [ w_i * log(x_i) + v_i * (log(x_i))^2 ]\n\n    Returns params of shape (1 + 4 + 4,) =\n      [intercept, w_lr, w_bsz, w_data, w_param,\n                   v_lr, v_bsz, v_data, v_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX  = np.log(X)              # (N,4)\n    lin   = logX                   # (N,4)\n    quad  = logX * logX            # (N,4)\n    N, F = logX.shape              # F should be 4\n\n    # build design matrix Z = [1, lin, quad]\n    ones = np.ones((N, 1), dtype=np.float64)\n    Z = np.hstack([ones, lin, quad])  # (N, 1+2F)\n    P = Z.shape[1]                     # should be 9\n\n    # regularization: no penalty on intercept\n    # smaller penalty on linear terms, larger on quadratic\n    lambda_lin  = 1e-6\n    lambda_quad = 1e-4\n    reg = np.zeros((P, P), dtype=np.float64)\n    # linear terms indices 1..F\n    reg[1:1+F, 1:1+F] = np.eye(F) * lambda_lin\n    # quadratic terms indices 1+F .. 1+2F-1\n    reg[1+F:1+2*F, 1+F:1+2*F] = np.eye(F) * lambda_quad\n\n    # normal equations\n    A = Z.T.dot(Z) + reg               # (P,P)\n    b = Z.T.dot(np.log(y))             # (P,)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback if singular\n        theta, *_ = np.linalg.lstsq(Z, np.log(y), rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END\n```"]}}}