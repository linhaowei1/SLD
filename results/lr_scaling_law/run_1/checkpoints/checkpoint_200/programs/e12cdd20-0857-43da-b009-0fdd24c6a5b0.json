{"id": "e12cdd20-0857-43da-b009-0fdd24c6a5b0", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-space bounds for normalization (from problem description)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization to ~[-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree Chebyshev-basis polynomial design matrix\n    on normalized log-features.\n    Let z_i = (log(x_i) - _LOG_MEAN_i) / _LOG_SCALE_i clipped to [-3,3],\n        T2(z_i) = 2*z_i^2 - 1.\n    Features per sample (N\u00d715):\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix expects shape (N,4), got {X.shape}\")\n\n    # safe log, then normalize and clip\n    logs = np.log(X + _eps)                        # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE        # roughly in [-1,1]\n    z    = np.clip(z, -3.0, 3.0)                  # guard against outliers\n\n    N, F = z.shape  # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear Chebyshev basis is just z (T1)\n    cols.append(z)\n    # quadratic Chebyshev T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to (N,15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss using a 15-parameter Chebyshev-basis model\n    in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-basis scaling law by ridge-regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of positive LM losses\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # build design matrix and log-target\n    A     = _build_design_matrix(X)    # (N,15)\n    y_log = np.log(y + _eps)           # (N,)\n\n    # normal equations\n    ATA = A.T.dot(A)                   # (15,15)\n    ATy = A.T.dot(y_log)               # (15,)\n\n    P = ATA.shape[0]  # 15\n    # adaptive regularization strength\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # if ill-conditioned, boost \u03bb up to 3\u00d710\u00d7\n    cond_thresh = 1e8\n    for _ in range(3):\n        if np.linalg.cond(ATA_reg) <= cond_thresh:\n            break\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "8f987544-9968-45c8-90f8-7cbabcb2acc2", "generation": 3, "timestamp": 1754805555.3015044, "iteration_found": 200, "metrics": {"nmse": 8.886807499277765, "nmae": 3.4926028421069337, "r2": -7.886807499277765, "combined_score": 0.10114488423821849}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.056121635175172, "nmae": 3.1365850349902997, "r2": -7.056121635175172, "combined_score": 0.11042254513409669}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.0561\n- nmae: 3.1366\n- r2: -7.0561\n- combined_score: 0.1104\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2376, nmae: 3.1863, r2: -7.2376, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2375, nmae: 3.1862, r2: -7.2375, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.0561, nmae: 3.1366, r2: -7.0561, combined_score: 0.1104\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0618)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010space bounds for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature to scale normalized log\u2010features into ~[-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable 2nd\u2010degree Chebyshev\u2010basis design matrix on normalized log\u2010features:\n      Let z_i = (log(x_i) - _LOG_MEAN_i) / _LOG_SCALE_i,\n          T2(z_i) = 2 * z_i^2 - 1\n      Features per sample:\n        [1,\n         z1, z2, z3, z4,\n         T2(z1), T2(z2), T2(z3), T2(z4),\n         z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns: A (N\u00d715) design matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix expects shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    # Safe log and normalization\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalized logs in ~[-1,1]\n    N, F = z.shape                            \n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear Chebyshev features (T1 = z)\n    cols.append(z)\n    # Quadratic Chebyshev features T2(z) = 2 z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into a single design matrix (N\u00d715)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter Chebyshev\u2010polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed LM losses (>0)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)  # (N,15)\n    eps  = 1e-12\n    y_log = np.log(y + eps)         # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)                # (15,15)\n    ATy = A.T.dot(y_log)            # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam_base = 1e-3\n    lam = lam_base * np.trace(ATA) / P\n    # Build regularization matrix (no penalty on intercept)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA_reg = ATA + reg\n\n    # Guard against ill\u2010conditioning by boosting \u03bb if needed\n    cond_threshold = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_threshold:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_threshold:\n                break\n\n    # Solve for parameters\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.0561), Performs well on nmae (3.1366), Performs well on r2 (-7.0561), Performs well on combined_score (0.1104)\n\n\n### Program 2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Static log\u2010space normalization constants (from problem description)\n_LOG_MIN   = np.log(np.array([1.2e-4,   # lr\n                              16.0,     # batch size\n                              4e9,      # data size (tokens)\n                              2.14e8    # non\u2010embedding parameter size\n                             ], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2,   # lr\n                              4096.0,   # batch size\n                              1e11,     # data size (tokens)\n                              1e9       # non\u2010embedding parameter size\n                             ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010space:\n      z = (log(x) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    Output shape: (N, 15)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {X.shape[1]}\")\n    # safe log and normalize\n    logs = np.log(X + _eps)                     # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE       # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z * z)\n    # Pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append((z[:, i] * z[:, j])[:, None])\n\n    return np.hstack(cols)  # (N, 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 2nd\u2010degree polynomial in normalized log\u2010space.\n    Inputs:\n      data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embed_params]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: (N,) predicted lm loss\n    \"\"\"\n    A = _build_design_matrix(data_points)       # (N,15)\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)                     # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter scaling law by ridge\u2010regularized least squares\n    on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed lm losses (>0)\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    A = _build_design_matrix(data_points)       # (N,15)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if A.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # log\u2010transform target\n    y_log = np.log(y + _eps)\n\n    # ridge regularization (no penalty on intercept)\n    P   = A.shape[1]\n    lam = 1e-3                                  # increased regularization for stability\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA  = A.T.dot(A) + reg\n    ATy  = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2375), Performs well on nmae (3.1862), Performs well on r2 (-7.2375), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on problem description\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 100e9, 1e9    ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Given X of shape (N,4), build a 2nd-degree polynomial design matrix in\n    the normalized log-features z = (log(X) - _LOG_MEAN)/_LOG_SCALE.\n    Columns = [1,\n               z1, z2, z3, z4,\n               z1^2, z2^2, z3^2, z4^2,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Resulting matrix shape: (N,15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE       # normalize to roughly [-1,1]\n    N, F = z.shape\n\n    feats = [np.ones(N, dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        feats.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        feats.append(z[:, i] * z[:, i])\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i + 1, F):\n            feats.append(z[:, i] * z[:, j])\n\n    return np.stack(feats, axis=1)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 2nd-degree polynomial in normalized\n    log-features:\n      log_loss = A(X) \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) columns [lr, bsz, data_size, non_embed_params]\n      params:      array-like of length 15 (\u03b80\u2026\u03b814)\n\n    Output:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func expects 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-4):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law via ridge-regularized\n    least squares on log-transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) with positive losses\n      ridge_lambda: regularization strength (default 1e-4)\n\n    Output:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)\n\n    P = A.shape[1]                   # 15 parameters\n    # Ridge regularization (no penalty on intercept \u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2376), Performs well on nmae (3.1863), Performs well on r2 (-7.2376), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for normalization to roughly [-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree Chebyshev\u2010basis polynomial design matrix on\n    normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Features per sample (N\u00d715):\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2 z^2 \u2212 1.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                       # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE           # normalize to ~[-1,1]\n    N, F = z.shape                                # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear Chebyshev terms = z\n    cols.append(z)\n    # quadratic Chebyshev terms = T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like (15,) Chebyshev coefficients\n\n    Returns:\n      preds: ndarray (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)      # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"Expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)          # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter Chebyshev\u2010polynomial scaling law by\n    ordinary least squares in log\u2010loss space. Falls back to\n    ridge regularization only if the normal equations are ill\u2010conditioned.\n\n      \u03b8 = argmin ||A \u03b8 \u2212 log(y)||^2\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: ndarray (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)      # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # (N,)\n\n    # Solve ordinary least squares via SVD (np.linalg.lstsq)\n    # This yields the minimum\u2010norm solution without bias from regularization.\n    try:\n        theta_opt, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    except Exception:\n        # Fallback to pseudoinverse if something goes wrong\n        theta_opt = np.linalg.pinv(A).dot(y_log)\n\n    # Check conditioning; if extremely ill\u2010conditioned, add tiny ridge\n    # to stabilize for future predictions.\n    ATA = A.T.dot(A)\n    cond = np.linalg.cond(ATA)\n    if cond > 1e12:\n        P = ATA.shape[0]\n        lam = 1e-8 * np.trace(ATA) / P\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        ATy = A.T.dot(y_log)\n        try:\n            theta_opt = np.linalg.solve(ATA_reg, ATy)\n        except np.linalg.LinAlgError:\n            theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0736)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Middle and half\u2010range for each log\u2010feature (for normalization)\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z = (log(x) - _LOG_MID) / _LOG_HALF_RANGE\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15:\n        [\u03b80,\n         \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n         \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n         \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n         \u03b83_bsz_data, \u03b83_bsz_param,\n         \u03b83_data_param]\n    Returns:\n      preds: (N,) predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {F}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if theta.size != expected_len:\n        raise ValueError(f\"scaling_law_func expects {expected_len} params, got {theta.size}\")\n\n    # Safe log\u2010transform and z\u2010score normalization in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)              # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # normalized logs\n\n    # Build design matrix A of shape (N,15)\n    #  - intercept\n    #  - linear terms z_i\n    #  - quadratic terms z_i^2\n    #  - cross terms z_i * z_j for i<j\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z * z]  # (N, 1 + 4 + 4)\n    # pairwise interactions\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        cols.append(np.hstack(cross_cols))\n    A = np.hstack(cols)  # shape (N,15)\n\n    # Compute log\u2010loss and exponentiate\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law via\n    ridge\u2010regularized least squares on log(loss):\n\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb * ||\u03b8_{1:}||^2\n\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed lm losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {F}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Build the same design matrix A as in scaling_law_func\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z * z]\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        cols.append(np.hstack(cross_cols))\n    A = np.hstack(cols)  # (N,15)\n\n    # Target is log\u2010loss\n    y_log = np.log(y + eps)\n\n    # Ridge regularization: \u03bb > 0 for \u03b81:, but no penalty on \u03b80\n    P = A.shape[1]\n    ridge_lambda = 1e-5\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n\n    return theta_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 5.0983, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.179), Excellent nmae (19.389)\n\n\n### Inspiration 2 (Score: 3.6361, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a simple 5-parameter power-law in the raw logs of the inputs:\n      log_loss = \u03b80\n               + \u03b81 * log(lr)\n               + \u03b82 * log(bsz)\n               + \u03b83 * log(data_size)\n               + \u03b84 * log(non_embedding_param_size)\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    # check shape\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {theta.size}\")\n\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(non_emb_param)]\n    N = X.shape[0]\n    A = np.empty((N, 5), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1:] = logs\n\n    # linear model in log\u2010space\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law scaling law by ridge-regularized least squares\n    on the log of the loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on \u03b80).\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (5,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)  # (N,4)\n\n    N = X.shape[0]\n    # A = [1, log(lr), log(bsz), log(data_size), log(non_emb_param)]\n    A = np.empty((N, 5), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1:] = logs\n\n    # target\n    y_log = np.log(y + eps)  # (N,)\n\n    # normal equations with ridge penalty on \u03b81: (excluding intercept)\n    ATA = A.T.dot(A)          # (5,5)\n    ATy = A.T.dot(y_log)      # (5,)\n\n    P = ATA.shape[0]          # =5\n    # adaptive regularization strength\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = np.eye(P, dtype=np.float64) * lam\n    reg[0, 0] = 0.0  # no penalty on \u03b80\n\n    # solve (A^T A + reg) \u03b8 = A^T y_log\n    try:\n        theta_opt = np.linalg.solve(ATA + reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA + reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (103.848), Excellent nmae (13.535)\n\n\n### Inspiration 3 (Score: 1.0736, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Middle and half\u2010range for each log\u2010feature (for normalization)\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z = (log(x) - _LOG_MID) / _LOG_HALF_RANGE\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15:\n        [\u03b80,\n         \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n         \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n         \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n         \u03b83_bsz_data, \u03b83_bsz_param,\n         \u03b83_data_param]\n    Returns:\n      preds: (N,) predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {F}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if theta.size != expected_len:\n        raise ValueError(f\"scaling_law_func expects {expected_len} params, got {theta.size}\")\n\n    # Safe log\u2010transform and z\u2010score normalization in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)              # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # normalized logs\n\n    # Build design matrix A of shape (N,15)\n    #  - intercept\n    #  - linear terms z_i\n    #  - quadratic terms z_i^2\n    #  - cross terms z_i * z_j for i<j\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z * z]  # (N, 1 + 4 + 4)\n    # pairwise interactions\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        cols.append(np.hstack(cross_cols))\n    A = np.hstack(cols)  # shape (N,15)\n\n    # Compute log\u2010loss and exponentiate\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law via\n    ridge\u2010regularized least squares on log(loss):\n\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb * ||\u03b8_{1:}||^2\n\n    (No penalty on intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed lm losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {F}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Build the same design matrix A as in scaling_law_func\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE\n\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z * z]\n    cross_cols = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross_cols.append((z[:, i] * z[:, j])[:, None])\n    if cross_cols:\n        cols.append(np.hstack(cross_cols))\n    A = np.hstack(cols)  # (N,15)\n\n    # Target is log\u2010loss\n    y_log = np.log(y + eps)\n\n    # Ridge regularization: \u03bb > 0 for \u03b81:, but no penalty on \u03b80\n    P = A.shape[1]\n    ridge_lambda = 1e-5\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(ATA, ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.238), Excellent nmae (3.186)\n\n\n### Inspiration 4 (Score: 1.1501, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-ranges for normalization based on the problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # learning rate min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # learning rate max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embedding param size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Columns: [1,\n              z1, z2, z3, z4,\n              z1^2, z2^2, z3^2, z4^2,\n              z1*z2, z1*z3, z1*z4,\n              z2*z3, z2*z4, z3*z4]\n    Returns: A (N,15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    logs = np.log(X + 1e-12)\n    # normalize into roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE\n    # clip extreme values for stability\n    z = np.clip(z, -3.0, 3.0)\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A\u00b7\u03b8,    loss = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)       # (N,15)\n    log_pred = A.dot(theta)           # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares\n    in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,  no penalty on intercept\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # design matrix and target\n    A = _build_design_matrix(X)       # (N,15)\n    y_log = np.log(y + 1e-12)         # (N,)\n\n    # normal equations with adaptive ridge\n    ATA = A.T.dot(A)                  # (15,15)\n    P   = ATA.shape[0]                # 15\n    # scale \u03bb by average diagonal magnitude for robustness\n    lam = 1e-6 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                   # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # solve with fallback for singular cases\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.924), Excellent nmae (3.499)\n\n\n### Inspiration 5 (Score: 4.4034, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010space bounds for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 9\u2010dimensional design matrix in normalized log\u2010features:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    We include:\n      1,\n      z1 (learning\u2010rate term),\n      z1^2 (to capture U\u2010shape in lr),\n      z2 (batch\u2010size),\n      z3 (data\u2010size),\n      z4 (model\u2010size),\n      z1*z3, z1*z4, z3*z4    (key pairwise interactions)\n    Returns: ndarray A of shape (N,9).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected input shape (N,4), got {X.shape}\")\n\n    # safe log\u2010transform\n    logs = np.log(X + _eps)                    # shape (N,4)\n    # z\u2010score normalization ~[-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE        # shape (N,4)\n    z1, z2, z3, z4 = z[:, 0], z[:, 1], z[:, 2], z[:, 3]\n    N = X.shape[0]\n\n    # Construct columns\n    A = np.column_stack([\n        np.ones(N, dtype=np.float64),  # intercept\n        z1,                             # lr\n        z1 * z1,                        # lr^2\n        z2,                             # batch size\n        z3,                             # data size\n        z4,                             # model size\n        z1 * z3,                        # lr * data\n        z1 * z4,                        # lr * model\n        z3 * z4                         # data * model\n    ])\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 9\u2010parameter log\u2013polynomial scaling law:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 9\n\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(data_points)  # shape (N,9)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)                # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2013polynomial scaling law by ridge\u2010regularized\n    least squares on log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2211_{i>0} \u03b8_i^2,\n    with adaptive \u03bb = 1e-4 * trace(A\u1d40A) / P and no penalty on intercept \u03b80.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      loss_values: array\u2010like of shape (N,) of observed LM losses (>0)\n\n    Returns:\n      theta_opt: ndarray of shape (9,) of fitted parameters\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # shape (N,9)\n    y_log = np.log(y + _eps)               # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (9,9)\n    ATy = A.T.dot(y_log)                   # (9,)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P         # adaptive regularization strength\n\n    # Build regularization (no penalty on intercept)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    count = 0\n    while np.linalg.cond(ATA_reg) > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n        count += 1\n\n    # Solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (154.708), Excellent nmae (16.607)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010space bounds for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature to scale normalized log\u2010features into ~[-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable 2nd\u2010degree Chebyshev\u2010basis design matrix on normalized log\u2010features:\n      Let z_i = (log(x_i) - _LOG_MEAN_i) / _LOG_SCALE_i,\n          T2(z_i) = 2 * z_i^2 - 1\n      Features per sample:\n        [1,\n         z1, z2, z3, z4,\n         T2(z1), T2(z2), T2(z3), T2(z4),\n         z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns: A (N\u00d715) design matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix expects shape (N,4), got {X.shape}\")\n\n    eps = 1e-12\n    # Safe log and normalization\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalized logs in ~[-1,1]\n    N, F = z.shape                            \n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear Chebyshev features (T1 = z)\n    cols.append(z)\n    # Quadratic Chebyshev features T2(z) = 2 z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into a single design matrix (N\u00d715)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter Chebyshev\u2010polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed LM losses (>0)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)  # (N,15)\n    eps  = 1e-12\n    y_log = np.log(y + eps)         # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)                # (15,15)\n    ATy = A.T.dot(y_log)            # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam_base = 1e-3\n    lam = lam_base * np.trace(ATA) / P\n    # Build regularization matrix (no penalty on intercept)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA_reg = ATA + reg\n\n    # Guard against ill\u2010conditioning by boosting \u03bb if needed\n    cond_threshold = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_threshold:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_threshold:\n                break\n\n    # Solve for parameters\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-space bounds for normalization (from problem description)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization to ~[-1,1]\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree Chebyshev-basis polynomial design matrix\n    on normalized log-features.\n    Let z_i = (log(x_i) - _LOG_MEAN_i) / _LOG_SCALE_i clipped to [-3,3],\n        T2(z_i) = 2*z_i^2 - 1.\n    Features per sample (N\u00d715):\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix expects shape (N,4), got {X.shape}\")\n\n    # safe log, then normalize and clip\n    logs = np.log(X + _eps)                        # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE        # roughly in [-1,1]\n    z    = np.clip(z, -3.0, 3.0)                  # guard against outliers\n\n    N, F = z.shape  # F == 4\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear Chebyshev basis is just z (T1)\n    cols.append(z)\n    # quadratic Chebyshev T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n\n    # pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate to (N,15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss using a 15-parameter Chebyshev-basis model\n    in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-basis scaling law by ridge-regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of positive LM losses\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # build design matrix and log-target\n    A     = _build_design_matrix(X)    # (N,15)\n    y_log = np.log(y + _eps)           # (N,)\n\n    # normal equations\n    ATA = A.T.dot(A)                   # (15,15)\n    ATy = A.T.dot(y_log)               # (15,)\n\n    P = ATA.shape[0]  # 15\n    # adaptive regularization strength\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # if ill-conditioned, boost \u03bb up to 3\u00d710\u00d7\n    cond_thresh = 1e8\n    for _ in range(3):\n        if np.linalg.cond(ATA_reg) <= cond_thresh:\n            break\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0\n        ATA_reg = ATA + reg\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```"]}}}