{"id": "2ea63cc3-894b-4738-8ed9-49040fe4fb5a", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative\n    power\u2010law model in log\u2010space with:\n      - linear and quadratic terms in log(lr) to capture unimodal effects\n      - power\u2010law terms in log(batch size), log(data size), log(model size)\n      - two cross\u2010interaction terms for lr\u00d7bsz and data\u00d7model\n\n    log(loss) \u2248 intercept\n               + w1 * log(lr)\n               + w2 * (log(lr))^2\n               + w3 * log(bsz)\n               + w4 * log(data_size)\n               + w5 * log(non_embedding_param_size)\n               + w6 * [log(lr) * log(bsz)]\n               + w7 * [log(data_size) * log(non_embedding_param_size)]\n\n    params is a length\u20108 vector: \n      [intercept, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Numerical safeguard against zeros or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # Compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Nonlinear and interaction terms\n    lr_sq          = log_lr * log_lr\n    inter_lr_bsz   = log_lr * log_bsz\n    inter_data_pm  = log_data * log_param\n\n    # Build design matrix: [1, log_lr, log_lr^2, log_bsz, log_data, log_param, lr*bsz, data*param]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        lr_sq,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T  # shape (N,8)\n\n    log_pred = phi.dot(np.asarray(params, dtype=np.float64))\n    # Exponentiate back to loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space. Solves:\n      log(loss) \u2248 \u03c6 \u00b7 params\n    for params = [intercept, w1, ..., w7].\n\n    Uses normal equations with small Tikhonov regularization (\u03bb) on all\n    weights except the intercept.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Unpack and log-transform\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Nonlinear and interaction terms\n    lr_sq          = log_lr * log_lr\n    inter_lr_bsz   = log_lr * log_bsz\n    inter_data_pm  = log_data * log_param\n\n    # Build design matrix \u03c6: (N,8)\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        lr_sq,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T\n\n    # Target in log-space\n    logy = np.log(y)\n\n    # Ridge regularization (no penalty on intercept)\n    D = phi.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # Solve (\u03c6\u1d40\u03c6 + \u03bbI) p = \u03c6\u1d40 logy\n    A = phi.T.dot(phi) + lambda_reg * I\n    b = phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4c0d940a-2b37-452a-a052-478f3eba6783", "generation": 3, "timestamp": 1754717251.909782, "iteration_found": 49, "metrics": {"nmse": 0.31656328659657507, "nmae": 0.4702659868831038, "r2": 0.6834367134034249, "combined_score": 0.7595533083601949}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3938911580311362, "nmae": 0.5087145324019942, "r2": 0.6061088419688638, "combined_score": 0.71741612983075}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3456, nmae: 0.4742, r2: 0.6544, combined_score: 0.7431\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3456, nmae: 0.4742, r2: 0.6544, combined_score: 0.7431\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3166, nmae: 0.4703, r2: 0.6834, combined_score: 0.7596\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5575)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative\n    power\u2010law model in log\u2010space with:\n      - linear and quadratic terms in log(lr) to capture unimodal effects\n      - power\u2010law terms in log(batch size), log(data size), log(model size)\n      - two cross\u2010interaction terms for lr\u00d7bsz and data\u00d7model\n\n    log(loss) \u2248 intercept\n               + w1 * log(lr)\n               + w2 * (log(lr))^2\n               + w3 * log(bsz)\n               + w4 * log(data_size)\n               + w5 * log(non_embedding_param_size)\n               + w6 * [log(lr) * log(bsz)]\n               + w7 * [log(data_size) * log(non_embedding_param_size)]\n\n    params is a length\u20108 vector: \n      [intercept, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions and nonlinear term\n    lr2           = log_lr * log_lr\n    inter_lr_bsz  = log_lr * log_bsz\n    inter_data_pm = log_data * log_param\n\n    # build design matrix phi: [1, log_lr, log_lr^2, log_bsz, log_data, log_param, lr*bsz, data*param]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        lr2,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T  # shape (N,8)\n\n    log_pred = phi.dot(np.asarray(params, dtype=np.float64))\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space. Solves:\n      log(loss) \u2248 \u03c6 \u00b7 params\n    for params = [intercept, w1, ..., w7].\n\n    Uses normal equations with small Tikhonov regularization (\u03bb) on all\n    weights except the intercept.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions and nonlinear term\n    lr2           = log_lr * log_lr\n    inter_lr_bsz  = log_lr * log_bsz\n    inter_data_pm = log_data * log_param\n\n    # design matrix \u03c6\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        lr2,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T  # (N,8)\n\n    # target in log\u2010space\n    logy = np.log(y)\n\n    # ridge regularization: do not penalize intercept\n    D = phi.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (\u03c6\u1d40\u03c6 + \u03bbI)p = \u03c6\u1d40 logy\n    A = phi.T.dot(phi) + lambda_reg * I\n    b = phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3166), Performs well on nmae (0.4703), Performs well on r2 (0.6834), Performs well on combined_score (0.7596)\n\n\n### Program 2 (Score: 0.5543)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (7,)\n                    [intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative input to log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # extract columns\n    lr = X[:, 0]\n    bsz = X[:, 1]\n    data_size = X[:, 2]\n    param_size = X[:, 3]\n\n    # compute logs\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions\n    inter_lr_bsz = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack params\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear combination in log-space\n    log_pred = (intercept\n                + w_lr * log_lr\n                + w_bsz * log_bsz\n                + w_data * log_data\n                + w_param * log_param\n                + w_lr_bsz * inter_lr_bsz\n                + w_data_param * inter_data_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge-regression in log-space \n    with two interaction terms.\n    Builds a design matrix:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(data_size)*log(param_size)]\n    and solves (X^T X + \u03bbI) p = X^T y for p in log-loss space.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,) = \n              [intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix: shape (N,7)\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (do not penalize intercept)\n    dim = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3456), Performs well on nmae (0.4742), Performs well on r2 (0.6544), Performs well on combined_score (0.7431)\n\n\n### Program 3 (Score: 0.5543)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns: loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (7,) = [\n                       intercept,\n                       w_lr, w_bsz, w_data, w_param,\n                       w_lr_bsz, w_data_param\n                   ]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid non-positive for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    data = X[:, 2]\n    param = X[:, 3]\n\n    # log\u2010transform\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data)\n    log_param = np.log(param)\n\n    # interaction terms\n    inter_lr_bsz    = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack parameters\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear form in log\u2010space\n    log_pred = (\n        intercept\n        + w_lr * log_lr\n        + w_bsz * log_bsz\n        + w_data * log_data\n        + w_param * log_param\n        + w_lr_bsz * inter_lr_bsz\n        + w_data_param * inter_data_param\n    )\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression in log\u2010space.\n    Builds a design matrix with two interaction columns and solves:\n        (X^T X + \u03bbI) p = X^T log(loss)\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: array of shape (N,) of LM losses\n\n    Returns:\n      params: array of shape (7,) = [\n                  intercept,\n                  w_lr, w_bsz, w_data, w_param,\n                  w_lr_bsz, w_data_param\n              ]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute logs of inputs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # build interaction columns\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # design matrix: [1, log_lr, log_bsz, log_data, log_param, inter_lr_bsz, inter_data_param]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    D = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve the normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3456), Performs well on nmae (0.4742), Performs well on r2 (0.6544), Performs well on combined_score (0.7431)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5565)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power-law:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n\n    Inputs:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) predicted LM losses\n    \"\"\"\n    # 1) Prepare array and avoid zero\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # 2) Work in log-space\n    logX = np.log(X)  # shape (N,4)\n\n    # 3) Unpack parameters\n    intercept = float(params[0])       # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)  # shape (4,)\n\n    # 4) Linear prediction in log-space\n    log_pred = intercept + logX.dot(weights)  # shape (N,)\n\n    # 5) Clip to avoid overflow / underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n\n    # 6) Return to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power-law model by linear regression in log-space with\n    feature normalization and ridge regularization:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    # 1) Load data and guard against zeros\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 2) Take logs\n    logX = np.log(X)  # (N,4)\n    logy = np.log(y)  # (N,)\n\n    # 3) Normalize each log-feature (zero mean, unit variance)\n    mu    = logX.mean(axis=0)             # (4,)\n    sigma = logX.std(axis=0)              # (4,)\n    sigma[sigma < eps] = 1.0              # avoid division by zero\n    Z = (logX - mu) / sigma               # (N,4)\n\n    # 4) Build design matrix [1 | Z]\n    N, F = Z.shape                        # F == 4\n    ones = np.ones((N,1), dtype=np.float64)\n    D = np.hstack([ones, Z])              # (N,5)\n\n    # 5) Solve ridge\u2010regularized normal equations\n    lam = 1e-3                            # small ridge penalty\n    P = F + 1\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0                         # do NOT penalize intercept\n    A = D.T.dot(D) + lam * I             # (5,5)\n    b = D.T.dot(logy)                    # (5,)\n    p_z = np.linalg.solve(A, b)          # normalized params: [p0, p1, ..., p4]\n\n    # 6) Convert back to original-scale weights\n    #    weights_i = p_z[i+1] / sigma[i]\n    weights = p_z[1:] / sigma            # (4,)\n    #    intercept = p_z[0] - \u03a3_i weights[i] * mu[i]\n    intercept = p_z[0] - np.dot(weights, mu)\n\n    # 7) Pack and return\n    params = np.empty(F+1, dtype=np.float64)\n    params[0]  = intercept\n    params[1:] = weights\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5575, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative\n    power\u2010law model in log\u2010space with:\n      - linear and quadratic terms in log(lr) to capture unimodal effects\n      - power\u2010law terms in log(batch size), log(data size), log(model size)\n      - two cross\u2010interaction terms for lr\u00d7bsz and data\u00d7model\n\n    log(loss) \u2248 intercept\n               + w1 * log(lr)\n               + w2 * (log(lr))^2\n               + w3 * log(bsz)\n               + w4 * log(data_size)\n               + w5 * log(non_embedding_param_size)\n               + w6 * [log(lr) * log(bsz)]\n               + w7 * [log(data_size) * log(non_embedding_param_size)]\n\n    params is a length\u20108 vector: \n      [intercept, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions and nonlinear term\n    lr2           = log_lr * log_lr\n    inter_lr_bsz  = log_lr * log_bsz\n    inter_data_pm = log_data * log_param\n\n    # build design matrix phi: [1, log_lr, log_lr^2, log_bsz, log_data, log_param, lr*bsz, data*param]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        lr2,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T  # shape (N,8)\n\n    log_pred = phi.dot(np.asarray(params, dtype=np.float64))\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space. Solves:\n      log(loss) \u2248 \u03c6 \u00b7 params\n    for params = [intercept, w1, ..., w7].\n\n    Uses normal equations with small Tikhonov regularization (\u03bb) on all\n    weights except the intercept.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions and nonlinear term\n    lr2           = log_lr * log_lr\n    inter_lr_bsz  = log_lr * log_bsz\n    inter_data_pm = log_data * log_param\n\n    # design matrix \u03c6\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        lr2,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T  # (N,8)\n\n    # target in log\u2010space\n    logy = np.log(y)\n\n    # ridge regularization: do not penalize intercept\n    D = phi.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (\u03c6\u1d40\u03c6 + \u03bbI)p = \u03c6\u1d40 logy\n    A = phi.T.dot(phi) + lambda_reg * I\n    b = phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 188883725141.5290, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (542512111103883970871296.000), Excellent nmae (755534900566.116), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5543, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns: loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (7,) = [\n                       intercept,\n                       w_lr, w_bsz, w_data, w_param,\n                       w_lr_bsz, w_data_param\n                   ]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid non-positive for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    data = X[:, 2]\n    param = X[:, 3]\n\n    # log\u2010transform\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data)\n    log_param = np.log(param)\n\n    # interaction terms\n    inter_lr_bsz    = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack parameters\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear form in log\u2010space\n    log_pred = (\n        intercept\n        + w_lr * log_lr\n        + w_bsz * log_bsz\n        + w_data * log_data\n        + w_param * log_param\n        + w_lr_bsz * inter_lr_bsz\n        + w_data_param * inter_data_param\n    )\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression in log\u2010space.\n    Builds a design matrix with two interaction columns and solves:\n        (X^T X + \u03bbI) p = X^T log(loss)\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: array of shape (N,) of LM losses\n\n    Returns:\n      params: array of shape (7,) = [\n                  intercept,\n                  w_lr, w_bsz, w_data, w_param,\n                  w_lr_bsz, w_data_param\n              ]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute logs of inputs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # build interaction columns\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # design matrix: [1, log_lr, log_bsz, log_data, log_param, inter_lr_bsz, inter_data_param]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    D = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve the normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5543, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (7,)\n                    [intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative input to log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # extract columns\n    lr = X[:, 0]\n    bsz = X[:, 1]\n    data_size = X[:, 2]\n    param_size = X[:, 3]\n\n    # compute logs\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions\n    inter_lr_bsz = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack params\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear combination in log-space\n    log_pred = (intercept\n                + w_lr * log_lr\n                + w_bsz * log_bsz\n                + w_data * log_data\n                + w_param * log_param\n                + w_lr_bsz * inter_lr_bsz\n                + w_data_param * inter_data_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge-regression in log-space \n    with two interaction terms.\n    Builds a design matrix:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(data_size)*log(param_size)]\n    and solves (X^T X + \u03bbI) p = X^T y for p in log-loss space.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,) = \n              [intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix: shape (N,7)\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (do not penalize intercept)\n    dim = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5670, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power\u2010law model:\n      loss \u2248 loss_floor + exp(intercept + \u03a3_i w_i * log(x_i))\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # (N,4)\n\n    loss_floor = float(params[0])\n    intercept  = float(params[1])\n    weights    = np.asarray(params[2:], dtype=np.float64)  # (4,)\n\n    log_pred = intercept + logX.dot(weights)  # (N,)\n    # clip for numeric stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return loss_floor + np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the floor + power\u2010law model by:\n      1) A quick ridge regression in log\u2010space (after subtracting an initial loss\u2010floor guess)\n      2) A robust least_squares refinement in the original loss\u2010space to also solve for the floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as in scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape  # F should be 4\n\n    # 1) INITIAL FLOOR\u2010SUBTRACTED REGRESSION\n    # initial floor ~ half min(y)\n    loss_floor_init = max(0.0, 0.5 * np.min(y))\n    # subtract floor and re\u2010clip\n    y_shift = y - loss_floor_init\n    y_shift = np.maximum(y_shift, eps)\n\n    logX      = np.log(X)        # (N,4)\n    logy_shift = np.log(y_shift)  # (N,)\n\n    # design matrix [1, log(x1), ..., log(x4)]\n    ones = np.ones((N, 1), dtype=np.float64)\n    D = np.hstack([ones, logX])  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = F + 1\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = D.T.dot(D) + lambda_reg * I  # (5,5)\n    b = D.T.dot(logy_shift)          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(D, logy_shift, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]  # (4,)\n\n    # pack initial parameter vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf] * (F + 1)\n    upper = [np.min(y)] + [ np.inf] * (F + 1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        result = least_squares(\n            fun=residuals,\n            x0=x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=2000,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8\n        )\n        params_opt = result.x\n    except Exception:\n        # fallback if optimization fails\n        params_opt = x0\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power-law:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n\n    Inputs:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) predicted LM losses\n    \"\"\"\n    # 1) Prepare array and avoid zero\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # 2) Work in log-space\n    logX = np.log(X)  # shape (N,4)\n\n    # 3) Unpack parameters\n    intercept = float(params[0])       # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)  # shape (4,)\n\n    # 4) Linear prediction in log-space\n    log_pred = intercept + logX.dot(weights)  # shape (N,)\n\n    # 5) Clip to avoid overflow / underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n\n    # 6) Return to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power-law model by linear regression in log-space with\n    feature normalization and ridge regularization:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    # 1) Load data and guard against zeros\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 2) Take logs\n    logX = np.log(X)  # (N,4)\n    logy = np.log(y)  # (N,)\n\n    # 3) Normalize each log-feature (zero mean, unit variance)\n    mu    = logX.mean(axis=0)             # (4,)\n    sigma = logX.std(axis=0)              # (4,)\n    sigma[sigma < eps] = 1.0              # avoid division by zero\n    Z = (logX - mu) / sigma               # (N,4)\n\n    # 4) Build design matrix [1 | Z]\n    N, F = Z.shape                        # F == 4\n    ones = np.ones((N,1), dtype=np.float64)\n    D = np.hstack([ones, Z])              # (N,5)\n\n    # 5) Solve ridge\u2010regularized normal equations\n    lam = 1e-3                            # small ridge penalty\n    P = F + 1\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0                         # do NOT penalize intercept\n    A = D.T.dot(D) + lam * I             # (5,5)\n    b = D.T.dot(logy)                    # (5,)\n    p_z = np.linalg.solve(A, b)          # normalized params: [p0, p1, ..., p4]\n\n    # 6) Convert back to original-scale weights\n    #    weights_i = p_z[i+1] / sigma[i]\n    weights = p_z[1:] / sigma            # (4,)\n    #    intercept = p_z[0] - \u03a3_i weights[i] * mu[i]\n    intercept = p_z[0] - np.dot(weights, mu)\n\n    # 7) Pack and return\n    params = np.empty(F+1, dtype=np.float64)\n    params[0]  = intercept\n    params[1:] = weights\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative\n    power\u2010law model in log\u2010space with:\n      - linear and quadratic terms in log(lr) to capture unimodal effects\n      - power\u2010law terms in log(batch size), log(data size), log(model size)\n      - two cross\u2010interaction terms for lr\u00d7bsz and data\u00d7model\n\n    log(loss) \u2248 intercept\n               + w1 * log(lr)\n               + w2 * (log(lr))^2\n               + w3 * log(bsz)\n               + w4 * log(data_size)\n               + w5 * log(non_embedding_param_size)\n               + w6 * [log(lr) * log(bsz)]\n               + w7 * [log(data_size) * log(non_embedding_param_size)]\n\n    params is a length\u20108 vector: \n      [intercept, w1, w2, w3, w4, w5, w6, w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Numerical safeguard against zeros or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # Compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Nonlinear and interaction terms\n    lr_sq          = log_lr * log_lr\n    inter_lr_bsz   = log_lr * log_bsz\n    inter_data_pm  = log_data * log_param\n\n    # Build design matrix: [1, log_lr, log_lr^2, log_bsz, log_data, log_param, lr*bsz, data*param]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        lr_sq,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T  # shape (N,8)\n\n    log_pred = phi.dot(np.asarray(params, dtype=np.float64))\n    # Exponentiate back to loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space. Solves:\n      log(loss) \u2248 \u03c6 \u00b7 params\n    for params = [intercept, w1, ..., w7].\n\n    Uses normal equations with small Tikhonov regularization (\u03bb) on all\n    weights except the intercept.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Unpack and log-transform\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Nonlinear and interaction terms\n    lr_sq          = log_lr * log_lr\n    inter_lr_bsz   = log_lr * log_bsz\n    inter_data_pm  = log_data * log_param\n\n    # Build design matrix \u03c6: (N,8)\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        lr_sq,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_pm\n    ]).T\n\n    # Target in log-space\n    logy = np.log(y)\n\n    # Ridge regularization (no penalty on intercept)\n    D = phi.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # Solve (\u03c6\u1d40\u03c6 + \u03bbI) p = \u03c6\u1d40 logy\n    A = phi.T.dot(phi) + lambda_reg * I\n    b = phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}