{"id": "2a1b165f-f09a-4480-8383-94fd64eb456d", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM finetuning.\nWe model an asymptotic loss floor plus a flexible power\u2010law term\nwith quadratic and interaction features in log\u2010space:\n\n  loss \u2248 L_inf + exp(\n                      w0\n                    + w1\u00b7ln(lr)\n                    + w2\u00b7[ln(lr)]^2\n                    + w3\u00b7ln(bsz)\n                    + w4\u00b7ln(data_size)\n                    + w5\u00b7ln(param_size)\n                    + w6\u00b7ln(data_size)\u00b7ln(param_size)\n                   )\n\nThis captures non\u2010monotonic learning\u2010rate effects and data/parameter interactions\nwhile remaining parameter\u2010efficient. We fit in two stages:\n  1) closed\u2010form ridge regression for initial weights on ln(y - L_inf_init)\n  2) bounded L-BFGS-B refinement minimizing MSE in original loss space.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via the enhanced power\u2010law + offset.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8:\n                   [L_inf, w0, w1, w2, w3, w4, w5, w6]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"params must have length 8, got {p.size}\")\n\n    # Numerical safeguard against log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(param_size)\n\n    # Build feature matrix Z: [1, x1, x1^2, x2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 7), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x3\n    Z[:, 5] = x4\n    Z[:, 6] = x3 * x4\n\n    L_inf = p[0]\n    w     = p[1:]  # length 7\n\n    ln_term = Z.dot(w)          # shape (N,)\n    preds   = L_inf + np.exp(ln_term)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter model:\n      loss = L_inf + exp(Z \u00b7 w)\n    where Z has 7 log\u2010space polynomial/interaction features.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 8:\n              [L_inf, w0, w1, w2, w3, w4, w5, w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # Numerical safeguards\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build feature matrix Z: [1, x1, x1^2, x2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 7), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x3\n    Z[:, 5] = x4\n    Z[:, 6] = x3 * x4\n\n    # Initial asymptotic offset at half the minimum observed loss\n    min_y = y.min()\n    L_inf_init = 0.5 * min_y\n\n    # Closed\u2010form ridge regression for initial weights on ln(y - L_inf_init)\n    y_off = y - L_inf_init\n    y_off = np.clip(y_off, eps, None)\n    ln_y_off = np.log(y_off)\n\n    ridge = 1e-6\n    M = Z.T.dot(Z) + ridge * np.eye(Z.shape[1])\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M, v)  # shape (7,)\n\n    p_init = np.concatenate(([L_inf_init], w_init))  # shape (8,)\n\n    # Bounds: keep L_inf in [0, 0.9*min_y], other weights free\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 7\n\n    # Objective: MSE in original loss space\n    def _obj(p):\n        L_inf = p[0]\n        w     = p[1:]\n        ln_term = Z.dot(w)\n        pred = L_inf + np.exp(ln_term)\n        return np.mean((pred - y) ** 2)\n\n    # Refine parameters via bounded L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       p_init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else p_init\n    except Exception:\n        params_opt = p_init\n\n    return params_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7287baa5-3e65-41ed-8ac0-ad4581219c4c", "generation": 2, "timestamp": 1754799500.299997, "iteration_found": 51, "metrics": {"nmse": 175.18319041719977, "nmae": 17.89184172159811, "r2": -174.18319041719977, "combined_score": 0.005675910384140573}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00266345046407, "nmae": 17.397471889837, "r2": -164.00266345046407, "combined_score": 0.006023999731175424}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0027\n- nmae: 17.3975\n- r2: -164.0027\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 49.9970, nmae: 9.5232, r2: -48.9970, combined_score: 0.0196\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.6357)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (49.9970), Performs well on nmae (9.5232), Performs well on r2 (-48.9970), Performs well on combined_score (0.0196)\n\n\n### Program 2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n### Program 3 (Score: 4.6009)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss under a simple multiplicative power\u2010law:\n      loss \u2248 exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5) with entries\n                   [w0, w1, w2, w3, w4]\n                   If params is 2D (T,5), returns shape (N,T).\n\n    Returns:\n      preds:       array of shape (N,) (or (N,T)) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    # Avoid any zeros or negatives before log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    lnX = np.log(X)             # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        # Single parameter set\n        w0, w1, w2, w3, w4 = p\n        ln_pred = w0 + lnX.dot(np.array([w1, w2, w3, w4]))\n        return np.exp(ln_pred)\n    elif p.ndim == 2 and p.shape[1] == 5:\n        # Multiple parameter sets\n        # ln_pred: (N,T) = lnX (N,4) dot slopes^T (4,T) plus intercepts (T,)\n        intercepts = p[:, 0]        # (T,)\n        slopes     = p[:, 1:].T     # (4,T)\n        ln_pred = lnX.dot(slopes) + intercepts  # (N,T)\n        return np.exp(ln_pred)\n    else:\n        raise ValueError(f\"params must be shape (5,) or (T,5), got {p.shape}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*log(bsz)\n                         + w3*log(data_size) + w4*log(param_size)\n    via ridge\u2010regularized least squares in log\u2010space.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (5,) with [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be 1D and match number of data_points\")\n\n    # Avoid zeros before log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    lnX = np.log(X)    # (N,4)\n    lnY = np.log(y)    # (N,)\n\n    # Build design matrix Z = [1 | ln(lr), ln(bsz), ln(data_size), ln(param_size)]\n    N = X.shape[0]\n    Z = np.hstack([np.ones((N,1)), lnX])  # (N,5)\n\n    # Ridge\u2010regularization\n    # We set \u03bb small relative to the typical feature scale\n    # to ensure numerical stability without over\u2010shrinking weights.\n    lambd = 1e-6\n    # Solve (Z^T Z + \u03bb I) w = Z^T lnY\n    A = Z.T.dot(Z)\n    diag_indices = np.arange(A.shape[0])\n    A[diag_indices, diag_indices] += lambd\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(A, b)  # (5,)\n\n    return w\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.7953)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law with offset.\n\n    Model form:\n      loss = L_inf + exp( w0\n                         + w1 * ln(lr)\n                         + w2 * (ln(lr))^2\n                         + w3 * ln(bsz)\n                         + w4 * (ln(bsz))^2\n                         + w5 * ln(data_size)\n                         + w6 * ln(non_embed_param_size)\n                         + w7 * ln(data_size)*ln(non_embed_param_size)\n                       )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 9, or shape (T,9) for T parameter\u2010sets:\n                   [L_inf, w0, w1, w2, w3, w4, w5, w6, w7]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    # allow broadcasting over multiple fits\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 9:\n        raise ValueError(f\"params must have length 9, got {P}\")\n\n    # split offset and log\u2010polynomial weights\n    L_inf = p[:, 0]    # shape (T,)\n    w     = p[:, 1:]   # shape (T,8)\n\n    # build log\u2010polynomial features Z of shape (N,8)\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(param_size)\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=np.float64)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # compute predictions: shape (N,T)\n    ln_term = Z.dot(w.T)               # (N,8) \u00b7 (8,T) => (N,T)\n    Y = np.exp(ln_term) + L_inf[None, :]  # broadcast offset\n\n    # if a single parameter\u2010set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9\u2010param model:\n      loss = L_inf + exp( Z \u00b7 w )\n    where Z are 8 log\u2010polynomial features as above.\n\n    Uses a two\u2010stage procedure:\n      1) initialize (L_inf, w) by closed\u2010form ridge on ln(y - L_inf_init)\n      2) refine all 9 params with bounded L-BFGS-B minimizing MSE.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 9: [L_inf, w0, w1, ..., w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # avoid log(0) / negative\n    eps = 1e-12\n    y = np.clip(y, eps, None)\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n\n    # build Z like above\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=np.float64)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # initialize L_inf at half the minimum loss\n    min_y = y.min()\n    L_inf_init = 0.5 * min_y\n\n    # closed\u2010form ridge on ln(y - L_inf_init)\n    y_off = np.clip(y - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n    ridge = 1e-6\n    M = Z.T.dot(Z) + ridge * np.eye(8)\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M, v)  # (8,)\n\n    # pack initial parameter vector\n    p_init = np.concatenate(([L_inf_init], w_init))\n\n    # bounds: keep L_inf >= 0 and less than the data's min\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 8\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        L_inf = p[0]\n        w = p[1:]\n        pred = L_inf + np.exp(Z.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # refine via L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       p_init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else p_init\n    except Exception:\n        params_opt = p_init\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.6357, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an asymptotic offset plus power law:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [L_inf, w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log-transform features\n    X_log = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func expects 6 parameters, got {p.size}\")\n    L_inf = p[0]\n    w0    = p[1]\n    w     = p[2:]       # length 4\n\n    # compute predictive term and add asymptotic offset\n    log_term = w0 + X_log.dot(w)        # shape (N,)\n    preds    = L_inf + np.exp(log_term) # shape (N,)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter model:\n      loss = L_inf + exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n    via bounded L-BFGS-B on the mean squared error.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (6,) array [L_inf, w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    # clip to valid domain\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    X_log = np.log(X)   # (N,4)\n\n    # get a reasonable initial guess\n    min_y = y.min()\n    init_L  = min_y * 0.5\n    init_w0 = np.log(max(eps, np.mean(y - init_L)))\n    init_ws = np.zeros(X_log.shape[1], dtype=np.float64)  # four zeros\n    init_params = np.concatenate(([init_L, init_w0], init_ws))\n\n    # bound L_inf to [0, 0.9*min_y] so that y - L_inf > 0\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 5\n\n    # objective = MSE between model and y\n    def _obj(p):\n        L_inf = p[0]\n        w0     = p[1]\n        w      = p[2:]\n        pred   = L_inf + np.exp(w0 + X_log.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # run L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       init_params,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else init_params\n    except Exception:\n        params_opt = init_params\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.997), Excellent nmae (9.523)\n\n\n### Inspiration 2 (Score: 8.1682, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning scenarios.\nWe extend the basic multiplicative power\u2010law with:\n  - a quadratic term in log(lr) to capture non\u2010monotonic LR effects,\n  - an interaction term between log(data_size) and log(non_embed_param_size)\nfor better modeling capacity while keeping parameter count low.\n\nModel form in log\u2010space:\n  log(loss) \u2248 w0\n            + w1 * log(lr)\n            + w2 * (log(lr))^2\n            + w3 * log(bsz)\n            + w4 * log(data_size)\n            + w5 * log(non_embed_param_size)\n            + w6 * log(data_size) * log(non_embed_param_size)\n\nWe fit via ridge\u2010regularized least squares in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using the enhanced log\u2010linear + interaction model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 7 (or shape (T,7) for T separate fits):\n                   [w0, w1, w2, w3, w4, w5, w6]\n    Returns:\n      preds:       array of shape (N,) (or (N,T) if params is 2D)\n                   of predicted lm loss values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(f\"params must have length 7, got {P}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)  # shape (N,4)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix A of shape (N,7)\n    # f0 = 1\n    # f1 = log(lr)\n    # f2 = (log(lr))^2\n    # f3 = log(bsz)\n    # f4 = log(data_size)\n    # f5 = log(param_size)\n    # f6 = log(data_size) * log(param_size)\n    N = X.shape[0]\n    A = np.empty((N, 7), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = lr\n    A[:, 2] = lr * lr\n    A[:, 3] = bsz\n    A[:, 4] = data_sz\n    A[:, 5] = param_sz\n    A[:, 6] = data_sz * param_sz\n\n    # compute log\u2010predictions: shape (N,T)\n    log_pred = A.dot(p.T)\n    # exponentiate to get loss\n    Y = np.exp(log_pred)\n\n    # if a single parameter vector, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law model by ridge\u2010regularized\n    least squares in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7:\n                   [w0, w1, w2, w3, w4, w5, w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # numerical safeguard\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    # log\u2010transform\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build design matrix A (N\u00d77)\n    N = X.shape[0]\n    A = np.empty((N, 7), dtype=np.float64)\n    A[:, 0] = 1.0\n    A[:, 1] = lr\n    A[:, 2] = lr * lr\n    A[:, 3] = bsz\n    A[:, 4] = data_sz\n    A[:, 5] = param_sz\n    A[:, 6] = data_sz * param_sz\n\n    # solve ridge\u2010regularized normal equations\n    ATA = A.T.dot(A)                # shape (7,7)\n    ATy = A.T.dot(logy)             # shape (7,)\n    # adapt regularization scale to data\n    ridge_coeff = 1e-4 * np.mean(np.diag(ATA))\n    W = np.linalg.solve(ATA + ridge_coeff * np.eye(7), ATy)\n    return W\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (545.667), Excellent nmae (31.671)\n\n\n### Inspiration 3 (Score: 5.7153, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\nWe extend the log\u2010space polynomial form by adding two interaction terms:\n  1) a lr\u00d7bsz interaction to capture U\u2010shaped learning\u2010rate/batch\u2010size effects,\n  2) a data_size\u00d7non_embed_params interaction to capture D\u00d7P coupling.\n\nModel form (in log\u2010space):\n    Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n    Features z = [1,\n                 x1, x1^2,\n                 x2, x2^2,\n                 x3,\n                 x4,\n                 x1*x2,\n                 x3*x4]\n    ln(loss) \u2248 w \u00b7 z\nHence\n    loss \u2248 exp(w0\n                + w1\u00b7x1 + w2\u00b7x1^2\n                + w3\u00b7x2 + w4\u00b7x2^2\n                + w5\u00b7x3\n                + w6\u00b7x4\n                + w7\u00b7x1\u00b7x2\n                + w8\u00b7x3\u00b7x4)\nThis form remains parameter\u2010efficient (9 parameters) and is fitted via\nridge regression in log\u2010space for numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters using the enhanced polynomial scaling law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 9, or 2D array of shape (T,9) for T parameter sets:\n                   [w0, w1, w2, w3, w4, w5, w6, w7, w8]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n\n    # ensure params is 2D: (T,9)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 9:\n        raise ValueError(f\"params must have length 9, got {P}\")\n\n    # log\u2010transform inputs (add tiny epsilon to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)  # shape (N,4)\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,9)\n    N = X.shape[0]\n    Z = np.empty((N, 9), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x1 * x2\n    Z[:, 8] = x3 * x4\n\n    # compute log\u2010predictions: (N,T) = (N,9) dot (9,T)\n    lnY = Z.dot(p.T)\n    Y = np.exp(lnY)\n\n    # if only one parameter set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial scaling law via ridge regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 9:\n                   [w0, w1, w2, w3, w4, w5, w6, w7, w8]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # log\u2010transform inputs and targets (tiny eps for numerical safety)\n    eps = 1e-12\n    lnX = np.log(X + eps)  # shape (N,4)\n    lnY = np.log(y + eps)  # shape (N,)\n\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # build design matrix Z of shape (N,9)\n    Z = np.empty((N, 9), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x1 * x2\n    Z[:, 8] = x3 * x4\n\n    # ridge regularization parameter\n    lambd = 1e-6\n\n    # normal equations: (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z)\n    # add ridge to diagonal for numerical stability\n    M.flat[::10] += lambd  # 9\u00d79 matrix, stride 10 picks diagonal\n    v = Z.T.dot(lnY)\n\n    # solve for weights\n    w = np.linalg.solve(M, v)  # shape (9,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (260.300), Excellent nmae (21.857)\n\n\n### Inspiration 4 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear (power-law) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Log-transform features\n    X_log = np.log(X)\n    # Compute log-prediction = w0 + sum_i wi * log(x_i)\n    log_pred = params[0] + X_log.dot(params[1:])\n    # Return loss in original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-linear model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via a regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features and targets\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    # Build design matrix [1 | X_log]\n    N, F = X_log.shape\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log for stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.398)\n\n\n### Inspiration 5 (Score: 4.7953, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters using the enhanced polynomial scaling law with offset.\n\n    Model form:\n      loss = L_inf + exp( w0\n                         + w1 * ln(lr)\n                         + w2 * (ln(lr))^2\n                         + w3 * ln(bsz)\n                         + w4 * (ln(bsz))^2\n                         + w5 * ln(data_size)\n                         + w6 * ln(non_embed_param_size)\n                         + w7 * ln(data_size)*ln(non_embed_param_size)\n                       )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 9, or shape (T,9) for T parameter\u2010sets:\n                   [L_inf, w0, w1, w2, w3, w4, w5, w6, w7]\n    Returns:\n      preds:       array of shape (N,) or (N,T) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64)\n    # allow broadcasting over multiple fits\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 9:\n        raise ValueError(f\"params must have length 9, got {P}\")\n\n    # split offset and log\u2010polynomial weights\n    L_inf = p[:, 0]    # shape (T,)\n    w     = p[:, 1:]   # shape (T,8)\n\n    # build log\u2010polynomial features Z of shape (N,8)\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(param_size)\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=np.float64)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # compute predictions: shape (N,T)\n    ln_term = Z.dot(w.T)               # (N,8) \u00b7 (8,T) => (N,T)\n    Y = np.exp(ln_term) + L_inf[None, :]  # broadcast offset\n\n    # if a single parameter\u2010set, return shape (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9\u2010param model:\n      loss = L_inf + exp( Z \u00b7 w )\n    where Z are 8 log\u2010polynomial features as above.\n\n    Uses a two\u2010stage procedure:\n      1) initialize (L_inf, w) by closed\u2010form ridge on ln(y - L_inf_init)\n      2) refine all 9 params with bounded L-BFGS-B minimizing MSE.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 9: [L_inf, w0, w1, ..., w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # avoid log(0) / negative\n    eps = 1e-12\n    y = np.clip(y, eps, None)\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n\n    # build Z like above\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=np.float64)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x2 * x2\n    Z[:, 5] = x3\n    Z[:, 6] = x4\n    Z[:, 7] = x3 * x4\n\n    # initialize L_inf at half the minimum loss\n    min_y = y.min()\n    L_inf_init = 0.5 * min_y\n\n    # closed\u2010form ridge on ln(y - L_inf_init)\n    y_off = np.clip(y - L_inf_init, eps, None)\n    ln_y_off = np.log(y_off)\n    ridge = 1e-6\n    M = Z.T.dot(Z) + ridge * np.eye(8)\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M, v)  # (8,)\n\n    # pack initial parameter vector\n    p_init = np.concatenate(([L_inf_init], w_init))\n\n    # bounds: keep L_inf >= 0 and less than the data's min\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 8\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        L_inf = p[0]\n        w = p[1:]\n        pred = L_inf + np.exp(Z.dot(w))\n        return np.mean((pred - y) ** 2)\n\n    # refine via L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       p_init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else p_init\n    except Exception:\n        params_opt = p_init\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (180.658), Excellent nmae (18.176)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM finetuning.\nWe model an asymptotic loss floor plus a flexible power\u2010law term\nwith quadratic and interaction features in log\u2010space:\n\n  loss \u2248 L_inf + exp(\n                      w0\n                    + w1\u00b7ln(lr)\n                    + w2\u00b7[ln(lr)]^2\n                    + w3\u00b7ln(bsz)\n                    + w4\u00b7ln(data_size)\n                    + w5\u00b7ln(param_size)\n                    + w6\u00b7ln(data_size)\u00b7ln(param_size)\n                   )\n\nThis captures non\u2010monotonic learning\u2010rate effects and data/parameter interactions\nwhile remaining parameter\u2010efficient. We fit in two stages:\n  1) closed\u2010form ridge regression for initial weights on ln(y - L_inf_init)\n  2) bounded L-BFGS-B refinement minimizing MSE in original loss space.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via the enhanced power\u2010law + offset.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8:\n                   [L_inf, w0, w1, w2, w3, w4, w5, w6]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"params must have length 8, got {p.size}\")\n\n    # Numerical safeguard against log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)\n    x1 = lnX[:, 0]  # ln(lr)\n    x2 = lnX[:, 1]  # ln(bsz)\n    x3 = lnX[:, 2]  # ln(data_size)\n    x4 = lnX[:, 3]  # ln(param_size)\n\n    # Build feature matrix Z: [1, x1, x1^2, x2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 7), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x3\n    Z[:, 5] = x4\n    Z[:, 6] = x3 * x4\n\n    L_inf = p[0]\n    w     = p[1:]  # length 7\n\n    ln_term = Z.dot(w)          # shape (N,)\n    preds   = L_inf + np.exp(ln_term)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter model:\n      loss = L_inf + exp(Z \u00b7 w)\n    where Z has 7 log\u2010space polynomial/interaction features.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 8:\n              [L_inf, w0, w1, w2, w3, w4, w5, w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # Numerical safeguards\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    lnX = np.log(X_clipped)\n    x1 = lnX[:, 0]\n    x2 = lnX[:, 1]\n    x3 = lnX[:, 2]\n    x4 = lnX[:, 3]\n\n    # Build feature matrix Z: [1, x1, x1^2, x2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 7), dtype=float)\n    Z[:, 0] = 1.0\n    Z[:, 1] = x1\n    Z[:, 2] = x1 * x1\n    Z[:, 3] = x2\n    Z[:, 4] = x3\n    Z[:, 5] = x4\n    Z[:, 6] = x3 * x4\n\n    # Initial asymptotic offset at half the minimum observed loss\n    min_y = y.min()\n    L_inf_init = 0.5 * min_y\n\n    # Closed\u2010form ridge regression for initial weights on ln(y - L_inf_init)\n    y_off = y - L_inf_init\n    y_off = np.clip(y_off, eps, None)\n    ln_y_off = np.log(y_off)\n\n    ridge = 1e-6\n    M = Z.T.dot(Z) + ridge * np.eye(Z.shape[1])\n    v = Z.T.dot(ln_y_off)\n    w_init = np.linalg.solve(M, v)  # shape (7,)\n\n    p_init = np.concatenate(([L_inf_init], w_init))  # shape (8,)\n\n    # Bounds: keep L_inf in [0, 0.9*min_y], other weights free\n    bounds = [(0.0, min_y * 0.9)] + [(-np.inf, np.inf)] * 7\n\n    # Objective: MSE in original loss space\n    def _obj(p):\n        L_inf = p[0]\n        w     = p[1:]\n        ln_term = Z.dot(w)\n        pred = L_inf + np.exp(ln_term)\n        return np.mean((pred - y) ** 2)\n\n    # Refine parameters via bounded L-BFGS-B\n    try:\n        res = minimize(_obj,\n                       p_init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 500, 'ftol': 1e-9})\n        params_opt = res.x if res.success else p_init\n    except Exception:\n        params_opt = p_init\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```"]}}}