{"id": "89c33dba-6d75-4210-884f-956ea9ca8b78", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling law discovery using a log\u2013linear power\u2010law model with\nweighted ridge regression to emphasize large-scale regimes (extrapolation).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + \u03b21\u00b7log(lr) + \u03b22\u00b7log(bsz)\n                 + \u03b23\u00b7log(data_size) + \u03b24\u00b7log(non_embed_params))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where each row is\n                   [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if single parameter\u2010set, or (N,T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # (1,5)\n    # Check param dimension\n    assert p.shape[1] == logX.shape[1] + 1, \\\n        f\"Expected params shape (*,5), got {p.shape}\"\n\n    # Split intercept and slopes\n    beta0 = p[:, 0]               # (T,)\n    betas = p[:, 1:]              # (T,4)\n    # Compute linear score\n    # t_pred[n,t] = beta0[t] + sum_j betas[t,j] * logX[n,j]\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # If single parameter set, collapse second axis\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via weighted ridge regression:\n      log(loss) \u2248 beta0 + \u03b21\u00b7log(lr) + \u03b22\u00b7log(bsz)\n                   + \u03b23\u00b7log(data_size) + \u03b24\u00b7log(non_embed_params)\n    We weight examples by their scale (data_size + param_size) to improve\n    extrapolation on large configurations.\n    Returns:\n      params: array of shape (5,) => [beta0, \u03b21, \u03b22, \u03b23, \u03b24]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)      # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expected 4 features per data point\"\n\n    # Prevent zeros for logging\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    # Transform targets and avoid zeros\n    y_clipped = np.clip(y, 1e-12, None)\n    logY = np.log(y_clipped).reshape(N, 1)  # (N,1)\n\n    # Design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n\n    # Compute a weight for each example based on scale of data_size & param_size\n    # w_i = (log(data_size_i) + log(param_size_i)) normalized to mean=1\n    scale_terms = logX[:, 2] + logX[:, 3]  # sum of logs\n    # Avoid non-positive / extreme weights\n    mean_scale = np.maximum(np.mean(scale_terms), 1e-6)\n    w = scale_terms / mean_scale\n    # Clip weights to avoid domination\n    w = np.clip(w, 0.1, 10.0)               # (N,)\n\n    # Apply weight to design matrix and target for weighted least squares\n    W_sqrt = np.sqrt(w).reshape(N, 1)       # (N,1)\n    Zw = Z * W_sqrt                         # (N,5)\n    Yw = logY * W_sqrt                      # (N,1)\n\n    # Ridge regularization\n    ridge_alpha = 1e-3\n\n    # Closed\u2010form solution: (Z\u1d40WZ + \u03b1I)\u207b\u00b9 Z\u1d40W y\n    P = F + 1  # 5\n    ZTZ = Zw.T.dot(Zw)                     # (5,5)\n    # Add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_alpha\n    ZTY = Zw.T.dot(Yw)                     # (5,1)\n\n    # Solve for betas\n    betas = np.linalg.solve(ZTZ, ZTY).reshape(P)  # (5,)\n\n    return betas\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1af412d2-336a-4f67-94f0-a291cea85d24", "generation": 2, "timestamp": 1754798438.7182016, "iteration_found": 9, "metrics": {"nmse": 163.2903231719284, "nmae": 17.306713107888495, "r2": -162.2903231719284, "combined_score": 0.006086785762503545}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00266345584126, "nmae": 17.397471890096064, "r2": -164.00266345584126, "combined_score": 0.006023999730980294}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0027\n- nmae: 17.3975\n- r2: -164.0027\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 99589215585519330125424885760.0000, nmae: 428288771110437.7500, r2: -99589215585519330125424885760.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n### Program 2 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (99589215585519330125424885760.0000), Performs well on nmae (428288771110437.7500), Performs well on r2 (-99589215585519330125424885760.0000), Performs well on combined_score (0.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 107072192777609.4375, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (99589215585519330125424885760.000), Excellent nmae (428288771110437.750), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013linear (power\u2010law) model\nand closed\u2010form ridge regression for stable, efficient fitting.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + sum_i beta_i * log(x_i))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array shape (5,) or (T,5), where each row is [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    N, F = X.shape\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n\n    params_arr = np.asarray(params, dtype=float)\n    # unify parameter shape to (T,5)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    assert P == F + 1, \"Expected params of length {} or shape (T,{})\".format(F+1, F+1)\n\n    # compute predictions for each parameter set\n    # t_pred[n,t] = beta0_t + sum_j beta_{j+1,t} * logX[n,j]\n    beta0 = params_arr[:, 0]               # (T,)\n    betas = params_arr[:, 1:]              # (T,4)\n    # broadcast and compute\n    # result shape (N,T): each column is beta0[t] + logX.dot(betas[t].T)\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # if only one set of params, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via ridge regression in closed form:\n      log(loss) \u2248 beta0 + sum_i beta_i * log(x_i)\n    Returns:\n      params: array of shape (5,) => [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points)).astype(float)  # (N,4)\n    y = np.asarray(loss_values).astype(float)\n    N, F = X.shape\n\n    # transform inputs and targets to log domain, clip to avoid -inf\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                                         # (N,4)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    # clip loss to positive\n    y2d = np.clip(y2d, 1e-12, None)\n    logY = np.log(y2d)                                       # (N, T)\n    T = logY.shape[1]\n\n    # design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)      # (N,5)\n    P = F + 1                                                # 5\n\n    # ridge regularization parameter\n    ridge_lambda = 1e-6\n\n    # precompute for efficiency\n    ZTZ = Z.T.dot(Z)                                         # (5,5)\n    # add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_lambda\n\n    ZTY = Z.T.dot(logY)                                      # (5,T)\n\n    # solve for each task (column) in closed form\n    # beta = inv(ZTZ) dot ZTY  => shape (5,T)\n    betas = np.linalg.solve(ZTZ, ZTY)                        # (5,T)\n\n    # return shape (T,5) or (5,) if single output\n    if T == 1:\n        return betas[:, 0]\n    return betas.T\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling law discovery using a log\u2013linear power\u2010law model with\nweighted ridge regression to emphasize large-scale regimes (extrapolation).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via a log\u2013linear power law:\n      loss \u2248 exp(beta0 + \u03b21\u00b7log(lr) + \u03b22\u00b7log(bsz)\n                 + \u03b23\u00b7log(data_size) + \u03b24\u00b7log(non_embed_params))\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where each row is\n                   [beta0, beta_lr, beta_bsz, beta_data, beta_param]\n    Returns:\n      preds: (N,) if single parameter\u2010set, or (N,T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Ensure strictly positive for log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # (1,5)\n    # Check param dimension\n    assert p.shape[1] == logX.shape[1] + 1, \\\n        f\"Expected params shape (*,5), got {p.shape}\"\n\n    # Split intercept and slopes\n    beta0 = p[:, 0]               # (T,)\n    betas = p[:, 1:]              # (T,4)\n    # Compute linear score\n    # t_pred[n,t] = beta0[t] + sum_j betas[t,j] * logX[n,j]\n    t_pred = logX.dot(betas.T) + beta0[None, :]\n    loss_pred = np.exp(t_pred)\n\n    # If single parameter set, collapse second axis\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear power\u2010law model via weighted ridge regression:\n      log(loss) \u2248 beta0 + \u03b21\u00b7log(lr) + \u03b22\u00b7log(bsz)\n                   + \u03b23\u00b7log(data_size) + \u03b24\u00b7log(non_embed_params)\n    We weight examples by their scale (data_size + param_size) to improve\n    extrapolation on large configurations.\n    Returns:\n      params: array of shape (5,) => [beta0, \u03b21, \u03b22, \u03b23, \u03b24]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)      # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expected 4 features per data point\"\n\n    # Prevent zeros for logging\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    # Transform targets and avoid zeros\n    y_clipped = np.clip(y, 1e-12, None)\n    logY = np.log(y_clipped).reshape(N, 1)  # (N,1)\n\n    # Design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n\n    # Compute a weight for each example based on scale of data_size & param_size\n    # w_i = (log(data_size_i) + log(param_size_i)) normalized to mean=1\n    scale_terms = logX[:, 2] + logX[:, 3]  # sum of logs\n    # Avoid non-positive / extreme weights\n    mean_scale = np.maximum(np.mean(scale_terms), 1e-6)\n    w = scale_terms / mean_scale\n    # Clip weights to avoid domination\n    w = np.clip(w, 0.1, 10.0)               # (N,)\n\n    # Apply weight to design matrix and target for weighted least squares\n    W_sqrt = np.sqrt(w).reshape(N, 1)       # (N,1)\n    Zw = Z * W_sqrt                         # (N,5)\n    Yw = logY * W_sqrt                      # (N,1)\n\n    # Ridge regularization\n    ridge_alpha = 1e-3\n\n    # Closed\u2010form solution: (Z\u1d40WZ + \u03b1I)\u207b\u00b9 Z\u1d40W y\n    P = F + 1  # 5\n    ZTZ = Zw.T.dot(Zw)                     # (5,5)\n    # Add ridge on diagonal\n    ZTZ.flat[::P+1] += ridge_alpha\n    ZTY = Zw.T.dot(Yw)                     # (5,1)\n\n    # Solve for betas\n    betas = np.linalg.solve(ZTZ, ZTY).reshape(P)  # (5,)\n\n    return betas\n# EVOLVE-BLOCK-END\n```"]}}}