{"id": "4b310688-497b-4a2d-9b4a-2519f5049aa6", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Generalized two-term power-law scaling with a positive offset:\n      y \u2248 exp(logA + sum_i \u03b1_i log x_i)\n         + exp(logD + sum_i \u03b2_i log x_i)\n         + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logA, \u03b11..\u03b1F, logD, \u03b21..\u03b2F, logc]  (length = 2*(F+1)+1)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n\n    expected_P = 2 * (F + 1) + 1\n    if P != expected_P:\n        raise ValueError(f\"Expected params length {expected_P}, got {P}\")\n\n    # unpack parameters\n    #  [0]            => logA\n    #  [1:1+F]        => \u03b1 coefficients\n    #  [1+F]          => logD\n    #  [2+F:2+2*F]    => \u03b2 coefficients\n    #  [-1]           => logc\n    logA   = p[:, 0]                      # (T,)\n    alpha  = p[:, 1 : 1 + F]              # (T, F)\n    logD   = p[:, 1 + F]                  # (T,)\n    beta   = p[:, 2 + F : 2 + 2 * F]      # (T, F)\n    logc   = p[:, -1]                     # (T,)\n\n    # safe log of inputs\n    logX = np.log(X + 1e-12)              # (N, F)\n\n    # compute both power-law terms\n    # term1: exp(logA + logX @ alpha^T)\n    # term2: exp(logD + logX @ beta^T)\n    term1 = np.exp(logA[None, :] + logX.dot(alpha.T))  # (N, T)\n    term2 = np.exp(logD[None, :] + logX.dot(beta.T))   # (N, T)\n    offset = np.exp(logc)[None, :]                     # (N, T)\n\n    y_pred = term1 + term2 + offset\n\n    # if a single parameter vector was passed, return shape (N,)\n    return y_pred[:, 0] if T == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two-term power-law scaling law:\n      y_pred = exp(logA + \u03a3 \u03b1_i log x_i)\n             + exp(logD + \u03a3 \u03b2_i log x_i)\n             + exp(logc)\n    by minimizing the mean squared error in original loss space,\n    with light L2-regularization on exponents to improve stability.\n    Returns a 1D array of optimized parameters of length 2*(F+1)+1.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity of targets\n    y = np.clip(y, 1e-8, None)\n\n    N, F = X.shape\n    P = 2 * (F + 1) + 1  # logA, \u03b1's; logD, \u03b2's; logc\n\n    # initial parameters\n    # split the explanatory power roughly equally\n    mean_y = np.mean(y)\n    min_y  = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]          = np.log(mean_y * 0.5 + 1e-8)  # logA\n    init[1 : 1 + F]  = 0.0                          # \u03b1_i\n    init[1 + F]      = np.log(mean_y * 0.5 + 1e-8)  # logD\n    init[2 + F : 2 + 2 * F] = 0.0                   # \u03b2_i\n    init[-1]         = np.log(min_y * 0.01 + 1e-8)  # logc\n\n    # bounds: keep exponents in a reasonable range, logs unconstrained\n    bounds = []\n    for idx in range(P):\n        # \u03b1 and \u03b2 exponents indices\n        if (1 <= idx < 1 + F) or (2 + F <= idx < 2 + 2 * F):\n            bounds.append((-5.0, 5.0))\n        else:\n            bounds.append((None, None))\n\n    # objective: MSE + small L2 on exponents\n    def objective(flat_p):\n        p_vec = flat_p.reshape(1, -1)\n        y_pred = scaling_law_func(X, p_vec).ravel()\n        mse = np.mean((y_pred - y) ** 2)\n        # regularize exponents \u03b1_i and \u03b2_i to avoid wild fits\n        exponents = flat_p[1 : 1 + F].tolist() + flat_p[2 + F : 2 + 2 * F].tolist()\n        reg = 1e-3 * np.sum(np.square(exponents))\n        return mse + reg\n\n    # optimize\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 10000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initialization on failure\n    return init", "language": "python", "parent_id": "1ded71d1-6a94-4b07-93ed-15c7d7eab69a", "generation": 2, "timestamp": 1754798252.5633898, "iteration_found": 9, "metrics": {"nmse": 169.09935651259144, "nmae": 17.612621709113135, "r2": -168.09935651259144, "combined_score": 0.005878917007695887}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 158.49162185748884, "nmae": 17.048856771924793, "r2": -157.49162185748884, "combined_score": 0.006269921820053557}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 158.4916\n- nmae: 17.0489\n- r2: -157.4916\n- combined_score: 0.0063\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 99589215585519330125424885760.0000, nmae: 428288771110437.7500, r2: -99589215585519330125424885760.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n### Program 2 (Score: 107072192777609.4375)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (99589215585519330125424885760.0000), Performs well on nmae (428288771110437.7500), Performs well on r2 (-99589215585519330125424885760.0000), Performs well on combined_score (0.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 107072192777609.4375, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (99589215585519330125424885760.000), Excellent nmae (428288771110437.750), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    N, F = X.shape\n    params = np.asarray(params, dtype=np.float64)\n    # allow both 1D or 2D params\n    if params.ndim == 1:\n        params = params[None, :]\n    T, P = params.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n    # unpack\n    logk       = params[:, 0]           # (T,)\n    exponents  = params[:, 1:1+F]       # (T, F)\n    logc       = params[:, -1]          # (T,)\n    # compute\n    logX  = np.log(X)                   # (N, F)\n    # (N, T) = logk + logX @ exponents.T\n    log_term = logk[None, :] + logX.dot(exponents.T)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE in the original loss space,\n    optimizing over [logk, \u03b1_i..., logc].\n    Returns the optimized parameter vector of length F+2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity to avoid log(0)\n    y = np.maximum(y, 1e-8)\n    N, F = X.shape\n    P = F + 2\n\n    # initialize:\n    #   logk  = log(median(y))\n    #   \u03b1_i   = 0\n    #   logc  = log(min(y)*0.1)\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]        = np.log(median_y + 1e-8)\n    init[1:1+F]    = 0.0\n    init[-1]       = np.log(min_y * 0.1 + 1e-8)\n\n    # objective = mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Generalized two-term power-law scaling with a positive offset:\n      y \u2248 exp(logA + sum_i \u03b1_i log x_i)\n         + exp(logD + sum_i \u03b2_i log x_i)\n         + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logA, \u03b11..\u03b1F, logD, \u03b21..\u03b2F, logc]  (length = 2*(F+1)+1)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n\n    expected_P = 2 * (F + 1) + 1\n    if P != expected_P:\n        raise ValueError(f\"Expected params length {expected_P}, got {P}\")\n\n    # unpack parameters\n    #  [0]            => logA\n    #  [1:1+F]        => \u03b1 coefficients\n    #  [1+F]          => logD\n    #  [2+F:2+2*F]    => \u03b2 coefficients\n    #  [-1]           => logc\n    logA   = p[:, 0]                      # (T,)\n    alpha  = p[:, 1 : 1 + F]              # (T, F)\n    logD   = p[:, 1 + F]                  # (T,)\n    beta   = p[:, 2 + F : 2 + 2 * F]      # (T, F)\n    logc   = p[:, -1]                     # (T,)\n\n    # safe log of inputs\n    logX = np.log(X + 1e-12)              # (N, F)\n\n    # compute both power-law terms\n    # term1: exp(logA + logX @ alpha^T)\n    # term2: exp(logD + logX @ beta^T)\n    term1 = np.exp(logA[None, :] + logX.dot(alpha.T))  # (N, T)\n    term2 = np.exp(logD[None, :] + logX.dot(beta.T))   # (N, T)\n    offset = np.exp(logc)[None, :]                     # (N, T)\n\n    y_pred = term1 + term2 + offset\n\n    # if a single parameter vector was passed, return shape (N,)\n    return y_pred[:, 0] if T == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two-term power-law scaling law:\n      y_pred = exp(logA + \u03a3 \u03b1_i log x_i)\n             + exp(logD + \u03a3 \u03b2_i log x_i)\n             + exp(logc)\n    by minimizing the mean squared error in original loss space,\n    with light L2-regularization on exponents to improve stability.\n    Returns a 1D array of optimized parameters of length 2*(F+1)+1.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # enforce positivity of targets\n    y = np.clip(y, 1e-8, None)\n\n    N, F = X.shape\n    P = 2 * (F + 1) + 1  # logA, \u03b1's; logD, \u03b2's; logc\n\n    # initial parameters\n    # split the explanatory power roughly equally\n    mean_y = np.mean(y)\n    min_y  = np.min(y)\n    init = np.zeros(P, dtype=np.float64)\n    init[0]          = np.log(mean_y * 0.5 + 1e-8)  # logA\n    init[1 : 1 + F]  = 0.0                          # \u03b1_i\n    init[1 + F]      = np.log(mean_y * 0.5 + 1e-8)  # logD\n    init[2 + F : 2 + 2 * F] = 0.0                   # \u03b2_i\n    init[-1]         = np.log(min_y * 0.01 + 1e-8)  # logc\n\n    # bounds: keep exponents in a reasonable range, logs unconstrained\n    bounds = []\n    for idx in range(P):\n        # \u03b1 and \u03b2 exponents indices\n        if (1 <= idx < 1 + F) or (2 + F <= idx < 2 + 2 * F):\n            bounds.append((-5.0, 5.0))\n        else:\n            bounds.append((None, None))\n\n    # objective: MSE + small L2 on exponents\n    def objective(flat_p):\n        p_vec = flat_p.reshape(1, -1)\n        y_pred = scaling_law_func(X, p_vec).ravel()\n        mse = np.mean((y_pred - y) ** 2)\n        # regularize exponents \u03b1_i and \u03b2_i to avoid wild fits\n        exponents = flat_p[1 : 1 + F].tolist() + flat_p[2 + F : 2 + 2 * F].tolist()\n        reg = 1e-3 * np.sum(np.square(exponents))\n        return mse + reg\n\n    # optimize\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 10000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initialization on failure\n    return init\n```"]}}}