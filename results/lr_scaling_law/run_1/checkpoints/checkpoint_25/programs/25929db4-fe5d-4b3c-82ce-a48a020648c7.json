{"id": "25929db4-fe5d-4b3c-82ce-a48a020648c7", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Fixed reference values for normalization (constant, not data-dependent)\n_REF_LR    = 1e-3\n_REF_BSZ   = 512.0\n_REF_DATA  = 1e10\n_REF_PARAM = 1e8\n_EPS       = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss via a normalized power\u2010law with additive floor:\n      \u0177 = c + exp(w0 + \u03a3_i w_i \u00b7 log(x_i / ref_i))\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_emb_params]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n                   or shape (T,6) for T sets\n\n    Returns:\n      y_pred: shape (N,) if params is (6,), else (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 features, got {D}\")\n    # avoid log(0)\n    X = np.clip(X, _EPS, None)\n\n    # normalized log-features\n    logX = np.empty_like(X)\n    logX[:, 0] = np.log(X[:, 0] / _REF_LR)\n    logX[:, 1] = np.log(X[:, 1] / _REF_BSZ)\n    logX[:, 2] = np.log(X[:, 2] / _REF_DATA)\n    logX[:, 3] = np.log(X[:, 3] / _REF_PARAM)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got shape {p.shape}\")\n\n    # unpack\n    w0 = p[:, 0]         # (T,)\n    w_i = p[:, 1:5]      # (T,4)\n    c   = p[:, 5]        # (T,)\n\n    # compute linear part and exponentiate\n    # lin: (N, T)\n    lin = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(lin) + c[None, :]\n\n    # if single param set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=10, ridge=1e-6):\n    \"\"\"\n    Fit the 6-parameter model via alternating ridge\u2010regularized least squares:\n      \u0177 = c + exp(w0 + \u03a3_i w_i \u00b7 log(x_i / ref_i))\n\n    Steps:\n      1. Normalize inputs and build design matrix M = [1 | log(x/ref)].\n      2. Initialize c \u2248 0.9\u00b7min(y).\n      3. Repeat up to max_iter:\n         a) y' = y \u2013 c  (clamp to >0)\n         b) y_log = log(y')\n         c) solve (M\u1d40M + R)\u00b7w = M\u1d40y_log  for w = [w0,w1..w4]\n            (R is diag([0, ridge,\u2026,ridge]) for stability)\n         d) preds_no_c = exp(M\u00b7w)\n         e) c = clip(mean(y \u2013 preds_no_c), [0, min(y)\u2013\u03b5])\n      4. Return params = [w0,w1..w4,c].\n\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n      max_iter:    number of ALS iterations\n      ridge:       ridge regularization weight\n\n    Returns:\n      params: array of length 6\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 features, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of losses must match number of data points\")\n\n    # avoid zeros\n    X = np.clip(X, _EPS, None)\n    y = np.clip(y, _EPS, None)\n\n    # build normalized log-features\n    logX = np.empty_like(X)\n    logX[:, 0] = np.log(X[:, 0] / _REF_LR)\n    logX[:, 1] = np.log(X[:, 1] / _REF_BSZ)\n    logX[:, 2] = np.log(X[:, 2] / _REF_DATA)\n    logX[:, 3] = np.log(X[:, 3] / _REF_PARAM)\n\n    # design matrix M = [1 | logX]  shape (N,5)\n    M = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # regularization matrix: no reg on intercept, ridge on other wi\n    R = np.diag(np.concatenate([[0.0], [ridge]*4]))\n\n    # initialize floor c\n    c = max(0.0, 0.9 * np.min(y))\n\n    w_vec = np.zeros(5, dtype=np.float64)\n    for _ in range(max_iter):\n        # subtract floor and clamp\n        y_adj = np.clip(y - c, _EPS, None)\n        y_log = np.log(y_adj)\n\n        # solve (M\u1d40M + R) w = M\u1d40 y_log\n        A = M.T.dot(M) + R        # (5,5)\n        b = M.T.dot(y_log)        # (5,)\n        w_vec = np.linalg.solve(A, b)\n\n        # update floor c\n        lin = M.dot(w_vec)        # (N,)\n        pred_no_c = np.exp(lin)\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - _EPS)\n\n    # assemble final params\n    params = np.empty(6, dtype=np.float64)\n    params[0:5] = w_vec\n    params[5]   = c\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "34a54cce-450d-4de5-9fbf-597a4947c048", "generation": 2, "timestamp": 1754802682.3548417, "iteration_found": 20, "metrics": {"nmse": 0.43704864882820943, "nmae": 0.5500923450313924, "r2": 0.5629513511717905, "combined_score": 0.6958706657672409}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "atleast_2d() got an unexpected keyword argument 'dtype'"}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: atleast_2d() got an unexpected keyword argument 'dtype'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: atleast_2d() got an unexpected keyword argument 'dtype'\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 5109385903936407163786756096.0000, nmae: 56333765835662.4766, r2: -5109385903936407163786756096.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4835, nmae: 0.6056, r2: 0.5165, combined_score: 0.6741\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5699)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss via a power\u2010law with additive floor:\n      y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_emb_params))\n           + c\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_params]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input features of width 4, got {X.shape[1]}\")\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    w0, w1, w2, w3, w4, c = p\n    # compute log\u2010space linear part\n    logX = np.log(X)\n    lin = w0 \\\n          + w1 * logX[:, 0] \\\n          + w2 * logX[:, 1] \\\n          + w3 * logX[:, 2] \\\n          + w4 * logX[:, 3]\n    y_pred = np.exp(lin) + c\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=5):\n    \"\"\"\n    Fit the 6\u2010parameter model by alternating least squares:\n      y = exp(w0 + \u03a3 wi\u00b7log(xi)) + c.\n\n    Steps:\n      1. Initialize c \u2248 0.9\u00b7min(y).\n      2. Repeat:\n         a) y' = y - c  (clamp > 0)\n         b) log(y') = w0 + \u03a3 wi\u00b7log(xi)  \u2192 solve by OLS in log\u2010space.\n         c) compute preds_without_c = exp(w0+\u03a3 wi\u00b7log(xi))\n         d) update c = mean(y - preds_without_c), clipped to [0, min(y)-\u03b5].\n      3. Return [w0, w1, w2, w3, w4, c].\n\n    Inputs:\n      data_points: shape (N,4)\n      loss_values: shape (N,)\n      max_iter:    number of ALS iterations (default=5)\n\n    Returns:\n      params: array of length 6\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 input dims, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Avoid zeros\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Precompute log features\n    logX = np.log(X)\n\n    # Initialize c just below minimum loss\n    c = 0.9 * np.min(y)\n\n    # Alternating least squares\n    for _ in range(max_iter):\n        # 1) subtract floor\n        y_adj = y - c\n        # clamp to positive\n        y_adj = np.clip(y_adj, eps, None)\n        # 2) fit linear model in log\u2010space: log(y_adj) \u2248 w0 + \u03a3 wi\u00b7logX\n        y_log = np.log(y_adj)\n        # design matrix: [1 | logX]\n        M = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # solve least squares for [w0, w1..w4]\n        w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n        # 3) compute predictions without c\n        lin = M.dot(w)\n        pred_no_c = np.exp(lin)\n        # 4) update c via mean residual, clipped to [0, min(y)-eps]\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - eps)\n\n    # Final parameters: [w0, w1, w2, w3, w4, c]\n    params = np.empty(6, dtype=float)\n    params[:5] = w\n    params[5] = c\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4835), Performs well on nmae (0.6056), Performs well on r2 (0.5165), Performs well on combined_score (0.6741)\n\n\n### Program 2 (Score: 14083441458915.6191)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (5109385903936407163786756096.0000), Performs well on nmae (56333765835662.4766), Performs well on r2 (-5109385903936407163786756096.0000), Performs well on combined_score (0.0000)\n\n\n### Program 3 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (atleast_2d() got an unexpected keyword argument 'dtype')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5699, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss via a power\u2010law with additive floor:\n      y\u0302 = exp(w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n               + w3\u00b7log(data_size) + w4\u00b7log(non_emb_params))\n           + c\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_params]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input features of width 4, got {X.shape[1]}\")\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    w0, w1, w2, w3, w4, c = p\n    # compute log\u2010space linear part\n    logX = np.log(X)\n    lin = w0 \\\n          + w1 * logX[:, 0] \\\n          + w2 * logX[:, 1] \\\n          + w3 * logX[:, 2] \\\n          + w4 * logX[:, 3]\n    y_pred = np.exp(lin) + c\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=5):\n    \"\"\"\n    Fit the 6\u2010parameter model by alternating least squares:\n      y = exp(w0 + \u03a3 wi\u00b7log(xi)) + c.\n\n    Steps:\n      1. Initialize c \u2248 0.9\u00b7min(y).\n      2. Repeat:\n         a) y' = y - c  (clamp > 0)\n         b) log(y') = w0 + \u03a3 wi\u00b7log(xi)  \u2192 solve by OLS in log\u2010space.\n         c) compute preds_without_c = exp(w0+\u03a3 wi\u00b7log(xi))\n         d) update c = mean(y - preds_without_c), clipped to [0, min(y)-\u03b5].\n      3. Return [w0, w1, w2, w3, w4, c].\n\n    Inputs:\n      data_points: shape (N,4)\n      loss_values: shape (N,)\n      max_iter:    number of ALS iterations (default=5)\n\n    Returns:\n      params: array of length 6\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 input dims, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Avoid zeros\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Precompute log features\n    logX = np.log(X)\n\n    # Initialize c just below minimum loss\n    c = 0.9 * np.min(y)\n\n    # Alternating least squares\n    for _ in range(max_iter):\n        # 1) subtract floor\n        y_adj = y - c\n        # clamp to positive\n        y_adj = np.clip(y_adj, eps, None)\n        # 2) fit linear model in log\u2010space: log(y_adj) \u2248 w0 + \u03a3 wi\u00b7logX\n        y_log = np.log(y_adj)\n        # design matrix: [1 | logX]\n        M = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N,5)\n        # solve least squares for [w0, w1..w4]\n        w, *_ = np.linalg.lstsq(M, y_log, rcond=None)\n        # 3) compute predictions without c\n        lin = M.dot(w)\n        pred_no_c = np.exp(lin)\n        # 4) update c via mean residual, clipped to [0, min(y)-eps]\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - eps)\n\n    # Final parameters: [w0, w1, w2, w3, w4, c]\n    params = np.empty(6, dtype=float)\n    params[:5] = w\n    params[5] = c\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 14083441458915.6191, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (5109385903936407163786756096.000), Excellent nmae (56333765835662.477), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Fixed reference values for normalization (constant, not data-dependent)\n_REF_LR    = 1e-3\n_REF_BSZ   = 512.0\n_REF_DATA  = 1e10\n_REF_PARAM = 1e8\n_EPS       = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss via a normalized power\u2010law with additive floor:\n      \u0177 = c + exp(w0 + \u03a3_i w_i \u00b7 log(x_i / ref_i))\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_emb_params]\n      params:      array of length 6 [w0, w1, w2, w3, w4, c]\n                   or shape (T,6) for T sets\n\n    Returns:\n      y_pred: shape (N,) if params is (6,), else (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 features, got {D}\")\n    # avoid log(0)\n    X = np.clip(X, _EPS, None)\n\n    # normalized log-features\n    logX = np.empty_like(X)\n    logX[:, 0] = np.log(X[:, 0] / _REF_LR)\n    logX[:, 1] = np.log(X[:, 1] / _REF_BSZ)\n    logX[:, 2] = np.log(X[:, 2] / _REF_DATA)\n    logX[:, 3] = np.log(X[:, 3] / _REF_PARAM)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected 6 parameters, got shape {p.shape}\")\n\n    # unpack\n    w0 = p[:, 0]         # (T,)\n    w_i = p[:, 1:5]      # (T,4)\n    c   = p[:, 5]        # (T,)\n\n    # compute linear part and exponentiate\n    # lin: (N, T)\n    lin = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(lin) + c[None, :]\n\n    # if single param set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=10, ridge=1e-6):\n    \"\"\"\n    Fit the 6-parameter model via alternating ridge\u2010regularized least squares:\n      \u0177 = c + exp(w0 + \u03a3_i w_i \u00b7 log(x_i / ref_i))\n\n    Steps:\n      1. Normalize inputs and build design matrix M = [1 | log(x/ref)].\n      2. Initialize c \u2248 0.9\u00b7min(y).\n      3. Repeat up to max_iter:\n         a) y' = y \u2013 c  (clamp to >0)\n         b) y_log = log(y')\n         c) solve (M\u1d40M + R)\u00b7w = M\u1d40y_log  for w = [w0,w1..w4]\n            (R is diag([0, ridge,\u2026,ridge]) for stability)\n         d) preds_no_c = exp(M\u00b7w)\n         e) c = clip(mean(y \u2013 preds_no_c), [0, min(y)\u2013\u03b5])\n      4. Return params = [w0,w1..w4,c].\n\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n      max_iter:    number of ALS iterations\n      ridge:       ridge regularization weight\n\n    Returns:\n      params: array of length 6\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, D = X.shape\n    if D != 4:\n        raise ValueError(f\"Expected 4 features, got {D}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of losses must match number of data points\")\n\n    # avoid zeros\n    X = np.clip(X, _EPS, None)\n    y = np.clip(y, _EPS, None)\n\n    # build normalized log-features\n    logX = np.empty_like(X)\n    logX[:, 0] = np.log(X[:, 0] / _REF_LR)\n    logX[:, 1] = np.log(X[:, 1] / _REF_BSZ)\n    logX[:, 2] = np.log(X[:, 2] / _REF_DATA)\n    logX[:, 3] = np.log(X[:, 3] / _REF_PARAM)\n\n    # design matrix M = [1 | logX]  shape (N,5)\n    M = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # regularization matrix: no reg on intercept, ridge on other wi\n    R = np.diag(np.concatenate([[0.0], [ridge]*4]))\n\n    # initialize floor c\n    c = max(0.0, 0.9 * np.min(y))\n\n    w_vec = np.zeros(5, dtype=np.float64)\n    for _ in range(max_iter):\n        # subtract floor and clamp\n        y_adj = np.clip(y - c, _EPS, None)\n        y_log = np.log(y_adj)\n\n        # solve (M\u1d40M + R) w = M\u1d40 y_log\n        A = M.T.dot(M) + R        # (5,5)\n        b = M.T.dot(y_log)        # (5,)\n        w_vec = np.linalg.solve(A, b)\n\n        # update floor c\n        lin = M.dot(w_vec)        # (N,)\n        pred_no_c = np.exp(lin)\n        resid = y - pred_no_c\n        c_new = np.mean(resid)\n        c = np.clip(c_new, 0.0, np.min(y) - _EPS)\n\n    # assemble final params\n    params = np.empty(6, dtype=np.float64)\n    params[0:5] = w_vec\n    params[5]   = c\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of Key Improvements:\n1. **Feature Normalization**: Each hyperparameter is divided by a fixed reference value before taking logs, improving numerical stability across different scales (learning rates \u2208 [1e-4,1e-2], batch sizes \u2208 [16,4096], etc.).\n2. **Ridge-Regularized ALS**: We solve for the 5 log-space weights via closed-form ridge-regularized least squares, which stabilizes the fit when data are collinear or limited.\n3. **Additive Floor Updates**: We alternate between fitting the log\u2010linear part and updating the additive floor `c`, as in the best \u201calternating least squares\u201d approach, but now with a simple linear solve rather than iterative nonlinear optimization.\n4. **No External Dependencies**: The fitting avoids SciPy\u2019s optimizers, relying purely on NumPy linear algebra for speed and portability."]}}}