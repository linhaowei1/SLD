{"id": "9e8af540-c8a6-4126-924a-5c8beda4f39a", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM hyperparameter performance:\n  loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz}\n                    * data_size^{e_data}\n                    * non_embedding_param_size^{e_model}\n\nWe fit six parameters [b, logA, e_lr, e_bsz, e_data, e_model]:\n  1) initialize via linear regression in log\u2010space,\n  2) refine with L-BFGS-B using analytic gradients,\n  3) multi-start to avoid poor local minima.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via:\n      loss = b + exp(logA) * lr^{e_lr} * bsz^{e_bsz}\n                       * data_size^{e_data}\n                       * non_embedding_param_size^{e_model}\n\n    Inputs:\n      data_points: array of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds:       array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expected shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # add epsilon for numerical stability\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute in log\u2010space\n    log_term = (\n        logA\n        + e_lr  * np.log(lr)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter scaling law by minimizing MSE in original loss space.\n\n    Inputs:\n      data_points: array of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: array of shape (N,) of observed LM loss.\n\n    Returns:\n      params: array of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n    N = X.shape[0]\n    # add epsilon\n    eps = 1e-12\n    # take logs of inputs once\n    logX = np.log(X + eps)  # shape (N,4)\n\n    # --- 1) INITIAL GUESS VIA LEAST-SQUARES IN LOG-SPACE ---\n    y_min, y_max = np.min(y), np.max(y)\n    # bias init just below min observed loss\n    b0 = max(0.0, 0.9 * y_min)\n    # target for LS: log(y - b0)\n    y_adj = np.clip(y - b0, eps, None)\n    y_log = np.log(y_adj)           # shape (N,)\n    # design matrix: [1, log(lr), log(bsz), log(data), log(model)]\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    # theta = [logA_init, e_lr_init, e_bsz_init, e_data_init, e_model_init]\n\n    init_ls = np.concatenate([[b0], theta])  # length-6\n\n    # --- 2) SECONDARY GUESS: uniform defaults ---\n    init_def = np.array([0.0, np.log(np.mean(y) + eps), -0.5, -0.5, -0.5, -0.5], dtype=np.float64)\n\n    # parameter bounds\n    bounds = [\n        (0.0, max(2.0 * y_max, 1.0)),  # b \u2208 [0, 2*max(y)]\n        (None, None),                  # logA unbounded\n        (-5.0, 5.0),                   # e_lr\n        (-5.0, 5.0),                   # e_bsz\n        (-5.0, 5.0),                   # e_data\n        (-5.0, 5.0),                   # e_model\n    ]\n\n    # --- 3) DEFINE OBJECTIVE & GRADIENT ---\n    def obj_and_grad(p):\n        b, logA, e1, e2, e3, e4 = p\n        # log\u2010term: logA + sum(e_i * logX[:,i])\n        log_t = logA \\\n              + e1 * logX[:,0] \\\n              + e2 * logX[:,1] \\\n              + e3 * logX[:,2] \\\n              + e4 * logX[:,3]\n        t = np.exp(log_t)\n        pred = b + t\n        resid = pred - y\n        loss = np.mean(resid * resid)\n        # gradients\n        grad = np.empty(6, dtype=np.float64)\n        grad[0] = 2.0 * np.mean(resid)            # \u2202/\u2202b\n        grad[1] = 2.0 * np.mean(resid * t)        # \u2202/\u2202logA\n        # \u2202/\u2202e_i = 2 * mean(resid * t * logX[:,i])\n        for i in range(4):\n            grad[2 + i] = 2.0 * np.mean(resid * t * logX[:, i])\n        return loss, grad\n\n    # --- 4) MULTI-START OPTIMIZATION ---\n    best_params = None\n    best_loss = np.inf\n    for init in (init_ls, init_def):\n        res = minimize(\n            fun=lambda p: obj_and_grad(p)[0],\n            x0=init,\n            jac=lambda p: obj_and_grad(p)[1],\n            bounds=bounds,\n            method='L-BFGS-B',\n            options={'ftol': 1e-12, 'maxiter': 1000}\n        )\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to LS-init if all fails\n    return best_params if best_params is not None else init_ls\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "66180a0c-615d-4c76-93f4-327411d72f45", "generation": 3, "timestamp": 1754803206.992817, "iteration_found": 42, "metrics": {"nmse": 33.61808658040422, "nmae": 7.61591720507065, "r2": -32.61808658040422, "combined_score": 0.028886634091615456}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 33.398016964353495, "nmae": 7.590108346856671, "r2": -32.398016964353495, "combined_score": 0.029071443305475876}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 33.3980\n- nmae: 7.5901\n- r2: -32.3980\n- combined_score: 0.0291\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 33.3980, nmae: 7.5901, r2: -32.3980, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 33.3679, nmae: 7.5866, r2: -32.3679, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 6.8005, nmae: 3.1948, r2: -5.8005, combined_score: 0.1282\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0807)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6-parameter scaling law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embed_param_size^{e_N}\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6: [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute the multiplicative term in log\u2010space for stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_D   * np.log(D) \\\n             + e_N   * np.log(Np)\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    eps = 1e-12\n\n    # Preliminary linear fit in log-space to get a good initial guess\n    y_min, y_max = y.min(), y.max()\n    b0 = max(0.0, y_min * 0.9)\n    z = np.clip(y - b0, eps, None)\n    Y = np.log(z)\n    logs = np.log(X + eps)                     # shape (N,4)\n    A_design = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,5)\n    theta_lin, *_ = np.linalg.lstsq(A_design, Y, rcond=None)\n    # two initializations\n    init1 = np.zeros(6, dtype=float)\n    init1[0]    = b0\n    init1[1:]   = theta_lin  # [logA, e_lr, e_bsz, e_D, e_N]\n    init2 = np.array([\n        0.0,\n        np.log(max(y.mean(), eps)),\n        -0.5, -0.5, -0.5, -0.5\n    ], dtype=float)\n\n    # bounds: b in [0,2*max(y)], logA unrestricted, exponents in [-5,5]\n    bounds = [\n        (0.0, max(y_max * 2, 1.0)),\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n    ]\n\n    # objective and gradient for L-BFGS-B\n    def obj_and_grad(p):\n        preds = scaling_law_func(X, p)\n        resid = preds - y\n        loss = np.mean(resid**2)\n        # compute gradient\n        b, logA, e_lr, e_bsz, e_D, e_N = p\n        lr   = X[:, 0] + eps\n        bsz  = X[:, 1] + eps\n        D    = X[:, 2] + eps\n        Np   = X[:, 3] + eps\n        log_lr   = np.log(lr)\n        log_bsz  = np.log(bsz)\n        log_D    = np.log(D)\n        log_Np   = np.log(Np)\n        term = np.exp(logA + e_lr*log_lr + e_bsz*log_bsz + e_D*log_D + e_N*log_Np)\n        # gradients\n        g_b     = 2.0 * np.mean(resid)\n        g_logA  = 2.0 * np.mean(resid * term)\n        g_e_lr  = 2.0 * np.mean(resid * term * log_lr)\n        g_e_bsz = 2.0 * np.mean(resid * term * log_bsz)\n        g_e_D   = 2.0 * np.mean(resid * term * log_D)\n        g_e_N   = 2.0 * np.mean(resid * term * log_Np)\n        grad = np.array([g_b, g_logA, g_e_lr, g_e_bsz, g_e_D, g_e_N], dtype=float)\n        return loss, grad\n\n    best_params = None\n    best_loss = np.inf\n    # multi-start\n    for p0 in (init1, init2):\n        res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                       x0=p0,\n                       jac=lambda p: obj_and_grad(p)[1],\n                       bounds=bounds,\n                       method='L-BFGS-B')\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n    # fallback\n    if best_params is None:\n        best_params = init1\n    return best_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (6.8005), Performs well on nmae (3.1948), Performs well on r2 (-5.8005), Performs well on combined_score (0.1282)\n\n\n### Program 2 (Score: 2.1539)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss using an additive\u2010bias power\u2010law model:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = params\n    # Add small epsilon to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # Compute power-law term in log\u2010space for numerical stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_data * np.log(D) \\\n             + e_model* np.log(Np)\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model to minimize MSE:\n      params = [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Uses a closed\u2010form log\u2010linear regression to initialize exponents,\n    then refines via L-BFGS-B with bounded exponents for stability.\n    Returns: optimized (6,) parameter array.\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n\n    # 1) Closed-form log\u2010linear regression (no additive bias)\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.column_stack([np.ones(len(y)), Z])  # design matrix (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    theta_ls, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    # theta_ls = [logA_init, e_lr_init, e_bsz_init, e_data_init, e_model_init]\n\n    # 2) Build initial parameter vector: b=0, rest from LS\n    init_params = np.zeros(6, dtype=float)\n    init_params[0] = 0.0            # b\n    init_params[1] = theta_ls[0]    # logA\n    init_params[2:] = theta_ls[1:]  # [e_lr, e_bsz, e_data, e_model]\n\n    # 3) Define bounds for stability\n    y_max = np.max(y)\n    bounds = [\n        (0.0, max(y_max, 1.0)),  # b >= 0\n        (None, None),            # logA free\n        (-5.0, 5.0),             # e_lr\n        (-5.0, 5.0),             # e_bsz\n        (-5.0, 5.0),             # e_data\n        (-5.0, 5.0),             # e_model\n    ]\n\n    # 4) Objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # 5) Optimize with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n\n    # Return optimized params or fallback to initial\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3679), Performs well on nmae (7.5866), Performs well on r2 (-32.3679), Performs well on combined_score (0.0291)\n\n\n### Program 3 (Score: 2.1548)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling law for LLM training:\n  loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embedding_param_size^{e_N}\nWe initialize via linear regression in log\u2010space, then refine parameters\nwith bounded L-BFGS-B on MSE. This improves numerical stability,\nspeeds convergence, and yields better generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # stabilize logs\n    eps = 1e-12\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target by fitting each column independently.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.asarray(loss_values, dtype=float)\n    # ensure 2D Y for uniform handling\n    if Y.ndim == 1:\n        Y = Y[:,None]\n    N, T = X.shape[0], Y.shape[1]\n\n    # Precompute log\u2010features\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    A_design = np.concatenate((np.ones((N,1)), logX), axis=1)  # (N,5)\n\n    def _fit_single(y_vec):\n        # Linear init in log\u2010space: y_vec \u2248 b + exp(\u03b80+...).\n        y_min, y_max = float(np.min(y_vec)), float(np.max(y_vec))\n        # initial bias b0\n        b0 = max(0.0, 0.5 * y_min)\n        # adjust target for LS\n        y_adj = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        y_log = np.log(y_adj)\n        # solve [1, log-features] * \u03b8_lin = y_log\n        theta_lin, *_ = np.linalg.lstsq(A_design, y_log, rcond=None)\n        # unpack\n        logA0 = float(theta_lin[0])\n        e0     = theta_lin[1:].astype(float)  # length\u20104\n\n        # assemble initial param vector\n        init = np.array([b0, logA0, *e0], dtype=float)\n\n        # bounds for [b, logA, e_lr, e_bsz, e_D, e_N]\n        bounds = [\n            (0.0, y_min),        # b \u2208 [0, min(y)]\n            (None, None),        # logA unbounded\n            (-3.0, 3.0),         # e_lr\n            (-3.0, 3.0),         # e_bsz\n            (-3.0, 3.0),         # e_data\n            (-3.0, 3.0),         # e_model\n        ]\n\n        # objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n\n        # refine via L-BFGS-B\n        res = minimize(obj, init, method='L-BFGS-B', bounds=bounds,\n                       options={'ftol':1e-12, 'gtol':1e-8})\n        if res.success:\n            return res.x\n        else:\n            # fallback to initial guess if optimization fails\n            return init\n\n    # Fit each target dimension independently\n    if T == 1:\n        return _fit_single(Y[:,0])\n    else:\n        params = [ _fit_single(Y[:,i]) for i in range(T) ]\n        return np.vstack(params)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3980), Performs well on nmae (7.5901), Performs well on r2 (-32.3980), Performs well on combined_score (0.0291)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.1749)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM hyperparameter tuning.\n\nModel:\n  loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data}\n               * non_embedding_param_size^{e_model}\n\nParameter vector `p` = [b, logA, e_lr, e_bsz, e_data, e_model].\n\nWe fit by:\n  1. Ridge\u2010regularized OLS in log\u2010space for a good initialization.\n  2. Multi\u2010start L-BFGS-B with analytic gradients to minimize MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law + bias.\n\n    Inputs:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Unpack\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    # Compute in log\u2010space for stability\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law by minimizing MSE.\n\n    Inputs:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: length\u2010N (or N\u00d7T) array of observed lm losses\n    Returns:\n      params: length\u20106 array (or T\u00d76 array for multi\u2010target) of optimized parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Make y 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, _ = X.shape\n    eps = 1e-12\n    # Precompute log\u2010features\n    logX = np.log(X + eps)  # shape (N,4)\n\n    def _fit_single(y_vec):\n        # Basic statistics\n        y_min, y_max = y_vec.min(), y_vec.max()\n        # Bias init: slightly below the smallest observed loss\n        b0 = max(0.0, y_min - 0.05 * (y_max - y_min))\n        # --- Ridge init in log\u2010space ---\n        # A @ theta \u2248 log(y_vec - b0)\n        Z = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        A = np.hstack([np.ones((N,1)), logX])      # (N,5)\n        y_log = np.log(Z)                          # (N,)\n        lam = 1e-6\n        ATA = A.T.dot(A) + lam * np.eye(5)\n        ATy = A.T.dot(y_log)\n        theta_init = np.linalg.solve(ATA, ATy)     # (5,)\n        # Build two candidate initializations for full fit\n        init1 = np.concatenate([[b0], theta_init])  # [b, logA, e_lr, e_bsz, e_data, e_model]\n        init2 = np.array([\n            b0,\n            np.log(max(y_vec.mean(), eps)),\n            -0.5, -0.5, -0.5, -0.5\n        ], dtype=float)\n        # Parameter bounds\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b\n            (None, None),                  # logA\n            (-10.0, 10.0),                 # e_lr\n            (-10.0, 10.0),                 # e_bsz\n            (-10.0, 10.0),                 # e_data\n            (-10.0, 10.0),                 # e_model\n        ]\n        best_p, best_loss = None, np.inf\n\n        # Objective and analytic gradient for MSE\n        def obj_and_grad(p):\n            b, logA, e1, e2, e3, e4 = p\n            # log_term = logA + sum(e_i * logX_i)\n            log_t = (\n                logA\n                + e1 * logX[:,0]\n                + e2 * logX[:,1]\n                + e3 * logX[:,2]\n                + e4 * logX[:,3]\n            )\n            t = np.exp(log_t)\n            pred = b + t\n            resid = pred - y_vec\n            loss = np.mean(resid**2)\n            # Gradients\n            grad = np.zeros(6, dtype=float)\n            grad[0] = 2.0 * np.mean(resid)               # \u2202/\u2202b\n            grad[1] = 2.0 * np.mean(resid * t)           # \u2202/\u2202logA\n            grad[2] = 2.0 * np.mean(resid * t * logX[:,0])\n            grad[3] = 2.0 * np.mean(resid * t * logX[:,1])\n            grad[4] = 2.0 * np.mean(resid * t * logX[:,2])\n            grad[5] = 2.0 * np.mean(resid * t * logX[:,3])\n            return loss, grad\n\n        # Multi\u2010start optimization\n        for p0 in (init1, init2):\n            try:\n                res = minimize(\n                    fun=lambda p: obj_and_grad(p)[0],\n                    x0=p0,\n                    jac=lambda p: obj_and_grad(p)[1],\n                    bounds=bounds,\n                    method='L-BFGS-B',\n                    options={'maxiter': 1000}\n                )\n            except Exception:\n                continue\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n\n        # Fallback if none succeeded\n        if best_p is None:\n            best_p = init1\n        return best_p\n\n    # Fit each output dimension\n    all_params = [_fit_single(y2d[:,i]) for i in range(y2d.shape[1])]\n    all_params = np.vstack(all_params)\n    return all_params[0] if all_params.shape[0] == 1 else all_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed_p^{e_model}\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # numerical stability\n    eps = 1e-12\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr  + eps)\n        + e_bsz  * np.log(bsz + eps)\n        + e_data * np.log(D    + eps)\n        + e_model*np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE with bounded L-BFGS-B.\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    # loss range for initializing bias and amplitude\n    y_min, y_max = np.min(y), np.max(y)\n\n    # two candidate initial guesses\n    inits = [\n        np.array([max(0.0, 0.5*y_min), np.log(max(1e-3, y_max - y_min)), -0.5, -0.5, -0.5, -0.5], dtype=float),\n        np.array([0.0,               np.log(max(1e-3, y_max)),         -1.0, -1.0, -0.1, -0.1], dtype=float),\n    ]\n\n    # bounds for parameters\n    bounds = [\n        (0.0,         max(1.0, 2.0*y_max)),  # bias b \u2265 0\n        (None,        None),                 # logA unbounded\n        (-5.0,        5.0),                  # exponent on lr\n        (-5.0,        5.0),                  # exponent on bsz\n        (-5.0,        5.0),                  # exponent on data_size\n        (-5.0,        5.0),                  # exponent on non_embedding_param_size\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2.0)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to first init if optimization fails\n    if best_params is None:\n        best_params = inits[0].copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0807, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6-parameter scaling law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embed_param_size^{e_N}\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6: [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute the multiplicative term in log\u2010space for stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_D   * np.log(D) \\\n             + e_N   * np.log(Np)\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    eps = 1e-12\n\n    # Preliminary linear fit in log-space to get a good initial guess\n    y_min, y_max = y.min(), y.max()\n    b0 = max(0.0, y_min * 0.9)\n    z = np.clip(y - b0, eps, None)\n    Y = np.log(z)\n    logs = np.log(X + eps)                     # shape (N,4)\n    A_design = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,5)\n    theta_lin, *_ = np.linalg.lstsq(A_design, Y, rcond=None)\n    # two initializations\n    init1 = np.zeros(6, dtype=float)\n    init1[0]    = b0\n    init1[1:]   = theta_lin  # [logA, e_lr, e_bsz, e_D, e_N]\n    init2 = np.array([\n        0.0,\n        np.log(max(y.mean(), eps)),\n        -0.5, -0.5, -0.5, -0.5\n    ], dtype=float)\n\n    # bounds: b in [0,2*max(y)], logA unrestricted, exponents in [-5,5]\n    bounds = [\n        (0.0, max(y_max * 2, 1.0)),\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n    ]\n\n    # objective and gradient for L-BFGS-B\n    def obj_and_grad(p):\n        preds = scaling_law_func(X, p)\n        resid = preds - y\n        loss = np.mean(resid**2)\n        # compute gradient\n        b, logA, e_lr, e_bsz, e_D, e_N = p\n        lr   = X[:, 0] + eps\n        bsz  = X[:, 1] + eps\n        D    = X[:, 2] + eps\n        Np   = X[:, 3] + eps\n        log_lr   = np.log(lr)\n        log_bsz  = np.log(bsz)\n        log_D    = np.log(D)\n        log_Np   = np.log(Np)\n        term = np.exp(logA + e_lr*log_lr + e_bsz*log_bsz + e_D*log_D + e_N*log_Np)\n        # gradients\n        g_b     = 2.0 * np.mean(resid)\n        g_logA  = 2.0 * np.mean(resid * term)\n        g_e_lr  = 2.0 * np.mean(resid * term * log_lr)\n        g_e_bsz = 2.0 * np.mean(resid * term * log_bsz)\n        g_e_D   = 2.0 * np.mean(resid * term * log_D)\n        g_e_N   = 2.0 * np.mean(resid * term * log_Np)\n        grad = np.array([g_b, g_logA, g_e_lr, g_e_bsz, g_e_D, g_e_N], dtype=float)\n        return loss, grad\n\n    best_params = None\n    best_loss = np.inf\n    # multi-start\n    for p0 in (init1, init2):\n        res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                       x0=p0,\n                       jac=lambda p: obj_and_grad(p)[1],\n                       bounds=bounds,\n                       method='L-BFGS-B')\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n    # fallback\n    if best_params is None:\n        best_params = init1\n    return best_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.800), Excellent nmae (3.195)\n\n\n### Inspiration 2 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6-parameter multiplicative power law plus bias:\n      Loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed_p^{e_model}\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # unpack features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    # numerical stability\n    eps = 1e-12\n    # compute log-term\n    log_term = (\n        logA\n        + e_lr   * np.log(lr  + eps)\n        + e_bsz  * np.log(bsz + eps)\n        + e_data * np.log(D    + eps)\n        + e_model*np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE with bounded L-BFGS-B.\n    Returns:\n      params: array of length 6 [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n\n    # loss range for initializing bias and amplitude\n    y_min, y_max = np.min(y), np.max(y)\n\n    # two candidate initial guesses\n    inits = [\n        np.array([max(0.0, 0.5*y_min), np.log(max(1e-3, y_max - y_min)), -0.5, -0.5, -0.5, -0.5], dtype=float),\n        np.array([0.0,               np.log(max(1e-3, y_max)),         -1.0, -1.0, -0.1, -0.1], dtype=float),\n    ]\n\n    # bounds for parameters\n    bounds = [\n        (0.0,         max(1.0, 2.0*y_max)),  # bias b \u2265 0\n        (None,        None),                 # logA unbounded\n        (-5.0,        5.0),                  # exponent on lr\n        (-5.0,        5.0),                  # exponent on bsz\n        (-5.0,        5.0),                  # exponent on data_size\n        (-5.0,        5.0),                  # exponent on non_embedding_param_size\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2.0)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to first init if optimization fails\n    if best_params is None:\n        best_params = inits[0].copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling law for LLM training:\n  loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embedding_param_size^{e_N}\nWe initialize via linear regression in log\u2010space, then refine parameters\nwith bounded L-BFGS-B on MSE. This improves numerical stability,\nspeeds convergence, and yields better generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # stabilize logs\n    eps = 1e-12\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target by fitting each column independently.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.asarray(loss_values, dtype=float)\n    # ensure 2D Y for uniform handling\n    if Y.ndim == 1:\n        Y = Y[:,None]\n    N, T = X.shape[0], Y.shape[1]\n\n    # Precompute log\u2010features\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    A_design = np.concatenate((np.ones((N,1)), logX), axis=1)  # (N,5)\n\n    def _fit_single(y_vec):\n        # Linear init in log\u2010space: y_vec \u2248 b + exp(\u03b80+...).\n        y_min, y_max = float(np.min(y_vec)), float(np.max(y_vec))\n        # initial bias b0\n        b0 = max(0.0, 0.5 * y_min)\n        # adjust target for LS\n        y_adj = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        y_log = np.log(y_adj)\n        # solve [1, log-features] * \u03b8_lin = y_log\n        theta_lin, *_ = np.linalg.lstsq(A_design, y_log, rcond=None)\n        # unpack\n        logA0 = float(theta_lin[0])\n        e0     = theta_lin[1:].astype(float)  # length\u20104\n\n        # assemble initial param vector\n        init = np.array([b0, logA0, *e0], dtype=float)\n\n        # bounds for [b, logA, e_lr, e_bsz, e_D, e_N]\n        bounds = [\n            (0.0, y_min),        # b \u2208 [0, min(y)]\n            (None, None),        # logA unbounded\n            (-3.0, 3.0),         # e_lr\n            (-3.0, 3.0),         # e_bsz\n            (-3.0, 3.0),         # e_data\n            (-3.0, 3.0),         # e_model\n        ]\n\n        # objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n\n        # refine via L-BFGS-B\n        res = minimize(obj, init, method='L-BFGS-B', bounds=bounds,\n                       options={'ftol':1e-12, 'gtol':1e-8})\n        if res.success:\n            return res.x\n        else:\n            # fallback to initial guess if optimization fails\n            return init\n\n    # Fit each target dimension independently\n    if T == 1:\n        return _fit_single(Y[:,0])\n    else:\n        params = [ _fit_single(Y[:,i]) for i in range(T) ]\n        return np.vstack(params)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM hyperparameter performance:\n  loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz}\n                    * data_size^{e_data}\n                    * non_embedding_param_size^{e_model}\n\nWe fit six parameters [b, logA, e_lr, e_bsz, e_data, e_model]:\n  1) initialize via linear regression in log\u2010space,\n  2) refine with L-BFGS-B using analytic gradients,\n  3) multi-start to avoid poor local minima.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters via:\n      loss = b + exp(logA) * lr^{e_lr} * bsz^{e_bsz}\n                       * data_size^{e_data}\n                       * non_embedding_param_size^{e_model}\n\n    Inputs:\n      data_points: array of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    Returns:\n      preds:       array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expected shape (N,4), got {X.shape}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # add epsilon for numerical stability\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute in log\u2010space\n    log_term = (\n        logA\n        + e_lr  * np.log(lr)\n        + e_bsz * np.log(bsz)\n        + e_D   * np.log(D)\n        + e_N   * np.log(Np)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the six-parameter scaling law by minimizing MSE in original loss space.\n\n    Inputs:\n      data_points: array of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: array of shape (N,) of observed LM loss.\n\n    Returns:\n      params: array of length 6: [b, logA, e_lr, e_bsz, e_data, e_model]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of loss_values must match number of data_points\")\n    N = X.shape[0]\n    # add epsilon\n    eps = 1e-12\n    # take logs of inputs once\n    logX = np.log(X + eps)  # shape (N,4)\n\n    # --- 1) INITIAL GUESS VIA LEAST-SQUARES IN LOG-SPACE ---\n    y_min, y_max = np.min(y), np.max(y)\n    # bias init just below min observed loss\n    b0 = max(0.0, 0.9 * y_min)\n    # target for LS: log(y - b0)\n    y_adj = np.clip(y - b0, eps, None)\n    y_log = np.log(y_adj)           # shape (N,)\n    # design matrix: [1, log(lr), log(bsz), log(data), log(model)]\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    # theta = [logA_init, e_lr_init, e_bsz_init, e_data_init, e_model_init]\n\n    init_ls = np.concatenate([[b0], theta])  # length-6\n\n    # --- 2) SECONDARY GUESS: uniform defaults ---\n    init_def = np.array([0.0, np.log(np.mean(y) + eps), -0.5, -0.5, -0.5, -0.5], dtype=np.float64)\n\n    # parameter bounds\n    bounds = [\n        (0.0, max(2.0 * y_max, 1.0)),  # b \u2208 [0, 2*max(y)]\n        (None, None),                  # logA unbounded\n        (-5.0, 5.0),                   # e_lr\n        (-5.0, 5.0),                   # e_bsz\n        (-5.0, 5.0),                   # e_data\n        (-5.0, 5.0),                   # e_model\n    ]\n\n    # --- 3) DEFINE OBJECTIVE & GRADIENT ---\n    def obj_and_grad(p):\n        b, logA, e1, e2, e3, e4 = p\n        # log\u2010term: logA + sum(e_i * logX[:,i])\n        log_t = logA \\\n              + e1 * logX[:,0] \\\n              + e2 * logX[:,1] \\\n              + e3 * logX[:,2] \\\n              + e4 * logX[:,3]\n        t = np.exp(log_t)\n        pred = b + t\n        resid = pred - y\n        loss = np.mean(resid * resid)\n        # gradients\n        grad = np.empty(6, dtype=np.float64)\n        grad[0] = 2.0 * np.mean(resid)            # \u2202/\u2202b\n        grad[1] = 2.0 * np.mean(resid * t)        # \u2202/\u2202logA\n        # \u2202/\u2202e_i = 2 * mean(resid * t * logX[:,i])\n        for i in range(4):\n            grad[2 + i] = 2.0 * np.mean(resid * t * logX[:, i])\n        return loss, grad\n\n    # --- 4) MULTI-START OPTIMIZATION ---\n    best_params = None\n    best_loss = np.inf\n    for init in (init_ls, init_def):\n        res = minimize(\n            fun=lambda p: obj_and_grad(p)[0],\n            x0=init,\n            jac=lambda p: obj_and_grad(p)[1],\n            bounds=bounds,\n            method='L-BFGS-B',\n            options={'ftol': 1e-12, 'maxiter': 1000}\n        )\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # fallback to LS-init if all fails\n    return best_params if best_params is not None else init_ls\n# EVOLVE-BLOCK-END\n```"]}}}