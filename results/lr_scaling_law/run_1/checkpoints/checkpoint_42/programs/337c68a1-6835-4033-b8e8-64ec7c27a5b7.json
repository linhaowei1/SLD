{"id": "337c68a1-6835-4033-b8e8-64ec7c27a5b7", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended log\u2013linear model\n    with an interaction term between data size and model size.\n\n    Model:\n      log(loss) = p0\n                + p1\u00b7log(lr)\n                + p2\u00b7log(bsz)\n                + p3\u00b7log(data_size)\n                + p4\u00b7log(param_size)\n                + p5\u00b7[log(data_size) * log(param_size)]\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6), where\n                     params[...,0] = intercept p0\n                     params[...,1:] = slopes [p1, p2, p3, p4, p5]\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6))\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Compute log-features\n    log_lr, log_bsz, log_data, log_param = np.log(X).T\n    # Interaction term\n    interact = log_data * log_param\n\n    # Stack features into design matrix B: shape (N,6)\n    N = X.shape[0]\n    B = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        interact\n    ])  # (N,6)\n\n    # Prepare params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # (1,6)\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params of shape (6,) or (T,6), got {p.shape}\")\n\n    # Compute log-predictions: shape (N,T)\n    log_pred = B.dot(p.T)  # (N,T)\n    loss_pred = np.exp(log_pred)\n\n    # If single parameter vector, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013linear model with data/model-size interaction\n    via ridge-regularized least squares in log-space:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size),\n               log(data_size)*log(param_size)].\n\n    Returns:\n      params: array of shape (6,) = [p0, p1, p2, p3, p4, p5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Compute log-features\n    log_lr, log_bsz, log_data, log_param = np.log(X).T\n    interact = log_data * log_param\n\n    # Build design matrix A: shape (N,6)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        interact\n    ])  # (N,6)\n\n    # Target is log-loss\n    logy = np.log(y)\n\n    # Small ridge for numerical stability\n    alpha = 1e-4\n    ATA = A.T.dot(A)\n    reg = np.eye(ATA.shape[0], dtype=float) * alpha\n\n    # Solve (A^T A + \u03b1I) w = A^T logy\n    w = np.linalg.solve(ATA + reg, A.T.dot(logy))\n    return w  # shape (6,)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2faf5f44-8630-44d5-991b-7b16cc183a45", "generation": 3, "timestamp": 1754801953.7520628, "iteration_found": 18, "metrics": {"nmse": 184.6886311495463, "nmae": 18.11364195667549, "r2": -183.6886311495463, "combined_score": 0.0053853593179575944}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.98774453498524, "nmae": 14.128391668137256, "r2": -111.98774453498524, "combined_score": 0.008772872944188126}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9877\n- nmae: 14.1284\n- r2: -111.9877\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 112.9877, nmae: 14.1284, r2: -111.9877, combined_score: 0.0088\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9877), Performs well on nmae (14.1284), Performs well on r2 (-111.9877), Performs well on combined_score (0.0088)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended log\u2013linear model\n    with an interaction term between data size and model size.\n\n    Model:\n      log(loss) = p0\n                + p1\u00b7log(lr)\n                + p2\u00b7log(bsz)\n                + p3\u00b7log(data_size)\n                + p4\u00b7log(param_size)\n                + p5\u00b7[log(data_size) * log(param_size)]\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6), where\n                     params[...,0] = intercept p0\n                     params[...,1:] = slopes [p1, p2, p3, p4, p5]\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6))\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Compute log-features\n    log_lr, log_bsz, log_data, log_param = np.log(X).T\n    # Interaction term\n    interact = log_data * log_param\n\n    # Stack features into design matrix B: shape (N,6)\n    N = X.shape[0]\n    B = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        interact\n    ])  # (N,6)\n\n    # Prepare params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # (1,6)\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params of shape (6,) or (T,6), got {p.shape}\")\n\n    # Compute log-predictions: shape (N,T)\n    log_pred = B.dot(p.T)  # (N,T)\n    loss_pred = np.exp(log_pred)\n\n    # If single parameter vector, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013linear model with data/model-size interaction\n    via ridge-regularized least squares in log-space:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size),\n               log(data_size)*log(param_size)].\n\n    Returns:\n      params: array of shape (6,) = [p0, p1, p2, p3, p4, p5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Compute log-features\n    log_lr, log_bsz, log_data, log_param = np.log(X).T\n    interact = log_data * log_param\n\n    # Build design matrix A: shape (N,6)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        interact\n    ])  # (N,6)\n\n    # Target is log-loss\n    logy = np.log(y)\n\n    # Small ridge for numerical stability\n    alpha = 1e-4\n    ATA = A.T.dot(A)\n    reg = np.eye(ATA.shape[0], dtype=float) * alpha\n\n    # Solve (A^T A + \u03b1I) w = A^T logy\n    w = np.linalg.solve(ATA + reg, A.T.dot(logy))\n    return w  # shape (6,)\n# EVOLVE-BLOCK-END\n```"]}}}