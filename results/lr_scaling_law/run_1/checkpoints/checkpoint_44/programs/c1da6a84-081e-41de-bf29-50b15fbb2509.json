{"id": "c1da6a84-081e-41de-bf29-50b15fbb2509", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss.\n\nWe retain the familiar power\u2010law form\n   L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\n\nImprovements over the naive implementation:\n  1. Numerically stable linear algebra via ridge (Tikhonov) regularization\n     when fitting in log\u2010space: avoids ill\u2010conditioning on skewed hyperparameter scales.\n  2. Unified, concise handling of both single\u2010 and multi\u2010set parameter arrays.\n  3. Minimal eps added to logs to ensure safety without noticeable bias.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law scaling law.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length >=5: [a0, a1, a2, a3, a4, ...]\n        - or 2D array of shape (T, >=5) for T independent models in parallel.\n\n    Returns:\n      If params is 1D: returns array of shape (N,)\n      If params is 2D: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    # Take logs safely\n    eps = 1e-12\n    logX = np.log(X + eps)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size < 5:\n            raise ValueError(f\"params must have at least 5 elements, got {p.size}\")\n        a0 = p[0]\n        slopes = p[1:5]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P < 5:\n            raise ValueError(f\"params must have at least 5 columns, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:5]        # shape (T,4)\n        # compute for each t in T: log_pred[:,t] = a0[t] + logX @ slopes[t]\n        # which is logX @ slopes.T  + a0[None,:]\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear (power\u2010law) model via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || A @ p - log(y) ||^2 + \u03bb ||p||^2\n      where A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n\n    # Logs with tiny epsilon for safety\n    eps = 1e-12\n    logX = np.log(X + eps)    # shape (N,4)\n    logy = np.log(y + eps)    # shape (N,)\n\n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    D = A.shape[1]\n\n    # Compute normal equations with ridge regularization\n    #   (A^T A + \u03bb I) p = A^T logy\n    H = A.T.dot(A)                     # shape (5,5)\n    # Choose \u03bb relative to average scale of H\n    trace_H = np.trace(H)\n    lam = 1e-6 * (trace_H / D)         # small regularization\n    rhs = A.T.dot(logy)                # shape (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(H + lam * np.eye(D), rhs)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "70917201-9871-4702-89a9-9c1522c34008", "generation": 2, "timestamp": 1754801972.016931, "iteration_found": 23, "metrics": {"nmse": 31.88552654208055, "nmae": 7.360034858702142, "r2": -30.88552654208055, "combined_score": 0.0304085141747812}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.9881536359387, "nmae": 14.128417620739429, "r2": -111.9881536359387, "combined_score": 0.008772841458541842}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 112.9882, nmae: 14.1284, r2: -111.9882, combined_score: 0.0088\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n\n### Program 2 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (112.9882), Performs well on nmae (14.1284), Performs well on r2 (-111.9882), Performs well on combined_score (0.0088)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss.\n\nWe retain the familiar power\u2010law form\n   L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\n\nImprovements over the naive implementation:\n  1. Numerically stable linear algebra via ridge (Tikhonov) regularization\n     when fitting in log\u2010space: avoids ill\u2010conditioning on skewed hyperparameter scales.\n  2. Unified, concise handling of both single\u2010 and multi\u2010set parameter arrays.\n  3. Minimal eps added to logs to ensure safety without noticeable bias.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law scaling law.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length >=5: [a0, a1, a2, a3, a4, ...]\n        - or 2D array of shape (T, >=5) for T independent models in parallel.\n\n    Returns:\n      If params is 1D: returns array of shape (N,)\n      If params is 2D: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    # Take logs safely\n    eps = 1e-12\n    logX = np.log(X + eps)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size < 5:\n            raise ValueError(f\"params must have at least 5 elements, got {p.size}\")\n        a0 = p[0]\n        slopes = p[1:5]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P < 5:\n            raise ValueError(f\"params must have at least 5 columns, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:5]        # shape (T,4)\n        # compute for each t in T: log_pred[:,t] = a0[t] + logX @ slopes[t]\n        # which is logX @ slopes.T  + a0[None,:]\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5\u2010parameter log\u2010linear (power\u2010law) model via ridge\u2010regularized\n    least squares in log\u2010space:\n\n      minimize || A @ p - log(y) ||^2 + \u03bb ||p||^2\n      where A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n\n    # Logs with tiny epsilon for safety\n    eps = 1e-12\n    logX = np.log(X + eps)    # shape (N,4)\n    logy = np.log(y + eps)    # shape (N,)\n\n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    D = A.shape[1]\n\n    # Compute normal equations with ridge regularization\n    #   (A^T A + \u03bb I) p = A^T logy\n    H = A.T.dot(A)                     # shape (5,5)\n    # Choose \u03bb relative to average scale of H\n    trace_H = np.trace(H)\n    lam = 1e-6 * (trace_H / D)         # small regularization\n    rhs = A.T.dot(logy)                # shape (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(H + lam * np.eye(D), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}