{"id": "b39f3f9e-c73d-449b-96f1-ac44c0d96380", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a two\u2010term power\u2010law with a floor:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    implemented in log\u2010space for numerical stability using logaddexp:\n      A = logk + \u03a3_i \u03b1_i * log(x_i)\n      B = logc\n      logpred = logaddexp(A, B)\n      loss = exp(logpred)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6): [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    # prepare input\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)  # shape (N,4)\n\n    # prepare params\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack\n    logk    = p[:, 0]           # (T,)\n    alphas  = p[:, 1:1+F]       # (T,4)\n    logc    = p[:, -1]          # (T,)\n\n    # compute A = logk + \u03a3 \u03b1_i * logX\n    A = logX.dot(alphas.T) + logk[None, :]    # (N, T)\n    B = logc[None, :]                          # (1, T)\n\n    # logaddexp for stability: log(e^A + e^B)\n    logpred = np.logaddexp(A, B)              # (N, T)\n    preds = np.exp(logpred)                   # (N, T)\n\n    # return in correct shape\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law with floor:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    by minimizing MSE in original loss\u2010space with L-BFGS-B and analytic gradient.\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    # prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)  # (N,4)\n\n    # initialize floor parameter c0 just below the minimum of y\n    min_y = np.min(y)\n    init_logc = np.log(0.5 * min_y + eps)\n\n    # adjust targets for initial linear fit: y_adj = y - c0\n    c0 = np.exp(init_logc)\n    y_adj = y - c0\n    y_adj = np.clip(y_adj, eps, None)\n\n    # linear regression in log-space to get logk and alphas\n    A_lin = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, 1+F)\n    sol, *_ = np.linalg.lstsq(A_lin, np.log(y_adj), rcond=None)\n    init_logk = sol[0]\n    init_alphas = sol[1:]  # length F\n\n    # pack initial parameters\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))\n\n    # bounds: keep exponents in a reasonable range, and floor below 0.9*min(y)\n    bounds = [(None, None)] + [(-10.0, 10.0)] * F + [(None, np.log(0.9 * min_y + eps))]\n\n    # objective and analytic gradient\n    def obj_and_grad(p):\n        logk = p[0]\n        alphas = p[1:1+F]\n        logc = p[-1]\n\n        # forward pass\n        A_val = logX.dot(alphas) + logk    # (N,)\n        expA = np.exp(A_val)               # (N,)\n        c0 = np.exp(logc)                  # scalar\n        pred = expA + c0                   # (N,)\n        diff = pred - y                    # (N,)\n\n        # MSE\n        mse = np.mean(diff * diff)\n\n        # gradient\n        coef = 2.0 / N * diff              # (N,)\n        grad_logk = np.sum(coef * expA)\n        grad_alphas = logX.T.dot(coef * expA)\n        grad_logc = np.sum(coef * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    # optimize with L-BFGS-B\n    result = minimize(\n        fun=lambda p: obj_and_grad(p)[0],\n        x0=init_params,\n        jac=lambda p: obj_and_grad(p)[1],\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params", "language": "python", "parent_id": "eab995e9-6381-4466-98af-8f9ec588fc1f", "generation": 2, "timestamp": 1754798991.1005027, "iteration_found": 38, "metrics": {"nmse": 50.18511055000259, "nmae": 9.541380972037933, "r2": -49.18511055000259, "combined_score": 0.019536931526661503}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 165.00324575865645, "nmae": 17.3975027158323, "r2": -164.00324575865645, "combined_score": 0.00602397860011634}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 165.0032\n- nmae: 17.3975\n- r2: -164.0032\n- combined_score: 0.0060\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 158.4916, nmae: 17.0489, r2: -157.4916, combined_score: 0.0063\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 50.1845, nmae: 9.5413, r2: -49.1845, combined_score: 0.0195\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 49.7975, nmae: 9.5038, r2: -48.7975, combined_score: 0.0197\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.6309)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Two\u2010term power law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    Implemented in log\u2010space for stability:\n      log_term = logk + \u03a3_i \u03b1_i * log(x_i)\n      loss = exp(log_term) + exp(logc)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6): [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, D = X.shape  # D should be 4\n\n    P = np.asarray(params, dtype=float)\n    if P.ndim == 1:\n        P = P[None, :]\n    T, npars = P.shape\n    if npars != D + 2:\n        raise ValueError(f\"Expected {D+2} params, got {npars}\")\n\n    logk   = P[:, 0]           # shape (T,)\n    alphas = P[:, 1:1+D]       # shape (T,D)\n    logc   = P[:, -1]          # shape (T,)\n\n    # Prevent log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)      # shape (N,D)\n\n    # Compute power\u2010law term in log space\n    # log_term[n,t] = logk[t] + \u03a3_i alphas[t,i] * logX[n,i]\n    log_term = logX.dot(alphas.T) + logk[None, :]\n    term = np.exp(log_term)    # shape (N,T)\n    floor = np.exp(logc)[None, :]  # shape (1,T)\n\n    loss_pred = term + floor     # shape (N,T)\n    if T == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    by minimizing MSE in loss space with L-BFGS-B.\n    Returns params = [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n\n    # Ensure positivity\n    y = np.clip(y, 1e-8, None)\n\n    # Initialize floor c0 just below min(y)\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    if np.any(y_adj <= 0):\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    y_adj = np.clip(y_adj, 1e-8, None)\n\n    # Fit log(y_adj) \u2248 logk + \u03a3 \u03b1_i * log(x_i) by linear regression\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)       # (N,D)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, D+1)\n    sol, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]        # length D\n\n    # Initial parameter vector\n    p0 = np.concatenate([\n        [logk_init],\n        alpha_init,\n        [np.log(c0)]\n    ])  # length D+2\n\n    # Bounds: exponents in [-5,5], floor logc \u2264 log(min(y)*0.9)\n    bounds = [(None, None)] + [(-5.0, 5.0)] * D + [(None, np.log(np.min(y) * 0.9))]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (49.7975), Performs well on nmae (9.5038), Performs well on r2 (-48.7975), Performs well on combined_score (0.0197)\n\n\n### Program 2 (Score: 2.6402)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a two\u2010term power\u2010law with a floor:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n\n    Arguments:\n      data_points: array of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       array of shape (6,) or (T,6), where each row is\n                    [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n\n    Returns:\n      preds: array of shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Ensure positivity for the log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n\n    p_arr = np.asarray(params, dtype=float)\n    # unify shape to (T,6)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]\n    T, P = p_arr.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk    = p_arr[:, 0]           # (T,)\n    alphas  = p_arr[:, 1:1+F]       # (T,4)\n    logc    = p_arr[:, -1]          # (T,)\n\n    # compute main power\u2010law term\n    #   term = exp(logk + logX @ alphas.T)\n    log_term = logk[None, :] + logX.dot(alphas.T)  # (N,T)\n    main_term = np.exp(log_term)                   # (N,T)\n\n    # compute constant floor term\n    floor_term = np.exp(logc)[None, :]             # (1,T)\n\n    # total prediction\n    pred = main_term + floor_term                  # (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 exp(logk + \u03b1\u00b7log(x)) + exp(logc)\n\n    Minimizes mean squared error in the original loss space using L-BFGS-B\n    with an analytic gradient for stability and speed.\n\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-8,  None)\n    logX = np.log(X)  # (N,4)\n\n    # Good initial guess:\n    #   logk  \u2248 log(median(y) - 0.5*min(y))\n    #   \u03b1_i   = 0\n    #   logc  \u2248 log(0.5*min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init_logk   = np.log(max(median_y - 0.5*min_y, 1e-8))\n    init_alphas = np.zeros(F, dtype=float)\n    init_logc   = np.log(0.5 * min_y + 1e-8)\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))  # (6,)\n\n    # Objective and analytic gradient\n    def obj_and_grad(p):\n        logk   = p[0]\n        alphas = p[1:1+F]\n        logc   = p[-1]\n\n        c0       = np.exp(logc)              # scalar\n        linpred  = logk + logX.dot(alphas)   # (N,)\n        mainterm = np.exp(linpred)           # (N,)\n        pred     = mainterm + c0             # (N,)\n        res      = pred - y                  # (N,)\n\n        # MSE\n        mse = np.mean(res * res)\n\n        # Gradients:\n        # \u2202m/\u2202logk   = mainterm\n        # \u2202m/\u2202\u03b1_j    = mainterm * logX[:,j]\n        # \u2202m/\u2202logc   = c0\n        grad_logk   = 2.0 * np.mean(res * mainterm)\n        grad_alphas = 2.0 * np.mean((res * mainterm)[:, None] * logX, axis=0)\n        grad_logc   = 2.0 * np.mean(res * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    result = minimize(lambda p: obj_and_grad(p)[0],\n                      init_params,\n                      jac=lambda p: obj_and_grad(p)[1],\n                      method='L-BFGS-B',\n                      options={'maxiter': 5000, 'ftol': 1e-12})\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (50.1845), Performs well on nmae (9.5413), Performs well on r2 (-49.1845), Performs well on combined_score (0.0195)\n\n\n### Program 3 (Score: 4.5138)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss as:\n      loss \u2248 exp(logk + sum_i \u03b1_i * log(x_i)) + exp(logc)\n    where x = [lr, bsz, data_size, non_embed_params]\n    params = [logk, \u03b11..\u03b14, logc]  (length = F + 2)\n    Supports either a single parameter vector or multiple in a (T, P) array.\n    \"\"\"\n    # ensure inputs are float arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # shape (N, F)\n    N, F = X.shape\n\n    # pack params into 2D if necessary\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk      = p[:, 0]          # (T,)\n    exponents = p[:, 1:1+F]      # (T, F)\n    logc      = p[:, -1]         # (T,)\n\n    # compute power-law term: k * \u220f x_i^{\u03b1_i}\n    # in log-space: logk + \u03a3 \u03b1_i * log(x_i)\n    logX      = np.log(X)        # (N, F)\n    log_term  = logk[None, :] + logX.dot(exponents.T)  # (N, T)\n\n    # final prediction: exp(log_term) + exp(logc)\n    pred = np.exp(log_term) + np.exp(logc)[None, :]    # (N, T)\n\n    # if single parameter set, return (N,) array\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law by minimizing MSE in original loss space.\n    Optimizes parameters [logk, \u03b11..\u03b1F, logc] via L-BFGS-B.\n    Returns optimized parameter vector of length F+2.\n    \"\"\"\n    # prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N, F)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n    y = np.maximum(y, 1e-8)  # avoid zeros\n\n    N, F = X.shape\n    P = F + 2\n\n    # initialization:\n    #   logk = log(median(y))\n    #   \u03b1_i  = 0\n    #   logc = log(0.1 * min(y))\n    median_y = np.median(y)\n    min_y    = np.min(y)\n    init     = np.zeros(P, dtype=np.float64)\n    init[0]           = np.log(median_y + 1e-8)\n    init[1:1+F]       = 0.0\n    init[-1]          = np.log(min_y * 0.1 + 1e-8)\n\n    # objective: mean squared error in original loss\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # optimize\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        options={'maxiter': 5000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (158.4916), Performs well on nmae (17.0489), Performs well on r2 (-157.4916), Performs well on combined_score (0.0063)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.5499)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a two\u2010term power\u2010law floor model:\n      loss \u2248 exp(logc) + exp(logk + \u03a3_i \u03b1_i * log(x_i))\n    computed in a numerically stable way using logaddexp.\n    Inputs:\n      data_points: array (N, F) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of length F+2 or shape (T, F+2):\n                   [logk, \u03b1_1..\u03b1_F, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N, T) if params is 2D\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clamp inputs to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N, F)\n    N, F = X.shape\n\n    p = np.asarray(params, dtype=np.float64)\n    # unify params to shape (T, P)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params of length {F+2}, got {P}\")\n\n    # unpack parameters\n    logk    = p[:, 0]           # (T,)\n    alphas  = p[:, 1:1+F]       # (T, F)\n    logc    = p[:, -1]          # (T,)\n\n    # compute model terms:\n    # A[n,t] = logk[t] + \u03a3_i \u03b1[t,i] * logX[n,i]\n    A = logX.dot(alphas.T) + logk[None, :]   # (N, T)\n    # B[t] = logc[t]\n    B = logc[None, :]                        # (1, T)\n\n    # log-sum-exp for numerical stability\n    logpred = np.logaddexp(A, B)            # (N, T)\n    preds = np.exp(logpred)                 # (N, T)\n\n    # if single param-vector, return 1D array\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term floor power\u2010law model by minimizing MSE in loss\u2010space:\n      loss \u2248 exp(logc) + exp(logk + \u03a3_i \u03b1_i * log(x_i))\n    using L-BFGS-B with analytical gradients.\n    Returns:\n      params: length F+2 = [logk, \u03b1_1..\u03b1_F, logc]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n\n    # clamp inputs and targets to avoid log(0)\n    Xc = np.clip(X, 1e-12, None)\n    yc = np.clip(y, 1e-8, None)\n    logX = np.log(Xc)     # (N, F)\n\n    # closed\u2010form ridge regression to initialize [logk, \u03b1]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    lam = 1e-6\n    ZTZ = Z.T.dot(Z)\n    ZTZ.flat[::(F+2)] += lam                             # add ridge to diagonal\n    ZTY = Z.T.dot(np.log(yc))                            # (F+1,)\n    beta = np.linalg.solve(ZTZ, ZTY)                     # (F+1,)\n\n    # build initial parameter vector\n    init = np.zeros(F + 2, dtype=np.float64)\n    init[0]         = beta[0]                            # logk\n    init[1:1+F]     = beta[1:]                           # alphas\n    init[-1]        = np.log(np.min(yc) * 0.1 + 1e-12)    # logc floor\n\n    # objective: MSE in original loss space\n    def objective(p):\n        pred = scaling_law_func(Xc, p)\n        diff = pred - yc\n        return np.mean(diff * diff)\n\n    # analytic gradient of the MSE w.r.t [logk, \u03b1..., logc]\n    def gradient(p):\n        # unpack\n        logk = p[0]\n        alphas = p[1:1+F]\n        logc = p[-1]\n\n        # forward pass\n        A = logX.dot(alphas) + logk     # (N,)\n        expA = np.exp(A)\n        expB = np.exp(logc)\n        pred = expA + expB              # (N,)\n\n        diff = pred - yc                # (N,)\n        coef = 2.0 / N * diff           # (N,)\n\n        # gradients\n        g_logk    = np.sum(coef * expA)\n        g_alphas  = logX.T.dot(coef * expA)\n        g_logc    = np.sum(coef * expB)\n\n        # combine into single vector\n        g = np.empty_like(p)\n        g[0]         = g_logk\n        g[1:1+F]     = g_alphas\n        g[-1]        = g_logc\n        return g\n\n    # optimize with L-BFGS-B\n    res = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        jac=gradient,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    return res.x if res.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 4.6009)\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log\u2013linear power-law model fitted via closed-form linear regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel: loss \u2248 exp(\u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz) + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size))\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, param_size]\n    params:     (5,) or (T,5) array [\u03b8\u2080, \u03b8\u2081, \u03b8\u2082, \u03b8\u2083, \u03b8\u2084]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    # params shape handling\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                      # (1,5)\n    T, P = p.shape\n    assert P == X.shape[1] + 1, f\"Expected params of length {X.shape[1]+1}, got {P}\"\n    # compute log-features\n    logX = np.log(X)                                       # (N,4)\n    # \u03b8\u2080 + \u2211 \u03b8\u1d62\u00b7logX[:,i]\n    logA = p[:, 0]                                         # (T,)\n    coefs = p[:, 1:]                                       # (T,4)\n    # log_preds: (N,T)\n    log_preds = logA[None, :] + logX @ coefs.T\n    preds = np.exp(log_preds)\n    # return (N,) if single target else (N,T)\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law:\n      log(loss) = \u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz)\n                  + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size)\n    via ordinary least squares in log space (with tiny ridge for stability).\n    Returns params: (5,) array [\u03b8\u2080\u2026\u03b8\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)\n    # flatten y to 2D\n    if y.ndim == 1:\n        y2d = y[:, None]                                      # (N,1)\n    else:\n        y2d = y\n    N, F = X.shape\n    T = y2d.shape[1]\n    # ensure strictly positive for log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y2d = np.clip(y2d, eps, None)\n    # build design matrix in log space: [1, log(x1), ..., log(xF)]\n    logX = np.log(X)                                        # (N,F)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    P = F + 1\n    # tiny ridge regularization for numerical stability\n    ridge = 1e-8\n    XtX = X_design.T @ X_design + ridge * np.eye(P)         # (P,P)\n    Xty = X_design.T @ np.log(y2d)                          # (P,T)\n    # solve for \u03b8 in each target column\n    thetas = np.linalg.solve(XtX, Xty)                      # (P,T)\n    # return shape (P,) if single target else (T,P)\n    if T == 1:\n        return thetas[:, 0]\n    else:\n        return thetas.T\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.6309, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Two\u2010term power law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    Implemented in log\u2010space for stability:\n      log_term = logk + \u03a3_i \u03b1_i * log(x_i)\n      loss = exp(log_term) + exp(logc)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6): [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, D = X.shape  # D should be 4\n\n    P = np.asarray(params, dtype=float)\n    if P.ndim == 1:\n        P = P[None, :]\n    T, npars = P.shape\n    if npars != D + 2:\n        raise ValueError(f\"Expected {D+2} params, got {npars}\")\n\n    logk   = P[:, 0]           # shape (T,)\n    alphas = P[:, 1:1+D]       # shape (T,D)\n    logc   = P[:, -1]          # shape (T,)\n\n    # Prevent log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)      # shape (N,D)\n\n    # Compute power\u2010law term in log space\n    # log_term[n,t] = logk[t] + \u03a3_i alphas[t,i] * logX[n,i]\n    log_term = logX.dot(alphas.T) + logk[None, :]\n    term = np.exp(log_term)    # shape (N,T)\n    floor = np.exp(logc)[None, :]  # shape (1,T)\n\n    loss_pred = term + floor     # shape (N,T)\n    if T == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    by minimizing MSE in loss space with L-BFGS-B.\n    Returns params = [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, D = X.shape\n\n    # Ensure positivity\n    y = np.clip(y, 1e-8, None)\n\n    # Initialize floor c0 just below min(y)\n    c0 = np.min(y) * 0.9\n    y_adj = y - c0\n    if np.any(y_adj <= 0):\n        c0 = np.min(y) - 1e-3 * abs(np.min(y))\n        y_adj = y - c0\n    y_adj = np.clip(y_adj, 1e-8, None)\n\n    # Fit log(y_adj) \u2248 logk + \u03a3 \u03b1_i * log(x_i) by linear regression\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)       # (N,D)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, D+1)\n    sol, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    logk_init = sol[0]\n    alpha_init = sol[1:]        # length D\n\n    # Initial parameter vector\n    p0 = np.concatenate([\n        [logk_init],\n        alpha_init,\n        [np.log(c0)]\n    ])  # length D+2\n\n    # Bounds: exponents in [-5,5], floor logc \u2264 log(min(y)*0.9)\n    bounds = [(None, None)] + [(-5.0, 5.0)] * D + [(None, np.log(np.min(y) * 0.9))]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.797), Excellent nmae (9.504)\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log\u2013linear power-law model fitted via closed-form linear regression in log space.\nFeatures: [lr, bsz, data_size, non_embedding_param_size] \u2192 loss\nModel: loss \u2248 exp(\u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz) + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size))\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters and learned params.\n    data_points: (N,4) array [lr, bsz, data_size, param_size]\n    params:     (5,) or (T,5) array [\u03b8\u2080, \u03b8\u2081, \u03b8\u2082, \u03b8\u2083, \u03b8\u2084]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    # ensure positivity for log\n    X = np.clip(X, 1e-12, None)\n    # params shape handling\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                                      # (1,5)\n    T, P = p.shape\n    assert P == X.shape[1] + 1, f\"Expected params of length {X.shape[1]+1}, got {P}\"\n    # compute log-features\n    logX = np.log(X)                                       # (N,4)\n    # \u03b8\u2080 + \u2211 \u03b8\u1d62\u00b7logX[:,i]\n    logA = p[:, 0]                                         # (T,)\n    coefs = p[:, 1:]                                       # (T,4)\n    # log_preds: (N,T)\n    log_preds = logA[None, :] + logX @ coefs.T\n    preds = np.exp(log_preds)\n    # return (N,) if single target else (N,T)\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law:\n      log(loss) = \u03b8\u2080 + \u03b8\u2081\u00b7log(lr) + \u03b8\u2082\u00b7log(bsz)\n                  + \u03b8\u2083\u00b7log(data_size) + \u03b8\u2084\u00b7log(param_size)\n    via ordinary least squares in log space (with tiny ridge for stability).\n    Returns params: (5,) array [\u03b8\u2080\u2026\u03b8\u2084]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,4)\n    y = np.asarray(loss_values, dtype=float)\n    # flatten y to 2D\n    if y.ndim == 1:\n        y2d = y[:, None]                                      # (N,1)\n    else:\n        y2d = y\n    N, F = X.shape\n    T = y2d.shape[1]\n    # ensure strictly positive for log\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y2d = np.clip(y2d, eps, None)\n    # build design matrix in log space: [1, log(x1), ..., log(xF)]\n    logX = np.log(X)                                        # (N,F)\n    X_design = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, F+1)\n    P = F + 1\n    # tiny ridge regularization for numerical stability\n    ridge = 1e-8\n    XtX = X_design.T @ X_design + ridge * np.eye(P)         # (P,P)\n    Xty = X_design.T @ np.log(y2d)                          # (P,T)\n    # solve for \u03b8 in each target column\n    thetas = np.linalg.solve(XtX, Xty)                      # (P,T)\n    # return shape (P,) if single target else (T,P)\n    if T == 1:\n        return thetas[:, 0]\n    else:\n        return thetas.T\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a two\u2010term power\u2010law with a floor:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    implemented in log\u2010space for numerical stability using logaddexp:\n      A = logk + \u03a3_i \u03b1_i * log(x_i)\n      B = logc\n      logpred = logaddexp(A, B)\n      loss = exp(logpred)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embed_params]\n      params:      array of shape (6,) or (T,6): [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    Returns:\n      preds: shape (N,) if params is 1D, or (N,T) if params is 2D\n    \"\"\"\n    # prepare input\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)  # shape (N,4)\n\n    # prepare params\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected params length {F+2}, got {P}\")\n\n    # unpack\n    logk    = p[:, 0]           # (T,)\n    alphas  = p[:, 1:1+F]       # (T,4)\n    logc    = p[:, -1]          # (T,)\n\n    # compute A = logk + \u03a3 \u03b1_i * logX\n    A = logX.dot(alphas.T) + logk[None, :]    # (N, T)\n    B = logc[None, :]                          # (1, T)\n\n    # logaddexp for stability: log(e^A + e^B)\n    logpred = np.logaddexp(A, B)              # (N, T)\n    preds = np.exp(logpred)                   # (N, T)\n\n    # return in correct shape\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the two\u2010term power\u2010law with floor:\n      loss \u2248 k * \u220f_i x_i^{\u03b1_i} + c\n    by minimizing MSE in original loss\u2010space with L-BFGS-B and analytic gradient.\n    Returns:\n      params: array of shape (6,) => [logk, \u03b1_lr, \u03b1_bsz, \u03b1_data, \u03b1_param, logc]\n    \"\"\"\n    # prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)  # (N,4)\n\n    # initialize floor parameter c0 just below the minimum of y\n    min_y = np.min(y)\n    init_logc = np.log(0.5 * min_y + eps)\n\n    # adjust targets for initial linear fit: y_adj = y - c0\n    c0 = np.exp(init_logc)\n    y_adj = y - c0\n    y_adj = np.clip(y_adj, eps, None)\n\n    # linear regression in log-space to get logk and alphas\n    A_lin = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, 1+F)\n    sol, *_ = np.linalg.lstsq(A_lin, np.log(y_adj), rcond=None)\n    init_logk = sol[0]\n    init_alphas = sol[1:]  # length F\n\n    # pack initial parameters\n    init_params = np.concatenate(([init_logk], init_alphas, [init_logc]))\n\n    # bounds: keep exponents in a reasonable range, and floor below 0.9*min(y)\n    bounds = [(None, None)] + [(-10.0, 10.0)] * F + [(None, np.log(0.9 * min_y + eps))]\n\n    # objective and analytic gradient\n    def obj_and_grad(p):\n        logk = p[0]\n        alphas = p[1:1+F]\n        logc = p[-1]\n\n        # forward pass\n        A_val = logX.dot(alphas) + logk    # (N,)\n        expA = np.exp(A_val)               # (N,)\n        c0 = np.exp(logc)                  # scalar\n        pred = expA + c0                   # (N,)\n        diff = pred - y                    # (N,)\n\n        # MSE\n        mse = np.mean(diff * diff)\n\n        # gradient\n        coef = 2.0 / N * diff              # (N,)\n        grad_logk = np.sum(coef * expA)\n        grad_alphas = logX.T.dot(coef * expA)\n        grad_logc = np.sum(coef * c0)\n\n        grad = np.concatenate(([grad_logk], grad_alphas, [grad_logc]))\n        return mse, grad\n\n    # optimize with L-BFGS-B\n    result = minimize(\n        fun=lambda p: obj_and_grad(p)[0],\n        x0=init_params,\n        jac=lambda p: obj_and_grad(p)[1],\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 3000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\n\nExplanation of key improvements:\n\n1. **Two\u2010term power\u2010law with floor**: Models loss as `k\u00b7\u220fx\u1d62^{\u03b1\u1d62} + c`, allowing a nonzero asymptote `c`.\n2. **Numerical stability**: Uses `logaddexp` to combine the multiplicative term and the floor in log-space without overflow/underflow.\n3. **Analytic gradient**: Supplies the gradient of the MSE objective, speeding up and stabilizing L-BFGS-B optimization.\n4. **Smart initialization**: Fits a linear model in log-space on `y \u2212 c\u2080` to initialize `logk` and the `\u03b1\u1d62`.\n5. **Reasonable bounds**: Clamps exponents to `[-10, 10]` and keeps the floor below `0.9\u00b7min(y)` to avoid degenerate fits.\n\nThis richer model and optimization should improve NMSE, NMAE, and R\u00b2 over the simple log-linear OLS approach."]}}}