{"id": "366ead72-66cc-4d3e-87cc-e1d5e2d134f7", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010log scaling law:\n      Loss \u2248 exp( \u03b80\n                  + sum_i \u03b81_i * log(x_i)\n                  + sum_i \u03b82_i * [log(x_i)]^2 )\n    where x_i \u2208 {lr, bsz, data_size, non_embed_param_size}.\n    Params vector length = 1 + 2*4 = 9:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 9:\n        raise ValueError(f\"Expected 9 parameters, got {p.size}\")\n\n    # numerical stability\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    linear_term = logs.dot(p[1:5])    # sum_i \u03b81_i * log(x_i)\n    quad_term   = (logs**2).dot(p[5:9])# sum_i \u03b82_i * [log(x_i)]^2\n    log_pred    = p[0] + linear_term + quad_term\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2010quadratic scaling law by solving a\n    ridge\u2010regularized linear least squares problem in log space:\n        minimize ||A \u03b8 \u2212 y_log||^2 + \u03bb ||\u03b8_{1:}||^2\n    where A = [1, log(x), (log(x))^2] and y_log = log(loss).\n    Returns \u03b8 (length 9).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix A\n    eps = 1e-12\n    logs  = np.log(X + eps)        # (N,4)\n    logs2 = logs**2                # (N,4)\n    N = X.shape[0]\n    A = np.hstack([\n        np.ones((N, 1), dtype=np.float64),  # intercept\n        logs,                               # linear log terms\n        logs2                               # quadratic log terms\n    ])  # shape (N, 1+4+4=9)\n\n    y_log = np.log(y + eps)  # (N,)\n\n    # Ridge regularization: no penalty on intercept \u03b80\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta = np.linalg.solve(ATA, ATy)\n\n    return theta", "language": "python", "parent_id": "db6dd4d9-5e73-4562-9c7f-8481a530487f", "generation": 2, "timestamp": 1754803870.2772958, "iteration_found": 34, "metrics": {"nmse": 41.60691886070649, "nmae": 8.506807054031343, "r2": -40.60691886070649, "combined_score": 0.023470366474263715}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 65.34761150152974, "nmae": 10.735191412974888, "r2": -64.34761150152974, "combined_score": 0.01507213262646152}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 65.3476\n- nmae: 10.7352\n- r2: -64.3476\n- combined_score: 0.0151\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 41.5006, nmae: 8.4956, r2: -40.5006, combined_score: 0.0235\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.3798)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010log scaling law:\n      Loss = exp( \u03b80 \n                  + sum_i \u03b81_i * log(x_i)\n                  + sum_i \u03b82_i * (log(x_i))^2 )\n    where x_i \u2208 {lr, bsz, data_size, non_embed_param_size}.\n    params: length = 1 + 2*4 = 9\n      [\u03b80, \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n           \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + 2 * F\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n    theta0 = p[0]\n    lin_coeffs = p[1:1+F]\n    quad_coeffs = p[1+F:1+2*F]\n\n    # numerical stability\n    eps = 1e-12\n    logs = np.log(X + eps)\n    log_pred = theta0 \\\n               + logs.dot(lin_coeffs) \\\n               + (logs**2).dot(quad_coeffs)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9 parameters by least\u2010squares on log(Loss):\n      log(y) \u2243 \u03b80 \n               + sum_i \u03b81_i log(x_i)\n               + sum_i \u03b82_i (log(x_i))^2\n    Returns the parameter vector of length 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix with intercept, log, and log^2 terms\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    logs2 = logs**2                   # (N,4)\n    A = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logs,\n        logs2\n    ], axis=1)                        # (N, 1+4+4)\n\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-6\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (41.5006), Performs well on nmae (8.4956), Performs well on r2 (-40.5006), Performs well on combined_score (0.0235)\n\n\n### Program 2 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n### Program 3 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.9199)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log\u2013polynomial scaling law with cross interactions.\n    Model (in natural-log domain):\n        log L = \u03b80\n              + \u03b81 * lr_log\n              + \u03b82 * bsz_log\n              + \u03b83 * data_log\n              + \u03b84 * param_log\n              + \u03b85 * lr_log^2\n              + \u03b86 * (lr_log * bsz_log)\n              + \u03b87 * (lr_log * data_log)\n              + \u03b88 * (lr_log * param_log)\n              + \u03b89 * (bsz_log * data_log)\n              + \u03b810* (bsz_log * param_log)\n              + \u03b811* (data_log * param_log)\n    where\n        lr_log     = log(lr)\n        bsz_log    = log(bsz)\n        data_log   = log(data_size)\n        param_log  = log(non_embedding_param_size)\n    Returns exp(log L).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 12 [\u03b80 \u2026 \u03b811]\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    # Build design matrix with 12 features\n    # 1, lr_log, bsz_log, data_log, param_log,\n    # lr_log^2,\n    # lr_log * bsz_log, lr_log * data_log, lr_log * param_log,\n    # bsz_log * data_log, bsz_log * param_log, data_log * param_log\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 12-parameter log\u2013polynomial scaling law via ridge-regularized least squares\n    on the log-transformed loss:\n        \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb * ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed losses\n      ridge_lambda:       regularization strength (default 1e-3)\n    Output:\n      theta_opt: (12,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points.\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    y_log = np.log(y + eps)\n    \n    P = A.shape[1]\n    # Ridge regularization matrix: no penalty on intercept\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    \n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    \n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.3798, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010log scaling law:\n      Loss = exp( \u03b80 \n                  + sum_i \u03b81_i * log(x_i)\n                  + sum_i \u03b82_i * (log(x_i))^2 )\n    where x_i \u2208 {lr, bsz, data_size, non_embed_param_size}.\n    params: length = 1 + 2*4 = 9\n      [\u03b80, \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n           \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_len = 1 + 2 * F\n    if p.size != expected_len:\n        raise ValueError(f\"Expected params of length {expected_len}, got {p.size}\")\n    theta0 = p[0]\n    lin_coeffs = p[1:1+F]\n    quad_coeffs = p[1+F:1+2*F]\n\n    # numerical stability\n    eps = 1e-12\n    logs = np.log(X + eps)\n    log_pred = theta0 \\\n               + logs.dot(lin_coeffs) \\\n               + (logs**2).dot(quad_coeffs)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9 parameters by least\u2010squares on log(Loss):\n      log(y) \u2243 \u03b80 \n               + sum_i \u03b81_i log(x_i)\n               + sum_i \u03b82_i (log(x_i))^2\n    Returns the parameter vector of length 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # Build design matrix with intercept, log, and log^2 terms\n    eps = 1e-12\n    logs = np.log(X + eps)            # (N,4)\n    logs2 = logs**2                   # (N,4)\n    A = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logs,\n        logs2\n    ], axis=1)                        # (N, 1+4+4)\n\n    y_log = np.log(y + eps)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    lam = 1e-6\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n\n    theta = np.linalg.solve(ATA_reg, ATy)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (41.501), Excellent nmae (8.496)\n\n\n### Inspiration 2 (Score: 4.9199, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log\u2013polynomial scaling law with cross interactions.\n    Model (in natural-log domain):\n        log L = \u03b80\n              + \u03b81 * lr_log\n              + \u03b82 * bsz_log\n              + \u03b83 * data_log\n              + \u03b84 * param_log\n              + \u03b85 * lr_log^2\n              + \u03b86 * (lr_log * bsz_log)\n              + \u03b87 * (lr_log * data_log)\n              + \u03b88 * (lr_log * param_log)\n              + \u03b89 * (bsz_log * data_log)\n              + \u03b810* (bsz_log * param_log)\n              + \u03b811* (data_log * param_log)\n    where\n        lr_log     = log(lr)\n        bsz_log    = log(bsz)\n        data_log   = log(data_size)\n        param_log  = log(non_embedding_param_size)\n    Returns exp(log L).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 12 [\u03b80 \u2026 \u03b811]\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    # Build design matrix with 12 features\n    # 1, lr_log, bsz_log, data_log, param_log,\n    # lr_log^2,\n    # lr_log * bsz_log, lr_log * data_log, lr_log * param_log,\n    # bsz_log * data_log, bsz_log * param_log, data_log * param_log\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 12-parameter log\u2013polynomial scaling law via ridge-regularized least squares\n    on the log-transformed loss:\n        \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb * ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed losses\n      ridge_lambda:       regularization strength (default 1e-3)\n    Output:\n      theta_opt: (12,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points.\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    y_log = np.log(y + eps)\n    \n    P = A.shape[1]\n    # Ridge regularization matrix: no penalty on intercept\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    \n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    \n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (202.931), Excellent nmae (18.675)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010log scaling law:\n      Loss \u2248 exp( \u03b80\n                  + sum_i \u03b81_i * log(x_i)\n                  + sum_i \u03b82_i * [log(x_i)]^2 )\n    where x_i \u2208 {lr, bsz, data_size, non_embed_param_size}.\n    Params vector length = 1 + 2*4 = 9:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 9:\n        raise ValueError(f\"Expected 9 parameters, got {p.size}\")\n\n    # numerical stability\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    linear_term = logs.dot(p[1:5])    # sum_i \u03b81_i * log(x_i)\n    quad_term   = (logs**2).dot(p[5:9])# sum_i \u03b82_i * [log(x_i)]^2\n    log_pred    = p[0] + linear_term + quad_term\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2010quadratic scaling law by solving a\n    ridge\u2010regularized linear least squares problem in log space:\n        minimize ||A \u03b8 \u2212 y_log||^2 + \u03bb ||\u03b8_{1:}||^2\n    where A = [1, log(x), (log(x))^2] and y_log = log(loss).\n    Returns \u03b8 (length 9).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix A\n    eps = 1e-12\n    logs  = np.log(X + eps)        # (N,4)\n    logs2 = logs**2                # (N,4)\n    N = X.shape[0]\n    A = np.hstack([\n        np.ones((N, 1), dtype=np.float64),  # intercept\n        logs,                               # linear log terms\n        logs2                               # quadratic log terms\n    ])  # shape (N, 1+4+4=9)\n\n    y_log = np.log(y + eps)  # (N,)\n\n    # Ridge regularization: no penalty on intercept \u03b80\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg\n    ATy = A.T.dot(y_log)\n    theta = np.linalg.solve(ATA, ATy)\n\n    return theta\n```"]}}}