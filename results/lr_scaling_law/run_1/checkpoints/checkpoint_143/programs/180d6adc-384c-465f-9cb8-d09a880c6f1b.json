{"id": "180d6adc-384c-465f-9cb8-d09a880c6f1b", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) hyperparameter ranges for normalization\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 100e9\n_PARAM_MIN, _PARAM_MAX = 214e6, 1e9\n\n# Pre\u2010compute log\u2010space centers and half\u2010ranges\n_eps = 1e-12\n_ln_lr_min, _ln_lr_max = np.log(_LR_MIN + _eps), np.log(_LR_MAX + _eps)\n_ln_bsz_min, _ln_bsz_max = np.log(_BSZ_MIN + _eps), np.log(_BSZ_MAX + _eps)\n_ln_data_min, _ln_data_max = np.log(_DATA_MIN + _eps), np.log(_DATA_MAX + _eps)\n_ln_param_min, _ln_param_max = np.log(_PARAM_MIN + _eps), np.log(_PARAM_MAX + _eps)\n\n_LR_C = 0.5 * (_ln_lr_min + _ln_lr_max)\n_LR_H = 0.5 * (_ln_lr_max - _ln_lr_min)\n_BSZ_C = 0.5 * (_ln_bsz_min + _ln_bsz_max)\n_BSZ_H = 0.5 * (_ln_bsz_max - _ln_bsz_min)\n_DATA_C = 0.5 * (_ln_data_min + _ln_data_max)\n_DATA_H = 0.5 * (_ln_data_max - _ln_data_min)\n_PARAM_C = 0.5 * (_ln_param_min + _ln_param_max)\n_PARAM_H = 0.5 * (_ln_param_max - _ln_param_min)\n\ndef _construct_design(log_feats):\n    \"\"\"\n    Given normalized log\u2010features f of shape (N,4),\n    return design matrix of shape (N,11):\n      [1, f1, f2, f3, f4, f1*f2, f1*f3, f1*f4, f2*f3, f2*f4, f3*f4]\n    \"\"\"\n    f1, f2, f3, f4 = log_feats[:,0], log_feats[:,1], log_feats[:,2], log_feats[:,3]\n    # pairwise interactions\n    i12 = f1 * f2\n    i13 = f1 * f3\n    i14 = f1 * f4\n    i23 = f2 * f3\n    i24 = f2 * f4\n    i34 = f3 * f4\n    ones = np.ones((log_feats.shape[0], 1), dtype=log_feats.dtype)\n    return np.hstack([ones,\n                      log_feats,\n                      i12[:,None], i13[:,None], i14[:,None],\n                      i23[:,None], i24[:,None], i34[:,None]])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters with a normalized\n    log\u2010quadratic scaling law (11 parameters).\n    \n    data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of coefficients [\u03b80 \u2026 \u03b810]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(\"Expected params of length 11, got {}\".format(theta.size))\n    # compute log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    # normalize to roughly [-1,1]\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # build design matrix and predict\n    A = _construct_design(log_feats)  # (N,11)\n    log_pred = A.dot(theta)           # (N,)\n    # return in original loss\u2010space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 11\u2010parameter normalized log\u2010quadratic model via\n    ridge\u2010regularized linear regression on log(loss).\n    \n    Returns optimized \u03b8 of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # compute and normalize log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # design matrix and target\n    A = _construct_design(log_feats)  # (N,11)\n    y_log = np.log(y + _eps)\n    # ridge\u2010regularization (do not penalize intercept)\n    P = A.shape[1]\n    AtA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=AtA.dtype)\n    reg[0,0] = 0.0\n    M = AtA + reg\n    b = A.T.dot(y_log)\n    # solve (M)\u03b8 = b robustly\n    try:\n        theta = np.linalg.solve(M, b)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta = np.linalg.pinv(M).dot(b)\n    return theta\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "82c185df-38c9-4053-99eb-35f9d4a89145", "generation": 3, "timestamp": 1754803748.4022684, "iteration_found": 18, "metrics": {"nmse": 218.17570203610475, "nmae": 19.38841801169827, "r2": -217.17570203610475, "combined_score": 0.004562549546825543}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 218.17909861061133, "nmae": 19.388570584405066, "r2": -217.17909861061133, "combined_score": 0.004562478841910822}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 218.1791\n- nmae: 19.3886\n- r2: -217.1791\n- combined_score: 0.0046\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 218.1791, nmae: 19.3886, r2: -217.1791, combined_score: 0.0046\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 5.0983)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (218.1791), Performs well on nmae (19.3886), Performs well on r2 (-217.1791), Performs well on combined_score (0.0046)\n\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) hyperparameter ranges for normalization\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 100e9\n_PARAM_MIN, _PARAM_MAX = 214e6, 1e9\n\n# Pre\u2010compute log\u2010space centers and half\u2010ranges\n_eps = 1e-12\n_ln_lr_min, _ln_lr_max = np.log(_LR_MIN + _eps), np.log(_LR_MAX + _eps)\n_ln_bsz_min, _ln_bsz_max = np.log(_BSZ_MIN + _eps), np.log(_BSZ_MAX + _eps)\n_ln_data_min, _ln_data_max = np.log(_DATA_MIN + _eps), np.log(_DATA_MAX + _eps)\n_ln_param_min, _ln_param_max = np.log(_PARAM_MIN + _eps), np.log(_PARAM_MAX + _eps)\n\n_LR_C = 0.5 * (_ln_lr_min + _ln_lr_max)\n_LR_H = 0.5 * (_ln_lr_max - _ln_lr_min)\n_BSZ_C = 0.5 * (_ln_bsz_min + _ln_bsz_max)\n_BSZ_H = 0.5 * (_ln_bsz_max - _ln_bsz_min)\n_DATA_C = 0.5 * (_ln_data_min + _ln_data_max)\n_DATA_H = 0.5 * (_ln_data_max - _ln_data_min)\n_PARAM_C = 0.5 * (_ln_param_min + _ln_param_max)\n_PARAM_H = 0.5 * (_ln_param_max - _ln_param_min)\n\ndef _construct_design(log_feats):\n    \"\"\"\n    Given normalized log\u2010features f of shape (N,4),\n    return design matrix of shape (N,11):\n      [1, f1, f2, f3, f4, f1*f2, f1*f3, f1*f4, f2*f3, f2*f4, f3*f4]\n    \"\"\"\n    f1, f2, f3, f4 = log_feats[:,0], log_feats[:,1], log_feats[:,2], log_feats[:,3]\n    # pairwise interactions\n    i12 = f1 * f2\n    i13 = f1 * f3\n    i14 = f1 * f4\n    i23 = f2 * f3\n    i24 = f2 * f4\n    i34 = f3 * f4\n    ones = np.ones((log_feats.shape[0], 1), dtype=log_feats.dtype)\n    return np.hstack([ones,\n                      log_feats,\n                      i12[:,None], i13[:,None], i14[:,None],\n                      i23[:,None], i24[:,None], i34[:,None]])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters with a normalized\n    log\u2010quadratic scaling law (11 parameters).\n    \n    data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of coefficients [\u03b80 \u2026 \u03b810]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(\"Expected params of length 11, got {}\".format(theta.size))\n    # compute log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    # normalize to roughly [-1,1]\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # build design matrix and predict\n    A = _construct_design(log_feats)  # (N,11)\n    log_pred = A.dot(theta)           # (N,)\n    # return in original loss\u2010space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 11\u2010parameter normalized log\u2010quadratic model via\n    ridge\u2010regularized linear regression on log(loss).\n    \n    Returns optimized \u03b8 of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # compute and normalize log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # design matrix and target\n    A = _construct_design(log_feats)  # (N,11)\n    y_log = np.log(y + _eps)\n    # ridge\u2010regularization (do not penalize intercept)\n    P = A.shape[1]\n    AtA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=AtA.dtype)\n    reg[0,0] = 0.0\n    M = AtA + reg\n    b = A.T.dot(y_log)\n    # solve (M)\u03b8 = b robustly\n    try:\n        theta = np.linalg.solve(M, b)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta = np.linalg.pinv(M).dot(b)\n    return theta\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n1. **Normalization for numerical stability**  \n   We map each log\u2010feature into a roughly [\u20131,1] range using fixed, pre-specified hyperparameter bounds.  \n2. **Retained log-quadratic form**  \n   The 11-parameter model (intercept + 4 first-order + 6 pairwise interactions) strikes a good balance between expressivity and parsimony.  \n3. **Ridge-regularized least squares**  \n   We regularize all coefficients (except the intercept) to prevent overfitting and improve conditioning.  \n4. **Robust solver fallback**  \n   In the unlikely event of singularity, we fall back to a pseudo-inverse solution.  \n5. **No input-dependent transformations**  \n   All normalization constants are hard-coded from known hyperparameter ranges, ensuring the `scaling_law_func` does not adapt to each new input set\u2019s min/max."]}}}