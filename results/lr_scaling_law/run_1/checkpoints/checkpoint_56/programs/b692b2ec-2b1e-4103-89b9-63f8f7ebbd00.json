{"id": "b692b2ec-2b1e-4103-89b9-63f8f7ebbd00", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a log-quadratic scaling law:\n      log(L) = a0 \n             + a1 * log(lr) \n             + a2 * (log(lr))^2 \n             + a3 * log(bsz) \n             + a4 * log(data_size) \n             + a5 * log(non_embedding_param_size)\n    Loss = exp(log(L)).\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                     params[...,0] = a0\n                     params[...,1] = a1\n                     params[...,2] = a2\n                     params[...,3] = a3\n                     params[...,4] = a4\n                     params[...,5] = a5\n\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log of zero or negative\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n\n    # build feature matrix F: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        log_pred = F.dot(p)\n        return np.exp(log_pred)\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-quadratic scaling law via ridge\u2010regularized least squares:\n      minimize ||F @ a - log(y)||^2 + \u03bb * sum_{i>0} a_i^2\n    where F = [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)].\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # avoid log of zero or negative\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    y_c = np.clip(y, eps, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(y_c)\n\n    # build feature matrix F: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n\n    # ridge regularization (exclude intercept from penalty)\n    lam = 1e-6\n    ATA = F.T.dot(F)\n    # add \u03bb to diagonal entries for slope terms only\n    for i in range(1, ATA.shape[0]):\n        ATA[i, i] += lam\n    ATy = F.T.dot(logy)\n\n    # solve (F^T F + \u03bbR) a = F^T logy\n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "229cf936-ceb4-4889-8fcc-38eaeced54ec", "generation": 2, "timestamp": 1754802258.4003713, "iteration_found": 52, "metrics": {"nmse": 109.14299689245415, "nmae": 13.935536910853266, "r2": -108.14299689245415, "combined_score": 0.009079106508936017}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.9881536359387, "nmae": 14.128417620739429, "r2": -111.9881536359387, "combined_score": 0.008772841458541842}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 33.4026, nmae: 7.5907, r2: -32.4026, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 4.5452, nmae: 2.5458, r2: -3.5452, combined_score: 0.1803\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 4.5136, nmae: 2.5359, r2: -3.5136, combined_score: 0.1814\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9293)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n    where\n      X = [lr, bsz, data_size, non_embedding_param_size]\n      params = [a0, w1, w2, w3, w4, u_floor]\n    Supports broadcasting over multiple param sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]       # (T,)\n    weights= p[:, 1:5]     # (T,4)\n    ufloor = p[:, 5]       # (T,)\n\n    # compute a0 + w\u00b7logX, shape (N,T)\n    log_term = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space\n    pred_log = np.logaddexp(log_term, ufloor[None, :])\n    loss_pred = np.exp(pred_log)\n\n    # if single param set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb||params||^2\n    in log\u2010domain with L-BFGS-B.\n    Returns params = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) Linear least\u2010squares init for a0 and w\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below minimum observed log-loss\n    min_logy = np.min(logy)\n    uf0 = min_logy - np.log(5.0)  # floor ~ 1/5 of min loss\n\n    # initial 6-vector\n    p0 = np.concatenate([[a0_0], w0, [uf0]])  # shape (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log\u2010domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lt   = logX.dot(w) + a0           # (N,)\n        pll  = np.logaddexp(lt, uf)      # (N,)\n        res  = pll - logy\n        mse  = np.mean(res * res)\n        reg  = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n    \n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n        # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.5136), Performs well on nmae (2.5359), Performs well on r2 (-3.5136), Performs well on combined_score (0.1814)\n\n\n### Program 2 (Score: 0.9315)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a floor\u2010augmented\n    power\u2010law in log\u2010space:\n      log_pred = logaddexp(intercept + w\u00b7logX, u_floor)\n      loss = exp(log_pred)\n    where u_floor = log(floor) ensures the prediction never falls below floor.\n    Inputs:\n      data_points: np.ndarray (N,4) of positive hyperparameters\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (6,) or (T,6):\n                   params[...,0]    = intercept\n                   params[...,1:5]  = weights w_i for [log(lr), log(bsz), log(data_size), log(param_size)]\n                   params[...,5]    = u_floor (log of additive floor)\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # unify to 2D for broadcasting\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    intercept = p[:, 0]           # (T,)\n    weights   = p[:, 1:5]         # (T,4)\n    u_floor   = p[:, 5]           # (T,)\n\n    # compute linear log\u2010term: (N,T)\n    log_lin = logX.dot(weights.T) + intercept[None, :]\n    # floor\u2010augmentation: logaddexp implements log(exp(a) + exp(b))\n    log_pred = np.logaddexp(log_lin, u_floor[None, :])\n    loss_pred = np.exp(log_pred)  # (N,T)\n\n    # squeeze if only one parameter vector\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model by minimizing MSE in log\u2010loss domain:\n      minimize mean((log_pred - log(y))^2) + \u03bb\u00b7||params||^2\n    where\n      log_pred = logaddexp(intercept + w\u00b7logX, u_floor)\n    Returns:\n      params: np.ndarray shape (6,) = [intercept, w1, w2, w3, w4, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)   # (N,4)\n    logy = np.log(yc)   # (N,)\n\n    N = X.shape[0]\n    # initial linear fit in log\u2010space (ignoring floor)\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_coef, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    intercept0 = lin_coef[0]\n    weights0   = lin_coef[1:]\n    # initialize floor to a small fraction of minimum observed loss\n    floor0 = max(np.min(yc) * 0.05, eps)\n    u0 = np.log(floor0)\n    p0 = np.concatenate([[intercept0], weights0, [u0]])  # (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    def _objective(p):\n        # p: (6,)\n        b = p[0]\n        w = p[1:5]\n        uf = p[5]\n        log_lin = logX.dot(w) + b        # (N,)\n        log_pred = np.logaddexp(log_lin, uf)\n        res = log_pred - logy\n        mse = np.mean(res * res)\n        # ridge penalty on all parameters\n        reg = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # if SciPy available, refine with L-BFGS-B\n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _objective,\n            p0,\n            method='L-BFGS-B',\n            options={'maxiter': 1000, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n        # fallback to p0 on failure\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.5452), Performs well on nmae (2.5458), Performs well on r2 (-3.5452), Performs well on combined_score (0.1803)\n\n\n### Program 3 (Score: 2.1549)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor.\nModel:\n  loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embedding_param_size))\nwhere\n  c0 >= 0 is a floor to improve extrapolation and numerical stability.\nFitting is done by minimizing MSE via L-BFGS-B.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n                   All entries must be positive.\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (log\u2010slopes)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Clip small values to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]           # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # Multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]             # (T,)\n        a0 = p[:, 1]             # (T,)\n        slopes = p[:, 2:]        # (T,4)\n        # Compute log_preds: (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing mean squared error:\n      minimize E[(c0 + exp(a0 + sum ai*log(xi)) - y)^2]\n    Uses L-BFGS-B with bound c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0) or negative\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)   # (N,4)\n\n    # Objective: Mean squared error between predicted and actual loss\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y\n        return np.mean(err * err)\n\n    # Initial guess:\n    y_min, y_max = y.min(), y.max()\n    c0_init = max(0.0, 0.3 * y_min)\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.concatenate([[c0_init, a0_init], np.zeros(4, dtype=float)])\n\n    # Bounds: c0 >= 0, no bounds on others\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    result = minimize(\n        _mse,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000}\n    )\n    if result.success:\n        return result.x\n    # Fallback to initial guess if optimization fails\n    return init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.4026), Performs well on nmae (7.5907), Performs well on r2 (-32.4026), Performs well on combined_score (0.0291)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.1587)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  Loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embed_param_size))\nThis adds an additive floor c0 to improve extrapolation and numerical stability.\nParameters are fitted by minimizing mean squared error via L-BFGS-B.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns \n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (slopes for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]             # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # Multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]               # (T,)\n        a0 = p[:, 1]               # (T,)\n        slopes = p[:, 2:]          # (T,4)\n        log_pred = logX.dot(slopes.T) + a0[None, :]  # (N,T)\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE:\n      minimize mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n    Uses L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # Objective: mean squared error\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        return np.mean(err * err)\n\n    # Initialize parameters\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    # Ensure exp(a0) roughly matches (y_max - c0_init)\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.concatenate([[c0_init, a0_init], np.zeros(4, dtype=float)])\n\n    # Bounds: c0 >= 0, others unbounded\n    bnds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_mse, init, method='L-BFGS-B', bounds=bnds,\n                   options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':10000})\n    if res.success:\n        return res.x\n    else:\n        # Fallback to initial guess if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 3.7361)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with a quadratic term in log(lr)\nand light Tikhonov (ridge) regularization for stability and better generalization.\n\nModel form (in log-space):\n  log(L) = a0 \n           + a1 * log(lr) \n           + a2 * [log(lr)]^2 \n           + a3 * log(bsz) \n           + a4 * log(data_size) \n           + a5 * log(non_embedding_param_size)\n\nThus Loss = exp(log(L)).\n\nWe fit the 6 parameters [a0..a5] by solving a small ridge\u2010regularized\nlinear least squares in log-space:\n  minimize ||A\u00b7a \u2212 log(y)||^2 + \u03bb||a||^2\nwhere A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n\nThis captures the typical U-shaped effect of learning rate (via the quadratic term)\nand enforces numerical stability on small datasets via a tiny ridge penalty.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language-model loss given hyperparameters and fitted params.\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      params:      either 1D array of length 6, or 2D array of shape (T,6)\n                   containing [a0, a1, a2, a3, a4, a5].\n                   \n    Returns:\n      preds: If params is 1D, returns shape (N,) array of predicted losses.\n             If params is 2D (T,6), returns shape (N,T) array of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = X_clipped.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    \n    # Build design matrix in log-space: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n    \n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got length {p.shape[0]}\")\n        log_pred = F.dot(p)           # shape (N,)\n        return np.exp(log_pred)\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # compute F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter log-quadratic model via ridge-regularized least squares:\n    \n      minimize_a ||A\u00b7a - log(y)||^2 + \u03bb||a||^2\n    \n    where A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      loss_values: array of length N of observed LM losses.\n    \n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Clip and compute logs\n    Xc = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(np.clip(y, 1e-12, None))\n    \n    # Build design matrix A (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T\n    \n    # Small ridge penalty for numerical stability\n    lam = 1e-6\n    # Solve (A^T A + lam I) a = A^T logy\n    ATA = A.T.dot(A)\n    # Add ridge penalty on all coeffs equally\n    diag_idx = np.diag_indices(ATA.shape[0])\n    ATA[diag_idx] += lam\n    ATy = A.T.dot(logy)\n    \n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9293, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n    where\n      X = [lr, bsz, data_size, non_embedding_param_size]\n      params = [a0, w1, w2, w3, w4, u_floor]\n    Supports broadcasting over multiple param sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]       # (T,)\n    weights= p[:, 1:5]     # (T,4)\n    ufloor = p[:, 5]       # (T,)\n\n    # compute a0 + w\u00b7logX, shape (N,T)\n    log_term = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space\n    pred_log = np.logaddexp(log_term, ufloor[None, :])\n    loss_pred = np.exp(pred_log)\n\n    # if single param set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb||params||^2\n    in log\u2010domain with L-BFGS-B.\n    Returns params = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) Linear least\u2010squares init for a0 and w\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below minimum observed log-loss\n    min_logy = np.min(logy)\n    uf0 = min_logy - np.log(5.0)  # floor ~ 1/5 of min loss\n\n    # initial 6-vector\n    p0 = np.concatenate([[a0_0], w0, [uf0]])  # shape (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log\u2010domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lt   = logX.dot(w) + a0           # (N,)\n        pll  = np.logaddexp(lt, uf)      # (N,)\n        res  = pll - logy\n        mse  = np.mean(res * res)\n        reg  = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n    \n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n        # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.514), Excellent nmae (2.536)\n\n\n### Inspiration 2 (Score: 4.4447, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LLM loss with an extended log\u2010quadratic scaling law including a\n    cross term between data size and parameter size:\n    \n      log L = p0\n            + p1\u00b7log(lr) + p2\u00b7[log(lr)]^2\n            + p3\u00b7log(bsz) + p4\u00b7[log(bsz)]^2\n            + p5\u00b7log(data_size) + p6\u00b7log(param_size)\n            + p7\u00b7[log(data_size) * log(param_size)]\n    \n    Arguments:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8, or 2D array of shape (T,8) for T parallel models.\n\n    Returns:\n      If params is 1D: returns an array of shape (N,) containing predicted losses.\n      If params is 2D: returns an array of shape (N,T) of predictions for each parameter set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    lr, bsz, data_sz, param_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12  # to avoid log(0)\n    log_lr    = np.log(lr + eps)\n    log_bsz   = np.log(bsz + eps)\n    log_data  = np.log(data_sz + eps)\n    log_param = np.log(param_sz + eps)\n\n    # Build design matrix with quadratic and cross terms\n    # phi columns: [1,\n    #               log_lr, log_lr^2,\n    #               log_bsz, log_bsz^2,\n    #               log_data, log_param,\n    #               log_data * log_param]\n    ones = np.ones_like(log_lr)\n    phi = np.stack([\n        ones,\n        log_lr,        log_lr**2,\n        log_bsz,       log_bsz**2,\n        log_data,      log_param,\n        log_data * log_param\n    ], axis=1)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        if p.shape[0] != phi.shape[1]:\n            raise ValueError(f\"Expected params length {phi.shape[1]}, got {p.shape[0]}\")\n        log_pred = phi @ p\n        return np.exp(log_pred)\n\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != phi.shape[1]:\n            raise ValueError(f\"Expected params.shape[1]=={phi.shape[1]}, got {P}\")\n        # compute phi @ p.T => shape (N, T)\n        log_pred = phi @ p.T\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010quadratic scaling law via ridge\u2010regularized least squares:\n    \n      minimize || phi @ p - log(loss) ||^2 + \u03bb * ||p_excluding_intercept||^2\n    \n    where phi is the design matrix defined in scaling_law_func (8 columns).\n    \n    Returns:\n      params: 1D array of length 8.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    lr, bsz, data_sz, param_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr    = np.log(lr + eps)\n    log_bsz   = np.log(bsz + eps)\n    log_data  = np.log(data_sz + eps)\n    log_param = np.log(param_sz + eps)\n    logy      = np.log(y + eps)\n\n    ones = np.ones_like(log_lr)\n    phi = np.stack([\n        ones,\n        log_lr,        log_lr**2,\n        log_bsz,       log_bsz**2,\n        log_data,      log_param,\n        log_data * log_param\n    ], axis=1)\n\n    N, F = phi.shape\n    # regularization strength scaled by N\n    lam = 1e-6 * N\n    # exclude intercept (phi[:,0]) from regularization\n    R = np.eye(F, dtype=np.float64)\n    R[0,0] = 0.0\n\n    # normal equations: (phi^T phi + \u03bb R) p = phi^T logy\n    A = phi.T @ phi + lam * R\n    b = phi.T @ logy\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (157.596), Excellent nmae (16.773)\n\n\n### Inspiration 3 (Score: 2.1587, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss:\n  Loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embed_param_size))\nThis adds an additive floor c0 to improve extrapolation and numerical stability.\nParameters are fitted by minimizing mean squared error via L-BFGS-B.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns \n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (slopes for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]             # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # Multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]               # (T,)\n        a0 = p[:, 1]               # (T,)\n        slopes = p[:, 2:]          # (T,4)\n        log_pred = logX.dot(slopes.T) + a0[None, :]  # (N,T)\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE:\n      minimize mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n    Uses L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)   # (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # Objective: mean squared error\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        return np.mean(err * err)\n\n    # Initialize parameters\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    # Ensure exp(a0) roughly matches (y_max - c0_init)\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.concatenate([[c0_init, a0_init], np.zeros(4, dtype=float)])\n\n    # Bounds: c0 >= 0, others unbounded\n    bnds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_mse, init, method='L-BFGS-B', bounds=bnds,\n                   options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':10000})\n    if res.success:\n        return res.x\n    else:\n        # Fallback to initial guess if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.532), Excellent nmae (7.606)\n\n\n### Inspiration 4 (Score: 2.1549, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor.\nModel:\n  loss_pred = c0 + exp(a0 + a1*log(lr) + a2*log(bsz)\n                       + a3*log(data_size) + a4*log(non_embedding_param_size))\nwhere\n  c0 >= 0 is a floor to improve extrapolation and numerical stability.\nFitting is done by minimizing MSE via L-BFGS-B.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n                   All entries must be positive.\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (log\u2010slopes)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # Clip small values to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    logX = np.log(X)   # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]           # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # Multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]             # (T,)\n        a0 = p[:, 1]             # (T,)\n        slopes = p[:, 2:]        # (T,4)\n        # Compute log_preds: (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing mean squared error:\n      minimize E[(c0 + exp(a0 + sum ai*log(xi)) - y)^2]\n    Uses L-BFGS-B with bound c0 >= 0.\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of target lm losses (>0).\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # Clip to avoid log(0) or negative\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    logX = np.log(X)   # (N,4)\n\n    # Objective: Mean squared error between predicted and actual loss\n    def _mse(p):\n        c0 = p[0]\n        a0 = p[1]\n        slopes = p[2:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y\n        return np.mean(err * err)\n\n    # Initial guess:\n    y_min, y_max = y.min(), y.max()\n    c0_init = max(0.0, 0.3 * y_min)\n    a0_init = np.log(max(y_max - c0_init, eps))\n    init = np.concatenate([[c0_init, a0_init], np.zeros(4, dtype=float)])\n\n    # Bounds: c0 >= 0, no bounds on others\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    result = minimize(\n        _mse,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000}\n    )\n    if result.success:\n        return result.x\n    # Fallback to initial guess if optimization fails\n    return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.403), Excellent nmae (7.591)\n\n\n### Inspiration 5 (Score: 3.7361, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with a quadratic term in log(lr)\nand light Tikhonov (ridge) regularization for stability and better generalization.\n\nModel form (in log-space):\n  log(L) = a0 \n           + a1 * log(lr) \n           + a2 * [log(lr)]^2 \n           + a3 * log(bsz) \n           + a4 * log(data_size) \n           + a5 * log(non_embedding_param_size)\n\nThus Loss = exp(log(L)).\n\nWe fit the 6 parameters [a0..a5] by solving a small ridge\u2010regularized\nlinear least squares in log-space:\n  minimize ||A\u00b7a \u2212 log(y)||^2 + \u03bb||a||^2\nwhere A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n\nThis captures the typical U-shaped effect of learning rate (via the quadratic term)\nand enforces numerical stability on small datasets via a tiny ridge penalty.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language-model loss given hyperparameters and fitted params.\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      params:      either 1D array of length 6, or 2D array of shape (T,6)\n                   containing [a0, a1, a2, a3, a4, a5].\n                   \n    Returns:\n      preds: If params is 1D, returns shape (N,) array of predicted losses.\n             If params is 2D (T,6), returns shape (N,T) array of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = X_clipped.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    \n    # Build design matrix in log-space: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n    \n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got length {p.shape[0]}\")\n        log_pred = F.dot(p)           # shape (N,)\n        return np.exp(log_pred)\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # compute F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6-parameter log-quadratic model via ridge-regularized least squares:\n    \n      minimize_a ||A\u00b7a - log(y)||^2 + \u03bb||a||^2\n    \n    where A = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)].\n    \n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size].\n      loss_values: array of length N of observed LM losses.\n    \n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Clip and compute logs\n    Xc = np.clip(X, 1e-12, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(np.clip(y, 1e-12, None))\n    \n    # Build design matrix A (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T\n    \n    # Small ridge penalty for numerical stability\n    lam = 1e-6\n    # Solve (A^T A + lam I) a = A^T logy\n    ATA = A.T.dot(A)\n    # Add ridge penalty on all coeffs equally\n    diag_idx = np.diag_indices(ATA.shape[0])\n    ATA[diag_idx] += lam\n    ATy = A.T.dot(logy)\n    \n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (109.143), Excellent nmae (13.936)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss using a log\u2010linear (power\u2010law) form\nPredicted loss L = exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\nFitting is done via a linear least\u2010squares in log\u2010space for stability and speed.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: 1D array of length 5 (or 2D array of shape (T,5) for T parallel models)\n            params[0] = intercept a0\n            params[1:] = slopes [a1, a2, a3, a4]\n    Returns: \n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D (T,5), returns (N,T) array of predicted losses for each param set.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Transform features to log\u2010space\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n    \n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"Expected params of length 5, got length {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]            # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n    \n    # Multiple parameter sets in parallel (shape (T,5))\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 5:\n            raise ValueError(f\"Expected params.shape[1]==5, got {P}\")\n        a0 = p[:, 0]              # shape (T,)\n        slopes = p[:, 1:]         # shape (T,4)\n        # logX @ slopes.T -> (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n    \n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5-parameter log\u2010linear model by solving a linear least\u2010squares\n    problem in log\u2010space:\n      minimize || [1, log(lr), log(bsz), log(data_size), log(param_size)] @ params - log(loss) ||^2\n    Returns:\n      params: 1D array of length 5 = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    \n    # Small epsilon to avoid log(0)\n    eps = 1e-12\n    logX = np.log(X)\n    logy = np.log(y + eps)\n    \n    # Build design matrix A = [1 | log(lr) log(bsz) log(data_size) log(param_size)]\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)  # shape (N,5)\n    \n    # Solve least squares: minimize ||A @ p - logy||^2\n    params, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    # params is shape (5,)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a log-quadratic scaling law:\n      log(L) = a0 \n             + a1 * log(lr) \n             + a2 * (log(lr))^2 \n             + a3 * log(bsz) \n             + a4 * log(data_size) \n             + a5 * log(non_embedding_param_size)\n    Loss = exp(log(L)).\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                     params[...,0] = a0\n                     params[...,1] = a1\n                     params[...,2] = a2\n                     params[...,3] = a3\n                     params[...,4] = a4\n                     params[...,5] = a5\n\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log of zero or negative\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n\n    # build feature matrix F: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        log_pred = F.dot(p)\n        return np.exp(log_pred)\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # F (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = F.dot(p.T)\n        return np.exp(log_pred)\n    else:\n        raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-quadratic scaling law via ridge\u2010regularized least squares:\n      minimize ||F @ a - log(y)||^2 + \u03bb * sum_{i>0} a_i^2\n    where F = [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)].\n\n    Args:\n      data_points: array (N,4) of positive hyperparameters.\n      loss_values: array (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # avoid log of zero or negative\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    y_c = np.clip(y, eps, None)\n    lr, bsz, data_size, param_size = Xc.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_size)\n    log_par  = np.log(param_size)\n    logy     = np.log(y_c)\n\n    # build feature matrix F: [1, log_lr, log_lr^2, log_bsz, log_data, log_par]\n    N = X.shape[0]\n    F = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_par\n    ]).T  # shape (N,6)\n\n    # ridge regularization (exclude intercept from penalty)\n    lam = 1e-6\n    ATA = F.T.dot(F)\n    # add \u03bb to diagonal entries for slope terms only\n    for i in range(1, ATA.shape[0]):\n        ATA[i, i] += lam\n    ATy = F.T.dot(logy)\n\n    # solve (F^T F + \u03bbR) a = F^T logy\n    params = np.linalg.solve(ATA, ATy)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}