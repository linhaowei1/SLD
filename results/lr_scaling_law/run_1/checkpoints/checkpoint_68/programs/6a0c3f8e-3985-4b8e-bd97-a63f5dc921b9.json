{"id": "6a0c3f8e-3985-4b8e-bd97-a63f5dc921b9", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 8\u2010parameter log\u2010space scaling\u2010law model for LLM training loss:\n\n  log L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n        + a6\u00b7[log(\u03b7)\u00b7log(B)]\n        + a7\u00b7[log(N)\u00b7log(D)]\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via small\u2010ridge\u2010regularized least squares in log\u2010space for numerical\nstability and to capture both curvature and key interaction effects.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    quadratic+interaction log\u2010law.\n\n    Args:\n      data_points: np.ndarray of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8 or 2D array of shape (T,8)\n                   Each row (or the single array) = [a0, a1, ..., a7]\n\n    Returns:\n      If params.ndim == 1: returns array of shape (N,)\n      If params.ndim == 2: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build design matrix F: (N, 8)\n    # columns = [1,\n    #            log_N,\n    #            log_D,\n    #            log_B,\n    #            log_lr,\n    #            (log_lr)^2,\n    #            log_lr*log_B,\n    #            log_N*log_D]\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 8:\n            raise ValueError(f\"Expected params length 8, got {p.shape[0]}\")\n        logL = F.dot(p)\n        return np.exp(logL)\n\n    # Multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 8:\n            raise ValueError(f\"Expected params.shape[1] == 8, got {P}\")\n        # Compute log\u2010predictions for each parameter set\n        logL = F.dot(p.T)  # shape (N, T)\n        L = np.exp(logL)\n        # If only one set, return (N,)\n        if L.shape[1] == 1:\n            return L[:, 0]\n        return L\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter quadratic+interaction log\u2010law by solving:\n\n      minimize ||F\u00b7params \u2013 log(y)||^2 + \u03bb||params||^2\n\n    where F columns = [1, log N, log D, log B,\n                       log \u03b7, (log \u03b7)^2, log \u03b7\u00b7log B, log N\u00b7log D].\n\n    Returns:\n      params: 1D np.ndarray of length 8.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(np.clip(y, eps, None))\n\n    # Build design matrix F: (N, 8)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    # Solve ridge\u2010regularized normal equations\n    FtF = F.T.dot(F)                   # (8,8)\n    n_feat = FtF.shape[0]\n    # Regularization strength: small fraction of average diagonal\n    lam = 1e-5 * np.trace(FtF) / n_feat\n    reg = lam * np.eye(n_feat)\n\n    rhs = F.T.dot(log_y)               # (8,)\n    params = np.linalg.solve(FtF + reg, rhs)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "62f8bdc8-f736-4276-a3e7-319f430a723a", "generation": 4, "timestamp": 1754802363.3778617, "iteration_found": 65, "metrics": {"nmse": 7.2823527996315045, "nmae": 3.0438004523146023, "r2": -6.2823527996315045, "combined_score": 0.12073863842705321}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 12.109348394268766, "nmae": 3.252483029683449, "r2": -11.109348394268766, "combined_score": 0.07628144206139084}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 12.1093\n- nmae: 3.2525\n- r2: -11.1093\n- combined_score: 0.0763\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 12.1093, nmae: 3.2525, r2: -11.1093, combined_score: 0.0763\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 7.2824, nmae: 3.0438, r2: -6.2824, combined_score: 0.1207\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 8\u2010parameter scaling\u2010law model for LLM training loss:\n  log L = a0 \n        + a1\u00b7log(N) \n        + a2\u00b7log(D) \n        + a3\u00b7log(B) \n        + a4\u00b7log(\u03b7) \n        + a5\u00b7[log(\u03b7)]^2 \n        + a6\u00b7[log(\u03b7)\u00b7log(B)]\n        + a7\u00b7[log(N)\u00b7log(D)]\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    quadratic+interaction log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 8 or 2D array (T,8) for T parallel models\n              [a0, a1, a2, a3, a4, a5, a6, a7]\n    Returns:\n      If params is shape (8,), returns (N,) predicted losses.\n      If params is shape (T,8), returns (N,T) predicted losses\n      (or (N,) if T==1).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    \n    # Avoid zero or negative inputs\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build design/features matrix F: (N \u00d7 8)\n    # Columns: [1,\n    #           log_N,\n    #           log_D,\n    #           log_B,\n    #           log_lr,\n    #           (log_lr)^2,\n    #           (log_lr)*(log_B),\n    #           (log_N)*(log_D)]\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 8:\n            raise ValueError(f\"Expected params length 8, got {p.shape[0]}\")\n        logL = F.dot(p)\n        return np.exp(logL)\n\n    # Multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 8:\n            raise ValueError(f\"Expected params.shape[1]==8, got {P}\")\n        logL = F.dot(p.T)        # shape (N, T)\n        L = np.exp(logL)\n        # If only one model, return 1D\n        if L.shape[1] == 1:\n            return L[:, 0]\n        return L\n\n    raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter quadratic+interaction log\u2010law by solving a\n    ridge\u2010regularized least\u2010squares problem in log\u2010space:\n      minimize ||F\u00b7params \u2013 log(y)||^2 + \u03bb||params||^2\n    where F columns = [1, log N, log D, log B,\n                       log \u03b7, (log \u03b7)^2, log \u03b7\u00b7log B, log N\u00b7log D].\n    Returns params: 1D array length 8.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Avoid zero or negative inputs\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(np.clip(y, eps, None))\n\n    # Build design matrix F: (N \u00d7 8)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    # Ridge\u2010regularized normal equations\n    # Solve (F\u1d40F + \u03bbI) p = F\u1d40 log_y\n    FtF = F.T.dot(F)\n    n_feat = FtF.shape[0]\n    # Regularization strength: small fraction of avg diagonal\n    lam = 1e-5 * np.trace(FtF) / n_feat\n    reg = lam * np.eye(n_feat)\n\n    rhs = F.T.dot(log_y)\n    params = np.linalg.solve(FtF + reg, rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (7.2824), Performs well on nmae (3.0438), Performs well on r2 (-6.2824), Performs well on combined_score (0.1207)\n\n\n### Program 2 (Score: 1.0822)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss with quadratic curvature\nin both learning\u2010rate and batch\u2010size log\u2010scales.\n\nWe model:\n  log L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n        + a6\u00b7[log(B)]^2\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nFitting is performed via ridge\u2010regularized least squares in log\u2010space\nfor numerical stability on skewed hyperparameter distributions.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 7\u2010parameter quadratic log\u2010law.\n\n    Args:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       1D array of length 7 or 2D array of shape (T,7)\n                    [a0, a1, a2, a3, a4, a5, a6]\n\n    Returns:\n      If params.ndim==1: returns (N,) array of predicted losses.\n      If params.ndim==2: returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # Safe log transform\n    eps = 1e-12\n    log_lr  = np.log(X[:, 0] + eps)\n    log_bsz = np.log(X[:, 1] + eps)\n    log_D   = np.log(X[:, 2] + eps)\n    log_N   = np.log(X[:, 3] + eps)\n\n    # Precompute squared terms\n    lr_sq  = log_lr ** 2\n    bsz_sq = log_bsz ** 2\n\n    p = np.asarray(params, dtype=float)\n\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size != 7:\n            raise ValueError(f\"Expected params length 7, got {p.size}\")\n        a0, a1, a2, a3, a4, a5, a6 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * lr_sq\n            + a6 * bsz_sq\n        )\n        return np.exp(logL)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        # Build design matrix once\n        Npts = X.shape[0]\n        A = np.empty((Npts, 7), dtype=float)\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = lr_sq\n        A[:, 6] = bsz_sq\n        # Compute log\u2010predictions for each parameter set\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2, (log B)^2].\n\n    Returns:\n      params: 1D array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Safe log transform\n    eps = 1e-12\n    log_lr  = np.log(X[:, 0] + eps)\n    log_bsz = np.log(X[:, 1] + eps)\n    log_D   = np.log(X[:, 2] + eps)\n    log_N   = np.log(X[:, 3] + eps)\n    logy    = np.log(y + eps)\n\n    # Precompute squared terms\n    lr_sq  = log_lr ** 2\n    bsz_sq = log_bsz ** 2\n\n    # Build design matrix A (N \u00d7 7)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 7), dtype=float)\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = lr_sq\n    A[:, 6] = bsz_sq\n\n    # Ridge regularization: \u03bb relative to avg. diagonal of A\u1d40A\n    AtA = A.T.dot(A)\n    trace = np.trace(AtA)\n    lam = 1e-6 * (trace / 7.0)\n    ridge = lam * np.eye(7)\n\n    # Solve normal equations: (A\u1d40A + \u03bbI)\u00b7p = A\u1d40\u00b7logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (12.1093), Performs well on nmae (3.2525), Performs well on r2 (-11.1093), Performs well on combined_score (0.0763)\n\n\n### Program 3 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters using a quadratic\u2010in\u2010log\u2010lr scaling law:\n      log L = a0\n            + a1\u00b7log(param_size)\n            + a2\u00b7log(data_size)\n            + a3\u00b7log(bsz)\n            + a4\u00b7log(lr)\n            + a5\u00b7[log(lr)]^2\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 [a0,a1,a2,a3,a4,a5]\n                   or 2D array of shape (T,6) for T parallel models.\n\n    Returns:\n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D, returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # safe log\n    eps = 1e-12\n    lr  = np.log(X[:, 0] + eps)\n    bsz = np.log(X[:, 1] + eps)\n    D   = np.log(X[:, 2] + eps)\n    Np  = np.log(X[:, 3] + eps)\n\n    # build design matrix A: [1, log(Np), log(D), log(bsz), log(lr), (log(lr))^2]\n    A = np.vstack([\n        np.ones_like(lr),\n        Np,\n        D,\n        bsz,\n        lr,\n        lr**2\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_pred = A.dot(p)\n        return np.exp(log_pred)\n\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # each column of p.T is a parameter set\n        log_pred = A.dot(p.T)  # shape (N,T)\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the quadratic\u2010in\u2010log\u2010lr model by ridge\u2010regularized least squares in log\u2010space:\n      minimize ||A\u00b7p - log(y)||^2 + \u03bb||p||^2,\n    where A columns = [1, log(param_size), log(data_size), log(bsz), log(lr), (log(lr))^2].\n\n    Returns:\n      params: 1D array of length 6 = [a0,a1,a2,a3,a4,a5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # compute logs\n    eps = 1e-12\n    lr  = np.log(X[:, 0] + eps)\n    bsz = np.log(X[:, 1] + eps)\n    D   = np.log(X[:, 2] + eps)\n    Np  = np.log(X[:, 3] + eps)\n    logy = np.log(y + eps)\n\n    # design matrix\n    A = np.vstack([\n        np.ones_like(lr),\n        Np,\n        D,\n        bsz,\n        lr,\n        lr**2\n    ]).T  # shape (N,6)\n\n    # normal equations with ridge regularization\n    AtA = A.T.dot(A)                # (6,6)\n    AtY = A.T.dot(logy)             # (6,)\n    # set regularization \u03bb proportional to feature scale\n    lam = 1e-6 * np.trace(AtA) / AtA.shape[0]\n    params = np.linalg.solve(AtA + lam * np.eye(6), AtY)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.3084)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law model for LLM training loss:\n  log L = a0 \n        + a1\u00b7log(N) \n        + a2\u00b7log(D) \n        + a3\u00b7log(B) \n        + a4\u00b7log(\u03b7) \n        + a5\u00b7[log(\u03b7)]^2 \n        + a6\u00b7[log(\u03b7)\u00b7log(B)]\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability\nand include an interaction term between learning rate and batch size\nto capture cross\u2010scale effects.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 7\u2010parameter\n    quadratic+interaction log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 7 or 2D array (T,7) for T parallel models\n              [a0, a1, a2, a3, a4, a5, a6]\n    Returns:\n      If params is shape (7,), returns (N,) predicted losses.\n      If params is shape (T,7), returns (N,T) predicted losses\n      (or (N,) if T==1).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    \n    # Avoid zero/negative inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Npar = X[:, 3] + eps\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build design/features matrix F: (N \u00d7 7)\n    # Columns: [1, log_N, log_D, log_B, log_lr, (log_lr)^2, log_lr*log_B]\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 7:\n            raise ValueError(f\"Expected params length 7, got {p.shape[0]}\")\n        logL = F.dot(p)\n        return np.exp(logL)\n\n    # Multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        logL = F.dot(p.T)        # shape (N, T)\n        L = np.exp(logL)\n        # If only one model, return 1D\n        if L.shape[1] == 1:\n            return L[:, 0]\n        return L\n\n    raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic+interaction log\u2010law by solving a\n    ridge\u2010regularized least\u2010squares problem in log\u2010space:\n      minimize ||F\u00b7params \u2013 log(y)||^2 + \u03bb||params||^2\n    where F columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2, log \u03b7\u00b7log B].\n    Returns params: 1D array length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Avoid zero/negative inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Npar = X[:, 3] + eps\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(y + eps)\n\n    # Build design matrix F: (N \u00d7 7)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    # Ridge\u2010regularized normal equations\n    # Solve (F\u1d40F + \u03bbI) p = F\u1d40 log_y\n    FtF = F.T.dot(F)\n    # Regularization strength: small fraction of trace\n    lam = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    reg = lam * np.eye(FtF.shape[0])\n\n    rhs = F.T.dot(log_y)\n    params = np.linalg.solve(FtF + reg, rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.2653)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor:\n\nWe model the loss as\n   L_pred = c0 + exp( F(x) \u00b7 p )\nwhere x = [\u03b7, B, D, N] = [learning rate, batch size, data size, non-embedding params],\nand the feature vector F(x) has components:\n   [1,\n    log(N),\n    log(D),\n    log(B),\n    log(\u03b7),\n    (log(\u03b7))^2,\n    log(\u03b7)\u00b7log(B)]\nThis captures main power\u2010law effects plus curvature in the learning\u2010rate term\nand its interaction with batch size.  We fit p via ridge\u2010regularized least\nsquares in log\u2010space, then calibrate c0 (an additive floor) in original loss\nspace to reduce bias and improve R\u00b2/generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size],\n                   all entries > 0.\n      params:      1D array of length 8, or 2D array of shape (T,8):\n                   params[...,0]    = c0  (additive floor, >=0)\n                   params[...,1:8]  = p    (7\u2010dim coefficients for log\u2010features)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,8), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    lr    = np.clip(X[:, 0], eps, None)\n    bsz   = np.clip(X[:, 1], eps, None)\n    D     = np.clip(X[:, 2], eps, None)\n    Npar  = np.clip(X[:, 3], eps, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build feature matrix F: shape (N,7)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz\n    ], axis=1)  # (N,7)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 8:\n            raise ValueError(f\"Expected params length 8, got {p.shape[0]}\")\n        c0      = p[0]\n        coeffs  = p[1:]        # shape (7,)\n        logL    = F.dot(coeffs)  # shape (N,)\n        L_model = np.exp(logL)\n        return c0 + L_model\n\n    # Multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 8:\n            raise ValueError(f\"Expected params.shape[1]==8, got {P}\")\n        c0      = p[:, 0]        # shape (T,)\n        coeffs  = p[:, 1:]       # shape (T,7)\n        logL    = F.dot(coeffs.T)  # shape (N,T)\n        L_model = np.exp(logL)\n        # broadcast additive floor\n        out = L_model + c0[np.newaxis, :]\n        # squeeze if single\n        if out.shape[1] == 1:\n            return out[:, 0]\n        return out\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter scaling law:\n      minimize ||F\u00b7p \u2212 log(y)||^2 + \u03bb||p||^2,\n    then set c0 = max( mean(y \u2212 exp(F\u00b7p)), 0 ).\n    Returns a length\u20108 vector [c0, p0, \u2026, p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    lr    = np.clip(X[:, 0], eps, None)\n    bsz   = np.clip(X[:, 1], eps, None)\n    D     = np.clip(X[:, 2], eps, None)\n    Npar  = np.clip(X[:, 3], eps, None)\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(np.clip(y, eps, None))\n\n    # Build design matrix F: (N,7)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    # Ridge\u2010regularized least squares in log\u2010space\n    FtF = F.T.dot(F)                    # (7,7)\n    lam = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    reg = lam * np.eye(FtF.shape[0])\n    rhs = F.T.dot(log_y)                # (7,)\n    p_ls = np.linalg.solve(FtF + reg, rhs)  # (7,)\n\n    # Calibrate additive floor c0 in original loss space\n    # y0 = exp(F \u00b7 p_ls)\n    y0 = np.exp(F.dot(p_ls))\n    # residual mean\n    c0 = np.mean(y - y0)\n    if c0 < 0:\n        c0 = 0.0\n\n    # Return full params: [c0, p_ls...]\n    return np.concatenate([[c0], p_ls])\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0411, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 8\u2010parameter scaling\u2010law model for LLM training loss:\n  log L = a0 \n        + a1\u00b7log(N) \n        + a2\u00b7log(D) \n        + a3\u00b7log(B) \n        + a4\u00b7log(\u03b7) \n        + a5\u00b7[log(\u03b7)]^2 \n        + a6\u00b7[log(\u03b7)\u00b7log(B)]\n        + a7\u00b7[log(N)\u00b7log(D)]\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    quadratic+interaction log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 8 or 2D array (T,8) for T parallel models\n              [a0, a1, a2, a3, a4, a5, a6, a7]\n    Returns:\n      If params is shape (8,), returns (N,) predicted losses.\n      If params is shape (T,8), returns (N,T) predicted losses\n      (or (N,) if T==1).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    \n    # Avoid zero or negative inputs\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build design/features matrix F: (N \u00d7 8)\n    # Columns: [1,\n    #           log_N,\n    #           log_D,\n    #           log_B,\n    #           log_lr,\n    #           (log_lr)^2,\n    #           (log_lr)*(log_B),\n    #           (log_N)*(log_D)]\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 8:\n            raise ValueError(f\"Expected params length 8, got {p.shape[0]}\")\n        logL = F.dot(p)\n        return np.exp(logL)\n\n    # Multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 8:\n            raise ValueError(f\"Expected params.shape[1]==8, got {P}\")\n        logL = F.dot(p.T)        # shape (N, T)\n        L = np.exp(logL)\n        # If only one model, return 1D\n        if L.shape[1] == 1:\n            return L[:, 0]\n        return L\n\n    raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter quadratic+interaction log\u2010law by solving a\n    ridge\u2010regularized least\u2010squares problem in log\u2010space:\n      minimize ||F\u00b7params \u2013 log(y)||^2 + \u03bb||params||^2\n    where F columns = [1, log N, log D, log B,\n                       log \u03b7, (log \u03b7)^2, log \u03b7\u00b7log B, log N\u00b7log D].\n    Returns params: 1D array length 8.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Avoid zero or negative inputs\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(np.clip(y, eps, None))\n\n    # Build design matrix F: (N \u00d7 8)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    # Ridge\u2010regularized normal equations\n    # Solve (F\u1d40F + \u03bbI) p = F\u1d40 log_y\n    FtF = F.T.dot(F)\n    n_feat = FtF.shape[0]\n    # Regularization strength: small fraction of avg diagonal\n    lam = 1e-5 * np.trace(FtF) / n_feat\n    reg = lam * np.eye(n_feat)\n\n    rhs = F.T.dot(log_y)\n    params = np.linalg.solve(FtF + reg, rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (7.282), Excellent nmae (3.044)\n\n\n### Inspiration 2 (Score: 4.7798, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended log\u2013linear model\n    with an interaction term between data size and model size.\n\n    Model:\n      log(loss) = p0\n                + p1\u00b7log(lr)\n                + p2\u00b7log(bsz)\n                + p3\u00b7log(data_size)\n                + p4\u00b7log(param_size)\n                + p5\u00b7[log(data_size) * log(param_size)]\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) or (T,6), where\n                     params[...,0] = intercept p0\n                     params[...,1:] = slopes [p1, p2, p3, p4, p5]\n    Returns:\n      preds: shape (N,) if params is (6,), or (N,T) if params is (T,6))\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # Compute log-features\n    log_lr, log_bsz, log_data, log_param = np.log(X).T\n    # Interaction term\n    interact = log_data * log_param\n\n    # Stack features into design matrix B: shape (N,6)\n    N = X.shape[0]\n    B = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        interact\n    ])  # (N,6)\n\n    # Prepare params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # (1,6)\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params of shape (6,) or (T,6), got {p.shape}\")\n\n    # Compute log-predictions: shape (N,T)\n    log_pred = B.dot(p.T)  # (N,T)\n    loss_pred = np.exp(log_pred)\n\n    # If single parameter vector, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013linear model with data/model-size interaction\n    via ridge-regularized least squares in log-space:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size),\n               log(data_size)*log(param_size)].\n\n    Returns:\n      params: array of shape (6,) = [p0, p1, p2, p3, p4, p5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Compute log-features\n    log_lr, log_bsz, log_data, log_param = np.log(X).T\n    interact = log_data * log_param\n\n    # Build design matrix A: shape (N,6)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        interact\n    ])  # (N,6)\n\n    # Target is log-loss\n    logy = np.log(y)\n\n    # Small ridge for numerical stability\n    alpha = 1e-4\n    ATA = A.T.dot(A)\n    reg = np.eye(ATA.shape[0], dtype=float) * alpha\n\n    # Solve (A^T A + \u03b1I) w = A^T logy\n    w = np.linalg.solve(ATA + reg, A.T.dot(logy))\n    return w  # shape (6,)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (184.689), Excellent nmae (18.114)\n\n\n### Inspiration 3 (Score: 1.3258, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters using a quadratic\u2010in\u2010log\u2010lr scaling law:\n      log L = a0\n            + a1\u00b7log(param_size)\n            + a2\u00b7log(data_size)\n            + a3\u00b7log(bsz)\n            + a4\u00b7log(lr)\n            + a5\u00b7[log(lr)]^2\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 [a0,a1,a2,a3,a4,a5]\n                   or 2D array of shape (T,6) for T parallel models.\n\n    Returns:\n      If params is 1D, returns (N,) array of predicted losses.\n      If params is 2D, returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # safe log\n    eps = 1e-12\n    lr  = np.log(X[:, 0] + eps)\n    bsz = np.log(X[:, 1] + eps)\n    D   = np.log(X[:, 2] + eps)\n    Np  = np.log(X[:, 3] + eps)\n\n    # build design matrix A: [1, log(Np), log(D), log(bsz), log(lr), (log(lr))^2]\n    A = np.vstack([\n        np.ones_like(lr),\n        Np,\n        D,\n        bsz,\n        lr,\n        lr**2\n    ]).T  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_pred = A.dot(p)\n        return np.exp(log_pred)\n\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # each column of p.T is a parameter set\n        log_pred = A.dot(p.T)  # shape (N,T)\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the quadratic\u2010in\u2010log\u2010lr model by ridge\u2010regularized least squares in log\u2010space:\n      minimize ||A\u00b7p - log(y)||^2 + \u03bb||p||^2,\n    where A columns = [1, log(param_size), log(data_size), log(bsz), log(lr), (log(lr))^2].\n\n    Returns:\n      params: 1D array of length 6 = [a0,a1,a2,a3,a4,a5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # compute logs\n    eps = 1e-12\n    lr  = np.log(X[:, 0] + eps)\n    bsz = np.log(X[:, 1] + eps)\n    D   = np.log(X[:, 2] + eps)\n    Np  = np.log(X[:, 3] + eps)\n    logy = np.log(y + eps)\n\n    # design matrix\n    A = np.vstack([\n        np.ones_like(lr),\n        Np,\n        D,\n        bsz,\n        lr,\n        lr**2\n    ]).T  # shape (N,6)\n\n    # normal equations with ridge regularization\n    AtA = A.T.dot(A)                # (6,6)\n    AtY = A.T.dot(logy)             # (6,)\n    # set regularization \u03bb proportional to feature scale\n    lam = 1e-6 * np.trace(AtA) / AtA.shape[0]\n    params = np.linalg.solve(AtA + lam * np.eye(6), AtY)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (15.704), Excellent nmae (4.243)\n\n\n### Inspiration 4 (Score: 1.3084, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law model for LLM training loss:\n  log L = a0 \n        + a1\u00b7log(N) \n        + a2\u00b7log(D) \n        + a3\u00b7log(B) \n        + a4\u00b7log(\u03b7) \n        + a5\u00b7[log(\u03b7)]^2 \n        + a6\u00b7[log(\u03b7)\u00b7log(B)]\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for stability\nand include an interaction term between learning rate and batch size\nto capture cross\u2010scale effects.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 7\u2010parameter\n    quadratic+interaction log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 7 or 2D array (T,7) for T parallel models\n              [a0, a1, a2, a3, a4, a5, a6]\n    Returns:\n      If params is shape (7,), returns (N,) predicted losses.\n      If params is shape (T,7), returns (N,T) predicted losses\n      (or (N,) if T==1).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    \n    # Avoid zero/negative inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Npar = X[:, 3] + eps\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build design/features matrix F: (N \u00d7 7)\n    # Columns: [1, log_N, log_D, log_B, log_lr, (log_lr)^2, log_lr*log_B]\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 7:\n            raise ValueError(f\"Expected params length 7, got {p.shape[0]}\")\n        logL = F.dot(p)\n        return np.exp(logL)\n\n    # Multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        logL = F.dot(p.T)        # shape (N, T)\n        L = np.exp(logL)\n        # If only one model, return 1D\n        if L.shape[1] == 1:\n            return L[:, 0]\n        return L\n\n    raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic+interaction log\u2010law by solving a\n    ridge\u2010regularized least\u2010squares problem in log\u2010space:\n      minimize ||F\u00b7params \u2013 log(y)||^2 + \u03bb||params||^2\n    where F columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2, log \u03b7\u00b7log B].\n    Returns params: 1D array length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Avoid zero/negative inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Npar = X[:, 3] + eps\n\n    # Compute logs\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(y + eps)\n\n    # Build design matrix F: (N \u00d7 7)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz\n    ], axis=1)\n\n    # Ridge\u2010regularized normal equations\n    # Solve (F\u1d40F + \u03bbI) p = F\u1d40 log_y\n    FtF = F.T.dot(F)\n    # Regularization strength: small fraction of trace\n    lam = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    reg = lam * np.eye(FtF.shape[0])\n\n    rhs = F.T.dot(log_y)\n    params = np.linalg.solve(FtF + reg, rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (17.560), Excellent nmae (4.180)\n\n\n### Inspiration 5 (Score: 4.0253, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010space scaling\u2010law model with quadratic learning\u2010rate term\nand cross\u2010interaction between model size and data size.\nlog L = a0\n      + a1\u00b7log N\n      + a2\u00b7log D\n      + a3\u00b7log B\n      + a4\u00b7log \u03b7\n      + a5\u00b7(log \u03b7)^2\n      + a6\u00b7(log N \u00b7 log D)\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\nFitting is done via ridge\u2010regularized least squares in log\u2010space\nfor numerical stability and generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 7\u2010parameter log\u2010law.\n    Inputs:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: 1D array of length 7 (or 2D array (T,7) for T parallel models)\n              [a0, a1, a2, a3, a4, a5, a6]\n    Returns:\n      If params is shape (7,), returns (N,) predicted losses.\n      If params is shape (T,7), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    \n    # Precompute logs (clipped to avoid log(0))\n    eps = 1e-12\n    lr  = np.clip(X[:, 0], eps, None)\n    bsz = np.clip(X[:, 1], eps, None)\n    D   = np.clip(X[:, 2], eps, None)\n    Np  = np.clip(X[:, 3], eps, None)\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_N   = np.log(Np)\n    # Cross term\n    logN_logD = log_N * log_D\n\n    # Single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 7:\n            raise ValueError(f\"Expected params length 7, got {p.shape[0]}\")\n        a0, a1, a2, a3, a4, a5, a6 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * (log_lr ** 2)\n            + a6 * logN_logD\n        )\n        return np.exp(logL)\n\n    # Parallel parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        # Build design matrix A (N \u00d7 7)\n        Npts = X.shape[0]\n        A = np.empty((Npts, 7), dtype=float)\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = log_lr ** 2\n        A[:, 6] = logN_logD\n        # Compute log\u2010predictions for each of T parameter sets\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010law by solving a ridge\u2010regularized least\u2010squares\n    problem in log\u2010space:\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2, (log N\u00b7log D)].\n    Returns params: 1D array length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip and take logs\n    eps = 1e-12\n    lr  = np.clip(X[:, 0], eps, None)\n    bsz = np.clip(X[:, 1], eps, None)\n    D   = np.clip(X[:, 2], eps, None)\n    Np  = np.clip(X[:, 3], eps, None)\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_N   = np.log(Np)\n    logy    = np.log(np.clip(y, eps, None))\n\n    # Build design matrix A (N \u00d7 7)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 7), dtype=float)\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = log_lr ** 2\n    A[:, 6] = log_N * log_D\n\n    # Ridge regularization: small fraction of average diagonal\n    AtA = A.T.dot(A)\n    lam = 1e-6 * np.trace(AtA) / 7.0\n    ridge = lam * np.eye(7)\n\n    # Solve (A\u1d40A + \u03bbI) p = A\u1d40 logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (128.649), Excellent nmae (15.094)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training loss with quadratic curvature\nin both learning\u2010rate and batch\u2010size log\u2010scales.\n\nWe model:\n  log L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n        + a6\u00b7[log(B)]^2\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nFitting is performed via ridge\u2010regularized least squares in log\u2010space\nfor numerical stability on skewed hyperparameter distributions.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 7\u2010parameter quadratic log\u2010law.\n\n    Args:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:       1D array of length 7 or 2D array of shape (T,7)\n                    [a0, a1, a2, a3, a4, a5, a6]\n\n    Returns:\n      If params.ndim==1: returns (N,) array of predicted losses.\n      If params.ndim==2: returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # Safe log transform\n    eps = 1e-12\n    log_lr  = np.log(X[:, 0] + eps)\n    log_bsz = np.log(X[:, 1] + eps)\n    log_D   = np.log(X[:, 2] + eps)\n    log_N   = np.log(X[:, 3] + eps)\n\n    # Precompute squared terms\n    lr_sq  = log_lr ** 2\n    bsz_sq = log_bsz ** 2\n\n    p = np.asarray(params, dtype=float)\n\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.size != 7:\n            raise ValueError(f\"Expected params length 7, got {p.size}\")\n        a0, a1, a2, a3, a4, a5, a6 = p\n        logL = (\n            a0\n            + a1 * log_N\n            + a2 * log_D\n            + a3 * log_bsz\n            + a4 * log_lr\n            + a5 * lr_sq\n            + a6 * bsz_sq\n        )\n        return np.exp(logL)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 7:\n            raise ValueError(f\"Expected params.shape[1]==7, got {P}\")\n        # Build design matrix once\n        Npts = X.shape[0]\n        A = np.empty((Npts, 7), dtype=float)\n        A[:, 0] = 1.0\n        A[:, 1] = log_N\n        A[:, 2] = log_D\n        A[:, 3] = log_bsz\n        A[:, 4] = log_lr\n        A[:, 5] = lr_sq\n        A[:, 6] = bsz_sq\n        # Compute log\u2010predictions for each parameter set\n        logL = A.dot(p.T)  # shape (N, T)\n        return np.exp(logL)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n\n      minimize ||A\u00b7params \u2013 log(loss)||^2 + \u03bb||params||^2\n\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2, (log B)^2].\n\n    Returns:\n      params: 1D array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Safe log transform\n    eps = 1e-12\n    log_lr  = np.log(X[:, 0] + eps)\n    log_bsz = np.log(X[:, 1] + eps)\n    log_D   = np.log(X[:, 2] + eps)\n    log_N   = np.log(X[:, 3] + eps)\n    logy    = np.log(y + eps)\n\n    # Precompute squared terms\n    lr_sq  = log_lr ** 2\n    bsz_sq = log_bsz ** 2\n\n    # Build design matrix A (N \u00d7 7)\n    Npts = X.shape[0]\n    A = np.empty((Npts, 7), dtype=float)\n    A[:, 0] = 1.0\n    A[:, 1] = log_N\n    A[:, 2] = log_D\n    A[:, 3] = log_bsz\n    A[:, 4] = log_lr\n    A[:, 5] = lr_sq\n    A[:, 6] = bsz_sq\n\n    # Ridge regularization: \u03bb relative to avg. diagonal of A\u1d40A\n    AtA = A.T.dot(A)\n    trace = np.trace(AtA)\n    lam = 1e-6 * (trace / 7.0)\n    ridge = lam * np.eye(7)\n\n    # Solve normal equations: (A\u1d40A + \u03bbI)\u00b7p = A\u1d40\u00b7logy\n    At_y = A.T.dot(logy)\n    params = np.linalg.solve(AtA + ridge, At_y)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 8\u2010parameter log\u2010space scaling\u2010law model for LLM training loss:\n\n  log L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n        + a6\u00b7[log(\u03b7)\u00b7log(B)]\n        + a7\u00b7[log(N)\u00b7log(D)]\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via small\u2010ridge\u2010regularized least squares in log\u2010space for numerical\nstability and to capture both curvature and key interaction effects.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    quadratic+interaction log\u2010law.\n\n    Args:\n      data_points: np.ndarray of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8 or 2D array of shape (T,8)\n                   Each row (or the single array) = [a0, a1, ..., a7]\n\n    Returns:\n      If params.ndim == 1: returns array of shape (N,)\n      If params.ndim == 2: returns array of shape (N, T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n\n    # Build design matrix F: (N, 8)\n    # columns = [1,\n    #            log_N,\n    #            log_D,\n    #            log_B,\n    #            log_lr,\n    #            (log_lr)^2,\n    #            log_lr*log_B,\n    #            log_N*log_D]\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 8:\n            raise ValueError(f\"Expected params length 8, got {p.shape[0]}\")\n        logL = F.dot(p)\n        return np.exp(logL)\n\n    # Multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 8:\n            raise ValueError(f\"Expected params.shape[1] == 8, got {P}\")\n        # Compute log\u2010predictions for each parameter set\n        logL = F.dot(p.T)  # shape (N, T)\n        L = np.exp(logL)\n        # If only one set, return (N,)\n        if L.shape[1] == 1:\n            return L[:, 0]\n        return L\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter quadratic+interaction log\u2010law by solving:\n\n      minimize ||F\u00b7params \u2013 log(y)||^2 + \u03bb||params||^2\n\n    where F columns = [1, log N, log D, log B,\n                       log \u03b7, (log \u03b7)^2, log \u03b7\u00b7log B, log N\u00b7log D].\n\n    Returns:\n      params: 1D np.ndarray of length 8.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    lr   = np.clip(X[:, 0], eps, None)\n    bsz  = np.clip(X[:, 1], eps, None)\n    D    = np.clip(X[:, 2], eps, None)\n    Npar = np.clip(X[:, 3], eps, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Npar = np.log(Npar)\n    log_y    = np.log(np.clip(y, eps, None))\n\n    # Build design matrix F: (N, 8)\n    ones = np.ones_like(log_lr)\n    F = np.stack([\n        ones,\n        log_Npar,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2,\n        log_lr * log_bsz,\n        log_Npar * log_D\n    ], axis=1)\n\n    # Solve ridge\u2010regularized normal equations\n    FtF = F.T.dot(F)                   # (8,8)\n    n_feat = FtF.shape[0]\n    # Regularization strength: small fraction of average diagonal\n    lam = 1e-5 * np.trace(FtF) / n_feat\n    reg = lam * np.eye(n_feat)\n\n    rhs = F.T.dot(log_y)               # (8,)\n    params = np.linalg.solve(FtF + reg, rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\n"]}}}