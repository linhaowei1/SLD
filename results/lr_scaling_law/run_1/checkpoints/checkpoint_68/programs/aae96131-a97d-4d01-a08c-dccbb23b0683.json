{"id": "aae96131-a97d-4d01-a08c-dccbb23b0683", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n# These are constants, not data\u2010dependent computations.\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    # log of inputs\n    logs = np.log(X + eps)                  # shape (N,4)\n    # normalize into approximately [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # shape (N,4)\n    N, F = z.shape\n\n    # Start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all feature columns\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow passing a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)       # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # shape (N,)\n\n    # Compute normal equations\n    ATA = A.T.dot(A)                  # shape (15,15)\n    P = ATA.shape[0]\n    # Adaptive ridge \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "82c185df-38c9-4053-99eb-35f9d4a89145", "generation": 3, "timestamp": 1754804092.9252524, "iteration_found": 59, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 218.17909861061133, "nmae": 19.388570584405066, "r2": -217.17909861061133, "combined_score": 0.004562478841910822}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 218.1791\n- nmae: 19.3886\n- r2: -217.1791\n- combined_score: 0.0046\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 33.3619, nmae: 7.5859, r2: -32.3619, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 33.3514, nmae: 7.5846, r2: -32.3514, combined_score: 0.0291\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for each feature in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features: [1, z_i, z_i^2, z_i * z_j for i<j]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    # Compute log and normalize to roughly [-1, 1]\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all features into (N, P) matrix\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix A and target vector\n    A = _build_design_matrix(X)         # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                    # shape (15,15)\n    P = ATA.shape[0]\n    # Scale \u03bb by average diagonal entry for data\u2010scale adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                      # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 2.1534)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param_size^{e_N}\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Stability epsilon\n    eps = 1e-12\n    # Build log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on prediction:\n      loss \u2248 b + exp(logA + \u03a3 e_i * log(x_i))\n    Returns optimized params array [b, logA, e_lr, e_bsz, e_D, e_N].\n    Supports multi\u2010target: if loss_values is (N,T), returns (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D target for uniform processing\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    # Precompute log\u2010features and feature statistics for centering\n    eps = 1e-12\n    logX = np.log(X + eps)            # (N,4)\n    mu = np.mean(logX, axis=0)        # (4,)\n    Z = logX - mu[None,:]             # center logs\n    \n    # Add intercept column for linear solve\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    # Regularized normal equation\n    lam = 1e-6\n    M = A_lin.T @ A_lin + lam * np.eye(5)\n\n    def _fit_single(yvec):\n        # 1) initialize bias b0 as small quantile to ensure positivity\n        y_min, y_max = np.min(yvec), np.max(yvec)\n        b0 = max(0.0, np.percentile(yvec, 5) * 0.5)\n        # 2) solve for log\u2010coeff by regression on log(y - b0)\n        y_shift = np.maximum(yvec - b0, eps)\n        logy = np.log(y_shift)\n        theta = np.linalg.solve(M, A_lin.T @ (logy - np.mean(logy)))  # centered y\n        # recover intercept shift\n        # initial logA = mean(logy) - \u03b8\u00b7mean(Z)\n        logA0 = np.mean(logy) - theta[1:].dot(np.zeros(4))  # since Z is centered, dot=0\n        init = np.array([b0, logA0, theta[1], theta[2], theta[3], theta[4]], dtype=np.float64)\n\n        # Prepare bounds\n        bounds = [\n            (0.0, max(y_max*2.0, 1.0)),  # b \u2265 0\n            (None, None),                # logA unbounded\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_D\n            (-5.0, 5.0),                 # e_N\n        ]\n        # Objective: MSE\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - yvec)**2)\n\n        # Multi\u2010start: use initial and a small jittered variant\n        best_p, best_loss = init, obj(init)\n        for offset in [0.0, 0.1]:\n            trial = init.copy()\n            # jitter exponents modestly\n            trial[2:] += offset * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] + offset*(y_max-y_min)*0.1)\n            trial[1] += offset * 0.1\n            try:\n                res = minimize(obj, trial, method='L-BFGS-B', bounds=bounds,\n                               options={'maxiter':500, 'ftol':1e-12})\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except:\n                pass\n\n        return best_p\n\n    # Fit each target dimension\n    params = []\n    for i in range(T):\n        params.append(_fit_single(y2d[:,i]))\n    params = np.stack(params, axis=0)  # (T,6)\n    return params[0] if params.shape[0]==1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3514), Performs well on nmae (7.5846), Performs well on r2 (-32.3514), Performs well on combined_score (0.0291)\n\n\n### Program 3 (Score: 2.1537)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law for LLM hyperparameter tuning.\nModel:   loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embed_param_size^{e_N}\nwith A = exp(logA). Fitted by a closed\u2010form log\u2010linear initialization\nand a single bounded L-BFGS-B refinement.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power law plus bias.\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    \n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects input shape (N,4), got {X.shape}\")\n    \n    # Unpack parameters\n    b, logA, e_lr, e_bsz, e_D, e_N = np.ravel(params)\n    \n    # Feature columns\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    \n    # Numerical stability epsilon\n    eps = 1e-12\n    \n    # Compute log\u2010term and exponentiate\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      1) closed\u2010form ridge regression on log(y - b0)\n      2) single bounded L-BFGS-B refinement minimizing MSE\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n    \n    Returns:\n      params: ndarray of shape (6,) for single\u2010target or (T,6) for multi\u2010target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    \n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n    \n    # Precompute logs of inputs for closed\u2010form initial fit\n    eps = 1e-12\n    Z = np.log(X + eps)               # (N, 4)\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    # Ridge stability\n    lam = 1e-6\n    AtA = A_lin.T @ A_lin + lam * np.eye(5)\n    At  = A_lin.T\n    \n    def _fit_single(y_vec):\n        # Baseline bias estimate: floor on minimal observed loss\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, y_min * 0.9)\n        \n        # Shift and clamp target\n        y_shift = np.maximum(y_vec - b0, eps)\n        \n        # Closed\u2010form log\u2010linear solve: log(y_shift) \u2248 \u03b80 + \u03a3 \u03b8_i * log(x_i)\n        theta_lin = np.linalg.solve(AtA, At @ np.log(y_shift))\n        init = np.zeros(6, dtype=np.float64)\n        init[0] = b0\n        init[1:] = theta_lin  # [logA, e_lr, e_bsz, e_D, e_N]\n        \n        # Bounds for optimization\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b \u2265 0\n            (None, None),                  # logA unbounded\n            (-5.0, 5.0),                   # e_lr\n            (-5.0, 5.0),                   # e_bsz\n            (-5.0, 5.0),                   # e_D\n            (-5.0, 5.0),                   # e_N\n        ]\n        \n        # Objective: mean squared error in original loss space\n        def obj(p):\n            preds = scaling_law_func(X, p)\n            return np.mean((preds - y_vec) ** 2)\n        \n        # Single L-BFGS-B refinement\n        res = minimize(\n            obj,\n            init,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-12}\n        )\n        return res.x if res.success else init\n    \n    # Fit each target dimension\n    all_params = np.vstack([_fit_single(Y[:, i]) for i in range(T)])\n    return all_params[0] if T == 1 else all_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.3619), Performs well on nmae (7.5859), Performs well on r2 (-32.3619), Performs well on combined_score (0.0291)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.1548)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a 6\u2010parameter additive\u2010bias power\u2010law:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * model_size^{e_model},\n    where A = exp(logA).\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 = [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # unpack parameters\n    b, logA, e_lr, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # add small eps to avoid log(0)\n    eps = 1e-12\n    lr  = X[:, 0] + eps\n    bsz = X[:, 1] + eps\n    D   = X[:, 2] + eps\n    Np  = X[:, 3] + eps\n    # compute power\u2010law term in log\u2010space\n    log_term = (\n        logA\n        + e_lr  * np.log(lr)\n        + e_bsz * np.log(bsz)\n        + e_data * np.log(D)\n        + e_model* np.log(Np)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model by minimizing MSE in original loss space:\n      params = [b, logA, e_lr, e_bsz, e_data, e_model]\n    Initialization via closed\u2010form log\u2010linear regression, \n    then refinement with L-BFGS-B under reasonable bounds.\n    Returns:\n      opt_params: ndarray of length 6\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # small constant for logs\n    eps = 1e-12\n    # initial bias guess: half the minimum loss (clipped at zero)\n    b0 = max(0.0, 0.5 * np.min(y))\n\n    # adjust targets and take logs\n    y_adj = np.clip(y - b0, eps, None)\n    logs = np.log(X + eps)  # shape (N,4)\n    # design matrix for log\u2010linear fit: [1, ln(lr), ln(bsz), ln(D), ln(Np)]\n    A = np.concatenate([np.ones((X.shape[0], 1)), logs], axis=1)\n    # closed\u2010form least squares in log space\n    theta_ls, *_ = np.linalg.lstsq(A, np.log(y_adj), rcond=None)\n    # theta_ls = [logA0, e_lr0, e_bsz0, e_data0, e_model0]\n    init_params = np.zeros(6, dtype=np.float64)\n    init_params[0] = b0\n    init_params[1:] = theta_ls\n\n    # set bounds: bias \u22650, exponents \u2208[-5,5], logA free\n    y_max = np.max(y)\n    bounds = [\n        (0.0, 1.5 * y_max),  # b\n        (None, None),        # logA\n        (-5.0, 5.0),         # e_lr\n        (-5.0, 5.0),         # e_bsz\n        (-5.0, 5.0),         # e_data\n        (-5.0, 5.0),         # e_model\n    ]\n\n    # objective: mean squared error in original loss space\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # refine parameters with L-BFGS-B\n    result = minimize(\n        mse_obj,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 1000, \"ftol\": 1e-12}\n    )\n    # return optimized or fallback\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 3.7843)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      Loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    # compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2010linear scaling law by solving a small ridge\u2010regularized\n    least squares problem in log\u2010space:\n      minimize \u2016A \u03b8 \u2212 log(y)\u2016\u00b2 + \u03bb\u2016\u03b8\u2016\u00b2\n    where A = [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size)].\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of training losses (must be >0)\n    Returns:\n      theta: ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # shape (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    # ridge regularization strength (small for numerical stability)\n    lam = 1e-6\n    # solve (A\u1d40A + \u03bbI) \u03b8 = A\u1d40 y_log\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(ATA.shape[0], dtype=ATA.dtype)\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for each feature in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features: [1, z_i, z_i^2, z_i * z_j for i<j]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    # Compute log and normalize to roughly [-1, 1]\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all features into (N, P) matrix\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix A and target vector\n    A = _build_design_matrix(X)         # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                    # shape (15,15)\n    P = ATA.shape[0]\n    # Scale \u03bb by average diagonal entry for data\u2010scale adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                      # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 3.7843, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      Loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n    # avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)           # shape (N,4)\n    # compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2010linear scaling law by solving a small ridge\u2010regularized\n    least squares problem in log\u2010space:\n      minimize \u2016A \u03b8 \u2212 log(y)\u2016\u00b2 + \u03bb\u2016\u03b8\u2016\u00b2\n    where A = [1, log(lr), log(bsz), log(data_size), log(non_embedding_param_size)].\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of training losses (must be >0)\n    Returns:\n      theta: ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n    # build design matrix in log\u2010space\n    eps = 1e-12\n    Z = np.log(X + eps)                      # shape (N,4)\n    A = np.concatenate([np.ones((Z.shape[0],1)), Z], axis=1)  # shape (N,5)\n    y_log = np.log(y + eps)                  # shape (N,)\n    # ridge regularization strength (small for numerical stability)\n    lam = 1e-6\n    # solve (A\u1d40A + \u03bbI) \u03b8 = A\u1d40 y_log\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(ATA.shape[0], dtype=ATA.dtype)\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n    return theta\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 3 (Score: 3.8247, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative power-law scaling with bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param^{e_N}\n    params: [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features [lr, bsz, data_size, non_emb_param], got {X.shape[1]}\")\n    # unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters [b, logA, e_lr, e_bsz, e_D, e_N], got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    # numerical stability\n    eps = 1e-12\n    # log\u2010space computation\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model via bounded L-BFGS-B to minimize MSE.\n    Supports single\u2010target (N,) or multi\u2010target (N,T) loss_values.\n    Returns optimized params of shape (6,) or (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=float)\n    # ensure (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    def _fit_one(y_vec):\n        # reasonable inits based on data range\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0     = max(0.0, y_min * 0.5)\n        logA0  = np.log(max(y_max - b0, 1e-3))\n        init1  = np.array([b0,    logA0,   -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2  = np.array([0.0,   np.log(max(y_max,1e-3)), -1.0, -1.0, -0.1, -0.1], dtype=float)\n        bounds = [\n            (0.0,    max(y_max*2,1.0)),  # b \u2265 0\n            (None,   None),              # logA unbounded\n            (-10.0, 10.0),               # e_lr\n            (-10.0, 10.0),               # e_bsz\n            (-10.0, 10.0),               # e_D\n            (-10.0, 10.0),               # e_N\n        ]\n        best_p, best_loss = None, np.inf\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss, best_p = res.fun, res.x\n        return best_p if best_p is not None else init1\n\n    # fit each target independently\n    params = [ _fit_one(y2d[:,i]) for i in range(T) ]\n    params = np.vstack(params)\n    return params[0] if params.shape[0]==1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (115.570), Excellent nmae (14.290)\n\n\n### Inspiration 4 (Score: 4.9232, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log-quadratic scaling law with pairwise interactions.\n    Model in log-domain:\n      \u2113 = \u03b80\n        + \u03b81*log(lr) + \u03b82*(log(lr))^2\n        + \u03b83*log(bsz)\n        + \u03b84*log(data_size)\n        + \u03b85*log(non_embed_param_size)\n        + \u03b86*log(lr)*log(bsz)\n        + \u03b87*log(lr)*log(data_size)\n        + \u03b88*log(lr)*log(non_embed_param_size)\n        + \u03b89*log(bsz)*log(data_size)\n        + \u03b810*log(bsz)*log(non_embed_param_size)\n        + \u03b811*log(data_size)*log(non_embed_param_size)\n    Returns exp(\u2113).\n    Inputs:\n      data_points: array\u2010like of shape (N,4): [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 12 \u03b80\u2026\u03b811\n    Output:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d712)\n    A = np.column_stack([\n        np.ones_like(lr_log),       # \u03b80\n        lr_log,                      # \u03b81\n        lr_log**2,                   # \u03b82\n        bsz_log,                     # \u03b83\n        data_log,                    # \u03b84\n        param_log,                   # \u03b85\n        lr_log * bsz_log,            # \u03b86\n        lr_log * data_log,           # \u03b87\n        lr_log * param_log,          # \u03b88\n        bsz_log * data_log,          # \u03b89\n        bsz_log * param_log,         # \u03b810\n        data_log * param_log         # \u03b811\n    ])\n\n    log_pred = A.dot(theta)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 12\u2010parameter log-quadratic scaling law by ridge-regularized least squares\n    on the log-loss. Solves:\n      \u03b8 = argmin ||A\u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: numpy.ndarray of shape (12,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix A (N\u00d712)\n    A = np.column_stack([\n        np.ones_like(lr_log),       # intercept\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * bsz_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        bsz_log * data_log,\n        bsz_log * param_log,\n        data_log * param_log\n    ])\n\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]\n    lam = 1e-6\n    ATA = A.T.dot(A)\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n\n    theta_opt = np.linalg.solve(lhs, rhs)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (203.209), Excellent nmae (18.688)\n\n\n### Inspiration 5 (Score: 2.1534, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_param_size^{e_N}\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = np.asarray(params, dtype=np.float64).ravel()\n    # Unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    # Stability epsilon\n    eps = 1e-12\n    # Build log\u2010term\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    return b + np.exp(log_term)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on prediction:\n      loss \u2248 b + exp(logA + \u03a3 e_i * log(x_i))\n    Returns optimized params array [b, logA, e_lr, e_bsz, e_D, e_N].\n    Supports multi\u2010target: if loss_values is (N,T), returns (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D target for uniform processing\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    N, T = X.shape[0], y2d.shape[1]\n\n    # Precompute log\u2010features and feature statistics for centering\n    eps = 1e-12\n    logX = np.log(X + eps)            # (N,4)\n    mu = np.mean(logX, axis=0)        # (4,)\n    Z = logX - mu[None,:]             # center logs\n    \n    # Add intercept column for linear solve\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    # Regularized normal equation\n    lam = 1e-6\n    M = A_lin.T @ A_lin + lam * np.eye(5)\n\n    def _fit_single(yvec):\n        # 1) initialize bias b0 as small quantile to ensure positivity\n        y_min, y_max = np.min(yvec), np.max(yvec)\n        b0 = max(0.0, np.percentile(yvec, 5) * 0.5)\n        # 2) solve for log\u2010coeff by regression on log(y - b0)\n        y_shift = np.maximum(yvec - b0, eps)\n        logy = np.log(y_shift)\n        theta = np.linalg.solve(M, A_lin.T @ (logy - np.mean(logy)))  # centered y\n        # recover intercept shift\n        # initial logA = mean(logy) - \u03b8\u00b7mean(Z)\n        logA0 = np.mean(logy) - theta[1:].dot(np.zeros(4))  # since Z is centered, dot=0\n        init = np.array([b0, logA0, theta[1], theta[2], theta[3], theta[4]], dtype=np.float64)\n\n        # Prepare bounds\n        bounds = [\n            (0.0, max(y_max*2.0, 1.0)),  # b \u2265 0\n            (None, None),                # logA unbounded\n            (-5.0, 5.0),                 # e_lr\n            (-5.0, 5.0),                 # e_bsz\n            (-5.0, 5.0),                 # e_D\n            (-5.0, 5.0),                 # e_N\n        ]\n        # Objective: MSE\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - yvec)**2)\n\n        # Multi\u2010start: use initial and a small jittered variant\n        best_p, best_loss = init, obj(init)\n        for offset in [0.0, 0.1]:\n            trial = init.copy()\n            # jitter exponents modestly\n            trial[2:] += offset * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] + offset*(y_max-y_min)*0.1)\n            trial[1] += offset * 0.1\n            try:\n                res = minimize(obj, trial, method='L-BFGS-B', bounds=bounds,\n                               options={'maxiter':500, 'ftol':1e-12})\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except:\n                pass\n\n        return best_p\n\n    # Fit each target dimension\n    params = []\n    for i in range(T):\n        params.append(_fit_single(y2d[:,i]))\n    params = np.stack(params, axis=0)  # (T,6)\n    return params[0] if params.shape[0]==1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.351), Excellent nmae (7.585)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010quadratic scaling law with pairwise interactions.\n    Model form:\n      log_loss = \u03b80\n               + \u03b81*log(lr) + \u03b82*log(bsz)\n               + \u03b83*log(data_size) + \u03b84*log(non_embed_param_size)\n               + \u03b85*log(lr)*log(bsz)\n               + \u03b86*log(lr)*log(data_size)\n               + \u03b87*log(lr)*log(non_embed_param_size)\n               + \u03b88*log(bsz)*log(data_size)\n               + \u03b89*log(bsz)*log(non_embed_param_size)\n               + \u03b810*log(data_size)*log(non_embed_param_size)\n      loss = exp(log_loss)\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of \u03b8 coefficients\n    returns:     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func expects params of length 11, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Build pairwise interaction features (N,6)\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)\n\n    # Assemble design matrix (N,11): [1, x1, x2, x3, x4, inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Linear prediction in log\u2010space\n    log_pred = design.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 11\u2010parameter log\u2010quadratic model by ridge\u2010regularized least squares on log(loss).\n    Returns the optimized \u03b8 vector of length 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Build features in log\u2010space\n    eps = 1e-12\n    logs = np.log(X + eps)   # (N,4)\n    x1, x2, x3, x4 = logs[:,0], logs[:,1], logs[:,2], logs[:,3]\n\n    # Pairwise interactions\n    inter = np.stack([\n        x1 * x2,\n        x1 * x3,\n        x1 * x4,\n        x2 * x3,\n        x2 * x4,\n        x3 * x4\n    ], axis=1)  # (N,6)\n\n    # Design matrix A = [1, logs..., inter...]\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.concatenate([ones, logs, inter], axis=1)  # (N,11)\n\n    # Target in log\u2010space\n    y_log = np.log(y + eps)\n\n    # Ridge regression: solve (A^T A + \u03bbI) \u03b8 = A^T y_log\n    P = A.shape[1]\n    # Regularization matrix, but do not penalize intercept (\u03b80)\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n# These are constants, not data\u2010dependent computations.\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    # log of inputs\n    logs = np.log(X + eps)                  # shape (N,4)\n    # normalize into approximately [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # shape (N,4)\n    N, F = z.shape\n\n    # Start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all feature columns\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow passing a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)       # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # shape (N,)\n\n    # Compute normal equations\n    ATA = A.T.dot(A)                  # shape (15,15)\n    P = ATA.shape[0]\n    # Adaptive ridge \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}