{"id": "dfc7c39b-55b2-45ad-9f7c-dcaa9ab70173", "code": "import numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling for LM loss:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:       1D array of length 6 = [a0, w1, w2, w3, w4, u_floor],\n                    or 2D array of shape (T,6) for T parallel parameter sets.\n\n    Returns:\n      If params is (6,), returns (N,) predicted losses.\n      If params is (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure we have shape (T,6)\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got {p.shape[0]}\")\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n\n    # Unpack parameters\n    a0      = p[:, 0]       # (T,)\n    weights = p[:, 1:5]     # (T,4)\n    u_floor = p[:, 5]       # (T,)\n\n    # Compute unfloored log\u2010prediction: shape (N,T)\n    #   a0 + w\u00b7logX\n    lin_term = logX.dot(weights.T) + a0[None, :]\n    # Apply floor in log\u2010space\n    log_pred = np.logaddexp(lin_term, u_floor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # If only one set of params, return 1D array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb * ||params||^2\n    in log\u2010domain with L-BFGS-B (if available), otherwise returns the\n    OLS\u2010initialized parameters.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 6 = [a0, w1, w2, w3, w4, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) OLS init for intercept and slopes (without floor)\n    A_lin = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A_lin, logy, rcond=None)\n    a0_0 = lin_p[0]\n    w0   = lin_p[1:]         # (4,)\n\n    # 2) Floor init: slightly below the minimum observed log\u2010loss\n    min_logy = np.min(logy)\n    u0 = min_logy - np.log(5.0)\n\n    # Initial parameter vector [a0, w1, w2, w3, w4, u_floor]\n    p0 = np.concatenate([[a0_0], w0, [u0]])\n\n    # Regularization strength for ridge in log\u2010domain\n    lambda_reg = 1e-3\n\n    # Objective: MSE in log\u2010domain + ridge on all params\n    def _objective(p):\n        a0_val = p[0]\n        w_val  = p[1:5]\n        uf     = p[5]\n        lt     = logX.dot(w_val) + a0_val      # (N,)\n        pll    = np.logaddexp(lt, uf)         # (N,)\n        res    = pll - logy\n        mse    = np.mean(res * res)\n        reg    = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # Bounds: keep u_floor \u2264 min_logy for numerical stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n\n    # Optimize if possible\n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _objective, p0,\n            method=\"L-BFGS-B\",\n            bounds=bounds,\n            options={\"maxiter\": 500, \"ftol\": 1e-9}\n        )\n        if res.success:\n            return res.x\n\n    # Fallback to initial guess\n    return p0", "language": "python", "parent_id": "f54927e5-061b-4b27-8e30-b2fd81fc3760", "generation": 3, "timestamp": 1754802395.0387137, "iteration_found": 68, "metrics": {"nmse": 4.5135961300835445, "nmae": 2.5359044557196038, "r2": -3.5135961300835445, "combined_score": 0.18136983130551632}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 109.54412215874022, "nmae": 13.963451266227318, "r2": -108.54412215874022, "combined_score": 0.009046161663521199}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 109.5441\n- nmae: 13.9635\n- r2: -108.5441\n- combined_score: 0.0090\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 4.5452, nmae: 2.5458, r2: -3.5452, combined_score: 0.1803\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 4.5136, nmae: 2.5359, r2: -3.5136, combined_score: 0.1814\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9293)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n    where\n      X = [lr, bsz, data_size, non_embedding_param_size]\n      params = [a0, w1, w2, w3, w4, u_floor]\n    Supports broadcasting over multiple param sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)              # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]               # (T,)\n    weights= p[:, 1:5]             # (T,4)\n    ufloor = p[:, 5]               # (T,)\n\n    # compute a0 + w\u00b7logX, shape (N,T)\n    lin_term = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space\n    log_pred = np.logaddexp(lin_term, ufloor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # if single param set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb||params||^2\n    in log\u2010domain with L-BFGS-B.\n    Returns params = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) Linear least\u2010squares init for a0 and w\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below minimum observed log-loss\n    min_logy = np.min(logy)\n    uf0 = min_logy - np.log(5.0)  # floor ~ 1/5 of min loss\n\n    # initial 6-vector\n    p0 = np.concatenate([[a0_0], w0, [uf0]])  # shape (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log\u2010domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lt   = logX.dot(w) + a0           # (N,)\n        pll  = np.logaddexp(lt, uf)      # (N,)\n        res  = pll - logy\n        mse  = np.mean(res * res)\n        reg  = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n    \n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.5136), Performs well on nmae (2.5359), Performs well on r2 (-3.5136), Performs well on combined_score (0.1814)\n\n\n### Program 2 (Score: 0.9315)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to the OLS initialization\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling for LM loss:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:       1D array of length 6 = [a0, w1, w2, w3, w4, u_floor],\n                    or 2D array of shape (T,6) for T parallel parameter sets.\n\n    Returns:\n      If params is (6,), returns (N,) predicted losses.\n      If params is (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure we have shape (T,6)\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got {p.shape[0]}\")\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n\n    # Unpack parameters\n    a0     = p[:, 0]       # shape (T,)\n    weights= p[:, 1:5]     # shape (T,4)\n    u_floor= p[:, 5]       # shape (T,)\n\n    # Compute un\u2010floored log\u2010prediction: (N,T)\n    log_term = logX.dot(weights.T) + a0[None, :]\n    # Apply the floor in log\u2010space\n    pred_log = np.logaddexp(log_term, u_floor[None, :])\n    loss_pred = np.exp(pred_log)\n\n    # If only one parameter set, return a 1D array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb * ||params||^2\n    in the log\u2010domain with L-BFGS-B (if available), otherwise return the\n    OLS\u2010initialized parameters.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 6 = [a0, w1, w2, w3, w4, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # Clip and take logs\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)   # (N,4)\n    logy = np.log(yc)   # (N,)\n\n    N = X.shape[0]\n\n    # 1) OLS init for a0 and w\n    A_lin = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A_lin, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below the minimum observed log\u2010loss\n    min_logy = np.min(logy)\n    # set floor ~ 5% of min(y) in linear space => log(floor) = log(min_y) + log(0.05)\n    u0 = min_logy + np.log(0.05)\n\n    # Initial parameter vector\n    p0 = np.concatenate([[a0_0], w0, [u0]])  # shape (6,)\n\n    # Regularization strength\n    lambda_reg = 1e-3\n\n    # Objective: MSE in log domain + ridge\n    def _objective(p):\n        a0 = p[0]\n        w  = p[1:5]\n        uf = p[5]\n        lt = logX.dot(w) + a0                  # (N,)\n        pll = np.logaddexp(lt, uf)             # (N,)\n        res = pll - logy\n        mse = np.mean(res * res)\n        reg = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # If optimizer is available, run L-BFGS-B\n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _objective, p0,\n            method=\"L-BFGS-B\",\n            options={\"maxiter\": 500, \"ftol\": 1e-9}\n        )\n        if res.success:\n            return res.x\n\n    # Fallback to initial guess\n    return p0\n```\nKey features: Performs well on nmse (4.5452), Performs well on nmae (2.5458), Performs well on r2 (-3.5452), Performs well on combined_score (0.1803)\n\n\n### Program 3 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a quadratic log\u2010law:\n      log(loss) = a0\n                + a1*log(N)\n                + a2*log(D)\n                + a3*log(B)\n                + a4*log(lr)\n                + a5*(log(lr))^2\n    where\n      lr = learning rate,\n      B  = batch size,\n      D  = data_size,\n      N  = non_embedding_param_size.\n\n    data_points: shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      shape (6,) or (T,6)\n                 [a0, a1, a2, a3, a4, a5]\n    Returns:\n      if params is 1D: (N,) predicted losses\n      if params is 2D: (N, T) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n\n    # unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n\n    # build design matrix A of shape (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_pred = A.dot(p)\n        return np.exp(log_pred)\n\n    # multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # A (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = A.dot(p.T)\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares in log\u2010space:\n      minimize ||A\u00b7\u03b8 \u2013 log(y)||^2 + \u03bb||\u03b8||^2\n    where A columns = [1, log(N), log(D), log(B), log(lr), (log(lr))^2].\n    Returns:\n      \u03b8: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data points\")\n\n    # unpack and log\u2010transform features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    log_y   = np.log(y   + eps)\n\n    # design matrix (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ], axis=1)\n\n    # normal equations with tiny ridge\n    AtA = A.T.dot(A)           # (6,6)\n    AtY = A.T.dot(log_y)       # (6,)\n\n    # choose \u03bb as a small fraction of trace(AtA)/dim\n    dim = AtA.shape[0]\n    lam = 1e-6 * np.trace(AtA) / dim\n    ridge = lam * np.eye(dim)\n\n    # solve (AtA + \u03bbI) \u03b8 = AtY\n    theta = np.linalg.solve(AtA + ridge, AtY)\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 6\u2010parameter quadratic log\u2010law for LLM training loss:\n  log\u2009L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for numerical stability\nand handle both single\u2010 and multi\u2010set parameter arrays concisely.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n\n    Args:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length 6: [a0, a1, a2, a3, a4, a5]\n        - or 2D array of shape (T,6) for T parallel parameter sets\n\n    Returns:\n      If params is 1D: returns (N,) array of predicted losses.\n      If params is 2D: returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Split inputs\n    lr, bsz, D, Np = X.T\n    # Safe logs\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    # Build design matrix: [1, log N, log D, log B, log lr, (log lr)^2]\n    A = np.column_stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ])  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        log_pred = A.dot(p)             # shape (N,)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # A.dot(p.T) -> (N, T)\n        log_pred = A.dot(p.T)\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n\n      minimize ||A\u00b7p \u2013 log(y)||^2 + \u03bb||p||^2\n\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Split inputs\n    lr, bsz, D, Np = X.T\n    # Safe logs\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    log_y   = np.log(y   + eps)\n\n    # Build design matrix (N\u00d76)\n    A = np.column_stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ])\n\n    # Normal equations with ridge (Tikhonov) regularization\n    AtA = A.T.dot(A)                           # shape (6,6)\n    trace_AtA = np.trace(AtA)\n    lam = 1e-6 * (trace_AtA / AtA.shape[0])    # small regularization\n    rhs = A.T.dot(log_y)                       # shape (6,)\n\n    # Solve for parameters\n    params = np.linalg.solve(AtA + lam * np.eye(AtA.shape[0]), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.8187)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor and\nlight L2-regularization on log\u2010feature slopes for stability and better generalization.\n\nModel form:\n    Loss_pred = c0 + exp(a0 + a1*log(lr)\n                         + a2*log(bsz)\n                         + a3*log(data_size)\n                         + a4*log(non_embedding_param_size))\n\nWe fit 6 parameters [c0, a0, a1, a2, a3, a4] by minimizing\n    mean((Loss_pred - y)^2) + \u03bb * sum_{i=1..4}(a_i^2)\nusing L-BFGS-B, with c0 constrained \u2265 0.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6, or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (log\u2010feature slopes)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]               # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]                 # (T,)\n        a0 = p[:, 1]                 # (T,)\n        slopes = p[:, 2:]            # (T,4)\n        # logX @ slopes.T -> (N,T), then add intercepts\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing:\n      mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n      + \u03bb * sum_{i=1..4}(ai^2),\n    using L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array of shape (N,4) of positive hyperparameters.\n      loss_values: array of shape (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # regularization strength on slopes\n    lambda_reg = 1e-3\n\n    # objective: MSE + L2 on slopes\n    def _objective(p):\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        mse = np.mean(err * err)\n        reg = lambda_reg * np.sum(slopes * slopes)\n        return mse + reg\n\n    # initialize parameters\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    a0_init = np.log(max(y_clipped.mean() - c0_init, eps))\n    init = np.zeros(6, dtype=float)\n    init[0], init[1] = c0_init, a0_init\n    # slopes start at zero\n\n    # bounds: c0 >= 0, others unbounded\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_objective, init, method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-10, 'gtol':1e-8, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        # fallback to init if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9293, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n    where\n      X = [lr, bsz, data_size, non_embedding_param_size]\n      params = [a0, w1, w2, w3, w4, u_floor]\n    Supports broadcasting over multiple param sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)              # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]               # (T,)\n    weights= p[:, 1:5]             # (T,4)\n    ufloor = p[:, 5]               # (T,)\n\n    # compute a0 + w\u00b7logX, shape (N,T)\n    lin_term = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space\n    log_pred = np.logaddexp(lin_term, ufloor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # if single param set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb||params||^2\n    in log\u2010domain with L-BFGS-B.\n    Returns params = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) Linear least\u2010squares init for a0 and w\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below minimum observed log-loss\n    min_logy = np.min(logy)\n    uf0 = min_logy - np.log(5.0)  # floor ~ 1/5 of min loss\n\n    # initial 6-vector\n    p0 = np.concatenate([[a0_0], w0, [uf0]])  # shape (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log\u2010domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lt   = logX.dot(w) + a0           # (N,)\n        pll  = np.logaddexp(lt, uf)      # (N,)\n        res  = pll - logy\n        mse  = np.mean(res * res)\n        reg  = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n    \n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.514), Excellent nmae (2.536)\n\n\n### Inspiration 2 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 3 (Score: 2.8187, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor and\nlight L2-regularization on log\u2010feature slopes for stability and better generalization.\n\nModel form:\n    Loss_pred = c0 + exp(a0 + a1*log(lr)\n                         + a2*log(bsz)\n                         + a3*log(data_size)\n                         + a4*log(non_embedding_param_size))\n\nWe fit 6 parameters [c0, a0, a1, a2, a3, a4] by minimizing\n    mean((Loss_pred - y)^2) + \u03bb * sum_{i=1..4}(a_i^2)\nusing L-BFGS-B, with c0 constrained \u2265 0.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6, or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (log\u2010feature slopes)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]               # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]                 # (T,)\n        a0 = p[:, 1]                 # (T,)\n        slopes = p[:, 2:]            # (T,4)\n        # logX @ slopes.T -> (N,T), then add intercepts\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing:\n      mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n      + \u03bb * sum_{i=1..4}(ai^2),\n    using L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array of shape (N,4) of positive hyperparameters.\n      loss_values: array of shape (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # regularization strength on slopes\n    lambda_reg = 1e-3\n\n    # objective: MSE + L2 on slopes\n    def _objective(p):\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        mse = np.mean(err * err)\n        reg = lambda_reg * np.sum(slopes * slopes)\n        return mse + reg\n\n    # initialize parameters\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    a0_init = np.log(max(y_clipped.mean() - c0_init, eps))\n    init = np.zeros(6, dtype=float)\n    init[0], init[1] = c0_init, a0_init\n    # slopes start at zero\n\n    # bounds: c0 >= 0, others unbounded\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_objective, init, method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-10, 'gtol':1e-8, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        # fallback to init if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (60.098), Excellent nmae (10.258)\n\n\n### Inspiration 4 (Score: 3.7362, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using an extended\n    log\u2013linear scaling law with a quadratic term for learning rate:\n      log(loss) = a0\n                + a1 * log(lr)\n                + a2 * (log(lr))^2\n                + a3 * log(bsz)\n                + a4 * log(data_size)\n                + a5 * log(non_embedding_param_size)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: (N,4) array of positive hyperparameters\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (6,) or (T,6), where\n                   params[...,0] = a0   (intercept)\n                   params[...,1] = a1   (linear lr term)\n                   params[...,2] = a2   (quadratic lr term)\n                   params[...,3] = a3   (bsz term)\n                   params[...,4] = a4   (data_size term)\n                   params[...,5] = a5   (param_size term)\n\n    Returns:\n      loss_pred: shape (N,) if params is 1D else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n    # Prepare parameter array\n    pars = np.asarray(params, dtype=float)\n    if pars.ndim == 1:\n        pars = pars[None, :]\n    T, P = pars.shape\n    if P != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {P}\")\n\n    # Extract and clip features to avoid log(0)\n    lr   = np.clip(X[:, 0], 1e-12, None)\n    bsz  = np.clip(X[:, 1], 1e-12, None)\n    D    = np.clip(X[:, 2], 1e-12, None)\n    N_np = np.clip(X[:, 3], 1e-12, None)\n\n    # Compute log\u2010features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Np   = np.log(N_np)\n    log_lr2  = log_lr * log_lr\n\n    # Build design matrix: shape (N,6)\n    # columns = [1, log_lr, log_lr^2, log_bsz, log_D, log_Np]\n    Npnt = X.shape[0]\n    A = np.stack([\n        np.ones(Npnt),\n        log_lr,\n        log_lr2,\n        log_bsz,\n        log_D,\n        log_Np\n    ], axis=1)  # (N,6)\n\n    # Compute log\u2010loss predictions: (N, T)\n    log_loss = A.dot(pars.T)\n\n    # Exponentiate\n    loss_pred = np.exp(log_loss)\n\n    # If single parameter set, flatten\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear scaling law by regularized least squares:\n      minimize || log(y) - A @ a ||^2 + \u03bb * ||a[1:]||^2\n    where A columns = [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)]\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n\n    # Extract and clip\n    lr   = np.clip(X[:, 0], 1e-12, None)\n    bsz  = np.clip(X[:, 1], 1e-12, None)\n    D    = np.clip(X[:, 2], 1e-12, None)\n    N_np = np.clip(X[:, 3], 1e-12, None)\n\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_Np   = np.log(N_np)\n    log_lr2  = log_lr * log_lr\n\n    # Build design matrix A: (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr2,\n        log_bsz,\n        log_D,\n        log_Np\n    ], axis=1)\n\n    # Target vector\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # Regularization strength (small ridge on all except intercept)\n    lam = 1e-6\n    # Compute X^T X and X^T y\n    XtX = A.T.dot(A)\n    Xty = A.T.dot(logy)\n\n    # Add ridge: do not penalize intercept term\n    ridge = lam * np.eye(6)\n    ridge[0, 0] = 0.0\n    # Solve for parameters\n    params = np.linalg.solve(XtX + ridge, Xty)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (109.143), Excellent nmae (13.936)\n\n\n### Inspiration 5 (Score: 1.3258, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a quadratic log\u2010law:\n      log(loss) = a0\n                + a1*log(N)\n                + a2*log(D)\n                + a3*log(B)\n                + a4*log(lr)\n                + a5*(log(lr))^2\n    where\n      lr = learning rate,\n      B  = batch size,\n      D  = data_size,\n      N  = non_embedding_param_size.\n\n    data_points: shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      shape (6,) or (T,6)\n                 [a0, a1, a2, a3, a4, a5]\n    Returns:\n      if params is 1D: (N,) predicted losses\n      if params is 2D: (N, T) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n\n    # unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n\n    # build design matrix A of shape (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_pred = A.dot(p)\n        return np.exp(log_pred)\n\n    # multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # A (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = A.dot(p.T)\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares in log\u2010space:\n      minimize ||A\u00b7\u03b8 \u2013 log(y)||^2 + \u03bb||\u03b8||^2\n    where A columns = [1, log(N), log(D), log(B), log(lr), (log(lr))^2].\n    Returns:\n      \u03b8: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data points\")\n\n    # unpack and log\u2010transform features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    log_y   = np.log(y   + eps)\n\n    # design matrix (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ], axis=1)\n\n    # normal equations with tiny ridge\n    AtA = A.T.dot(A)           # (6,6)\n    AtY = A.T.dot(log_y)       # (6,)\n\n    # choose \u03bb as a small fraction of trace(AtA)/dim\n    dim = AtA.shape[0]\n    lam = 1e-6 * np.trace(AtA) / dim\n    ridge = lam * np.eye(dim)\n\n    # solve (AtA + \u03bbI) \u03b8 = AtY\n    theta = np.linalg.solve(AtA + ridge, AtY)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (15.704), Excellent nmae (4.243)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts language\u2010model loss using a log\u2010quadratic scaling law:\n      log(L) = a0 \n               + a1*log(lr) \n               + a2*(log(lr))^2 \n               + a3*log(bsz) \n               + a4*log(data_size) \n               + a5*log(non_embedding_param_size)\n    Loss = exp(log(L)).\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      array of shape (6,) or (T,6) containing\n                   [a0, a1, a2, a3, a4, a5].\n\n    Returns:\n      If params is 1D (6,), returns (N,) array of predicted losses.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n\n    # Ensure params is (T,6)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 6:\n        raise ValueError(f\"Expected params with 6 elements, got {P}\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, nparams = Xc.T\n\n    # Compute log features\n    log_lr     = np.log(lr)\n    log_bsz    = np.log(bsz)\n    log_data   = np.log(data_size)\n    log_params = np.log(nparams)\n\n    # Build design matrix A: shape (N,6)\n    N = X.shape[0]\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_params\n    ]).T  # (N,6)\n\n    # Compute log\u2010predictions\n    log_pred = A.dot(p.T)  # (N,T)\n    loss_pred = np.exp(log_pred)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter log\u2010quadratic model via ridge\u2010regularized least squares\n    in normalized log\u2010space:\n\n      log(L) = a0 \n               + a1*log(lr) \n               + a2*(log(lr))^2 \n               + a3*log(bsz) \n               + a4*log(data_size) \n               + a5*log(non_embedding_param_size)\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss_values must match number of data points\")\n\n    # Clip features and compute logs\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    lr, bsz, data_size, nparams = Xc.T\n    log_lr     = np.log(lr)\n    log_bsz    = np.log(bsz)\n    log_data   = np.log(data_size)\n    log_params = np.log(nparams)\n\n    # Build raw design matrix A (N,6)\n    A = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_params\n    ]).T  # (N,6)\n\n    # Normalize columns 1\u20135 (leave intercept column unchanged)\n    means = np.mean(A[:, 1:], axis=0)\n    stds  = np.std(A[:, 1:],  axis=0, ddof=0)\n    stds  = np.where(stds < eps, 1.0, stds)\n    A_norm = A.copy()\n    A_norm[:, 1:] = (A[:, 1:] - means) / stds\n\n    # Prepare target log\u2010loss, centered\n    y_clip = np.clip(y, eps, None)\n    logy   = np.log(y_clip)\n    mean_y = np.mean(logy)\n    y_cent = logy - mean_y\n\n    # Ridge regularization on slopes only\n    P = A_norm.shape[1]\n    ATA = A_norm.T.dot(A_norm)\n    lam = 1e-3 * np.trace(ATA) / P\n    Reg = np.eye(P) * lam\n    Reg[0, 0] = 0.0  # no penalty on intercept\n\n    # Solve (A_norm^T A_norm + Reg) \u00b7 w_norm = A_norm^T \u00b7 y_cent\n    w_norm = np.linalg.solve(ATA + Reg, A_norm.T.dot(y_cent))\n\n    # Un\u2010normalize back to original coefficients\n    intercept_norm = w_norm[0]\n    slopes_norm    = w_norm[1:]\n    slopes         = slopes_norm / stds\n    intercept      = mean_y + intercept_norm - np.dot(slopes_norm, means / stds)\n\n    return np.concatenate([[intercept], slopes])\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling for LM loss:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:       1D array of length 6 = [a0, w1, w2, w3, w4, u_floor],\n                    or 2D array of shape (T,6) for T parallel parameter sets.\n\n    Returns:\n      If params is (6,), returns (N,) predicted losses.\n      If params is (T,6), returns (N,T) predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure we have shape (T,6)\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params of length 6, got {p.shape[0]}\")\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n\n    # Unpack parameters\n    a0      = p[:, 0]       # (T,)\n    weights = p[:, 1:5]     # (T,4)\n    u_floor = p[:, 5]       # (T,)\n\n    # Compute unfloored log\u2010prediction: shape (N,T)\n    #   a0 + w\u00b7logX\n    lin_term = logX.dot(weights.T) + a0[None, :]\n    # Apply floor in log\u2010space\n    log_pred = np.logaddexp(lin_term, u_floor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # If only one set of params, return 1D array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb * ||params||^2\n    in log\u2010domain with L-BFGS-B (if available), otherwise returns the\n    OLS\u2010initialized parameters.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 6 = [a0, w1, w2, w3, w4, u_floor]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) OLS init for intercept and slopes (without floor)\n    A_lin = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A_lin, logy, rcond=None)\n    a0_0 = lin_p[0]\n    w0   = lin_p[1:]         # (4,)\n\n    # 2) Floor init: slightly below the minimum observed log\u2010loss\n    min_logy = np.min(logy)\n    u0 = min_logy - np.log(5.0)\n\n    # Initial parameter vector [a0, w1, w2, w3, w4, u_floor]\n    p0 = np.concatenate([[a0_0], w0, [u0]])\n\n    # Regularization strength for ridge in log\u2010domain\n    lambda_reg = 1e-3\n\n    # Objective: MSE in log\u2010domain + ridge on all params\n    def _objective(p):\n        a0_val = p[0]\n        w_val  = p[1:5]\n        uf     = p[5]\n        lt     = logX.dot(w_val) + a0_val      # (N,)\n        pll    = np.logaddexp(lt, uf)         # (N,)\n        res    = pll - logy\n        mse    = np.mean(res * res)\n        reg    = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # Bounds: keep u_floor \u2264 min_logy for numerical stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n\n    # Optimize if possible\n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _objective, p0,\n            method=\"L-BFGS-B\",\n            bounds=bounds,\n            options={\"maxiter\": 500, \"ftol\": 1e-9}\n        )\n        if res.success:\n            return res.x\n\n    # Fallback to initial guess\n    return p0\n```\n"]}}}