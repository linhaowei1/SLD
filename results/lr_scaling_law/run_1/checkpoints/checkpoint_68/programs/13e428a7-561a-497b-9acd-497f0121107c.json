{"id": "13e428a7-561a-497b-9acd-497f0121107c", "code": "import numpy as np\n\n# Try to import scipy.optimize.minimize for better fitting; otherwise we'll\n# fall back to the linear\u2010init parameters.\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n\n    Args:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6: [a0, w1, w2, w3, w4, u_floor],\n                   or 2D array shape (T,6) for T parallel parameter sets.\n\n    Returns:\n      If params is 1D: (N,) array of predicted losses.\n      If params is 2D: (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # normalize to shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]      # (T,)\n    weights= p[:, 1:5]    # (T,4)\n    ufloor = p[:, 5]      # (T,)\n\n    # compute linear term: (N,4)\u00b7(4,T) \u2192 (N,T)\n    lin = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space for stability\n    log_pred = np.logaddexp(lin, ufloor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # if single parameter set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb * ||params||^2\n    in log\u2010domain with L-BFGS-B (if available).\n\n    Returns:\n      params: 1D array length 6 = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)     # (N,4)\n    logy = np.log(yc)     # (N,)\n\n    N = X.shape[0]\n    # 1) closed\u2010form least\u2010squares init for a0 and weights\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    # solve A\u00b7p_ls = logy\n    p_ls, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0 = p_ls[0]\n    w0   = p_ls[1:]        # (4,)\n\n    # 2) initialize floor below the smallest observed log\u2010loss\n    min_logy = np.min(logy)\n    # floor set ~ 1/5 of min loss in linear domain \u2192 logfloor = log(min_logy_exp/5)\n    uf0 = min_logy - np.log(5.0)\n\n    # initial parameter vector\n    p0 = np.empty(6, dtype=float)\n    p0[0]       = a0_0\n    p0[1:5]     = w0\n    p0[5]       = uf0\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log-domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lin  = logX.dot(w) + a0         # (N,)\n        lp   = np.logaddexp(lin, uf)   # (N,)\n        err  = lp - logy\n        mse  = np.mean(err*err)\n        reg  = lambda_reg * np.sum(p*p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n\n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 1000, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n\n    # fallback to initial if optimization fails or scipy unavailable\n    return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "9869893d-6efa-4933-9503-b03a6b138eec", "generation": 3, "timestamp": 1754802390.6730533, "iteration_found": 67, "metrics": {"nmse": 4.5135961300835445, "nmae": 2.5359044557196038, "r2": -3.5135961300835445, "combined_score": 0.18136983130551632}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 103.6811184330119, "nmae": 13.543357661432402, "r2": -102.6811184330119, "combined_score": 0.0095528211292462}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 103.6811\n- nmae: 13.5434\n- r2: -102.6811\n- combined_score: 0.0096\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 15.7039, nmae: 4.2433, r2: -14.7039, combined_score: 0.0599\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 4.5136, nmae: 2.5359, r2: -3.5136, combined_score: 0.1814\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9293)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n    where\n      X = [lr, bsz, data_size, non_embedding_param_size]\n      params = [a0, w1, w2, w3, w4, u_floor]\n    Supports broadcasting over multiple param sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)              # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]               # (T,)\n    weights= p[:, 1:5]             # (T,4)\n    ufloor = p[:, 5]               # (T,)\n\n    # compute a0 + w\u00b7logX, shape (N,T)\n    lin_term = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space\n    log_pred = np.logaddexp(lin_term, ufloor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # if single param set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb||params||^2\n    in log\u2010domain with L-BFGS-B.\n    Returns params = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) Linear least\u2010squares init for a0 and w\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below minimum observed log-loss\n    min_logy = np.min(logy)\n    uf0 = min_logy - np.log(5.0)  # floor ~ 1/5 of min loss\n\n    # initial 6-vector\n    p0 = np.concatenate([[a0_0], w0, [uf0]])  # shape (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log\u2010domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lt   = logX.dot(w) + a0           # (N,)\n        pll  = np.logaddexp(lt, uf)      # (N,)\n        res  = pll - logy\n        mse  = np.mean(res * res)\n        reg  = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n    \n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.5136), Performs well on nmae (2.5359), Performs well on r2 (-3.5136), Performs well on combined_score (0.1814)\n\n\n### Program 2 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a quadratic log\u2010law:\n      log(loss) = a0\n                + a1*log(N)\n                + a2*log(D)\n                + a3*log(B)\n                + a4*log(lr)\n                + a5*(log(lr))^2\n    where\n      lr = learning rate,\n      B  = batch size,\n      D  = data_size,\n      N  = non_embedding_param_size.\n\n    data_points: shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      shape (6,) or (T,6)\n                 [a0, a1, a2, a3, a4, a5]\n    Returns:\n      if params is 1D: (N,) predicted losses\n      if params is 2D: (N, T) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n\n    # unpack features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n\n    # build design matrix A of shape (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ], axis=1)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter vector\n    if p.ndim == 1:\n        if p.size != 6:\n            raise ValueError(f\"Expected params length 6, got {p.size}\")\n        log_pred = A.dot(p)\n        return np.exp(log_pred)\n\n    # multiple parameter sets\n    if p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # A (N,6) dot p.T (6,T) -> (N,T)\n        log_pred = A.dot(p.T)\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares in log\u2010space:\n      minimize ||A\u00b7\u03b8 \u2013 log(y)||^2 + \u03bb||\u03b8||^2\n    where A columns = [1, log(N), log(D), log(B), log(lr), (log(lr))^2].\n    Returns:\n      \u03b8: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    if y.size != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data points\")\n\n    # unpack and log\u2010transform features\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    log_y   = np.log(y   + eps)\n\n    # design matrix (N,6)\n    A = np.stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ], axis=1)\n\n    # normal equations with tiny ridge\n    AtA = A.T.dot(A)           # (6,6)\n    AtY = A.T.dot(log_y)       # (6,)\n\n    # choose \u03bb as a small fraction of trace(AtA)/dim\n    dim = AtA.shape[0]\n    lam = 1e-6 * np.trace(AtA) / dim\n    ridge = lam * np.eye(dim)\n\n    # solve (AtA + \u03bbI) \u03b8 = AtY\n    theta = np.linalg.solve(AtA + ridge, AtY)\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n### Program 3 (Score: 1.3258)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 6\u2010parameter quadratic log\u2010law for LLM training loss:\n  log\u2009L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for numerical stability\nand handle both single\u2010 and multi\u2010set parameter arrays concisely.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n\n    Args:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length 6: [a0, a1, a2, a3, a4, a5]\n        - or 2D array of shape (T,6) for T parallel parameter sets\n\n    Returns:\n      If params is 1D: returns (N,) array of predicted losses.\n      If params is 2D: returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Split inputs\n    lr, bsz, D, Np = X.T\n    # Safe logs\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    # Build design matrix: [1, log N, log D, log B, log lr, (log lr)^2]\n    A = np.column_stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ])  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        log_pred = A.dot(p)             # shape (N,)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # A.dot(p.T) -> (N, T)\n        log_pred = A.dot(p.T)\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n\n      minimize ||A\u00b7p \u2013 log(y)||^2 + \u03bb||p||^2\n\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Split inputs\n    lr, bsz, D, Np = X.T\n    # Safe logs\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    log_y   = np.log(y   + eps)\n\n    # Build design matrix (N\u00d76)\n    A = np.column_stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ])\n\n    # Normal equations with ridge (Tikhonov) regularization\n    AtA = A.T.dot(A)                           # shape (6,6)\n    trace_AtA = np.trace(AtA)\n    lam = 1e-6 * (trace_AtA / AtA.shape[0])    # small regularization\n    rhs = A.T.dot(log_y)                       # shape (6,)\n\n    # Solve for parameters\n    params = np.linalg.solve(AtA + lam * np.eye(AtA.shape[0]), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.7039), Performs well on nmae (4.2433), Performs well on r2 (-14.7039), Performs well on combined_score (0.0599)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.6382)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust power\u2010law scaling\u2010law model for LLM training loss.\nWe model\n    L \u2248 exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\ni.e.  log L \u2248 a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nWe fit by robust ridge\u2010regularized linear regression in log\u2010space\nusing an iteratively reweighted least squares (IRLS) with Huber weights\nand small L2 regularization for numerical stability.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via fitted power\u2010law.\n\n    Args:\n      data_points: array of shape (N,4) or (N,4)-like with columns\n                   [lr, bsz, data_size, non_embedding_param_size], all > 0\n      params:      array of shape (5,) or (T,5).\n                   params[...,0] = a0 (intercept)\n                   params[...,i] = exponent for column i of data_points\n\n    Returns:\n      If params is shape (5,), returns (N,) array of predicted losses.\n      If params is shape (T,5), returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # numerical safety: all inputs must be positive\n    if np.any(X <= 0):\n        raise ValueError(\"All data_points entries must be strictly positive\")\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"params must have length 5, got {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, M = p.shape\n        if M != 5:\n            raise ValueError(f\"params must have shape (T,5), got (_, {M})\")\n        a0 = p[:, 0]           # shape (T,)\n        slopes = p[:, 1:]      # shape (T,4)\n        # log_pred: shape (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter power\u2010law model by robust IRLS in log\u2010space.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters\n      loss_values: (N,) array of positive LM losses\n\n    Returns:\n      params: (5,) array [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be shape (N,) matching data_points\")\n\n    # enforce positivity and small eps for logs\n    eps = 1e-12\n    if np.any(X <= 0) or np.any(y <= 0):\n        raise ValueError(\"All data_points and loss_values must be > 0\")\n    logX = np.log(X)\n    logy = np.log(y)\n\n    N, D = logX.shape  # D == 4\n    # standardize features for numerical conditioning\n    mu = logX.mean(axis=0)\n    sigma = logX.std(axis=0)\n    # avoid zero std\n    sigma[sigma < 1e-8] = 1.0\n    Z = (logX - mu) / sigma\n\n    # design matrix: intercept + D standardized features\n    A = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N, 1+D) = (N,5)\n\n    # IRLS with Huber weighting\n    # initial OLS solution\n    alpha = 1e-6\n    ATA = A.T.dot(A) + alpha * np.eye(D+1)\n    ATy = A.T.dot(logy)\n    p = np.linalg.solve(ATA, ATy)\n\n    # IRLS loop\n    max_iter = 10\n    for _ in range(max_iter):\n        logy_pred = A.dot(p)\n        resid = logy_pred - logy\n        # compute Huber delta based on median absolute dev\n        med_abs = np.median(np.abs(resid))\n        delta = 1.345 * max(med_abs, 1e-3)\n        # weights\n        w = np.ones_like(resid)\n        mask = np.abs(resid) > delta\n        w[mask] = delta / np.abs(resid[mask])\n        # weighted least squares\n        W = w[:, None]\n        ATA_w = (A * W).T.dot(A) + alpha * np.eye(D+1)\n        ATy_w = (A * W).T.dot(logy)\n        p_new = np.linalg.solve(ATA_w, ATy_w)\n        if np.allclose(p, p_new, rtol=1e-6, atol=1e-6):\n            p = p_new\n            break\n        p = p_new\n\n    # transform back from standardized slopes to original logs\n    slopes_std = p[1:]          # shape (4,)\n    slopes = slopes_std / sigma\n    intercept = p[0] - np.dot(slopes_std, mu / sigma)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.8187)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor and\nlight L2-regularization on log\u2010feature slopes for stability and better generalization.\n\nModel form:\n    Loss_pred = c0 + exp(a0 + a1*log(lr)\n                         + a2*log(bsz)\n                         + a3*log(data_size)\n                         + a4*log(non_embedding_param_size))\n\nWe fit 6 parameters [c0, a0, a1, a2, a3, a4] by minimizing\n    mean((Loss_pred - y)^2) + \u03bb * sum_{i=1..4}(a_i^2)\nusing L-BFGS-B, with c0 constrained \u2265 0.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6, or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (log\u2010feature slopes)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]               # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]                 # (T,)\n        a0 = p[:, 1]                 # (T,)\n        slopes = p[:, 2:]            # (T,4)\n        # logX @ slopes.T -> (N,T), then add intercepts\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing:\n      mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n      + \u03bb * sum_{i=1..4}(ai^2),\n    using L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array of shape (N,4) of positive hyperparameters.\n      loss_values: array of shape (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # regularization strength on slopes\n    lambda_reg = 1e-3\n\n    # objective: MSE + L2 on slopes\n    def _objective(p):\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        mse = np.mean(err * err)\n        reg = lambda_reg * np.sum(slopes * slopes)\n        return mse + reg\n\n    # initialize parameters\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    a0_init = np.log(max(y_clipped.mean() - c0_init, eps))\n    init = np.zeros(6, dtype=float)\n    init[0], init[1] = c0_init, a0_init\n    # slopes start at zero\n\n    # bounds: c0 >= 0, others unbounded\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_objective, init, method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-10, 'gtol':1e-8, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        # fallback to init if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9293, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise fall back to closed\u2010form init\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n    where\n      X = [lr, bsz, data_size, non_embedding_param_size]\n      params = [a0, w1, w2, w3, w4, u_floor]\n    Supports broadcasting over multiple param sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)              # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # ensure shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]               # (T,)\n    weights= p[:, 1:5]             # (T,4)\n    ufloor = p[:, 5]               # (T,)\n\n    # compute a0 + w\u00b7logX, shape (N,T)\n    lin_term = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space\n    log_pred = np.logaddexp(lin_term, ufloor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # if single param set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb||params||^2\n    in log\u2010domain with L-BFGS-B.\n    Returns params = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)       # (N,4)\n    logy = np.log(yc)       # (N,)\n\n    N = X.shape[0]\n\n    # 1) Linear least\u2010squares init for a0 and w\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    lin_p, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0    = lin_p[0]\n    w0      = lin_p[1:]         # (4,)\n\n    # 2) Floor init: a bit below minimum observed log-loss\n    min_logy = np.min(logy)\n    uf0 = min_logy - np.log(5.0)  # floor ~ 1/5 of min loss\n\n    # initial 6-vector\n    p0 = np.concatenate([[a0_0], w0, [uf0]])  # shape (6,)\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log\u2010domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lt   = logX.dot(w) + a0           # (N,)\n        pll  = np.logaddexp(lt, uf)      # (N,)\n        res  = pll - logy\n        mse  = np.mean(res * res)\n        reg  = lambda_reg * np.sum(p * p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n    \n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 500, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.514), Excellent nmae (2.536)\n\n\n### Inspiration 2 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined log\u2013linear scaling law for LLM training loss with small\u2010ridge regularization\nto improve numerical stability and generalization across hyperparameter scales.\n\nModel:\n  log(loss) = a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nLoss = exp(log(loss))\n\nWe fit [a0, a1, a2, a3, a4] by solving a ridge\u2010regularized least squares\nin log\u2013space to avoid overfitting and improve conditioning.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2013linear (power\u2010law) model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) or (T,5), where\n                     params[...,0] = intercept a0\n                     params[...,1:] = slopes [a1, a2, a3, a4]\n    Returns:\n      preds: shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)             # (N,4)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]                   # (1,5)\n    if p.ndim != 2 or p.shape[1] != 5:\n        raise ValueError(f\"Expected params of shape (5,) or (T,5), got {p.shape}\")\n\n    intercept = p[:, 0]                  # (T,)\n    slopes    = p[:, 1:]                 # (T,4)\n\n    # Compute log\u2010loss: shape (N,T)\n    log_pred = logX.dot(slopes.T) + intercept[None, :]\n    loss_pred = np.exp(log_pred)         # (N,T)\n\n    # If single parameter set, return (N,) array\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter log\u2013linear model via small\u2010ridge regularized least squares:\n      minimize ||A @ w \u2212 log(y)||^2 + \u03b1 ||w||^2\n    where A = [1, log(lr), log(bsz), log(data_size), log(param_size)].\n\n    Returns:\n      params: array of shape (5,) = [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f\"Number of loss_values ({y.shape[0]}) \"\n                         f\"does not match number of data points ({X.shape[0]})\")\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)             # (N,4)\n    logy = np.log(y_clipped)             # (N,)\n\n    # Design matrix: [1 | logX]  shape (N,5)\n    N = X.shape[0]\n    A = np.concatenate([np.ones((N, 1)), logX], axis=1)\n\n    # Ridge regularization parameter (small for stability)\n    alpha = 1e-6\n\n    # Solve (A\u1d40A + \u03b1I) w = A\u1d40 logy\n    ATA = A.T.dot(A)\n    cond_reg = np.eye(ATA.shape[0]) * alpha\n    w = np.linalg.solve(ATA + cond_reg, A.T.dot(logy))\n    return w  # shape (5,)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 3 (Score: 2.8187, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training loss with an additive floor and\nlight L2-regularization on log\u2010feature slopes for stability and better generalization.\n\nModel form:\n    Loss_pred = c0 + exp(a0 + a1*log(lr)\n                         + a2*log(bsz)\n                         + a3*log(data_size)\n                         + a4*log(non_embedding_param_size))\n\nWe fit 6 parameters [c0, a0, a1, a2, a3, a4] by minimizing\n    mean((Loss_pred - y)^2) + \u03bb * sum_{i=1..4}(a_i^2)\nusing L-BFGS-B, with c0 constrained \u2265 0.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters with an additive floor.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 6, or 2D array of shape (T,6):\n                   params[...,0] = c0 (additive floor, >= 0)\n                   params[...,1] = a0 (log\u2010scale intercept)\n                   params[...,2:] = [a1, a2, a3, a4] (log\u2010feature slopes)\n\n    Returns:\n      If params is 1D, returns (N,) array of predictions.\n      If params is 2D (T,6), returns (N,T) array of predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {X.shape[1]}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]               # length 4\n        log_pred = a0 + logX.dot(slopes)\n        return c0 + np.exp(log_pred)\n\n    # multiple parameter sets\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        c0 = p[:, 0]                 # (T,)\n        a0 = p[:, 1]                 # (T,)\n        slopes = p[:, 2:]            # (T,4)\n        # logX @ slopes.T -> (N,T), then add intercepts\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return c0[None, :] + np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params array must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing:\n      mean((c0 + exp(a0 + sum ai*log(xi)) - y)^2)\n      + \u03bb * sum_{i=1..4}(ai^2),\n    using L-BFGS-B with c0 >= 0.\n\n    Args:\n      data_points: array of shape (N,4) of positive hyperparameters.\n      loss_values: array of shape (N,) of observed LM losses.\n\n    Returns:\n      params: 1D array of length 6 = [c0, a0, a1, a2, a3, a4].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n    y_clipped = np.clip(y, eps, None)\n\n    # regularization strength on slopes\n    lambda_reg = 1e-3\n\n    # objective: MSE + L2 on slopes\n    def _objective(p):\n        c0, a0 = p[0], p[1]\n        slopes = p[2:]\n        log_pred = a0 + logX.dot(slopes)\n        pred = c0 + np.exp(log_pred)\n        err = pred - y_clipped\n        mse = np.mean(err * err)\n        reg = lambda_reg * np.sum(slopes * slopes)\n        return mse + reg\n\n    # initialize parameters\n    y_min, y_max = y_clipped.min(), y_clipped.max()\n    c0_init = max(0.0, 0.5 * y_min)\n    a0_init = np.log(max(y_clipped.mean() - c0_init, eps))\n    init = np.zeros(6, dtype=float)\n    init[0], init[1] = c0_init, a0_init\n    # slopes start at zero\n\n    # bounds: c0 >= 0, others unbounded\n    bounds = [(0.0, None)] + [(None, None)] * 5\n\n    res = minimize(_objective, init, method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-10, 'gtol':1e-8, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        # fallback to init if optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (60.098), Excellent nmae (10.258)\n\n\n### Inspiration 4 (Score: 1.3258, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 6\u2010parameter quadratic log\u2010law for LLM training loss:\n  log\u2009L = a0\n        + a1\u00b7log(N)\n        + a2\u00b7log(D)\n        + a3\u00b7log(B)\n        + a4\u00b7log(\u03b7)\n        + a5\u00b7[log(\u03b7)]^2\n\nwhere\n  \u03b7 = learning rate\n  B = batch size\n  D = data_size (tokens)\n  N = non_embedding_param_size\n\nWe fit via ridge\u2010regularized least squares in log\u2010space for numerical stability\nand handle both single\u2010 and multi\u2010set parameter arrays concisely.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 6\u2010parameter quadratic log\u2010law.\n\n    Args:\n      data_points: (N,4) array columns = [lr, bsz, data_size, non_embedding_param_size]\n      params: \n        - 1D array of length 6: [a0, a1, a2, a3, a4, a5]\n        - or 2D array of shape (T,6) for T parallel parameter sets\n\n    Returns:\n      If params is 1D: returns (N,) array of predicted losses.\n      If params is 2D: returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Split inputs\n    lr, bsz, D, Np = X.T\n    # Safe logs\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    # Build design matrix: [1, log N, log D, log B, log lr, (log lr)^2]\n    A = np.column_stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ])  # shape (N,6)\n\n    p = np.asarray(params, dtype=float)\n    # Single parameter vector\n    if p.ndim == 1:\n        if p.shape[0] != 6:\n            raise ValueError(f\"Expected params length 6, got {p.shape[0]}\")\n        log_pred = A.dot(p)             # shape (N,)\n        return np.exp(log_pred)\n\n    # Multiple parameter sets in parallel\n    elif p.ndim == 2:\n        T, P = p.shape\n        if P != 6:\n            raise ValueError(f\"Expected params.shape[1]==6, got {P}\")\n        # A.dot(p.T) -> (N, T)\n        log_pred = A.dot(p.T)\n        return np.exp(log_pred)\n\n    else:\n        raise ValueError(f\"params must be 1D or 2D, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter quadratic log\u2010law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010space:\n\n      minimize ||A\u00b7p \u2013 log(y)||^2 + \u03bb||p||^2\n\n    where A columns = [1, log N, log D, log B, log \u03b7, (log \u03b7)^2].\n\n    Returns:\n      params: 1D array of length 6 = [a0, a1, a2, a3, a4, a5]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Split inputs\n    lr, bsz, D, Np = X.T\n    # Safe logs\n    eps = 1e-12\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D   + eps)\n    log_N   = np.log(Np  + eps)\n    log_y   = np.log(y   + eps)\n\n    # Build design matrix (N\u00d76)\n    A = np.column_stack([\n        np.ones_like(log_lr),\n        log_N,\n        log_D,\n        log_bsz,\n        log_lr,\n        log_lr**2\n    ])\n\n    # Normal equations with ridge (Tikhonov) regularization\n    AtA = A.T.dot(A)                           # shape (6,6)\n    trace_AtA = np.trace(AtA)\n    lam = 1e-6 * (trace_AtA / AtA.shape[0])    # small regularization\n    rhs = A.T.dot(log_y)                       # shape (6,)\n\n    # Solve for parameters\n    params = np.linalg.solve(AtA + lam * np.eye(AtA.shape[0]), rhs)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (15.704), Excellent nmae (4.243)\n\n\n### Inspiration 5 (Score: 3.6705, Type: High-Performer)\n```python\nimport numpy as np\n\n# Try to import a robust optimizer; otherwise we'll fall back to log\u2010linear fit\ntry:\n    from scipy.optimize import minimize\n    _have_minimize = True\nexcept ImportError:\n    _have_minimize = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a \n    power\u2010law plus floor model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    where floor >= 0 is parameterized as exp(u).\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      shape (P,) or (T, P) with P = F + 2\n                   params[t,0] = intercept\n                   params[t,1:1+F] = weights w_i on log-features\n                   params[t,1+F] = u (log-floor), floor = exp(u)\n    Returns:\n      predictions: (N,) or (N, T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    params_arr = np.asarray(params, dtype=float)\n    # Ensure params are 2D: (T, P)\n    if params_arr.ndim == 1:\n        params_arr = params_arr[None, :]\n    T, P = params_arr.shape\n    expected_P = F + 2\n    if P != expected_P:\n        raise ValueError(f\"Expected params with {expected_P} elements, got {P}\")\n    # Clip inputs for log stability\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)          # shape (N, F)\n    intercept = params_arr[:, 0]           # (T,)\n    weights   = params_arr[:, 1:1+F]       # (T, F)\n    u_floor   = params_arr[:, 1+F]         # (T,)\n    floor     = np.exp(u_floor)            # (T,)\n    # Compute the power\u2010law term\n    # shape (N, T): each column t is intercept[t] + w[t]\u00b7logX\n    log_term = logX.dot(weights.T) + intercept\n    power_term = np.exp(log_term)          # (N, T)\n    # Add the floor\n    preds = power_term + floor[None, :]    # (N, T)\n    # If single target, return (N,)\n    if preds.shape[1] == 1:\n        return preds[:, 0]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the floor\u2010augmented power\u2010law model:\n      loss = floor + exp(intercept + sum_i w_i * log(X_i))\n    by minimizing mean squared error in the loss domain.\n    Returns params of shape (P,) or (T, P).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    # Ensure y is 2D: (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n    P = F + 2\n\n    # Precompute log\u2010features\n    Xc = np.clip(X, 1e-12, None)\n    logX = np.log(Xc)  # (N, F)\n\n    # Helper: initial guess via log\u2010linear regression with zero floor\n    def _init_params(target):\n        # Fit log(y) = b0 + w\u00b7logX\n        y_col = target\n        yc = np.clip(y_col, 1e-12, None)\n        logy = np.log(yc)\n        # design: [1, logX]\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N, F+1)\n        # solve least squares\n        w, *_ = np.linalg.lstsq(A, logy, rcond=None)\n        intercept0 = w[0]\n        weights0   = w[1:]\n        # floor init: small fraction of min(y)\n        y_min = np.min(y_col)\n        floor0 = max(y_min * 0.05, 1e-8)\n        u0 = np.log(floor0)\n        return np.concatenate([[intercept0], weights0, [u0]])\n\n    # Objective for one target\n    def _objective(flat_p, target):\n        # flat_p: (P,)\n        intercept = flat_p[0]\n        wts       = flat_p[1:1+F]\n        u_floor   = flat_p[1+F]\n        floor     = np.exp(u_floor)\n        # predict\n        log_term = logX.dot(wts) + intercept\n        pred = np.exp(log_term) + floor\n        # MSE\n        resid = pred - target\n        return np.mean(resid*resid)\n\n    # Container for results\n    params_out = np.zeros((T, P), dtype=float)\n\n    # Loop over each output dimension\n    for t in range(T):\n        ycol = y2d[:, t]\n        # initial guess\n        p0 = _init_params(ycol)\n        if _have_minimize:\n            # optimize\n            res = minimize(\n                fun=lambda p: _objective(p, ycol),\n                x0=p0,\n                method='L-BFGS-B',\n                options={'maxiter': 500, 'ftol':1e-9}\n            )\n            if res.success:\n                params_out[t] = res.x\n            else:\n                # fallback to initial\n                params_out[t] = p0\n        else:\n            # no optimizer: just use the log\u2010linear solution and u0\n            params_out[t] = p0\n\n    # Return shape (P,) if single output\n    if T == 1:\n        return params_out[0]\n    return params_out\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105.924), Excellent nmae (13.673)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust power\u2010law scaling\u2010law model for LLM training loss.\nWe model\n    L \u2248 exp(a0) * lr^{a1} * bsz^{a2} * data_size^{a3} * param_size^{a4}\ni.e.  log L \u2248 a0 + a1\u00b7log(lr) + a2\u00b7log(bsz) + a3\u00b7log(data_size) + a4\u00b7log(param_size)\n\nWe fit by robust ridge\u2010regularized linear regression in log\u2010space\nusing an iteratively reweighted least squares (IRLS) with Huber weights\nand small L2 regularization for numerical stability.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters via fitted power\u2010law.\n\n    Args:\n      data_points: array of shape (N,4) or (N,4)-like with columns\n                   [lr, bsz, data_size, non_embedding_param_size], all > 0\n      params:      array of shape (5,) or (T,5).\n                   params[...,0] = a0 (intercept)\n                   params[...,i] = exponent for column i of data_points\n\n    Returns:\n      If params is shape (5,), returns (N,) array of predicted losses.\n      If params is shape (T,5), returns (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    # numerical safety: all inputs must be positive\n    if np.any(X <= 0):\n        raise ValueError(\"All data_points entries must be strictly positive\")\n    logX = np.log(X)\n    p = np.asarray(params, dtype=float)\n\n    # single parameter set\n    if p.ndim == 1:\n        if p.shape[0] != 5:\n            raise ValueError(f\"params must have length 5, got {p.shape[0]}\")\n        a0 = p[0]\n        slopes = p[1:]\n        log_pred = a0 + logX.dot(slopes)\n        return np.exp(log_pred)\n\n    # multiple parameter sets in parallel\n    if p.ndim == 2:\n        T, M = p.shape\n        if M != 5:\n            raise ValueError(f\"params must have shape (T,5), got (_, {M})\")\n        a0 = p[:, 0]           # shape (T,)\n        slopes = p[:, 1:]      # shape (T,4)\n        # log_pred: shape (N,T)\n        log_pred = logX.dot(slopes.T) + a0[None, :]\n        return np.exp(log_pred)\n\n    raise ValueError(f\"params must be 1D or 2D array, got ndim={p.ndim}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter power\u2010law model by robust IRLS in log\u2010space.\n\n    Args:\n      data_points: (N,4) array of positive hyperparameters\n      loss_values: (N,) array of positive LM losses\n\n    Returns:\n      params: (5,) array [a0, a1, a2, a3, a4]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be shape (N,) matching data_points\")\n\n    # enforce positivity and small eps for logs\n    eps = 1e-12\n    if np.any(X <= 0) or np.any(y <= 0):\n        raise ValueError(\"All data_points and loss_values must be > 0\")\n    logX = np.log(X)\n    logy = np.log(y)\n\n    N, D = logX.shape  # D == 4\n    # standardize features for numerical conditioning\n    mu = logX.mean(axis=0)\n    sigma = logX.std(axis=0)\n    # avoid zero std\n    sigma[sigma < 1e-8] = 1.0\n    Z = (logX - mu) / sigma\n\n    # design matrix: intercept + D standardized features\n    A = np.concatenate([np.ones((N, 1)), Z], axis=1)  # shape (N, 1+D) = (N,5)\n\n    # IRLS with Huber weighting\n    # initial OLS solution\n    alpha = 1e-6\n    ATA = A.T.dot(A) + alpha * np.eye(D+1)\n    ATy = A.T.dot(logy)\n    p = np.linalg.solve(ATA, ATy)\n\n    # IRLS loop\n    max_iter = 10\n    for _ in range(max_iter):\n        logy_pred = A.dot(p)\n        resid = logy_pred - logy\n        # compute Huber delta based on median absolute dev\n        med_abs = np.median(np.abs(resid))\n        delta = 1.345 * max(med_abs, 1e-3)\n        # weights\n        w = np.ones_like(resid)\n        mask = np.abs(resid) > delta\n        w[mask] = delta / np.abs(resid[mask])\n        # weighted least squares\n        W = w[:, None]\n        ATA_w = (A * W).T.dot(A) + alpha * np.eye(D+1)\n        ATy_w = (A * W).T.dot(logy)\n        p_new = np.linalg.solve(ATA_w, ATy_w)\n        if np.allclose(p, p_new, rtol=1e-6, atol=1e-6):\n            p = p_new\n            break\n        p = p_new\n\n    # transform back from standardized slopes to original logs\n    slopes_std = p[1:]          # shape (4,)\n    slopes = slopes_std / sigma\n    intercept = p[0] - np.dot(slopes_std, mu / sigma)\n\n    return np.concatenate([[intercept], slopes])\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Try to import scipy.optimize.minimize for better fitting; otherwise we'll\n# fall back to the linear\u2010init parameters.\ntry:\n    from scipy.optimize import minimize\n    _HAVE_MINIMIZE = True\nexcept ImportError:\n    _HAVE_MINIMIZE = False\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Floor\u2010augmented power\u2010law scaling:\n      log_pred = logaddexp(a0 + w\u00b7logX, u_floor)\n      loss_pred = exp(log_pred)\n\n    Args:\n      data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6: [a0, w1, w2, w3, w4, u_floor],\n                   or 2D array shape (T,6) for T parallel parameter sets.\n\n    Returns:\n      If params is 1D: (N,) array of predicted losses.\n      If params is 2D: (N,T) array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    logX = np.log(Xc)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float)\n    # normalize to shape (T,6)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (6,) or (T,6), got {p.shape}\")\n    a0     = p[:, 0]      # (T,)\n    weights= p[:, 1:5]    # (T,4)\n    ufloor = p[:, 5]      # (T,)\n\n    # compute linear term: (N,4)\u00b7(4,T) \u2192 (N,T)\n    lin = logX.dot(weights.T) + a0[None, :]\n    # apply floor in log\u2010space for stability\n    log_pred = np.logaddexp(lin, ufloor[None, :])\n    loss_pred = np.exp(log_pred)\n\n    # if single parameter set, return (N,)\n    if loss_pred.shape[1] == 1:\n        return loss_pred[:, 0]\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter floor\u2010augmented power\u2010law by minimizing\n      MSE(log_pred, log(y)) + \u03bb * ||params||^2\n    in log\u2010domain with L-BFGS-B (if available).\n\n    Returns:\n      params: 1D array length 6 = [a0, w1, w2, w3, w4, u_floor].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # avoid log(0)\n    eps = 1e-12\n    Xc = np.clip(X, eps, None)\n    yc = np.clip(y, eps, None)\n    logX = np.log(Xc)     # (N,4)\n    logy = np.log(yc)     # (N,)\n\n    N = X.shape[0]\n    # 1) closed\u2010form least\u2010squares init for a0 and weights\n    A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n    # solve A\u00b7p_ls = logy\n    p_ls, *_ = np.linalg.lstsq(A, logy, rcond=None)\n    a0_0 = p_ls[0]\n    w0   = p_ls[1:]        # (4,)\n\n    # 2) initialize floor below the smallest observed log\u2010loss\n    min_logy = np.min(logy)\n    # floor set ~ 1/5 of min loss in linear domain \u2192 logfloor = log(min_logy_exp/5)\n    uf0 = min_logy - np.log(5.0)\n\n    # initial parameter vector\n    p0 = np.empty(6, dtype=float)\n    p0[0]       = a0_0\n    p0[1:5]     = w0\n    p0[5]       = uf0\n\n    # regularization strength\n    lambda_reg = 1e-3\n\n    # objective in log-domain\n    def _obj(p):\n        a0   = p[0]\n        w    = p[1:5]\n        uf   = p[5]\n        lin  = logX.dot(w) + a0         # (N,)\n        lp   = np.logaddexp(lin, uf)   # (N,)\n        err  = lp - logy\n        mse  = np.mean(err*err)\n        reg  = lambda_reg * np.sum(p*p)\n        return mse + reg\n\n    # bounds: keep u_floor \u2264 min_logy for stability\n    bounds = [(None, None)] * 5 + [(None, min_logy)]\n\n    if _HAVE_MINIMIZE:\n        res = minimize(\n            _obj, p0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'maxiter': 1000, 'ftol': 1e-9}\n        )\n        if res.success:\n            return res.x\n\n    # fallback to initial if optimization fails or scipy unavailable\n    return p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Introduced an additive \u201cfloor\u201d term in log\u2010space to capture loss saturation.\n- Kept a simple 6\u2010parameter form so that fitting remains data\u2010efficient.\n- Initialized parameters via closed\u2010form least\u2010squares on log\u2010loss, plus a small floor.\n- Used L-BFGS-B to refine all six parameters under light L2 regularization for stability.\n- Ensured numerical safety with clipping and logaddexp for robust handling of extremes."]}}}