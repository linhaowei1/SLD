{"id": "430a5f2c-8972-4bae-b17f-8c4e1a9c9361", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description).\n# These are fixed constants, not computed from the data.\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum (tokens)\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum (tokens)\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Features (total 15):\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns:\n      A of shape (N,15)\n    \"\"\"\n    eps = 1e-12\n    # Safe log-transform\n    logs = np.log(X + eps)                   # shape (N,4)\n    # Normalize to ~[-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Stack into (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares on log-loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2  (no penalty on intercept \u03b80)\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of observed LM losses\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)         # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # shape (N,)\n\n    # Form normal equations with adaptive ridge \u03bb\n    ATA = A.T.dot(A)                    # shape (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P      # adaptive regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                     # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c97fed89-e1a8-4585-b44c-0cca5e2999b3", "generation": 4, "timestamp": 1754804331.6450408, "iteration_found": 88, "metrics": {"nmse": 8.229751012380724, "nmae": 3.184248036510827, "r2": -7.229751012380724, "combined_score": 0.10834528457578183}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 218.17570203610663, "nmae": 19.388418011698352, "r2": -217.17570203610663, "combined_score": 0.004562549546825504}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 218.1757\n- nmae: 19.3884\n- r2: -217.1757\n- combined_score: 0.0046\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n# These are constants, not data\u2010dependent computations.\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    # log of inputs\n    logs = np.log(X + eps)                  # shape (N,4)\n    # normalize into approximately [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # shape (N,4)\n    N, F = z.shape\n\n    # Start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all feature columns\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow passing a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)       # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # shape (N,)\n\n    # Compute normal equations\n    ATA = A.T.dot(A)                  # shape (15,15)\n    P = ATA.shape[0]\n    # Adaptive ridge \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size (tokens)\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size (tokens)\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each log\u2010feature\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a second\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions. Uses features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    # Compute log and normalize to roughly [-1, 1]\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into a full design matrix of shape (N,15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of polynomial coefficients\n    Returns:\n      preds: (N,) predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    in log\u2010loss space. No regularization on the intercept \u03b80.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) of observed LM losses\n    Returns:\n      theta_opt: (15,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix A and target vector y_log\n    A = _build_design_matrix(X)            # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # shape (15,15)\n    P = ATA.shape[0]\n    # Scale \u03bb by average diagonal for adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0    # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding param size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding param size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      1 (intercept),\n      z_i (linear),\n      z_i^2 (quadratic),\n      z_i * z_j (pairwise, i < j)\n    Returns:\n      A of shape (N, 1 + 4 + 4 + 6 = 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:,None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2  (no penalty on \u03b80)\n    Inputs:\n      data_points: array\u2010like (N,4)\n      loss_values: array\u2010like (N,)\n    Returns:\n      theta_opt: ndarray (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A = _build_design_matrix(X)          # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)              # (N,)\n\n    ATA = A.T.dot(A)                     # (15,15)\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P       # adaptive ridge strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                       # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding parameter size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding parameter size\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range for each feature in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features: [1, z_i, z_i^2, z_i * z_j for i<j]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # shape (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all features into (N, P) matrix\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter 2nd\u2010degree polynomial\n    in normalized log\u2010features with interactions:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points of shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving\n    a ridge\u2010regularized least\u2010squares problem in log\u2010loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points of shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix A and target vector\n    A = _build_design_matrix(X)         # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # shape (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                    # shape (15,15)\n    P = ATA.shape[0]\n    # Scale \u03bb by average diagonal entry for data\u2010scale adaptivity\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                      # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)               # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # normalized to roughly [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:,None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2, no penalty on \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled to average diag entry\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0731, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=np.float64))\n\n# Midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)               # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # normalized to roughly [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:,None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2, no penalty on \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and target\n    A = _build_design_matrix(X)           # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled to average diag entry\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 2 (Score: 3.7843, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a log\u2010linear scaling law with bias:\n      loss \u2248 exp( \u03b80\n                  + \u03b81 * log(lr)\n                  + \u03b82 * log(bsz)\n                  + \u03b83 * log(data_size)\n                  + \u03b84 * log(non_embedding_param_size) )\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 5 [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    Returns:\n      preds: numpy.ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected params length 5, got {theta.size}\")\n\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n\n    # Compute log\u2010loss\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n\n    # Exponentiate to get loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 5\u2010parameter log\u2010linear scaling law by solving a small\n    ridge\u2010regularized least squares problem in log\u2010space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8||^2\n    where A = [1, log(lr), log(bsz), log(data_size),\n               log(non_embedding_param_size)].\n    Inputs:\n      data_points:  array\u2010like of shape (N,4)\n      loss_values:  array\u2010like of shape (N,) of training losses (must be > 0)\n      ridge_lambda: regularization strength (default 1e-6)\n    Returns:\n      theta: numpy.ndarray of shape (5,) of fitted parameters [\u03b80\u2026\u03b84]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: loss_values must be 1-D of same length as data_points\")\n\n    # Safe log\u2010transform features and target\n    eps = 1e-12\n    Z = np.log(X + eps)       # shape (N,4)\n    y_log = np.log(y + eps)   # shape (N,)\n\n    # Build design matrix A = [1 | log_features]\n    N = Z.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    A = np.hstack((ones, Z))  # shape (N,5)\n\n    # Closed\u2010form ridge solution: (A^T A + \u03bbR) \u03b8 = A^T y_log\n    # We do not regularize the intercept term (\u03b80)\n    ATA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(ATA.shape[0], dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    lhs = ATA + reg\n    rhs = A.T.dot(y_log)\n    theta = np.linalg.solve(lhs, rhs)\n\n    return theta\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 3 (Score: 4.4052, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A simplified log\u2013polynomial scaling law capturing:\n      - Power\u2010law effects of model size, data size, and batch size\n      - A U\u2010shaped dependence on learning rate via a quadratic term\n      - Interaction between learning rate and data/model size to let the optimal\n        learning rate shift with scale\n    Model form in log\u2010domain:\n      log L = \u03b80\n            + \u03b81*\u2113r + \u03b82*\u2113r^2\n            + \u03b83*\u2113bsz\n            + \u03b84*\u2113data\n            + \u03b85*\u2113param\n            + \u03b86*(\u2113r*\u2113data)\n            + \u03b87*(\u2113r*\u2113param)\n            + \u03b88*(\u2113data*\u2113param)\n    where \u2113r = log(lr), \u2113bsz = log(bsz), \u2113data = log(data_size), \u2113param = log(non_embed_param_size).\n    Returns exp(log L).\n    Inputs:\n      data_points: (N,4) array [[lr, bsz, data_size, non_embed_param_size], ...]\n      params:      length\u20109 array [\u03b80 \u2026 \u03b88]\n    Output:\n      preds: (N,) predicted language\u2010model losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log transform\n    eps = 1e-12\n    logs = np.log(X + eps)         # shape (N,4)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build design matrix with 9 features\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),             # intercept \u03b80\n        lr_log,                 # \u03b81 * \u2113r\n        lr_log**2,              # \u03b82 * \u2113r^2\n        bsz_log,                # \u03b83 * \u2113bsz\n        data_log,               # \u03b84 * \u2113data\n        param_log,              # \u03b85 * \u2113param\n        lr_log * data_log,      # \u03b86 * (\u2113r * \u2113data)\n        lr_log * param_log,     # \u03b87 * (\u2113r * \u2113param)\n        data_log * param_log    # \u03b88 * (\u2113data * \u2113param)\n    ])                          # shape (N,9)\n\n    log_pred = A.dot(theta)     # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2013polynomial model via ridge\u2010regularized least squares\n    on the log\u2010loss. Solves:\n      \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (No penalty on the intercept term \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,) observed lm losses\n    Output:\n      theta_opt: (9,) optimized parameter vector\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # Safe log transforms\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log = logs[:, 0]\n    bsz_log = logs[:, 1]\n    data_log = logs[:, 2]\n    param_log = logs[:, 3]\n\n    # Build the same design matrix A (N\u00d79)\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])\n    y_log = np.log(y + eps)\n\n    # Ridge regularization (no penalty on intercept)\n    P = A.shape[1]\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (154.839), Excellent nmae (16.614)\n\n\n### Inspiration 4 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n# These are constants, not data\u2010dependent computations.\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010degree polynomial in normalized log\u2010features\n    with pairwise interactions.\n    Features:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(x) \u2212 _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    eps = 1e-12\n    # log of inputs\n    logs = np.log(X + eps)                  # shape (N,4)\n    # normalize into approximately [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # shape (N,4)\n    N, F = z.shape\n\n    # Start with intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate all feature columns\n    return np.hstack(cols)  # shape (N, 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow passing a single point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)       # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)           # shape (N,)\n\n    # Compute normal equations\n    ATA = A.T.dot(A)                  # shape (15,15)\n    P = ATA.shape[0]\n    # Adaptive ridge \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 5 (Score: 3.0393, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law with additive bias:\n      loss \u2248 b + exp(logA + e_lr*log(lr) + e_bsz*log(bsz)\n                       + e_D*log(data_size) + e_N*log(non_embedding_param_size))\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds: ndarray of shape (N,) of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected params length 6, got {p.size}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = p\n    lr, bsz, D, Np = X[:,0], X[:,1], X[:,2], X[:,3]\n    eps = 1e-12\n    log_term = (logA\n                + e_lr  * np.log(lr  + eps)\n                + e_bsz * np.log(bsz + eps)\n                + e_D   * np.log(D    + eps)\n                + e_N   * np.log(Np   + eps))\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by first performing a ridge\u2010regularized\n    linear regression in log\u2010space (with centering and whitening of covariates)\n    to initialize parameters [b, logA, e_lr, e_bsz, e_D, e_N], then refine via\n    a few L-BFGS-B multi-starts minimizing MSE in original space.\n    Supports single\u2010target (N,) or multi\u2010target (N,T) loss_values.\n    Returns optimized params array of shape (6,) or (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure 2D targets\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, T = X.shape[0], y_mat.shape[1]\n\n    # Precompute log-features, their means and stds for centering & whitening\n    eps = 1e-12\n    logX = np.log(X + eps)             # shape (N,4)\n    mu = np.mean(logX, axis=0)         # (4,)\n    sigma = np.std(logX, axis=0) + eps # (4,)\n    Z = (logX - mu) / sigma            # whitened logs, shape (N,4)\n\n    # Design for linear solve: [1, Z]\n    A_lin = np.concatenate([np.ones((N,1)), Z], axis=1)  # (N,5)\n    lam = 1e-6\n    # Regularize all except the intercept column lightly\n    Reg = lam * np.eye(5)\n    Reg[0,0] = 0.0\n    M = A_lin.T @ A_lin + Reg\n\n    def _fit_single(y_vec):\n        # 1) offset b0: ensure y - b0 > 0\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        b0 = max(0.0, np.percentile(y_vec, 5) * 0.5)\n        # 2) linearize target\n        y_shift = np.maximum(y_vec - b0, eps)\n        logy = np.log(y_shift)\n        y_mean = np.mean(logy)\n        y_cent = logy - y_mean\n        # 3) solve ridge on centered target\n        theta_lin = np.linalg.solve(M, A_lin.T @ y_cent)  # (5,)\n        # 4) convert linear coefficients to log-domain intercept and exponents\n        #    log_pred \u2248 mean(logy) + [1, Z]\u00b7theta_lin\n        #    but Z = (logX - mu)/sigma => expand to get exponents on logX\n        # sum_term = \u03a3_i theta_lin[i+1] * (mu[i]/sigma[i])\n        sum_mu = np.dot(theta_lin[1:], mu / sigma)\n        logA0 = y_mean + theta_lin[0] - sum_mu\n        exponents = theta_lin[1:] / sigma  # length-4\n        init_p = np.zeros(6, dtype=np.float64)\n        init_p[0] = b0\n        init_p[1] = logA0\n        init_p[2:] = exponents\n\n        # 5) refine with a few L-BFGS-B multi-starts in original MSE\n        bounds = [\n            (0.0, max(y_max * 2.0, 1.0)),  # b \u2265 0\n            (None, None),                 # logA unbounded\n            (-10.0, 10.0),                # e_lr\n            (-10.0, 10.0),                # e_bsz\n            (-10.0, 10.0),                # e_D\n            (-10.0, 10.0),                # e_N\n        ]\n        def mse_obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec)**2)\n\n        best_p = init_p.copy()\n        best_loss = mse_obj(best_p)\n        # try multi-start jitter\n        for _ in range(3):\n            trial = best_p.copy()\n            trial[2:] += 0.2 * np.random.randn(4)\n            trial[0] = max(0.0, trial[0] * (1.0 + 0.1 * np.random.randn()))\n            trial[1] += 0.1 * np.random.randn()\n            try:\n                res = minimize(\n                    mse_obj, trial,\n                    method='L-BFGS-B',\n                    bounds=bounds,\n                    options={'maxiter': 200, 'ftol': 1e-9}\n                )\n                if res.success and res.fun < best_loss:\n                    best_loss, best_p = res.fun, res.x\n            except Exception:\n                pass\n\n        return best_p\n\n    # Fit each target dimension independently\n    params = np.vstack([_fit_single(y_mat[:, i]) for i in range(T)])\n    return params[0] if params.shape[0] == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (70.716), Excellent nmae (11.143)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n# Compute mid\u2010point and half\u2010range for normalization to ~[-1,1]\n_LOG_MEAN  = (_LOG_MIN + _LOG_MAX) * 0.5\n_LOG_SCALE = (_LOG_MAX - _LOG_MIN) * 0.5\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build design matrix for a quadratic\u2010cross interaction model in normalized logs:\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Features: [1,\n               z1, z2, z3, z4,\n               z1*z2, z1*z3, z1*z4,\n               z2*z3, z2*z4, z3*z4]\n    Returns: A of shape (N, 11)\n    \"\"\"\n    eps = 1e-12\n    # Compute safe logs\n    logs = np.log(X + eps)                          # (N,4)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE             # (N,4)\n    N, F = z.shape\n    # Intercept\n    cols = [np.ones((N,), dtype=np.float64)]\n    # Linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # Pairwise cross terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n    # Stack into (N, 1+4+6=11)\n    return np.stack(cols, axis=1)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via an 11\u2010parameter quadratic\u2010cross model:\n      log_loss \u2248 \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_{i<j} \u03b82_{ij} * (z_i * z_j)\n      loss = exp(log_loss)\n    where z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Inputs:\n      data_points: array\u2010like of shape (N,4) or (4,)\n      params:      array\u2010like of length 11\n    Returns:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)           # (N,11)\n    log_pred = A.dot(theta)               # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11\u2010parameter quadratic\u2010cross scaling law by ridge\u2010regularized\n    least squares on the log\u2010transformed loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of observed losses\n    Returns:\n      theta_opt: (11,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix in normalized log\u2010space\n    A = _build_design_matrix(X)           # (N,11)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # (N,)\n\n    # Ridge regularization: no penalty on intercept\n    P = A.shape[1]                        # 11\n    lam = 1e-3                            # stronger regularization for better generalization\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not penalize \u03b80\n\n    # Solve (A^T A + reg) \u03b8 = A^T y_log\n    ATA = A.T.dot(A) + reg                # (11,11)\n    ATy = A.T.dot(y_log)                  # (11,)\n\n    try:\n        theta_opt = np.linalg.solve(ATA, ATy)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta_opt = np.linalg.pinv(ATA).dot(ATy)\n\n    return theta_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description).\n# These are fixed constants, not computed from the data.\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum (tokens)\n    2.14e8    # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum (tokens)\n    1e9       # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range in log-space for z-score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Features (total 15):\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns:\n      A of shape (N,15)\n    \"\"\"\n    eps = 1e-12\n    # Safe log-transform\n    logs = np.log(X + eps)                   # shape (N,4)\n    # Normalize to ~[-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # shape (N,4)\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Quadratic terms\n    cols.append(z ** 2)\n    # Pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Stack into (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Allow single-point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by ridge-regularized least squares on log-loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2  (no penalty on intercept \u03b80)\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) of observed LM losses\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log-target\n    A = _build_design_matrix(X)         # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)             # shape (N,)\n\n    # Form normal equations with adaptive ridge \u03bb\n    ATA = A.T.dot(A)                    # shape (15,15)\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P      # adaptive regularization strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                     # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```"]}}}