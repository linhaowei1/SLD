{"id": "0f61b81a-acf2-4340-9cb1-d0180ccdd848", "code": "\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log-linear model with analytic gradients and L2 regularization\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log-linear scaling law:\n        L_hat = c + exp(w0 + w1*log(lr) + w2*log(bsz)\n                        + w3*log(data_size) + w4*log(non_emb_param_size))\n    Args:\n        data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_emb_param_size]\n        params:      1D array of length 6 or 2D array of shape (T,6)\n                     param vector = [w0, w1, w2, w3, w4, c]\n    Returns:\n        If params is (6,), returns (N,) predictions;\n        if params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure positivity before log\n    if np.any(X <= 0):\n        # replace non-positive values with a tiny positive number for stability\n        X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # (T,)\n    w_i = p[:, 1:-1]     # (T,4)\n    c  = p[:, -1]        # (T,)\n\n    # compute linear term in log-space and exponentiate\n    # s = w0 + logX @ w_i.T  -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]  # shape (N,T)\n\n    # if single parameter set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, reg=1e-6):\n    \"\"\"\n    Fit the log-linear scaling law by minimizing mean squared error in loss space\n    with optional L2 regularization on the parameters.\n\n    Args:\n        data_points: array-like of shape (N,4)\n        loss_values: array-like of shape (N,) or (N,T)\n        reg:         L2 regularization coefficient (non-negative float)\n\n    Returns:\n        params_opt:  array of optimized parameters:\n                     shape (6,) if single target, or (T,6) for multiple targets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute logX and clamp to avoid -inf\n    Xpos = np.copy(X)\n    Xpos[Xpos <= 0] = 1e-12\n    logX = np.log(Xpos)  # (N,4)\n\n    P = F + 2  # number of parameters per target\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize parameters: w0 = log(mean(y)), others 0\n        ymean = np.mean(yt)\n        init_p = np.zeros(P, dtype=np.float64)\n        init_p[0] = np.log(max(ymean, 1e-6))\n        init_p[-1] = 0.0  # initial c\n\n        def obj(p):\n            # MSE + reg * ||p||^2\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0        # (N,)\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            mse = np.mean(diff * diff)\n            return mse + reg * np.sum(p * p)\n\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0       # (N,)\n            exp_s = np.exp(s)            # (N,)\n            yhat = exp_s + c             # (N,)\n            diff = yhat - yt             # (N,)\n            # gradient of MSE part\n            grad = np.empty_like(p)\n            # dw0: d/dw0 exp(s) = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # dw_i: each component = exp_s * logX[:,j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # dc\n            grad[-1] = 2.0 * np.mean(diff)\n            # add L2 regularization gradient\n            grad += 2.0 * reg * p\n            return grad\n\n        res = minimize(\n            obj,\n            init_p,\n            method='L-BFGS-B',\n            jac=jac,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            params_opt[t, :] = init_p\n\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d939a6b5-8909-4290-81fc-0cece9ad88f4", "generation": 1, "timestamp": 1754802630.7841837, "iteration_found": 19, "metrics": {"nmse": 3.5183653949051, "nmae": 1.6736186247008382, "r2": -2.5183653949051, "combined_score": 0.22131897547011095}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.109385903936407e+27, "nmae": 56333765835662.48, "r2": -5.109385903936407e+27, "combined_score": 1.9571823675122549e-28}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 5109385903936407163786756096.0000\n- nmae: 56333765835662.4766\n- r2: -5109385903936407163786756096.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: r2. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: atleast_2d() got an unexpected keyword argument 'dtype'\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: atleast_2d() got an unexpected keyword argument 'dtype'\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 5109385903936407163786756096.0000, nmae: 56333765835662.4766, r2: -5109385903936407163786756096.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 14083441458915.6191)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (5109385903936407163786756096.0000), Performs well on nmae (56333765835662.4766), Performs well on r2 (-5109385903936407163786756096.0000), Performs well on combined_score (0.0000)\n\n\n### Program 2 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (atleast_2d() got an unexpected keyword argument 'dtype')\n\n\n### Program 3 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (atleast_2d() got an unexpected keyword argument 'dtype')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model\n    L\u0302 = c + exp( w0 + w1\u00b7log(lr) + w2\u00b7log(bsz)\n                 + w3\u00b7log(data_size) + w4\u00b7log(non_embedding_param_size) )\nwith 6 parameters [w0, w1, w2, w3, w4, c].\nFitting is done by minimizing MSE in the original L-space via L-BFGS-B,\nusing an analytic Jacobian for stability and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) array of [lr, bsz, data_size, non_emb_params]\n    params:     either (6,) or (T,6) array of [w0, w1, w2, w3, w4, c]\n    returns:    if params is (6,), returns (N,) predictions;\n                if params is (T,6), returns (N,T) predictions\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform (all features > 0 in practice)\n    logX = np.log(X)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n    # unpack\n    w0 = p[:, 0]             # (T,)\n    w_i = p[:, 1:-1]         # (T, F)\n    c  = p[:, -1]            # (T,)\n\n    # compute s = w0 + sum_i w_i * logX[:,i]\n    #   -> (N, T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]\n\n    # if only one parameter\u2010set, return shape (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 6\u2010parameter model above by minimizing MSE in L-space.\n    Returns a vector of length 6 (or (T,6) if there are multiple targets).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    # ensure y2d shape (N, T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # pre-compute logs\n    logX = np.log(X)\n\n    # storage for each target\n    P = F + 2  # w0 + w1..w4 + c\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize: w0 = log(mean(y)), w_i=0, c=0\n        ymean = np.mean(yt)\n        p0 = np.zeros(P, dtype=np.float64)\n        p0[0] = np.log(max(ymean, 1e-6))\n        p0[-1] = 0.0\n\n        # objective: MSE\n        def obj(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            return np.mean(diff * diff)\n\n        # analytic gradient of the MSE\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0          # (N,)\n            exp_s = np.exp(s)               # (N,)\n            yhat = exp_s + c                # (N,)\n            diff = yhat - yt                # (N,)\n            # dMSE/dp_k = 2/N * sum(diff * dyhat/dp_k)\n            grad = np.empty_like(p)\n            # w0\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # w_i\n            # each w_i_j: derivative = exp_s * logX[:, j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # c\n            grad[-1] = 2.0 * np.mean(diff)\n            return grad\n\n        # run L-BFGS-B\n        res = minimize(obj,\n                       p0,\n                       method='L-BFGS-B',\n                       jac=jac,\n                       options={'maxiter': 1000, 'ftol': 1e-12})\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            # fallback to initialization if fit failed\n            params_opt[t, :] = p0\n\n    # if single target, return 1D\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM fine-tuning scenarios\nImproved log-linear model with analytic gradients and L2 regularization\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using a log-linear scaling law:\n        L_hat = c + exp(w0 + w1*log(lr) + w2*log(bsz)\n                        + w3*log(data_size) + w4*log(non_emb_param_size))\n    Args:\n        data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_emb_param_size]\n        params:      1D array of length 6 or 2D array of shape (T,6)\n                     param vector = [w0, w1, w2, w3, w4, c]\n    Returns:\n        If params is (6,), returns (N,) predictions;\n        if params is (T,6), returns (N,T) predictions.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure positivity before log\n    if np.any(X <= 0):\n        # replace non-positive values with a tiny positive number for stability\n        X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != F + 2:\n        raise ValueError(f\"Expected parameter dimension {F+2}, got {P}\")\n\n    # unpack parameters\n    w0 = p[:, 0]         # (T,)\n    w_i = p[:, 1:-1]     # (T,4)\n    c  = p[:, -1]        # (T,)\n\n    # compute linear term in log-space and exponentiate\n    # s = w0 + logX @ w_i.T  -> shape (N,T)\n    s = logX.dot(w_i.T) + w0[None, :]\n    y_hat = np.exp(s) + c[None, :]  # shape (N,T)\n\n    # if single parameter set, return (N,)\n    if T == 1:\n        return y_hat[:, 0]\n    return y_hat\n\n\ndef fit_scaling_law(data_points, loss_values, reg=1e-6):\n    \"\"\"\n    Fit the log-linear scaling law by minimizing mean squared error in loss space\n    with optional L2 regularization on the parameters.\n\n    Args:\n        data_points: array-like of shape (N,4)\n        loss_values: array-like of shape (N,) or (N,T)\n        reg:         L2 regularization coefficient (non-negative float)\n\n    Returns:\n        params_opt:  array of optimized parameters:\n                     shape (6,) if single target, or (T,6) for multiple targets\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # ensure y is (N,T)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    _, T = y2d.shape\n\n    # precompute logX and clamp to avoid -inf\n    Xpos = np.copy(X)\n    Xpos[Xpos <= 0] = 1e-12\n    logX = np.log(Xpos)  # (N,4)\n\n    P = F + 2  # number of parameters per target\n    params_opt = np.zeros((T, P), dtype=np.float64)\n\n    for t in range(T):\n        yt = y2d[:, t]\n        # initialize parameters: w0 = log(mean(y)), others 0\n        ymean = np.mean(yt)\n        init_p = np.zeros(P, dtype=np.float64)\n        init_p[0] = np.log(max(ymean, 1e-6))\n        init_p[-1] = 0.0  # initial c\n\n        def obj(p):\n            # MSE + reg * ||p||^2\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0        # (N,)\n            yhat = np.exp(s) + c\n            diff = yhat - yt\n            mse = np.mean(diff * diff)\n            return mse + reg * np.sum(p * p)\n\n        def jac(p):\n            w0 = p[0]\n            w_i = p[1:-1]\n            c  = p[-1]\n            s = logX.dot(w_i) + w0       # (N,)\n            exp_s = np.exp(s)            # (N,)\n            yhat = exp_s + c             # (N,)\n            diff = yhat - yt             # (N,)\n            # gradient of MSE part\n            grad = np.empty_like(p)\n            # dw0: d/dw0 exp(s) = exp_s\n            grad[0] = 2.0 * np.mean(diff * exp_s)\n            # dw_i: each component = exp_s * logX[:,j]\n            grad[1:-1] = 2.0 * np.mean((diff[:, None]) * (exp_s[:, None] * logX), axis=0)\n            # dc\n            grad[-1] = 2.0 * np.mean(diff)\n            # add L2 regularization gradient\n            grad += 2.0 * reg * p\n            return grad\n\n        res = minimize(\n            obj,\n            init_p,\n            method='L-BFGS-B',\n            jac=jac,\n            options={'maxiter': 1000, 'ftol': 1e-12}\n        )\n        if res.success:\n            params_opt[t, :] = res.x\n        else:\n            params_opt[t, :] = init_p\n\n    if T == 1:\n        return params_opt[0]\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Adopted a log-linear form `L = c + exp(w0 + \u03a3 wi\u00b7log(x_i))` for better theoretical grounding.\n- Implemented analytic gradients for faster and more stable L-BFGS-B optimization.\n- Introduced a small L2 regularization term (`reg`) to improve generalization across hyperparameter regimes.\n- Added safeguards for zero or negative feature values by clamping before logarithm.\n- Kept parameter count minimal (6 per target) to ensure efficient fitting with limited data.\n- Ensured numerical stability (`dtype=np.float64`, clamping, `ftol=1e-12`)."]}}}