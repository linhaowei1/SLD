{"id": "abbceba4-7eeb-495b-861a-b9af23dce61c", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Generalized power\u2010law model with a small quadratic term in log(lr):\n        log(loss) = p0\n                    + p1 * log(lr)\n                    + p2 * (log(lr))^2\n                    + p3 * log(bsz)\n                    + p4 * log(data_size)\n                    + p5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [p0, p1, p2, p3, p4, p5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    # avoid non-positive before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # build design matrix: [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    Phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # linear model in log\u2010space\n    log_pred = Phi.dot(params)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the generalized power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 p0 + p1*log(lr) + p2*(log(lr))^2 + p3*log(bsz) + p4*log(data_size) + p5*log(param_size)\n    Returns optimized params = [p0, p1, p2, p3, p4, p5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid non-positive before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # design matrix\n    Phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_y = np.log(y)\n\n    # ridge regularization (no penalty on intercept term)\n    M = Phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = Phi.T.dot(Phi) + lambda_reg * I\n    b = Phi.T.dot(log_y)\n\n    # solve for params\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least squares\n        params, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "5a02af3f-4701-4706-a905-9acf8c2a0830", "generation": 2, "timestamp": 1754717121.7038655, "iteration_found": 28, "metrics": {"nmse": 0.35475711478799465, "nmae": 0.50644546542682, "r2": 0.6452428852120053, "combined_score": 0.7381396924100964}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3938917157917785, "nmae": 0.5087149307815435, "r2": 0.6061082842082215, "combined_score": 0.7174158427593248}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: Evaluation failed or timed out.\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3548, nmae: 0.5064, r2: 0.6452, combined_score: 0.7381\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3548), Performs well on nmae (0.5064), Performs well on r2 (0.6452), Performs well on combined_score (0.7381)\n\n\n### Program 2 (Score: 0.5565)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRevised model: A log\u2010linear (multiplicative power\u2010law) form fitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # Ensure array shape and type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute in log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    # Unpack parameters\n    intercept = float(params[0])                                  # scalar\n    weights = np.asarray(params[1:], dtype=np.float64)           # (4,)\n    # Linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # Map back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model by solving\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    via ridge\u2010regularized normal equations for numerical stability.\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # Avoid zeros in logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # Transform to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # Design matrix with intercept term\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    D = F + 1                                                    # 5\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # Solve (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                    # (5,5)\n    b = design.T.dot(logy)                                       # (5,)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # Fallback to least squares if matrix is singular\n        params, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n### Program 3 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: Evaluation failed or timed out.)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5611, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRevised model: A log\u2010linear (multiplicative power\u2010law) form fitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # Ensure array shape and type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute in log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    # Unpack parameters\n    intercept = float(params[0])                                  # scalar\n    weights = np.asarray(params[1:], dtype=np.float64)           # (4,)\n    # Linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # Map back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model by solving\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    via ridge\u2010regularized normal equations for numerical stability.\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # Avoid zeros in logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # Transform to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # Design matrix with intercept term\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    D = F + 1                                                    # 5\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # Solve (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                    # (5,5)\n    b = design.T.dot(logy)                                       # (5,)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # Fallback to least squares if matrix is singular\n        params, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Generalized power\u2010law model with a small quadratic term in log(lr):\n        log(loss) = p0\n                    + p1 * log(lr)\n                    + p2 * (log(lr))^2\n                    + p3 * log(bsz)\n                    + p4 * log(data_size)\n                    + p5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [p0, p1, p2, p3, p4, p5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    # avoid non-positive before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # build design matrix: [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    Phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # linear model in log\u2010space\n    log_pred = Phi.dot(params)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the generalized power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 p0 + p1*log(lr) + p2*(log(lr))^2 + p3*log(bsz) + p4*log(data_size) + p5*log(param_size)\n    Returns optimized params = [p0, p1, p2, p3, p4, p5].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid non-positive before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # design matrix\n    Phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_y = np.log(y)\n\n    # ridge regularization (no penalty on intercept term)\n    M = Phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = Phi.T.dot(Phi) + lambda_reg * I\n    b = Phi.T.dot(log_y)\n\n    # solve for params\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least squares\n        params, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Introduced a quadratic term in log(lr) to capture non\u2010linear learning rate effects.\n- Employed ridge\u2010regularized linear regression in log\u2010space for numerical stability and to avoid overfitting.\n- Ensured all inputs are clipped above a small epsilon to avoid invalid log computations.\n- Kept the model simple (6 parameters) for efficient fitting with limited data.\n- Provided a fallback `lstsq` solver in case of singular matrices."]}}}