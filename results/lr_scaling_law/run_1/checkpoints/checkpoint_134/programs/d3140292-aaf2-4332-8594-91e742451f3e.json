{"id": "d3140292-aaf2-4332-8594-91e742451f3e", "code": "# EVOLVE-BLOCK-START\n\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for roughly [-1,1] normalization\n_LOG_MEAN   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE  = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps        = 1e-12\n_cond_thresh = 1e8\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree Chebyshev\u2010polynomial design matrix on normalized log\u2010features.\n    Features per sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where\n      z = (log(x+eps) \u2212 _LOG_MEAN)/_LOG_SCALE,\n      T2(z) = 2 z^2 \u2212 1.\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # 1) Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) Linear Chebyshev features: z\n    cols.append(z)\n    # 3) Quadratic Chebyshev features: T2(z) = 2 z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n    # 4) Pairwise interactions on z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)             # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)                 # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter scaling law by ridge\u2010regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on intercept \u03b80.)\n\n    Supports multi\u2010target: if loss_values is (N,T), returns (T,15); if (N,), returns (15,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Make y two\u2010dimensional: shape (N,T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n\n    # Build design matrix once\n    A   = _build_design_matrix(X)           # (N,15)\n    ATA = A.T.dot(A)                        # (15,15)\n    P   = ATA.shape[0]\n\n    def _fit_target(y_vec):\n        # Solve for one column y_vec of shape (N,)\n        y_log = np.log(y_vec + _eps)\n        ATy   = A.T.dot(y_log)\n        # Adaptive ridge \u03bb\n        lam   = 1e-3 * np.trace(ATA) / P\n        reg   = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0  # no penalty on intercept\n        ATA_reg = ATA + reg\n\n        # Improve conditioning if needed\n        cond = np.linalg.cond(ATA_reg)\n        if cond > _cond_thresh:\n            for _ in range(3):\n                lam *= 10.0\n                reg = lam * np.eye(P, dtype=np.float64)\n                reg[0, 0] = 0.0\n                ATA_reg = ATA + reg\n                cond = np.linalg.cond(ATA_reg)\n                if cond <= _cond_thresh:\n                    break\n\n        # Solve robustly\n        try:\n            theta_opt = np.linalg.solve(ATA_reg, ATy)\n        except np.linalg.LinAlgError:\n            theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n        return theta_opt\n\n    # Fit per target\n    if T == 1:\n        return _fit_target(Y[:, 0])\n    else:\n        return np.vstack([_fit_target(Y[:, i]) for i in range(T)])\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ca5cc72a-7c1e-4c43-bc9d-1bb9807a9119", "generation": 2, "timestamp": 1754804790.6604133, "iteration_found": 134, "metrics": {"nmse": 8.056121635175172, "nmae": 3.1365850349902997, "r2": -7.056121635175172, "combined_score": 0.11042254513409669}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 65.34761150152974, "nmae": 10.735191412974888, "r2": -64.34761150152974, "combined_score": 0.01507213262646152}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 65.3476\n- nmae: 10.7352\n- r2: -64.3476\n- combined_score: 0.0151\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.0561, nmae: 3.1366, r2: -7.0561, combined_score: 0.1104\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0618)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable design matrix using Chebyshev\u2010basis polynomials\n    on normalized log\u2010features z_i = (log x_i \u2212 _LOG_MEAN_i)/_LOG_SCALE_i.\n    Features for each sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2*z^2 \u2212 1 is the 2nd\u2010degree Chebyshev polynomial.\n    Returns:\n      A: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Safe log\n    logs = np.log(X + eps)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE\n    N, F = z.shape  # F should be 4\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear Chebyshev feature = z\n    cols.append(z)\n    # Quadratic Chebyshev features T2(z) = 2 z^2 - 1\n    T2 = 2.0 * (z**2) - 1.0\n    cols.append(T2)\n\n    # Pairwise interaction terms on the normalized z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix\n    A = np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    # Exponentiate to recover loss\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev\u2010polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)               # (15,15)\n    ATy = A.T.dot(y_log)           # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam_base = 1e-3\n    lam = lam_base * np.trace(ATA) / P\n    # Build regularization matrix\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # If system is ill\u2010conditioned, increase regularization\n    cond_threshold = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_threshold:\n        # boost \u03bb until condition number is acceptable\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_threshold:\n                break\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.0561), Performs well on nmae (3.1366), Performs well on r2 (-7.0561), Performs well on combined_score (0.1104)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      1,\n      z1, z2, z3, z4,\n      z1^2, z2^2, z3^2, z4^2,\n      z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    # Natural log and normalization to roughly [-1,1]\n    logs = np.log(X + eps)                     # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE         # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms z_i\n    cols.append(z)\n    # 3) quadratic terms z_i^2\n    cols.append(z ** 2)\n    # 4) pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate to form (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like length 15\n    Returns:\n      preds: ndarray shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80)\n    Returns optimized \u03b8 of shape (15,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)        # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)            # (N,)\n\n    # Normal equations with adaptive ridge \u03bb\n    ATA = A.T.dot(A)                   # (15,15)\n    P = ATA.shape[0]\n    # regularization scaled by average diagonal entry for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_thresh:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_thresh:\n                break\n\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr minimum\n    16.0,     # bsz minimum\n    4e9,      # data_size minimum\n    2.14e8    # non_embedding_param_size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr maximum\n    4096.0,   # bsz maximum\n    1e11,     # data_size maximum\n    1e9       # non_embedding_param_size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half-range for each log\u2010feature (normalize to ~[-1,1])\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log\u2010features with pairwise interactions:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                  # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z ** 2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # final shape (N, 1 + 4 + 4 + 6 = 15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law by adaptive ridge-regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array of corresponding LM loss values\n    Returns:\n      theta_opt: (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)            # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)                # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                       # (15,15)\n    P = ATA.shape[0]\n    # adaptive \u03bb: scale by average diagonal magnitude\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                        # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0736)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size    min\n    4e9,      # data size     min\n    2.14e8    # non\u2010embed param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size    max\n    1e11,     # data size     max\n    1e9       # non\u2010embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for z\u2010score normalization\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      features = [1,\n                  z_i for i in 0..3,\n                  z_i^2 for i in 0..3,\n                  z_i * z_j for 0 <= i < j < 4]\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Returns: ndarray of shape (N, 15)\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    eps = 1e-12\n    logs = np.log(X + eps)                # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # shape (N,4)\n\n    # Intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear terms z_i\n    cols.append(z)\n    # Quadratic terms z_i^2\n    cols.append(z ** 2)\n    # Pairwise interaction terms z_i * z_j for i < j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate: (N, 1 + 4 + 4 + 6 = 15)\n    return np.hstack(cols)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # shape (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by solving a ridge\u2010regularized\n    least\u2010squares problem in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)           # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)               # shape (N,)\n\n    # Form normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                      # shape (15,15)\n    P   = ATA.shape[0]\n    # \u03bb scaled to data scale; smaller multiplier to reduce bias\n    lam = 1e-6 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                       # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy    = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each log\u2010feature (z-score normalization)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features:\n      z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      1 (intercept),\n      z_i (linear for i in 0..3),\n      z_i^2 (quadratic),\n      z_i * z_j (pairwise interactions for 0<=i<j<4)\n    Returns:\n      A of shape (N, 1+4+4+6 = 15)\n    \"\"\"\n    eps = 1e-12\n    logs = np.log(X + eps)                    # shape (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # intercept term\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interaction terms\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all columns into design matrix\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (\u03b8)\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least\u2010squares:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n      (no regularization on the intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow 1D -> 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)      # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)          # shape (N,)\n\n    # Form normal equations\n    ATA = A.T.dot(A)                 # shape (15,15)\n    P   = ATA.shape[0]\n    # Adaptive ridge \u03bb: scaled by average diagonal\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # do not regularize intercept\n\n    ATA_reg = ATA + reg\n    ATy     = A.T.dot(y_log)\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0618, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Compute midpoint and half\u2010range for each feature (for normalization to ~[-1,1])\n_LOG_MEAN = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a numerically stable design matrix using Chebyshev\u2010basis polynomials\n    on normalized log\u2010features z_i = (log x_i \u2212 _LOG_MEAN_i)/_LOG_SCALE_i.\n    Features for each sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where T2(z) = 2*z^2 \u2212 1 is the 2nd\u2010degree Chebyshev polynomial.\n    Returns:\n      A: ndarray of shape (N, 15)\n    \"\"\"\n    eps = 1e-12\n    # Safe log\n    logs = np.log(X + eps)\n    # Normalize to roughly [-1,1]\n    z = (logs - _LOG_MEAN) / _LOG_SCALE\n    N, F = z.shape  # F should be 4\n\n    # Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # Linear Chebyshev feature = z\n    cols.append(z)\n    # Quadratic Chebyshev features T2(z) = 2 z^2 - 1\n    T2 = 2.0 * (z**2) - 1.0\n    cols.append(T2)\n\n    # Pairwise interaction terms on the normalized z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix\n    A = np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    # Exponentiate to recover loss\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev\u2010polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n\n    Inputs:\n      data_points: (N,4) array\n      loss_values: (N,)   array\n\n    Returns:\n      theta_opt: ndarray of shape (15,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points must match number of loss values\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)    # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)        # (N,)\n\n    # Normal equations for ridge regression\n    ATA = A.T.dot(A)               # (15,15)\n    ATy = A.T.dot(y_log)           # (15,)\n\n    P = ATA.shape[0]\n    # Adaptive regularization strength\n    lam_base = 1e-3\n    lam = lam_base * np.trace(ATA) / P\n    # Build regularization matrix\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # do not penalize intercept\n\n    ATA_reg = ATA + reg\n\n    # If system is ill\u2010conditioned, increase regularization\n    cond_threshold = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_threshold:\n        # boost \u03bb until condition number is acceptable\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_threshold:\n                break\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.056), Excellent nmae (3.137)\n\n\n### Inspiration 2 (Score: 4.9199, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a log\u2013polynomial scaling law with cross interactions.\n    Model (in natural-log domain):\n        log L = \u03b80\n              + \u03b81 * lr_log\n              + \u03b82 * bsz_log\n              + \u03b83 * data_log\n              + \u03b84 * param_log\n              + \u03b85 * lr_log^2\n              + \u03b86 * (lr_log * bsz_log)\n              + \u03b87 * (lr_log * data_log)\n              + \u03b88 * (lr_log * param_log)\n              + \u03b89 * (bsz_log * data_log)\n              + \u03b810* (bsz_log * param_log)\n              + \u03b811* (data_log * param_log)\n    where\n        lr_log     = log(lr)\n        bsz_log    = log(bsz)\n        data_log   = log(data_size)\n        param_log  = log(non_embedding_param_size)\n    Returns exp(log L).\n    Inputs:\n      data_points: array-like of shape (N,4), columns [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 12 [\u03b80 \u2026 \u03b811]\n    Output:\n      preds: (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    \n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 12:\n        raise ValueError(f\"scaling_law_func expects 12 parameters, got {theta.size}\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    # Build design matrix with 12 features\n    # 1, lr_log, bsz_log, data_log, param_log,\n    # lr_log^2,\n    # lr_log * bsz_log, lr_log * data_log, lr_log * param_log,\n    # bsz_log * data_log, bsz_log * param_log, data_log * param_log\n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 12-parameter log\u2013polynomial scaling law via ridge-regularized least squares\n    on the log-transformed loss:\n        \u03b8 = argmin ||A \u03b8 \u2212 y_log||^2 + \u03bb * ||\u03b8_{1:}||^2\n    (No penalty on the intercept \u03b80.)\n    Inputs:\n      data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n      loss_values: (N,)   array of observed losses\n      ridge_lambda:       regularization strength (default 1e-3)\n    Output:\n      theta_opt: (12,) optimized parameter vector\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    \n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss values must match number of data points.\")\n    \n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n    \n    N = X.shape[0]\n    A = np.column_stack([\n        np.ones(N),                     # \u03b80\n        lr_log,                         # \u03b81\n        bsz_log,                        # \u03b82\n        data_log,                       # \u03b83\n        param_log,                      # \u03b84\n        lr_log**2,                      # \u03b85\n        lr_log * bsz_log,               # \u03b86\n        lr_log * data_log,              # \u03b87\n        lr_log * param_log,             # \u03b88\n        bsz_log * data_log,             # \u03b89\n        bsz_log * param_log,            # \u03b810\n        data_log * param_log            # \u03b811\n    ])\n    \n    y_log = np.log(y + eps)\n    \n    P = A.shape[1]\n    # Ridge regularization matrix: no penalty on intercept\n    reg = ridge_lambda * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    \n    AtA = A.T.dot(A) + reg\n    AtY = A.T.dot(y_log)\n    \n    theta_opt = np.linalg.solve(AtA, AtY)\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (202.931), Excellent nmae (18.675)\n\n\n### Inspiration 3 (Score: 1.0731, Type: Migrant)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# Precompute midpoint and half\u2010range in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      1,\n      z1, z2, z3, z4,\n      z1^2, z2^2, z3^2, z4^2,\n      z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4\n    Returns A of shape (N,15).\n    \"\"\"\n    eps = 1e-12\n    # Natural log and normalization to roughly [-1,1]\n    logs = np.log(X + eps)                     # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE         # (N,4)\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) linear terms z_i\n    cols.append(z)\n    # 3) quadratic terms z_i^2\n    cols.append(z ** 2)\n    # 4) pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate to form (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array\u2010like shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like length 15\n    Returns:\n      preds: ndarray shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)   # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expects {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)       # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80)\n    Returns optimized \u03b8 of shape (15,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010sample\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Build design matrix and log\u2010target\n    A = _build_design_matrix(X)        # (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)            # (N,)\n\n    # Normal equations with adaptive ridge \u03bb\n    ATA = A.T.dot(A)                   # (15,15)\n    P = ATA.shape[0]\n    # regularization scaled by average diagonal entry for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                    # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    cond_val = np.linalg.cond(ATA_reg)\n    if cond_val > cond_thresh:\n        for _ in range(3):\n            lam *= 10.0\n            reg = lam * np.eye(P, dtype=np.float64)\n            reg[0, 0] = 0.0\n            ATA_reg = ATA + reg\n            cond_val = np.linalg.cond(ATA_reg)\n            if cond_val <= cond_thresh:\n                break\n\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 4 (Score: 3.7783, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010ranges for normalization (from problem statement)\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8 ], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9    ], dtype=np.float64))\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Given X of shape (N,4), compute normalized log\u2010features z of shape (N,4):\n      z = (log(X + eps) - _LOG_MEAN) / _LOG_SCALE\n    This maps each feature roughly into [-1,1].\n    \"\"\"\n    logs = np.log(X + _eps)\n    return (logs - _LOG_MEAN) / _LOG_SCALE\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a simple power\u2010law in normalized log\u2010features:\n      log_loss = \u03b80 + sum_{i=1..4} \u03b8_i * z_i\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20105 array [\u03b80, \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {theta.size}\")\n\n    # normalize log-features\n    z = _normalize_log_features(X)                # shape (N,4)\n    # compute log-loss\n    log_pred = theta[0] + z.dot(theta[1:])        # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter power\u2010law scaling law by ridge\u2010regularized least\u2010squares\n    on the log-transformed loss:\n      minimize ||A\u03b8 \u2212 log(y)||^2 + \u03bb||\u03b8_{1:}||^2,\n    with no penalty on the intercept \u03b80.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      theta_opt: ndarray of shape (5,) optimized parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build design matrix: [1, z_lr, z_bsz, z_data, z_param]\n    z = _normalize_log_features(X)                # (N,4)\n    N = X.shape[0]\n    A = np.hstack([np.ones((N,1), dtype=np.float64), z])  # (N,5)\n\n    # log-target\n    y_log = np.log(y + _eps)                      # (N,)\n\n    # normal equations with ridge \u03bb (no penalty on intercept)\n    P = A.shape[1]                                # 5\n    ATA = A.T.dot(A)                              # (5,5)\n    lam = 1e-3 * np.trace(ATA) / P                # adaptive ridge strength\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                                # do not penalize \u03b80\n\n    M   = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve robustly\n    try:\n        theta_opt = np.linalg.solve(M, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(M).dot(ATy)\n\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.607), Excellent nmae (14.104)\n\n\n### Inspiration 5 (Score: 4.0526, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 9-parameter log\u2013polynomial scaling law:\n      log L = \u03b80\n            + \u03b81 * \u2113r\n            + \u03b82 * \u2113r^2\n            + \u03b83 * \u2113bsz\n            + \u03b84 * \u2113data\n            + \u03b85 * \u2113param\n            + \u03b86 * (\u2113r * \u2113data)\n            + \u03b87 * (\u2113r * \u2113param)\n            + \u03b88 * (\u2113data * \u2113param)\n    where \u2113r = log(lr), \u2113bsz = log(bsz), \u2113data = log(data_size),\n    \u2113param = log(non_embedding_param_size). Returns exp(log L).\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 9 [\u03b80 \u2026 \u03b88]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got shape {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 9:\n        raise ValueError(f\"scaling_law_func expects 9 parameters, got {theta.size}\")\n\n    # Safe log-transform\n    eps = 1e-12\n    logs = np.log(X + eps)  # shape (N,4)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    N = X.shape[0]\n    # Build design matrix (N \u00d7 9)\n    A = np.column_stack([\n        np.ones(N),            # \u03b80\n        lr_log,                # \u03b81\n        lr_log**2,             # \u03b82\n        bsz_log,               # \u03b83\n        data_log,              # \u03b84\n        param_log,             # \u03b85\n        lr_log * data_log,     # \u03b86\n        lr_log * param_log,    # \u03b87\n        data_log * param_log   # \u03b88\n    ])\n\n    log_pred = A.dot(theta)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9-parameter log\u2013polynomial scaling law by ridge-regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb \u2225\u03b8_{1:}\u2225^2\n    (no penalty on \u03b80). Returns \u03b8 of length 9, or shape (T,9)\n    for multi-target losses.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,) or (N,T)\n\n    Returns:\n      theta_opt: ndarray of shape (9,) or (T,9)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Ensure y is 2D: shape (N, T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n\n    # Precompute design matrix A (shared for all targets)\n    eps = 1e-12\n    logs = np.log(X + eps)\n    lr_log    = logs[:, 0]\n    bsz_log   = logs[:, 1]\n    data_log  = logs[:, 2]\n    param_log = logs[:, 3]\n\n    A = np.column_stack([\n        np.ones(N),\n        lr_log,\n        lr_log**2,\n        bsz_log,\n        data_log,\n        param_log,\n        lr_log * data_log,\n        lr_log * param_log,\n        data_log * param_log\n    ])  # shape (N,9)\n\n    # Regularized normal equations: (A^T A + \u03bbI) \u03b8 = A^T y_log\n    AtA = A.T.dot(A)            # (9,9)\n    P = AtA.shape[0]\n    # Adaptive ridge \u03bb scaled to average diagonal\n    lam = 1e-6 * np.trace(AtA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0             # no penalty on intercept\n    ATA_reg = AtA + reg\n\n    thetas = []\n    for t in range(T):\n        y_t = Y[:, t]\n        y_log = np.log(y_t.clip(min=eps))\n        ATy = A.T.dot(y_log)\n        try:\n            theta_t = np.linalg.solve(ATA_reg, ATy)\n        except np.linalg.LinAlgError:\n            theta_t = np.linalg.pinv(ATA_reg).dot(ATy)\n        thetas.append(theta_t)\n\n    thetas = np.vstack(thetas)  # shape (T,9)\n    return thetas[0] if thetas.shape[0] == 1 else thetas\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (129.947), Excellent nmae (15.203)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # learning rate minimum\n    16.0,     # batch size minimum\n    4e9,      # data size minimum\n    2.14e8    # non\u2010embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # learning rate maximum\n    4096.0,   # batch size maximum\n    1e11,     # data size maximum\n    1e9       # non\u2010embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half\u2010range in log\u2010space for roughly [-1,1] normalization\n_LOG_MEAN   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE  = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps        = 1e-12\n_cond_thresh = 1e8\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree Chebyshev\u2010polynomial design matrix on normalized log\u2010features.\n    Features per sample:\n      [1,\n       z1, z2, z3, z4,\n       T2(z1), T2(z2), T2(z3), T2(z4),\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where\n      z = (log(x+eps) \u2212 _LOG_MEAN)/_LOG_SCALE,\n      T2(z) = 2 z^2 \u2212 1.\n    Returns A of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # 1) Intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # 2) Linear Chebyshev features: z\n    cols.append(z)\n    # 3) Quadratic Chebyshev features: T2(z) = 2 z^2 - 1\n    cols.append(2.0 * (z**2) - 1.0)\n    # 4) Pairwise interactions on z\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N, 1+4+4+6 = 15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter Chebyshev\u2010polynomial model in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like length 15\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)             # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)                 # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter scaling law by ridge\u2010regularized least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (No penalty on intercept \u03b80.)\n\n    Supports multi\u2010target: if loss_values is (N,T), returns (T,15); if (N,), returns (15,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Make y two\u2010dimensional: shape (N,T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    else:\n        Y = y\n    N, T = X.shape[0], Y.shape[1]\n\n    # Build design matrix once\n    A   = _build_design_matrix(X)           # (N,15)\n    ATA = A.T.dot(A)                        # (15,15)\n    P   = ATA.shape[0]\n\n    def _fit_target(y_vec):\n        # Solve for one column y_vec of shape (N,)\n        y_log = np.log(y_vec + _eps)\n        ATy   = A.T.dot(y_log)\n        # Adaptive ridge \u03bb\n        lam   = 1e-3 * np.trace(ATA) / P\n        reg   = lam * np.eye(P, dtype=np.float64)\n        reg[0, 0] = 0.0  # no penalty on intercept\n        ATA_reg = ATA + reg\n\n        # Improve conditioning if needed\n        cond = np.linalg.cond(ATA_reg)\n        if cond > _cond_thresh:\n            for _ in range(3):\n                lam *= 10.0\n                reg = lam * np.eye(P, dtype=np.float64)\n                reg[0, 0] = 0.0\n                ATA_reg = ATA + reg\n                cond = np.linalg.cond(ATA_reg)\n                if cond <= _cond_thresh:\n                    break\n\n        # Solve robustly\n        try:\n            theta_opt = np.linalg.solve(ATA_reg, ATy)\n        except np.linalg.LinAlgError:\n            theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n        return theta_opt\n\n    # Fit per target\n    if T == 1:\n        return _fit_target(Y[:, 0])\n    else:\n        return np.vstack([_fit_target(Y[:, i]) for i in range(T)])\n\n# EVOLVE-BLOCK-END\n```"]}}}