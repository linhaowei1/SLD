{"id": "a407557c-01c5-47b6-b9f9-ddd6a7782a05", "code": "import numpy as np\n\n# Pre-defined static log-ranges for each feature based on known bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half-range for z-score normalization in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional Chebyshev\u2010polynomial design matrix in normalized log\u2010space.\n    For each sample and feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      [1,\n       z1, z2, z3, z4,                   -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),   -- Chebyshev quadratic: 2*z^2 \u2212 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]              -- pairwise interactions\n    Returns: ndarray of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # compute normalized log-features\n    logs = np.log(X + _eps)                       # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE        # (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Chebyshev quadratic T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z ** 2) - 1.0)\n    # Pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i:i+1] * z[:, j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 15-parameter Chebyshev-polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-polynomial scaling law by adaptive\n    ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,) of lm losses (>0)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix in normalized log-space\n    A = _build_design_matrix(X)               # (N,15)\n    y_log = np.log(y + _eps)                  # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                          # (15,15)\n    ATy = A.T.dot(y_log)                      # (15,)\n\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P            # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                            # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    count = 0\n    cond_val = np.linalg.cond(ATA_reg)\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve normal equations robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt", "language": "python", "parent_id": "0358b091-b551-46a8-83fc-e6631635211f", "generation": 3, "timestamp": 1754805130.2372332, "iteration_found": 164, "metrics": {"nmse": 8.218594862826615, "nmae": 3.181234417025846, "r2": -7.218594862826615, "combined_score": 0.10847640175971232}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.237640076708638, "nmae": 3.186254040646542, "r2": -7.237640076708638, "combined_score": 0.10825275629880342}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.2376\n- nmae: 3.1863\n- r2: -7.2376\n- combined_score: 0.1083\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 8.2298, nmae: 3.1842, r2: -7.2298, combined_score: 0.1083\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 8.2186, nmae: 3.1812, r2: -7.2186, combined_score: 0.1085\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0724)\n```python\nimport numpy as np\n\n# Pre\u2010defined static log\u2010ranges for each feature based on known bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional Chebyshev\u2010polynomial design matrix in normalized log\u2010space.\n    For each sample and feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      [1,\n       z1, z2, z3, z4,                   -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),   -- Chebyshev quadratic: 2*z^2 \u2212 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]              -- pairwise interactions\n    Returns an array of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    logs = np.log(X + _eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Chebyshev quadratic terms T2(z) = 2\u00b7z^2 \u2212 1\n    cols.append(2.0 * (z**2) - 1.0)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i:i+1] * z[:, j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter Chebyshev\u2010polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) (or (4,))\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter Chebyshev\u2010polynomial scaling law by adaptive\n    ridge\u2010regularized least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) (or (4,))\n      loss_values: array\u2010like of shape (N,) of lm losses (>0)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A     = _build_design_matrix(X)       # (N,15)\n    y_log = np.log(y + _eps)              # (N,)\n\n    ATA = A.T.dot(A)                      # (15,15)\n    ATy = A.T.dot(y_log)                  # (15,)\n\n    # Adaptive ridge regularization \u03bb = 1e-4 * trace(ATA)/P\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if needed\n    cond_thresh = 1e8\n    count = 0\n    cond = np.linalg.cond(ATA_reg)\n    while cond > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nKey features: Performs well on nmse (8.2186), Performs well on nmae (3.1812), Performs well on r2 (-7.2186), Performs well on combined_score (0.1085)\n\n\n### Program 2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on task description\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=np.float64))\n# Compute midpoint and half-range for z-score normalization in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n    Input:\n      X: ndarray of shape (N,4)\n    Output:\n      A: ndarray of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log and normalize\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all columns\n    A = np.hstack(cols)  # (N, 1 + 4 + 4 + 6 = 15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law via ridge-regularized least squares:\n      minimize ||A \u03b8 - log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on intercept)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # build design matrix and target\n    A     = _build_design_matrix(X)  # (N,15)\n    y_log = np.log(y + _eps)         # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA   = A.T.dot(A)               # (15,15)\n    P     = ATA.shape[0]\n    lam   = 1e-4 * np.trace(ATA) / P\n    reg   = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    attempts = 0\n    while np.linalg.cond(ATA_reg) > cond_thresh and attempts < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        attempts += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n### Program 3 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Predefined log\u2010ranges for normalization of each feature (from problem spec)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)                  # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) quadratic terms\n    cols.append(z**2)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix of shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    theta = np.ravel(params).astype(np.float64)\n    A = _build_design_matrix(data_points)     # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n    Returns:\n      theta_opt: ndarray of shape (15,) for single\u2010target,\n                 or (T,15) for multi\u2010target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # ensure 2D targets (N,T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    elif y.ndim == 2:\n        Y = y\n    else:\n        raise ValueError(f\"fit_scaling_law: loss_values must be 1D or 2D, got {y.ndim}D\")\n    if Y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)           # (N,15)\n    eps  = 1e-12\n    Ylog = np.log(Y + eps)                   # (N,T)\n\n    # Normal equations with adaptive ridge regularization\n    ATA  = A.T.dot(A)                        # (15,15)\n    P    = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for scale\u2010invariance\n    lam  = 1e-4 * np.trace(ATA) / P\n    reg  = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                           # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val    = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(Ylog)                      # (15,T)\n\n    # solve for \u03b8 (15,T)\n    try:\n        Theta = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        Theta = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    # return shape: (15,) or (T,15)\n    if Theta.shape[1] == 1:\n        return Theta.ravel()\n    else:\n        return Theta.T\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (8.2298), Performs well on nmae (3.1842), Performs well on r2 (-7.2298), Performs well on combined_score (0.1083)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) log\u2010ranges for normalization based on problem description\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=np.float64))\n\n# midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix on normalized log\u2010features.\n    Input:\n      X: array of shape (N,4) with columns [lr, bsz, data_size, non_emb_param_size]\n    Output:\n      A: array of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    eps = 1e-12\n    logs = np.log(X + eps)                 # shape (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE     # normalize ~[-1,1]\n    N, F = z.shape\n\n    # constant term\n    cols = [np.ones((N,), dtype=np.float64)]\n    # linear terms\n    for i in range(F):\n        cols.append(z[:, i])\n    # squared terms\n    for i in range(F):\n        cols.append(z[:, i] * z[:, i])\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i + 1, F):\n            cols.append(z[:, i] * z[:, j])\n\n    return np.stack(cols, axis=1)  # shape (N, 1+4+4+6 =15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features.\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 15:\n        raise ValueError(f\"scaling_law_func: expected 15 parameters, got {theta.size}\")\n\n    A = _build_design_matrix(X)          # shape (N,15)\n    log_pred = A.dot(theta)              # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized least squares\n    in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # build design matrix and target\n    A = _build_design_matrix(X)          # shape (N,15)\n    eps = 1e-12\n    y_log = np.log(y + eps)              # shape (N,)\n\n    # normal equations with ridge regularization\n    ATA = A.T.dot(A)                     # (15,15)\n    P = ATA.shape[0]\n    # \u03bb scaled for scale\u2010invariance\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve for \u03b8\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.0731)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr minimum\n    16.0,      # batch size minimum\n    4e9,       # data_size (tokens) minimum\n    2.14e8     # non-embedding parameter size minimum\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr maximum\n    4096.0,    # batch size maximum\n    1e11,      # data_size (tokens) maximum\n    1e9        # non-embedding parameter size maximum\n], dtype=np.float64))\n\n# Midpoint and half-range for z-score style normalization in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n_eps = 1e-12  # small constant to avoid log(0)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n      z = (log(X) - _LOG_MEAN) / _LOG_SCALE\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns an (N \u00d7 15) matrix.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # safe log and normalize\n    logs = np.log(X + _eps)                  # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # (N,4), roughly in [-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N, 1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z * z)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # stack to (N,15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter quadratic model in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)  # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)      # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter quadratic model by ridge-regularized least squares\n    in log-loss space:\n\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2,\n      with \u03bb = 1e-4 * trace(A\u1d40A) / P, and no penalty on intercept \u03b80.\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # allow single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    A = _build_design_matrix(X)        # (N,15)\n    y_log = np.log(y + _eps)           # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    P = A.shape[1]\n    ATA = A.T.dot(A)                   # (15,15)\n    lam = 1e-4 * np.trace(ATA) / P     # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0                    # do not penalize intercept\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        # fallback for numerical stability\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n    return theta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.0724, Type: High-Performer)\n```python\nimport numpy as np\n\n# Pre\u2010defined static log\u2010ranges for each feature based on known bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional Chebyshev\u2010polynomial design matrix in normalized log\u2010space.\n    For each sample and feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      [1,\n       z1, z2, z3, z4,                   -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),   -- Chebyshev quadratic: 2*z^2 \u2212 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]              -- pairwise interactions\n    Returns an array of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    logs = np.log(X + _eps)               # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # Intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Chebyshev quadratic terms T2(z) = 2\u00b7z^2 \u2212 1\n    cols.append(2.0 * (z**2) - 1.0)\n    # Pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i:i+1] * z[:, j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss via a 15\u2010parameter Chebyshev\u2010polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) (or (4,))\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter Chebyshev\u2010polynomial scaling law by adaptive\n    ridge\u2010regularized least squares in log\u2010loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) (or (4,))\n      loss_values: array\u2010like of shape (N,) of lm losses (>0)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    A     = _build_design_matrix(X)       # (N,15)\n    y_log = np.log(y + _eps)              # (N,)\n\n    ATA = A.T.dot(A)                      # (15,15)\n    ATy = A.T.dot(y_log)                  # (15,)\n\n    # Adaptive ridge regularization \u03bb = 1e-4 * trace(ATA)/P\n    P   = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if needed\n    cond_thresh = 1e8\n    count = 0\n    cond = np.linalg.cond(ATA_reg)\n    while cond > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.219), Excellent nmae (3.181)\n\n\n### Inspiration 2 (Score: 5.0982, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre\u2010defined (fixed) hyperparameter ranges for normalization\n_LR_MIN, _LR_MAX = 1.2e-4, 2.2e-2\n_BSZ_MIN, _BSZ_MAX = 16.0, 4096.0\n_DATA_MIN, _DATA_MAX = 4e9, 100e9\n_PARAM_MIN, _PARAM_MAX = 214e6, 1e9\n\n# Pre\u2010compute log\u2010space centers and half\u2010ranges\n_eps = 1e-12\n_ln_lr_min, _ln_lr_max = np.log(_LR_MIN + _eps), np.log(_LR_MAX + _eps)\n_ln_bsz_min, _ln_bsz_max = np.log(_BSZ_MIN + _eps), np.log(_BSZ_MAX + _eps)\n_ln_data_min, _ln_data_max = np.log(_DATA_MIN + _eps), np.log(_DATA_MAX + _eps)\n_ln_param_min, _ln_param_max = np.log(_PARAM_MIN + _eps), np.log(_PARAM_MAX + _eps)\n\n_LR_C = 0.5 * (_ln_lr_min + _ln_lr_max)\n_LR_H = 0.5 * (_ln_lr_max - _ln_lr_min)\n_BSZ_C = 0.5 * (_ln_bsz_min + _ln_bsz_max)\n_BSZ_H = 0.5 * (_ln_bsz_max - _ln_bsz_min)\n_DATA_C = 0.5 * (_ln_data_min + _ln_data_max)\n_DATA_H = 0.5 * (_ln_data_max - _ln_data_min)\n_PARAM_C = 0.5 * (_ln_param_min + _ln_param_max)\n_PARAM_H = 0.5 * (_ln_param_max - _ln_param_min)\n\ndef _construct_design(log_feats):\n    \"\"\"\n    Given normalized log\u2010features f of shape (N,4),\n    return design matrix of shape (N,11):\n      [1, f1, f2, f3, f4, f1*f2, f1*f3, f1*f4, f2*f3, f2*f4, f3*f4]\n    \"\"\"\n    f1, f2, f3, f4 = log_feats[:,0], log_feats[:,1], log_feats[:,2], log_feats[:,3]\n    # pairwise interactions\n    i12 = f1 * f2\n    i13 = f1 * f3\n    i14 = f1 * f4\n    i23 = f2 * f3\n    i24 = f2 * f4\n    i34 = f3 * f4\n    ones = np.ones((log_feats.shape[0], 1), dtype=log_feats.dtype)\n    return np.hstack([ones,\n                      log_feats,\n                      i12[:,None], i13[:,None], i14[:,None],\n                      i23[:,None], i24[:,None], i34[:,None]])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss given hyperparameters with a normalized\n    log\u2010quadratic scaling law (11 parameters).\n    \n    data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u201011 array of coefficients [\u03b80 \u2026 \u03b810]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 11:\n        raise ValueError(\"Expected params of length 11, got {}\".format(theta.size))\n    # compute log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    # normalize to roughly [-1,1]\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # build design matrix and predict\n    A = _construct_design(log_feats)  # (N,11)\n    log_pred = A.dot(theta)           # (N,)\n    # return in original loss\u2010space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values, ridge_lambda=1e-3):\n    \"\"\"\n    Fit the 11\u2010parameter normalized log\u2010quadratic model via\n    ridge\u2010regularized linear regression on log(loss).\n    \n    Returns optimized \u03b8 of shape (11,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None,:]\n    if X.shape[1] != 4:\n        raise ValueError(\"Expected data_points shape (N,4), got {}\".format(X.shape))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    # compute and normalize log\u2010features\n    lr, bsz, data_sz, p_sz = X[:,0], X[:,1], X[:,2], X[:,3]\n    ln_lr    = np.log(lr    + _eps)\n    ln_bsz   = np.log(bsz   + _eps)\n    ln_data  = np.log(data_sz+ _eps)\n    ln_param = np.log(p_sz   + _eps)\n    f_lr    = (ln_lr    - _LR_C)    / _LR_H\n    f_bsz   = (ln_bsz   - _BSZ_C)   / _BSZ_H\n    f_data  = (ln_data  - _DATA_C)  / _DATA_H\n    f_param = (ln_param - _PARAM_C) / _PARAM_H\n    log_feats = np.stack([f_lr, f_bsz, f_data, f_param], axis=1)\n    # design matrix and target\n    A = _construct_design(log_feats)  # (N,11)\n    y_log = np.log(y + _eps)\n    # ridge\u2010regularization (do not penalize intercept)\n    P = A.shape[1]\n    AtA = A.T.dot(A)\n    reg = ridge_lambda * np.eye(P, dtype=AtA.dtype)\n    reg[0,0] = 0.0\n    M = AtA + reg\n    b = A.T.dot(y_log)\n    # solve (M)\u03b8 = b robustly\n    try:\n        theta = np.linalg.solve(M, b)\n    except np.linalg.LinAlgError:\n        # fallback to pseudo\u2010inverse\n        theta = np.linalg.pinv(M).dot(b)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.176), Excellent nmae (19.388)\n\n\n### Inspiration 3 (Score: 5.0965, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Improved 11-parameter linear+interaction model in normalized log-space\n\n# Pre-defined log-ranges for normalization (from problem description)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non-embedding parameter size\n], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non-embedding parameter size\n], dtype=np.float64))\n# Midpoint and half-range (for z-score in log-space)\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with 11 parameters:\n      intercept + \u2211 a_i * z_i + \u2211_{i<j} b_{ij} * (z_i * z_j),\n    where z = (log(x) - _LOG_MEAN) / _LOG_SCALE.\n    Then loss = exp(log_loss).\n    Inputs:\n      data_points: array-like of shape (N,4) [lr, bsz, data_size, model_size]\n      params:      array-like of length 11\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n\n    # compute normalized log features\n    logs = np.log(X + _eps)                  # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE      # (N,4)\n    N, F = z.shape\n\n    # Build design matrix A of shape (N, 1 + 4 + 6 = 11)\n    #  - intercept\n    #  - linear z_i\n    #  - pairwise interactions z_i * z_j for i<j\n    cols = [np.ones((N, 1), dtype=np.float64),       # intercept\n            z]                                      # linear terms\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    cols.append(np.hstack(inters))                   # (N,6)\n    A = np.hstack(cols)                              # (N,11)\n\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n\n    log_pred = A.dot(theta)                          # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11-parameter model by ridge-regularized least squares on log-loss:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (11,) optimized parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # build same design matrix A as in scaling_law_func\n    logs = np.log(X + _eps)               # (N,4)\n    z = (logs - _LOG_MEAN) / _LOG_SCALE   # (N,4)\n    N, F = z.shape\n\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z]\n    inters = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    cols.append(np.hstack(inters))\n    A = np.hstack(cols)                   # (N,11)\n\n    # log-transform target\n    y_log = np.log(y + _eps)              # (N,)\n\n    # ridge regularization: \u03bb scaled by data, no penalty on \u03b80\n    P = A.shape[1]\n    ATA = A.T.dot(A)\n    lam = 1e-4 * np.trace(ATA) / P\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    ATA_reg = ATA + reg\n    ATy = A.T.dot(y_log)\n\n    # solve normal equations (fallback to pinv if singular)\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (218.018), Excellent nmae (19.381)\n\n\n### Inspiration 4 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Predefined log\u2010ranges for normalization of each feature (from problem spec)\n_LOG_MIN   = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embed param size min\n], dtype=np.float64))\n\n_LOG_MAX   = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embed param size max\n], dtype=np.float64))\n\n# Midpoint and half\u2010range for z\u2010score normalization in log\u2010space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd\u2010degree polynomial design matrix in normalized log\u2010features.\n    Let z_i = (log(x_i) \u2212 _LOG_MEAN[i]) / _LOG_SCALE[i].\n    Columns:\n      [1,\n       z1, z2, z3, z4,\n       z1^2, z2^2, z3^2, z4^2,\n       z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    Returns A of shape (N, 15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log\n    eps = 1e-12\n    logs = np.log(X + eps)                  # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE  # normalize to ~[-1,1]\n    N, F = z.shape\n\n    # 1) intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # 2) linear terms\n    cols.append(z)\n    # 3) quadratic terms\n    cols.append(z**2)\n    # 4) pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i] * z[:, j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # Concatenate into design matrix of shape (N, 1+4+4+6 = 15)\n    return np.hstack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15\u2010parameter 2nd\u2010degree polynomial in normalized log\u2010features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    theta = np.ravel(params).astype(np.float64)\n    A = _build_design_matrix(data_points)     # (N,15)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n    log_pred = A.dot(theta)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter polynomial scaling law by ridge\u2010regularized\n    least squares on log(loss):\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2\n    (no penalty on intercept \u03b80).\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,) or (N,T)\n    Returns:\n      theta_opt: ndarray of shape (15,) for single\u2010target,\n                 or (T,15) for multi\u2010target\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64)\n    # ensure 2D targets (N,T)\n    if y.ndim == 1:\n        Y = y[:, None]\n    elif y.ndim == 2:\n        Y = y\n    else:\n        raise ValueError(f\"fit_scaling_law: loss_values must be 1D or 2D, got {y.ndim}D\")\n    if Y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix and log\u2010target\n    A    = _build_design_matrix(X)           # (N,15)\n    eps  = 1e-12\n    Ylog = np.log(Y + eps)                   # (N,T)\n\n    # Normal equations with adaptive ridge regularization\n    ATA  = A.T.dot(A)                        # (15,15)\n    P    = ATA.shape[0]\n    # \u03bb scaled by average diagonal entry for scale\u2010invariance\n    lam  = 1e-4 * np.trace(ATA) / P\n    reg  = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                           # no penalty on intercept\n    ATA_reg = ATA + reg\n\n    # improve conditioning if needed\n    cond_thresh = 1e8\n    cond_val    = np.linalg.cond(ATA_reg)\n    count = 0\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    ATy = A.T.dot(Ylog)                      # (15,T)\n\n    # solve for \u03b8 (15,T)\n    try:\n        Theta = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        Theta = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    # return shape: (15,) or (T,15)\n    if Theta.shape[1] == 1:\n        return Theta.ravel()\n    else:\n        return Theta.T\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n### Inspiration 5 (Score: 1.0731, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Pre-defined log-ranges for normalization based on task description\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=np.float64))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=np.float64))\n# Compute midpoint and half-range for z-score normalization in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n_eps       = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 2nd-degree polynomial design matrix in normalized log-features.\n    Input:\n      X: ndarray of shape (N,4)\n    Output:\n      A: ndarray of shape (N,15) with columns:\n         [1,\n          z1, z2, z3, z4,\n          z1^2, z2^2, z3^2, z4^2,\n          z1*z2, z1*z3, z1*z4, z2*z3, z2*z4, z3*z4]\n    where z = (log(X) - _LOG_MEAN) / _LOG_SCALE.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n    # safe log and normalize\n    logs = np.log(X + _eps)                   # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE    # normalized to ~[-1,1]\n    N, F = z.shape\n\n    # intercept\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # linear terms\n    cols.append(z)\n    # quadratic terms\n    cols.append(z**2)\n    # pairwise interactions\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:,i] * z[:,j])[:, None])\n    if inters:\n        cols.append(np.hstack(inters))\n\n    # concatenate all columns\n    A = np.hstack(cols)  # (N, 1 + 4 + 4 + 6 = 15)\n    return A\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 15-parameter 2nd-degree polynomial in normalized log-features:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} params, got {theta.size}\")\n    log_pred = A.dot(theta)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter polynomial scaling law via ridge-regularized least squares:\n      minimize ||A \u03b8 - log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on intercept)\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,)\n    Returns:\n      theta_opt: ndarray of shape (15,) fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # build design matrix and target\n    A     = _build_design_matrix(X)  # (N,15)\n    y_log = np.log(y + _eps)         # (N,)\n\n    # normal equations with adaptive ridge regularization\n    ATA   = A.T.dot(A)               # (15,15)\n    P     = ATA.shape[0]\n    lam   = 1e-4 * np.trace(ATA) / P\n    reg   = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0  # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # improve conditioning if necessary\n    cond_thresh = 1e8\n    attempts = 0\n    while np.linalg.cond(ATA_reg) > cond_thresh and attempts < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        attempts += 1\n\n    ATy = A.T.dot(y_log)\n\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.230), Excellent nmae (3.184)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# Pre\u2010defined log\u2010ranges for normalization (from problem description)\n_LOG_MIN = np.log(np.array([\n    1.2e-4,   # lr\n    16.0,     # bsz\n    4e9,      # data_size\n    2.14e8    # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,   # lr\n    4096.0,   # bsz\n    1e11,     # data_size\n    1e9       # non_embedding_param_size\n], dtype=np.float64))\n\n_LOG_MID = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF_RANGE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Quadratic\u2010in\u2010normalized\u2010log scaling law with pairwise interactions:\n      z_i = (log(x_i) - mid_i) / half_range_i\n      log_loss = \u03b80\n               + sum_i \u03b81_i * z_i\n               + sum_i \u03b82_i * z_i^2\n               + sum_{i<j} \u03b83_{ij} * z_i * z_j\n      loss = exp(log_loss)\n\n    params is length 15:\n      [\u03b80,\n       \u03b81_lr, \u03b81_bsz, \u03b81_data, \u03b81_param,\n       \u03b82_lr, \u03b82_bsz, \u03b82_data, \u03b82_param,\n       \u03b83_lr_bsz, \u03b83_lr_data, \u03b83_lr_param,\n       \u03b83_bsz_data, \u03b83_bsz_param,\n       \u03b83_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected data_points shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    F = 4\n    expected_len = 1 + F + F + (F * (F - 1) // 2)\n    if p.size != expected_len:\n        raise ValueError(f\"scaling_law_func: expected params length {expected_len}, got {p.size}\")\n\n    # Unpack parameters\n    \u03b80 = p[0]\n    \u03b81 = p[1 : 1 + F]\n    \u03b82 = p[1 + F : 1 + 2 * F]\n    \u03b83 = p[1 + 2 * F :]\n\n    # Safe log and normalize\n    eps = 1e-12\n    logs = np.log(X + eps)                      # shape (N,4)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE      # normalized logs\n\n    # Build log\u2010loss prediction\n    log_pred = \u03b80 + z.dot(\u03b81) + (z**2).dot(\u03b82)\n\n    # Add pairwise interaction terms\n    k = 0\n    for i in range(F):\n        for j in range(i + 1, F):\n            log_pred += \u03b83[k] * (z[:, i] * z[:, j])\n            k += 1\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter quadratic\u2010in\u2010normalized\u2010log scaling law by\n    ridge\u2010regularized least squares on log(loss).\n    Returns the parameter vector of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points shape (N,4), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of losses must match number of data points\")\n\n    # Safe log\u2010transform and normalize features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    z = (logs - _LOG_MID) / _LOG_HALF_RANGE  # shape (N,4)\n\n    N, F = z.shape\n    # Build design matrix A = [1, z, z^2, cross_terms]\n    cols = [np.ones((N, 1), dtype=np.float64),\n            z,\n            z**2]\n\n    # pairwise interactions\n    cross = []\n    for i in range(F):\n        for j in range(i + 1, F):\n            cross.append((z[:, i] * z[:, j])[:, np.newaxis])\n    if cross:\n        cols.append(np.hstack(cross))\n\n    A = np.hstack(cols)  # shape (N, 15)\n    y_log = np.log(y + eps)\n\n    # Solve (A^T A + \u03bbI) \u03b8 = A^T y_log with small ridge for stability\n    lam = 1e-5\n    ATA = A.T.dot(A)\n    ATA_reg = ATA + lam * np.eye(ATA.shape[0], dtype=np.float64)\n    ATy = A.T.dot(y_log)\n    \u03b8_opt = np.linalg.solve(ATA_reg, ATy)\n\n    return \u03b8_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Pre-defined static log-ranges for each feature based on known bounds\n_LOG_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=np.float64))\n\n_LOG_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=np.float64))\n\n# Midpoint and half-range for z-score normalization in log-space\n_LOG_MEAN  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_SCALE = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Small epsilon for numerical stability\n_eps = 1e-12\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build a 15-dimensional Chebyshev\u2010polynomial design matrix in normalized log\u2010space.\n    For each sample and feature i:\n      z_i = (log(x_i) - _LOG_MEAN[i]) / _LOG_SCALE[i]\n    Columns:\n      [1,\n       z1, z2, z3, z4,                   -- linear terms\n       T2(z1), T2(z2), T2(z3), T2(z4),   -- Chebyshev quadratic: 2*z^2 \u2212 1\n       z1*z2, z1*z3, z1*z4,\n       z2*z3, z2*z4, z3*z4]              -- pairwise interactions\n    Returns: ndarray of shape (N,15).\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"_build_design_matrix: expected shape (N,4), got {X.shape}\")\n\n    # compute normalized log-features\n    logs = np.log(X + _eps)                       # (N,4)\n    z    = (logs - _LOG_MEAN) / _LOG_SCALE        # (N,4)\n    N, F = z.shape\n\n    # Intercept term\n    cols = [np.ones((N,1), dtype=np.float64)]\n    # Linear terms\n    cols.append(z)\n    # Chebyshev quadratic T2(z) = 2*z^2 - 1\n    cols.append(2.0 * (z ** 2) - 1.0)\n    # Pairwise interactions z_i * z_j for i<j\n    inters = []\n    for i in range(F):\n        for j in range(i+1, F):\n            inters.append((z[:, i:i+1] * z[:, j:j+1]))\n    if inters:\n        cols.append(np.hstack(inters))\n\n    return np.hstack(cols)  # shape (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss via a 15-parameter Chebyshev-polynomial model:\n      log_loss = A \u00b7 \u03b8\n      loss     = exp(log_loss)\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n    Returns:\n      preds: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected shape (N,4), got {X.shape}\")\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    A = _build_design_matrix(X)\n    if theta.size != A.shape[1]:\n        raise ValueError(f\"scaling_law_func: expected {A.shape[1]} parameters, got {theta.size}\")\n\n    log_pred = A.dot(theta)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter Chebyshev-polynomial scaling law by adaptive\n    ridge-regularized least squares in log-loss space:\n      minimize ||A \u03b8 \u2212 log(y)||^2 + \u03bb ||\u03b8_{1:}||^2  (no penalty on \u03b80).\n\n    Inputs:\n      data_points: array-like of shape (N,4) or (4,)\n      loss_values: array-like of shape (N,) of lm losses (>0)\n    Returns:\n      theta_opt: ndarray of length 15 of fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected shape (N,4), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.size != X.shape[0]:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Build design matrix in normalized log-space\n    A = _build_design_matrix(X)               # (N,15)\n    y_log = np.log(y + _eps)                  # (N,)\n\n    # Normal equations with adaptive ridge regularization\n    ATA = A.T.dot(A)                          # (15,15)\n    ATy = A.T.dot(y_log)                      # (15,)\n\n    P = ATA.shape[0]\n    lam = 1e-4 * np.trace(ATA) / P            # adaptive \u03bb\n    reg = lam * np.eye(P, dtype=np.float64)\n    reg[0,0] = 0.0                            # no penalty on intercept\n\n    ATA_reg = ATA + reg\n\n    # Improve conditioning if necessary\n    cond_thresh = 1e8\n    count = 0\n    cond_val = np.linalg.cond(ATA_reg)\n    while cond_val > cond_thresh and count < 3:\n        lam *= 10.0\n        reg = lam * np.eye(P, dtype=np.float64)\n        reg[0,0] = 0.0\n        ATA_reg = ATA + reg\n        cond_val = np.linalg.cond(ATA_reg)\n        count += 1\n\n    # Solve normal equations robustly\n    try:\n        theta_opt = np.linalg.solve(ATA_reg, ATy)\n    except np.linalg.LinAlgError:\n        theta_opt = np.linalg.pinv(ATA_reg).dot(ATy)\n\n    return theta_opt\n```"]}}}