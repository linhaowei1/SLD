{"id": "f4586e05-3016-4eb8-97e3-68525164e1cf", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law with interaction:\n      Let x1=ln(lr), x2=ln(bsz), x3=ln(data_size), x4=ln(non_embedding_param_size).\n      Design features:\n        [1,\n         x1, x1^2,\n         x2, x2^2,\n         x3, x3^2,\n         x4, x4^2,\n         x3 * x4]\n      ln(loss) = Z \u00b7 w  \u2192 loss = exp(Z\u00b7w)\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: weights [w0\u2026w9]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4           # data \u00d7 model\u2010size interaction\n    ])                   # shape (N,10)\n\n    ln_pred = Z.dot(p)   # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law by ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is constructed as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # (N,4)\n    lnY = np.log(np.clip(y, eps, None))   # (N,)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (scale \u03bb by average diag for stability)\n    G = Z.T.dot(Z)\n    diag_mean = np.mean(np.diag(G))\n    lambd = 1e-6 * max(1.0, diag_mean)\n    G.flat[::11] += lambd   # add \u03bb to diagonal of (10\u00d710) matrix\n\n    # normal equations\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(G, b)   # shape (10,)\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "91ed7ac7-3a9b-497d-877b-f3b2df84b8ae", "generation": 3, "timestamp": 1754799423.0706553, "iteration_found": 45, "metrics": {"nmse": 82.10665049173558, "nmae": 12.23875040975977, "r2": -81.10665049173558, "combined_score": 0.012032731364855614}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 272.43726596146956, "nmae": 22.3728497763321, "r2": -271.43726596146956, "combined_score": 0.0036571459873392365}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 272.4373\n- nmae: 22.3728\n- r2: -271.4373\n- combined_score: 0.0037\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 165.0027, nmae: 17.3975, r2: -164.0027, combined_score: 0.0060\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.3497, nmae: 1.8601, r2: -2.3497, combined_score: 0.2299\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.7725)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # shape (N,4)\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    # features: [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4]\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial\u2010in\u2010log\u2010space scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))    # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))    # shape (N,)\n\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization for stability\n    num_feats = Z.shape[1]\n    lambd = 1e-4\n    A = Z.T.dot(Z)\n    A[np.diag_indices(num_feats)] += lambd\n    b = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.3497), Performs well on nmae (1.8601), Performs well on r2 (-2.3497), Performs well on combined_score (0.2299)\n\n\n### Program 2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n### Program 3 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (165.0027), Performs well on nmae (17.3975), Performs well on r2 (-164.0027), Performs well on combined_score (0.0060)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 5.6532)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using an enhanced power\u2010law model\n    with second\u2010order and interaction terms in log\u2010space.\n\n    Model (in log\u2010space):\n      Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n      Features z = [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n      ln(loss) = w \u00b7 z\n\n    Args:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embedding_param_size]\n      params:      array (8,) or (T,8) of weights [w0,\u2026,w7]\n    Returns:\n      preds:       array (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]        # shape (1,8)\n    T, P = p.shape\n    if P != 8:\n        raise ValueError(f\"params must have length 8, got {P}\")\n\n    # Log\u2010transform features safely\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # Build design matrix Z: [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:,0] = 1.0\n    Z[:,1] = x1\n    Z[:,2] = x1 * x1\n    Z[:,3] = x2\n    Z[:,4] = x2 * x2\n    Z[:,5] = x3\n    Z[:,6] = x4\n    Z[:,7] = x3 * x4\n\n    # Compute log\u2010predictions and back\u2010transform\n    lnY = Z.dot(p.T)      # (N,8) \u00b7 (8,T) \u2192 (N,T)\n    Y = np.exp(lnY)\n    return Y[:,0] if Y.shape[1] == 1 else Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space over features [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n\n    Args:\n      data_points: array (N,4) of hyperparameters\n      loss_values: array (N,) of LM losses\n    Returns:\n      params:      array (8,) of fitted weights [w0,\u2026,w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # Log\u2010transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n    lnY = np.log(np.clip(y, eps, None))  # (N,)\n\n    # Extract log\u2010features\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # Build design matrix Z\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:,0] = 1.0\n    Z[:,1] = x1\n    Z[:,2] = x1 * x1\n    Z[:,3] = x2\n    Z[:,4] = x2 * x2\n    Z[:,5] = x3\n    Z[:,6] = x4\n    Z[:,7] = x3 * x4\n\n    # Ridge\u2010regularized normal equations: (Z^T Z + \u03bbI) w = Z^T lnY\n    lambd = 1e-6\n    M = Z.T.dot(Z)\n    M.flat[::9] += lambd  # add \u03bb to diagonal\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)  # (8,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 4.6009)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss under a simple power\u2010law (log\u2013linear) model:\n      loss = exp(w0) * lr**w1 * bsz**w2 * data_size**w3 * param_size**w4\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (5,) array of [w0, w1, w2, w3, w4]\n    Returns:\n      preds:       (N,) array of predicted lm losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    # log features\n    X_log = np.log(X)\n    # linear combination in log\u2010space\n    # log_pred[i] = w0 + sum_{j=1..4} wj * X_log[i,j-1]\n    log_pred = params[0] + X_log.dot(params[1:])\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by solving\n      log(loss) = w0 + w1*log(lr) + w2*log(bsz) + w3*log(data_size) + w4*log(param_size)\n    via ridge\u2010regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of observed lm losses\n    Returns:\n      params:      (5,) array of fitted [w0, w1, w2, w3, w4]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n    # log\u2010transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n    N, F = X_log.shape  # F should be 4\n    # build design matrix [1 | X_log]\n    A = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # shape (N, F+1)\n    # ridge regularization for numerical stability\n    ridge = 1e-8\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(F + 1)\n    # solve (A^T A + \u03bbI) w = A^T y_log\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.7725, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an enhanced polynomial\u2010in\u2010log\u2010space scaling law:\n      ln(loss) \u2248 w0\n                 + w1\u00b7ln(lr) + w2\u00b7(ln(lr))^2\n                 + w3\u00b7ln(bsz) + w4\u00b7(ln(bsz))^2\n                 + w5\u00b7ln(data_size) + w6\u00b7(ln(data_size))^2\n                 + w7\u00b7ln(non_embed_param_size) + w8\u00b7(ln(non_embed_param_size))^2\n                 + w9\u00b7[ln(data_size) * ln(non_embed_param_size)]\n      loss = exp(ln(loss))\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: [w0, w1, ..., w9]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # shape (N,4)\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    # features: [1, x1, x1^2, x2, x2^2, x3, x3^2, x4, x4^2, x3*x4]\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    ln_pred = Z.dot(p)      # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced polynomial\u2010in\u2010log\u2010space scaling law by ridge regression in log\u2010space.\n\n    Solves:  ln(loss) \u2248 Z \u00b7 w,\n    where Z is built from log\u2010features as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))    # shape (N,4)\n    lnY = np.log(np.clip(y, eps, None))    # shape (N,)\n\n    x1, x2, x3, x4 = lnX[:, 0], lnX[:, 1], lnX[:, 2], lnX[:, 3]\n\n    # Build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])\n\n    # Ridge regularization for stability\n    num_feats = Z.shape[1]\n    lambd = 1e-4\n    A = Z.T.dot(Z)\n    A[np.diag_indices(num_feats)] += lambd\n    b = Z.T.dot(lnY)\n\n    # Solve for weights\n    w = np.linalg.solve(A, b)  # shape (10,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.350), Excellent nmae (1.860)\n\n\n### Inspiration 2 (Score: 6.4171, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with:\n      - quadratic term in log(lr),\n      - one interaction between log(lr) and log(param_size).\n    Features:\n      f0 = 1\n      f1 = log(lr)\n      f2 = [log(lr)]^2\n      f3 = log(bsz)\n      f4 = log(data_size)\n      f5 = log(non_embedding_param_size)\n      f6 = log(lr) * log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      (7,) array of feature weights [w0..w6]\n\n    Returns:\n      preds: (N,) array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model via ridge-regularized least squares:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                   + w4*log(data_size) + w5*log(param_size)\n                   + w6*log(lr)*log(param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: (N,) array of observed LM losses\n\n    Returns:\n      params: (7,) array of fitted weights [w0..w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n\n    # ridge regression: adapt regularization to feature scale\n    ATA = A.T.dot(A)\n    # scale regularization by average diagonal magnitude\n    ridge = 1e-3 * np.mean(np.diag(ATA))\n    ATy = A.T.dot(logy)\n    w = np.linalg.solve(ATA + ridge * np.eye(ATA.shape[0]), ATy)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (332.536), Excellent nmae (24.665)\n\n\n### Inspiration 3 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (165.003), Excellent nmae (17.397)\n\n\n### Inspiration 4 (Score: 4.6009, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nUsing a multiplicative power\u2010law form fit via linear regression in log\u2010space.\nModel form:\n    loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\nEquivalently in log\u2010space:\n    log(loss) \u2248 log(A) + a_lr * log(lr) + a_bsz * log(bsz)\n                   + a_data * log(data_size) + a_params * log(non_embed_params)\nThis form is numerically stable, parameter\u2010efficient, and fits in closed form.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:     1D array of length 5 (or 2D array of shape (T,5) for T separate fits)\n                    [ln_A, a_lr, a_bsz, a_data, a_params]\n    Returns:\n      preds:      array of shape (N,) (or (N,T) if params is 2D) of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must have shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,5)\n    T, P = p.shape\n    if P != X.shape[1] + 1:\n        raise ValueError(f\"params must have length {X.shape[1]+1}, got {P}\")\n    # log-transform features\n    # add a tiny epsilon to avoid log(0) if needed\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    intercept = p[:, 0]              # shape (T,)\n    slopes    = p[:, 1:]             # shape (T,4)\n    # compute log-prediction: (N,T) = (N,4) dot (4,T) + (T,)\n    lnY = lnX.dot(slopes.T) + intercept\n    Y = np.exp(lnY)\n    # if only one parameter set, simplify output to (N,)\n    if Y.shape[1] == 1:\n        return Y[:, 0]\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power law:\n      loss \u2248 A * lr^{a_lr} * bsz^{a_bsz} * data_size^{a_data} * non_embed_params^{a_params}\n    by linear regression in log-space with small ridge regularization.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 5:\n                     [ln_A, a_lr, a_bsz, a_data, a_params]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # log-transform inputs and targets (add eps to avoid log(0))\n    eps = 1e-12\n    lnX = np.log(X + eps)            # shape (N,4)\n    lnY = np.log(y + eps)            # shape (N,)\n    # build design matrix [1, ln(lr), ln(bsz), ln(data_size), ln(params)]\n    Z = np.concatenate([np.ones((N,1)), lnX], axis=1)  # shape (N,5)\n    # ridge regularization for numerical stability\n    lambd = 1e-6\n    # solve (Z^T Z + \u03bb I) w = Z^T lnY\n    M = Z.T.dot(Z) + lambd * np.eye(F+1)\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)        # shape (5,)\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Excellent nmse (165.003), Excellent nmae (17.397), Alternative r2 approach\n\n\n### Inspiration 5 (Score: 5.6532, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using an enhanced power\u2010law model\n    with second\u2010order and interaction terms in log\u2010space.\n\n    Model (in log\u2010space):\n      Let x1 = ln(lr), x2 = ln(bsz), x3 = ln(data_size), x4 = ln(non_embed_params).\n      Features z = [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n      ln(loss) = w \u00b7 z\n\n    Args:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embedding_param_size]\n      params:      array (8,) or (T,8) of weights [w0,\u2026,w7]\n    Returns:\n      preds:       array (N,) or (N,T) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]        # shape (1,8)\n    T, P = p.shape\n    if P != 8:\n        raise ValueError(f\"params must have length 8, got {P}\")\n\n    # Log\u2010transform features safely\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # Build design matrix Z: [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4]\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:,0] = 1.0\n    Z[:,1] = x1\n    Z[:,2] = x1 * x1\n    Z[:,3] = x2\n    Z[:,4] = x2 * x2\n    Z[:,5] = x3\n    Z[:,6] = x4\n    Z[:,7] = x3 * x4\n\n    # Compute log\u2010predictions and back\u2010transform\n    lnY = Z.dot(p.T)      # (N,8) \u00b7 (8,T) \u2192 (N,T)\n    Y = np.exp(lnY)\n    return Y[:,0] if Y.shape[1] == 1 else Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space over features [1, x1, x1^2, x2, x2^2, x3, x4, x3*x4].\n\n    Args:\n      data_points: array (N,4) of hyperparameters\n      loss_values: array (N,) of LM losses\n    Returns:\n      params:      array (8,) of fitted weights [w0,\u2026,w7]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # Log\u2010transform inputs and targets\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # (N,4)\n    lnY = np.log(np.clip(y, eps, None))  # (N,)\n\n    # Extract log\u2010features\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # Build design matrix Z\n    N = X.shape[0]\n    Z = np.empty((N, 8), dtype=float)\n    Z[:,0] = 1.0\n    Z[:,1] = x1\n    Z[:,2] = x1 * x1\n    Z[:,3] = x2\n    Z[:,4] = x2 * x2\n    Z[:,5] = x3\n    Z[:,6] = x4\n    Z[:,7] = x3 * x4\n\n    # Ridge\u2010regularized normal equations: (Z^T Z + \u03bbI) w = Z^T lnY\n    lambd = 1e-6\n    M = Z.T.dot(Z)\n    M.flat[::9] += lambd  # add \u03bb to diagonal\n    v = Z.T.dot(lnY)\n    w = np.linalg.solve(M, v)  # (8,)\n\n    return w\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (255.239), Excellent nmae (21.609)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a log-linear power-law plus one interaction term:\n      log(loss) \u2248 w0\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(param_size)\n                  + w5*(log(data_size)*log(param_size) / 100)\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,) array of [w0, w1, w2, w3, w4, w5]\n    Returns:\n      preds:        (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # Log-transform\n    X_log = np.log(X)\n    lr_log    = X_log[:, 0]\n    bsz_log   = X_log[:, 1]\n    data_log  = X_log[:, 2]\n    param_log = X_log[:, 3]\n\n    # Add one scaled interaction term to capture joint capacity/data effect\n    interaction = (data_log * param_log) / 100.0\n\n    # Unpack parameters\n    w0, w1, w2, w3, w4, w5 = params\n\n    # Compute log\u2010prediction\n    log_pred = (\n        w0\n        + w1 * lr_log\n        + w2 * bsz_log\n        + w3 * data_log\n        + w4 * param_log\n        + w5 * interaction\n    )\n\n    # Return back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the model via regularized least squares:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*log(bsz)\n                  + w3*log(data_size) + w4*log(param_size)\n                  + w5*(log(data_size)*log(param_size)/100)\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,)   array of LM losses\n    Returns:\n      params:      (6,)   array of fitted [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform features\n    X_log    = np.log(X)\n    lr_log   = X_log[:, 0]\n    bsz_log  = X_log[:, 1]\n    data_log = X_log[:, 2]\n    param_log= X_log[:, 3]\n\n    # Build the single interaction term\n    interaction = (data_log * param_log) / 100.0\n\n    # Design matrix: [1, lr_log, bsz_log, data_log, param_log, interaction]\n    A = np.vstack([\n        np.ones_like(lr_log),\n        lr_log,\n        bsz_log,\n        data_log,\n        param_log,\n        interaction\n    ]).T\n\n    # Target in log\u2010space\n    y_log = np.log(y)\n\n    # Regularize for numerical stability\n    ridge = 1e-6\n    ATA = A.T.dot(A)\n    reg  = ridge * np.eye(ATA.shape[0])\n\n    # Solve (A^T A + \u03bbI) w = A^T y_log\n    w = np.linalg.solve(ATA + reg, A.T.dot(y_log))\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a polynomial\u2010in\u2010log\u2010space scaling law with interaction:\n      Let x1=ln(lr), x2=ln(bsz), x3=ln(data_size), x4=ln(non_embedding_param_size).\n      Design features:\n        [1,\n         x1, x1^2,\n         x2, x2^2,\n         x3, x3^2,\n         x4, x4^2,\n         x3 * x4]\n      ln(loss) = Z \u00b7 w  \u2192 loss = exp(Z\u00b7w)\n\n    Args:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10: weights [w0\u2026w9]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 10:\n        raise ValueError(f\"params must have length 10, got {p.size}\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))  # shape (N,4)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),   # bias\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4           # data \u00d7 model\u2010size interaction\n    ])                   # shape (N,10)\n\n    ln_pred = Z.dot(p)   # shape (N,)\n    return np.exp(ln_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the polynomial\u2010in\u2010log scaling law by ridge\u2010regularized least squares:\n      ln(loss) \u2248 Z \u00b7 w,\n    where Z is constructed as in scaling_law_func.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 10: the fitted weights w\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"data_points must be of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # safe log\u2010transform\n    eps = 1e-12\n    lnX = np.log(np.clip(X, eps, None))   # (N,4)\n    lnY = np.log(np.clip(y, eps, None))   # (N,)\n    x1, x2, x3, x4 = lnX[:,0], lnX[:,1], lnX[:,2], lnX[:,3]\n\n    # build design matrix Z (N\u00d710)\n    Z = np.column_stack([\n        np.ones_like(x1),\n        x1, x1**2,\n        x2, x2**2,\n        x3, x3**2,\n        x4, x4**2,\n        x3 * x4\n    ])  # shape (N,10)\n\n    # ridge regularization (scale \u03bb by average diag for stability)\n    G = Z.T.dot(Z)\n    diag_mean = np.mean(np.diag(G))\n    lambd = 1e-6 * max(1.0, diag_mean)\n    G.flat[::11] += lambd   # add \u03bb to diagonal of (10\u00d710) matrix\n\n    # normal equations\n    b = Z.T.dot(lnY)\n    w = np.linalg.solve(G, b)   # shape (10,)\n    return w\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Switched to a richer polynomial\u2010in\u2010log feature set to capture non\u2010linear and interaction effects without exploding parameter count (10 weights).\n- Performed all operations in log\u2010space for numerical stability and interpretability.\n- Applied ridge\u2010regularization scaled by the average diagonal of (Z\u1d40Z) to stabilize fitting across different feature magnitudes.\n- Added rigorous input validation to catch shape mismatches early.\n- Entirely vectorized implementation for efficiency.\n- The resulting form remains simple to fit with limited data yet flexible enough to generalize across hyperparameter scales."]}}}