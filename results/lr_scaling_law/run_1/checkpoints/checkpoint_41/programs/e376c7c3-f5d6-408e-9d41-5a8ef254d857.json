{"id": "e376c7c3-f5d6-408e-9d41-5a8ef254d857", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a floor + multiplicative power-law model:\n        loss \u2248 loss_floor + exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                         # (N,4)\n\n    loss_floor = float(params[0])            # scalar \u2265 0\n    intercept  = float(params[1])            # scalar\n    weights    = np.asarray(params[2:], dtype=np.float64)  # (4,)\n\n    # compute log-scale prediction and map back\n    log_pred = intercept + logX.dot(weights)  # (N,)\n    return loss_floor + np.exp(log_pred)      # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the floor + power-law model in two stages:\n      1) Log-space ridge regression to init intercept & weights.\n      2) Robust least-squares refinement (Huber loss) to solve for floor too.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [\n                loss_floor,\n                intercept,\n                w_lr,\n                w_bsz,\n                w_data_size,\n                w_param_size\n              ]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG-SPACE REGRESSION (ignore floor)\n    logX = np.log(X)       # (N,4)\n    logy = np.log(y)       # (N,)\n\n    N, F = logX.shape      # F == 4\n    ones = np.ones((N,1), dtype=np.float64)\n    design = np.hstack([ones, logX])  # (N,5)\n\n    # small ridge for stability, no penalty on intercept\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I  # (5,5)\n    b = design.T.dot(logy)                     # (5,)\n\n    # solve for [intercept, w_lr, w_bsz, w_data, w_param]\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]  # shape (4,)\n\n    # initial floor ~ half of min(y), clipped to [0, min(y)]\n    floor_init = float(max(0.0, min(y) * 0.5))\n\n    x0 = np.concatenate([[floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [float(min(y))] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=2000\n        )\n        params_opt = res.x\n    except Exception:\n        params_opt = x0\n\n    return np.asarray(params_opt, dtype=np.float64)\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7b396df4-588c-46b8-9c36-244d9440f552", "generation": 2, "timestamp": 1754717090.1469886, "iteration_found": 26, "metrics": {"nmse": 0.4122751066216344, "nmae": 0.5598350287244938, "r2": 0.5877248933783656, "combined_score": 0.7080773394017715}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3938917157917785, "nmae": 0.5087149307815435, "r2": 0.6061082842082215, "combined_score": 0.7174158427593248}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: Evaluation failed or timed out.\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4123, nmae: 0.5598, r2: 0.5877, combined_score: 0.7081\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5565)\n```python\n\"\"\"\nImproved scaling law discovery using a log\u2010log linear model with ridge regression.\nThis implementation is more parsimonious (5 parameters vs. 2F+1), numerically stable,\nand fits in closed form without iterative optimization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept) * lr^{w0} * bsz^{w1} * data_size^{w2} * param_size^{w3}\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) or (T,5), where each row is\n                    [intercept, w_lr, w_bsz, w_data_size, w_param_size]\n\n    Returns:\n      preds: array of shape (N,) if params is (5,),\n             or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0) by clipping to a small positive value\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # Ensure p has shape (T,5)\n    if p.ndim == 1:\n        p = p[None, :]   # shape (1,5)\n    T, P = p.shape\n    if P != logX.shape[1] + 1:\n        raise ValueError(f\"Expected params with {logX.shape[1]+1} columns, got {P}\")\n\n    intercept = p[:, 0]         # shape (T,)\n    weights   = p[:, 1:]        # shape (T,4)\n\n    # Compute log\u2010predictions: (N, T) = ones(N,1)*intercept + logX dot weights^T\n    # First term: broadcast intercept over N\n    log_pred = intercept[None, :] + logX.dot(weights.T)  # (N,T)\n\n    # Map back to original scale\n    loss_pred = np.exp(log_pred)  # (N,T)\n\n    # If only one parameter set, return 1D array\n    return loss_pred[:, 0] if loss_pred.shape[1] == 1 else loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log\u2010log space with small ridge:\n        log(loss) \u2248 intercept + w0*log(lr) + w1*log(bsz) + w2*log(data_size) + w3*log(param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data_size, w_param_size]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Build log\u2010log design matrix\n    logX = np.log(X)      # (N,4)\n    logy = np.log(y)      # (N,)\n\n    N, F = logX.shape     # F should be 4\n    # Design: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack((ones, logX))  # (N,5)\n\n    # Ridge regularization matrix: do not penalize intercept (first entry)\n    lambda_reg = 1e-6\n    reg = np.eye(F+1, dtype=np.float64) * lambda_reg\n    reg[0, 0] = 0.0\n\n    # Solve normal equations: (X^T X + reg) p = X^T logy\n    A = design.T.dot(design) + reg   # (5,5)\n    b = design.T.dot(logy)           # (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)   # (5,)\n\n    return params\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n### Program 2 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.4123), Performs well on nmae (0.5598), Performs well on r2 (0.5877), Performs well on combined_score (0.7081)\n\n\n### Program 3 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: Evaluation failed or timed out.)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n\"\"\"\nImproved scaling law discovery using a log\u2010log linear model with ridge regression.\nThis implementation is more parsimonious (5 parameters vs. 2F+1), numerically stable,\nand fits in closed form without iterative optimization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept) * lr^{w0} * bsz^{w1} * data_size^{w2} * param_size^{w3}\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) or (T,5), where each row is\n                    [intercept, w_lr, w_bsz, w_data_size, w_param_size]\n\n    Returns:\n      preds: array of shape (N,) if params is (5,),\n             or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0) by clipping to a small positive value\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # shape (N,4)\n\n    p = np.asarray(params, dtype=np.float64)\n    # Ensure p has shape (T,5)\n    if p.ndim == 1:\n        p = p[None, :]   # shape (1,5)\n    T, P = p.shape\n    if P != logX.shape[1] + 1:\n        raise ValueError(f\"Expected params with {logX.shape[1]+1} columns, got {P}\")\n\n    intercept = p[:, 0]         # shape (T,)\n    weights   = p[:, 1:]        # shape (T,4)\n\n    # Compute log\u2010predictions: (N, T) = ones(N,1)*intercept + logX dot weights^T\n    # First term: broadcast intercept over N\n    log_pred = intercept[None, :] + logX.dot(weights.T)  # (N,T)\n\n    # Map back to original scale\n    loss_pred = np.exp(log_pred)  # (N,T)\n\n    # If only one parameter set, return 1D array\n    return loss_pred[:, 0] if loss_pred.shape[1] == 1 else loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log\u2010log space with small ridge:\n        log(loss) \u2248 intercept + w0*log(lr) + w1*log(bsz) + w2*log(data_size) + w3*log(param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data_size, w_param_size]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Build log\u2010log design matrix\n    logX = np.log(X)      # (N,4)\n    logy = np.log(y)      # (N,)\n\n    N, F = logX.shape     # F should be 4\n    # Design: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack((ones, logX))  # (N,5)\n\n    # Ridge regularization matrix: do not penalize intercept (first entry)\n    lambda_reg = 1e-6\n    reg = np.eye(F+1, dtype=np.float64) * lambda_reg\n    reg[0, 0] = 0.0\n\n    # Solve normal equations: (X^T X + reg) p = X^T logy\n    A = design.T.dot(design) + reg   # (5,5)\n    b = design.T.dot(logy)           # (5,)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)   # (5,)\n\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a floor + multiplicative power-law model:\n        loss \u2248 loss_floor + exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                         # (N,4)\n\n    loss_floor = float(params[0])            # scalar \u2265 0\n    intercept  = float(params[1])            # scalar\n    weights    = np.asarray(params[2:], dtype=np.float64)  # (4,)\n\n    # compute log-scale prediction and map back\n    log_pred = intercept + logX.dot(weights)  # (N,)\n    return loss_floor + np.exp(log_pred)      # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the floor + power-law model in two stages:\n      1) Log-space ridge regression to init intercept & weights.\n      2) Robust least-squares refinement (Huber loss) to solve for floor too.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [\n                loss_floor,\n                intercept,\n                w_lr,\n                w_bsz,\n                w_data_size,\n                w_param_size\n              ]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG-SPACE REGRESSION (ignore floor)\n    logX = np.log(X)       # (N,4)\n    logy = np.log(y)       # (N,)\n\n    N, F = logX.shape      # F == 4\n    ones = np.ones((N,1), dtype=np.float64)\n    design = np.hstack([ones, logX])  # (N,5)\n\n    # small ridge for stability, no penalty on intercept\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I  # (5,5)\n    b = design.T.dot(logy)                     # (5,)\n\n    # solve for [intercept, w_lr, w_bsz, w_data, w_param]\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]  # shape (4,)\n\n    # initial floor ~ half of min(y), clipped to [0, min(y)]\n    floor_init = float(max(0.0, min(y) * 0.5))\n\n    x0 = np.concatenate([[floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [float(min(y))] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=2000\n        )\n        params_opt = res.x\n    except Exception:\n        params_opt = x0\n\n    return np.asarray(params_opt, dtype=np.float64)\n\n# EVOLVE-BLOCK-END\n```"]}}}