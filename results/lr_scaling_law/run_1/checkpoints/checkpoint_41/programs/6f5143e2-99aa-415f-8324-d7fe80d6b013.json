{"id": "6f5143e2-99aa-415f-8324-d7fe80d6b013", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended multiplicative\n    power-law model with curvature and interaction terms:\n\n      log(loss) \u2248 intercept\n                   + w_lr * log(lr)\n                   + w_bsz * log(bsz)\n                   + w_data * log(data_size)\n                   + w_param * log(param_size)\n                   + w_lr_bsz * [log(lr)*log(bsz)]\n                   + w_data_param * [log(data_size)*log(param_size)]\n                   + w_data2 * [log(data_size)]^2\n                   + w_param2 * [log(param_size)]^2\n\n    Features:\n      x0 = 1\n      x1 = log(lr)\n      x2 = log(bsz)\n      x3 = log(data_size)\n      x4 = log(param_size)\n      x5 = log(lr)*log(bsz)\n      x6 = log(data_size)*log(param_size)\n      x7 = (log(data_size))^2\n      x8 = (log(param_size))^2\n\n    params: array of shape (9,)\n      [intercept,\n       w_lr, w_bsz, w_data, w_param,\n       w_lr_bsz, w_data_param,\n       w_data2, w_param2]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid non-positive\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions & curvature\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n    sq_data          = log_data * log_data\n    sq_param         = log_param * log_param\n\n    # unpack params\n    (intercept,\n     w_lr, w_bsz, w_data, w_param,\n     w_lr_bsz, w_data_param,\n     w_data2, w_param2) = params\n\n    # linear predictor in log-space\n    log_pred = (\n        intercept\n        + w_lr          * log_lr\n        + w_bsz         * log_bsz\n        + w_data        * log_data\n        + w_param       * log_param\n        + w_lr_bsz      * inter_lr_bsz\n        + w_data_param  * inter_data_param\n        + w_data2       * sq_data\n        + w_param2      * sq_param\n    )\n\n    # numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power-law model in log-space via ridge + Huber-IRLS.\n\n    Model:\n      log(loss) \u2248 Z @ params\n\n    where Z has columns:\n      [1,\n       log(lr),\n       log(bsz),\n       log(data_size),\n       log(param_size),\n       log(lr)*log(bsz),\n       log(data_size)*log(param_size),\n       (log(data_size))^2,\n       (log(param_size))^2]\n\n    Steps:\n      1) Build Z, logy.\n      2) Closed-form ridge solve to initialize.\n      3) 5 iterations of Huber-weighted IRLS in log-space.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid non-positive\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log-features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n    sq_data          = log_data * log_data\n    sq_param         = log_param * log_param\n\n    # stack design matrix Z: shape (N,9)\n    N = X.shape[0]\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_param,\n        sq_data,\n        sq_param\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = Z.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # initial closed-form solve: (Z^T Z + \u03bbI) p = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * I\n    b = Z.T.dot(logy)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback\n        params, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n\n    # Huber-IRLS in log-space\n    c = 1.0  # Huber threshold\n    for _ in range(5):\n        r = Z.dot(params) - logy\n        abs_r = np.abs(r)\n        # Huber weights: 1 for |r|<=c, c/|r| else\n        w = np.where(abs_r <= c, 1.0, c / abs_r)\n        sqrt_w = np.sqrt(w)\n        Zw = Z * sqrt_w[:, None]\n        yw = logy * sqrt_w\n        A_w = Zw.T.dot(Zw) + lambda_reg * I\n        b_w = Zw.T.dot(yw)\n        try:\n            params = np.linalg.solve(A_w, b_w)\n        except np.linalg.LinAlgError:\n            params, *_ = np.linalg.lstsq(A_w, b_w, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "93a2c8e6-da3c-4d6d-904d-eb990ab8e61f", "generation": 2, "timestamp": 1754717194.9934523, "iteration_found": 37, "metrics": {"nmse": 0.22121124445826795, "nmae": 0.4265430391141736, "r2": 0.7787887555417321, "combined_score": 0.8188591486836516}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: Evaluation failed or timed out.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3728, nmae: 0.4902, r2: 0.6272, combined_score: 0.7284\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3456, nmae: 0.4742, r2: 0.6544, combined_score: 0.7431\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5543)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,)\n                   [intercept,\n                    w_lr, w_bsz, w_data, w_param,\n                    w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid <= 0\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # two interaction features\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack parameters\n    intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param = params\n\n    # linear predictor in log-space\n    log_pred = (\n        intercept\n        + w_lr          * log_lr\n        + w_bsz         * log_bsz\n        + w_data        * log_data\n        + w_param       * log_param\n        + w_lr_bsz      * inter_lr_bsz\n        + w_data_param  * inter_data_param\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by Huber\u2010weighted IRLS in log\u2010space\n    with two interaction terms.\n\n    Model:\n      log(loss) \u2248 intercept \n                  + w_lr * log(lr) \n                  + w_bsz * log(bsz)\n                  + w_data * log(data_size)\n                  + w_param * log(non_embedding_param_size)\n                  + w_lr_bsz * [log(lr) * log(bsz)]\n                  + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n\n    We build the design matrix Z of shape (N,7) and run\n    1) one ridge\u2010regularized LS solve to initialize,\n    2) then 3 Huber IRLS steps to down\u2010weight outliers.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros / negatives for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log\u2010features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # stack design matrix Z: shape (N,7)\n    N = X.shape[0]\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_param\n    ])\n\n    # target in log\u2010space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = Z.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # initial closed\u2010form solve\n    A0 = Z.T.dot(Z) + lambda_reg * I\n    b0 = Z.T.dot(logy)\n    params = np.linalg.solve(A0, b0)\n\n    # Huber threshold\n    c = 1.0\n\n    # IRLS iterations\n    for _ in range(3):\n        # residuals r_i = predicted - observed\n        r = Z.dot(params) - logy\n        abs_r = np.abs(r)\n        # Huber weights: w=1 for |r|<=c, w=c/|r| otherwise\n        w = np.where(abs_r <= c, 1.0, c / abs_r)\n        # form weighted Z and y\n        sqrt_w = np.sqrt(w)\n        Zw = Z * sqrt_w[:, None]\n        yw = logy * sqrt_w\n        # weighted ridge solve\n        A = Zw.T.dot(Zw) + lambda_reg * I\n        b = Zw.T.dot(yw)\n        params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3456), Performs well on nmae (0.4742), Performs well on r2 (0.6544), Performs well on combined_score (0.7431)\n\n\n### Program 2 (Score: 0.5547)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept \n                    + w_lr*log(lr) \n                    + w_bsz*log(bsz) \n                    + w_data*log(data_size) \n                    + w_param*log(param_size) \n                    + w_dp*log(data_size)*log(param_size))\n    where x = [lr, bsz, data_size, non_embedding_param_size] and\n    params = [intercept, w_lr, w_bsz, w_data, w_param, w_dp].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                               # (N,4)\n    # unpack\n    log_lr    = logX[:, 0]\n    log_bsz   = logX[:, 1]\n    log_data  = logX[:, 2]\n    log_param = logX[:, 3]\n    # interaction term\n    cross_dp = log_data * log_param                                # (N,)\n\n    # build design matrix [1, log_lr, log_bsz, log_data, log_param, cross_dp]\n    N = X.shape[0]\n    design = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        cross_dp\n    ])                                                               # (N,6)\n\n    p = np.asarray(params, dtype=np.float64).ravel()               # (6,)\n    log_pred = design.dot(p)                                       # (N,)\n    preds = np.exp(log_pred)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power-law with a data_size\u00d7param_size interaction:\n        log(loss) \u2248 intercept \n                    + w_lr*log(lr) \n                    + w_bsz*log(bsz) \n                    + w_data*log(data_size) \n                    + w_param*log(param_size) \n                    + w_dp*log(data_size)*log(param_size).\n    Solved via ridge\u2010regularized normal equations for stability.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    # unpack\n    log_lr    = logX[:, 0]\n    log_bsz   = logX[:, 1]\n    log_data  = logX[:, 2]\n    log_param = logX[:, 3]\n    cross_dp  = log_data * log_param                              # (N,)\n\n    # build design matrix [1, log_lr, log_bsz, log_data, log_param, cross_dp]\n    N = X.shape[0]\n    design = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        cross_dp\n    ])                                                               # (N,6)\n\n    # ridge regularization (do not penalize intercept)\n    D = design.shape[1]  # 6\n    lambda_reg = 1e-6\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I                     # (6,6)\n    b = design.T.dot(logy)                                        # (6,)\n\n    try:\n        params = np.linalg.solve(A, b)                            # (6,)\n    except np.linalg.LinAlgError:\n        # fallback to least squares on original design\n        params, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3728), Performs well on nmae (0.4902), Performs well on r2 (0.6272), Performs well on combined_score (0.7284)\n\n\n### Program 3 (Score: 0.5565)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)         # (4,)\n\n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # numerical stability: clip log_pred to avoid overflow/underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n\n    # map back to original scale\n    preds = np.exp(log_pred)                                     # (N,)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space with feature\n    normalization and ridge regularization:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # take logs\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    N, F = logX.shape   # F should be 4\n\n    # normalize features for numeric stability\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    sigma[sigma < eps] = 1.0\n\n    Z = (logX - mu) / sigma                                       # (N,4)\n\n    # build design matrix [1, z1, z2, z3, z4]\n    ones = np.ones((N, 1), dtype=np.float64)\n    D = np.hstack([ones, Z])                                      # (N,5)\n\n    # ridge regularization (do not penalize intercept)\n    lam = 1e-3\n    P = F + 1\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations: (D^T D + \u03bbI) p_z = D^T logy\n    A = D.T.dot(D) + lam * I                                      # (5,5)\n    b = D.T.dot(logy)                                             # (5,)\n\n    # solve for normalized-parameter vector p_z = [p0, p1, ..., p4]\n    p_z = np.linalg.solve(A, b)                                   # (5,)\n\n    # convert back to original weights: w_i = p_z[i+1] / sigma[i]\n    weights = p_z[1:] / sigma                                     # (4,)\n    # intercept adjustment: p_z[0] - \u03a3_i (w_i * mu_i)\n    intercept = p_z[0] - np.dot(weights, mu)\n\n    # pack params for scaling_law_func\n    params = np.empty(F + 1, dtype=np.float64)\n    params[0]  = intercept\n    params[1:] = weights\n\n    return params\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5543, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,)\n                   [intercept,\n                    w_lr, w_bsz, w_data, w_param,\n                    w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip to avoid <= 0\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # two interaction features\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack parameters\n    intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param = params\n\n    # linear predictor in log-space\n    log_pred = (\n        intercept\n        + w_lr          * log_lr\n        + w_bsz         * log_bsz\n        + w_data        * log_data\n        + w_param       * log_param\n        + w_lr_bsz      * inter_lr_bsz\n        + w_data_param  * inter_data_param\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by Huber\u2010weighted IRLS in log\u2010space\n    with two interaction terms.\n\n    Model:\n      log(loss) \u2248 intercept \n                  + w_lr * log(lr) \n                  + w_bsz * log(bsz)\n                  + w_data * log(data_size)\n                  + w_param * log(non_embedding_param_size)\n                  + w_lr_bsz * [log(lr) * log(bsz)]\n                  + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n\n    We build the design matrix Z of shape (N,7) and run\n    1) one ridge\u2010regularized LS solve to initialize,\n    2) then 3 Huber IRLS steps to down\u2010weight outliers.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros / negatives for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log\u2010features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # stack design matrix Z: shape (N,7)\n    N = X.shape[0]\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_param\n    ])\n\n    # target in log\u2010space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = Z.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # initial closed\u2010form solve\n    A0 = Z.T.dot(Z) + lambda_reg * I\n    b0 = Z.T.dot(logy)\n    params = np.linalg.solve(A0, b0)\n\n    # Huber threshold\n    c = 1.0\n\n    # IRLS iterations\n    for _ in range(3):\n        # residuals r_i = predicted - observed\n        r = Z.dot(params) - logy\n        abs_r = np.abs(r)\n        # Huber weights: w=1 for |r|<=c, w=c/|r| otherwise\n        w = np.where(abs_r <= c, 1.0, c / abs_r)\n        # form weighted Z and y\n        sqrt_w = np.sqrt(w)\n        Zw = Z * sqrt_w[:, None]\n        yw = logy * sqrt_w\n        # weighted ridge solve\n        A = Zw.T.dot(Zw) + lambda_reg * I\n        b = Zw.T.dot(yw)\n        params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended multiplicative\n    power-law model with curvature and interaction terms:\n\n      log(loss) \u2248 intercept\n                   + w_lr * log(lr)\n                   + w_bsz * log(bsz)\n                   + w_data * log(data_size)\n                   + w_param * log(param_size)\n                   + w_lr_bsz * [log(lr)*log(bsz)]\n                   + w_data_param * [log(data_size)*log(param_size)]\n                   + w_data2 * [log(data_size)]^2\n                   + w_param2 * [log(param_size)]^2\n\n    Features:\n      x0 = 1\n      x1 = log(lr)\n      x2 = log(bsz)\n      x3 = log(data_size)\n      x4 = log(param_size)\n      x5 = log(lr)*log(bsz)\n      x6 = log(data_size)*log(param_size)\n      x7 = (log(data_size))^2\n      x8 = (log(param_size))^2\n\n    params: array of shape (9,)\n      [intercept,\n       w_lr, w_bsz, w_data, w_param,\n       w_lr_bsz, w_data_param,\n       w_data2, w_param2]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid non-positive\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions & curvature\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n    sq_data          = log_data * log_data\n    sq_param         = log_param * log_param\n\n    # unpack params\n    (intercept,\n     w_lr, w_bsz, w_data, w_param,\n     w_lr_bsz, w_data_param,\n     w_data2, w_param2) = params\n\n    # linear predictor in log-space\n    log_pred = (\n        intercept\n        + w_lr          * log_lr\n        + w_bsz         * log_bsz\n        + w_data        * log_data\n        + w_param       * log_param\n        + w_lr_bsz      * inter_lr_bsz\n        + w_data_param  * inter_data_param\n        + w_data2       * sq_data\n        + w_param2      * sq_param\n    )\n\n    # numerical stability\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power-law model in log-space via ridge + Huber-IRLS.\n\n    Model:\n      log(loss) \u2248 Z @ params\n\n    where Z has columns:\n      [1,\n       log(lr),\n       log(bsz),\n       log(data_size),\n       log(param_size),\n       log(lr)*log(bsz),\n       log(data_size)*log(param_size),\n       (log(data_size))^2,\n       (log(param_size))^2]\n\n    Steps:\n      1) Build Z, logy.\n      2) Closed-form ridge solve to initialize.\n      3) 5 iterations of Huber-weighted IRLS in log-space.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid non-positive\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log-features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n    sq_data          = log_data * log_data\n    sq_param         = log_param * log_param\n\n    # stack design matrix Z: shape (N,9)\n    N = X.shape[0]\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_param,\n        sq_data,\n        sq_param\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = Z.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # initial closed-form solve: (Z^T Z + \u03bbI) p = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * I\n    b = Z.T.dot(logy)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback\n        params, *_ = np.linalg.lstsq(Z, logy, rcond=None)\n\n    # Huber-IRLS in log-space\n    c = 1.0  # Huber threshold\n    for _ in range(5):\n        r = Z.dot(params) - logy\n        abs_r = np.abs(r)\n        # Huber weights: 1 for |r|<=c, c/|r| else\n        w = np.where(abs_r <= c, 1.0, c / abs_r)\n        sqrt_w = np.sqrt(w)\n        Zw = Z * sqrt_w[:, None]\n        yw = logy * sqrt_w\n        A_w = Zw.T.dot(Zw) + lambda_reg * I\n        b_w = Zw.T.dot(yw)\n        try:\n            params = np.linalg.solve(A_w, b_w)\n        except np.linalg.LinAlgError:\n            params, *_ = np.linalg.lstsq(A_w, b_w, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}