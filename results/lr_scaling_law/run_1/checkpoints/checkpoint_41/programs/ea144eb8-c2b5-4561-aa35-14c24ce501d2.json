{"id": "ea144eb8-c2b5-4561-aa35-14c24ce501d2", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6-parameter scaling law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embed_param_size^{e_N}\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6: [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute the multiplicative term in log\u2010space for stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_D   * np.log(D) \\\n             + e_N   * np.log(Np)\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    eps = 1e-12\n\n    # Preliminary linear fit in log-space to get a good initial guess\n    y_min, y_max = y.min(), y.max()\n    b0 = max(0.0, y_min * 0.9)\n    z = np.clip(y - b0, eps, None)\n    Y = np.log(z)\n    logs = np.log(X + eps)                     # shape (N,4)\n    A_design = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,5)\n    theta_lin, *_ = np.linalg.lstsq(A_design, Y, rcond=None)\n    # two initializations\n    init1 = np.zeros(6, dtype=float)\n    init1[0]    = b0\n    init1[1:]   = theta_lin  # [logA, e_lr, e_bsz, e_D, e_N]\n    init2 = np.array([\n        0.0,\n        np.log(max(y.mean(), eps)),\n        -0.5, -0.5, -0.5, -0.5\n    ], dtype=float)\n\n    # bounds: b in [0,2*max(y)], logA unrestricted, exponents in [-5,5]\n    bounds = [\n        (0.0, max(y_max * 2, 1.0)),\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n    ]\n\n    # objective and gradient for L-BFGS-B\n    def obj_and_grad(p):\n        preds = scaling_law_func(X, p)\n        resid = preds - y\n        loss = np.mean(resid**2)\n        # compute gradient\n        b, logA, e_lr, e_bsz, e_D, e_N = p\n        lr   = X[:, 0] + eps\n        bsz  = X[:, 1] + eps\n        D    = X[:, 2] + eps\n        Np   = X[:, 3] + eps\n        log_lr   = np.log(lr)\n        log_bsz  = np.log(bsz)\n        log_D    = np.log(D)\n        log_Np   = np.log(Np)\n        term = np.exp(logA + e_lr*log_lr + e_bsz*log_bsz + e_D*log_D + e_N*log_Np)\n        # gradients\n        g_b     = 2.0 * np.mean(resid)\n        g_logA  = 2.0 * np.mean(resid * term)\n        g_e_lr  = 2.0 * np.mean(resid * term * log_lr)\n        g_e_bsz = 2.0 * np.mean(resid * term * log_bsz)\n        g_e_D   = 2.0 * np.mean(resid * term * log_D)\n        g_e_N   = 2.0 * np.mean(resid * term * log_Np)\n        grad = np.array([g_b, g_logA, g_e_lr, g_e_bsz, g_e_D, g_e_N], dtype=float)\n        return loss, grad\n\n    best_params = None\n    best_loss = np.inf\n    # multi-start\n    for p0 in (init1, init2):\n        res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                       x0=p0,\n                       jac=lambda p: obj_and_grad(p)[1],\n                       bounds=bounds,\n                       method='L-BFGS-B')\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n    # fallback\n    if best_params is None:\n        best_params = init1\n    return best_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "9a81cea8-615f-4277-a427-d842e678f65b", "generation": 2, "timestamp": 1754803129.688724, "iteration_found": 33, "metrics": {"nmse": 6.800499246346561, "nmae": 3.1947530729705242, "r2": -5.800499246346561, "combined_score": 0.12819692284033737}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 112.98815363180442, "nmae": 14.128417620529426, "r2": -111.98815363180442, "combined_score": 0.008772841458860026}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 112.9882\n- nmae: 14.1284\n- r2: -111.9882\n- combined_score: 0.0088\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.3359, nmae: 1.0419, r2: -0.3359, combined_score: 0.4281\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6175)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power\u2010law plus bias.\n    data_points: (N,4) array with [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    # Log\u2010features for stability\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D    + eps)\n    log_Np  = np.log(Np   + eps)\n    # Build log\u2010term and exponentiate\n    log_term = logA \\\n             + e_lr  * log_lr \\\n             + e_bsz * log_bsz \\\n             + e_D   * log_D \\\n             + e_N   * log_Np\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n    Returns params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target y: returns (T,6) array if loss_values is (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n\n    # Ensure 2D y\u2010matrix\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, F = X.shape\n    # Precompute log\u2010features once\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4): [log(lr), log(bsz), log(D), log(Np)]\n\n    def _fit_single(y_vec):\n        y_min, y_max = y_vec.min(), y_vec.max()\n\n        # Estimate a small offset for bias term b\n        b0 = max(0.0, y_min - 0.1 * (y_max - y_min))\n\n        # Prepare design matrix for a quick linear init in log\u2010space:\n        # A @ theta \u2248 log(y_vec - b0)\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n        z = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        y_log = np.log(z)\n\n        # Ridge\u2010regularized OLS: theta = (A^T A + \u03bbI)^-1 A^T y_log\n        lam = 1e-6\n        ATA = A.T.dot(A) + lam * np.eye(F+1)\n        ATy = A.T.dot(y_log)\n        theta = np.linalg.solve(ATA, ATy)  # shape (5,)\n\n        # Build two initial guesses for full 6\u2010param fit\n        init_lin = np.zeros(6)\n        init_lin[0] = b0\n        init_lin[1:] = theta  # logA, e_lr, e_bsz, e_D, e_N\n\n        init_alt = np.array([\n            b0,\n            np.log(max(y_vec.mean(), eps)),\n            -0.5, -0.5, -0.5, -0.5\n        ], dtype=float)\n\n        # Bounds: b in [0,y_max], logA unrestricted, exponents in [-10,10]\n        bounds = [(0.0, y_max), (None, None)] + [(-10.0, 10.0)] * 4\n\n        best_params = None\n        best_loss = np.inf\n\n        # Objective + gradient for L-BFGS-B\n        def obj_and_grad(p):\n            b, logA, e_lr, e_bsz, e_D, e_N = p\n            # compute log\u2010term and exp\n            log_term = (\n                logA\n                + e_lr  * logX[:, 0]\n                + e_bsz * logX[:, 1]\n                + e_D   * logX[:, 2]\n                + e_N   * logX[:, 3]\n            )\n            term = np.exp(log_term)\n            pred = b + term\n            resid = pred - y_vec\n            loss = np.mean(resid ** 2)\n            # gradients\n            grad = np.empty(6, dtype=float)\n            grad[0] = 2.0 * np.mean(resid)                # d/db\n            grad[1] = 2.0 * np.mean(resid * term)         # d/dlogA\n            # derivatives w.r.t exponents\n            grad[2] = 2.0 * np.mean(resid * term * logX[:, 0])\n            grad[3] = 2.0 * np.mean(resid * term * logX[:, 1])\n            grad[4] = 2.0 * np.mean(resid * term * logX[:, 2])\n            grad[5] = 2.0 * np.mean(resid * term * logX[:, 3])\n            return loss, grad\n\n        # Multi\u2010start optimization\n        for p0 in (init_lin, init_alt):\n            res = minimize(\n                fun=lambda p: obj_and_grad(p)[0],\n                x0=p0,\n                jac=lambda p: obj_and_grad(p)[1],\n                bounds=bounds,\n                method='L-BFGS-B'\n            )\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback if optimization fails\n        if best_params is None:\n            best_params = init_lin\n\n        return best_params\n\n    # Fit each target dimension\n    params_list = [ _fit_single(y_mat[:, i]) for i in range(y_mat.shape[1]) ]\n    params_arr = np.vstack(params_list)\n    return params_arr[0] if params_arr.shape[0] == 1 else params_arr\n```\nKey features: Performs well on nmse (1.3359), Performs well on nmae (1.0419), Performs well on r2 (-0.3359), Performs well on combined_score (0.4281)\n\n\n### Program 2 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n### Program 3 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6175, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power\u2010law plus bias.\n    data_points: (N,4) array with [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    # Log\u2010features for stability\n    log_lr  = np.log(lr  + eps)\n    log_bsz = np.log(bsz + eps)\n    log_D   = np.log(D    + eps)\n    log_Np  = np.log(Np   + eps)\n    # Build log\u2010term and exponentiate\n    log_term = logA \\\n             + e_lr  * log_lr \\\n             + e_bsz * log_bsz \\\n             + e_D   * log_D \\\n             + e_N   * log_Np\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter multiplicative scaling law to minimize MSE.\n    Returns params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    Supports multi\u2010target y: returns (T,6) array if loss_values is (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n\n    # Ensure 2D y\u2010matrix\n    if y.ndim == 1:\n        y_mat = y[:, None]\n    else:\n        y_mat = y\n    N, F = X.shape\n    # Precompute log\u2010features once\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4): [log(lr), log(bsz), log(D), log(Np)]\n\n    def _fit_single(y_vec):\n        y_min, y_max = y_vec.min(), y_vec.max()\n\n        # Estimate a small offset for bias term b\n        b0 = max(0.0, y_min - 0.1 * (y_max - y_min))\n\n        # Prepare design matrix for a quick linear init in log\u2010space:\n        # A @ theta \u2248 log(y_vec - b0)\n        A = np.concatenate([np.ones((N,1)), logX], axis=1)  # (N,5)\n        z = np.clip(y_vec - b0, a_min=eps, a_max=None)\n        y_log = np.log(z)\n\n        # Ridge\u2010regularized OLS: theta = (A^T A + \u03bbI)^-1 A^T y_log\n        lam = 1e-6\n        ATA = A.T.dot(A) + lam * np.eye(F+1)\n        ATy = A.T.dot(y_log)\n        theta = np.linalg.solve(ATA, ATy)  # shape (5,)\n\n        # Build two initial guesses for full 6\u2010param fit\n        init_lin = np.zeros(6)\n        init_lin[0] = b0\n        init_lin[1:] = theta  # logA, e_lr, e_bsz, e_D, e_N\n\n        init_alt = np.array([\n            b0,\n            np.log(max(y_vec.mean(), eps)),\n            -0.5, -0.5, -0.5, -0.5\n        ], dtype=float)\n\n        # Bounds: b in [0,y_max], logA unrestricted, exponents in [-10,10]\n        bounds = [(0.0, y_max), (None, None)] + [(-10.0, 10.0)] * 4\n\n        best_params = None\n        best_loss = np.inf\n\n        # Objective + gradient for L-BFGS-B\n        def obj_and_grad(p):\n            b, logA, e_lr, e_bsz, e_D, e_N = p\n            # compute log\u2010term and exp\n            log_term = (\n                logA\n                + e_lr  * logX[:, 0]\n                + e_bsz * logX[:, 1]\n                + e_D   * logX[:, 2]\n                + e_N   * logX[:, 3]\n            )\n            term = np.exp(log_term)\n            pred = b + term\n            resid = pred - y_vec\n            loss = np.mean(resid ** 2)\n            # gradients\n            grad = np.empty(6, dtype=float)\n            grad[0] = 2.0 * np.mean(resid)                # d/db\n            grad[1] = 2.0 * np.mean(resid * term)         # d/dlogA\n            # derivatives w.r.t exponents\n            grad[2] = 2.0 * np.mean(resid * term * logX[:, 0])\n            grad[3] = 2.0 * np.mean(resid * term * logX[:, 1])\n            grad[4] = 2.0 * np.mean(resid * term * logX[:, 2])\n            grad[5] = 2.0 * np.mean(resid * term * logX[:, 3])\n            return loss, grad\n\n        # Multi\u2010start optimization\n        for p0 in (init_lin, init_alt):\n            res = minimize(\n                fun=lambda p: obj_and_grad(p)[0],\n                x0=p0,\n                jac=lambda p: obj_and_grad(p)[1],\n                bounds=bounds,\n                method='L-BFGS-B'\n            )\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback if optimization fails\n        if best_params is None:\n            best_params = init_lin\n\n        return best_params\n\n    # Fit each target dimension\n    params_list = [ _fit_single(y_mat[:, i]) for i in range(y_mat.shape[1]) ]\n    params_arr = np.vstack(params_list)\n    return params_arr[0] if params_arr.shape[0] == 1 else params_arr\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.336), Excellent nmae (1.042)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a 6-parameter scaling law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_embed_param_size^{e_N}\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 6: [b, logA, e_lr, e_bsz, e_D, e_N]\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # compute the multiplicative term in log\u2010space for stability\n    log_term = logA \\\n             + e_lr  * np.log(lr) \\\n             + e_bsz * np.log(bsz) \\\n             + e_D   * np.log(D) \\\n             + e_N   * np.log(Np)\n    term = np.exp(log_term)\n    return b + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_D, e_N]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    eps = 1e-12\n\n    # Preliminary linear fit in log-space to get a good initial guess\n    y_min, y_max = y.min(), y.max()\n    b0 = max(0.0, y_min * 0.9)\n    z = np.clip(y - b0, eps, None)\n    Y = np.log(z)\n    logs = np.log(X + eps)                     # shape (N,4)\n    A_design = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,5)\n    theta_lin, *_ = np.linalg.lstsq(A_design, Y, rcond=None)\n    # two initializations\n    init1 = np.zeros(6, dtype=float)\n    init1[0]    = b0\n    init1[1:]   = theta_lin  # [logA, e_lr, e_bsz, e_D, e_N]\n    init2 = np.array([\n        0.0,\n        np.log(max(y.mean(), eps)),\n        -0.5, -0.5, -0.5, -0.5\n    ], dtype=float)\n\n    # bounds: b in [0,2*max(y)], logA unrestricted, exponents in [-5,5]\n    bounds = [\n        (0.0, max(y_max * 2, 1.0)),\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n    ]\n\n    # objective and gradient for L-BFGS-B\n    def obj_and_grad(p):\n        preds = scaling_law_func(X, p)\n        resid = preds - y\n        loss = np.mean(resid**2)\n        # compute gradient\n        b, logA, e_lr, e_bsz, e_D, e_N = p\n        lr   = X[:, 0] + eps\n        bsz  = X[:, 1] + eps\n        D    = X[:, 2] + eps\n        Np   = X[:, 3] + eps\n        log_lr   = np.log(lr)\n        log_bsz  = np.log(bsz)\n        log_D    = np.log(D)\n        log_Np   = np.log(Np)\n        term = np.exp(logA + e_lr*log_lr + e_bsz*log_bsz + e_D*log_D + e_N*log_Np)\n        # gradients\n        g_b     = 2.0 * np.mean(resid)\n        g_logA  = 2.0 * np.mean(resid * term)\n        g_e_lr  = 2.0 * np.mean(resid * term * log_lr)\n        g_e_bsz = 2.0 * np.mean(resid * term * log_bsz)\n        g_e_D   = 2.0 * np.mean(resid * term * log_D)\n        g_e_N   = 2.0 * np.mean(resid * term * log_Np)\n        grad = np.array([g_b, g_logA, g_e_lr, g_e_bsz, g_e_D, g_e_N], dtype=float)\n        return loss, grad\n\n    best_params = None\n    best_loss = np.inf\n    # multi-start\n    for p0 in (init1, init2):\n        res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                       x0=p0,\n                       jac=lambda p: obj_and_grad(p)[1],\n                       bounds=bounds,\n                       method='L-BFGS-B')\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n    # fallback\n    if best_params is None:\n        best_params = init1\n    return best_params\n# EVOLVE-BLOCK-END\n```"]}}}