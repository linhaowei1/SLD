{"id": "20237b84-4d6c-43ed-8b74-04f18d77fecf", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      loss \u2248 b\n           + exp(\n               logA\n             + e_lr1 * ln(lr)\n             + e_lr2 * (ln(lr))^2\n             + e_bsz * ln(bsz)\n             + e_data * ln(data_size)\n             + e_model * ln(non_embedding_param_size)\n           )\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (7,) array [b, logA, e_lr1, e_lr2, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n    # Unpack parameters\n    b, logA, e_lr1, e_lr2, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # Stabilize inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # Compute log-terms\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(D)\n    log_mod  = np.log(Np)\n    # Composite log\n    log_term = (\n        logA\n        + e_lr1 * log_lr\n        + e_lr2 * (log_lr ** 2)\n        + e_bsz * log_bsz\n        + e_data * log_data\n        + e_model * log_mod\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE with analytic gradients.\n    Returns parameter array [b, logA, e_lr1, e_lr2, e_bsz, e_data, e_model].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    N = X.shape[0]\n    # Precompute logs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(D)\n    log_mod  = np.log(Np)\n\n    # Statistics for initialization\n    y_min, y_max = np.min(y), np.max(y)\n    # Init #1: bias ~ half min(y), logA from mean residual\n    b0 = max(0.0, 0.5 * y_min)\n    logA0 = np.log(max(eps, np.mean(y) - b0))\n    init1 = np.array([b0, logA0, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=np.float64)\n    # Init #2: heuristic to capture U-shape in lr\n    init2 = np.array([\n        0.0,                          # b\n        np.log(max(eps, y_max)),     # logA\n        -0.5,                         # e_lr1\n         0.1,                         # e_lr2\n        -0.1,                         # e_bsz\n        -0.1,                         # e_data\n        -0.1                          # e_model\n    ], dtype=np.float64)\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0,        max(y_max, 1.0)),  # b \u2265 0\n        (None,       None),             # logA\n        (-5.0,       5.0),              # e_lr1\n        (-5.0,       5.0),              # e_lr2\n        (-5.0,       5.0),              # e_bsz\n        (-5.0,       5.0),              # e_data\n        (-5.0,       5.0),              # e_model\n    ]\n\n    # Objective and gradient\n    def obj_grad(p):\n        b, logA, e1, e2, e3, e4, e5 = p\n        # log_term and prediction\n        log_t = (\n            logA\n            + e1 * log_lr\n            + e2 * (log_lr ** 2)\n            + e3 * log_bsz\n            + e4 * log_data\n            + e5 * log_mod\n        )\n        t = np.exp(log_t)\n        pred = b + t\n        resid = pred - y\n        mse = np.mean(resid ** 2)\n        # gradients\n        grad = np.zeros_like(p)\n        # \u2202/\u2202b\n        grad[0] = 2.0 * np.mean(resid)\n        # common factor for chain rule\n        common = (2.0 / N) * resid * t\n        # \u2202/\u2202logA\n        grad[1] = np.sum(common)\n        # \u2202/\u2202e1 (lr linear)\n        grad[2] = np.dot(common, log_lr)\n        # \u2202/\u2202e2 (lr^2)\n        grad[3] = np.dot(common, log_lr ** 2)\n        # \u2202/\u2202e3 (bsz)\n        grad[4] = np.dot(common, log_bsz)\n        # \u2202/\u2202e4 (data)\n        grad[5] = np.dot(common, log_data)\n        # \u2202/\u2202e5 (model)\n        grad[6] = np.dot(common, log_mod)\n        return mse, grad\n\n    best_params = None\n    best_loss = np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                fun=lambda p: obj_grad(p)[0],\n                x0=init,\n                jac=lambda p: obj_grad(p)[1],\n                bounds=bounds,\n                method=\"L-BFGS-B\",\n                options={\"maxiter\": 1000, \"ftol\": 1e-12}\n            )\n        except Exception:\n            continue\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # Fallback to first init if optimization failed\n    return best_params if best_params is not None else init1\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c7042ff3-afc6-4200-893c-2e2c07504a39", "generation": 1, "timestamp": 1754803098.591632, "iteration_found": 31, "metrics": {"nmse": 40.02973170947732, "nmae": 8.396614147053139, "r2": -39.02973170947732, "combined_score": 0.024372569800865}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 6.864183563024163e+28, "nmae": 350621078612143.2, "r2": -6.864183563024163e+28, "combined_score": 1.4568374968682053e-29}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 68641835630241626816321159168.0000\n- nmae: 350621078612143.1875\n- r2: -68641835630241626816321159168.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 65.3476, nmae: 10.7352, r2: -64.3476, combined_score: 0.0151\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 39.8372, nmae: 8.3760, r2: -38.8372, combined_score: 0.0245\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 33.6132, nmae: 7.6154, r2: -32.6132, combined_score: 0.0289\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1611)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias, multiplicative power\u2010law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = params\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    # log_term = logA + \u03a3 e_i * log(x_i)\n    log_term = (\n        logA\n        + e_lr   * logX[:, 0]\n        + e_bsz  * logX[:, 1]\n        + e_data * logX[:, 2]\n        + e_model* logX[:, 3]\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error with L-BFGS-B and analytic gradients.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    eps = 1e-12\n    N = X.shape[0]\n    logX = np.log(X + eps)  # precompute logs\n\n    # Simple statistics for initialization and bounds\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n\n    # Init #1: closed\u2010form least\u2010squares on log(y - b0)\n    b0 = max(0.0, 0.5 * y_min)\n    Z = np.clip(y - b0, a_min=eps, a_max=None)\n    A = np.concatenate((np.ones((N, 1)), logX), axis=1)  # (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A, np.log(Z), rcond=None)  # (5,)\n    init1 = np.hstack((b0, theta_ls))  # [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    # Init #2: heuristic fallback\n    init2 = np.array([\n        max(0.0, 0.5 * y_min),       # b\n        np.log(max(np.mean(y), eps)),# logA\n        0.0, 0.0, 0.0, 0.0           # exponents\n    ], dtype=float)\n\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0, y_min),      # b \u2208 [0, min(y)]\n        (None, None),      # logA unbounded\n        (-5.0, 5.0),       # e_lr\n        (-5.0, 5.0),       # e_bsz\n        (-5.0, 5.0),       # e_data\n        (-5.0, 5.0),       # e_model\n    ]\n\n    # Objective + analytic gradient\n    def obj_and_grad(p):\n        b, logA, e1, e2, e3, e4 = p\n        # compute log_term and prediction\n        log_t = (\n            logA\n            + e1 * logX[:, 0]\n            + e2 * logX[:, 1]\n            + e3 * logX[:, 2]\n            + e4 * logX[:, 3]\n        )\n        t = np.exp(log_t)\n        pred = b + t\n        resid = pred - y\n        # MSE\n        loss = np.mean(resid ** 2)\n        # gradients\n        grad = np.zeros_like(p)\n        grad[0] = 2.0 * np.mean(resid)                      # \u2202/\u2202b\n        common = (2.0 / N) * resid * t                      # shared term\n        grad[1] = np.sum(common)                            # \u2202/\u2202logA\n        grad[2] = np.dot(common, logX[:, 0])                # \u2202/\u2202e1\n        grad[3] = np.dot(common, logX[:, 1])                # \u2202/\u2202e2\n        grad[4] = np.dot(common, logX[:, 2])                # \u2202/\u2202e3\n        grad[5] = np.dot(common, logX[:, 3])                # \u2202/\u2202e4\n        return loss, grad\n\n    best_params, best_loss = None, np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                fun=lambda p: obj_and_grad(p)[0],\n                x0=init,\n                jac=lambda p: obj_and_grad(p)[1],\n                bounds=bounds,\n                method=\"L-BFGS-B\",\n                options={\"maxiter\": 1000, \"ftol\": 1e-12}\n            )\n        except Exception:\n            continue\n        if res.success and res.fun < best_loss:\n            best_loss, best_params = res.fun, res.x\n\n    # fallback if no run succeeded\n    return best_params if best_params is not None else init1\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (33.6132), Performs well on nmae (7.6154), Performs well on r2 (-32.6132), Performs well on combined_score (0.0289)\n\n\n### Program 2 (Score: 2.3501)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Loss \u2248 b\n           + exp(\n               logA\n             + e_bsz   * ln(batch_size)\n             + e_data  * ln(data_size)\n             + e_model * ln(non_embedding_param_size)\n             + e_lr1   * ln(lr)\n             + e_lr2   * (ln(lr))^2\n             )\n    This adds a quadratic term in log(lr) to capture the typical U-shaped\n    dependence on learning rate while retaining simple power-law\n    dependencies on the other inputs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # unpack parameters\n    b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2 = np.asarray(params, dtype=np.float64).ravel()\n\n    # unpack and stabilize inputs\n    lr   = X[:, 0] + 1e-12\n    bsz  = X[:, 1] + 1e-12\n    D    = X[:, 2] + 1e-12\n    Np   = X[:, 3] + 1e-12\n\n    # compute the composite log-term\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(Np)\n        + e_lr1   * log_lr\n        + e_lr2   * (log_lr ** 2)\n    )\n\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE with L-BFGS-B.\n    Returns:\n      params: array of length 7 [b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Quick stats for sensible init\n    y_min, y_max = np.min(y), np.max(y)\n\n    # Two diverse initializations to improve convergence\n    init1 = np.array([\n        max(0.0, 0.5 * y_min),       # bias b\n        np.log(max(1e-3, y_max - y_min)),  # logA\n        -0.1,  # e_bsz\n        -0.1,  # e_data\n        -0.1,  # e_model\n         0.0,  # e_lr1\n         0.0   # e_lr2\n    ], dtype=np.float64)\n\n    init2 = np.array([\n         0.0,                       # bias b\n         np.log(max(1e-3, y_max)),  # logA\n        -1.0,  # e_bsz\n        -0.5,  # e_data\n        -0.5,  # e_model\n        -1.0,  # e_lr1\n         1.0   # e_lr2\n    ], dtype=np.float64)\n\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0,       max(1.0, 2.0 * y_max)),  # b \u2265 0\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n        (-5.0,      5.0),                    # e_lr1\n        (-5.0,      5.0)                     # e_lr2\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective,\n                       init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 1000})\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # Fallback if optimization fails\n    if best_params is None:\n        best_params = init1.copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (39.8372), Performs well on nmae (8.3760), Performs well on r2 (-38.8372), Performs well on combined_score (0.0245)\n\n\n### Program 3 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (65.3476), Performs well on nmae (10.7352), Performs well on r2 (-64.3476), Performs well on combined_score (0.0151)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.7843)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 2.9376)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 2.1611, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via an additive\u2010bias, multiplicative power\u2010law:\n      loss \u2248 b + exp(logA) * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_data} * non_embed^{e_model}\n\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    b, logA, e_lr, e_bsz, e_data, e_model = params\n    eps = 1e-12\n    logX = np.log(X + eps)  # shape (N,4)\n    # log_term = logA + \u03a3 e_i * log(x_i)\n    log_term = (\n        logA\n        + e_lr   * logX[:, 0]\n        + e_bsz  * logX[:, 1]\n        + e_data * logX[:, 2]\n        + e_model* logX[:, 3]\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law [b, logA, e_lr, e_bsz, e_data, e_model]\n    by minimizing mean squared error with L-BFGS-B and analytic gradients.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    eps = 1e-12\n    N = X.shape[0]\n    logX = np.log(X + eps)  # precompute logs\n\n    # Simple statistics for initialization and bounds\n    y_min, y_max = float(np.min(y)), float(np.max(y))\n\n    # Init #1: closed\u2010form least\u2010squares on log(y - b0)\n    b0 = max(0.0, 0.5 * y_min)\n    Z = np.clip(y - b0, a_min=eps, a_max=None)\n    A = np.concatenate((np.ones((N, 1)), logX), axis=1)  # (N,5)\n    theta_ls, *_ = np.linalg.lstsq(A, np.log(Z), rcond=None)  # (5,)\n    init1 = np.hstack((b0, theta_ls))  # [b, logA, e_lr, e_bsz, e_data, e_model]\n\n    # Init #2: heuristic fallback\n    init2 = np.array([\n        max(0.0, 0.5 * y_min),       # b\n        np.log(max(np.mean(y), eps)),# logA\n        0.0, 0.0, 0.0, 0.0           # exponents\n    ], dtype=float)\n\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0, y_min),      # b \u2208 [0, min(y)]\n        (None, None),      # logA unbounded\n        (-5.0, 5.0),       # e_lr\n        (-5.0, 5.0),       # e_bsz\n        (-5.0, 5.0),       # e_data\n        (-5.0, 5.0),       # e_model\n    ]\n\n    # Objective + analytic gradient\n    def obj_and_grad(p):\n        b, logA, e1, e2, e3, e4 = p\n        # compute log_term and prediction\n        log_t = (\n            logA\n            + e1 * logX[:, 0]\n            + e2 * logX[:, 1]\n            + e3 * logX[:, 2]\n            + e4 * logX[:, 3]\n        )\n        t = np.exp(log_t)\n        pred = b + t\n        resid = pred - y\n        # MSE\n        loss = np.mean(resid ** 2)\n        # gradients\n        grad = np.zeros_like(p)\n        grad[0] = 2.0 * np.mean(resid)                      # \u2202/\u2202b\n        common = (2.0 / N) * resid * t                      # shared term\n        grad[1] = np.sum(common)                            # \u2202/\u2202logA\n        grad[2] = np.dot(common, logX[:, 0])                # \u2202/\u2202e1\n        grad[3] = np.dot(common, logX[:, 1])                # \u2202/\u2202e2\n        grad[4] = np.dot(common, logX[:, 2])                # \u2202/\u2202e3\n        grad[5] = np.dot(common, logX[:, 3])                # \u2202/\u2202e4\n        return loss, grad\n\n    best_params, best_loss = None, np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                fun=lambda p: obj_and_grad(p)[0],\n                x0=init,\n                jac=lambda p: obj_and_grad(p)[1],\n                bounds=bounds,\n                method=\"L-BFGS-B\",\n                options={\"maxiter\": 1000, \"ftol\": 1e-12}\n            )\n        except Exception:\n            continue\n        if res.success and res.fun < best_loss:\n            best_loss, best_params = res.fun, res.x\n\n    # fallback if no run succeeded\n    return best_params if best_params is not None else init1\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (33.613), Excellent nmae (7.615)\n\n\n### Inspiration 2 (Score: 2.3501, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Loss \u2248 b\n           + exp(\n               logA\n             + e_bsz   * ln(batch_size)\n             + e_data  * ln(data_size)\n             + e_model * ln(non_embedding_param_size)\n             + e_lr1   * ln(lr)\n             + e_lr2   * (ln(lr))^2\n             )\n    This adds a quadratic term in log(lr) to capture the typical U-shaped\n    dependence on learning rate while retaining simple power-law\n    dependencies on the other inputs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # unpack parameters\n    b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2 = np.asarray(params, dtype=np.float64).ravel()\n\n    # unpack and stabilize inputs\n    lr   = X[:, 0] + 1e-12\n    bsz  = X[:, 1] + 1e-12\n    D    = X[:, 2] + 1e-12\n    Np   = X[:, 3] + 1e-12\n\n    # compute the composite log-term\n    log_lr = np.log(lr)\n    log_term = (\n        logA\n        + e_bsz   * np.log(bsz)\n        + e_data  * np.log(D)\n        + e_model * np.log(Np)\n        + e_lr1   * log_lr\n        + e_lr2   * (log_lr ** 2)\n    )\n\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE with L-BFGS-B.\n    Returns:\n      params: array of length 7 [b, logA, e_bsz, e_data, e_model, e_lr1, e_lr2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Quick stats for sensible init\n    y_min, y_max = np.min(y), np.max(y)\n\n    # Two diverse initializations to improve convergence\n    init1 = np.array([\n        max(0.0, 0.5 * y_min),       # bias b\n        np.log(max(1e-3, y_max - y_min)),  # logA\n        -0.1,  # e_bsz\n        -0.1,  # e_data\n        -0.1,  # e_model\n         0.0,  # e_lr1\n         0.0   # e_lr2\n    ], dtype=np.float64)\n\n    init2 = np.array([\n         0.0,                       # bias b\n         np.log(max(1e-3, y_max)),  # logA\n        -1.0,  # e_bsz\n        -0.5,  # e_data\n        -0.5,  # e_model\n        -1.0,  # e_lr1\n         1.0   # e_lr2\n    ], dtype=np.float64)\n\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0,       max(1.0, 2.0 * y_max)),  # b \u2265 0\n        (None,      None),                   # logA unbounded\n        (-5.0,      5.0),                    # e_bsz\n        (-5.0,      5.0),                    # e_data\n        (-5.0,      5.0),                    # e_model\n        (-5.0,      5.0),                    # e_lr1\n        (-5.0,      5.0)                     # e_lr2\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    best_params = None\n    best_loss = np.inf\n\n    for init in inits:\n        res = minimize(objective,\n                       init,\n                       method='L-BFGS-B',\n                       bounds=bounds,\n                       options={'maxiter': 1000})\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # Fallback if optimization fails\n    if best_params is None:\n        best_params = init1.copy()\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (39.837), Excellent nmae (8.376)\n\n\n### Inspiration 3 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 4 (Score: 3.7843, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      Loss = exp( \u03b80 + \u03b81*log(lr) + \u03b82*log(bsz)\n                  + \u03b83*log(data_size) + \u03b84*log(non_embedding_param_size) )\n    data_points: (N,4) array [lr, bsz, data_size, non_embed_param_size]\n    params:      length\u20105 array [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84]\n    returns     length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects 4 features, got {X.shape[1]}\")\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != 5:\n        raise ValueError(f\"scaling_law_func expects params of length 5, got {theta.size}\")\n    # Avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)            # shape (N,4)\n    log_pred = theta[0] + logs.dot(theta[1:])  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 5 parameters [\u03b80\u2026\u03b84] by least\u2010squares on log(Loss).\n    Solves:  log(y) \u2243 \u03b80 + \u03b81*log(lr) + \u2026 + \u03b84*log(param_size)\n    Returns: length\u20105 array \u03b8\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects 4 features, got {X.shape[1]}\")\n    # Build design matrix A = [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    eps = 1e-12\n    Z = np.log(X + eps)                           # (N,4)\n    A = np.concatenate((np.ones((Z.shape[0],1)), Z), axis=1)  # (N,5)\n    y_log = np.log(y + eps)                       # (N,)\n    # Closed\u2010form LS solution for \u03b8\n    theta, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (112.988), Excellent nmae (14.128)\n\n\n### Inspiration 5 (Score: 2.9376, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\nModel: loss \u2248 b + A * lr^{e_lr} * bsz^{e_bsz} * data_size^{e_D} * non_emb_p{e_N}\nwith A = exp(logA), fitted via bounded L-BFGS-B from multiple starts.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss given hyperparameters via a multiplicative power law plus bias.\n    data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    params: (6,) array [b, logA, e_lr, e_bsz, e_data, e_model]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    Np   = X[:, 3]\n    b, logA, e_lr, e_bsz, e_D, e_N = params\n    # Numerical stability epsilon\n    eps = 1e-12\n    # Compute log-term for stability: log_term = logA + e_lr*ln(lr) + ...\n    log_term = (\n        logA\n        + e_lr  * np.log(lr  + eps)\n        + e_bsz * np.log(bsz + eps)\n        + e_D   * np.log(D    + eps)\n        + e_N   * np.log(Np   + eps)\n    )\n    term = np.exp(log_term)\n    return b + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter multiplicative scaling law to minimize MSE.\n    Returns optimized params: [b, logA, e_lr, e_bsz, e_data, e_model]\n    If multi-target loss_values given (shape N\u00d7T), returns array (T,6).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Ensure 2D output for possibly multi-target regression\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    def _fit_single(y_vec):\n        # Vector target y_vec of shape (N,)\n        y_min, y_max = np.min(y_vec), np.max(y_vec)\n        # Two reasonable initializations\n        init1 = np.array([max(0.0, y_min * 0.5), np.log(max(y_max - y_min, 1e-3)),\n                          -0.5, -0.5, -0.5, -0.5], dtype=float)\n        init2 = np.array([0.0, np.log(max(y_max, 1e-3)),\n                          -1.0, -1.0, -0.1, -0.1], dtype=float)\n        # Bounds: bias b in [0, 2*max(y)], logA unbounded, exponents in [-5,5]\n        bounds = [\n            (0.0, max(y_max * 2, 1.0)),\n            (None, None),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n            (-5.0, 5.0),\n        ]\n        best_params = None\n        best_loss = np.inf\n\n        # Objective: mean squared error\n        def obj(p):\n            pred = scaling_law_func(X, p)\n            return np.mean((pred - y_vec) ** 2)\n\n        # Try both initializations\n        for init in (init1, init2):\n            res = minimize(obj, init, method='L-BFGS-B', bounds=bounds)\n            if res.success and res.fun < best_loss:\n                best_loss = res.fun\n                best_params = res.x\n\n        # Fallback to init1 if all fails\n        return best_params if best_params is not None else init1\n\n    # Fit for each target dimension\n    if T == 1:\n        return _fit_single(y2d[:, 0])\n    else:\n        params_all = [ _fit_single(y2d[:, i]) for i in range(T) ]\n        return np.vstack(params_all)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (65.348), Excellent nmae (10.735)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      loss \u2248 b\n           + exp(\n               logA\n             + e_lr1 * ln(lr)\n             + e_lr2 * (ln(lr))^2\n             + e_bsz * ln(bsz)\n             + e_data * ln(data_size)\n             + e_model * ln(non_embedding_param_size)\n           )\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:      (7,) array [b, logA, e_lr1, e_lr2, e_bsz, e_data, e_model]\n    returns:     (N,) array of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func expects data_points shape (N,4), got {X.shape}\")\n    # Unpack parameters\n    b, logA, e_lr1, e_lr2, e_bsz, e_data, e_model = np.asarray(params, dtype=np.float64).ravel()\n    # Stabilize inputs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    # Compute log-terms\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(D)\n    log_mod  = np.log(Np)\n    # Composite log\n    log_term = (\n        logA\n        + e_lr1 * log_lr\n        + e_lr2 * (log_lr ** 2)\n        + e_bsz * log_bsz\n        + e_data * log_data\n        + e_model * log_mod\n    )\n    return b + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE with analytic gradients.\n    Returns parameter array [b, logA, e_lr1, e_lr2, e_bsz, e_data, e_model].\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"fit_scaling_law expects data_points shape (N,4), got {X.shape}\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    N = X.shape[0]\n    # Precompute logs\n    eps = 1e-12\n    lr   = X[:, 0] + eps\n    bsz  = X[:, 1] + eps\n    D    = X[:, 2] + eps\n    Np   = X[:, 3] + eps\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(D)\n    log_mod  = np.log(Np)\n\n    # Statistics for initialization\n    y_min, y_max = np.min(y), np.max(y)\n    # Init #1: bias ~ half min(y), logA from mean residual\n    b0 = max(0.0, 0.5 * y_min)\n    logA0 = np.log(max(eps, np.mean(y) - b0))\n    init1 = np.array([b0, logA0, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=np.float64)\n    # Init #2: heuristic to capture U-shape in lr\n    init2 = np.array([\n        0.0,                          # b\n        np.log(max(eps, y_max)),     # logA\n        -0.5,                         # e_lr1\n         0.1,                         # e_lr2\n        -0.1,                         # e_bsz\n        -0.1,                         # e_data\n        -0.1                          # e_model\n    ], dtype=np.float64)\n    inits = [init1, init2]\n\n    # Parameter bounds\n    bounds = [\n        (0.0,        max(y_max, 1.0)),  # b \u2265 0\n        (None,       None),             # logA\n        (-5.0,       5.0),              # e_lr1\n        (-5.0,       5.0),              # e_lr2\n        (-5.0,       5.0),              # e_bsz\n        (-5.0,       5.0),              # e_data\n        (-5.0,       5.0),              # e_model\n    ]\n\n    # Objective and gradient\n    def obj_grad(p):\n        b, logA, e1, e2, e3, e4, e5 = p\n        # log_term and prediction\n        log_t = (\n            logA\n            + e1 * log_lr\n            + e2 * (log_lr ** 2)\n            + e3 * log_bsz\n            + e4 * log_data\n            + e5 * log_mod\n        )\n        t = np.exp(log_t)\n        pred = b + t\n        resid = pred - y\n        mse = np.mean(resid ** 2)\n        # gradients\n        grad = np.zeros_like(p)\n        # \u2202/\u2202b\n        grad[0] = 2.0 * np.mean(resid)\n        # common factor for chain rule\n        common = (2.0 / N) * resid * t\n        # \u2202/\u2202logA\n        grad[1] = np.sum(common)\n        # \u2202/\u2202e1 (lr linear)\n        grad[2] = np.dot(common, log_lr)\n        # \u2202/\u2202e2 (lr^2)\n        grad[3] = np.dot(common, log_lr ** 2)\n        # \u2202/\u2202e3 (bsz)\n        grad[4] = np.dot(common, log_bsz)\n        # \u2202/\u2202e4 (data)\n        grad[5] = np.dot(common, log_data)\n        # \u2202/\u2202e5 (model)\n        grad[6] = np.dot(common, log_mod)\n        return mse, grad\n\n    best_params = None\n    best_loss = np.inf\n    for init in inits:\n        try:\n            res = minimize(\n                fun=lambda p: obj_grad(p)[0],\n                x0=init,\n                jac=lambda p: obj_grad(p)[1],\n                bounds=bounds,\n                method=\"L-BFGS-B\",\n                options={\"maxiter\": 1000, \"ftol\": 1e-12}\n            )\n        except Exception:\n            continue\n        if res.success and res.fun < best_loss:\n            best_loss = res.fun\n            best_params = res.x\n\n    # Fallback to first init if optimization failed\n    return best_params if best_params is not None else init1\n# EVOLVE-BLOCK-END\n```"]}}}