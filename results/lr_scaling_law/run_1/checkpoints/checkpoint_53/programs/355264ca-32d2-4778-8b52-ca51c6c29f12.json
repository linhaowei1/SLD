{"id": "355264ca-32d2-4778-8b52-ca51c6c29f12", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with:\n      - quadratic term in log(lr),\n      - one interaction between log(lr) and log(param_size).\n    Features:\n      f0 = 1\n      f1 = log(lr)\n      f2 = [log(lr)]^2\n      f3 = log(bsz)\n      f4 = log(data_size)\n      f5 = log(non_embedding_param_size)\n      f6 = log(lr) * log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      (7,) array of feature weights [w0..w6]\n\n    Returns:\n      preds: (N,) array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model via ridge-regularized least squares:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                   + w4*log(data_size) + w5*log(param_size)\n                   + w6*log(lr)*log(param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: (N,) array of observed LM losses\n\n    Returns:\n      params: (7,) array of fitted weights [w0..w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n\n    # ridge regression: adapt regularization to feature scale\n    ATA = A.T.dot(A)\n    # scale regularization by average diagonal magnitude\n    ridge = 1e-3 * np.mean(np.diag(ATA))\n    ATy = A.T.dot(logy)\n    w = np.linalg.solve(ATA + ridge * np.eye(ATA.shape[0]), ATy)\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "990fd79e-dce1-4b30-838c-c25f4a707cf8", "generation": 3, "timestamp": 1754799202.5332332, "iteration_found": 18, "metrics": {"nmse": 332.5362009211936, "nmae": 24.6652345071849, "r2": -331.5362009211936, "combined_score": 0.002998175302225366}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 163.09450549247182, "nmae": 17.229130245086917, "r2": -162.09450549247182, "combined_score": 0.006094049261423181}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to 429M parameters\n    - Training tokens (D) range: 50B to 100B tokens\n    - Learning rates range: ~2.4e-4 to 1.1e-2\n    - Batch sizes range: 32 to 2048\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 163.0945\n- nmae: 17.2291\n- r2: -162.0945\n- combined_score: 0.0061\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 163.0945, nmae: 17.2291, r2: -162.0945, combined_score: 0.0061\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.5588)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with a quadratic term for learning rate:\n      log(loss) = w0 \n                  + w1*log(lr) \n                  + w2*(log(lr))^2 \n                  + w3*log(bsz) \n                  + w4*log(data_size) \n                  + w5*log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # Log-transform inputs\n    X_log = np.log(X)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n\n    # Build design matrix with quadratic lr term\n    # columns = [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    lr_sq = lr * lr\n    A = np.hstack([\n        np.ones((X.shape[0], 1)),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n\n    # Linear prediction in log-space\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model:\n      log(loss) = w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz) + w4*log(data_size) + w5*log(param_size)\n    via ridge-regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n\n    Returns:\n      params: (6,) array of fitted [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    lr_sq    = lr * lr\n\n    # Build design matrix\n    A = np.hstack([\n        np.ones((X.shape[0], 1)),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n\n    # Closed-form ridge regression\n    ridge = 1e-6\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n    w = np.linalg.solve(ATA + reg, ATy)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (163.0945), Performs well on nmae (17.2291), Performs well on r2 (-162.0945), Performs well on combined_score (0.0061)\n\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with a quadratic term for learning rate:\n      log(loss) = w0 \n                  + w1*log(lr) \n                  + w2*(log(lr))^2 \n                  + w3*log(bsz) \n                  + w4*log(data_size) \n                  + w5*log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array of [lr, bsz, data_size, non_embedding_param_size]\n      params:      (6,) array [w0, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # Log-transform inputs\n    X_log = np.log(X)\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n\n    # Build design matrix with quadratic lr term\n    # columns = [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    lr_sq = lr * lr\n    A = np.hstack([\n        np.ones((X.shape[0], 1)),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n\n    # Linear prediction in log-space\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model:\n      log(loss) = w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz) + w4*log(data_size) + w5*log(param_size)\n    via ridge-regularized least squares.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of LM losses\n\n    Returns:\n      params: (6,) array of fitted [w0, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # Log-transform\n    X_log = np.log(X)\n    y_log = np.log(y)\n\n    lr       = X_log[:, 0:1]\n    bsz      = X_log[:, 1:2]\n    data_sz  = X_log[:, 2:3]\n    param_sz = X_log[:, 3:4]\n    lr_sq    = lr * lr\n\n    # Build design matrix\n    A = np.hstack([\n        np.ones((X.shape[0], 1)),\n        lr,\n        lr_sq,\n        bsz,\n        data_sz,\n        param_sz\n    ])\n\n    # Closed-form ridge regression\n    ridge = 1e-6\n    ATA = A.T.dot(A)\n    reg = ridge * np.eye(ATA.shape[0])\n    ATy = A.T.dot(y_log)\n    w = np.linalg.solve(ATA + reg, ATy)\n    return w\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an extended log\u2013linear model with:\n      - quadratic term in log(lr),\n      - one interaction between log(lr) and log(param_size).\n    Features:\n      f0 = 1\n      f1 = log(lr)\n      f2 = [log(lr)]^2\n      f3 = log(bsz)\n      f4 = log(data_size)\n      f5 = log(non_embedding_param_size)\n      f6 = log(lr) * log(non_embedding_param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      (7,) array of feature weights [w0..w6]\n\n    Returns:\n      preds: (N,) array of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n    log_pred = A.dot(params)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2013linear model via ridge-regularized least squares:\n      log(loss) \u2248 w0 + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                   + w4*log(data_size) + w5*log(param_size)\n                   + w6*log(lr)*log(param_size)\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      loss_values: (N,) array of observed LM losses\n\n    Returns:\n      params: (7,) array of fitted weights [w0..w6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # numerical safeguard\n    eps = 1e-12\n    X = np.clip(X, eps, None)\n    y = np.clip(y, eps, None)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n    lr       = logX[:, 0]\n    bsz      = logX[:, 1]\n    data_sz  = logX[:, 2]\n    param_sz = logX[:, 3]\n\n    # build feature matrix\n    f0 = np.ones_like(lr)\n    f1 = lr\n    f2 = lr * lr\n    f3 = bsz\n    f4 = data_sz\n    f5 = param_sz\n    f6 = lr * param_sz\n\n    A = np.stack([f0, f1, f2, f3, f4, f5, f6], axis=1)\n\n    # ridge regression: adapt regularization to feature scale\n    ATA = A.T.dot(A)\n    # scale regularization by average diagonal magnitude\n    ridge = 1e-3 * np.mean(np.diag(ATA))\n    ATy = A.T.dot(logy)\n    w = np.linalg.solve(ATA + ridge * np.eye(ATA.shape[0]), ATy)\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}