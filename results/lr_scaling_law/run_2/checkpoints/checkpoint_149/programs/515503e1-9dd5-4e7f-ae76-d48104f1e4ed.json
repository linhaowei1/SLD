{"id": "515503e1-9dd5-4e7f-ae76-d48104f1e4ed", "code": "import numpy as np\n\n# We work in log\u2010domain of each feature, then center to zero mean and scale to unit half\u2010range,\n# so logX_norm \u2248 in [\u22121,1].  This reduces multicollinearity and yields numerically stable polynomials.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n\n# Compute midpoints and half\u2010ranges in log\u2010domain\n_LOG_F_MID   = (_LOG_F_MIN + _LOG_F_MAX) * 0.5\n_LOG_F_HALF  = (_LOG_F_MAX - _LOG_F_MIN) * 0.5\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a 2nd\u2010order polynomial in the F=4 normalized log\u2010features:\n      - intercept\n      - F linear terms\n      - F squared terms\n      - F*(F-1)/2 pairwise products\n    Returns Phi of shape (N, 1 + F + F + F*(F-1)//2).\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a zero\u2010centered, scaled,\n    2nd\u2010order polynomial in log\u2010domain.\n    \n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + 4 + 4 + 6 = 15\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.array(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # (N,4)\n\n    # normalize to zero mean, half\u2010range = 1\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above polynomial scaling law via ridge\u2010regularized normal equations.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.array(data_points, dtype=float)\n    y = np.array(loss_values, dtype=float)\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build design\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # adaptive ridge: scale by average diag magnitude\n    avg_diag = np.trace(A) / P\n    ridge = 1e-3 * avg_diag\n\n    # apply ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "d5719242-b47f-4340-a497-89b7e6d4fb6d", "generation": 3, "timestamp": 1754805707.5039992, "iteration_found": 20, "metrics": {"nmse": 0.4333116674822995, "nmae": 0.691236564747476, "r2": 0.5666883325177006, "combined_score": 0.697684964608264}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43745284046690064, "nmae": 0.6955378006319771, "r2": 0.5625471595330993, "combined_score": 0.6956749966664568}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6955\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding squared terms and pairwise interactions.  Normalizing each log\u2010feature\nto [0,1] based on known domain ranges improves numerical stability, and\nwe fit via closed\u2010form ridge regression for efficiency.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and ranges for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix containing:\n      - intercept\n      - linear terms (F)\n      - squared terms (F)\n      - pairwise interactions (F*(F-1)/2)\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds:       array (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.maximum(X, 1e-12)          # avoid log(0)\n    logX = np.log(X)                  # shape (N,4)\n\n    # normalize each feature to [0,1] based on known log\u2010ranges\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)             # shape (N,)\n    return np.exp(log_pred)           # back to original loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                  # shape (N,4)\n    logy = np.log(y)                  # shape (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge    # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 2 (Score: 0.5978)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with ridge regularization.\n\nWe model log(loss) as a polynomial up to degree 2 in the log of each feature:\n  log(loss) \u2248 w0 \n            + \u03a3_i w_i\u00b7log(x_i)\n            + \u03a3_i w_{ii}\u00b7[log(x_i)]^2\n            + \u03a3_{i<j} w_{ij}\u00b7log(x_i)\u00b7log(x_j)\n\nThis captures both diminishing returns (squared terms) and pairwise interactions.\nWe fit via closed\u2010form ridge regression for stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 (linear) + 4 (squared) + 6 (pairwise) = 15\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)          # shape (N,4)\n    N, F = logX.shape\n\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n\n    # linear terms: log(x_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms: [log(x_i)]^2\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms: log(x_i)*log(x_j) for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n\n    # number of parameters: intercept + 4 linear + 4 squared + 6 pairwise\n    P = 1 + F + F + (F*(F-1))//2\n\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # intercept unpenalized\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 3 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a full second\u2010order polynomial in the log of each feature\n(including squared terms and pairwise interactions).  This richer yet\nstill compact representation is fitted via closed\u2010form ridge regression\nfor numerical stability and parameter\u2010efficient generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain\n    second\u2010order polynomial.\n\n    Arguments:\n    - data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n    - params:      1D array of length P = 1 + F + F*(F+1)/2,\n                   where F=4.  That is:\n                   intercept\n                   + 4 main effects (log features)\n                   + 4 squared terms (log(feature)^2)\n                   + 6 pairwise cross terms (log(f_i)*log(f_j), i<j)\n\n    Returns:\n    - preds:      array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zero or negative inputs\n    X = np.maximum(X, 1e-12)\n    # log-transform features\n    logX = np.log(X)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + (F*(F+1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # build design matrix\n    Phi = np.empty((N, P_expected), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared + pairwise terms\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log domain -> back to original\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above second\u2010order log\u2010domain polynomial via ridge regression.\n\n    Arguments:\n    - data_points: array of shape (N,4)\n    - loss_values: array of shape (N,)\n\n    Returns:\n    - params:      1D array of learned parameters of length\n                   1 + 4 + (4*5)//2 = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    N, F = logX.shape\n\n    # number of parameters: intercept + main + squared + pairwise\n    P = 1 + F + (F*(F+1))//2\n\n    # build design matrix\n    Phi = np.empty((N, P), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag (except intercept)\n    diag_idxs = np.diag_indices(P)\n    A[diag_idxs] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a full second\u2010order polynomial in the log of each feature\n(including squared terms and pairwise interactions).  This richer yet\nstill compact representation is fitted via closed\u2010form ridge regression\nfor numerical stability and parameter\u2010efficient generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain\n    second\u2010order polynomial.\n\n    Arguments:\n    - data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n    - params:      1D array of length P = 1 + F + F*(F+1)/2,\n                   where F=4.  That is:\n                   intercept\n                   + 4 main effects (log features)\n                   + 4 squared terms (log(feature)^2)\n                   + 6 pairwise cross terms (log(f_i)*log(f_j), i<j)\n\n    Returns:\n    - preds:      array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zero or negative inputs\n    X = np.maximum(X, 1e-12)\n    # log-transform features\n    logX = np.log(X)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + (F*(F+1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # build design matrix\n    Phi = np.empty((N, P_expected), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared + pairwise terms\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log domain -> back to original\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above second\u2010order log\u2010domain polynomial via ridge regression.\n\n    Arguments:\n    - data_points: array of shape (N,4)\n    - loss_values: array of shape (N,)\n\n    Returns:\n    - params:      1D array of learned parameters of length\n                   1 + 4 + (4*5)//2 = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    N, F = logX.shape\n\n    # number of parameters: intercept + main + squared + pairwise\n    P = 1 + F + (F*(F+1))//2\n\n    # build design matrix\n    Phi = np.empty((N, P), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag (except intercept)\n    diag_idxs = np.diag_indices(P)\n    A[diag_idxs] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding squared terms and pairwise interactions.  Normalizing each log\u2010feature\nto [0,1] based on known domain ranges improves numerical stability, and\nwe fit via closed\u2010form ridge regression for efficiency.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and ranges for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix containing:\n      - intercept\n      - linear terms (F)\n      - squared terms (F)\n      - pairwise interactions (F*(F-1)/2)\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds:       array (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.maximum(X, 1e-12)          # avoid log(0)\n    logX = np.log(X)                  # shape (N,4)\n\n    # normalize each feature to [0,1] based on known log\u2010ranges\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)             # shape (N,)\n    return np.exp(log_pred)           # back to original loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                  # shape (N,4)\n    logy = np.log(y)                  # shape (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge    # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# We work in log\u2010domain of each feature, then center to zero mean and scale to unit half\u2010range,\n# so logX_norm \u2248 in [\u22121,1].  This reduces multicollinearity and yields numerically stable polynomials.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n\n# Compute midpoints and half\u2010ranges in log\u2010domain\n_LOG_F_MID   = (_LOG_F_MIN + _LOG_F_MAX) * 0.5\n_LOG_F_HALF  = (_LOG_F_MAX - _LOG_F_MIN) * 0.5\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a 2nd\u2010order polynomial in the F=4 normalized log\u2010features:\n      - intercept\n      - F linear terms\n      - F squared terms\n      - F*(F-1)/2 pairwise products\n    Returns Phi of shape (N, 1 + F + F + F*(F-1)//2).\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a zero\u2010centered, scaled,\n    2nd\u2010order polynomial in log\u2010domain.\n    \n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + 4 + 4 + 6 = 15\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.array(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # (N,4)\n\n    # normalize to zero mean, half\u2010range = 1\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above polynomial scaling law via ridge\u2010regularized normal equations.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.array(data_points, dtype=float)\n    y = np.array(loss_values, dtype=float)\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build design\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # adaptive ridge: scale by average diag magnitude\n    avg_diag = np.trace(A) / P\n    ridge = 1e-3 * avg_diag\n\n    # apply ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}