{"id": "bf975c80-67f8-4572-a406-0b9f7d0c936a", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7df953a2-f59c-4b4d-bc82-06c1a43c8ff4", "generation": 1, "timestamp": 1754717302.880398, "iteration_found": 1, "metrics": {"nmse": 0.39389171575651705, "nmae": 0.5087149307690798, "r2": 0.606108284243483, "combined_score": 0.7174158427774733}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.42512111103884e+23, "nmae": 755534900566.116, "r2": -5.42512111103884e+23, "combined_score": 1.8432768219040055e-24}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 542512111103883970871296.0000\n- nmae: 755534900566.1160\n- r2: -542512111103883970871296.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 542512111103883970871296.0000, nmae: 755534900566.1160, r2: -542512111103883970871296.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 188883725141.5290)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (542512111103883970871296.0000), Performs well on nmae (755534900566.1160), Performs well on r2 (-542512111103883970871296.0000), Performs well on combined_score (0.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Transformed both inputs and outputs into log\u2010space, turning a multi\u2010dimensional power law into a simple linear model, which is numerically stable and efficient to fit.\n- Solved for intercept and exponents in closed form via ridge\u2010regularized linear regression rather than iterative BFGS, reducing overfitting risk and runtime.\n- Reduced parameter count from 2\u00d7F+1 in the naive form down to F+1, improving sample efficiency.\n- Added a tiny ridge penalty (excluding the intercept) for better conditioning without materially biasing the solution.\n- Supported multi\u2010target losses in a unified, vectorized fashion."]}}}