{"id": "1e8b20c9-c4fe-425d-bf96-c0d5026be9d4", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training:\nWe model log(loss) as a parsimonious polynomial in the log\u2010domain:\n  log(loss) = \u03b20\n            + \u03b21*L_lr + \u03b22*L_bsz + \u03b23*L_D + \u03b24*L_P\n            + \u03b25*(L_lr)^2 + \u03b26*(L_bsz)^2 + \u03b27*(L_D)^2 + \u03b28*(L_P)^2\n            + \u03b29*(L_lr * L_bsz) + \u03b210*(L_D * L_P)\nwhere\n  L_* are the normalized log\u2010features, bringing each log\u2010feature to roughly [-1,1].\nWe fit the 11 coefficients \u03b2 via closed\u2010form ridge regression in the log\u2010loss domain\nfor numerical stability and cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for features:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n# mid\u2010points and half\u2010ranges for normalization to [-1,1]\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X>0, compute log, then normalize to [-1,1] per feature:\n      L = (log(X) - mid) / half_range\n    \"\"\"\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef _build_design_matrix(L):\n    \"\"\"\n    Build design matrix for 11\u2010parameter model:\n      [1,\n       L_lr, L_bsz, L_D, L_P,\n       L_lr^2, L_bsz^2, L_D^2, L_P^2,\n       L_lr * L_bsz,\n       L_D  * L_P]\n    \"\"\"\n    N, F = L.shape  # F should be 4\n    if F != 4:\n        raise ValueError(f\"Expected 4 log\u2010features, got {F}\")\n    L_lr = L[:, 0]\n    L_bsz = L[:, 1]\n    L_D = L[:, 2]\n    L_P = L[:, 3]\n\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_D, L_P,\n        L_lr * L_lr, L_bsz * L_bsz, L_D * L_D, L_P * L_P,\n        L_lr * L_bsz,\n        L_D  * L_P\n    ], axis=1)\n    # shape (N,11)\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via our 11\u2010parameter\n    normalized\u2010log polynomial model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201011 vector of coefficients [\u03b20 ... \u03b210]\n\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p.size}\")\n\n    # normalize log\u2010features\n    L = _normalize_log_features(X)       # shape (N,4)\n    Phi = _build_design_matrix(L)        # shape (N,11)\n    # predict in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # convert back to loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11\u2010parameter normalized\u2010log polynomial model via\n    closed\u2010form ridge regression in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      length\u201011 vector of fitted coefficients [\u03b20 ... \u03b210]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    # avoid zeros\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # build normalized\u2010log design matrix\n    L = _normalize_log_features(X)\n    Phi = _build_design_matrix(L)   # shape (N,11)\n\n    # normal equations with ridge regularization\n    P = Phi.shape[1]                # 11\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # ridge term: scale by average diagonal for stability\n    avg_diag = np.trace(A) / P\n    ridge   = 1e-6 * avg_diag\n    # apply ridge to all except intercept\n    A.flat[::P+1] += ridge\n    A[0, 0]     -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3961ac2c-ea9e-4cb3-8aa8-fe287946824c", "generation": 3, "timestamp": 1754806000.194178, "iteration_found": 52, "metrics": {"nmse": 0.6845048541225822, "nmae": 0.9804856642426395, "r2": 0.3154951458774178, "combined_score": 0.5936462560809157}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.772227422596041, "nmae": 1.6562210455328756, "r2": -0.772227422596041, "combined_score": 0.36072076621461097}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7722\n- nmae: 1.6562\n- r2: -0.7722\n- combined_score: 0.3607\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4372, nmae: 0.6954, r2: 0.5628, combined_score: 0.6958\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law for LLM training:\nWe model log(loss) as a hybrid polynomial in the log of each feature,\nincluding first\u2010order terms for lr and bsz, and both linear and quadratic\nterms plus their interaction for data_size (D) and non_embedding_param_size (P).\nThis keeps the model compact (8 params) and regularizes heavily for better\ncross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a tailored log\u2010domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size (D), non_embedding_param_size (P)]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid non-positive inputs\n    X = np.maximum(X, 1e-12)\n    # take logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with columns:\n    # [1, log_lr, log_bsz, log_D, log_P, (log_D)^2, (log_P)^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear model in the log\u2010domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the tailored log\u2010domain scaling law via ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid non-positive\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and output\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # construct design matrix \u03a6 (N\u00d78)\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all but the intercept term\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n### Program 2 (Score: 0.5978)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for stable normalization\n_LOG_F_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X > 0, take log, then normalize to approximately [-1,1]:\n        logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a quadratic design matrix in normalized log-space:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise products (6)]\n    Total columns = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = logX_norm.shape\n    # intercept\n    cols = [np.ones((N,), dtype=float)]\n    # linear\n    cols.append(logX_norm)\n    # squared\n    cols.append(logX_norm ** 2)\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(logX_norm[:, i] * logX_norm[:, j])\n    # stack into (N,15)\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15 (model coefficients)\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    # build design matrix\n    Phi = _build_design_matrix(logXn)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic model via closed-form weighted ridge regression.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      array of length 15 (fitted coefficients)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize features and target\n    Phi = _build_design_matrix(_normalize_log_features(X))\n    logy = np.log(np.maximum(y, 1e-12))\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    N, P = Phi.shape\n\n    # weighted ridge regularization\n    # base ridge scaled by average diagonal of A\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag\n\n    # per-parameter penalties\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # intercept unpenalized\n    # linear terms (indices 1-4): [lr, bsz, data, param]\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5-8)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9-14): [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply to diagonal of A\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4372), Performs well on nmae (0.6954), Performs well on r2 (0.5628), Performs well on combined_score (0.6958)\n\n\n### Program 3 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a quadratic design matrix in normalized log\u2010feature space:\n      - intercept\n      - linear terms\n      - squared terms\n      - pairwise interactions\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F * (F - 1)) // 2  # intercept + linear + squared + interactions\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n\n    Inputs:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients)\n\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # design matrix and prediction in log\u2010loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 (learned coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize log features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    P_dim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge to all except intercept\n    diag_idx = np.diag_indices(P_dim)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.7542)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model the LM loss as an asymptotic floor plus a joint power\u2010law in\nmodel size (P), data size (D), batch size (bsz), and learning rate (lr):\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\nParameters are internally reparameterized as:\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\nfor numerical stability. Fitting is done via L-BFGS-B on the original loss MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via an asymptotic\n    power\u2010law model.\n\n    data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, alpha_P, alpha_D, alpha_b, alpha_l, log_yinf = p\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # exponentiate the intercept and floor\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term and add asymptotic floor\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_b) * (lr ** alpha_l)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter asymptotic power\u2010law scaling law by minimizing MSE.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes.\")\n\n    # clamp losses to positive range\n    y = np.maximum(y, 1e-12)\n\n    # initial guess\n    min_y = np.min(y)\n    init_logA     = 0.0\n    init_alpha_P  = -0.2   # more params \u2192 lower loss\n    init_alpha_D  = -0.1   # more data \u2192 lower loss\n    init_alpha_b  = -0.05  # larger batch \u2192 slightly lower loss\n    init_alpha_l  = -0.1   # higher lr (in range) \u2192 lower loss\n    init_log_yinf = np.log(min_y * 0.1 + 1e-8)\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_b,\n        init_alpha_l,\n        init_log_yinf\n    ], dtype=float)\n\n    # objective: mean squared error on original loss\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # bounds to keep exponents in a reasonable range and floor \u2265 0\n    bnds = [\n        (None, None),          # logA\n        (-5.0, 5.0),           # \u03b1_P\n        (-5.0, 5.0),           # \u03b1_D\n        (-5.0, 5.0),           # \u03b1_b\n        (-5.0, 5.0),           # \u03b1_l\n        (np.log(1e-12), np.log(min_y))  # log_y_inf\n    ]\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'ftol':1e-12, 'maxiter':1000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\nimport numpy as np\n\n# Precomputed log-domain minima and ranges for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix with:\n      - intercept\n      - linear terms (F)\n      - squared terms (F)\n      - pairwise interactions (F*(F-1)/2)\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a normalized\n    quadratic polynomial in the log-domain.\n\n    Inputs:\n      data_points: numpy array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-15 vector of fitted coefficients.\n\n    Returns:\n      preds:       numpy array of shape (N,) of predicted lm loss.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per row, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize logs to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and apply linear model in log-loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge-regularized\n    closed-form solution.\n\n    Inputs:\n      data_points: numpy array of shape (N,4)\n      loss_values: numpy array of shape (N,)\n\n    Returns:\n      params:      length-15 vector of learned coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize logs\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # ridge regularization for stability\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law for LLM training:\nWe model log(loss) as a hybrid polynomial in the log of each feature,\nincluding first\u2010order terms for lr and bsz, and both linear and quadratic\nterms plus their interaction for data_size (D) and non_embedding_param_size (P).\nThis keeps the model compact (8 params) and regularizes heavily for better\ncross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a tailored log\u2010domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size (D), non_embedding_param_size (P)]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid non-positive inputs\n    X = np.maximum(X, 1e-12)\n    # take logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with columns:\n    # [1, log_lr, log_bsz, log_D, log_P, (log_D)^2, (log_P)^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear model in the log\u2010domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the tailored log\u2010domain scaling law via ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid non-positive\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and output\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # construct design matrix \u03a6 (N\u00d78)\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all but the intercept term\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.3280, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (11.586), Excellent nmae (4.232)\n\n\n### Inspiration 4 (Score: 1.3280, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (11.586), Excellent nmae (4.232)\n\n\n### Inspiration 5 (Score: 1.1774, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling-law model for LLM training:\nWe model log-loss as a parsimonious polynomial in the log-domain:\n  log(loss) = p0\n            + p1*logP\n            + p2*logD\n            + p3*log(lr)\n            + p4*log(bsz)\n            + p5*logP*logD\n            + p6*(log(lr))^2\n            + p7*(log(bsz))^2\n            + p8*log(lr)*log(bsz)\nwhere\n  P   = non_embedding_param_size,\n  D   = data_size,\n  lr  = learning rate,\n  bsz = batch size.\n\nThis 9-parameter linear model in the log-domain balances flexibility\n(capturing cross-effects and saturation in lr/bsz) with parsimony\n(for good generalization and stable fitting).\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from columns [lr, bsz, data_size, non_embedding_param_size].\n    data_points: shape (N,4)\n    params: length-9 array\n    Returns: length-N array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # guard against zeros before logging\n    X = np.maximum(X, 1e-12)\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    N = X.shape[0]\n    # Construct design matrix of shape (N, 9)\n    Phi = np.stack([\n        np.ones(N),           # intercept\n        logP,                 # p1\n        logD,                 # p2\n        logr,                 # p3\n        logb,                 # p4\n        logP * logD,          # p5\n        logr * logr,          # p6\n        logb * logb,          # p7\n        logr * logb           # p8\n    ], axis=1)\n\n    p = np.ravel(params).astype(float)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"scaling_law_func expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9-parameter log-domain model via ridge regression.\n    Returns: params array of length 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # guard against zeros\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    N = X.shape[0]\n    # Build design matrix\n    Phi = np.stack([\n        np.ones(N),\n        logP,\n        logD,\n        logr,\n        logb,\n        logP * logD,\n        logr * logr,\n        logb * logb,\n        logr * logb\n    ], axis=1)  # (N,9)\n\n    # Ridge regression (small regularization for stability)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal, except intercept term\n    # A[ii,ii] += ridge for all i>0\n    diag_idx = np.arange(Phi.shape[1])\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # undo at intercept\n\n    b = Phi.T.dot(np.log(y))\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.102), Excellent nmae (3.600)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model the LM loss as an asymptotic floor plus a joint power\u2010law in\nmodel size (P), data size (D), batch size (bsz), and learning rate (lr):\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\nParameters are internally reparameterized as:\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\nfor numerical stability. Fitting is done via L-BFGS-B on the original loss MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via an asymptotic\n    power\u2010law model.\n\n    data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, alpha_P, alpha_D, alpha_b, alpha_l, log_yinf = p\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # exponentiate the intercept and floor\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term and add asymptotic floor\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_b) * (lr ** alpha_l)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter asymptotic power\u2010law scaling law by minimizing MSE.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes.\")\n\n    # clamp losses to positive range\n    y = np.maximum(y, 1e-12)\n\n    # initial guess\n    min_y = np.min(y)\n    init_logA     = 0.0\n    init_alpha_P  = -0.2   # more params \u2192 lower loss\n    init_alpha_D  = -0.1   # more data \u2192 lower loss\n    init_alpha_b  = -0.05  # larger batch \u2192 slightly lower loss\n    init_alpha_l  = -0.1   # higher lr (in range) \u2192 lower loss\n    init_log_yinf = np.log(min_y * 0.1 + 1e-8)\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_b,\n        init_alpha_l,\n        init_log_yinf\n    ], dtype=float)\n\n    # objective: mean squared error on original loss\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # bounds to keep exponents in a reasonable range and floor \u2265 0\n    bnds = [\n        (None, None),          # logA\n        (-5.0, 5.0),           # \u03b1_P\n        (-5.0, 5.0),           # \u03b1_D\n        (-5.0, 5.0),           # \u03b1_b\n        (-5.0, 5.0),           # \u03b1_l\n        (np.log(1e-12), np.log(min_y))  # log_y_inf\n    ]\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'ftol':1e-12, 'maxiter':1000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training:\nWe model log(loss) as a parsimonious polynomial in the log\u2010domain:\n  log(loss) = \u03b20\n            + \u03b21*L_lr + \u03b22*L_bsz + \u03b23*L_D + \u03b24*L_P\n            + \u03b25*(L_lr)^2 + \u03b26*(L_bsz)^2 + \u03b27*(L_D)^2 + \u03b28*(L_P)^2\n            + \u03b29*(L_lr * L_bsz) + \u03b210*(L_D * L_P)\nwhere\n  L_* are the normalized log\u2010features, bringing each log\u2010feature to roughly [-1,1].\nWe fit the 11 coefficients \u03b2 via closed\u2010form ridge regression in the log\u2010loss domain\nfor numerical stability and cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for features:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n# mid\u2010points and half\u2010ranges for normalization to [-1,1]\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X>0, compute log, then normalize to [-1,1] per feature:\n      L = (log(X) - mid) / half_range\n    \"\"\"\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef _build_design_matrix(L):\n    \"\"\"\n    Build design matrix for 11\u2010parameter model:\n      [1,\n       L_lr, L_bsz, L_D, L_P,\n       L_lr^2, L_bsz^2, L_D^2, L_P^2,\n       L_lr * L_bsz,\n       L_D  * L_P]\n    \"\"\"\n    N, F = L.shape  # F should be 4\n    if F != 4:\n        raise ValueError(f\"Expected 4 log\u2010features, got {F}\")\n    L_lr = L[:, 0]\n    L_bsz = L[:, 1]\n    L_D = L[:, 2]\n    L_P = L[:, 3]\n\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_D, L_P,\n        L_lr * L_lr, L_bsz * L_bsz, L_D * L_D, L_P * L_P,\n        L_lr * L_bsz,\n        L_D  * L_P\n    ], axis=1)\n    # shape (N,11)\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via our 11\u2010parameter\n    normalized\u2010log polynomial model.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201011 vector of coefficients [\u03b20 ... \u03b210]\n\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p.size}\")\n\n    # normalize log\u2010features\n    L = _normalize_log_features(X)       # shape (N,4)\n    Phi = _build_design_matrix(L)        # shape (N,11)\n    # predict in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # convert back to loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11\u2010parameter normalized\u2010log polynomial model via\n    closed\u2010form ridge regression in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      length\u201011 vector of fitted coefficients [\u03b20 ... \u03b210]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    # avoid zeros\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # build normalized\u2010log design matrix\n    L = _normalize_log_features(X)\n    Phi = _build_design_matrix(L)   # shape (N,11)\n\n    # normal equations with ridge regularization\n    P = Phi.shape[1]                # 11\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # ridge term: scale by average diagonal for stability\n    avg_diag = np.trace(A) / P\n    ridge   = 1e-6 * avg_diag\n    # apply ridge to all except intercept\n    A.flat[::P+1] += ridge\n    A[0, 0]     -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- We operate in the log\u2010domain for both inputs and target to linearize power\u2010law behaviors.\n- Each log\u2010feature is normalized to roughly the range [\u22121,1], improving numerical conditioning.\n- We use a compact 11\u2010parameter polynomial basis capturing main effects, squared curvatures, and two critical cross\u2010effects (lr\u00d7bsz and D\u00d7P).\n- Closed\u2010form ridge regression (no iterative SciPy calls) ensures stability, efficiency, and avoids local\u2010optima issues.\n- A small, data\u2010dependent ridge term regularizes the solution without penalizing the intercept.\n"]}}}