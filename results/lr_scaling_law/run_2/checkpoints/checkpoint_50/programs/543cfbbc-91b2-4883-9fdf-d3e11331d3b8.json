{"id": "543cfbbc-91b2-4883-9fdf-d3e11331d3b8", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using either\n      (a) a pure power\u2010law:    P = F+1  \u2192 params = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 \u2192 params = [intercept, a1\u2026aF, b1\u2026bF]\n    Here F = 4 (lr, bsz, data_size, non_embedding_param_size).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    eps = 1e-12\n    # avoid log(0)\n    X = np.maximum(X, eps)\n    N, F = X.shape\n\n    # log\u2010transform features\n    logX = np.log(X)  # shape (N, F)\n\n    theta = np.asarray(params, dtype=np.float64)\n    # support vector or matrix of parameter sets\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # build design matrix depending on number of params\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1), dtype=np.float64), logX], axis=1)\n    elif P == 2 * F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([\n            np.ones((N, 1), dtype=np.float64),\n            logX,\n            logX**2\n        ], axis=1)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space, then exponentiate\n    log_pred = Z.dot(theta.T)      # shape (N, M)\n    pred     = np.exp(log_pred)    # shape (N, M)\n\n    # return flat vector if single target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a quadratic log\u2010law:\n      log(loss) \u2248 intercept + \u03a3_i a_i\u00b7log(x_i) + \u03a3_i b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    Always returns a parameter vector of length 2F+1 = 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n\n    # avoid zero or negative inputs/outputs\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    # log\u2010space features\n    logX = np.log(X)                        # (N, F)\n    # design matrix: [1, logX, (logX)^2]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        logX**2\n    ], axis=1)                              # (N, 1 + F + F)\n    P = Z.shape[1]                          # should be 2F+1\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg       # (P, P)\n\n    # support vector or multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    # solve separately for each target\n    params = np.zeros((T, P), dtype=np.float64)\n    for t in range(T):\n        logy = np.log(y2d[:, t])            # (N,)\n        b    = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return flat vector if single target\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "808739da-0c08-4606-ab5e-d6a46bf30d8a", "generation": 4, "timestamp": 1754717571.1059651, "iteration_found": 43, "metrics": {"nmse": 0.25432593702380907, "nmae": 0.4489761764193079, "r2": 0.7456740629761909, "combined_score": 0.7972409486905303}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3938917154217117, "nmae": 0.5087149294585225, "r2": 0.6061082845782884, "combined_score": 0.7174158429497929}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.2543, nmae: 0.4490, r2: 0.7457, combined_score: 0.7972\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2543, nmae: 0.4490, r2: 0.7457, combined_score: 0.7972\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5616)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2543), Performs well on nmae (0.4490), Performs well on r2 (0.7457), Performs well on combined_score (0.7972)\n\n\n### Program 2 (Score: 0.5616)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2543), Performs well on nmae (0.4490), Performs well on r2 (0.7457), Performs well on combined_score (0.7972)\n\n\n### Program 3 (Score: 0.5565)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to avoid log(0) or negative\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    # unpack parameters\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    We standardize each log\u2010feature before fitting for numerical stability,\n    then un\u2010standardize the weights.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0) or negative\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # move to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    N, F = logX.shape  # F==4\n\n    # standardize features\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    # avoid division by zero\n    sigma[sigma < 1e-6] = 1.0\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # build design matrix with intercept\n    Z = np.concatenate([np.ones((N,1), dtype=np.float64), Z_feat], axis=1)  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-5\n    P = F + 1\n    R = np.eye(P, dtype=np.float64)\n    R[0,0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * R                               # (5,5)\n    b = Z.T.dot(logy)                                             # (5,)\n\n    # solve normal equations\n    theta = np.linalg.solve(A, b)                                 # (5,)\n    intercept_std = theta[0]                                      # scalar\n    w_std         = theta[1:]                                     # (4,)\n\n    # un\u2010standardize weights\n    w = w_std / sigma                                             # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)         # scalar\n\n    # pack parameters\n    params = np.empty(P, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n    return params\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a stabilized power\u2010law:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    # clip to avoid log(0) and ensure float64\n    X = np.clip(np.asarray(data_points, dtype=np.float64), 1e-12, None)\n    # log\u2010space features\n    logX = np.log(X)                       # shape (N,4)\n    # compute and return loss\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)\n    return np.exp(intercept + logX.dot(weights))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Features are standardized before regression for numerical stability.\n    \"\"\"\n    # prepare data\n    X = np.clip(np.asarray(data_points, dtype=np.float64), 1e-12, None)  # (N,4)\n    y = np.clip(np.asarray(loss_values,  dtype=np.float64), 1e-12, None)  # (N,)\n\n    # log\u2010space\n    logX = np.log(X)      # (N,4)\n    logy = np.log(y)      # (N,)\n\n    # standardize features\n    mu    = logX.mean(axis=0)               # (4,)\n    sigma = logX.std(axis=0)                # (4,)\n    sigma[sigma < 1e-6] = 1.0               # avoid zero\u2010division\n    Z_feat = (logX - mu) / sigma            # (N,4)\n\n    # design matrix with intercept\n    N = Z_feat.shape[0]\n    Z = np.column_stack([np.ones(N, dtype=np.float64), Z_feat])  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    P   = Z.shape[1]\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (Z^T Z + lam\u00b7reg) \u03b8 = Z^T logy\n    A     = Z.T.dot(Z) + lam * reg          # (5,5)\n    b     = Z.T.dot(logy)                   # (5,)\n    theta = np.linalg.solve(A, b)           # (5,)\n\n    # un\u2010standardize weights\n    intercept_std = theta[0]\n    w_std         = theta[1:]               # (4,)\n    w             = w_std / sigma           # (4,)\n    intercept     = intercept_std - np.dot(w_std, mu / sigma)\n\n    # return [intercept, w_lr, w_bsz, w_data, w_param]\n    return np.concatenate(([intercept], w))\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a pure multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    eps = 1e-12\n    logX = np.log(X + eps)                       # (N,4)\n    theta = np.asarray(params, dtype=float)      # (5,)\n    if theta.ndim != 1 or theta.shape[0] != X.shape[1] + 1:\n        raise ValueError(f\"Expected params of length {X.shape[1]+1}, got {theta.shape}\")\n    # build design matrix [1, log(x1), log(x2), ...]\n    Z = np.concatenate([np.ones((X.shape[0],1)), logX], axis=1)  # (N,5)\n    log_pred = Z.dot(theta)                                     # (N,)\n    return np.exp(log_pred)                                     # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the intercept + exponents in log\u2010space via ridge\u2010regularized\n    linear regression:\n      log(loss) \u2248 intercept + sum_i exponent_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    # build design matrix in log\u2010space\n    logX = np.log(X)                                         # (N,4)\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)       # (N,5)\n    P = F + 1\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P, dtype=float)\n    reg[0,0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg                        # (5,5)\n    b = Z.T.dot(np.log(y))                                   # (5,)\n\n    # solve for [intercept, w1...w4]\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5616, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a pure multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    eps = 1e-12\n    logX = np.log(X + eps)                       # (N,4)\n    theta = np.asarray(params, dtype=float)      # (5,)\n    if theta.ndim != 1 or theta.shape[0] != X.shape[1] + 1:\n        raise ValueError(f\"Expected params of length {X.shape[1]+1}, got {theta.shape}\")\n    # build design matrix [1, log(x1), log(x2), ...]\n    Z = np.concatenate([np.ones((X.shape[0],1)), logX], axis=1)  # (N,5)\n    log_pred = Z.dot(theta)                                     # (N,)\n    return np.exp(log_pred)                                     # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the intercept + exponents in log\u2010space via ridge\u2010regularized\n    linear regression:\n      log(loss) \u2248 intercept + sum_i exponent_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    # build design matrix in log\u2010space\n    logX = np.log(X)                                         # (N,4)\n    Z = np.concatenate([np.ones((N,1)), logX], axis=1)       # (N,5)\n    P = F + 1\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P, dtype=float)\n    reg[0,0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg                        # (5,5)\n    b = Z.T.dot(np.log(y))                                   # (5,)\n\n    # solve for [intercept, w1...w4]\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to avoid log(0) or negative\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    # unpack parameters\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    We standardize each log\u2010feature before fitting for numerical stability,\n    then un\u2010standardize the weights.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0) or negative\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # move to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    N, F = logX.shape  # F==4\n\n    # standardize features\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    # avoid division by zero\n    sigma[sigma < 1e-6] = 1.0\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # build design matrix with intercept\n    Z = np.concatenate([np.ones((N,1), dtype=np.float64), Z_feat], axis=1)  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-5\n    P = F + 1\n    R = np.eye(P, dtype=np.float64)\n    R[0,0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * R                               # (5,5)\n    b = Z.T.dot(logy)                                             # (5,)\n\n    # solve normal equations\n    theta = np.linalg.solve(A, b)                                 # (5,)\n    intercept_std = theta[0]                                      # scalar\n    w_std         = theta[1:]                                     # (4,)\n\n    # un\u2010standardize weights\n    w = w_std / sigma                                             # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)         # scalar\n\n    # pack parameters\n    params = np.empty(P, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5616, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a stabilized power\u2010law:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    # clip to avoid log(0) and ensure float64\n    X = np.clip(np.asarray(data_points, dtype=np.float64), 1e-12, None)\n    # log\u2010space features\n    logX = np.log(X)                       # shape (N,4)\n    # compute and return loss\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)\n    return np.exp(intercept + logX.dot(weights))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Features are standardized before regression for numerical stability.\n    \"\"\"\n    # prepare data\n    X = np.clip(np.asarray(data_points, dtype=np.float64), 1e-12, None)  # (N,4)\n    y = np.clip(np.asarray(loss_values,  dtype=np.float64), 1e-12, None)  # (N,)\n\n    # log\u2010space\n    logX = np.log(X)      # (N,4)\n    logy = np.log(y)      # (N,)\n\n    # standardize features\n    mu    = logX.mean(axis=0)               # (4,)\n    sigma = logX.std(axis=0)                # (4,)\n    sigma[sigma < 1e-6] = 1.0               # avoid zero\u2010division\n    Z_feat = (logX - mu) / sigma            # (N,4)\n\n    # design matrix with intercept\n    N = Z_feat.shape[0]\n    Z = np.column_stack([np.ones(N, dtype=np.float64), Z_feat])  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    P   = Z.shape[1]\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    # solve (Z^T Z + lam\u00b7reg) \u03b8 = Z^T logy\n    A     = Z.T.dot(Z) + lam * reg          # (5,5)\n    b     = Z.T.dot(logy)                   # (5,)\n    theta = np.linalg.solve(A, b)           # (5,)\n\n    # un\u2010standardize weights\n    intercept_std = theta[0]\n    w_std         = theta[1:]               # (4,)\n    w             = w_std / sigma           # (4,)\n    intercept     = intercept_std - np.dot(w_std, mu / sigma)\n\n    # return [intercept, w_lr, w_bsz, w_data, w_param]\n    return np.concatenate(([intercept], w))\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using either\n      (a) a pure power\u2010law:    P = F+1  \u2192 params = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 \u2192 params = [intercept, a1\u2026aF, b1\u2026bF]\n    Here F = 4 (lr, bsz, data_size, non_embedding_param_size).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    eps = 1e-12\n    # avoid log(0)\n    X = np.maximum(X, eps)\n    N, F = X.shape\n\n    # log\u2010transform features\n    logX = np.log(X)  # shape (N, F)\n\n    theta = np.asarray(params, dtype=np.float64)\n    # support vector or matrix of parameter sets\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # build design matrix depending on number of params\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1), dtype=np.float64), logX], axis=1)\n    elif P == 2 * F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([\n            np.ones((N, 1), dtype=np.float64),\n            logX,\n            logX**2\n        ], axis=1)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space, then exponentiate\n    log_pred = Z.dot(theta.T)      # shape (N, M)\n    pred     = np.exp(log_pred)    # shape (N, M)\n\n    # return flat vector if single target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a quadratic log\u2010law:\n      log(loss) \u2248 intercept + \u03a3_i a_i\u00b7log(x_i) + \u03a3_i b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    Always returns a parameter vector of length 2F+1 = 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n\n    # avoid zero or negative inputs/outputs\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    # log\u2010space features\n    logX = np.log(X)                        # (N, F)\n    # design matrix: [1, logX, (logX)^2]\n    Z = np.concatenate([\n        np.ones((N, 1), dtype=np.float64),\n        logX,\n        logX**2\n    ], axis=1)                              # (N, 1 + F + F)\n    P = Z.shape[1]                          # should be 2F+1\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg       # (P, P)\n\n    # support vector or multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    # solve separately for each target\n    params = np.zeros((T, P), dtype=np.float64)\n    for t in range(T):\n        logy = np.log(y2d[:, t])            # (N,)\n        b    = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return flat vector if single target\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```"]}}}