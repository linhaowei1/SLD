{"id": "733942a6-c080-42c9-bce4-b10ffdb66f57", "code": "import numpy as np\nfrom itertools import combinations_with_replacement\n\n# Precomputed log\u2010domain feature bounds for stable normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of features and second\u2010order index pairs\n_F      = 4\n_PAIRS  = list(combinations_with_replacement(range(_F), 2))  # [(0,0),(0,1),...,(3,3)]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X > 0, take logs, then normalize each feature to roughly [-1,1]:\n        (logX - mid) / half\n    \"\"\"\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    return (logX - _LOG_MID) / _LOG_HALF\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a quadratic design matrix \u03a6 of shape (N, 1 + F + F*(F+1)/2) = (N,15):\n      - intercept\n      - F linear terms\n      - F*(F+1)/2 second\u2010order terms (squares + cross\u2010products)\n    \"\"\"\n    N = logXn.shape[0]\n    P = 1 + _F + len(_PAIRS)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logXn\n    # second\u2010order terms\n    idx = 1 + _F\n    for i, j in _PAIRS:\n        Phi[:, idx] = logXn[:, i] * logXn[:, j]\n        idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15: coefficients in log-loss space\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != _F:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize features in log\u2010domain to [-1,1]\n    logXn = _normalize_log_features(X)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logXn)   # (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)               # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized-log quadratic model via adaptive ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients in log-loss space\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[0] != y.size or X.shape[1] != _F:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes\")\n\n    # normalize features\n    logXn = _normalize_log_features(X)\n\n    # build design matrix\n    Phi = _build_design_matrix(logXn)   # (N,15)\n\n    # log-transform target\n    logy = np.log(np.maximum(y, 1e-12))  # (N,)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                   # (15,15)\n    b = Phi.T.dot(logy)                  # (15,)\n\n    # adaptive ridge scaling: \u03bb_base = \u03b1 * (trace(A)/P)\n    Pdim       = A.shape[0]\n    avg_diag   = np.trace(A) / Pdim\n    lambda_base = 1e-4 * avg_diag\n\n    # build per-parameter penalties:\n    #   intercept \u2192 0\n    #   linear    \u2192 0.1\n    #   2nd order \u2192 1.0\n    penalties = np.ones(Pdim, dtype=float)\n    penalties[0] = 0.0\n    penalties[1:1+_F] = 0.1\n    penalties[1+_F:] = 1.0\n\n    # apply ridge penalties on diagonal\n    A.flat[::Pdim+1] += lambda_base * penalties\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e0f08af5-3af0-4fa0-9926-b19f77f30613", "generation": 5, "timestamp": 1754806654.1209266, "iteration_found": 133, "metrics": {"nmse": 0.43726321384251615, "nmae": 0.695455814891157, "r2": 0.5627367861574839, "combined_score": 0.6957667811774747}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43745257218593797, "nmae": 0.69553745198862, "r2": 0.5625474278140621, "combined_score": 0.6956751265047287}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6955\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\n\"\"\"\nSimplified second\u2010order log\u2010domain polynomial scaling law with\nnormalized features and adaptive ridge regression for stability.\n\"\"\"\nimport numpy as np\n\n# Pre\u2010computed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on global log\u2010min/max.\n    \"\"\"\n    # avoid log(0) and negatives\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip any numerical drift\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a normalized 2nd\u2010order polynomial:\n      [1,\n       u_i for i in 0..3,\n       u_i^2 for i in 0..3,\n       u_i * u_j for all 0 <= i < j < 4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log\u2010loss and exponentiate\n    logy_pred = Phi.dot(p)  # (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients for log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build normalized design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # transform target to log\u2010domain (avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge to all diagonal entries, then remove it from intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand adaptive ridge\u2010regularized closed\u2010form fitting for numerical stability\nand cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain. Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array-like of shape (N,4) for [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15 (intercept + linear + squared + interactions)\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip small numerical drift\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-domain\n    logy_pred = Phi.dot(p)                 # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares with adaptive regularization.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      array of length 15 (intercept + linear + squared + interactions)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform features & target\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # normal equations\n    A = Phi.T.dot(Phi)                     # shape (15,15)\n    b = Phi.T.dot(logy)                    # shape (15,)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a second-order polynomial in the normalized\n    log-domain. Features:\n      - intercept\n      - linear terms: logX_norm_i for i in [0..3]\n      - squared terms: (logX_norm_i)^2\n      - pairwise interactions: logX_norm_i * logX_norm_j for i<j\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F + F + (F*(F-1)//2)\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-quadratic scaling law.\n\n    data_points: array-like of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      array-like of length 15: coefficients in the log-loss domain.\n\n    Returns:     array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # avoid non-positive\n    X = np.clip(X, 1e-12, None)\n\n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression.\n\n    data_points: array-like of shape (N,4)\n    loss_values: array-like of shape (N,)\n\n    Returns:      params: array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # log-target\n    logy = np.log(y)\n\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5553)\n```python\nimport numpy as np\n\nFLOOR = 1e-12\n\n# EVOLVE-BLOCK-START\ndef _build_phi(X):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N,8) for the 8-parameter model:\n        [1,\n         log(lr),\n         log(bsz),\n         log(data_size),\n         log(param_size),\n         log(data_size)^2,\n         log(param_size)^2,\n         log(data_size)*log(param_size)]\n    \"\"\"\n    # X has shape (N,4): columns [lr, bsz, data_size, param_size]\n    # Clip to avoid log(0)\n    X = np.maximum(X, FLOOR)\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n\n    return np.column_stack([\n        np.ones(X.shape[0], dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via an 8-parameter log-domain polynomial.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    Phi = _build_phi(X)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge\u2010regularized least squares\n    in the log-domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # build design matrix & target in log-domain\n    Phi = _build_phi(X)\n    log_y = np.log(np.maximum(y, FLOOR))\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to every diagonal, then un\u2010penalize the intercept\n    diag_ix = np.arange(A.shape[0])\n    A[diag_ix, diag_ix] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law:\n\nWe model log(loss) as a simple linear function of the logs of each feature,\nwith squared terms for data_size and param_size and their interaction:\n    log y = \u03b20\n          + \u03b2_lr    * log(lr)\n          + \u03b2_bsz   * log(bsz)\n          + \u03b2_D     * log(data_size)\n          + \u03b2_P     * log(param_size)\n          + \u03b2_D2    * [log(data_size)]^2\n          + \u03b2_P2    * [log(param_size)]^2\n          + \u03b2_DP    * log(data_size) * log(param_size)\n\nThis 8-parameter form is compact, stable, and fits in closed-form with\na tiny ridge penalty for numerical robustness.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, Psize = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of length 8 (\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, Psize = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # assemble design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # closed-form ridge solution: solve (\u03a6\u1d40\u03a6 + \u03bb\u00b7I') p = \u03a6\u1d40 log_y\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply small ridge only to non-intercept terms\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Migrant)\n```python\n\"\"\"\nSimplified second\u2010order log\u2010domain polynomial scaling law with\nnormalized features and adaptive ridge regression for stability.\n\"\"\"\nimport numpy as np\n\n# Pre\u2010computed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on global log\u2010min/max.\n    \"\"\"\n    # avoid log(0) and negatives\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip any numerical drift\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a normalized 2nd\u2010order polynomial:\n      [1,\n       u_i for i in 0..3,\n       u_i^2 for i in 0..3,\n       u_i * u_j for all 0 <= i < j < 4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log\u2010loss and exponentiate\n    logy_pred = Phi.dot(p)  # (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients for log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build normalized design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # transform target to log\u2010domain (avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge to all diagonal entries, then remove it from intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 3.0124, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nA more parsimonious log-domain scaling law for LLM loss:\n  log(loss) = p0\n            + p1*log(lr)\n            + p2*log(bsz)\n            + p3*log(data_size)\n            + p4*log(param_size)\n            + p5*(log(lr))^2       # captures non-monotonic LR effect\n            + p6*(log(bsz))^2     # captures BS saturation curvature\n            + p7*(log(data_size)*log(param_size))  # joint size effect\n\nThis 8-parameter model is fitted via small-ridge regression in closed form,\ncentering the design matrix to keep the intercept unpenalized.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) holding\n                   [p0,p1,...,p7] as described above\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure positivity\n    X = np.clip(X, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build the log-loss predictor\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_data\n      + p[4]*log_param\n      + p[5]*log_lr**2\n      + p[6]*log_bsz**2\n      + p[7]*(log_data * log_param)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain model via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (8,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n    logy      = np.log(y)\n\n    # build design matrix with 8 columns\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),              # intercept\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_data * log_param\n    ])\n\n    # center columns so intercept stays unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_c    = Phi - col_mean\n\n    # small ridge term for numerical stability\n    ridge = 1e-6\n    P     = Phi_c.shape[1]\n\n    # solve (Phi_c^T Phi_c + ridge*I) w_c = Phi_c^T logy\n    A = Phi_c.T.dot(Phi_c) + ridge * np.eye(P)\n    b = Phi_c.T.dot(logy)\n    w_c = np.linalg.solve(A, b)\n\n    # recover true intercept p0\n    # original: Phi\u00b7p = (Phi_c + col_mean)\u00b7w_c = Phi_c\u00b7w_c + (col_mean\u00b7w_c)\n    # so intercept = w_c[0] - sum(col_mean * w_c)\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n\n    params = w_c.copy()\n    params[0] = intercept\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (75.818), Excellent nmae (11.037)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# We work in the log\u2010domain of each feature and normalize to roughly [\u22121,1]\n# using fixed, precomputed minima and maxima to ensure stability.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the normalized log\u2010features.\n    Columns: [1,\n              logX_norm[:,0..F-1],\n              logX_norm[:,0..F-1]**2,\n              pairwise products logX_norm[:,i]*logX_norm[:,j] for i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    # linear terms\n    cols.append(logX_norm)\n    # squared terms\n    cols.append(logX_norm**2)\n    # cross\u2010interaction terms\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    # stack into (N, P)\n    Phi = np.column_stack(cols)\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    normalized\u2010log\u2010domain 2nd\u2010order polynomial.\n\n    Inputs:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + 4 + 4 + 6 = 15\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) / negatives\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                          # (N,4)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)     # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order normalized\u2010log polynomial via weighted\u2010ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0) / negatives\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                          # (N,4)\n    logy = np.log(y)                          # (N,)\n\n    # normalize features to zero\u2010center \u00b11 range\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)     # (N,15)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)                        # (P,P)\n    b = Phi.T.dot(logy)                       # (P,)\n\n    # adaptive ridge scale: average diagonal magnitude\n    avg_diag = np.trace(A) / P\n    base_ridge = 1e-3 * avg_diag\n\n    # build per\u2010term penalty weights:\n    #   intercept  \u2192 0 (no penalty)\n    #   linear     \u2192 light penalty (0.1)\n    #   squared+cross \u2192 heavier penalty (1.0)\n    F = 4\n    num_linear = F\n    num_squared = F\n    num_cross = F * (F - 1) // 2\n\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0\n    penalty[1:1 + num_linear] = 0.1\n    penalty[1 + num_linear : 1 + num_linear + num_squared + num_cross] = 1.0\n\n    # apply weighted ridge: A_ii += base_ridge * penalty[i]\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for stable normalization\n# Columns correspond to [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X > 0, take log, then normalize to approximately [-1,1]:\n        logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a quadratic design matrix in normalized log-space:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise products (6)]\n    Total columns = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = logXn.shape\n    # intercept\n    cols = [np.ones((N,), dtype=float)]\n    # linear\n    cols.append(logXn)\n    # squared\n    cols.append(logXn**2)\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(logXn[:, i] * logXn[:, j])\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15 (model coefficients)\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    # build design matrix\n    Phi = _build_design_matrix(logXn)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-loss domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic model via closed-form weighted ridge regression.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      array of length 15 (fitted coefficients)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # build design matrix in normalized log-space\n    Phi = _build_design_matrix(_normalize_log_features(X))\n    logy = np.log(np.maximum(y, 1e-12))\n\n    # normal equations for ridge regression\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    N, P = Phi.shape\n\n    # base ridge scaled by average diag of A\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag\n\n    # per-parameter penalties for stability\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0        # no penalty on intercept\n    # linear terms (indices 1-4): [lr, bsz, data, param]\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5-8)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9-14)\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # add ridge penalty to diagonal\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.7549, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe adopt a 6\u2010parameter power\u2010law with an asymptotic loss floor:\n\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\n\nwhere:\n  - P = non_embedding_param_size (model size)\n  - D = data_size (training tokens)\n  - bsz = batch size\n  - lr = learning rate\n\nParameters (6):\n  [ logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf ]\n\nWe optimize these parameters via L-BFGS-B on MSE in original loss space,\nensuring positivity of A and y_inf by parameterizing them in the log domain.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the 6-parameter power law.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6:\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {X.shape[1]}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n\n    # unpack parameters\n    logA, alpha_P, alpha_D, alpha_bsz, alpha_lr, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_bsz) * (lr ** alpha_lr)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law scaling law by minimizing MSE (original loss).\n\n    data_points:  array of shape (N,4)\n    loss_values:  array of shape (N,)\n    Returns:      1D array of learned parameters [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # ensure strictly positive for log transforms\n    y_safe = np.maximum(y, 1e-12)\n\n    # initialize parameters\n    y_min = np.min(y_safe)\n    # initial floor half of min loss\n    init_log_yinf = np.log(max(y_min * 0.1, 1e-12))\n    # initial amplitude to roughly match mean loss above floor\n    init_A = max(np.mean(y_safe) - np.exp(init_log_yinf), 1e-6)\n    init_logA = np.log(init_A)\n\n    # plausible exponents (negative for returns-to-scale, small magnitude)\n    init_alpha_P    = -0.2\n    init_alpha_D    = -0.2\n    init_alpha_bsz  = -0.1\n    init_alpha_lr   =  0.0\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_bsz,\n        init_alpha_lr,\n        init_log_yinf\n    ], dtype=float)\n\n    # bounds to keep parameters in reasonable ranges\n    # logA and log_yinf unbounded except float stability\n    # alphas typically between -5 and +5\n    bounds = [\n        (-20, 20),   # logA\n        (-5, 5),     # \u03b1_P\n        (-5, 5),     # \u03b1_D\n        (-5, 5),     # \u03b1_bsz\n        (-5, 5),     # \u03b1_lr\n        (-20, np.log(np.max(y_safe)))  # log_yinf <= log(max observed loss)\n    ]\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.780), Excellent nmae (1.660)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010polynomial scaling\u2010law model for LLM training hyperparameters.\n\nWe fit a second\u2010order polynomial in the log\u2010domain of the four inputs:\n  [lr, bsz, data_size, non_embedding_param_size]\n\nSteps:\n 1. Clip inputs >0, take logs.\n 2. Normalize each log\u2010feature to [-1,1] using fixed midpoints and half\u2010ranges.\n 3. Build a design matrix with intercept, linear, and second\u2010order (squared + cross) terms.\n 4. Fit via closed\u2010form ridge regression (no penalty on the intercept).\n 5. Predict by exponentiating the linear model output in log\u2010loss space.\n\nThis yields a 15\u2010parameter model that balances expressivity, numerical stability,\nand code readability.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [lr, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n# Midpoint and half\u2010range for normalization to [-1,1]\n_LOG_MID    = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALFR  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Precompute index pairs for second\u2010order monomials (including squares)\n_F = 4\n_PAIRS = list(combinations_with_replacement(range(_F), 2))  # length = 10\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix \u03a6 of shape (N, 1 + F + F*(F+1)/2) = (N,15):\n      [1,\n       logX_norm[:,0], ..., logX_norm[:,F-1],        # linear terms\n       logX_norm[:,i] * logX_norm[:,j] for (i,j) in _PAIRS  # second\u2010order\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + len(_PAIRS)\n    Phi = np.empty((N, P), dtype=float)\n    # Intercept column\n    Phi[:, 0] = 1.0\n    # Linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # Second\u2010order terms (squares and pairwise products)\n    idx = 1 + F\n    for i, j in _PAIRS:\n        Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n        idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15: coefficients in log\u2010loss space\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Handle single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != _F:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # Clip and log\u2010transform\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # Normalize to [-1,1]\n    logX_norm = (logX - _LOG_MID) / _LOG_HALFR\n\n    # Build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)         # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)                         # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients in log\u2010loss space\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Handle single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes\")\n\n    # Clip and log\u2010transform\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # Normalize features\n    logX_norm = (logX - _LOG_MID) / _LOG_HALFR\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX_norm)         # shape (N,15)\n\n    # Closed\u2010form ridge regression in log\u2010loss domain\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)                            # (15,15)\n    # Do not penalize intercept (index 0)\n    diag = np.ones(A.shape[0], dtype=float)\n    diag[0] = 0.0\n    A += ridge * np.diag(diag)\n\n    b = Phi.T.dot(logy)                           # (15,)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# Precomputed log\u2010domain feature bounds for stable normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of features and second\u2010order index pairs\n_F      = 4\n_PAIRS  = list(combinations_with_replacement(range(_F), 2))  # [(0,0),(0,1),...,(3,3)]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X > 0, take logs, then normalize each feature to roughly [-1,1]:\n        (logX - mid) / half\n    \"\"\"\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    return (logX - _LOG_MID) / _LOG_HALF\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a quadratic design matrix \u03a6 of shape (N, 1 + F + F*(F+1)/2) = (N,15):\n      - intercept\n      - F linear terms\n      - F*(F+1)/2 second\u2010order terms (squares + cross\u2010products)\n    \"\"\"\n    N = logXn.shape[0]\n    P = 1 + _F + len(_PAIRS)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logXn\n    # second\u2010order terms\n    idx = 1 + _F\n    for i, j in _PAIRS:\n        Phi[:, idx] = logXn[:, i] * logXn[:, j]\n        idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15: coefficients in log-loss space\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != _F:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize features in log\u2010domain to [-1,1]\n    logXn = _normalize_log_features(X)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logXn)   # (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)               # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized-log quadratic model via adaptive ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients in log-loss space\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[0] != y.size or X.shape[1] != _F:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes\")\n\n    # normalize features\n    logXn = _normalize_log_features(X)\n\n    # build design matrix\n    Phi = _build_design_matrix(logXn)   # (N,15)\n\n    # log-transform target\n    logy = np.log(np.maximum(y, 1e-12))  # (N,)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                   # (15,15)\n    b = Phi.T.dot(logy)                  # (15,)\n\n    # adaptive ridge scaling: \u03bb_base = \u03b1 * (trace(A)/P)\n    Pdim       = A.shape[0]\n    avg_diag   = np.trace(A) / Pdim\n    lambda_base = 1e-4 * avg_diag\n\n    # build per-parameter penalties:\n    #   intercept \u2192 0\n    #   linear    \u2192 0.1\n    #   2nd order \u2192 1.0\n    penalties = np.ones(Pdim, dtype=float)\n    penalties[0] = 0.0\n    penalties[1:1+_F] = 0.1\n    penalties[1+_F:] = 1.0\n\n    # apply ridge penalties on diagonal\n    A.flat[::Pdim+1] += lambda_base * penalties\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- Normalizes each log\u2010feature to [-1,1] using fixed midpoints and half\u2010ranges for stability across scales.\n- Constructs a 15-parameter second\u2010order polynomial (intercept + 4 linear + 10 quadratic) in the normalized log-domain.\n- Uses adaptive ridge regression with \u03bb_base \u221d trace(Phi\u1d40Phi)/P for numerical robustness.\n- Applies differential penalties: no penalty on intercept, light penalty on linear terms, stronger penalty on second\u2010order terms to avoid overfitting and improve generalization.\n- Closed\u2010form solution via normal equations for efficiency.\n"]}}}