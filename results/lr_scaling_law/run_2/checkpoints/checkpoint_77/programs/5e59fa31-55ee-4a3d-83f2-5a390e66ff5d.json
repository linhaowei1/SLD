{"id": "5e59fa31-55ee-4a3d-83f2-5a390e66ff5d", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a normalized second\u2010order polynomial in the log\u2010domain:\n  log(loss) \u2248 w0 \n            + \u03a3_i w_i\u00b7x\u0302_i\n            + \u03a3_i w_{ii}\u00b7x\u0302_i^2\n            + \u03a3_{i<j} w_{ij}\u00b7x\u0302_i\u00b7x\u0302_j\n\nwhere x\u0302_i = (log(feature_i) - min_i) / range_i normalizes each log\u2010feature to [0,1].\nWe fit this compact 15\u2010parameter model via closed\u2010form ridge regression\nfor numerical stability and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,  2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a second\u2010order polynomial in normalized log\u2010features.\n    Columns are:\n      [1,\n       x\u0302\u2081, x\u0302\u2082, x\u0302\u2083, x\u0302\u2084,\n       x\u0302\u2081\u00b2, x\u0302\u2082\u00b2, x\u0302\u2083\u00b2, x\u0302\u2084\u00b2,\n       x\u0302\u2081\u00b7x\u0302\u2082, x\u0302\u2081\u00b7x\u0302\u2083, x\u0302\u2081\u00b7x\u0302\u2084,\n       x\u0302\u2082\u00b7x\u0302\u2083, x\u0302\u2082\u00b7x\u0302\u2084,\n       x\u0302\u2083\u00b7x\u0302\u2084]\n    \"\"\"\n    N, F = logX_norm.shape\n    # intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length P = 15\n\n    Returns:\n      y_pred:      numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per point, got shape {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log-transform\n    logX = np.log(X)\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and apply linear model in log-loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    logy_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params:      numpy array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # log-transform targets\n    logy = np.log(y)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    N, P = Phi.shape\n\n    # normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adapt ridge strength to scale of A\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all weights except intercept\n    diag = np.eye(P, dtype=A.dtype)\n    diag[0, 0] = 0.0\n    A += ridge * diag\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "a9deac33-b3b5-43b4-b176-9dcce004d976", "generation": 3, "timestamp": 1754805904.460786, "iteration_found": 40, "metrics": {"nmse": 0.43755380071157396, "nmae": 0.6956697585866322, "r2": 0.562446199288426, "combined_score": 0.6956261390043353}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.792817692100039, "nmae": 3.029765271793809, "r2": -4.792817692100039, "combined_score": 0.1472143144902869}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 5.7928\n- nmae: 3.0298\n- r2: -4.7928\n- combined_score: 0.1472\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding squared terms and pairwise interactions.  Normalizing each log\u2010feature\nto [0,1] based on known domain ranges improves numerical stability, and\nwe fit via closed\u2010form ridge regression for efficiency.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and ranges for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix containing:\n      - intercept\n      - linear terms (F)\n      - squared terms (F)\n      - pairwise interactions (F*(F-1)/2)\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds:       array (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.maximum(X, 1e-12)          # avoid log(0)\n    logX = np.log(X)                  # shape (N,4)\n\n    # normalize each feature to [0,1] based on known log\u2010ranges\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)             # shape (N,)\n    return np.exp(log_pred)           # back to original loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                  # shape (N,4)\n    logy = np.log(y)                  # shape (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge    # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 2 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability, numerical robustness, and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 with columns:\n      [1,\n       logX_norm_i for each feature,\n       (logX_norm_i)^2 for each feature,\n       logX_norm_i * logX_norm_j for all i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interaction terms\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic model in log\u2010space.\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n    Returns:\n      preds:       array of shape (N,) of predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per point, got {X.shape[1]}\")\n    # avoid zeros\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution in the log\u2010loss domain.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatch between number of points and losses.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # log\u2010transform target\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge on diagonal except intercept term\n    diag = np.eye(A.shape[0], dtype=A.dtype)\n    diag[0, 0] = 0.0\n    A += ridge * diag\n    b = Phi.T.dot(logy)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 3 (Score: 0.5978)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with ridge regularization.\n\nWe model log(loss) as a polynomial up to degree 2 in the log of each feature:\n  log(loss) \u2248 w0 \n            + \u03a3_i w_i\u00b7log(x_i)\n            + \u03a3_i w_{ii}\u00b7[log(x_i)]^2\n            + \u03a3_{i<j} w_{ij}\u00b7log(x_i)\u00b7log(x_j)\n\nThis captures both diminishing returns (squared terms) and pairwise interactions.\nWe fit via closed\u2010form ridge regression for stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 (linear) + 4 (squared) + 6 (pairwise) = 15\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)          # shape (N,4)\n    N, F = logX.shape\n\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n\n    # linear terms: log(x_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms: [log(x_i)]^2\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms: log(x_i)*log(x_j) for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n\n    # number of parameters: intercept + 4 linear + 4 squared + 6 pairwise\n    P = 1 + F + F + (F*(F-1))//2\n\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # intercept unpenalized\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a full second\u2010order polynomial in the log of each feature\n(including squared terms and pairwise interactions).  This richer yet\nstill compact representation is fitted via closed\u2010form ridge regression\nfor numerical stability and parameter\u2010efficient generalization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain\n    second\u2010order polynomial.\n\n    Arguments:\n    - data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n    - params:      1D array of length P = 1 + F + F*(F+1)/2,\n                   where F=4.  That is:\n                   intercept\n                   + 4 main effects (log features)\n                   + 4 squared terms (log(feature)^2)\n                   + 6 pairwise cross terms (log(f_i)*log(f_j), i<j)\n\n    Returns:\n    - preds:      array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zero or negative inputs\n    X = np.maximum(X, 1e-12)\n    # log-transform features\n    logX = np.log(X)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + (F*(F+1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # build design matrix\n    Phi = np.empty((N, P_expected), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared + pairwise terms\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log domain -> back to original\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above second\u2010order log\u2010domain polynomial via ridge regression.\n\n    Arguments:\n    - data_points: array of shape (N,4)\n    - loss_values: array of shape (N,)\n\n    Returns:\n    - params:      1D array of learned parameters of length\n                   1 + 4 + (4*5)//2 = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    N, F = logX.shape\n\n    # number of parameters: intercept + main + squared + pairwise\n    P = 1 + F + (F*(F+1))//2\n\n    # build design matrix\n    Phi = np.empty((N, P), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag (except intercept)\n    diag_idxs = np.diag_indices(P)\n    A[diag_idxs] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.8624)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling-law discovery for LLM training:\nWe model log(loss) as a second-order polynomial in the log of each feature\n(including squares and pairwise interactions) and fit via closed-form\nridge regression with adaptive regularization for stability and parameter efficiency.\n\"\"\"\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix for a second-order polynomial in the log-domain.\n    Features: [1,\n               log(x\u2081), \u2026, log(x_F),\n               log(x\u2081)^2, log(x\u2081)*log(x\u2082), \u2026, log(x_F)^2]\n    Input:\n      logX: array of shape (N, F)\n    Returns:\n      Phi: array of shape (N, P) with P = 1 + F + F*(F+1)/2\n    \"\"\"\n    N, F = logX.shape\n    P = 1 + F + (F * (F + 1)) // 2\n    Phi = np.ones((N, P), dtype=float)\n    # first-order terms\n    Phi[:, 1:1+F] = logX\n    # second-order terms: squares and pairwise products\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from [lr, bsz, data_size, non_embedding_param_size]\n    via a second-order polynomial in the log-domain.\n\n    Args:\n      data_points: np.ndarray of shape (N,4)\n      params:      np.ndarray of shape (P,), where\n                   P = 1 + 4 + 4*(4+1)/2 = 15\n                   = intercept\n                     + 4 main-effect weights\n                     + 10 second-order weights (4 squares + 6 interactions)\n    Returns:\n      preds: np.ndarray of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    Phi = _build_design_matrix(logX)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the second-order polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: np.ndarray of shape (N,4)\n      loss_values: np.ndarray of shape (N,)\n    Returns:\n      params: np.ndarray of shape (P,), P = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX)    # shape (N, P)\n    N, P = Phi.shape\n\n    # normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge: scale by trace(A)/P to maintain relative regularization\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding squared terms and pairwise interactions.  Normalizing each log\u2010feature\nto [0,1] based on known domain ranges improves numerical stability, and\nwe fit via closed\u2010form ridge regression for efficiency.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and ranges for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix containing:\n      - intercept\n      - linear terms (F)\n      - squared terms (F)\n      - pairwise interactions (F*(F-1)/2)\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds:       array (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.maximum(X, 1e-12)          # avoid log(0)\n    logX = np.log(X)                  # shape (N,4)\n\n    # normalize each feature to [0,1] based on known log\u2010ranges\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)             # shape (N,)\n    return np.exp(log_pred)           # back to original loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                  # shape (N,4)\n    logy = np.log(y)                  # shape (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge    # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                  [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log of zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # targeted interactions\n    lr_bsz = log_lr * log_bsz\n    D_P    = log_D  * log_P\n\n    # linear model in log-domain\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_D\n      + p[4]*log_P\n      + p[5]*lr_bsz\n      + p[6]*D_P\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr * log_bsz,\n        log_D  * log_P\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices_from(A)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # exempt intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability, numerical robustness, and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 with columns:\n      [1,\n       logX_norm_i for each feature,\n       (logX_norm_i)^2 for each feature,\n       logX_norm_i * logX_norm_j for all i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interaction terms\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic model in log\u2010space.\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n    Returns:\n      preds:       array of shape (N,) of predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per point, got {X.shape[1]}\")\n    # avoid zeros\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution in the log\u2010loss domain.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatch between number of points and losses.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # log\u2010transform target\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge on diagonal except intercept term\n    diag = np.eye(A.shape[0], dtype=A.dtype)\n    diag[0, 0] = 0.0\n    A += ridge * diag\n    b = Phi.T.dot(logy)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.8624, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling-law discovery for LLM training:\nWe model log(loss) as a second-order polynomial in the log of each feature\n(including squares and pairwise interactions) and fit via closed-form\nridge regression with adaptive regularization for stability and parameter efficiency.\n\"\"\"\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix for a second-order polynomial in the log-domain.\n    Features: [1,\n               log(x\u2081), \u2026, log(x_F),\n               log(x\u2081)^2, log(x\u2081)*log(x\u2082), \u2026, log(x_F)^2]\n    Input:\n      logX: array of shape (N, F)\n    Returns:\n      Phi: array of shape (N, P) with P = 1 + F + F*(F+1)/2\n    \"\"\"\n    N, F = logX.shape\n    P = 1 + F + (F * (F + 1)) // 2\n    Phi = np.ones((N, P), dtype=float)\n    # first-order terms\n    Phi[:, 1:1+F] = logX\n    # second-order terms: squares and pairwise products\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from [lr, bsz, data_size, non_embedding_param_size]\n    via a second-order polynomial in the log-domain.\n\n    Args:\n      data_points: np.ndarray of shape (N,4)\n      params:      np.ndarray of shape (P,), where\n                   P = 1 + 4 + 4*(4+1)/2 = 15\n                   = intercept\n                     + 4 main-effect weights\n                     + 10 second-order weights (4 squares + 6 interactions)\n    Returns:\n      preds: np.ndarray of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    Phi = _build_design_matrix(logX)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the second-order polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: np.ndarray of shape (N,4)\n      loss_values: np.ndarray of shape (N,)\n    Returns:\n      params: np.ndarray of shape (P,), P = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX)    # shape (N, P)\n    N, P = Phi.shape\n\n    # normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge: scale by trace(A)/P to maintain relative regularization\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.160), Excellent nmae (2.209)\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with ridge regularization.\n\nWe model log(loss) as a polynomial up to degree 2 in the log of each feature:\n  log(loss) \u2248 w0 \n            + \u03a3_i w_i\u00b7log(x_i)\n            + \u03a3_i w_{ii}\u00b7[log(x_i)]^2\n            + \u03a3_{i<j} w_{ij}\u00b7log(x_i)\u00b7log(x_j)\n\nThis captures both diminishing returns (squared terms) and pairwise interactions.\nWe fit via closed\u2010form ridge regression for stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 (linear) + 4 (squared) + 6 (pairwise) = 15\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)          # shape (N,4)\n    N, F = logX.shape\n\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n\n    # linear terms: log(x_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms: [log(x_i)]^2\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms: log(x_i)*log(x_j) for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n\n    # number of parameters: intercept + 4 linear + 4 squared + 6 pairwise\n    P = 1 + F + F + (F*(F-1))//2\n\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # intercept unpenalized\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nWe fit a 6\u2010parameter power law with an asymptotic loss floor:\n    y_pred = y_inf + A * (P / P0)^\u03b1P * (D / D0)^\u03b1D * (bsz / B0)^\u03b1B * (lr / L0)^\u03b1L\n\nParameters are reparameterized for numerical stability:\n    p = [ logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf ]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Fixed feature\u2010scaling constants (independent of data)\n_P_SCALE   = 1e8       # non\u2010embedding params scale\n_D_SCALE   = 1e10      # data size scale\n_BSZ_SCALE = 512.0     # batch size scale\n_LR_SCALE  = 1e-3      # learning rate scale\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u20106 array [logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf]\n\n    Returns:\n      y_pred: shape (N,) predicted loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per row, got {X.shape[1]}\")\n    # unpack and scale features\n    lr    = X[:, 0] / _LR_SCALE\n    bsz   = X[:, 1] / _BSZ_SCALE\n    D     = X[:, 2] / _D_SCALE\n    Psize = X[:, 3] / _P_SCALE\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.shape[0]}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute power\u2010law term and add asymptotic floor\n    y_pred = y_inf + A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE.\n\n    Returns optimized params: [logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # scale features once (for speed in objective)\n    X_scaled = np.column_stack([\n        X[:, 0] / _LR_SCALE,\n        X[:, 1] / _BSZ_SCALE,\n        X[:, 2] / _D_SCALE,\n        X[:, 3] / _P_SCALE\n    ])\n\n    # sensible initial guesses\n    y_min = max(np.min(y), 1e-8)\n    init_yinf = y_min * 0.1\n    init_A    = max(np.mean(y) - init_yinf, y_min * 0.1)\n    init_exponents = np.array([-0.2, -0.2, -0.1, -0.1], dtype=float)\n    p0 = np.array([\n        np.log(init_A),\n        init_exponents[0],\n        init_exponents[1],\n        init_exponents[2],\n        init_exponents[3],\n        np.log(init_yinf)\n    ], dtype=float)\n\n    # bounds for (logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf)\n    bounds = [\n        (None, None),            # logA\n        (-5.0, 5.0),             # \u03b1P\n        (-5.0, 5.0),             # \u03b1D\n        (-5.0, 5.0),             # \u03b1B\n        (-5.0, 5.0),             # \u03b1L\n        (np.log(1e-12), None)    # log_yinf\n    ]\n\n    def objective(p):\n        # unpack scaled features\n        logA, aP, aD, aB, aL, log_yinf = p\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        lr_s, bsz_s, D_s, P_s = X_scaled.T\n        y_pred = y_inf + A * (P_s ** aP) * (D_s ** aD) * (bsz_s ** aB) * (lr_s ** aL)\n        # mean squared error in original loss domain\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 500, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a normalized second\u2010order polynomial in the log\u2010domain:\n  log(loss) \u2248 w0 \n            + \u03a3_i w_i\u00b7x\u0302_i\n            + \u03a3_i w_{ii}\u00b7x\u0302_i^2\n            + \u03a3_{i<j} w_{ij}\u00b7x\u0302_i\u00b7x\u0302_j\n\nwhere x\u0302_i = (log(feature_i) - min_i) / range_i normalizes each log\u2010feature to [0,1].\nWe fit this compact 15\u2010parameter model via closed\u2010form ridge regression\nfor numerical stability and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,  2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a second\u2010order polynomial in normalized log\u2010features.\n    Columns are:\n      [1,\n       x\u0302\u2081, x\u0302\u2082, x\u0302\u2083, x\u0302\u2084,\n       x\u0302\u2081\u00b2, x\u0302\u2082\u00b2, x\u0302\u2083\u00b2, x\u0302\u2084\u00b2,\n       x\u0302\u2081\u00b7x\u0302\u2082, x\u0302\u2081\u00b7x\u0302\u2083, x\u0302\u2081\u00b7x\u0302\u2084,\n       x\u0302\u2082\u00b7x\u0302\u2083, x\u0302\u2082\u00b7x\u0302\u2084,\n       x\u0302\u2083\u00b7x\u0302\u2084]\n    \"\"\"\n    N, F = logX_norm.shape\n    # intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length P = 15\n\n    Returns:\n      y_pred:      numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per point, got shape {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log-transform\n    logX = np.log(X)\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and apply linear model in log-loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    logy_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params:      numpy array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # log-transform targets\n    logy = np.log(y)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    N, P = Phi.shape\n\n    # normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adapt ridge strength to scale of A\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all weights except intercept\n    diag = np.eye(P, dtype=A.dtype)\n    diag[0, 0] = 0.0\n    A += ridge * diag\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}