{"id": "946dfc0b-9e99-45b2-8e46-027929588c6a", "code": "import numpy as np\n\n# Precomputed log-domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embedding param size min\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embedding param size max\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, log-transform, then normalize each feature to [0,1]\n    using precomputed log-domain minima and ranges.\n    \"\"\"\n    # ensure numeric stability\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    # clamp in [0,1]\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix on normalized logs u.\n    Columns (total 15):\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # intercept + 4 linear + 4 squares + 6 pairwise interactions = 15\n    P = 1 + F + F + (F*(F-1)//2)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # normalize inputs and build design matrix\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back-transform\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"data_points must be (N,4) and loss_values length N; got {X.shape}, {y.shape}\")\n    # clamp to avoid log(0)\n    y_clipped = np.clip(y, 1e-12, None)\n    # build design matrix\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    # log-transform targets\n    logy = np.log(y_clipped)\n    # normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    # adaptive ridge regularization: \u03bb = 1e-6 * trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "9c593cd8-ed0b-4311-af46-5f70f77809b4", "generation": 3, "timestamp": 1754806937.0080342, "iteration_found": 164, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.772227422596041, "nmae": 1.6562210455328756, "r2": -0.772227422596041, "combined_score": 0.36072076621461097}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7722\n- nmae: 1.6562\n- r2: -0.7722\n- combined_score: 0.3607\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding param size min\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding param size max\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for [0,1] normalization\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X>0, take log, then normalize to [0,1] using precomputed mins/ranges.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in normalized log\u2010domain.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Returns an (N,15) array.\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Prepare output\n    Phi = np.empty((N, 15), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = u**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized second\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array_like of shape (N,4) columns=[lr, bsz, data_size, non_embedding_param_size]\n      params:      array_like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n\n    # normalize inputs\n    u = _normalize_log_features(X)\n    # build design matrix\n    Phi = _build_design_matrix(u)\n    # predict in log\u2010loss domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array_like of shape (N,4)\n      loss_values: array_like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (fitted coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"data_points must be (N,4) and loss_values length N; got {X.shape}, {y.shape}\")\n\n    # normalize inputs\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n\n    # log\u2010transform targets\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,      # lr min\n    16.0,        # batch size min\n    4e9,         # data size min\n    2.14e8       # non-embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,      # lr max\n    4096.0,      # batch size max\n    1e11,        # data size max\n    1e9          # non-embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    using the precomputed log-domain minima and ranges.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix on normalized logs u.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    where u has shape (N,4). Returns Phi of shape (N,15).\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 input features, got {F}\")\n    # total features: 1 intercept + 4 linear + 4 squares + 6 interactions = 15\n    P = 1 + F + F + (F*(F-1)//2)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # build features and predict\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression\n    in the log-loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients in log-loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # clamp to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # build design matrix in normalized log-domain\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge regularization (no intercept penalty)\n    P = A.shape[0]\n    lam = 1e-6 * np.trace(A) / P\n    I = np.eye(P, dtype=float)\n    I[0, 0] = 0.0\n    A += lam * I\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1].\n    Input:\n      X: array of shape (N,4) or (4,)\n    Returns:\n      x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor values to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip to [-1,1] to avoid extrapolation extremes\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns: [1,\n                x1, x2, x3, x4,            # linear\n                x1^2, x2^2, x3^2, x4^2,    # squared\n                x1\u00b7x2, x1\u00b7x3, x1\u00b7x4,       # interactions\n                x2\u00b7x3, x2\u00b7x4,\n                x3\u00b7x4]\n    Input:\n      x: array of shape (N,4)\n    Returns:\n      Phi: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape  # F must be 4\n    # total parameters = 1 + F + F + (F*(F-1))//2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms x_i\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms x_i^2\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions x_i * x_j for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    interaction coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain, then exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15:\n              [intercept,\n               linear coeffs (4),\n               squared coeffs (4),\n               interaction coeffs (6)]\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients in log-loss domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5553)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via an 8-parameter log-domain model.\n\n    We model:\n      log(loss) = \u03b20\n                + \u03b2_lr  * log(lr)\n                + \u03b2_bsz * log(bsz)\n                + \u03b2_D   * log(data_size)\n                + \u03b2_P   * log(non_embedding_param_size)\n                + \u03b2_D2  * [log(data_size)]^2\n                + \u03b2_P2  * [log(non_embedding_param_size)]^2\n                + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n\n    # extract features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with 8 columns\n    # [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # return on original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # extract and log-transform\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # only penalize non-intercept terms\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as\n    log(loss) = \u03b20\n              + \u03b2_lr    * log(lr)\n              + \u03b2_bsz   * log(batch_size)\n              + \u03b2_D     * log(data_size)\n              + \u03b2_P     * log(non_embedding_param_size)\n              + \u03b2_D2    * [log(data_size)]^2\n              + \u03b2_P2    * [log(non_embedding_param_size)]^2\n              + \u03b2_DP    * log(data_size) * log(non_embedding_param_size)\n\nThis parameter-efficient form captures the primary scaling\neffects and is fitted via small-ridge regression in closed form.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8,\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # compute log-loss and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with small ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (row/col 0)\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,      # lr min\n    16.0,        # batch size min\n    4e9,         # data size min\n    2.14e8       # non-embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,      # lr max\n    4096.0,      # batch size max\n    1e11,        # data size max\n    1e9          # non-embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    using the precomputed log-domain minima and ranges.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix on normalized logs u.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    where u has shape (N,4). Returns Phi of shape (N,15).\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 input features, got {F}\")\n    # total features: 1 intercept + 4 linear + 4 squares + 6 interactions = 15\n    P = 1 + F + F + (F*(F-1)//2)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # build features and predict\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression\n    in the log-loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients in log-loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # clamp to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # build design matrix in normalized log-domain\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge regularization (no intercept penalty)\n    P = A.shape[0]\n    lam = 1e-6 * np.trace(A) / P\n    I = np.eye(P, dtype=float)\n    I[0, 0] = 0.0\n    A += lam * I\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                   [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),   # intercept\n        log_lr,                    # main effect lr\n        log_bsz,                   # main effect bsz\n        log_D,                     # main effect data_size\n        log_P,                     # main effect param_size\n        log_lr  * log_bsz,         # interaction lr*bsz\n        log_D   * log_P           # interaction data_size*param_size\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching sizes and 2D input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr  * log_bsz,\n        log_D   * log_P\n    ])\n\n    # closed-form ridge regression (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize only the non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling-law model for LLM training:\nWe work in the log\u2013domain and fit a quadratic polynomial\n(including main effects, squared terms, and pairwise interactions)\nvia closed\u2010form ridge regression for numerical stability.\nThis richer basis can capture saturation and curvature effects\nwhile remaining linear in the parameters.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a log-domain quadratic polynomial:\n      log_loss \u2248 p0\n               + sum_i p_i * xi\n               + sum_i p_{ii} * xi^2\n               + sum_{i<j} p_{ij} * xi * xj\n    where xi = log(feature_i).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N, 4)\n    N, F = logX.shape\n\n    p = np.ravel(params).astype(float)\n    # total params = 1 + F main + F squared + F*(F-1)/2 interactions\n    P_exp = 1 + F + F + (F*(F-1))//2\n    if p.size != P_exp:\n        raise ValueError(f\"Expected {P_exp} params, got {p.size}\")\n\n    # build design matrix\n    Phi = np.ones((N, P_exp), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared effects\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log-domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the quadratic log-domain scaling law via ridge regression.\n    Returns parameter vector of length P = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n    N, F = logX.shape\n\n    # construct design matrix\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    Phi[:, 1+F:1+2*F] = logX**2\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (small to avoid overfitting higher\u2010order terms)\n    # no penalty on intercept\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag, except intercept term\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Mixed iteration strategies\n\n\n### Inspiration 4 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as\n    log(loss) = \u03b20\n              + \u03b2_lr    * log(lr)\n              + \u03b2_bsz   * log(batch_size)\n              + \u03b2_D     * log(data_size)\n              + \u03b2_P     * log(non_embedding_param_size)\n              + \u03b2_D2    * [log(data_size)]^2\n              + \u03b2_P2    * [log(non_embedding_param_size)]^2\n              + \u03b2_DP    * log(data_size) * log(non_embedding_param_size)\n\nThis parameter-efficient form captures the primary scaling\neffects and is fitted via small-ridge regression in closed form.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8,\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # compute log-loss and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with small ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (row/col 0)\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 5 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding param size min\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding param size max\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for [0,1] normalization\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X>0, take log, then normalize to [0,1] using precomputed mins/ranges.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in normalized log\u2010domain.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Returns an (N,15) array.\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # Prepare output\n    Phi = np.empty((N, 15), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = u**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized second\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array_like of shape (N,4) columns=[lr, bsz, data_size, non_embedding_param_size]\n      params:      array_like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n\n    # normalize inputs\n    u = _normalize_log_features(X)\n    # build design matrix\n    Phi = _build_design_matrix(u)\n    # predict in log\u2010loss domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array_like of shape (N,4)\n      loss_values: array_like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (fitted coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"data_points must be (N,4) and loss_values length N; got {X.shape}, {y.shape}\")\n\n    # normalize inputs\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n\n    # log\u2010transform targets\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model the LM loss as an asymptotic floor plus a joint power\u2010law in\nmodel size (P), data size (D), batch size (bsz), and learning rate (lr):\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\nParameters are internally reparameterized as:\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\nfor numerical stability. Fitting is done via L-BFGS-B on the original loss MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via an asymptotic\n    power\u2010law model.\n\n    data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, alpha_P, alpha_D, alpha_b, alpha_l, log_yinf = p\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # exponentiate the intercept and floor\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term and add asymptotic floor\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_b) * (lr ** alpha_l)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter asymptotic power\u2010law scaling law by minimizing MSE.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes.\")\n\n    # clamp losses to positive range\n    y = np.maximum(y, 1e-12)\n\n    # initial guess\n    min_y = np.min(y)\n    init_logA     = 0.0\n    init_alpha_P  = -0.2   # more params \u2192 lower loss\n    init_alpha_D  = -0.1   # more data \u2192 lower loss\n    init_alpha_b  = -0.05  # larger batch \u2192 slightly lower loss\n    init_alpha_l  = -0.1   # higher lr (in range) \u2192 lower loss\n    init_log_yinf = np.log(min_y * 0.1 + 1e-8)\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_b,\n        init_alpha_l,\n        init_log_yinf\n    ], dtype=float)\n\n    # objective: mean squared error on original loss\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # bounds to keep exponents in a reasonable range and floor \u2265 0\n    bnds = [\n        (None, None),          # logA\n        (-5.0, 5.0),           # \u03b1_P\n        (-5.0, 5.0),           # \u03b1_D\n        (-5.0, 5.0),           # \u03b1_b\n        (-5.0, 5.0),           # \u03b1_l\n        (np.log(1e-12), np.log(min_y))  # log_y_inf\n    ]\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'ftol':1e-12, 'maxiter':1000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Precomputed log-domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non-embedding param size min\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non-embedding param size max\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, log-transform, then normalize each feature to [0,1]\n    using precomputed log-domain minima and ranges.\n    \"\"\"\n    # ensure numeric stability\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    # clamp in [0,1]\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix on normalized logs u.\n    Columns (total 15):\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # intercept + 4 linear + 4 squares + 6 pairwise interactions = 15\n    P = 1 + F + F + (F*(F-1)//2)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # normalize inputs and build design matrix\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back-transform\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"data_points must be (N,4) and loss_values length N; got {X.shape}, {y.shape}\")\n    # clamp to avoid log(0)\n    y_clipped = np.clip(y, 1e-12, None)\n    # build design matrix\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    # log-transform targets\n    logy = np.log(y_clipped)\n    # normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    # adaptive ridge regularization: \u03bb = 1e-6 * trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}