{"id": "00da0353-6ad8-43bf-bbea-b7bf78311f53", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "bf975c80-67f8-4572-a406-0b9f7d0c936a", "generation": 2, "timestamp": 1754717354.501377, "iteration_found": 12, "metrics": {"nmse": 0.25432593498119854, "nmae": 0.44897617359222314, "r2": 0.7456740650188014, "combined_score": 0.7972409499887996}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.39389171575651705, "nmae": 0.5087149307690798, "r2": 0.606108284243483, "combined_score": 0.7174158427774733}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5565)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a concise revision that enriches the log-space power\u2010law model with second\u2010order (squared) log\u2010features to capture mild curvature, retains a small ridge penalty for stability, and keeps the same API.  We always fit the nine\u2010parameter model (intercept + 4 linear log\u2010terms + 4 squared log\u2010terms) unless you explicitly pass back a 5\u2010parameter vector (old style) in which case we fall back to the pure power\u2010law.\n\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\n\nKey points:\n\n- We build a single design matrix Z containing 1, log-features, and squared log-features (total 1+4+4=9 columns).\n- A small ridge term (\u03bb=1e\u22123) ensures numerical stability while leaving the intercept unpenalized.\n- The code falls back to the original five\u2010parameter power\u2010law if you pass in a length-5 parameter vector.\n- Both functions maintain their original signatures and vectorized operation."]}}}