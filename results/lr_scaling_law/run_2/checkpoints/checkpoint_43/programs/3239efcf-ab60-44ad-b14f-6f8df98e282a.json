{"id": "3239efcf-ab60-44ad-b14f-6f8df98e282a", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a generalized power\u2010law with a quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n    Returns loss = exp(log_pred).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid zero or negative before taking log\n    eps = 1e-12\n    lr          = np.maximum(X[:, 0], eps)\n    bsz         = np.maximum(X[:, 1], eps)\n    data_size   = np.maximum(X[:, 2], eps)\n    param_size  = np.maximum(X[:, 3], eps)\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build design matrix: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)]\n    phi = np.stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ], axis=1)  # shape (N,6)\n\n    # Linear prediction in log\u2010space and exponentiate\n    log_pred = phi.dot(params)   # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                     + w4*log(data_size) + w5*log(param_size)\n    Solves (\u03a6\u1d40\u03a6 + \u03bbI)p = \u03a6\u1d40 log(y) for p.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n    log_y     = np.log(y)\n\n    N = X.shape[0]\n    # Assemble design matrix\n    phi = np.stack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ], axis=1)  # shape (N,6)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    M = phi.shape[1]\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(log_y)                 # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7df953a2-f59c-4b4d-bc82-06c1a43c8ff4", "generation": 1, "timestamp": 1754717547.3828974, "iteration_found": 40, "metrics": {"nmse": 0.3547571147883122, "nmae": 0.5064454654265311, "r2": 0.6452428852116878, "combined_score": 0.7381396924099234}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.42512111103884e+23, "nmae": 755534900566.116, "r2": -5.42512111103884e+23, "combined_score": 1.8432768219040055e-24}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 542512111103883970871296.0000\n- nmae: 755534900566.1160\n- r2: -542512111103883970871296.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3548, nmae: 0.5064, r2: 0.6452, combined_score: 0.7381\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a generalized power\u2010law with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid zero or negative values before logging\n    eps = 1e-12\n    lr          = np.maximum(X[:, 0], eps)\n    bsz         = np.maximum(X[:, 1], eps)\n    data_size   = np.maximum(X[:, 2], eps)\n    param_size  = np.maximum(X[:, 3], eps)\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build feature matrix: [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Linear model in log\u2010space\n    log_pred = phi.dot(params)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                     + w4*log(data_size) + w5*log(param_size)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n    log_y     = np.log(y)\n\n    # Build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    # Solve (\u03c6\u1d40\u03c6 + \u03bbI) p = \u03c6\u1d40 log_y\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(log_y)                 # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3548), Performs well on nmae (0.5064), Performs well on r2 (0.6452), Performs well on combined_score (0.7381)\n\n\n### Program 2 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized, ridge\u2010regularized\n    power\u2010law in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    The features are standardized (zero\u2010mean, unit\u2010variance) before fitting\n    for improved numerical stability, then weights are un\u2010standardized.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    N, F = logX.shape  # F should be 4\n\n    # Standardize each log\u2010feature for numerical conditioning\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    sigma[sigma < 1e-6] = 1.0                                     # avoid division by zero\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # Design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1), dtype=np.float64), Z_feat], axis=1)  # (N,5)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = F + 1\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg      # (5,5)\n    b = Z.T.dot(logy)                      # (5,)\n\n    # Solve for standardized parameters\n    theta = np.linalg.solve(A, b)         # (5,)\n    intercept_std = theta[0]\n    w_std         = theta[1:]             # (4,)\n\n    # Un\u2010standardize weights\n    w = w_std / sigma                     # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)\n\n    # Pack into single array: [intercept, w1, w2, w3, w4]\n    params = np.empty(P, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n### Program 3 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized, ridge\u2010regularized\n    power\u2010law in log\u2010space:\n        log(loss) = intercept + \u03a3_i w_i * log(x_i)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) = intercept + \u03a3_i w_i * log(x_i)\n    Features are standardized for numerical stability and then weights are\n    un\u2010standardized.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # log\u2010space transform\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    # standardize features\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    # avoid division by zero\n    sigma[sigma < 1e-6] = 1.0\n    Z = (logX - mu) / sigma                                       # (N,4)\n\n    # build design matrix [1, standardized log\u2010features]\n    N = Z.shape[0]\n    ones = np.ones((N,1), dtype=np.float64)\n    Z_design = np.hstack([ones, Z])                               # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    P = Z_design.shape[1]  # 5\n    reg = np.eye(P, dtype=np.float64) * lam\n    reg[0,0] = 0.0\n\n    # normal equations solve\n    A = Z_design.T.dot(Z_design) + reg                            # (5,5)\n    b = Z_design.T.dot(logy)                                      # (5,)\n    theta = np.linalg.solve(A, b)                                 # (5,)\n\n    # un\u2010standardize weights\n    intercept_std = theta[0]\n    w_std = theta[1:]                                             # (4,)\n    w = w_std / sigma                                             # (4,)\n    intercept = intercept_std - np.dot(w_std, mu/sigma)\n\n    # pack parameters\n    params = np.empty(1 + w.size, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized, ridge\u2010regularized\n    power\u2010law in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    The features are standardized (zero\u2010mean, unit\u2010variance) before fitting\n    for improved numerical stability, then weights are un\u2010standardized.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    N, F = logX.shape  # F should be 4\n\n    # Standardize each log\u2010feature for numerical conditioning\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    sigma[sigma < 1e-6] = 1.0                                     # avoid division by zero\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # Design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1), dtype=np.float64), Z_feat], axis=1)  # (N,5)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = F + 1\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg      # (5,5)\n    b = Z.T.dot(logy)                      # (5,)\n\n    # Solve for standardized parameters\n    theta = np.linalg.solve(A, b)         # (5,)\n    intercept_std = theta[0]\n    w_std         = theta[1:]             # (4,)\n\n    # Un\u2010standardize weights\n    w = w_std / sigma                     # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)\n\n    # Pack into single array: [intercept, w1, w2, w3, w4]\n    params = np.empty(P, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 188883725141.5290)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5611, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a generalized power\u2010law with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid zero or negative values before logging\n    eps = 1e-12\n    lr          = np.maximum(X[:, 0], eps)\n    bsz         = np.maximum(X[:, 1], eps)\n    data_size   = np.maximum(X[:, 2], eps)\n    param_size  = np.maximum(X[:, 3], eps)\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build feature matrix: [1, log(lr), log(lr)^2, log(bsz), log(data_size), log(param_size)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Linear model in log\u2010space\n    log_pred = phi.dot(params)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                     + w4*log(data_size) + w5*log(param_size)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n    log_y     = np.log(y)\n\n    # Build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # Ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    # Solve (\u03c6\u1d40\u03c6 + \u03bbI) p = \u03c6\u1d40 log_y\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(log_y)                 # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized, ridge\u2010regularized\n    power\u2010law in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    The features are standardized (zero\u2010mean, unit\u2010variance) before fitting\n    for improved numerical stability, then weights are un\u2010standardized.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    N, F = logX.shape  # F should be 4\n\n    # Standardize each log\u2010feature for numerical conditioning\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    sigma[sigma < 1e-6] = 1.0                                     # avoid division by zero\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # Design matrix with intercept\n    Z = np.concatenate([np.ones((N, 1), dtype=np.float64), Z_feat], axis=1)  # (N,5)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = F + 1\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n    A = Z.T.dot(Z) + lambda_reg * reg      # (5,5)\n    b = Z.T.dot(logy)                      # (5,)\n\n    # Solve for standardized parameters\n    theta = np.linalg.solve(A, b)         # (5,)\n    intercept_std = theta[0]\n    w_std         = theta[1:]             # (4,)\n\n    # Un\u2010standardize weights\n    w = w_std / sigma                     # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)\n\n    # Pack into single array: [intercept, w1, w2, w3, w4]\n    params = np.empty(P, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 5 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a generalized power\u2010law with a quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n    Returns loss = exp(log_pred).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid zero or negative before taking log\n    eps = 1e-12\n    lr          = np.maximum(X[:, 0], eps)\n    bsz         = np.maximum(X[:, 1], eps)\n    data_size   = np.maximum(X[:, 2], eps)\n    param_size  = np.maximum(X[:, 3], eps)\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # Build design matrix: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param_size)]\n    phi = np.stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ], axis=1)  # shape (N,6)\n\n    # Linear prediction in log\u2010space and exponentiate\n    log_pred = phi.dot(params)   # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz)\n                     + w4*log(data_size) + w5*log(param_size)\n    Solves (\u03a6\u1d40\u03a6 + \u03bbI)p = \u03a6\u1d40 log(y) for p.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n    log_y     = np.log(y)\n\n    N = X.shape[0]\n    # Assemble design matrix\n    phi = np.stack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ], axis=1)  # shape (N,6)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    M = phi.shape[1]\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(log_y)                 # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}