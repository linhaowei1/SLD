{"id": "01c81716-2855-413c-ad4e-30f359e70ed4", "code": "import numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build design matrix\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "79df389f-5346-4deb-a04f-ce60dba4c86e", "generation": 4, "timestamp": 1754807289.9646654, "iteration_found": 187, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 6.759907673836654, "nmae": 3.285568431179146, "r2": -5.759907673836654, "combined_score": 0.1288675126086365}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 6.7599\n- nmae: 3.2856\n- r2: -5.7599\n- combined_score: 0.1289\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters:\nWe predict LM loss by fitting log(loss) as a normalized quadratic polynomial\nin the log\u2010domain of each feature (learning rate, batch size, data size,\nnon\u2010embedding parameter size).  We normalize each log\u2010feature to [0,1]\nbased on known domain ranges for numerical stability, build a design matrix\nwith intercept, linear, squared, and pairwise interaction terms, and solve\nthe normal equations with adaptive ridge regularization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain.  Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip to [0,1] to guard against slight out\u2010of\u2010range values\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    # transform target to log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n    # adaptive ridge: scale by trace(A)/P for balanced regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain bounds for each feature: [lr, bsz, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN  = np.log(np.array([1.2e-4,  16.0,   4e9,    2.14e8], dtype=float))\n_LOG_FEAT_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# For zero-centered normalization to [-1,1]\n_LOG_FEAT_MID  = 0.5 * (_LOG_FEAT_MIN + _LOG_FEAT_MAX)\n_LOG_FEAT_HALF = 0.5 * (_LOG_FEAT_MAX - _LOG_FEAT_MIN)\n\n_F = 4\n# Total number of parameters: 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n_P = 1 + 2 * _F + (_F * (_F - 1)) // 2\n\n# Precompute indices for the upper\u2010triangle interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take log, then normalize each feature to [-1,1]:\n      logX_norm = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_FEAT_MID) / _LOG_FEAT_HALF\n    # ensure in [-1,1]\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the quadratic design matrix \u03a6 of shape (N,15):\n      [1, logXn_i for i in 0..3,\n           (logXn_i)^2 for i in 0..3,\n           logXn_i * logXn_j for all i<j]\n    \"\"\"\n    N = logXn.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logXn\n    # squared terms\n    Phi[:, 1+_F:1+2*_F] = logXn ** 2\n    # pairwise interactions\n    Phi[:, 1+2*_F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic model in log-space.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    logXn = _normalize_log_features(data_points)   # (N,4)\n    Phi   = _build_design_matrix(logXn)            # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                          # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via ridge-regularized\n    closed-form solution in the log-loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients.\n    \"\"\"\n    logXn = _normalize_log_features(data_points)   # (N,4)\n    Phi   = _build_design_matrix(logXn)            # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                             # (15,15)\n    b = Phi.T.dot(logy)                            # (15,)\n\n    # adaptive ridge regularization (no penalty on intercept)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized-log quadratic scaling law for LLM training:\n  - Inputs are clipped and log\u2010transformed, then normalized to [-1,1]\n    using precomputed domain bounds.\n  - We fit a second\u2010order polynomial (linear, squared, and pairwise\n    interaction terms) in the normalized log\u2010space.\n  - Closed\u2010form ridge regression in the log\u2010loss domain with adaptive\n    regularization ensures numerical stability and cross\u2010configuration\n    generalization.\n\"\"\"\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] in case of slight numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the design matrix for normalized-log quadratic model:\n      [1,\n       logXn_i for i=0..3,\n       (logXn_i)^2 for i=0..3,\n       logXn_i * logXn_j for i<j]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn ** 2\n    # pairwise interaction terms\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Normal equations\n    A = Phi.T.dot(Phi)       # (15,15)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # Adaptive ridge regularization: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0  # no penalty on intercept\n    A += ridge * I\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5553)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 8-parameter log-domain model:\n      log(loss) = \u03b20\n                + \u03b2_lr   * log(lr)\n                + \u03b2_bsz  * log(bsz)\n                + \u03b2_D    * log(data_size)\n                + \u03b2_P    * log(non_embedding_param_size)\n                + \u03b2_D2   * [log(data_size)]^2\n                + \u03b2_P2   * [log(non_embedding_param_size)]^2\n                + \u03b2_DP   * log(data_size) * log(non_embedding_param_size)\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log-transform features\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_P    = np.log(P)\n\n    # build design matrix (N\u00d78)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log-transform inputs & target\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_D    = np.log(D)\n    log_P    = np.log(P)\n    log_y    = np.log(y)\n\n    # build design matrix (N\u00d78)\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with ridge regularization (no penalty on intercept)\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(log_y)\n\n    ridge = 1e-6\n    # Add ridge to diagonal entries except intercept\n    diag = np.eye(Pdim, dtype=float)\n    diag[0, 0] = 0.0\n    A += ridge * diag\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParsimonious 8-parameter log-domain scaling law for LLM training.\n\nWe model log(loss) as a linear function of:\n  - log(lr)\n  - log(bsz)\n  - log(data_size)\n  - log(non_embedding_param_size)\n  - [log(data_size)]^2\n  - [log(non_embedding_param_size)]^2\n  - log(data_size)*log(non_embedding_param_size)\n\nTotal parameters: 1 (intercept) + 7 weights = 8\n\nThis compact form captures the primary power-law effects of learning rate\nand batch size, and allows mild curvature and interaction in the\ndata_size / model_size dimensions, yielding strong generalization with\nvery few parameters.  Fitting is done via closed-form ridge regression\nin the log-loss domain for stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language model loss from hyperparameters using the 8-parameter\n    log-domain model.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 (N\u00d78)\n    # columns = [1,\n    #            log_lr,\n    #            log_bsz,\n    #            log_D,\n    #            log_P,\n    #            (log_D)^2,\n    #            (log_P)^2,\n    #            log_D * log_P ]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log-domain, then back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    # ridge regularization (small \u03bb for stability)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal for parameters 1..7 (do not regularize intercept)\n    idx = np.arange(A.shape[0])\n    A[idx, idx] += ridge\n    A[0, 0] -= ridge  # remove penalty on intercept\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters:\nWe predict LM loss by fitting log(loss) as a normalized quadratic polynomial\nin the log\u2010domain of each feature (learning rate, batch size, data size,\nnon\u2010embedding parameter size).  We normalize each log\u2010feature to [0,1]\nbased on known domain ranges for numerical stability, build a design matrix\nwith intercept, linear, squared, and pairwise interaction terms, and solve\nthe normal equations with adaptive ridge regularization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain.  Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip to [0,1] to guard against slight out\u2010of\u2010range values\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    # transform target to log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n    # adaptive ridge: scale by trace(A)/P for balanced regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 2.6536, Type: High-Performer)\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved LLM hyperparameter scaling-law model.\n\nWe fit a second\u2010order polynomial in the log\u2010domain of the four inputs:\n[lr, bsz, data_size, non_embedding_param_size].  To boost numerical\nstability and generalization we:\n\n 1. Log-transform and clip inputs to avoid non-positive values.\n 2. Build a design matrix with intercept, first-order, and second-order\n    (squared + pairwise) terms via combinations_with_replacement.\n 3. Center the design matrix (zero-mean columns) so that intercept is\n    unpenalized in ridge regression.\n 4. Solve the closed-form ridge regression with a small Tikhonov term.\n 5. Recover the true intercept after centering.\n\nThis yields a compact 15-parameter model fit in one shot.\n\"\"\"\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build the Vandermonde\u2010style design matrix for log-features.\n\n    Inputs:\n      logX: (N, F) array of log-transformed features\n    Returns:\n      Phi: (N, P) design matrix with columns:\n           [1,\n            logX[:,0],...,logX[:,F-1],\n            logX[:,0]**2, logX[:,0]*logX[:,1], ..., logX[:,F-1]**2]\n    \"\"\"\n    N, F = logX.shape\n    # Start with intercept\n    cols = [np.ones(N, dtype=float)]\n    # First-order terms\n    for i in range(F):\n        cols.append(logX[:, i])\n    # Second-order and cross terms\n    for i, j in combinations_with_replacement(range(F), 2):\n        cols.append(logX[:, i] * logX[:, j])\n    # Stack into (N, P)\n    Phi = np.stack(cols, axis=1)\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + 4 first-order +\n                   10 second-order terms)\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zeros/negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # Linear predictor in log-loss space\n    log_pred = Phi.dot(p)\n    # Convert back\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd-order log-domain polynomial via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # Log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n    N, P = Phi.shape\n\n    # Center each column of Phi so intercept is unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_centered = Phi - col_mean\n\n    # Ridge term (Tikhonov)\n    ridge = 1e-6\n    # Solve (Phi_c\u1d40 Phi_c + ridge I) w = Phi_c\u1d40 logy\n    A = Phi_centered.T.dot(Phi_centered) + ridge * np.eye(P)\n    b = Phi_centered.T.dot(logy)\n    w_centered = np.linalg.solve(A, b)\n\n    # Recover true intercept: p0 + sum_j (-mean_j * w_j) = true intercept\n    intercept = w_centered[0] - np.dot(col_mean, w_centered)\n    params = w_centered.copy()\n    params[0] = intercept\n\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (57.417), Excellent nmae (9.597)\n\n\n### Inspiration 3 (Score: 0.7998, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced asymptotic power\u2010law scaling\u2010law model for LLM training:\nWe model the final LM loss as an asymptotic floor plus a separable\npower\u2010law in model size (P), data size (D), batch size (bsz),\nand learning rate (lr):\n\n    y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * bsz^{\u03b1_bsz} * lr^{\u03b1_lr}\n\nFor numerical stability we reparameterize:\n\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\nWe fit by minimizing the mean squared error in log\u2010loss space,\nwith multiple random restarts to avoid local minima.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an asymptotic power\u2010law model.\n\n    Args:\n      data_points: np.ndarray of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 params, got {p.size}\")\n\n    # unpack parameters\n    logA, alpha_P, alpha_D, alpha_bsz, alpha_lr, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # separable power\u2010law term\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_bsz) * (lr ** alpha_lr)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter asymptotic power\u2010law scaling law by minimizing\n    mean squared error in log\u2010space, with multiple random restarts.\n\n    Args:\n      data_points: np.ndarray of shape (N,4)\n      loss_values: np.ndarray of shape (N,)\n\n    Returns:\n      params_opt: np.ndarray of shape (6,):\n                  [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # validate shapes\n    if X.ndim != 2 or X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes.\")\n\n    # floor small losses\n    y = np.maximum(y, 1e-12)\n    logy = np.log(y)\n\n    # initial guess based on heuristics\n    min_y = np.min(y)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.3, -0.2, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.05 + 1e-8)\n    p0_base = np.hstack([init_logA, init_alphas, init_log_yinf])\n\n    # bounds for parameters to ensure stability\n    bnds = [\n        (None, None),                     # logA\n        (-5.0, 5.0),                      # \u03b1_P\n        (-5.0, 5.0),                      # \u03b1_D\n        (-5.0, 5.0),                      # \u03b1_bsz\n        (-5.0, 5.0),                      # \u03b1_lr\n        (np.log(1e-12), np.log(min_y))    # log_y_inf\n    ]\n\n    # objective: MSE in log\u2010loss domain\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        # clamp predictions\n        y_pred = np.maximum(y_pred, 1e-12)\n        return np.mean((np.log(y_pred) - logy) ** 2)\n\n    best_params = p0_base.copy()\n    best_obj = objective(best_params)\n\n    # perform several random-restart L-BFGS-B optimizations\n    for i in range(4):\n        if i == 0:\n            p0 = p0_base\n        else:\n            # random perturbation around base\n            rng = np.random.RandomState(seed=i * 1234)\n            noise = rng.normal(scale=0.2, size=p0_base.shape)\n            p0 = p0_base + noise\n        res = minimize(\n            objective,\n            p0,\n            method='L-BFGS-B',\n            bounds=bnds,\n            options={'ftol': 1e-12, 'maxiter': 500}\n        )\n        if res.success:\n            obj = res.fun\n            if obj < best_obj:\n                best_obj = obj\n                best_params = res.x\n\n    return best_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.307), Excellent nmae (1.897)\n\n\n### Inspiration 4 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized-log quadratic scaling law for LLM training:\n  - Inputs are clipped and log\u2010transformed, then normalized to [-1,1]\n    using precomputed domain bounds.\n  - We fit a second\u2010order polynomial (linear, squared, and pairwise\n    interaction terms) in the normalized log\u2010space.\n  - Closed\u2010form ridge regression in the log\u2010loss domain with adaptive\n    regularization ensures numerical stability and cross\u2010configuration\n    generalization.\n\"\"\"\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] in case of slight numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the design matrix for normalized-log quadratic model:\n      [1,\n       logXn_i for i=0..3,\n       (logXn_i)^2 for i=0..3,\n       logXn_i * logXn_j for i<j]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn ** 2\n    # pairwise interaction terms\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Normal equations\n    A = Phi.T.dot(Phi)       # (15,15)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # Adaptive ridge regularization: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0  # no penalty on intercept\n    A += ridge * I\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# Precomputed log\u2010domain bounds for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4,   16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2,  4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoints and half\u2010ranges for normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute index pairs (with replacement) for second\u2010order terms\n_PAIRS = list(combinations_with_replacement(range(_F), 2))  # length = 10\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N, P) with:\n      P = 1 (intercept)\n        + _F (linear terms)\n        + len(_PAIRS) (second\u2010order terms: squares + cross\u2010products)\n    Columns:\n      \u03a6[:,0] = 1\n      \u03a6[:,1:1+_F] = logX_norm\n      \u03a6[:,1+_F + k] = logX_norm[:, i] * logX_norm[:, j] for (i,j)=_PAIRS[k]\n    \"\"\"\n    N = logX_norm.shape[0]\n    P = 1 + _F + len(_PAIRS)\n    Phi = np.ones((N, P), dtype=float)\n    # linear terms\n    Phi[:, 1:1+_F] = logX_norm\n    # second\u2010order terms\n    idx = 1 + _F\n    for (i, j) in _PAIRS:\n        Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n        idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized second\u2010order log\u2010domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 1 + 4 + 10 = 15 of coefficients\n                   in the log\u2010loss domain.\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid non\u2010positive values\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n    # normalize each feature to [-1,1]\n    logX_norm = (logX - _LOG_MID) / _LOG_HALF\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log\u2010loss space, then exponentiate\n    log_pred = Phi.dot(p)                 # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge regression in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid non\u2010positive values\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform features and normalize to [-1,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_MID) / _LOG_HALF\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # shape (15,15)\n    b = Phi.T.dot(logy)    # shape (15,)\n\n    # ridge regularization for numerical stability:\n    # add a small \u03bb to diagonal, but not to intercept term\n    Pdim = A.shape[0]\n    \u03bb = 1e-6\n    diag = np.ones(Pdim, dtype=float)\n    diag[0] = 0.0             # no penalty on intercept\n    A += \u03bb * np.diag(diag)\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n    using a 9\u2010parameter log\u2010domain polynomial model with targeted interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array\u2010like of length 9:\n                   [p0,\n                    p_P, p_D, p_lr, p_bsz,\n                    p_PxD, p_lr2, p_bsz2, p_lrxbsz]\n    Returns:\n      preds:       array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n\n    # unpack and guard against zero/negative\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix \u03a6 (N\u00d79)\n    # columns: [1, log_P, log_D, log_lr, log_bsz,\n    #           log_P*log_D, (log_lr)^2, (log_bsz)^2, log_lr*log_bsz]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),       # intercept\n        log_P,                         # main effect P\n        log_D,                         # main effect D\n        log_lr,                        # main effect lr\n        log_bsz,                       # main effect bsz\n        log_P * log_D,                 # interaction P\u00d7D\n        log_lr * log_lr,               # quadratic lr^2\n        log_bsz * log_bsz,             # quadratic bsz^2\n        log_lr * log_bsz               # interaction lr\u00d7bsz\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear predictor in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9\u2010parameter log\u2010domain polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 9\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(\"Shape mismatch: data_points must be (N,4) and match loss_values length\")\n\n    # guard against non\u2010positive before log\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    log_y   = np.log(y_safe)\n\n    # build design matrix \u03a6 (N\u00d79)\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_P,\n        log_D,\n        log_lr,\n        log_bsz,\n        log_P * log_D,\n        log_lr * log_lr,\n        log_bsz * log_bsz,\n        log_lr * log_bsz\n    ])\n\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)             # (9\u00d79)\n    b = Phi.T.dot(log_y)           # (9,)\n\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    idx = np.diag_indices(Pdim)\n    A[idx] += ridge               # penalize all\n    A[0, 0] -= ridge              # no penalty on intercept\n\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build design matrix\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}