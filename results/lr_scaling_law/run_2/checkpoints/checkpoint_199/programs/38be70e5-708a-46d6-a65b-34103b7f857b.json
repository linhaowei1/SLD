{"id": "38be70e5-708a-46d6-a65b-34103b7f857b", "code": "import numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute center and half\u2010range for normalization to roughly [-1,1]\n_LOG_F_CENTER     = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF_RANGE = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - center_i) / half_range_i\n    clipped to [-1,1].\n    Input X: array-like of shape (N,4) or (4,)\n    Returns x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    # center & scale\n    x = (logX - _LOG_F_CENTER) / _LOG_F_HALF_RANGE\n    # clip to avoid extreme extrapolation\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    Input x: array of shape (N,4)\n    Returns \u03a6: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape    # F should be 4\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    Phi = _build_design_matrix(x)  # shape (N,15)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.maximum(y, 1e-12)\n    logy = np.log(y)\n\n    # normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                    # (15,15)\n    b = Phi.T.dot(logy)                   # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "51ce75f5-1a2e-4f14-b177-e0cd9b25046d", "generation": 3, "timestamp": 1754807400.3042917, "iteration_found": 198, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43745368419125447, "nmae": 0.6955391817494094, "r2": 0.5625463158087456, "combined_score": 0.6956745883347356}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6955\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN       = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX       = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Compute per\u2010feature center and half\u2010range for normalization to roughly [\u22121,1]\n_LOG_F_CENTER    = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF_RANGE = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), floor to avoid log(0), then log-transform,\n    center & scale each feature:\n      x_i = (log(X_i) - center_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_CENTER) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape    # F should be 4\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    Phi = _build_design_matrix(x)  # shape (N,15)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                    # (15,15)\n    b = Phi.T.dot(logy)                   # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding param size max\n], dtype=float))\n\n# Center and scale constants to map log-features roughly to [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n_FLOOR = 1e-12\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1].\n    Input X: array of shape (N,4) or (4,)\n    Returns x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, _FLOOR)\n    logX = np.log(X)\n    # center & scale\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip to avoid extreme extrapolation\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second-order polynomial\n    in normalized log-features x:\n      Columns: [1,\n                x1, x2, x3, x4,            # linear\n                x1^2, x2^2, x3^2, x4^2,    # squared\n                x1\u00b7x2, x1\u00b7x3, x1\u00b7x4,       # interactions\n                x2\u00b7x3, x2\u00b7x4,\n                x3\u00b7x4]\n    Input x: array of shape (N,4)\n    Returns \u03a6: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape  # F must be 4\n    P = 1 + 2*F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized second-order\n    polynomial in log-domain.\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    interaction coeffs (6)]\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain then exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second-order polynomial scaling law via\n    closed-form ridge-regularized least squares.\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: numpy array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # shape checks\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # prepare design matrix\n    x = _prepare_normed_log(X)         # (N,4)\n    Phi = _build_design_matrix(x)      # (N,15)\n    # log-transform target\n    logy = np.log(np.maximum(y, _FLOOR))\n    # normal equations\n    A = Phi.T.dot(Phi)                 # (15,15)\n    b = Phi.T.dot(logy)                # (15,)\n    # adaptive ridge regularization for numerical stability\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    # penalize all coefficients except intercept\n    A[np.diag_indices(P_dim)] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as a linear combination of:\n  \u2022 log(lr)\n  \u2022 log(bsz)\n  \u2022 log(data_size)\n  \u2022 log(non_embedding_param_size)\nplus quadratic terms on data_size and model size and their interaction:\n\n    log y = \u03b20\n          + \u03b2_lr  * log(lr)\n          + \u03b2_bsz * log(bsz)\n          + \u03b2_D   * log(data_size)\n          + \u03b2_P   * log(non_embedding_param_size)\n          + \u03b2_D2  * [log(data_size)]^2\n          + \u03b2_P2  * [log(non_embedding_param_size)]^2\n          + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\nThis 8-parameter form is both compact and expressive, and we fit it via\nclosed-form ridge regression in the log-loss domain for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow for single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform features\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow for single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # assemble design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all but intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParsimonious log\u2010domain scaling law for LLM training:\n\nWe predict the language\u2010model loss via a small 8\u2010parameter model:\n    log(loss) \u2248 \u03b20\n              + \u03b2_lr * log(lr)\n              + \u03b2_bsz * log(bsz)\n              + \u03b2_D  * log(data_size)\n              + \u03b2_P  * log(param_size)\n              + \u03b2_D2 * [log(data_size)]^2\n              + \u03b2_P2 * [log(param_size)]^2\n              + \u03b2_DP * log(data_size) * log(param_size)\n\nThis form captures the primary power\u2010law effects of lr and bsz\nand allows mild curvature and interaction in data/parameter scale\nfor stable cross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8\u2010parameter log\u2010domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) or (4,), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8 = [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 (N\u00d78)\n    # columns: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log\u2010domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter scaling\u2010law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    # A = \u03a6\u1d40\u03a6 + ridge * I (except intercept unpenalized)\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries for parameters 1..7\n    idx = np.arange(Phi.shape[1])\n    A[idx, idx] += ridge\n    # remove penalty on intercept term\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5748)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParameter-efficient normalized\u2010interaction scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a linear function of:\n  - intercept\n  - 4 normalized log\u2010features\n  - 6 pairwise interactions between normalized log\u2010features\n\nTotal parameters: 1 + 4 + 6 = 11.  We fit via closed\u2010form ridge regression\n(for numerical stability) in the log\u2010loss domain.\n\"\"\"\n\n# Precomputed log\u2010domain minima and spans for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS  = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_SPANS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_MINS\n\ndef _build_design_matrix(log_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for the simplified model:\n      Columns = [1,\n                 log_norm_0, log_norm_1, log_norm_2, log_norm_3,\n                 log_norm_i * log_norm_j for all 0<=i<j<4]\n    \"\"\"\n    N, F = log_norm.shape\n    # intercept + F mains + C(F,2) interactions\n    P = 1 + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=log_norm.dtype)\n    # main effects\n    Phi[:, 1:1+F] = log_norm\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = log_norm[:, i] * log_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the simplified normalized\u2010interaction model.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 11:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_lr_bsz, \u03b2_lr_D, \u03b2_lr_P, \u03b2_bsz_D, \u03b2_bsz_P, \u03b2_D_P]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    log_norm = (logX - _LOG_MINS) / _LOG_SPANS\n    log_norm = np.clip(log_norm, 0.0, 1.0)\n\n    # build design matrix and predict in log-loss domain\n    Phi = _build_design_matrix(log_norm)   # shape (N,11)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified normalized\u2010interaction scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: ndarray of length 11 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform inputs and target\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    log_norm = (logX - _LOG_MINS) / _LOG_SPANS\n    log_norm = np.clip(log_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(log_norm)   # shape (N,11)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                     # (11,11)\n    b = Phi.T.dot(logy)                    # (11,)\n\n    # adaptive ridge = small fraction of average diagonal\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN       = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX       = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Compute per\u2010feature center and half\u2010range for normalization to roughly [\u22121,1]\n_LOG_F_CENTER    = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF_RANGE = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), floor to avoid log(0), then log-transform,\n    center & scale each feature:\n      x_i = (log(X_i) - center_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_CENTER) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape    # F should be 4\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    Phi = _build_design_matrix(x)  # shape (N,15)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                    # (15,15)\n    b = Phi.T.dot(logy)                   # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                  [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log of zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # targeted interactions\n    lr_bsz = log_lr * log_bsz\n    D_P    = log_D  * log_P\n\n    # linear model in log-domain\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_D\n      + p[4]*log_P\n      + p[5]*lr_bsz\n      + p[6]*D_P\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr * log_bsz,\n        log_D  * log_P\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices_from(A)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # exempt intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a normalized quadratic design matrix in log\u2010feature space:\n      - intercept\n      - linear terms\n      - squared terms\n      - pairwise interactions\n    \"\"\"\n    N, F = logX_norm.shape\n    # Number of parameters: 1 + F (linear) + F (squared) + F*(F-1)/2 (interactions)\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients)\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and predict in log\u2010loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 (learned coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatch between shapes of data_points and loss_values\")\n\n    # floor values\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # ridge regularization for stability (do not penalize intercept)\n    ridge = 1e-6\n    P_dim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all diagonal entries\n    A[np.diag_indices(P_dim)] += ridge\n    # remove penalty on intercept\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5748, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParameter-efficient normalized\u2010interaction scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a linear function of:\n  - intercept\n  - 4 normalized log\u2010features\n  - 6 pairwise interactions between normalized log\u2010features\n\nTotal parameters: 1 + 4 + 6 = 11.  We fit via closed\u2010form ridge regression\n(for numerical stability) in the log\u2010loss domain.\n\"\"\"\n\n# Precomputed log\u2010domain minima and spans for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS  = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_SPANS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_MINS\n\ndef _build_design_matrix(log_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for the simplified model:\n      Columns = [1,\n                 log_norm_0, log_norm_1, log_norm_2, log_norm_3,\n                 log_norm_i * log_norm_j for all 0<=i<j<4]\n    \"\"\"\n    N, F = log_norm.shape\n    # intercept + F mains + C(F,2) interactions\n    P = 1 + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=log_norm.dtype)\n    # main effects\n    Phi[:, 1:1+F] = log_norm\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = log_norm[:, i] * log_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the simplified normalized\u2010interaction model.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 11:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_lr_bsz, \u03b2_lr_D, \u03b2_lr_P, \u03b2_bsz_D, \u03b2_bsz_P, \u03b2_D_P]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    log_norm = (logX - _LOG_MINS) / _LOG_SPANS\n    log_norm = np.clip(log_norm, 0.0, 1.0)\n\n    # build design matrix and predict in log-loss domain\n    Phi = _build_design_matrix(log_norm)   # shape (N,11)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified normalized\u2010interaction scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: ndarray of length 11 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform inputs and target\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    log_norm = (logX - _LOG_MINS) / _LOG_SPANS\n    log_norm = np.clip(log_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(log_norm)   # shape (N,11)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                     # (11,11)\n    b = Phi.T.dot(logy)                    # (11,)\n\n    # adaptive ridge = small fraction of average diagonal\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 1.0442, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nWe fit a 6\u2010parameter power law with an asymptotic loss floor:\n    y_pred = y_inf + A * (P / P0)^\u03b1P * (D / D0)^\u03b1D * (bsz / B0)^\u03b1B * (lr / L0)^\u03b1L\n\nParameters are reparameterized for numerical stability:\n    p = [ logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf ]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Fixed feature\u2010scaling constants (independent of data)\n_P_SCALE   = 1e8       # non\u2010embedding params scale\n_D_SCALE   = 1e10      # data size scale\n_BSZ_SCALE = 512.0     # batch size scale\n_LR_SCALE  = 1e-3      # learning rate scale\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u20106 array [logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf]\n\n    Returns:\n      y_pred: shape (N,) predicted loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per row, got {X.shape[1]}\")\n    # unpack and scale features\n    lr    = X[:, 0] / _LR_SCALE\n    bsz   = X[:, 1] / _BSZ_SCALE\n    D     = X[:, 2] / _D_SCALE\n    Psize = X[:, 3] / _P_SCALE\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.shape[0]}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute power\u2010law term and add asymptotic floor\n    y_pred = y_inf + A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE.\n\n    Returns optimized params: [logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # scale features once (for speed in objective)\n    X_scaled = np.column_stack([\n        X[:, 0] / _LR_SCALE,\n        X[:, 1] / _BSZ_SCALE,\n        X[:, 2] / _D_SCALE,\n        X[:, 3] / _P_SCALE\n    ])\n\n    # sensible initial guesses\n    y_min = max(np.min(y), 1e-8)\n    init_yinf = y_min * 0.1\n    init_A    = max(np.mean(y) - init_yinf, y_min * 0.1)\n    init_exponents = np.array([-0.2, -0.2, -0.1, -0.1], dtype=float)\n    p0 = np.array([\n        np.log(init_A),\n        init_exponents[0],\n        init_exponents[1],\n        init_exponents[2],\n        init_exponents[3],\n        np.log(init_yinf)\n    ], dtype=float)\n\n    # bounds for (logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf)\n    bounds = [\n        (None, None),            # logA\n        (-5.0, 5.0),             # \u03b1P\n        (-5.0, 5.0),             # \u03b1D\n        (-5.0, 5.0),             # \u03b1B\n        (-5.0, 5.0),             # \u03b1L\n        (np.log(1e-12), None)    # log_yinf\n    ]\n\n    def objective(p):\n        # unpack scaled features\n        logA, aP, aD, aB, aL, log_yinf = p\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        lr_s, bsz_s, D_s, P_s = X_scaled.T\n        y_pred = y_inf + A * (P_s ** aP) * (D_s ** aD) * (bsz_s ** aB) * (lr_s ** aL)\n        # mean squared error in original loss domain\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 500, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (5.793), Excellent nmae (3.030)\n\n\n\n# Current Program\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with ridge regularization.\n\nWe model log(loss) as a polynomial up to degree 2 in the log of each feature:\n  log(loss) \u2248 w0 \n            + \u03a3_i w_i\u00b7log(x_i)\n            + \u03a3_i w_{ii}\u00b7[log(x_i)]^2\n            + \u03a3_{i<j} w_{ij}\u00b7log(x_i)\u00b7log(x_j)\n\nThis captures both diminishing returns (squared terms) and pairwise interactions.\nWe fit via closed\u2010form ridge regression for stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 (linear) + 4 (squared) + 6 (pairwise) = 15\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)          # shape (N,4)\n    N, F = logX.shape\n\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n\n    # linear terms: log(x_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms: [log(x_i)]^2\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms: log(x_i)*log(x_j) for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n\n    # number of parameters: intercept + 4 linear + 4 squared + 6 pairwise\n    P = 1 + F + F + (F*(F-1))//2\n\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # intercept unpenalized\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAX = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute center and half\u2010range for normalization to roughly [-1,1]\n_LOG_F_CENTER     = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF_RANGE = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - center_i) / half_range_i\n    clipped to [-1,1].\n    Input X: array-like of shape (N,4) or (4,)\n    Returns x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    # center & scale\n    x = (logX - _LOG_F_CENTER) / _LOG_F_HALF_RANGE\n    # clip to avoid extreme extrapolation\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    Input x: array of shape (N,4)\n    Returns \u03a6: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape    # F should be 4\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    Phi = _build_design_matrix(x)  # shape (N,15)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.maximum(y, 1e-12)\n    logy = np.log(y)\n\n    # normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                    # (15,15)\n    b = Phi.T.dot(logy)                   # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}