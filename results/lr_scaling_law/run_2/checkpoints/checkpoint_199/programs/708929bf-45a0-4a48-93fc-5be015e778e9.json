{"id": "708929bf-45a0-4a48-93fc-5be015e778e9", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Improved normalized-log quadratic scaling law with closed-form ridge regression.\n\n# Precomputed log-domain bounds for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)   # center for normalization\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)   # half-range for normalization\n\n# Feature count and precomputed indices for pairwise interaction terms\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)  # 6 pairs for 4 features\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to >0, log-transform, then scale each feature to [-1,1]:\n      x_norm = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log of zero or negative\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build design matrix \u03a6 in normalized log-space:\n      columns = [1,\n                 x_i (4 cols),\n                 x_i^2 (4 cols),\n                 x_i * x_j for (i<j) (6 cols)]\n    Returns \u03a6 shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    # total parameters: 1 + F + F + len(_TRIU_I) = 15\n    P = 1 + 2 * F + len(_TRIU_I)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interaction terms\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # normalize features in log-space\n    logXn = _normalize_log_features(X)         # (N,4)\n    Phi   = _build_design_matrix(logXn)        # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-loss domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n\n    # normalize features and target\n    logXn = _normalize_log_features(X)         # (N,4)\n    Phi   = _build_design_matrix(logXn)        # (N,15)\n    # avoid log of zero\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                          # (15,15)\n    b = Phi.T.dot(logy)                         # (15,)\n\n    # adaptive ridge: scale by average diagonal\n    Pdim   = A.shape[0]\n    ridge  = 1e-6 * np.trace(A) / Pdim\n    I      = np.eye(Pdim, dtype=float)\n    I[0,0] = 0.0  # do not regularize intercept\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "a95a1d8b-2476-4d8b-807b-ca326595774e", "generation": 5, "timestamp": 1754807429.02617, "iteration_found": 194, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 56.273970748478554, "nmae": 9.508562700392872, "r2": -55.273970748478554, "combined_score": 0.01745993837919059}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 56.2740\n- nmae: 9.5086\n- r2: -55.2740\n- combined_score: 0.0175\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build design matrix\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization to [-1,1]\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, log-transform, then normalize each feature to [-1,1]:\n      logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # zero-centered normalization\n    logXn = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # guard against numerical overflow\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-space:\n      [1,\n       x_i           (4 cols),\n       x_i^2         (4 cols),\n       x_i * x_j     (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    P = 1 + F + F + (F*(F-1))//2   # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logXn[:, i] * logXn[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a learned quadratic model\n    in the normalized-log domain.\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log-loss domain)\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # normalize features in log-space\n    logXn = _normalize_log_features(X)\n    # build polynomial features\n    Phi   = _build_design_matrix(logXn)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points shape (N,4) and matching loss_values, got {X.shape} and {y.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    # transform target to log-domain\n    y_clipped = np.clip(y, 1e-12, None)\n    logy      = np.log(y_clipped)\n    # normal equations for ridge regression\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge penalty for numerical stability\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # apply penalty to all coefficients except intercept\n    i_diag = np.arange(Pdim)\n    A[i_diag, i_diag] += ridge\n    A[0, 0]         -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law:\n\nWe model log(loss) as a simple linear function of the logs of each feature,\nwith squared terms for data_size and param_size and their interaction:\n    log y = \u03b20\n          + \u03b2_lr    * log(lr)\n          + \u03b2_bsz   * log(bsz)\n          + \u03b2_D     * log(data_size)\n          + \u03b2_P     * log(param_size)\n          + \u03b2_D2    * [log(data_size)]^2\n          + \u03b2_P2    * [log(param_size)]^2\n          + \u03b2_DP    * log(data_size) * log(param_size)\n\nThis 8-parameter form is compact, stable, and fits in closed-form with\na tiny ridge penalty for numerical robustness.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, Psize = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of length 8 (\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, Psize = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # assemble design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # closed-form ridge solution: solve (\u03a6\u1d40\u03a6 + \u03bb\u00b7I') p = \u03a6\u1d40 log_y\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply small ridge only to non-intercept terms\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter scaling law for LLM training:\n\nWe model log(loss) as\n  log_loss = \u03b20\n           + \u03b2_lr   * log(lr)\n           + \u03b2_bsz  * log(bsz)\n           + \u03b2_D    * log(data_size)\n           + \u03b2_P    * log(non_embedding_param_size)\n           + \u03b2_D2   * [log(data_size)]^2\n           + \u03b2_P2   * [log(non_embedding_param_size)]^2\n           + \u03b2_DP   * log(data_size)*log(non_embedding_param_size)\n\nThis form captures main effects of learning rate and batch size,\nand quadratic plus interaction effects for data and model scale,\nwhile remaining parameter-efficient. Fitting is done via ridge\nregularization in the log domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n\n    # extract and log-transform features\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with 8 columns\n    # [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform inputs and outputs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    # build the same design matrix \u03a6\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    # normal equations: A p = b\n    A = Phi.T.dot(Phi)\n    # apply ridge on all except intercept\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\nFLOOR = 1e-12\n\n# EVOLVE-BLOCK-START\ndef _build_phi(X):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N,8) for the 8-parameter model:\n        [1,\n         log(lr),\n         log(bsz),\n         log(data_size),\n         log(param_size),\n         log(data_size)^2,\n         log(param_size)^2,\n         log(data_size)*log(param_size)]\n    \"\"\"\n    # X has shape (N,4): columns [lr, bsz, data_size, param_size]\n    # Clip to avoid log(0)\n    X = np.maximum(X, FLOOR)\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n\n    return np.column_stack([\n        np.ones(X.shape[0], dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via an 8-parameter log-domain polynomial.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    Phi = _build_phi(X)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge\u2010regularized least squares\n    in the log-domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # build design matrix & target in log-domain\n    Phi = _build_phi(X)\n    log_y = np.log(np.maximum(y, FLOOR))\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to every diagonal, then un\u2010penalize the intercept\n    diag_ix = np.arange(A.shape[0])\n    A[diag_ix, diag_ix] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization to [-1,1]\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, log-transform, then normalize each feature to [-1,1]:\n      logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # zero-centered normalization\n    logXn = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # guard against numerical overflow\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-space:\n      [1,\n       x_i           (4 cols),\n       x_i^2         (4 cols),\n       x_i * x_j     (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    P = 1 + F + F + (F*(F-1))//2   # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logXn[:, i] * logXn[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a learned quadratic model\n    in the normalized-log domain.\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log-loss domain)\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # normalize features in log-space\n    logXn = _normalize_log_features(X)\n    # build polynomial features\n    Phi   = _build_design_matrix(logXn)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points shape (N,4) and matching loss_values, got {X.shape} and {y.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    # transform target to log-domain\n    y_clipped = np.clip(y, 1e-12, None)\n    logy      = np.log(y_clipped)\n    # normal equations for ridge regression\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge penalty for numerical stability\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # apply penalty to all coefficients except intercept\n    i_diag = np.arange(Pdim)\n    A[i_diag, i_diag] += ridge\n    A[0, 0]         -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 3.0124, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nA more parsimonious log-domain scaling law for LLM loss:\n  log(loss) = p0\n            + p1*log(lr)\n            + p2*log(bsz)\n            + p3*log(data_size)\n            + p4*log(param_size)\n            + p5*(log(lr))^2       # captures non-monotonic LR effect\n            + p6*(log(bsz))^2     # captures BS saturation curvature\n            + p7*(log(data_size)*log(param_size))  # joint size effect\n\nThis 8-parameter model is fitted via small-ridge regression in closed form,\ncentering the design matrix to keep the intercept unpenalized.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) holding\n                   [p0,p1,...,p7] as described above\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure positivity\n    X = np.clip(X, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build the log-loss predictor\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_data\n      + p[4]*log_param\n      + p[5]*log_lr**2\n      + p[6]*log_bsz**2\n      + p[7]*(log_data * log_param)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain model via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (8,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n    logy      = np.log(y)\n\n    # build design matrix with 8 columns\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),              # intercept\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_data * log_param\n    ])\n\n    # center columns so intercept stays unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_c    = Phi - col_mean\n\n    # small ridge term for numerical stability\n    ridge = 1e-6\n    P     = Phi_c.shape[1]\n\n    # solve (Phi_c^T Phi_c + ridge*I) w_c = Phi_c^T logy\n    A = Phi_c.T.dot(Phi_c) + ridge * np.eye(P)\n    b = Phi_c.T.dot(logy)\n    w_c = np.linalg.solve(A, b)\n\n    # recover true intercept p0\n    # original: Phi\u00b7p = (Phi_c + col_mean)\u00b7w_c = Phi_c\u00b7w_c + (col_mean\u00b7w_c)\n    # so intercept = w_c[0] - sum(col_mean * w_c)\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n\n    params = w_c.copy()\n    params[0] = intercept\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (75.818), Excellent nmae (11.037)\n\n\n### Inspiration 3 (Score: 2.4800, Type: High-Performer)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n\n# For zero\u2010centered normalization to roughly (\u22121,1):\n_LOG_F_MID  = (_LOG_F_MIN + _LOG_F_MAX) * 0.5\n_LOG_F_HALF = (_LOG_F_MAX - _LOG_F_MIN) * 0.5\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in the\n    normalized log\u2010features (zero\u2010centered to about [\u22121,1]).\n    Columns:\n      [1,\n       x\u0302\u2081, x\u0302\u2082, x\u0302\u2083, x\u0302\u2084,\n       x\u0302\u2081\u00b2, x\u0302\u2082\u00b2, x\u0302\u2083\u00b2, x\u0302\u2084\u00b2,\n       x\u0302\u2081\u00b7x\u0302\u2082, x\u0302\u2081\u00b7x\u0302\u2083, x\u0302\u2081\u00b7x\u0302\u2084,\n       x\u0302\u2082\u00b7x\u0302\u2083, x\u0302\u2082\u00b7x\u0302\u2084,\n       x\u0302\u2083\u00b7x\u0302\u2084]\n    Returns:\n      \u03a6 of shape (N, 15)\n    \"\"\"\n    N, F = logX_norm.shape\n    # number of parameters: 1 + F + F + F*(F-1)//2\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4), columns =\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (learned coefficients)\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n\n    # zero\u2010center and scale to ~[\u22121,1]\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # clip slight out\u2010of\u2010range\n    logX_norm = np.clip(logX_norm, -1.0, 1.0)\n\n    # build feature matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # linear predictor in log\u2010loss domain\n    logy_pred = Phi.dot(p)  # shape (N,)\n    # back to original scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed-form\n    ridge\u2010regularized regression in the log-loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features to zero\u2010centered ~[\u22121,1]\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    logX_norm = np.clip(logX_norm, -1.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # compute column means for centering\n    col_mean = Phi.mean(axis=0)\n    Phi_centered = Phi - col_mean  # intercept col becomes zeros\n\n    # form normal equations with ridge\n    A = Phi_centered.T.dot(Phi_centered)\n    b = Phi_centered.T.dot(logy)\n\n    # ridge regularization\n    ridge = 1e-6 * np.trace(A) / P\n    A += ridge * np.eye(P, dtype=A.dtype)\n\n    # solve for centered coefficients\n    w_cent = np.linalg.solve(A, b)\n\n    # recover true intercept:\n    # the model is logy \u2248 \u03a6\u22c5w = (\u03a6_centered + col_mean)\u22c5w = \u03a6_centered\u22c5w + (col_mean\u22c5w)\n    # so intercept = w_cent[0] + col_mean\u22c5w_cent - but since first col_mean[0]=1.0, intercept correction:\n    intercept = w_cent[0] + np.dot(col_mean, w_cent)\n    params = w_cent.copy()\n    params[0] = intercept\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (49.304), Excellent nmae (8.900)\n\n\n### Inspiration 4 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter scaling law for LLM training:\n\nWe model log(loss) as\n  log_loss = \u03b20\n           + \u03b2_lr   * log(lr)\n           + \u03b2_bsz  * log(bsz)\n           + \u03b2_D    * log(data_size)\n           + \u03b2_P    * log(non_embedding_param_size)\n           + \u03b2_D2   * [log(data_size)]^2\n           + \u03b2_P2   * [log(non_embedding_param_size)]^2\n           + \u03b2_DP   * log(data_size)*log(non_embedding_param_size)\n\nThis form captures main effects of learning rate and batch size,\nand quadratic plus interaction effects for data and model scale,\nwhile remaining parameter-efficient. Fitting is done via ridge\nregularization in the log domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n\n    # extract and log-transform features\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with 8 columns\n    # [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform inputs and outputs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    # build the same design matrix \u03a6\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    # normal equations: A p = b\n    A = Phi.T.dot(Phi)\n    # apply ridge on all except intercept\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 5 (Score: 0.5554, Type: Experimental)\n```python\nimport numpy as np\n\n# -------------------------------------------------------------------------\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved hybrid log\u2010domain scaling law with feature\u2010wise normalization\nand scaled ridge regularization for enhanced numerical stability and\ncross\u2010configuration generalization.\n\nModel form (in normalized log\u2010domain):\n  log y \u2248 \u03b20\n         + \u03b2_lr  \u00b7 x_lr_norm\n         + \u03b2_bsz \u00b7 x_bsz_norm\n         + \u03b2_D   \u00b7 x_D_norm\n         + \u03b2_P   \u00b7 x_P_norm\n         + \u03b2_D2  \u00b7 (x_D_norm)^2\n         + \u03b2_P2  \u00b7 (x_P_norm)^2\n         + \u03b2_DP  \u00b7 (x_D_norm * x_P_norm)\n\nwhere x_*_norm = (log(feature) - mid) / half, using precomputed (mid, half)\nfrom known feature bounds.  We fit via closed\u2010form ridge regression with\nridge strength scaled by the average diagonal of \u03a6\u1d40\u03a6.\n\"\"\"\n# Precomputed log\u2010domain bounds from data specification:\n#   lr \u2208 [1.2e-4, 2.2e-2]\n#   bsz \u2208 [16,    4096]\n#   data_size \u2208 [4e9, 1e11]\n#   non_embedding_param_size \u2208 [2.14e8, 1e9]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X to >0, take natural log, then scale each dimension to approximately [-1,1]:\n      x_norm = (log(X) - mid) / half\n    \"\"\"\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    normalized\u2010log hybrid polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20108 vector:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize logs to [-1,1] per feature\n    Xn = _normalize_log_features(X)  # shape (N,4)\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = Xn.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1] = Xn[:, 0]   # lr\n    Phi[:, 2] = Xn[:, 1]   # bsz\n    Phi[:, 3] = Xn[:, 2]   # data_size\n    Phi[:, 4] = Xn[:, 3]   # non_embedding_param_size\n    # quadratic for data & param\n    Phi[:, 5] = Xn[:, 2] * Xn[:, 2]\n    Phi[:, 6] = Xn[:, 3] * Xn[:, 3]\n    # interaction (data \u00d7 param)\n    Phi[:, 7] = Xn[:, 2] * Xn[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear prediction in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter normalized\u2010log hybrid polynomial via\n    closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: length\u20108 vector of learned coefficients\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize log\u2010features\n    Xn = _normalize_log_features(X)  # (N,4)\n\n    # build design matrix \u03a6\n    N = Xn.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Xn[:, 0]\n    Phi[:, 2] = Xn[:, 1]\n    Phi[:, 3] = Xn[:, 2]\n    Phi[:, 4] = Xn[:, 3]\n    Phi[:, 5] = Xn[:, 2] * Xn[:, 2]\n    Phi[:, 6] = Xn[:, 3] * Xn[:, 3]\n    Phi[:, 7] = Xn[:, 2] * Xn[:, 3]\n\n    # target in log domain\n    logy = np.log(np.maximum(y, 1e-12))\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # scale ridge by data\u2010adaptive average diagonal\n    P_dim = A.shape[0]\n    avg_diag = np.trace(A) / P_dim\n    ridge_strength = 1e-4 * avg_diag\n\n    # apply ridge to all but intercept\n    diag_idx = np.arange(P_dim)\n    A[diag_idx, diag_idx] += ridge_strength\n    A[0, 0] -= ridge_strength  # no penalty on \u03b20\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n# -------------------------------------------------------------------------\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# EVOLVE-BLOCK-START\n# Second-order polynomial scaling law in normalized log-domain with centered\n# design matrix and adaptive ridge regression for robust fitting.\n\n# Precomputed log-domain bounds for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2,  4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)   # center for normalization\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)   # half-range for normalization\n_F = 4  # number of features\n# Precompute index pairs (with replacement) for second-order terms\n_PAIRS = list(combinations_with_replacement(range(_F), 2))  # length = 10\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a second-order polynomial design matrix in the normalized log-features.\n    Columns:\n       [1,\n        logX_norm[:,0],...,logX_norm[:,F-1],\n        logX_norm[:,i]*logX_norm[:,j] for all (i,j) in _PAIRS ]\n    Returns: Phi of shape (N, 1+F+len(_PAIRS))\n    \"\"\"\n    N = logX_norm.shape[0]\n    # start with intercept\n    cols = [np.ones(N, dtype=float)]\n    # first-order terms\n    for i in range(_F):\n        cols.append(logX_norm[:, i])\n    # second-order and cross terms\n    for (i, j) in _PAIRS:\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    return np.column_stack(cols)  # shape (N, 1+F+10) = (N,15)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a normalized-log second-order polynomial model.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      1D array of length 15 of coefficients in log-loss domain.\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid zero/negative\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n    # normalize to roughly [-1,1]\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # clip extreme values for safety\n    logX_norm = np.clip(logX_norm, -1.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)   # (N,15)\n    p = np.ravel(params).astype(float)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log second-order polynomial scaling law via\n    centered design matrix and adaptive ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients (log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid zero/negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    logX = np.log(X)  # (N,4)\n    logy = np.log(y)  # (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    logX_norm = np.clip(logX_norm, -1.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # (N,15)\n\n    # center columns so intercept is unpenalized\n    col_mean = Phi.mean(axis=0)             # (15,)\n    Phi_c = Phi - col_mean                  \n\n    # compute normal equations\n    A = Phi_c.T.dot(Phi_c)                   # (15,15)\n    b = Phi_c.T.dot(logy)                    # (15,)\n\n    # adaptive ridge regularization\n    Pdim = A.shape[0]\n    lam = 1e-6 * np.trace(A) / Pdim\n    A += lam * np.eye(Pdim)\n\n    # solve for centered weights\n    w_c = np.linalg.solve(A, b)              # (15,)\n\n    # recover true intercept to ensure Phi @ params = Phi_c @ w_c\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n    params = w_c.copy()\n    params[0] = intercept\n\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Improved normalized-log quadratic scaling law with closed-form ridge regression.\n\n# Precomputed log-domain bounds for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)   # center for normalization\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)   # half-range for normalization\n\n# Feature count and precomputed indices for pairwise interaction terms\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)  # 6 pairs for 4 features\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to >0, log-transform, then scale each feature to [-1,1]:\n      x_norm = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log of zero or negative\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build design matrix \u03a6 in normalized log-space:\n      columns = [1,\n                 x_i (4 cols),\n                 x_i^2 (4 cols),\n                 x_i * x_j for (i<j) (6 cols)]\n    Returns \u03a6 shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    # total parameters: 1 + F + F + len(_TRIU_I) = 15\n    P = 1 + 2 * F + len(_TRIU_I)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interaction terms\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # normalize features in log-space\n    logXn = _normalize_log_features(X)         # (N,4)\n    Phi   = _build_design_matrix(logXn)        # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-loss domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n\n    # normalize features and target\n    logXn = _normalize_log_features(X)         # (N,4)\n    Phi   = _build_design_matrix(logXn)        # (N,15)\n    # avoid log of zero\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                          # (15,15)\n    b = Phi.T.dot(logy)                         # (15,)\n\n    # adaptive ridge: scale by average diagonal\n    Pdim   = A.shape[0]\n    ridge  = 1e-6 * np.trace(A) / Pdim\n    I      = np.eye(Pdim, dtype=float)\n    I[0,0] = 0.0  # do not regularize intercept\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}