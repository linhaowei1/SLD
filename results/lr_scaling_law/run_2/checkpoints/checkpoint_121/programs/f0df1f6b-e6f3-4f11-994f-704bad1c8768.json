{"id": "f0df1f6b-e6f3-4f11-994f-704bad1c8768", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010log quadratic scaling law for LLM hyperparameters.\n\nWe model log(loss) as a second\u2010order polynomial in the normalized logs of:\n    \u2013 learning rate (lr)\n    \u2013 batch size (bsz)\n    \u2013 data size (D)\n    \u2013 non\u2010embedding parameter size (P)\n\nSpecifically:\n    u_i = (log x_i \u2013 log_min_i) / (log_max_i \u2013 log_min_i), clipped to [0,1]\n    log(loss) \u2248 \u03b20\n               + \u2211_i \u03b2_i u_i\n               + \u2211_i \u03b3_i u_i^2\n               + \u2211_{i<j} \u03b4_{ij} u_i u_j\n\nWe fit the coefficients {\u03b2,\u03b3,\u03b4} via closed\u2010form ridge\u2010regularized least squares\nin the log\u2010loss domain for numerical stability.\n\"\"\"\n\n# Precomputed feature log\u2010domain minima and maxima\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAXS   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(u_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for the normalized\u2010log quadratic basis.\n    Columns (total 15):\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u_norm.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = u_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = u_norm**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = u_norm[:, i] * u_norm[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized\u2010log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [learning_rate, batch_size, data_size, non_embedding_param_size]\n      params:      array of length 15 of learned coefficients\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # avoid zeros and negative\n    X_safe = np.clip(X, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X_safe)\n    # normalize to [0,1]\n    u_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u_norm = np.clip(u_norm, 0.0, 1.0)\n\n    # build design matrix and predict in log\u2010loss domain\n    Phi = _build_design_matrix(u_norm)  # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients for log(loss)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"data_points must be shape (N,4) matching loss_values length\")\n\n    # safeguard and log\u2010transform\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # normalize features\n    u_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u_norm = np.clip(u_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(u_norm)  # shape (N,15)\n\n    # set up normal equations\n    A = Phi.T.dot(Phi)                  # (15,15)\n    b = Phi.T.dot(logy)                 # (15,)\n\n    # adaptive ridge regularization\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cee37266-ca4f-4ae1-98ca-57a973c0b61e", "generation": 4, "timestamp": 1754806520.7457066, "iteration_found": 117, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 8.101791158145039, "nmae": 3.5998644940370284, "r2": -7.101791158145039, "combined_score": 0.10986848441420423}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 8.1018\n- nmae: 3.5999\n- r2: -7.1018\n- combined_score: 0.1099\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# We fit a normalized\u2010log quadratic scaling law:\n#   log(loss) \u2248 \u03b20 + \u2211 \u03b2_i u_i + \u2211 \u03b3_i u_i^2 + \u2211_{i<j} \u03b4_{ij} u_i u_j\n# where u_i = (log x_i \u2212 log_min_i) / (log_max_i \u2212 log_min_i) clipped to [0,1].\n# Closed\u2010form ridge regression in the log\u2010loss domain yields stable, efficient estimates.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAXS  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAXS - _LOG_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in u (normalized logs).\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=u.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear\n    Phi[:, 1:1+F] = u\n    # squared\n    start = 1 + F\n    Phi[:, start:start+F] = u**2\n    # pairwise interactions\n    idx = start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\u2010log\n    quadratic scaling law.\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15 [\u03b20, \u03b2_i, \u03b3_i, \u03b4_ij]\n    Returns:\n      preds: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # avoid non-positive and compute logs\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # normalize to [0,1]\n    u = (logX - _LOG_MINS) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(u)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data points and loss values.\")\n    # avoid non-positive values\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n    # normalize features\n    u = (logX - _LOG_MINS) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(u)  # (N,15)\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)             # (15,15)\n    b = Phi.T.dot(logy)            # (15,)\n    P = A.shape[0]\n    # adaptive ridge = small fraction of avg diagonal\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    for i in range(1, P):\n        A[i, i] += ridge\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in the normalized log\u2010domain.\n    Columns: [1,\n              each normalized log feature (4),\n              each squared normalized log feature (4),\n              each pairwise product (6)]\n    Total params = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm ** 2\n    # interaction terms\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 15\u2010parameter\n    normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients (log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values.\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                          # (15,15)\n    b = Phi.T.dot(logy)                         # (15,)\n    # adaptive ridge: scale by average diagonal element\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    # apply ridge (no penalty on intercept)\n    diag_idx = np.diag_indices(P_dim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\nWe work in the log\u2010domain of each feature, normalize to [0,1] using known\nmin/max, build a second\u2010order polynomial basis (intercept, linear, squared,\npairwise interaction), and fit via closed\u2010form ridge regression with an\nadaptive regularization strength for numerical stability.\n\"\"\"\n\n# Known feature ranges (for normalization) in original units:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8 ], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9    ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial basis in\n    the normalized log\u2010features:\n      - intercept\n      - each feature (4) linear term\n      - each feature (4) squared term\n      - each pairwise interaction (6) term\n    Resulting dimension: 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients in log\u2010loss domain\n\n    Returns:\n      preds:       (N,) array of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n\n    # avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)\n\n    # normalize logs to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # guard numerical round\u2010off\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build basis and predict in log\u2010loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain. Uses adaptive ridge = 1e-6 * trace(A)/P.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of observed LM losses\n\n    Returns:\n      params:      (15,) array of learned coefficients for log\u2010loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # normalize features to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build basis\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0]  -= ridge  # unpenalize intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log\u2010domain minima and ranges for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in normalized log\u2010feature space.\n    Columns: [1,\n              u_i                                (4 linear terms),\n              u_i^2                              (4 squared terms),\n              u_i * u_j for i<j                  (6 pairwise interactions)\n             ]\n    Total = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = u.shape\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = u**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\u2010log second\u2010order model.\n\n    Args:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape}\")\n    # avoid zeros\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # build features\n    Phi = _build_design_matrix(u)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.size}\")\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log second\u2010order model via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched data points and loss values\")\n    # avoid zeros\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n    # normalize features\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # design matrix\n    Phi = _build_design_matrix(u)\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as a linear combination of:\n  \u2022 log(lr)\n  \u2022 log(bsz)\n  \u2022 log(data_size)\n  \u2022 log(non_embedding_param_size)\nplus quadratic terms on data_size and model size and their interaction:\n\n    log y = \u03b20\n          + \u03b2_lr  * log(lr)\n          + \u03b2_bsz * log(bsz)\n          + \u03b2_D   * log(data_size)\n          + \u03b2_P   * log(non_embedding_param_size)\n          + \u03b2_D2  * [log(data_size)]^2\n          + \u03b2_P2  * [log(non_embedding_param_size)]^2\n          + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\nThis 8-parameter form is both compact and expressive, and we fit it via\nclosed-form ridge regression in the log-loss domain for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow for single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform features\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow for single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # assemble design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all but intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# We fit a normalized\u2010log quadratic scaling law:\n#   log(loss) \u2248 \u03b20 + \u2211 \u03b2_i u_i + \u2211 \u03b3_i u_i^2 + \u2211_{i<j} \u03b4_{ij} u_i u_j\n# where u_i = (log x_i \u2212 log_min_i) / (log_max_i \u2212 log_min_i) clipped to [0,1].\n# Closed\u2010form ridge regression in the log\u2010loss domain yields stable, efficient estimates.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAXS  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAXS - _LOG_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in u (normalized logs).\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=u.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear\n    Phi[:, 1:1+F] = u\n    # squared\n    start = 1 + F\n    Phi[:, start:start+F] = u**2\n    # pairwise interactions\n    idx = start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\u2010log\n    quadratic scaling law.\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15 [\u03b20, \u03b2_i, \u03b3_i, \u03b4_ij]\n    Returns:\n      preds: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # avoid non-positive and compute logs\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # normalize to [0,1]\n    u = (logX - _LOG_MINS) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(u)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0] or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data points and loss values.\")\n    # avoid non-positive values\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n    # normalize features\n    u = (logX - _LOG_MINS) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(u)  # (N,15)\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)             # (15,15)\n    b = Phi.T.dot(logy)            # (15,)\n    P = A.shape[0]\n    # adaptive ridge = small fraction of avg diagonal\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    for i in range(1, P):\n        A[i, i] += ridge\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                  [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log of zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # targeted interactions\n    lr_bsz = log_lr * log_bsz\n    D_P    = log_D  * log_P\n\n    # linear model in log-domain\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_D\n      + p[4]*log_P\n      + p[5]*lr_bsz\n      + p[6]*D_P\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr * log_bsz,\n        log_D  * log_P\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices_from(A)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # exempt intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 1.0442, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\nWe fit a 6\u2010parameter power law with an asymptotic loss floor:\n    y_pred = y_inf + A * (P / P0)^\u03b1P * (D / D0)^\u03b1D * (bsz / B0)^\u03b1B * (lr / L0)^\u03b1L\n\nParameters are reparameterized for numerical stability:\n    p = [ logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf ]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Fixed feature\u2010scaling constants (independent of data)\n_P_SCALE   = 1e8       # non\u2010embedding params scale\n_D_SCALE   = 1e10      # data size scale\n_BSZ_SCALE = 512.0     # batch size scale\n_LR_SCALE  = 1e-3      # learning rate scale\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      length\u20106 array [logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf]\n\n    Returns:\n      y_pred: shape (N,) predicted loss values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per row, got {X.shape[1]}\")\n    # unpack and scale features\n    lr    = X[:, 0] / _LR_SCALE\n    bsz   = X[:, 1] / _BSZ_SCALE\n    D     = X[:, 2] / _D_SCALE\n    Psize = X[:, 3] / _P_SCALE\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.shape[0]}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute power\u2010law term and add asymptotic floor\n    y_pred = y_inf + A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE.\n\n    Returns optimized params: [logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # scale features once (for speed in objective)\n    X_scaled = np.column_stack([\n        X[:, 0] / _LR_SCALE,\n        X[:, 1] / _BSZ_SCALE,\n        X[:, 2] / _D_SCALE,\n        X[:, 3] / _P_SCALE\n    ])\n\n    # sensible initial guesses\n    y_min = max(np.min(y), 1e-8)\n    init_yinf = y_min * 0.1\n    init_A    = max(np.mean(y) - init_yinf, y_min * 0.1)\n    init_exponents = np.array([-0.2, -0.2, -0.1, -0.1], dtype=float)\n    p0 = np.array([\n        np.log(init_A),\n        init_exponents[0],\n        init_exponents[1],\n        init_exponents[2],\n        init_exponents[3],\n        np.log(init_yinf)\n    ], dtype=float)\n\n    # bounds for (logA, \u03b1P, \u03b1D, \u03b1B, \u03b1L, log_yinf)\n    bounds = [\n        (None, None),            # logA\n        (-5.0, 5.0),             # \u03b1P\n        (-5.0, 5.0),             # \u03b1D\n        (-5.0, 5.0),             # \u03b1B\n        (-5.0, 5.0),             # \u03b1L\n        (np.log(1e-12), None)    # log_yinf\n    ]\n\n    def objective(p):\n        # unpack scaled features\n        logA, aP, aD, aB, aL, log_yinf = p\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        lr_s, bsz_s, D_s, P_s = X_scaled.T\n        y_pred = y_inf + A * (P_s ** aP) * (D_s ** aD) * (bsz_s ** aB) * (lr_s ** aL)\n        # mean squared error in original loss domain\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 500, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (5.793), Excellent nmae (3.030)\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + F + F*(F+1)/2 where F=4\n                   = 1 (intercept)\n                     + 4 (main effects)\n                     + 10 (4 squares + 6 pairwise products)\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                # shape (N,4)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + (F * (F + 1)) // 2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # second-order terms: squares and pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010domain polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)   # shape (N,4)\n    logy = np.log(y)   # shape (N,)\n\n    N, F = logX.shape\n    P = 1 + F + (F * (F + 1)) // 2\n\n    # build design matrix\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization for numerical stability\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal\n    A += ridge * np.eye(P)\n    # remove ridge on intercept (no penalty)\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\nWe work in the log\u2010domain of each feature, normalize to [0,1] using known\nmin/max, build a second\u2010order polynomial basis (intercept, linear, squared,\npairwise interaction), and fit via closed\u2010form ridge regression with an\nadaptive regularization strength for numerical stability.\n\"\"\"\n\n# Known feature ranges (for normalization) in original units:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8 ], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9    ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial basis in\n    the normalized log\u2010features:\n      - intercept\n      - each feature (4) linear term\n      - each feature (4) squared term\n      - each pairwise interaction (6) term\n    Resulting dimension: 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients in log\u2010loss domain\n\n    Returns:\n      preds:       (N,) array of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n\n    # avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    logX = np.log(X_safe)\n\n    # normalize logs to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # guard numerical round\u2010off\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build basis and predict in log\u2010loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain. Uses adaptive ridge = 1e-6 * trace(A)/P.\n\n    Args:\n      data_points: (N,4) array of hyperparameters\n      loss_values: (N,) array of observed LM losses\n\n    Returns:\n      params:      (15,) array of learned coefficients for log\u2010loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    # avoid log(0)\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # normalize features to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build basis\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0]  -= ridge  # unpenalize intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParsimonious log-domain polynomial scaling law:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding one cross\u2010term for model\u2010size \u00d7 data\u2010size and quadratic terms\nfor learning rate and batch size saturation:\n    log(y) = p0\n           + p1\u00b7log(P) + p2\u00b7log(D) + p3\u00b7log(lr) + p4\u00b7log(bsz)\n           + p5\u00b7[log(P)\u00b7log(D)]\n           + p6\u00b7[log(lr)]^2 + p7\u00b7[log(bsz)]^2 + p8\u00b7[log(lr)\u00b7log(bsz)]\nFitting is done via closed\u2010form ridge regression in the log\u2010loss domain\nfor numerical stability and efficiency.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n    using the 9-parameter log-domain polynomial model.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:      1D array of length 9 = [\n        p0,\n        p1 (logP), p2 (logD), p3 (log lr), p4 (log bsz),\n        p5 (logP\u00b7logD),\n        p6 (log lr)^2, p7 (log bsz)^2, p8 (log lr\u00b7log bsz)\n      ]\n    \n    Returns:\n      y_pred: array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 9:\n        raise ValueError(f\"Expected 9 parameters, got {p.size}\")\n\n    # Safeguard against zeros\n    lr  = np.maximum(X[:, 0], 1e-12)\n    bsz = np.maximum(X[:, 1], 1e-12)\n    D   = np.maximum(X[:, 2], 1e-12)\n    P   = np.maximum(X[:, 3], 1e-12)\n\n    # Log\u2010transform features\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    # Build design matrix (N x 9)\n    N = X.shape[0]\n    Phi = np.stack([\n        np.ones(N),           # intercept (p0)\n        logP,                 # p1\n        logD,                 # p2\n        logr,                 # p3\n        logb,                 # p4\n        logP * logD,          # p5\n        logr * logr,          # p6\n        logb * logb,          # p7\n        logr * logb           # p8\n    ], axis=1)\n\n    # Linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9-parameter log-domain polynomial scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 9\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    X = np.atleast_2d(X)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # Safeguard against non-positive values before log\n    y   = np.maximum(y,    1e-12)\n    lr  = np.maximum(X[:,0], 1e-12)\n    bsz = np.maximum(X[:,1], 1e-12)\n    D   = np.maximum(X[:,2], 1e-12)\n    P   = np.maximum(X[:,3], 1e-12)\n\n    # Log\u2010transform\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n    logy = np.log(y)\n\n    # Build design matrix (N x 9)\n    N = X.shape[0]\n    Phi = np.stack([\n        np.ones(N),           # intercept\n        logP,                 # log(P)\n        logD,                 # log(D)\n        logr,                 # log(lr)\n        logb,                 # log(bsz)\n        logP * logD,          # interaction P\u00d7D\n        logr * logr,          # (log lr)^2\n        logb * logb,          # (log bsz)^2\n        logr * logb           # log lr \u00d7 log bsz\n    ], axis=1)\n\n    # Ridge regularization for stability (no penalty on intercept)\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all but the intercept\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n    b = Phi.T.dot(logy)\n\n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010log quadratic scaling law for LLM hyperparameters.\n\nWe model log(loss) as a second\u2010order polynomial in the normalized logs of:\n    \u2013 learning rate (lr)\n    \u2013 batch size (bsz)\n    \u2013 data size (D)\n    \u2013 non\u2010embedding parameter size (P)\n\nSpecifically:\n    u_i = (log x_i \u2013 log_min_i) / (log_max_i \u2013 log_min_i), clipped to [0,1]\n    log(loss) \u2248 \u03b20\n               + \u2211_i \u03b2_i u_i\n               + \u2211_i \u03b3_i u_i^2\n               + \u2211_{i<j} \u03b4_{ij} u_i u_j\n\nWe fit the coefficients {\u03b2,\u03b3,\u03b4} via closed\u2010form ridge\u2010regularized least squares\nin the log\u2010loss domain for numerical stability.\n\"\"\"\n\n# Precomputed feature log\u2010domain minima and maxima\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAXS   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(u_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for the normalized\u2010log quadratic basis.\n    Columns (total 15):\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u_norm.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = u_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = u_norm**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = u_norm[:, i] * u_norm[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized\u2010log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [learning_rate, batch_size, data_size, non_embedding_param_size]\n      params:      array of length 15 of learned coefficients\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # avoid zeros and negative\n    X_safe = np.clip(X, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X_safe)\n    # normalize to [0,1]\n    u_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u_norm = np.clip(u_norm, 0.0, 1.0)\n\n    # build design matrix and predict in log\u2010loss domain\n    Phi = _build_design_matrix(u_norm)  # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients for log(loss)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"data_points must be shape (N,4) matching loss_values length\")\n\n    # safeguard and log\u2010transform\n    X_safe = np.clip(X, 1e-12, None)\n    y_safe = np.clip(y, 1e-12, None)\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # normalize features\n    u_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u_norm = np.clip(u_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(u_norm)  # shape (N,15)\n\n    # set up normal equations\n    A = Phi.T.dot(Phi)                  # (15,15)\n    b = Phi.T.dot(logy)                 # (15,)\n\n    # adaptive ridge regularization\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- We switch from a fixed 9\u2010parameter model to a richer 15\u2010parameter normalized\u2010log quadratic model, capturing linear, squared, and pairwise interaction effects among hyperparameters.\n- All features are first log\u2010transformed and then normalized to [0,1] by their known log\u2010domain ranges, avoiding scaling mismatches.\n- We build a concise design matrix generator `_build_design_matrix` for maintainability.\n- We fit the model in the log\u2010loss domain via closed\u2010form ridge regression with an adaptive regularization strength (proportional to the average diagonal of `\u03a6\u1d40\u03a6`), ensuring numerical stability without manual tuning.\n- Predictions are obtained by exponentiating the linear log\u2010loss output, preserving a positive\u2010valued loss."]}}}