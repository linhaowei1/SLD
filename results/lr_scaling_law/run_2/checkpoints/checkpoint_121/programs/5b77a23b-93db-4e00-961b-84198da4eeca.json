{"id": "5b77a23b-93db-4e00-961b-84198da4eeca", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized-log quadratic scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a second-order polynomial in normalized log-features:\n    [1,\n     x\u0302_i            (4 terms),\n     x\u0302_i^2          (4 terms),\n     x\u0302_i * x\u0302_j     (6 terms for all i<j)]\nwhere x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min), clipped to [0,1].\nWe fit the 15 parameters (intercept, linear, squared, interactions) by\nclosed-form ridge regression in the log-loss domain, with no penalty on the\nintercept for improved numerical stability and generalization.\n\"\"\"\n\n# Known global bounds for each feature, in the order:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # used for normalization to [0,1]\n\ndef _prepare_normalized_logs(X):\n    \"\"\"\n    Clip inputs to avoid log(0), take logs, normalize each feature to [0,1]\n    using precomputed global log-min and log-range, then clip again.\n    Returns an array of shape (N,4).\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # floor to avoid zero or negative\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    # clip to [0,1] for numerical safety\n    return np.clip(logX_norm, 0.0, 1.0)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Given normalized log-features of shape (N,4), build a design matrix \u03a6 of shape (N,15):\n      [1,\n       x\u0302_i           (4 columns),\n       x\u0302_i^2         (4 columns),\n       x\u0302_i * x\u0302_j    (6 columns for all i<j)]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters: 1 + F + F + F*(F-1)/2 = 15 for F=4\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the learned scaling law.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + 4 linear + 4 squared + 6 interactions)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values.\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                              # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients in the log-loss domain.\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)       # (15,15)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # adaptive ridge: small \u03bb scaled by trace(A)/P for numerical stability\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # apply to all but intercept\n    diag_idx = np.arange(P)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c7320228-f0d4-4ec3-8571-419aa50ff11e", "generation": 5, "timestamp": 1754806520.7883692, "iteration_found": 116, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.09757690575929612, "nmae": 0.3101095785135347, "r2": 0.9024230942407039, "combined_score": 0.9110978873122397}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0976\n- nmae: 0.3101\n- r2: 0.9024\n- combined_score: 0.9111\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit a second\u2010order polynomial in the *normalized* log\u2010domain of the four\ninputs [lr, bsz, data_size, non_embedding_param_size].  To enhance numerical\nstability and generalization we:\n\n 1. Log-transform and floor inputs to avoid non-positive values.\n 2. Normalize each log-feature into [0,1] based on known global ranges.\n 3. Build a design matrix with intercept, linear, squared, and pairwise\n    interaction terms.\n 4. Fit via closed\u2010form ridge regression in the log\u2010loss domain, with\n    adaptive regularization and no penalty on the intercept.\n\nThis yields a 15\u2010parameter model that generalizes robustly across scales.\n\"\"\"\n\n# Known global ranges for each feature (min/max in the original domain)\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic model in log\u2010feature space.\n    Columns:\n      [1,\n       logX_norm_i for i in 0..3,\n       (logX_norm_i)^2 for i in 0..3,\n       logX_norm_i * logX_norm_j for all i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm ** 2\n\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + 4 linear + 4 squared + 6 interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize each log\u2010feature to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and compute log\u2010loss prediction\n    Phi = _build_design_matrix(logX_norm)    # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)                    # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in the log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor inputs and targets to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform features and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)    # shape (N,15)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                       # (15,15)\n    b = Phi.T.dot(logy)                      # (15,)\n\n    # adaptive ridge regularization for scale\u2010free penalty\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    # add to diagonal\n    idx = np.diag_indices(P_dim)\n    A[idx] += ridge\n    # remove penalty on intercept\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified and maintainable quadratic scaling\u2010law for LLM training hyperparameters.\nWe fit log(loss) as a 2nd\u2010order polynomial in normalized log\u2010features\n[lr, bsz, data_size, non_embedding_param_size]:\n  - intercept\n  - linear terms\n  - squared terms\n  - pairwise interactions\n\nNormalization: each log\u2010feature is clamped to [0,1] based on known global ranges.\nFitting: closed\u2010form ridge regression in log\u2010loss domain, with no penalty on intercept.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # for normalization to [0,1]\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in the\n    normalized log\u2010features of shape (N,4).  \u03a6 has columns:\n      [1,\n       xi for i in 0..3,\n       xi^2 for i in 0..3,\n       xi * xj for all 0<=i<j<4]\n    Returns: \u03a6 of shape (N,15).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single\u2010row inputs\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize each log\u2010feature to [0,1]\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    N, F = logX_norm.shape\n    # total parameters: 1 + F + F + F*(F-1)/2 = 15 for F=4\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array (N,4) or (4,) of [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15 (intercept, linear, squared, interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    Phi = _build_design_matrix(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the quadratic scaling law via ridge\u2010regularized least squares\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array (N,4) of hyperparameters\n      loss_values: array (N,) of LM loss values\n\n    Returns:\n      params: array of length 15 (fitted coefficients)\n    \"\"\"\n    Phi = _build_design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # ridge regularization: small \u03bb scaled by average diagonal\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # apply to all but intercept\n    diag_mask = np.ones(P, dtype=float)\n    diag_mask[0] = 0.0\n    A += ridge * np.diag(diag_mask)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe approximate final LM loss as exp(\u03a6\u00b7w), where \u03a6 is a second\u2010order\npolynomial basis in the normalized log\u2010features:\n  [1,\n   x\u0302_i,\n   x\u0302_i\u00b2,\n   x\u0302_i\u00b7x\u0302_j  (for all i<j)\n  ]\nwith x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min) clipped to [0,1].\n\nWe fit w in closed\u2010form via ridge\u2010regularized least squares in the\nlog\u2010loss domain for numerical stability, efficiency, and strong\ncross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns:\n      [1,\n       logX_norm_i      (4),\n       (logX_norm_i)^2  (4),\n       logX_norm_i*logX_norm_j for i<j  (6)\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F + F + F*(F-1)/2 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\u2010log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) (lr, bsz, data_size, non_embedding_param_size)\n      params:      array of length 15 (model weights in log\u2010loss domain)\n\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    # clip to [0,1] for numerical safety\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build features and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    w = np.asarray(params, dtype=float).ravel()\n    if w.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.shape[0]}\")\n    logy_pred = Phi.dot(w)                 # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of length 15 of learned weights\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n    # normalize features and clip\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge: scale by trace(A)/P for robustness\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    reg = np.eye(P, dtype=A.dtype)\n    reg[0, 0] = 0.0\n    A += ridge * reg\n\n    # solve for weights\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 of shape (N, 15) for a normalized\u2010log quadratic model.\n    Columns are:\n      1 (intercept),\n      logX_norm_i           (4 terms),\n      (logX_norm_i)^2       (4 terms),\n      logX_norm_i * logX_norm_j for all i<j (6 terms).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters: 1 + F + F + F*(F-1)/2 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized-quadratic model\n    in the log\u2010domain.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (model weights in log\u2010loss domain)\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform\n    logX = np.log(X)\n    # normalize each log\u2010feature to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and apply weights\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    w = np.asarray(params, dtype=float).ravel()\n    if w.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.size}\")\n\n    # predict in log\u2010domain, then exponentiate\n    log_pred = Phi.dot(w)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 15 of learned weights in log\u2010loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform features and target\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize log\u2010features to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    N, P = Phi.shape\n\n    # form normal equations\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    # adaptive ridge strength proportional to feature scale\n    ridge = 1e-6 * (np.trace(A) / P)\n    # apply penalty to all but the intercept term\n    ridge_mat = np.eye(P, dtype=A.dtype) * ridge\n    ridge_mat[0, 0] = 0.0\n    A += ridge_mat\n\n    # solve for weights\n    w = np.linalg.solve(A, b)\n    return w\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010log quadratic scaling\u2010law for LLM training hyperparameters.\n\nWe model the LM loss via:\n    log_loss \u2248 \u03a6 \u00b7 w\nwhere \u03a6 is a second\u2010order polynomial basis in normalized log\u2010features:\n    [1,\n     x\u0302_i           (4 terms),\n     x\u0302_i^2         (4 terms),\n     x\u0302_i * x\u0302_j    (6 terms for all i<j)\n    ]\nwith x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min), clipped to [0,1].\nWe fit w by closed\u2010form ridge regression in the log\u2010loss domain for stability\nand cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature (order: lr, bsz, data_size, param_size)\n_LOG_MINS   = np.log(np.array([1.2e-4,   16.0,    4e9,      2.14e8], dtype=float))\n_LOG_MAXS   = np.log(np.array([2.2e-2,  4096.0, 1e11,     1e9    ], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns (total 15):\n      [1,\n       logX_norm_i      (4),\n       (logX_norm_i)^2  (4),\n       logX_norm_i * logX_norm_j for all i<j  (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (weights in the log\u2010loss domain)\n\n    Returns:\n      np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    w   = np.asarray(params, dtype=float).ravel()\n    if w.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.size}\")\n\n    log_pred = Phi.dot(w)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      np.ndarray of length 15 of learned weights in the log\u2010loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    # adaptive ridge = 1e\u20106 * (trace(A)/P)\n    ridge = 1e-6 * np.trace(A) / P\n    # apply to all but intercept\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for weights\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit a second\u2010order polynomial in the *normalized* log\u2010domain of the four\ninputs [lr, bsz, data_size, non_embedding_param_size].  To enhance numerical\nstability and generalization we:\n\n 1. Log-transform and floor inputs to avoid non-positive values.\n 2. Normalize each log-feature into [0,1] based on known global ranges.\n 3. Build a design matrix with intercept, linear, squared, and pairwise\n    interaction terms.\n 4. Fit via closed\u2010form ridge regression in the log\u2010loss domain, with\n    adaptive regularization and no penalty on the intercept.\n\nThis yields a 15\u2010parameter model that generalizes robustly across scales.\n\"\"\"\n\n# Known global ranges for each feature (min/max in the original domain)\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic model in log\u2010feature space.\n    Columns:\n      [1,\n       logX_norm_i for i in 0..3,\n       (logX_norm_i)^2 for i in 0..3,\n       logX_norm_i * logX_norm_j for all i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm ** 2\n\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + 4 linear + 4 squared + 6 interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize each log\u2010feature to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and compute log\u2010loss prediction\n    Phi = _build_design_matrix(logX_norm)    # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)                    # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in the log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor inputs and targets to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform features and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)    # shape (N,15)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                       # (15,15)\n    b = Phi.T.dot(logy)                      # (15,)\n\n    # adaptive ridge regularization for scale\u2010free penalty\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    # add to diagonal\n    idx = np.diag_indices(P_dim)\n    A[idx] += ridge\n    # remove penalty on intercept\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 3.0124, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nA more parsimonious log-domain scaling law for LLM loss:\n  log(loss) = p0\n            + p1*log(lr)\n            + p2*log(bsz)\n            + p3*log(data_size)\n            + p4*log(param_size)\n            + p5*(log(lr))^2       # captures non-monotonic LR effect\n            + p6*(log(bsz))^2     # captures BS saturation curvature\n            + p7*(log(data_size)*log(param_size))  # joint size effect\n\nThis 8-parameter model is fitted via small-ridge regression in closed form,\ncentering the design matrix to keep the intercept unpenalized.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) holding\n                   [p0,p1,...,p7] as described above\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure positivity\n    X = np.clip(X, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build the log-loss predictor\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_data\n      + p[4]*log_param\n      + p[5]*log_lr**2\n      + p[6]*log_bsz**2\n      + p[7]*(log_data * log_param)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain model via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (8,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n    logy      = np.log(y)\n\n    # build design matrix with 8 columns\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),              # intercept\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_data * log_param\n    ])\n\n    # center columns so intercept stays unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_c    = Phi - col_mean\n\n    # small ridge term for numerical stability\n    ridge = 1e-6\n    P     = Phi_c.shape[1]\n\n    # solve (Phi_c^T Phi_c + ridge*I) w_c = Phi_c^T logy\n    A = Phi_c.T.dot(Phi_c) + ridge * np.eye(P)\n    b = Phi_c.T.dot(logy)\n    w_c = np.linalg.solve(A, b)\n\n    # recover true intercept p0\n    # original: Phi\u00b7p = (Phi_c + col_mean)\u00b7w_c = Phi_c\u00b7w_c + (col_mean\u00b7w_c)\n    # so intercept = w_c[0] - sum(col_mean * w_c)\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n\n    params = w_c.copy()\n    params[0] = intercept\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (75.818), Excellent nmae (11.037)\n\n\n### Inspiration 3 (Score: 0.5554, Type: Experimental)\n```python\nimport numpy as np\n\n# -------------------------------------------------------------------------\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved hybrid log\u2010domain scaling law with feature\u2010wise normalization\nand scaled ridge regularization for enhanced numerical stability and\ncross\u2010configuration generalization.\n\nModel form (in normalized log\u2010domain):\n  log y \u2248 \u03b20\n         + \u03b2_lr  \u00b7 x_lr_norm\n         + \u03b2_bsz \u00b7 x_bsz_norm\n         + \u03b2_D   \u00b7 x_D_norm\n         + \u03b2_P   \u00b7 x_P_norm\n         + \u03b2_D2  \u00b7 (x_D_norm)^2\n         + \u03b2_P2  \u00b7 (x_P_norm)^2\n         + \u03b2_DP  \u00b7 (x_D_norm * x_P_norm)\n\nwhere x_*_norm = (log(feature) - mid) / half, using precomputed (mid, half)\nfrom known feature bounds.  We fit via closed\u2010form ridge regression with\nridge strength scaled by the average diagonal of \u03a6\u1d40\u03a6.\n\"\"\"\n# Precomputed log\u2010domain bounds from data specification:\n#   lr \u2208 [1.2e-4, 2.2e-2]\n#   bsz \u2208 [16,    4096]\n#   data_size \u2208 [4e9, 1e11]\n#   non_embedding_param_size \u2208 [2.14e8, 1e9]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X to >0, take natural log, then scale each dimension to approximately [-1,1]:\n      x_norm = (log(X) - mid) / half\n    \"\"\"\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    normalized\u2010log hybrid polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20108 vector:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize logs to [-1,1] per feature\n    Xn = _normalize_log_features(X)  # shape (N,4)\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = Xn.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1] = Xn[:, 0]   # lr\n    Phi[:, 2] = Xn[:, 1]   # bsz\n    Phi[:, 3] = Xn[:, 2]   # data_size\n    Phi[:, 4] = Xn[:, 3]   # non_embedding_param_size\n    # quadratic for data & param\n    Phi[:, 5] = Xn[:, 2] * Xn[:, 2]\n    Phi[:, 6] = Xn[:, 3] * Xn[:, 3]\n    # interaction (data \u00d7 param)\n    Phi[:, 7] = Xn[:, 2] * Xn[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear prediction in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter normalized\u2010log hybrid polynomial via\n    closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: length\u20108 vector of learned coefficients\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize log\u2010features\n    Xn = _normalize_log_features(X)  # (N,4)\n\n    # build design matrix \u03a6\n    N = Xn.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Xn[:, 0]\n    Phi[:, 2] = Xn[:, 1]\n    Phi[:, 3] = Xn[:, 2]\n    Phi[:, 4] = Xn[:, 3]\n    Phi[:, 5] = Xn[:, 2] * Xn[:, 2]\n    Phi[:, 6] = Xn[:, 3] * Xn[:, 3]\n    Phi[:, 7] = Xn[:, 2] * Xn[:, 3]\n\n    # target in log domain\n    logy = np.log(np.maximum(y, 1e-12))\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # scale ridge by data\u2010adaptive average diagonal\n    P_dim = A.shape[0]\n    avg_diag = np.trace(A) / P_dim\n    ridge_strength = 1e-4 * avg_diag\n\n    # apply ridge to all but intercept\n    diag_idx = np.arange(P_dim)\n    A[diag_idx, diag_idx] += ridge_strength\n    A[0, 0] -= ridge_strength  # no penalty on \u03b20\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n# -------------------------------------------------------------------------\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 4 (Score: 0.7549, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe adopt a 6\u2010parameter power\u2010law with an asymptotic loss floor:\n\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\n\nwhere:\n  - P = non_embedding_param_size (model size)\n  - D = data_size (training tokens)\n  - bsz = batch size\n  - lr = learning rate\n\nParameters (6):\n  [ logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf ]\n\nWe optimize these parameters via L-BFGS-B on MSE in original loss space,\nensuring positivity of A and y_inf by parameterizing them in the log domain.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the 6-parameter power law.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6:\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {X.shape[1]}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n\n    # unpack parameters\n    logA, alpha_P, alpha_D, alpha_bsz, alpha_lr, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_bsz) * (lr ** alpha_lr)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law scaling law by minimizing MSE (original loss).\n\n    data_points:  array of shape (N,4)\n    loss_values:  array of shape (N,)\n    Returns:      1D array of learned parameters [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # ensure strictly positive for log transforms\n    y_safe = np.maximum(y, 1e-12)\n\n    # initialize parameters\n    y_min = np.min(y_safe)\n    # initial floor half of min loss\n    init_log_yinf = np.log(max(y_min * 0.1, 1e-12))\n    # initial amplitude to roughly match mean loss above floor\n    init_A = max(np.mean(y_safe) - np.exp(init_log_yinf), 1e-6)\n    init_logA = np.log(init_A)\n\n    # plausible exponents (negative for returns-to-scale, small magnitude)\n    init_alpha_P    = -0.2\n    init_alpha_D    = -0.2\n    init_alpha_bsz  = -0.1\n    init_alpha_lr   =  0.0\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_bsz,\n        init_alpha_lr,\n        init_log_yinf\n    ], dtype=float)\n\n    # bounds to keep parameters in reasonable ranges\n    # logA and log_yinf unbounded except float stability\n    # alphas typically between -5 and +5\n    bounds = [\n        (-20, 20),   # logA\n        (-5, 5),     # \u03b1_P\n        (-5, 5),     # \u03b1_D\n        (-5, 5),     # \u03b1_bsz\n        (-5, 5),     # \u03b1_lr\n        (-20, np.log(np.max(y_safe)))  # log_yinf <= log(max observed loss)\n    ]\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.780), Excellent nmae (1.660)\n\n\n### Inspiration 5 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\nFLOOR = 1e-12\n\n# EVOLVE-BLOCK-START\ndef _build_phi(X):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N,8) for the 8-parameter model:\n        [1,\n         log(lr),\n         log(bsz),\n         log(data_size),\n         log(param_size),\n         log(data_size)^2,\n         log(param_size)^2,\n         log(data_size)*log(param_size)]\n    \"\"\"\n    # X has shape (N,4): columns [lr, bsz, data_size, param_size]\n    # Clip to avoid log(0)\n    X = np.maximum(X, FLOOR)\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n\n    return np.column_stack([\n        np.ones(X.shape[0], dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via an 8-parameter log-domain polynomial.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    Phi = _build_phi(X)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge\u2010regularized least squares\n    in the log-domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # build design matrix & target in log-domain\n    Phi = _build_phi(X)\n    log_y = np.log(np.maximum(y, FLOOR))\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to every diagonal, then un\u2010penalize the intercept\n    diag_ix = np.arange(A.shape[0])\n    A[diag_ix, diag_ix] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter scaling law for LLM training:\n\nWe model log(loss) as\n  log_loss = \u03b20\n           + \u03b2_lr   * log(lr)\n           + \u03b2_bsz  * log(bsz)\n           + \u03b2_D    * log(data_size)\n           + \u03b2_P    * log(non_embedding_param_size)\n           + \u03b2_D2   * [log(data_size)]^2\n           + \u03b2_P2   * [log(non_embedding_param_size)]^2\n           + \u03b2_DP   * log(data_size)*log(non_embedding_param_size)\n\nThis form captures main effects of learning rate and batch size,\nand quadratic plus interaction effects for data and model scale,\nwhile remaining parameter-efficient. Fitting is done via ridge\nregularization in the log domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n\n    # extract and log-transform features\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with 8 columns\n    # [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform inputs and outputs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    # build the same design matrix \u03a6\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    # normal equations: A p = b\n    A = Phi.T.dot(Phi)\n    # apply ridge on all except intercept\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized-log quadratic scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a second-order polynomial in normalized log-features:\n    [1,\n     x\u0302_i            (4 terms),\n     x\u0302_i^2          (4 terms),\n     x\u0302_i * x\u0302_j     (6 terms for all i<j)]\nwhere x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min), clipped to [0,1].\nWe fit the 15 parameters (intercept, linear, squared, interactions) by\nclosed-form ridge regression in the log-loss domain, with no penalty on the\nintercept for improved numerical stability and generalization.\n\"\"\"\n\n# Known global bounds for each feature, in the order:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # used for normalization to [0,1]\n\ndef _prepare_normalized_logs(X):\n    \"\"\"\n    Clip inputs to avoid log(0), take logs, normalize each feature to [0,1]\n    using precomputed global log-min and log-range, then clip again.\n    Returns an array of shape (N,4).\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # floor to avoid zero or negative\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    # clip to [0,1] for numerical safety\n    return np.clip(logX_norm, 0.0, 1.0)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Given normalized log-features of shape (N,4), build a design matrix \u03a6 of shape (N,15):\n      [1,\n       x\u0302_i           (4 columns),\n       x\u0302_i^2         (4 columns),\n       x\u0302_i * x\u0302_j    (6 columns for all i<j)]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters: 1 + F + F + F*(F-1)/2 = 15 for F=4\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the learned scaling law.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + 4 linear + 4 squared + 6 interactions)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values.\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                              # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients in the log-loss domain.\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)       # (15,15)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # adaptive ridge: small \u03bb scaled by trace(A)/P for numerical stability\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # apply to all but intercept\n    diag_idx = np.arange(P)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n"]}}}