{"id": "c48f7d86-a6c4-4a93-a2ea-4d8960439db5", "code": "\"\"\"\nSimplified second\u2010order log\u2010domain polynomial scaling law with\nnormalized features and adaptive ridge regression for stability.\n\"\"\"\nimport numpy as np\n\n# Pre\u2010computed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on global log\u2010min/max.\n    \"\"\"\n    # avoid log(0) and negatives\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip any numerical drift\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a normalized 2nd\u2010order polynomial:\n      [1,\n       u_i for i in 0..3,\n       u_i^2 for i in 0..3,\n       u_i * u_j for all 0 <= i < j < 4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log\u2010loss and exponentiate\n    logy_pred = Phi.dot(p)  # (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients for log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build normalized design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # transform target to log\u2010domain (avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge to all diagonal entries, then remove it from intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3a055750-da14-487d-a554-84956ecb13dd", "generation": 5, "timestamp": 1754806481.5224326, "iteration_found": 112, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0095\n- nmae: 0.1032\n- r2: 0.9905\n- combined_score: 0.9906\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand adaptive ridge\u2010regularized closed\u2010form fitting for numerical stability\nand cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain. Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array-like of shape (N,4) for [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15 (intercept + linear + squared + interactions)\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip small numerical drift\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-domain\n    logy_pred = Phi.dot(p)                 # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares with adaptive regularization.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      array of length 15 (intercept + linear + squared + interactions)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform features & target\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # normal equations\n    A = Phi.T.dot(Phi)                     # shape (15,15)\n    b = Phi.T.dot(logy)                    # shape (15,)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic log-domain scaling law for LLM training hyperparameters.\n\nWe map each feature x to u = (log x - log_x_min) / (log_x_max - log_x_min), clipped to [0,1].\nWe then fit log(loss) as a second\u2010order polynomial in u:\n  log(loss) = \u03b20\n            + \u2211_i \u03b2_i u_i\n            + \u2211_i \u03b3_i u_i^2\n            + \u2211_{i<j} \u03b4_{ij} u_i u_j\n\nThis yields P = 1 + 4 + 4 + 6 = 15 parameters.  We fit via closed\u2010form ridge regression\nwith adaptive regularization, and predict by exponentiating the polynomial.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize logs to [0,1]\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build design matrix for second-order polynomial in u (normalized log-features).\n    u: shape (N,4)\n    returns \u03a6: shape (N,15)\n    Column layout:\n      [1,\n       u0, u1, u2, u3,          (4 linear terms)\n       u0^2, u1^2, u2^2, u3^2,  (4 squared terms)\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3  (6 interactions)\n      ]\n    \"\"\"\n    N, F = u.shape\n    assert F == 4\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=u.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear\n    Phi[:, 1:1+F] = u\n    # squared\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = u**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via normalized\u2010quadratic scaling law.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params: length-15 array of coefficients (\u03b20, \u03b2_i, \u03b3_i, \u03b4_ij)\n    returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize to [0,1]\n    logX = np.log(X)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(u)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law in the log-loss domain.\n    data_points: (N,4) array\n    loss_values: (N,) array\n    returns: params, length-15 array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched data points and loss values\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # design matrix and target\n    Phi = _build_design_matrix(u)  # (N,15)\n    logy = np.log(y)\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)              # (15,15)\n    b = Phi.T.dot(logy)             # (15,)\n    P = A.shape[0]\n    # adaptive ridge = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # apply ridge to all but intercept\n    for i in range(P):\n        A[i, i] += ridge\n    A[0, 0] -= ridge  # unpenalize intercept\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a second-order polynomial in the normalized\n    log-domain. Features:\n      - intercept\n      - linear terms: logX_norm_i for i in [0..3]\n      - squared terms: (logX_norm_i)^2\n      - pairwise interactions: logX_norm_i * logX_norm_j for i<j\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F + F + (F*(F-1)//2)\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-quadratic scaling law.\n\n    data_points: array-like of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      array-like of length 15: coefficients in the log-loss domain.\n\n    Returns:     array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # avoid non-positive\n    X = np.clip(X, 1e-12, None)\n\n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression.\n\n    data_points: array-like of shape (N,4)\n    loss_values: array-like of shape (N,)\n\n    Returns:      params: array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # log-target\n    logy = np.log(y)\n\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, bsz, data_size, non_embedding_param_size]. This\nyields 15 parameters (intercept, 4 linear, 4 squared, 6 pairwise).\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Known global log\u2010range of each feature for normalization\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns shape (N, 15).\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + linear + squared + interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # log\u2010transform target\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # add ridge to diagonal, but un\u2010penalize intercept\n    idx = np.diag_indices(Pdim)\n    A[idx] += ridge\n    A[0, 0] -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding param size min\n], dtype=float))\n\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding param size max\n], dtype=float))\n\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain. Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # avoid non-positive values for log\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip to [0,1] to guard against slight out\u2010of\u2010range values\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict in log\u2010loss domain and convert back\n    log_pred = Phi.dot(p)                  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients (log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non-positive values\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # transform target to log\u2010domain\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # shape (15,15)\n    b = Phi.T.dot(logy)                     # shape (15,)\n\n    # adaptive ridge: scale by average diagonal magnitude\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic log-domain scaling law for LLM training hyperparameters.\n\nWe map each feature x to u = (log x - log_x_min) / (log_x_max - log_x_min), clipped to [0,1].\nWe then fit log(loss) as a second\u2010order polynomial in u:\n  log(loss) = \u03b20\n            + \u2211_i \u03b2_i u_i\n            + \u2211_i \u03b3_i u_i^2\n            + \u2211_{i<j} \u03b4_{ij} u_i u_j\n\nThis yields P = 1 + 4 + 4 + 6 = 15 parameters.  We fit via closed\u2010form ridge regression\nwith adaptive regularization, and predict by exponentiating the polynomial.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize logs to [0,1]\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build design matrix for second-order polynomial in u (normalized log-features).\n    u: shape (N,4)\n    returns \u03a6: shape (N,15)\n    Column layout:\n      [1,\n       u0, u1, u2, u3,          (4 linear terms)\n       u0^2, u1^2, u2^2, u3^2,  (4 squared terms)\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3  (6 interactions)\n      ]\n    \"\"\"\n    N, F = u.shape\n    assert F == 4\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=u.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear\n    Phi[:, 1:1+F] = u\n    # squared\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = u**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via normalized\u2010quadratic scaling law.\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params: length-15 array of coefficients (\u03b20, \u03b2_i, \u03b3_i, \u03b4_ij)\n    returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize to [0,1]\n    logX = np.log(X)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(u)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law in the log-loss domain.\n    data_points: (N,4) array\n    loss_values: (N,) array\n    returns: params, length-15 array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched data points and loss values\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # design matrix and target\n    Phi = _build_design_matrix(u)  # (N,15)\n    logy = np.log(y)\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)              # (15,15)\n    b = Phi.T.dot(logy)             # (15,)\n    P = A.shape[0]\n    # adaptive ridge = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # apply ridge to all but intercept\n    for i in range(P):\n        A[i, i] += ridge\n    A[0, 0] -= ridge  # unpenalize intercept\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized log\u2010features.\n    Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized quadratic model in log\u2010space.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [p0,\n                    p_lr, p_bsz, p_D, p_P,\n                    p_lr2, p_bsz2, p_D2, p_P2,\n                    p_lr_bsz, p_lr_D, p_lr_P, p_bsz_D, p_bsz_P, p_D_P]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # reshape if single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize to [0,1]\n    logX      = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log\u2010loss domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized closed\u2010form\n    linear regression in the log\u2010loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # reshape if single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log-transform inputs and target\n    logX      = np.log(X)\n    logy      = np.log(y)\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # ridge regularization for stability (no penalty on intercept)\n    ridge = 1e-6\n    P = A.shape[0]\n    I = np.eye(P, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.8089, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# We adopt a compact 8-parameter log-domain model:\n#   log(loss) = p0 \n#             + p1\u00b7log(lr) + p2\u00b7log(bsz)\n#             + p3\u00b7log(D) + p4\u00b7log(P)\n#             + p5\u00b7[log(D)]\u00b2 + p6\u00b7[log(P)]\u00b2 + p7\u00b7log(D)\u00b7log(P)\n# and back-transform via exp.\n#\n# Fitting is done by closed-form ridge-regularized least squares in log-loss space,\n# with small penalties on linear terms and stronger penalties on squared/interactions\n# to improve robustness and cross-configuration generalization.\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 8-parameter log-domain scaling law.\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size (D), non_embedding_param_size (P)]\n      params:      array-like of length 8: [p0, p1,...,p7]\n\n    Returns:\n      preds:       array of shape (N,) of predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got shape {X.shape}\")\n    # avoid log(0) or negatives\n    X = np.clip(X, 1e-12, None)\n\n    # compute logs\n    lr   = np.log(X[:, 0])\n    bsz  = np.log(X[:, 1])\n    D    = np.log(X[:, 2])\n    P    = np.log(X[:, 3])\n\n    p = np.ravel(params).astype(float)\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # form the log-loss prediction\n    logy = (\n        p[0]\n        + p[1] * lr\n        + p[2] * bsz\n        + p[3] * D\n        + p[4] * P\n        + p[5] * (D * D)\n        + p[6] * (P * P)\n        + p[7] * (D * P)\n    )\n    # back to original loss scale\n    return np.exp(logy)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized least-squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      numpy array of length 8 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure consistent shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # logs of inputs and targets\n    lr   = np.log(X[:, 0])\n    bsz  = np.log(X[:, 1])\n    D    = np.log(X[:, 2])\n    P    = np.log(X[:, 3])\n    logy = np.log(y)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns: [1, lr, bsz, D, P, D^2, P^2, D\u00b7P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = lr\n    Phi[:, 2] = bsz\n    Phi[:, 3] = D\n    Phi[:, 4] = P\n    Phi[:, 5] = D * D\n    Phi[:, 6] = P * P\n    Phi[:, 7] = D * P\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # adaptive ridge strength\n    Pn = Phi.shape[1]\n    ridge_base = 1e-6 * np.trace(A) / Pn\n\n    # set per-term penalty weights to regularize:\n    #   intercept \u2192 0.0 (no penalty)\n    #   linear    \u2192 0.01\n    #   squared / interaction \u2192 1.0\n    penalty = np.array([0.0, 0.01, 0.01, 0.01, 0.01, 1.0, 1.0, 1.0], dtype=float)\n\n    # apply ridge: add ridge_base * penalty to diagonal of A\n    diag_idx = np.diag_indices(Pn)\n    A[diag_idx] += ridge_base * penalty\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.442), Excellent nmae (1.945)\n\n\n### Inspiration 5 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law for LLM training:\nWe model log(loss) as a hybrid polynomial in the log of each feature,\nincluding first\u2010order terms for lr and bsz, and both linear and quadratic\nterms plus their interaction for data_size (D) and non_embedding_param_size (P).\nThis keeps the model compact (8 params) and regularizes heavily for better\ncross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a tailored log\u2010domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size (D), non_embedding_param_size (P)]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid non-positive inputs\n    X = np.maximum(X, 1e-12)\n    # take logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with columns:\n    # [1, log_lr, log_bsz, log_D, log_P, (log_D)^2, (log_P)^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear model in the log\u2010domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the tailored log\u2010domain scaling law via ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid non-positive\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and output\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # construct design matrix \u03a6 (N\u00d78)\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all but the intercept term\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n\n# Current Program\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand adaptive ridge\u2010regularized closed\u2010form fitting for numerical stability\nand cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain. Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array-like of shape (N,4) for [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15 (intercept + linear + squared + interactions)\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip small numerical drift\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-domain\n    logy_pred = Phi.dot(p)                 # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares with adaptive regularization.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      array of length 15 (intercept + linear + squared + interactions)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform features & target\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # normal equations\n    A = Phi.T.dot(Phi)                     # shape (15,15)\n    b = Phi.T.dot(logy)                    # shape (15,)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nSimplified second\u2010order log\u2010domain polynomial scaling law with\nnormalized features and adaptive ridge regression for stability.\n\"\"\"\nimport numpy as np\n\n# Pre\u2010computed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on global log\u2010min/max.\n    \"\"\"\n    # avoid log(0) and negatives\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip any numerical drift\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a normalized 2nd\u2010order polynomial:\n      [1,\n       u_i for i in 0..3,\n       u_i^2 for i in 0..3,\n       u_i * u_j for all 0 <= i < j < 4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log\u2010loss and exponentiate\n    logy_pred = Phi.dot(p)  # (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients for log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build normalized design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # transform target to log\u2010domain (avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge to all diagonal entries, then remove it from intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}