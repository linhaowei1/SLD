{"id": "73490e92-2550-48f3-b407-7fb7db10eb1a", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters using a log\u2010space quadratic scaling law.\n    Supports three forms depending on len(params):\n      1) Pure power\u2010law:       P = F+1       \u2192 [intercept, a1\u2026aF]\n      2) Quadratic log\u2010law:    P = 2F+1      \u2192 [intercept, a1\u2026aF, b1\u2026bF]\n      3) Full quadratic + interactions:\n         P = 1 + F + F + F*(F\u22121)/2\n    where F = number of features (4 here).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)            # (N, F)\n    N, F = logX.shape\n\n    theta = np.asarray(params, dtype=float)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # Build design matrix Z according to parameter length\n    if P == F + 1:\n        # pure power\u2010law: intercept + linear terms\n        Z = np.concatenate([np.ones((N,1)), logX], axis=1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space: intercept + linear + squared terms\n        Z = np.concatenate([np.ones((N,1)), logX, logX**2], axis=1)\n    elif P == 1 + F + F + (F*(F-1)//2):\n        # full quadratic + pairwise interactions\n        sq = logX**2\n        inter_terms = []\n        for i in range(F):\n            for j in range(i+1, F):\n                inter_terms.append(logX[:, i] * logX[:, j])\n        inter = np.stack(inter_terms, axis=1) if inter_terms else np.zeros((N,0))\n        Z = np.concatenate([np.ones((N,1)), logX, sq, inter], axis=1)\n    else:\n        raise ValueError(f\"Unexpected parameter length {P} for input dimension {F}\")\n\n    # Linear model in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)       # (N, M)\n    pred = np.exp(pred_log)         # (N, M)\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the quadratic log\u2010law:\n        log(loss) \u2248 intercept + \u03a3_i a_i\u00b7log(x_i) + \u03a3_i b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    Returns params of length 2F+1.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)      # (N, F)\n    logy = np.log(y_clipped)      # (N,)\n    N, F = logX.shape\n\n    # Design matrix: [1, logX, (logX)^2]\n    Z = np.concatenate([np.ones((N,1)), logX, logX**2], axis=1)\n    P = Z.shape[1]  # should be 2F+1\n\n    # Ridge penalty for stability (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P)\n    reg[0,0] = 0.0\n\n    # Normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    theta = np.linalg.solve(A, b)  # (P,)\n\n    return theta\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "0808d9e1-21c2-48fa-ad59-0723721571ea", "generation": 2, "timestamp": 1754717474.0959022, "iteration_found": 28, "metrics": {"nmse": 0.25432593702380907, "nmae": 0.4489761764193079, "r2": 0.7456740629761909, "combined_score": 0.7972409486905303}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: Evaluation failed or timed out.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: Evaluation failed or timed out.\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.2543, nmae: 0.4490, r2: 0.7457, combined_score: 0.7972\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2543, nmae: 0.4490, r2: 0.7457, combined_score: 0.7972\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5616)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2543), Performs well on nmae (0.4490), Performs well on r2 (0.7457), Performs well on combined_score (0.7972)\n\n\n### Program 2 (Score: 0.5616)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2543), Performs well on nmae (0.4490), Performs well on r2 (0.7457), Performs well on combined_score (0.7972)\n\n\n### Program 3 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: Evaluation failed or timed out.)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5616, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Supports either\n      (a) a pure power\u2010law:    P = F+1  params  = [intercept, a1, \u2026, aF]\n      (b) a quadratic log\u2010law: P = 2F+1 params = [intercept, a1\u2026aF, b1\u2026bF]\n    where F = number of hyperparameters (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    N, F = X.shape\n\n    # log\u2010transform\n    logX = np.log(X + eps)               # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # promote to 2D for multi\u2010target\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # choose design matrix by parameter length\n    if P == F + 1:\n        # pure power\u2010law\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)           # (N, F+1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space\n        Z = np.concatenate([np.ones((N, 1)), logX, logX**2], axis=1)  # (N, 1+F+F)\n    else:\n        raise ValueError(f\"Expected params of length {F+1} or {2*F+1}, got {P}\")\n\n    # linear model in log\u2010space \u2192 exponentiate\n    pred_log = Z.dot(theta.T)    # (N, M)\n    pred     = np.exp(pred_log)  # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Always fits the quadratic log\u2010law:\n       log(loss) \u2248 intercept + \u03a3 a_i\u00b7log(x_i) + \u03a3 b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # log\u2010space features\n    logX = np.log(X + eps)                         # (N, F)\n    Z    = np.concatenate([np.ones((N,1)), \n                           logX, \n                           logX**2], axis=1)      # (N, 1 + F + F)\n    P    = Z.shape[1]\n\n    # small ridge penalty (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg        = np.eye(P)\n    reg[0,0]   = 0\n    A          = Z.T.dot(Z) + lambda_reg*reg       # (P, P)\n\n    # support multi\u2010target y\n    if y.ndim == 1:\n        y2d = y[:,None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy       = np.log(y2d[:,t] + eps)        # (N,)\n        b          = Z.T.dot(logy)                 # (P,)\n        params[t]  = np.linalg.solve(A, b)\n\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters using a log\u2010space quadratic scaling law.\n    Supports three forms depending on len(params):\n      1) Pure power\u2010law:       P = F+1       \u2192 [intercept, a1\u2026aF]\n      2) Quadratic log\u2010law:    P = 2F+1      \u2192 [intercept, a1\u2026aF, b1\u2026bF]\n      3) Full quadratic + interactions:\n         P = 1 + F + F + F*(F\u22121)/2\n    where F = number of features (4 here).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)            # (N, F)\n    N, F = logX.shape\n\n    theta = np.asarray(params, dtype=float)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # Build design matrix Z according to parameter length\n    if P == F + 1:\n        # pure power\u2010law: intercept + linear terms\n        Z = np.concatenate([np.ones((N,1)), logX], axis=1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space: intercept + linear + squared terms\n        Z = np.concatenate([np.ones((N,1)), logX, logX**2], axis=1)\n    elif P == 1 + F + F + (F*(F-1)//2):\n        # full quadratic + pairwise interactions\n        sq = logX**2\n        inter_terms = []\n        for i in range(F):\n            for j in range(i+1, F):\n                inter_terms.append(logX[:, i] * logX[:, j])\n        inter = np.stack(inter_terms, axis=1) if inter_terms else np.zeros((N,0))\n        Z = np.concatenate([np.ones((N,1)), logX, sq, inter], axis=1)\n    else:\n        raise ValueError(f\"Unexpected parameter length {P} for input dimension {F}\")\n\n    # Linear model in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)       # (N, M)\n    pred = np.exp(pred_log)         # (N, M)\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the quadratic log\u2010law:\n        log(loss) \u2248 intercept + \u03a3_i a_i\u00b7log(x_i) + \u03a3_i b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    Returns params of length 2F+1.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)      # (N, F)\n    logy = np.log(y_clipped)      # (N,)\n    N, F = logX.shape\n\n    # Design matrix: [1, logX, (logX)^2]\n    Z = np.concatenate([np.ones((N,1)), logX, logX**2], axis=1)\n    P = Z.shape[1]  # should be 2F+1\n\n    # Ridge penalty for stability (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P)\n    reg[0,0] = 0.0\n\n    # Normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    theta = np.linalg.solve(A, b)  # (P,)\n\n    return theta\n# EVOLVE-BLOCK-END\n```"]}}}