{"id": "6d3362b3-b591-4c4a-b10e-a2b7a31847ec", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic log\u2010law with cross\u2010terms:\n      log(loss) \u2248 \u03b80\n                 + \u03a3_i \u03b8_i \u00b7 log(x_i)\n                 + \u03a3_i \u03b8_{i+4} \u00b7 [log(x_i)]^2\n                 + \u03a3_{i<j} \u03b8_{9 + k} \u00b7 log(x_i)\u00b7log(x_j)\n\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Total parameters P = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # shape (N,4)\n\n    # unpack log\u2010features\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    ds   = logX[:, 2]\n    ps   = logX[:, 3]\n    N = logX.shape[0]\n\n    # build design matrix Z: [1,\n    #                         lr, bsz, ds, ps,\n    #                         lr^2, bsz^2, ds^2, ps^2,\n    #                         lr*bsz, lr*ds, lr*ps,\n    #                         bsz*ds, bsz*ps,\n    #                         ds*ps]\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        lr, bsz, ds, ps,\n        lr**2, bsz**2, ds**2, ps**2,\n        lr * bsz, lr * ds, lr * ps,\n        bsz * ds, bsz * ps,\n        ds  * ps\n    ])\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != Z.shape[1]:\n        raise ValueError(f\"Expected {Z.shape[1]} parameters, got {theta.size}\")\n\n    # predict in log\u2010space, clamp for numeric stability\n    log_pred = Z.dot(theta)\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the full quadratic log\u2010law with cross\u2010terms via ridge\u2010regularized\n    weighted least squares in log\u2010space.\n\n    We weight each sample by 1 + normalized( log(data_size) + log(param_size) )\n    to emphasize large\u2010scale configurations.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)   # (N,4)\n    logy = np.log(y)   # (N,)\n\n    # unpack log\u2010features\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    ds   = logX[:, 2]\n    ps   = logX[:, 3]\n    N = logX.shape[0]\n\n    # build design matrix Z as above\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        lr, bsz, ds, ps,\n        lr**2, bsz**2, ds**2, ps**2,\n        lr * bsz, lr * ds, lr * ps,\n        bsz * ds, bsz * ps,\n        ds  * ps\n    ])  # shape (N,15)\n\n    # sample weights to emphasize large\u2010scale points\n    log_scale = ds + ps\n    m, M = log_scale.min(), log_scale.max()\n    if M > m:\n        w_scale = (log_scale - m) / (M - m)\n    else:\n        w_scale = np.zeros_like(log_scale)\n    sample_w = 1.0 + w_scale            # in [1,2]\n    sw_sqrt = np.sqrt(sample_w)\n\n    # apply weights to design matrix and target\n    Zw = Z * sw_sqrt[:, None]\n    yw = logy * sw_sqrt\n\n    # ridge regularization (no penalty on intercept)\n    P = Z.shape[1]\n    lambda_reg = 1e-3\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    A = Zw.T.dot(Zw) + lambda_reg * reg  # (15,15)\n    b = Zw.T.dot(yw)                     # (15,)\n\n    theta = np.linalg.solve(A, b)       # (15,)\n    return theta\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1f0041c4-cc7b-40e9-872f-cc1f7403620b", "generation": 3, "timestamp": 1754717627.4786391, "iteration_found": 49, "metrics": {"nmse": 0.07227251189521064, "nmae": 0.2373789519508347, "r2": 0.9277274881047893, "combined_score": 0.9325987460338128}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4122751066216344, "nmae": 0.5598350287244938, "r2": 0.5877248933783656, "combined_score": 0.7080773394017715}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4123\n- nmae: 0.5598\n- r2: 0.5877\n- combined_score: 0.7081\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2585, nmae: 0.4637, r2: 0.7415, combined_score: 0.7946\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1654, nmae: 0.3513, r2: 0.8346, combined_score: 0.8580\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0766, nmae: 0.2446, r2: 0.9234, combined_score: 0.9289\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5434)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible scaling law in log\u2010space supporting:\n      - pure power\u2010law:           params length = 1 + F\n      - quadratic log\u2010law:        params length = 1 + 2F\n      - full quadratic w/ crosses: params length = 1 + 2F + F*(F-1)/2\n    where F = number of features (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    # log\u2010transform inputs\n    logX = np.log(X + eps)\n    theta = np.asarray(params, dtype=float).ravel()\n    N, F = logX.shape\n    P = theta.size\n\n    # Build design matrix Z based on expected param length\n    # Start with intercept and linear terms\n    Z_parts = [np.ones((N, 1), dtype=float), logX]\n\n    # If quadratic terms are present\n    if P >= 1 + 2*F:\n        Z_parts.append(logX**2)\n\n    # If cross\u2010terms are present\n    full_cross_len = (1 + 2*F + F*(F-1)//2)\n    if P == full_cross_len:\n        # add pairwise product of distinct features\n        for i in range(F):\n            for j in range(i+1, F):\n                Z_parts.append((logX[:, i] * logX[:, j]).reshape(N, 1))\n\n    Z = np.hstack(Z_parts)\n    if Z.shape[1] != P:\n        raise ValueError(f\"Parameter vector of length {P} \"\n                         f\"does not match design matrix width {Z.shape[1]}.\")\n\n    # Predict in log\u2010space and exponentiate\n    pred_log = Z.dot(theta)\n    return np.exp(pred_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits a full quadratic log\u2010law with cross\u2010terms:\n       log(loss) \u2248 intercept\n                 + \u03a3_i a_i\u00b7log(x_i)\n                 + \u03a3_i b_i\u00b7[log(x_i)]^2\n                 + \u03a3_{i<j} c_{ij}\u00b7log(x_i)\u00b7log(x_j)\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # log\u2010transform\n    logX = np.log(X + eps)\n    logy = np.log(y + eps)\n    N, F = logX.shape\n\n    # Determine full\u2010model parameter count\n    P = 1 + 2*F + (F*(F-1)//2)\n\n    # Build design matrix\n    Z_parts = [np.ones((N, 1), dtype=float), logX, logX**2]\n    for i in range(F):\n        for j in range(i+1, F):\n            Z_parts.append((logX[:, i] * logX[:, j]).reshape(N, 1))\n    Z = np.hstack(Z_parts)  # shape (N, P)\n\n    # Ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P, dtype=float)\n    reg[0, 0] = 0.0\n\n    # Solve normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n    theta = np.linalg.solve(A, b)\n\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0766), Performs well on nmae (0.2446), Performs well on r2 (0.9234), Performs well on combined_score (0.9289)\n\n\n### Program 2 (Score: 0.5523)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using either:\n      - Pure power\u2010law (5 parameters): \n          [intercept, w_lr, w_bsz, w_data, w_param]\n      - Cross\u2010quadratic law (11 parameters):\n          [intercept,\n           w_lr, w_bsz, w_data, w_param,\n           q_lr, q_bsz, q_data, q_param,\n           c_lr_bsz, c_data_param]\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:     array\u2010like of length 5 or 11\n    Returns:    (N,) array of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    data = logX[:, 2]\n    prm  = logX[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size == 5:\n        # Pure power\u2010law\n        intercept, w_lr, w_bsz, w_data, w_param = p\n        log_pred = (\n            intercept\n            + w_lr   * lr\n            + w_bsz  * bsz\n            + w_data * data\n            + w_param* prm\n        )\n    elif p.size == 11:\n        # Cross\u2010quadratic law\n        intercept    = p[0]\n        w1, w2, w3, w4 = p[1:5]\n        q1, q2, q3, q4 = p[5:9]\n        c_lr_bsz, c_data_prm = p[9:11]\n        log_pred = (\n            intercept\n            + w1 * lr   + w2 * bsz  + w3 * data   + w4 * prm\n            + q1 * lr**2 + q2 * bsz**2 + q3 * data**2 + q4 * prm**2\n            + c_lr_bsz  * (lr * bsz)\n            + c_data_prm* (data * prm)\n        )\n    else:\n        raise ValueError(f\"Expected params length 5 or 11, got {p.size}\")\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a cross\u2010quadratic scaling law:\n      log(loss) \u2248 intercept\n                 + \u03a3_i w_i\u00b7log(x_i)\n                 + \u03a3_i q_i\u00b7[log(x_i)]^2\n                 + c1\u00b7log(lr)\u00b7log(bsz)\n                 + c2\u00b7log(data_size)\u00b7log(param_size)\n\n    Solves a ridge\u2010regularized linear system in log\u2010space and returns 11 params.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    lr   = logX[:, 0:1]\n    bsz  = logX[:, 1:2]\n    data = logX[:, 2:3]\n    prm  = logX[:, 3:4]\n\n    # Build design matrix Z: [1, lr, bsz, data, prm, lr^2, bsz^2, data^2, prm^2, lr*bsz, data*prm]\n    Z = np.hstack([\n        np.ones((X.shape[0], 1), dtype=float),\n        lr, bsz, data, prm,\n        lr**2, bsz**2, data**2, prm**2,\n        lr * bsz,\n        data * prm\n    ])\n\n    # Ridge regularization (no penalty on intercept)\n    P = Z.shape[1]  # should be 11\n    lambda_reg = 1e-2\n    reg = np.eye(P, dtype=float)\n    reg[0, 0] = 0.0\n\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1654), Performs well on nmae (0.3513), Performs well on r2 (0.8346), Performs well on combined_score (0.8580)\n\n\n### Program 3 (Score: 0.5646)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2010polynomial scaling law with\n    optional floor and numeric safeguards.\n\n      loss \u2248 exp(b0 + \u03a3_i w_i * log(x_i) + \u03a3_i c_i * (log(x_i))^2)  (no floor term here)\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (9,) =\n                   [b0, w_lr, w_bsz, w_data, w_param,\n                    c_lr, c_bsz, c_data, c_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clip inputs to avoid log(0) or negatives\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # take logs\n    logX = np.log(X)  # shape (N,4)\n\n    # unpack parameters\n    b0       = float(params[0])\n    w        = np.asarray(params[1:5], dtype=np.float64)   # linear weights\n    c        = np.asarray(params[5:9], dtype=np.float64)   # quadratic weights\n\n    # compute log\u2010prediction\n    # log_pred = b0 + \u03a3_i w_i*logX_i + \u03a3_i c_i*(logX_i)^2\n    log_pred = b0 + logX.dot(w) + (logX**2).dot(c)\n\n    # numerical clipping for stability\n    log_pred = np.clip(log_pred, -50.0,  50.0)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010polynomial model in log\u2010space with weighted ridge regression:\n\n      log(loss) \u2248 b0 + \u03a3_i w_i * log(x_i) + \u03a3_i c_i * (log(x_i))^2\n\n    We weight samples according to log(data_size * param_size) so that large\u2010scale\n    configurations receive more emphasis (improves generalization on test set).\n    A small ridge penalty ensures stability.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (9,) =\n              [b0, w_lr, w_bsz, w_data, w_param,\n               c_lr, c_bsz, c_data, c_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # clip for stability\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log\u2010features and log\u2010labels\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    N, F = logX.shape   # F should be 4\n\n    # DESIGN MATRIX in log\u2010space: [1, logX_0..3, (logX_0..3)^2]\n    ones = np.ones((N,1), dtype=np.float64)\n    quad = logX**2\n    Z = np.hstack([ones, logX, quad])    # shape (N, 1+4+4 =9)\n\n    # SAMPLE WEIGHTS based on scale of data/param sizes\n    # w_n = 1 + normalized( log(data_size) + log(param_size) )\n    log_data   = logX[:,2]\n    log_param  = logX[:,3]\n    log_scale  = log_data + log_param          # (N,)\n    # shift to positive and normalize to [0,1]\n    m, M = log_scale.min(), log_scale.max()\n    if M > m:\n        w_scale = (log_scale - m) / (M - m)\n    else:\n        w_scale = np.zeros_like(log_scale)\n    sample_w = 1.0 + w_scale                  # range [1,2]\n\n    # incorporate sample weights: sqrt for design\n    sw_sqrt = np.sqrt(sample_w)               # (N,)\n    Zw = Z * sw_sqrt[:,None]                  # weighted design\n    yw = logy * sw_sqrt                       # weighted targets\n\n    # ridge regularization (no penalty on intercept)\n    P = Z.shape[1]                            # 9\n    lambda_reg = 1e-4\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0\n\n    # Solve (Z^T W Z + \u03bbI) p = Z^T W y\n    A = Zw.T.dot(Zw) + lambda_reg * I         # (9,9)\n    b = Zw.T.dot(yw)                          # (9,)\n\n    # solve for params\n    params = np.linalg.solve(A, b)            # (9,)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2585), Performs well on nmae (0.4637), Performs well on r2 (0.7415), Performs well on combined_score (0.7946)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5566)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a multiplicative power\u2010law:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # ensure array\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # compute log\u2010features\n    logX = np.log(X)                                              # (N,4)\n    # unpack params\n    theta = np.asarray(params, dtype=np.float64)\n    intercept = float(theta[0])\n    weights   = theta[1:]                                         # (4,)\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    by solving ridge\u2010regularized normal equations in log\u2010space.\n    \"\"\"\n    # prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # log\u2010transform\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # build design matrix [1, log(x1), ..., log(xF)]\n    ones   = np.ones((N,1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    D = F + 1                                                     # number of parameters\n    # ridge regularization (no penalty on intercept)\n    # scale lambda to the average diagonal magnitude for numeric stability\n    G = design.T.dot(design)\n    avg_diag = np.mean(np.diag(G))\n    lambda_reg = 1e-6 * max(avg_diag, 1.0)\n    I = np.eye(D, dtype=np.float64)\n    I[0,0] = 0.0\n    # solve (X^T X + \u03bbI) \u03b8 = X^T logy\n    A = G + lambda_reg * I\n    b = design.T.dot(logy)\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least squares if singular\n        theta, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return theta  # shape (5,)\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5434, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible scaling law in log\u2010space supporting:\n      - pure power\u2010law:           params length = 1 + F\n      - quadratic log\u2010law:        params length = 1 + 2F\n      - full quadratic w/ crosses: params length = 1 + 2F + F*(F-1)/2\n    where F = number of features (here 4).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    # log\u2010transform inputs\n    logX = np.log(X + eps)\n    theta = np.asarray(params, dtype=float).ravel()\n    N, F = logX.shape\n    P = theta.size\n\n    # Build design matrix Z based on expected param length\n    # Start with intercept and linear terms\n    Z_parts = [np.ones((N, 1), dtype=float), logX]\n\n    # If quadratic terms are present\n    if P >= 1 + 2*F:\n        Z_parts.append(logX**2)\n\n    # If cross\u2010terms are present\n    full_cross_len = (1 + 2*F + F*(F-1)//2)\n    if P == full_cross_len:\n        # add pairwise product of distinct features\n        for i in range(F):\n            for j in range(i+1, F):\n                Z_parts.append((logX[:, i] * logX[:, j]).reshape(N, 1))\n\n    Z = np.hstack(Z_parts)\n    if Z.shape[1] != P:\n        raise ValueError(f\"Parameter vector of length {P} \"\n                         f\"does not match design matrix width {Z.shape[1]}.\")\n\n    # Predict in log\u2010space and exponentiate\n    pred_log = Z.dot(theta)\n    return np.exp(pred_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits a full quadratic log\u2010law with cross\u2010terms:\n       log(loss) \u2248 intercept\n                 + \u03a3_i a_i\u00b7log(x_i)\n                 + \u03a3_i b_i\u00b7[log(x_i)]^2\n                 + \u03a3_{i<j} c_{ij}\u00b7log(x_i)\u00b7log(x_j)\n    via ridge\u2010regularized least squares in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # log\u2010transform\n    logX = np.log(X + eps)\n    logy = np.log(y + eps)\n    N, F = logX.shape\n\n    # Determine full\u2010model parameter count\n    P = 1 + 2*F + (F*(F-1)//2)\n\n    # Build design matrix\n    Z_parts = [np.ones((N, 1), dtype=float), logX, logX**2]\n    for i in range(F):\n        for j in range(i+1, F):\n            Z_parts.append((logX[:, i] * logX[:, j]).reshape(N, 1))\n    Z = np.hstack(Z_parts)  # shape (N, P)\n\n    # Ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P, dtype=float)\n    reg[0, 0] = 0.0\n\n    # Solve normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n    theta = np.linalg.solve(A, b)\n\n    return theta\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5611, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5566, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a multiplicative power\u2010law:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # ensure array\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # compute log\u2010features\n    logX = np.log(X)                                              # (N,4)\n    # unpack params\n    theta = np.asarray(params, dtype=np.float64)\n    intercept = float(theta[0])\n    weights   = theta[1:]                                         # (4,)\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    by solving ridge\u2010regularized normal equations in log\u2010space.\n    \"\"\"\n    # prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # log\u2010transform\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # build design matrix [1, log(x1), ..., log(xF)]\n    ones   = np.ones((N,1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    D = F + 1                                                     # number of parameters\n    # ridge regularization (no penalty on intercept)\n    # scale lambda to the average diagonal magnitude for numeric stability\n    G = design.T.dot(design)\n    avg_diag = np.mean(np.diag(G))\n    lambda_reg = 1e-6 * max(avg_diag, 1.0)\n    I = np.eye(D, dtype=np.float64)\n    I[0,0] = 0.0\n    # solve (X^T X + \u03bbI) \u03b8 = X^T logy\n    A = G + lambda_reg * I\n    b = design.T.dot(logy)\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least squares if singular\n        theta, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return theta  # shape (5,)\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5523, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using either:\n      - Pure power\u2010law (5 parameters): \n          [intercept, w_lr, w_bsz, w_data, w_param]\n      - Cross\u2010quadratic law (11 parameters):\n          [intercept,\n           w_lr, w_bsz, w_data, w_param,\n           q_lr, q_bsz, q_data, q_param,\n           c_lr_bsz, c_data_param]\n    data_points: (N,4) array [lr, bsz, data_size, non_embedding_param_size]\n    params:     array\u2010like of length 5 or 11\n    Returns:    (N,) array of predicted lm loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    data = logX[:, 2]\n    prm  = logX[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size == 5:\n        # Pure power\u2010law\n        intercept, w_lr, w_bsz, w_data, w_param = p\n        log_pred = (\n            intercept\n            + w_lr   * lr\n            + w_bsz  * bsz\n            + w_data * data\n            + w_param* prm\n        )\n    elif p.size == 11:\n        # Cross\u2010quadratic law\n        intercept    = p[0]\n        w1, w2, w3, w4 = p[1:5]\n        q1, q2, q3, q4 = p[5:9]\n        c_lr_bsz, c_data_prm = p[9:11]\n        log_pred = (\n            intercept\n            + w1 * lr   + w2 * bsz  + w3 * data   + w4 * prm\n            + q1 * lr**2 + q2 * bsz**2 + q3 * data**2 + q4 * prm**2\n            + c_lr_bsz  * (lr * bsz)\n            + c_data_prm* (data * prm)\n        )\n    else:\n        raise ValueError(f\"Expected params length 5 or 11, got {p.size}\")\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a cross\u2010quadratic scaling law:\n      log(loss) \u2248 intercept\n                 + \u03a3_i w_i\u00b7log(x_i)\n                 + \u03a3_i q_i\u00b7[log(x_i)]^2\n                 + c1\u00b7log(lr)\u00b7log(bsz)\n                 + c2\u00b7log(data_size)\u00b7log(param_size)\n\n    Solves a ridge\u2010regularized linear system in log\u2010space and returns 11 params.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    lr   = logX[:, 0:1]\n    bsz  = logX[:, 1:2]\n    data = logX[:, 2:3]\n    prm  = logX[:, 3:4]\n\n    # Build design matrix Z: [1, lr, bsz, data, prm, lr^2, bsz^2, data^2, prm^2, lr*bsz, data*prm]\n    Z = np.hstack([\n        np.ones((X.shape[0], 1), dtype=float),\n        lr, bsz, data, prm,\n        lr**2, bsz**2, data**2, prm**2,\n        lr * bsz,\n        data * prm\n    ])\n\n    # Ridge regularization (no penalty on intercept)\n    P = Z.shape[1]  # should be 11\n    lambda_reg = 1e-2\n    reg = np.eye(P, dtype=float)\n    reg[0, 0] = 0.0\n\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic log\u2010law with cross\u2010terms:\n      log(loss) \u2248 \u03b80\n                 + \u03a3_i \u03b8_i \u00b7 log(x_i)\n                 + \u03a3_i \u03b8_{i+4} \u00b7 [log(x_i)]^2\n                 + \u03a3_{i<j} \u03b8_{9 + k} \u00b7 log(x_i)\u00b7log(x_j)\n\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Total parameters P = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # shape (N,4)\n\n    # unpack log\u2010features\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    ds   = logX[:, 2]\n    ps   = logX[:, 3]\n    N = logX.shape[0]\n\n    # build design matrix Z: [1,\n    #                         lr, bsz, ds, ps,\n    #                         lr^2, bsz^2, ds^2, ps^2,\n    #                         lr*bsz, lr*ds, lr*ps,\n    #                         bsz*ds, bsz*ps,\n    #                         ds*ps]\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        lr, bsz, ds, ps,\n        lr**2, bsz**2, ds**2, ps**2,\n        lr * bsz, lr * ds, lr * ps,\n        bsz * ds, bsz * ps,\n        ds  * ps\n    ])\n\n    theta = np.asarray(params, dtype=np.float64).ravel()\n    if theta.size != Z.shape[1]:\n        raise ValueError(f\"Expected {Z.shape[1]} parameters, got {theta.size}\")\n\n    # predict in log\u2010space, clamp for numeric stability\n    log_pred = Z.dot(theta)\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the full quadratic log\u2010law with cross\u2010terms via ridge\u2010regularized\n    weighted least squares in log\u2010space.\n\n    We weight each sample by 1 + normalized( log(data_size) + log(param_size) )\n    to emphasize large\u2010scale configurations.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)   # (N,4)\n    logy = np.log(y)   # (N,)\n\n    # unpack log\u2010features\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    ds   = logX[:, 2]\n    ps   = logX[:, 3]\n    N = logX.shape[0]\n\n    # build design matrix Z as above\n    Z = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        lr, bsz, ds, ps,\n        lr**2, bsz**2, ds**2, ps**2,\n        lr * bsz, lr * ds, lr * ps,\n        bsz * ds, bsz * ps,\n        ds  * ps\n    ])  # shape (N,15)\n\n    # sample weights to emphasize large\u2010scale points\n    log_scale = ds + ps\n    m, M = log_scale.min(), log_scale.max()\n    if M > m:\n        w_scale = (log_scale - m) / (M - m)\n    else:\n        w_scale = np.zeros_like(log_scale)\n    sample_w = 1.0 + w_scale            # in [1,2]\n    sw_sqrt = np.sqrt(sample_w)\n\n    # apply weights to design matrix and target\n    Zw = Z * sw_sqrt[:, None]\n    yw = logy * sw_sqrt\n\n    # ridge regularization (no penalty on intercept)\n    P = Z.shape[1]\n    lambda_reg = 1e-3\n    reg = np.eye(P, dtype=np.float64)\n    reg[0, 0] = 0.0\n\n    A = Zw.T.dot(Zw) + lambda_reg * reg  # (15,15)\n    b = Zw.T.dot(yw)                     # (15,)\n\n    theta = np.linalg.solve(A, b)       # (15,)\n    return theta\n# EVOLVE-BLOCK-END\n```"]}}}