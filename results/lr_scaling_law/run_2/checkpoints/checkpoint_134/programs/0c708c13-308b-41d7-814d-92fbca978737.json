{"id": "0c708c13-308b-41d7-814d-92fbca978737", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for normalization\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to avoid log(0), log-transform, and normalize each feature \n    to [0,1] using precomputed log-mins and ranges.\n    Inputs:\n      X: ndarray of shape (N,4)\n    Returns:\n      u: ndarray of shape (N,4) with values in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Inputs:\n      u: ndarray of shape (N,4)\n    Returns:\n      Phi: ndarray of shape (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n    Returns:\n      preds: array of shape (N,) predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # predict in log-loss domain and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: array of length 15 of fitted coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if y.ndim != 1:\n        y = y.ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    \n    # assemble normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    \n    # adaptive ridge regularization\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A += ridge * I\n    \n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "606b098c-3b45-4bce-9f38-564b2e24e9d6", "generation": 3, "timestamp": 1754806571.2058282, "iteration_found": 124, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43745368419125447, "nmae": 0.6955391817494094, "r2": 0.5625463158087456, "combined_score": 0.6956745883347356}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6955\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, bsz, data_size, non_embedding_param_size]. This\nyields 15 parameters (intercept, 4 linear, 4 squared, 6 pairwise).\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Known global log\u2010range of each feature for normalization\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns shape (N, 15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + linear + squared + interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # log\u2010transform target\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    # adaptive ridge: scale by trace(A)/P\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal, but un\u2010penalize intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# We adopt a normalized\u2010log quadratic scaling law:\n#   log(loss) \u2248 \u03b20 + \u2211_i \u03b2_i u_i + \u2211_i \u03b3_i u_i^2 + \u2211_{i<j} \u03b4_{ij} u_i u_j\n# where u_i = (log x_i \u2212 log_min_i) / (log_max_i \u2212 log_min_i) clipped to [0,1].\n# We fit via closed\u2010form ridge regression in the log\u2010loss domain for stability.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# feature order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAXS  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAXS - _LOG_MINS  # to normalize logs to [0,1]\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in normalized log\u2010space.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    # total parameters = 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=u.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    start = 1 + F\n    Phi[:, start:start+F] = u**2\n    # pairwise interactions\n    idx = start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via the learned normalized\u2010log quadratic scaling law.\n    \n    Args:\n      data_points: np.ndarray of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      np.ndarray of length 15 (\u03b20, \u03b2_i, \u03b3_i, \u03b4_ij)\n    Returns:\n      preds: np.ndarray of shape (N,) predicted LM loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n\n    # avoid non-positive before log\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # normalize log\u2010features to [0,1]\n    u = (logX - _LOG_MINS) / _LOG_RANGE\n    # guard against numerical out\u2010of\u2010bounds\n    u = np.clip(u, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(u)            # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)                    # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via ridge\u2010regularized least squares.\n    \n    Args:\n      data_points: np.ndarray of shape (N,4)\n      loss_values: np.ndarray of shape (N,)\n    Returns:\n      params: np.ndarray of length 15 of learned coefficients in the log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"data_points must be (N,4) and match length of loss_values.\")\n\n    # avoid zeros before log\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize log\u2010features\n    u = (logX - _LOG_MINS) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(u)            # shape (N,15)\n\n    # normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)                       # (15,15)\n    b = Phi.T.dot(logy)                      # (15,)\n    P = A.shape[0]\n    # adapt ridge scale to average diagonal magnitude\n    ridge = 1e-6 * np.trace(A) / P\n    # apply ridge to all but intercept\n    for i in range(1, P):\n        A[i, i] += ridge\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip features to avoid log(0), then log\u2010transform and normalize each\n    log-feature into [0,1] using precomputed global min/max.\n    \"\"\"\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns (for F=4 features):\n      [1,\n       logX_norm_i       (4 linear terms),\n       (logX_norm_i)^2   (4 squared terms),\n       logX_norm_i * logX_norm_j for i<j  (6 interaction terms)\n      ]\n    Returns an (N x 15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1 : 1+F] = logX_norm\n\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start : sq_start+F] = logX_norm ** 2\n\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 15-parameter normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15:\n                   [intercept,\n                    4 linear coeffs,\n                    4 squared coeffs,\n                    6 interaction coeffs]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # normalize log-features and build \u03a6\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-loss domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized-log quadratic scaling law via\n    closed-form ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4) with hyperparameters\n      loss_values: array of shape (N,) of observed LM loss values\n\n    Returns:\n      params: array of length 15 of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # normalize log-features and build \u03a6\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)\n\n    # avoid log(0) in targets\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15\u00d715)\n    b = Phi.T.dot(logy)     # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 \u00d7 (trace(A)/P)\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n\n    # penalize all but the intercept\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS   # for normalization to [0,1]\n\n# Precompute upper\u2010triangle indices for cross terms (i<j)\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n_P = 1 + 2*_F + len(_TRIU_I)           # total features: intercept + linear + squared + cross\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Given normalized log\u2010features u (N\u00d74), build the design matrix \u03a6 (N\u00d715):\n      [1,\n       u[:,0..3],\n       (u[:,0..3])**2,\n       u[:,i]*u[:,j] for i<j\n      ]\n    \"\"\"\n    N, F = u.shape\n    # intercept\n    Phi = np.empty((N, _P), dtype=u.dtype)\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    Phi[:, 1+F:1+2*F] = u*u\n    # cross terms\n    Phi[:, 1+2*F:] = u[:, _TRIU_I] * u[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law in the log\u2010domain.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) of [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: 1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, 4)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input with shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # normalize logs to [0,1]\n    u = (np.log(X) - _LOG_MINS) / _LOG_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # build features and predict\n    Phi = _build_design_matrix(u)            # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    logy = Phi.dot(p)                        # shape (N,)\n    return np.exp(logy)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via ridge\u2010regularized least squares\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, 4)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points must match number of loss values.\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # normalize logs to [0,1]\n    u = (np.log(X) - _LOG_MINS) / _LOG_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # build design matrix and target\n    Phi = _build_design_matrix(u)            # (N,15)\n    logy = np.log(y)                         # (N,)\n    # normal equations\n    A = Phi.T.dot(Phi)                       # (15,15)\n    b = Phi.T.dot(logy)                      # (15,)\n    # adaptive ridge strength for stability\n    ridge = 1e-6 * np.trace(A) / _P\n    # penalize all but intercept\n    A[np.diag_indices(_P)] += ridge\n    A[0,0]         -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS = np.log(np.array([1.2e-4,   16.0,     4e9,     2.14e8], dtype=float))\n_LOG_MAXS = np.log(np.array([2.2e-2,   4096.0,   1e11,    1e9    ], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS  # for normalizing to [0,1]\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a quadratic design matrix from normalized log\u2010features.\n    Columns:\n      [1,\n       x\u0302_0, x\u0302_1, x\u0302_2, x\u0302_3,          -- linear terms\n       x\u0302_0\u00b2, x\u0302_1\u00b2, x\u0302_2\u00b2, x\u0302_3\u00b2,      -- squared terms\n       x\u0302_0\u00b7x\u0302_1, x\u0302_0\u00b7x\u0302_2, x\u0302_0\u00b7x\u0302_3, -- cross terms\n       x\u0302_1\u00b7x\u0302_2, x\u0302_1\u00b7x\u0302_3,            -- \"\n       x\u0302_2\u00b7x\u0302_3]                      -- \"\n    where x\u0302 = normalized log-feature.\n    \"\"\"\n    N, F = logX_norm.shape          # F should be 4\n    # total columns = 1 + F + F + C(F,2) = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    \n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    \n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n    \n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n    \n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n    \n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic model in log-space.\n    \n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients)\n    \n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    \n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    \n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    \n    # build design matrix and predict in log-domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed-form ridge regression in the log-loss domain.\n    \n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    \n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # allow single-point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    \n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    \n    # log-transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    \n    # log-transform target\n    logy = np.log(y)\n    \n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    \n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    \n    # adaptive ridge regularization: \u03bb = 1e-6 * trace(A) / P\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept\n    I = np.eye(P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, bsz, data_size, non_embedding_param_size]. This\nyields 15 parameters (intercept, 4 linear, 4 squared, 6 pairwise).\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Known global log\u2010range of each feature for normalization\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns shape (N, 15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + linear + squared + interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # log\u2010transform target\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    # adaptive ridge: scale by trace(A)/P\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal, but un\u2010penalize intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                   [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),   # intercept\n        log_lr,                    # main effect lr\n        log_bsz,                   # main effect bsz\n        log_D,                     # main effect data_size\n        log_P,                     # main effect param_size\n        log_lr  * log_bsz,         # interaction lr*bsz\n        log_D   * log_P           # interaction data_size*param_size\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching sizes and 2D input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr  * log_bsz,\n        log_D   * log_P\n    ])\n\n    # closed-form ridge regression (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize only the non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand ridge\u2010regularized closed\u2010form fitting for numerical stability and generalization.\nWe normalize each log\u2010feature to [0,1] based on known domain ranges,\nthen fit a polynomial with linear, squared, and pairwise terms.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8 ], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2,  4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix Phi for a second\u2010order polynomial in normalized log\u2010features.\n    Columns: [1, logX_norm_i, (logX_norm_i)^2, logX_norm_i * logX_norm_j (i<j)].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) or negatives\n    X = np.maximum(X, 1e-12)\n    # log\u2010transform\n    logX = np.log(X)                        # shape (N,4)\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    N, F = logX_norm.shape\n\n    # number of basis functions:\n    #   1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds: array (N,) of predicted lm loss\n    \"\"\"\n    # build design matrix\n    Phi = _build_design_matrix(data_points)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters but got {p.size}\")\n\n    # linear model in log\u2010loss domain\n    logy_pred = Phi.dot(p)                # shape (N,)\n    return np.exp(logy_pred)              # back to loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # build design matrix\n    Phi = _build_design_matrix(X)\n\n    # ridge regularization\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # keep intercept unpenalized\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip features to avoid log(0), then log\u2010transform and normalize each\n    log-feature into [0,1] using precomputed global min/max.\n    \"\"\"\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns (for F=4 features):\n      [1,\n       logX_norm_i       (4 linear terms),\n       (logX_norm_i)^2   (4 squared terms),\n       logX_norm_i * logX_norm_j for i<j  (6 interaction terms)\n      ]\n    Returns an (N x 15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1 : 1+F] = logX_norm\n\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start : sq_start+F] = logX_norm ** 2\n\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 15-parameter normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15:\n                   [intercept,\n                    4 linear coeffs,\n                    4 squared coeffs,\n                    6 interaction coeffs]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # normalize log-features and build \u03a6\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-loss domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized-log quadratic scaling law via\n    closed-form ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4) with hyperparameters\n      loss_values: array of shape (N,) of observed LM loss values\n\n    Returns:\n      params: array of length 15 of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # normalize log-features and build \u03a6\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)\n\n    # avoid log(0) in targets\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15\u00d715)\n    b = Phi.T.dot(logy)     # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 \u00d7 (trace(A)/P)\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n\n    # penalize all but the intercept\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via an 8-parameter\n    log-domain polynomial scaling law:\n\n      log(loss) = \u03b20\n                + \u03b2_lr  * log(lr)\n                + \u03b2_bsz * log(bsz)\n                + \u03b2_D   * log(data_size)\n                + \u03b2_P   * log(non_embedding_param_size)\n                + \u03b2_D2  * [log(data_size)]^2\n                + \u03b2_P2  * [log(non_embedding_param_size)]^2\n                + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n\n    # log-transform inputs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge-regularized least squares\n    in the log-domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 8 [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform features and target\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all parameters except the intercept (index 0)\n    idx = np.arange(8)\n    A[idx, idx] += ridge\n    A[0, 0] -= ridge  # unpenalize intercept\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef _build_design_matrix(X, include_sq=True):\n    \"\"\"\n    Build a design matrix Phi for log-domain polynomial regression.\n    Features:\n      - intercept\n      - log(X_i) for each feature i\n      - [optionally] (log(X_i))^2 for each feature i\n      - log(X_i) * log(X_j) for all i<j pairwise interactions\n\n    Inputs:\n      X: array of shape (N, F)\n      include_sq: whether to include squared-log features\n\n    Returns:\n      Phi: array of shape (N, P)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    N, F = logX.shape\n\n    # count parameters\n    P = 1 + F + (F*(F-1)//2)\n    if include_sq:\n        P += F\n\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # main effects: log(X_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # optional squared terms: (log X_i)^2\n    if include_sq:\n        Phi[:, idx:idx+F] = logX**2\n        idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a log-domain polynomial.\n\n    data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + (opt 4) + 6 = either 11 (no squares) or 15 (with squares)\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n\n    # infer whether squared terms were used by matching param count\n    F = X.shape[1]\n    base_P = 1 + F + (F*(F-1)//2)\n    sq_P   = base_P + F\n\n    if p.size == sq_P:\n        include_sq = True\n    elif p.size == base_P:\n        include_sq = False\n    else:\n        raise ValueError(f\"params length must be {base_P} or {sq_P}, got {p.size}\")\n\n    Phi = _build_design_matrix(X, include_sq=include_sq)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters (length 15, including squared terms)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if y.ndim == 0:\n        y = np.array([y])\n\n    # floor y to avoid log(0)\n    y = np.maximum(y, 1e-12)\n\n    # build design matrix with squared-log features for extra flexibility\n    Phi = _build_design_matrix(X, include_sq=True)\n\n    # log-transform target\n    logy = np.log(y)\n\n    # ridge regression in closed form\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge penalty to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge   # no penalty on intercept\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for normalization\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to avoid log(0), log-transform, and normalize each feature \n    to [0,1] using precomputed log-mins and ranges.\n    Inputs:\n      X: ndarray of shape (N,4)\n    Returns:\n      u: ndarray of shape (N,4) with values in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Inputs:\n      u: ndarray of shape (N,4)\n    Returns:\n      Phi: ndarray of shape (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n    Returns:\n      preds: array of shape (N,) predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # predict in log-loss domain and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: array of length 15 of fitted coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if y.ndim != 1:\n        y = y.ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    \n    # assemble normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    \n    # adaptive ridge regularization\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A += ridge * I\n    \n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}