{"id": "e9dd2500-af50-4c0d-8f60-27e1f5d89b11", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEight\u2010parameter log\u2010domain scaling law for LLM training hyperparameters.\n\nWe model the log\u2013loss as a quadratic polynomial in the log\u2010features:\n    log(y) = \u03b20\n           + \u03b2_lr  * log(lr)\n           + \u03b2_bsz * log(bsz)\n           + \u03b2_D   * log(data_size)\n           + \u03b2_P   * log(non_embedding_param_size)\n           + \u03b2_D2  * [log(data_size)]^2\n           + \u03b2_P2  * [log(non_embedding_param_size)]^2\n           + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\nThis 8\u2010parameter form is fitted via small\u2010ridge regression in closed form\nfor numerical stability and strong generalization across scales.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 8\u2010parameter\n    log\u2010domain polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = \n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log\u2010transform features\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter log\u2010domain scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # unpack & log\u2010transform\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # closed\u2010form ridge regression (small ridge on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (index 0)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7f3f8e94-255a-4f8a-9910-f0ce158affff", "generation": 3, "timestamp": 1754806114.2678156, "iteration_found": 64, "metrics": {"nmse": 0.09757678739762139, "nmae": 0.3101087598372845, "r2": 0.9024232126023786, "combined_score": 0.9110979855642009}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.470222619342496, "nmae": 2.343416061170031, "r2": -2.470222619342496, "combined_score": 0.2237025054799363}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.4702\n- nmae: 2.3434\n- r2: -2.4702\n- combined_score: 0.2237\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as\n    log(loss) = \u03b20\n              + \u03b2_lr    * log(lr)\n              + \u03b2_bsz   * log(batch_size)\n              + \u03b2_D     * log(data_size)\n              + \u03b2_P     * log(non_embedding_param_size)\n              + \u03b2_D2    * [log(data_size)]^2\n              + \u03b2_P2    * [log(non_embedding_param_size)]^2\n              + \u03b2_DP    * log(data_size) * log(non_embedding_param_size)\n\nThis parameter-efficient form captures the primary scaling\neffects and is fitted via small-ridge regression in closed form.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8,\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # compute log-loss and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with small ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (row/col 0)\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n### Program 2 (Score: 0.5553)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via an 8-parameter\n    log-domain polynomial scaling law:\n\n      log(loss) = \u03b20\n                + \u03b2_lr  * log(lr)\n                + \u03b2_bsz * log(bsz)\n                + \u03b2_D   * log(data_size)\n                + \u03b2_P   * log(non_embedding_param_size)\n                + \u03b2_D2  * [log(data_size)]^2\n                + \u03b2_P2  * [log(non_embedding_param_size)]^2\n                + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n\n    # log-transform inputs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge-regularized least squares\n    in the log-domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 8 [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform features and target\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all parameters except the intercept (index 0)\n    idx = np.arange(8)\n    A[idx, idx] += ridge\n    A[0, 0] -= ridge  # unpenalize intercept\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 10-parameter log-domain polynomial scaling law for LLM training hyperparameters.\n\nWe model:\n    log(loss) = \u03b20\n              + \u03b2_lr  * log(lr)\n              + \u03b2_b    * log(bsz)\n              + \u03b2_D    * log(data_size)\n              + \u03b2_P    * log(non_embedding_param_size)\n              + \u03b2_lr2  * [log(lr)]^2\n              + \u03b2_b2   * [log(bsz)]^2\n              + \u03b2_D2   * [log(data_size)]^2\n              + \u03b2_P2   * [log(non_embedding_param_size)]^2\n              + \u03b2_DP   * log(data_size)*log(non_embedding_param_size)\n\nThis adds squared\u2010terms for lr, batch size, data size, and model size\nto capture non-monotonic and saturation effects, plus the main joint\ndata-model interaction.  We fit all 10 parameters via closed-form\nridge regression in the log-domain for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_b, \u03b2_D, \u03b2_P,\n                    \u03b2_lr2, \u03b2_b2, \u03b2_D2, \u03b2_P2,\n                    \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow for single\u2010point inputs\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # unpack and log-transform features\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr = np.log(lr)\n    log_b  = np.log(bsz)\n    log_D  = np.log(D)\n    log_P  = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # build design matrix (N x 10)\n    N = X.shape[0]\n    Phi = np.empty((N, 10), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_b\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    # squared terms\n    Phi[:, 5] = log_lr * log_lr\n    Phi[:, 6] = log_b  * log_b\n    Phi[:, 7] = log_D  * log_D\n    Phi[:, 8] = log_P  * log_P\n    # interaction: data_size \u00d7 model_size\n    Phi[:, 9] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # convert back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 10\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # basic sanity checks\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # floor inputs/outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # unpack and log-transform\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr = np.log(lr)\n    log_b  = np.log(bsz)\n    log_D  = np.log(D)\n    log_P  = np.log(P)\n    log_y  = np.log(y)\n\n    # build the same design matrix\n    N = X.shape[0]\n    Phi = np.empty((N, 10), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_b\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_lr * log_lr\n    Phi[:, 6] = log_b  * log_b\n    Phi[:, 7] = log_D  * log_D\n    Phi[:, 8] = log_P  * log_P\n    Phi[:, 9] = log_D  * log_P\n\n    # ridge regularization strength\n    ridge = 1e-6\n    # normal equations\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept\n    diag_idx = np.arange(10)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    b = Phi.T.dot(log_y)\n\n    # solve for parameter vector\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010domain mins/maxs (same as before) for stable normalization\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,  4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      [1,\n       logX_norm (4 cols),\n       (logX_norm)**2 (4 cols),\n       pairwise products for i<j (6 cols)]\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    cols.append(logX_norm)\n    cols.append(logX_norm**2)\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010order polynomial.\n    Inputs:\n      data_points: (N,4) \u21d2 [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients\n    Returns:\n      preds:       (N,) array of loss predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 2nd\u2010order normalized\u2010log polynomial via weighted ridge regression.\n    Inputs:\n      data_points: (N,4)\n      loss_values: (N,)\n    Returns:\n      params:      length\u201015 coefficient array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX  = np.log(X)\n    logy  = np.log(y)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi    = _build_design_matrix(logX_norm)\n    N, P   = Phi.shape\n\n    # normal\u2010equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # base ridge scaled to average diagonal\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag   # lighter global regularization\n\n    # per\u2010feature penalties (length P = 15)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # no penalty on intercept\n    # linear terms (indices 1\u20134)\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5\u20138)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9\u201314): \n    #   [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply weighted ridge on diagonal\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand ridge\u2010regularized closed\u2010form fitting for numerical stability and generalization.\nWe normalize each log\u2010feature to [0,1] based on known domain ranges,\nthen fit a polynomial with linear, squared, and pairwise terms.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8 ], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2,  4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix Phi for a second\u2010order polynomial in normalized log\u2010features.\n    Columns: [1, logX_norm_i, (logX_norm_i)^2, logX_norm_i * logX_norm_j (i<j)].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) or negatives\n    X = np.maximum(X, 1e-12)\n    # log\u2010transform\n    logX = np.log(X)                        # shape (N,4)\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    N, F = logX_norm.shape\n\n    # number of basis functions:\n    #   1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds: array (N,) of predicted lm loss\n    \"\"\"\n    # build design matrix\n    Phi = _build_design_matrix(data_points)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters but got {p.size}\")\n\n    # linear model in log\u2010loss domain\n    logy_pred = Phi.dot(p)                # shape (N,)\n    return np.exp(logy_pred)              # back to loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # build design matrix\n    Phi = _build_design_matrix(X)\n\n    # ridge regularization\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # keep intercept unpenalized\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as\n    log(loss) = \u03b20\n              + \u03b2_lr    * log(lr)\n              + \u03b2_bsz   * log(batch_size)\n              + \u03b2_D     * log(data_size)\n              + \u03b2_P     * log(non_embedding_param_size)\n              + \u03b2_D2    * [log(data_size)]^2\n              + \u03b2_P2    * [log(non_embedding_param_size)]^2\n              + \u03b2_DP    * log(data_size) * log(non_embedding_param_size)\n\nThis parameter-efficient form captures the primary scaling\neffects and is fitted via small-ridge regression in closed form.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8,\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # compute log-loss and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with small ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (row/col 0)\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                   [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),   # intercept\n        log_lr,                    # main effect lr\n        log_bsz,                   # main effect bsz\n        log_D,                     # main effect data_size\n        log_P,                     # main effect param_size\n        log_lr  * log_bsz,         # interaction lr*bsz\n        log_D   * log_P           # interaction data_size*param_size\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching sizes and 2D input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr  * log_bsz,\n        log_D   * log_P\n    ])\n\n    # closed-form ridge regression (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize only the non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling-law model for LLM training:\nWe work in the log\u2013domain and fit a quadratic polynomial\n(including main effects, squared terms, and pairwise interactions)\nvia closed\u2010form ridge regression for numerical stability.\nThis richer basis can capture saturation and curvature effects\nwhile remaining linear in the parameters.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a log-domain quadratic polynomial:\n      log_loss \u2248 p0\n               + sum_i p_i * xi\n               + sum_i p_{ii} * xi^2\n               + sum_{i<j} p_{ij} * xi * xj\n    where xi = log(feature_i).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N, 4)\n    N, F = logX.shape\n\n    p = np.ravel(params).astype(float)\n    # total params = 1 + F main + F squared + F*(F-1)/2 interactions\n    P_exp = 1 + F + F + (F*(F-1))//2\n    if p.size != P_exp:\n        raise ValueError(f\"Expected {P_exp} params, got {p.size}\")\n\n    # build design matrix\n    Phi = np.ones((N, P_exp), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared effects\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log-domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the quadratic log-domain scaling law via ridge regression.\n    Returns parameter vector of length P = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n    N, F = logX.shape\n\n    # construct design matrix\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    Phi[:, 1+F:1+2*F] = logX**2\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (small to avoid overfitting higher\u2010order terms)\n    # no penalty on intercept\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag, except intercept term\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Mixed iteration strategies\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010domain mins/maxs (same as before) for stable normalization\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,  4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      [1,\n       logX_norm (4 cols),\n       (logX_norm)**2 (4 cols),\n       pairwise products for i<j (6 cols)]\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    cols.append(logX_norm)\n    cols.append(logX_norm**2)\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010order polynomial.\n    Inputs:\n      data_points: (N,4) \u21d2 [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients\n    Returns:\n      preds:       (N,) array of loss predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 2nd\u2010order normalized\u2010log polynomial via weighted ridge regression.\n    Inputs:\n      data_points: (N,4)\n      loss_values: (N,)\n    Returns:\n      params:      length\u201015 coefficient array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX  = np.log(X)\n    logy  = np.log(y)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi    = _build_design_matrix(logX_norm)\n    N, P   = Phi.shape\n\n    # normal\u2010equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # base ridge scaled to average diagonal\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag   # lighter global regularization\n\n    # per\u2010feature penalties (length P = 15)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # no penalty on intercept\n    # linear terms (indices 1\u20134)\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5\u20138)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9\u201314): \n    #   [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply weighted ridge on diagonal\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix with:\n      - intercept\n      - linear terms\n      - squared terms\n      - pairwise interactions\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 for bias, F linear, F squared, F*(F-1)/2 interactions\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic\n    polynomial in the log-domain.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients)\n\n    Returns:\n      preds:       numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and predict in log-loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed-form\n    ridge-regularized linear regression in log-loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 (learned coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge on all diagonal except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model the final language-model loss as an asymptotic floor plus \na separable power\u2010law in model size, data size, batch size, and learning rate:\n   y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * bsz^{\u03b1_bsz} * lr^{\u03b1_lr}\nParameters are reparameterized in log\u2010space for numerical stability:\n   p = [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using an asymptotic power\u2010law form.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6:\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n\n    # unpack reparameterized parameters\n    logA, alpha_P, alpha_D, alpha_bsz, alpha_lr, log_yinf = p\n    A = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # separable power\u2010law term\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_bsz) * (lr ** alpha_lr)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params_opt: array of shape (6,) giving the optimized parameters\n                  [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor small losses for stability\n    y = np.maximum(y, 1e-12)\n\n    # initial guesses\n    min_y = np.min(y)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.2, -0.1], dtype=float)\n    init_log_yinf  = np.log(max(min_y * 0.1, 1e-8))\n    p0 = np.hstack([init_logA, init_alphas, init_log_yinf])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEight\u2010parameter log\u2010domain scaling law for LLM training hyperparameters.\n\nWe model the log\u2013loss as a quadratic polynomial in the log\u2010features:\n    log(y) = \u03b20\n           + \u03b2_lr  * log(lr)\n           + \u03b2_bsz * log(bsz)\n           + \u03b2_D   * log(data_size)\n           + \u03b2_P   * log(non_embedding_param_size)\n           + \u03b2_D2  * [log(data_size)]^2\n           + \u03b2_P2  * [log(non_embedding_param_size)]^2\n           + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\nThis 8\u2010parameter form is fitted via small\u2010ridge regression in closed form\nfor numerical stability and strong generalization across scales.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 8\u2010parameter\n    log\u2010domain polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = \n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log\u2010transform features\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter log\u2010domain scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # unpack & log\u2010transform\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # closed\u2010form ridge regression (small ridge on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (index 0)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- We work entirely in the log\u2013loss domain, transforming the problem into linear regression in a richer feature basis.\n- The design matrix includes linear terms for each feature\u2019s log, quadratic terms for data size and model size logs (capturing curvature/saturation), and a joint interaction term between data size and parameter count.\n- A small ridge penalty on all but the intercept stabilizes the fit even with limited data and ensures good cross\u2010configuration generalization.\n- All computations are carried out in closed form (no iterative optimizer), improving numerical reliability and speed.\n"]}}}