{"id": "d544bc69-4003-432c-bfdc-e92ee2f5c23d", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4,   16.0,    4e9,     2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAX - _LOG_MIN\n\n# For pairwise interaction terms\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on precomputed log\u2010domain minima and ranges.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_MIN) / _LOG_RANGE\n    # clamp to [0,1] to guard against numerical drift\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix of shape (N,15):\n      [1,\n       u_i            (4 cols),\n       u_i^2          (4 cols),\n       u_i * u_j      (6 cols for i<j)]\n    \"\"\"\n    N = u.shape[0]\n    # intercept\n    ones = np.ones((N, 1), dtype=u.dtype)\n    # linear terms\n    lin  = u\n    # squared terms\n    sq   = u * u\n    # pairwise interactions\n    inter = u[:, _TRIU_I] * u[:, _TRIU_J]  # shape (N,6)\n    # concatenate into (N,15)\n    return np.hstack([ones, lin, sq, inter])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    # normalize and build features\n    u   = _normalize_log_features(data_points)  # shape (N,4)\n    Phi = _build_design_matrix(u)               # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain and exponentiate\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via adaptive ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients\n              (in the log-loss domain).\n    \"\"\"\n    # prepare features\n    u   = _normalize_log_features(data_points)  # shape (N,4)\n    Phi = _build_design_matrix(u)               # shape (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n\n    # adaptive ridge regularization (exempt intercept)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d5719242-b47f-4340-a497-89b7e6d4fb6d", "generation": 3, "timestamp": 1754806881.4098735, "iteration_found": 158, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43745284046690064, "nmae": 0.6955378006319771, "r2": 0.5625471595330993, "combined_score": 0.6956749966664568}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6955\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain minima and ranges for normalization\n# Feature order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAX - _LOG_MIN\n\n# Precompute indices for pairwise interactions (i<j)\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_logs(X):\n    \"\"\"\n    Clip X to [1e-12, \u221e), take elementwise log, then normalize each feature\n    to [0,1] via precomputed global log-min and log-range.\n    Returns an (N,4) array of normalized log-features.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_MIN) / _LOG_RANGE\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix of shape (N,15):\n      [1,\n       u_i           (4 columns),\n       u_i^2         (4 columns),\n       u_i * u_j     (6 columns for i<j)]\n    \"\"\"\n    N = u.shape[0]\n    # constant term\n    ones = np.ones((N, 1), dtype=u.dtype)\n    # linear terms\n    lin = u\n    # squared terms\n    sq  = u * u\n    # pairwise interactions\n    inter = u[:, _TRIU_I] * u[:, _TRIU_J]  # shape (N,6)\n    # concatenate into (N,15)\n    return np.hstack([ones, lin, sq, inter])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    # normalize logs and build features\n    u   = _normalize_logs(data_points)      # (N,4)\n    Phi = _build_design_matrix(u)           # (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain and exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients (in log-loss domain).\n    \"\"\"\n    # prepare features\n    u   = _normalize_logs(data_points)      # (N,4)\n    Phi = _build_design_matrix(u)           # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization (no penalty on intercept)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on the global log\u2010domain minima and maxima.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # Clip any numerical drift outside [0,1]\n    return np.clip(logX_norm, 0.0, 1.0)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in the normalized log\u2010domain.\n    Columns:\n      [1,\n       u_i            for i=0..3,\n       u_i^2          for i=0..3,\n       u_i * u_j      for all 0<=i<j<4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    P = 1 + F + F + (F*(F-1))//2  # 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (coefficients in the log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain to [0,1]\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix (N\u00d715)\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log\u2010loss domain and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # normalize features\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # target in log\u2010domain, avoid log(0)\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge on diagonals except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize the intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as a linear combination of:\n  \u2022 log(lr)\n  \u2022 log(bsz)\n  \u2022 log(data_size)\n  \u2022 log(non_embedding_param_size)\nplus quadratic terms on data_size and model size and their interaction:\n\n    log y = \u03b20\n          + \u03b2_lr  * log(lr)\n          + \u03b2_bsz * log(bsz)\n          + \u03b2_D   * log(data_size)\n          + \u03b2_P   * log(non_embedding_param_size)\n          + \u03b2_D2  * [log(data_size)]^2\n          + \u03b2_P2  * [log(non_embedding_param_size)]^2\n          + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\nThis 8-parameter form is both compact and expressive, and we fit it via\nclosed-form ridge regression in the log-loss domain for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow for single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform features\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow for single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # assemble design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all but intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5748)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParameter-efficient normalized\u2010interaction scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a linear function of:\n  - intercept\n  - 4 normalized log\u2010features\n  - 6 pairwise interactions between normalized log\u2010features\n\nTotal parameters: 1 + 4 + 6 = 11.  We fit via closed\u2010form ridge regression\n(for numerical stability) in the log\u2010loss domain.\n\"\"\"\n\n# Precomputed log\u2010domain minima and spans for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS  = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_SPANS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_MINS\n\ndef _build_design_matrix(log_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for the simplified model:\n      Columns = [1,\n                 log_norm_0, log_norm_1, log_norm_2, log_norm_3,\n                 log_norm_i * log_norm_j for all 0<=i<j<4]\n    \"\"\"\n    N, F = log_norm.shape\n    # intercept + F mains + C(F,2) interactions\n    P = 1 + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=log_norm.dtype)\n    # main effects\n    Phi[:, 1:1+F] = log_norm\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = log_norm[:, i] * log_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the simplified normalized\u2010interaction model.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 11:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_lr_bsz, \u03b2_lr_D, \u03b2_lr_P, \u03b2_bsz_D, \u03b2_bsz_P, \u03b2_D_P]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    log_norm = (logX - _LOG_MINS) / _LOG_SPANS\n    log_norm = np.clip(log_norm, 0.0, 1.0)\n\n    # build design matrix and predict in log-loss domain\n    Phi = _build_design_matrix(log_norm)   # shape (N,11)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified normalized\u2010interaction scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: ndarray of length 11 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform inputs and target\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    log_norm = (logX - _LOG_MINS) / _LOG_SPANS\n    log_norm = np.clip(log_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(log_norm)   # shape (N,11)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                     # (11,11)\n    b = Phi.T.dot(logy)                    # (11,)\n\n    # adaptive ridge = small fraction of average diagonal\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParsimonious log\u2010domain scaling law for LLM training:\n\nWe predict the language\u2010model loss via a small 8\u2010parameter model:\n    log(loss) \u2248 \u03b20\n              + \u03b2_lr * log(lr)\n              + \u03b2_bsz * log(bsz)\n              + \u03b2_D  * log(data_size)\n              + \u03b2_P  * log(param_size)\n              + \u03b2_D2 * [log(data_size)]^2\n              + \u03b2_P2 * [log(param_size)]^2\n              + \u03b2_DP * log(data_size) * log(param_size)\n\nThis form captures the primary power\u2010law effects of lr and bsz\nand allows mild curvature and interaction in data/parameter scale\nfor stable cross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8\u2010parameter log\u2010domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) or (4,), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8 = [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 (N\u00d78)\n    # columns: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log\u2010domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter scaling\u2010law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    # A = \u03a6\u1d40\u03a6 + ridge * I (except intercept unpenalized)\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries for parameters 1..7\n    idx = np.arange(Phi.shape[1])\n    A[idx, idx] += ridge\n    # remove penalty on intercept term\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain minima and ranges for normalization\n# Feature order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAX - _LOG_MIN\n\n# Precompute indices for pairwise interactions (i<j)\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_logs(X):\n    \"\"\"\n    Clip X to [1e-12, \u221e), take elementwise log, then normalize each feature\n    to [0,1] via precomputed global log-min and log-range.\n    Returns an (N,4) array of normalized log-features.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_MIN) / _LOG_RANGE\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix of shape (N,15):\n      [1,\n       u_i           (4 columns),\n       u_i^2         (4 columns),\n       u_i * u_j     (6 columns for i<j)]\n    \"\"\"\n    N = u.shape[0]\n    # constant term\n    ones = np.ones((N, 1), dtype=u.dtype)\n    # linear terms\n    lin = u\n    # squared terms\n    sq  = u * u\n    # pairwise interactions\n    inter = u[:, _TRIU_I] * u[:, _TRIU_J]  # shape (N,6)\n    # concatenate into (N,15)\n    return np.hstack([ones, lin, sq, inter])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    # normalize logs and build features\n    u   = _normalize_logs(data_points)      # (N,4)\n    Phi = _build_design_matrix(u)           # (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain and exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients (in log-loss domain).\n    \"\"\"\n    # prepare features\n    u   = _normalize_logs(data_points)      # (N,4)\n    Phi = _build_design_matrix(u)           # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization (no penalty on intercept)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                  [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log of zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # targeted interactions\n    lr_bsz = log_lr * log_bsz\n    D_P    = log_D  * log_P\n\n    # linear model in log-domain\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_D\n      + p[4]*log_P\n      + p[5]*lr_bsz\n      + p[6]*D_P\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr * log_bsz,\n        log_D  * log_P\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices_from(A)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # exempt intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a normalized quadratic design matrix in log\u2010feature space:\n      - intercept\n      - linear terms\n      - squared terms\n      - pairwise interactions\n    \"\"\"\n    N, F = logX_norm.shape\n    # Number of parameters: 1 + F (linear) + F (squared) + F*(F-1)/2 (interactions)\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients)\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and predict in log\u2010loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 (learned coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatch between shapes of data_points and loss_values\")\n\n    # floor values\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # ridge regularization for stability (do not penalize intercept)\n    ridge = 1e-6\n    P_dim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all diagonal entries\n    A[np.diag_indices(P_dim)] += ridge\n    # remove penalty on intercept\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on the global log\u2010domain minima and maxima.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # Clip any numerical drift outside [0,1]\n    return np.clip(logX_norm, 0.0, 1.0)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in the normalized log\u2010domain.\n    Columns:\n      [1,\n       u_i            for i=0..3,\n       u_i^2          for i=0..3,\n       u_i * u_j      for all 0<=i<j<4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    P = 1 + F + F + (F*(F-1))//2  # 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (coefficients in the log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain to [0,1]\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix (N\u00d715)\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log\u2010loss domain and exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # normalize features\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # target in log\u2010domain, avoid log(0)\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge on diagonals except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize the intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 1.1774, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParsimonious log-domain polynomial scaling law:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding one cross\u2010term for model\u2010size \u00d7 data\u2010size and quadratic terms\nfor learning rate and batch size saturation:\n    log(y) = p0\n           + p1\u00b7log(P) + p2\u00b7log(D) + p3\u00b7log(lr) + p4\u00b7log(bsz)\n           + p5\u00b7[log(P)\u00b7log(D)]\n           + p6\u00b7[log(lr)]^2 + p7\u00b7[log(bsz)]^2 + p8\u00b7[log(lr)\u00b7log(bsz)]\nFitting is done via closed\u2010form ridge regression in the log\u2010loss domain\nfor numerical stability and efficiency.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters [lr, bsz, data_size, non_embedding_param_size]\n    using the 9-parameter log-domain polynomial model.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:      1D array of length 9 = [\n        p0,\n        p1 (logP), p2 (logD), p3 (log lr), p4 (log bsz),\n        p5 (logP\u00b7logD),\n        p6 (log lr)^2, p7 (log bsz)^2, p8 (log lr\u00b7log bsz)\n      ]\n    \n    Returns:\n      y_pred: array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 9:\n        raise ValueError(f\"Expected 9 parameters, got {p.size}\")\n\n    # Safeguard against zeros\n    lr  = np.maximum(X[:, 0], 1e-12)\n    bsz = np.maximum(X[:, 1], 1e-12)\n    D   = np.maximum(X[:, 2], 1e-12)\n    P   = np.maximum(X[:, 3], 1e-12)\n\n    # Log\u2010transform features\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    # Build design matrix (N x 9)\n    N = X.shape[0]\n    Phi = np.stack([\n        np.ones(N),           # intercept (p0)\n        logP,                 # p1\n        logD,                 # p2\n        logr,                 # p3\n        logb,                 # p4\n        logP * logD,          # p5\n        logr * logr,          # p6\n        logb * logb,          # p7\n        logr * logb           # p8\n    ], axis=1)\n\n    # Linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9-parameter log-domain polynomial scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 9\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    X = np.atleast_2d(X)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # Safeguard against non-positive values before log\n    y   = np.maximum(y,    1e-12)\n    lr  = np.maximum(X[:,0], 1e-12)\n    bsz = np.maximum(X[:,1], 1e-12)\n    D   = np.maximum(X[:,2], 1e-12)\n    P   = np.maximum(X[:,3], 1e-12)\n\n    # Log\u2010transform\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n    logy = np.log(y)\n\n    # Build design matrix (N x 9)\n    N = X.shape[0]\n    Phi = np.stack([\n        np.ones(N),           # intercept\n        logP,                 # log(P)\n        logD,                 # log(D)\n        logr,                 # log(lr)\n        logb,                 # log(bsz)\n        logP * logD,          # interaction P\u00d7D\n        logr * logr,          # (log lr)^2\n        logb * logb,          # (log bsz)^2\n        logr * logb           # log lr \u00d7 log bsz\n    ], axis=1)\n\n    # Ridge regularization for stability (no penalty on intercept)\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all but the intercept\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n    b = Phi.T.dot(logy)\n\n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.102), Excellent nmae (3.600)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding squared terms and pairwise interactions.  Normalizing each log\u2010feature\nto [0,1] based on known domain ranges improves numerical stability, and\nwe fit via closed\u2010form ridge regression for efficiency.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and ranges for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix containing:\n      - intercept\n      - linear terms (F)\n      - squared terms (F)\n      - pairwise interactions (F*(F-1)/2)\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    quadratic polynomial in the log\u2010domain.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds:       array (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.maximum(X, 1e-12)          # avoid log(0)\n    logX = np.log(X)                  # shape (N,4)\n\n    # normalize each feature to [0,1] based on known log\u2010ranges\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)             # shape (N,)\n    return np.exp(log_pred)           # back to original loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form solution.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                  # shape (N,4)\n    logy = np.log(y)                  # shape (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge    # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4,   16.0,    4e9,     2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAX - _LOG_MIN\n\n# For pairwise interaction terms\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on precomputed log\u2010domain minima and ranges.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_MIN) / _LOG_RANGE\n    # clamp to [0,1] to guard against numerical drift\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix of shape (N,15):\n      [1,\n       u_i            (4 cols),\n       u_i^2          (4 cols),\n       u_i * u_j      (6 cols for i<j)]\n    \"\"\"\n    N = u.shape[0]\n    # intercept\n    ones = np.ones((N, 1), dtype=u.dtype)\n    # linear terms\n    lin  = u\n    # squared terms\n    sq   = u * u\n    # pairwise interactions\n    inter = u[:, _TRIU_I] * u[:, _TRIU_J]  # shape (N,6)\n    # concatenate into (N,15)\n    return np.hstack([ones, lin, sq, inter])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    # normalize and build features\n    u   = _normalize_log_features(data_points)  # shape (N,4)\n    Phi = _build_design_matrix(u)               # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain and exponentiate\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via adaptive ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients\n              (in the log-loss domain).\n    \"\"\"\n    # prepare features\n    u   = _normalize_log_features(data_points)  # shape (N,4)\n    Phi = _build_design_matrix(u)               # shape (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n\n    # adaptive ridge regularization (exempt intercept)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}