{"id": "61d683ab-e12f-48bc-af13-e99dbba931f3", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# We fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\n# of the four inputs [lr, batch size, data size, non\u2010embedding params].\n# This yields 15 parameters: intercept, 4 linear, 4 squared, 6 interactions.\n# We solve via closed\u2010form ridge regression in the log\u2010loss domain with\n# a tiny adaptive regularization for numerical stability (no penalty on intercept).\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order = [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs, take logs, normalize each feature to [0,1] using\n    precomputed log-min and log-range, then clip again.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    # intercept + F linears + F squared + C(F,2) interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # expect 15 parameters\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n    log_pred = Phi.dot(p)           # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    # prepare normalized features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n    # adaptive ridge regularization\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0  # no penalty on intercept\n    A += ridge * I\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6a3591fc-7575-40e3-a565-72c7c95358a9", "generation": 2, "timestamp": 1754806777.4570398, "iteration_found": 149, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 11.58620896515139, "nmae": 4.2323903044834115, "r2": -10.58620896515139, "combined_score": 0.07945204173622042}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 11.5862\n- nmae: 4.2324\n- r2: -10.5862\n- combined_score: 0.0795\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for normalization\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to avoid log(0), log-transform, and normalize each feature \n    to [0,1] using precomputed log-mins and ranges.\n    Inputs:\n      X: ndarray of shape (N,4)\n    Returns:\n      u: ndarray of shape (N,4) with values in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Inputs:\n      u: ndarray of shape (N,4)\n    Returns:\n      Phi: ndarray of shape (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n    Returns:\n      preds: array of shape (N,) predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # predict in log-loss domain and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: array of length 15 of fitted coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if y.ndim != 1:\n        y = y.ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    \n    # assemble normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    \n    # adaptive ridge regularization\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A += ridge * I\n    \n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, bsz, data_size, non_embedding_param_size]. This\nyields 15 parameters (intercept, 4 linear, 4 squared, 6 pairwise).\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n# Number of original features\n_F = 4\n# Upper\u2010triangle indices for pairwise interactions (i<j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of parameters: intercept + F linear + F squared + C(F,2) interactions\n_P = 1 + _F + _F + len(_TRIU_I)  # = 15\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns shape (N,15).\n    \"\"\"\n    N = logX_norm.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logX_norm\n    # squared terms\n    Phi[:, 1+_F:1+2*_F] = logX_norm ** 2\n    # pairwise interaction terms\n    Phi[:, 1+2*_F:] = logX_norm[:, _TRIU_I] * logX_norm[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + linear + squared + interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # log\u2010transform target\n    logy = np.log(y)                       # shape (N,)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                     # (15,15)\n    b = Phi.T.dot(logy)                    # (15,)\n\n    # adaptive ridge regularization: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but the intercept (index 0)\n    I = np.eye(Pdim, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe predict language\u2010model loss by fitting log(loss) as a second\u2010order polynomial\nin the normalized log\u2010domain of each feature:\n  [learning rate, batch size, data size, non\u2010embedding param size].\n\nFeatures are log\u2010transformed, then normalized to [0,1] via precomputed global\nlog\u2010min and log\u2010range values.  The design matrix includes:\n  - intercept (1)\n  - 4 linear terms\n  - 4 squared terms\n  - 6 pairwise interaction terms\n\nTotal parameters: 15.  We fit via closed\u2010form ridge regression in the log\u2010loss\ndomain with a tiny adaptive regularization (no penalty on intercept) for\nnumerical stability and cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order = [lr, bsz, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_FEAT_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # used for normalization to [0,1]\n\ndef _prepare_normalized_logs(X):\n    \"\"\"\n    Clip inputs, take logs, normalize each feature to [0,1] using\n    precomputed global log-min and log-range, then clip again.\n    Returns array of shape (N,4).\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid zero or negative\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    return np.clip(logX_norm, 0.0, 1.0)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix \u03a6 for normalized log\u2010features:\n      [1,\n       x\u0302_i           (4),\n       x\u0302_i^2         (4),\n       x\u0302_i * x\u0302_j    (6 for i<j)]\n    where x\u0302 = normalized log\u2010feature.\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + linear + squared + interactions)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values.\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                              # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients in the log-loss domain.\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # avoid zero or negative\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)       # (15,15)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # adaptive ridge: small \u03bb scaled by trace(A)/P for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # apply ridge to all but intercept\n    A += np.eye(Pdim) * ridge\n    A[0, 0] -= ridge\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# ------------------------------------------------------------------\n# Normalized\u2010Quadratic Scaling Law for LLM Hyperparameters\n# ------------------------------------------------------------------\n# We model log(loss) as a second\u2010order polynomial in the normalized\n# log\u2010domain of the four inputs [lr, bsz, data_size, non_embedding_param_size].\n#\n# Features are log\u2010transformed and each feature is normalized to [0,1]\n# based on known global minima and maxima to ensure numerical stability.\n# The design matrix includes:\n#   \u2022 intercept\n#   \u2022 4 linear terms\n#   \u2022 4 squared terms\n#   \u2022 6 pairwise interaction terms\n#\n# We fit via closed\u2010form ridge regression in the log\u2010loss domain, using\n# an adaptive regularization \u03bb = 1e\u22126 \u00d7 trace(A)/P to balance bias\u2010variance,\n# and we do not penalize the intercept.\n# ------------------------------------------------------------------\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN = np.log(\n    np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float)\n)\n_LOG_FEAT_MAX = np.log(\n    np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)\n)\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # for normalization to [0,1]\n\n# Precompute indices for pairwise interaction terms (i < j)\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of parameters: 1 intercept + 4 linear + 4 squared + C(4,2)=6 interactions\n_P = 1 + 2 * _F + len(_TRIU_I)  # should equal 15\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip features at 1e-12, log-transform, and normalize each dimension\n    to [0,1] using precomputed global minima and ranges.\n    \"\"\"\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized quadratic model:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns an (N \u00d7 15) array.\n    \"\"\"\n    N, F = logX_norm.shape\n    # Allocate matrix\n    Phi = np.empty((N, _P), dtype=logX_norm.dtype)\n    # Intercept\n    Phi[:, 0] = 1.0\n    # Linear terms\n    Phi[:, 1 : 1 + F] = logX_norm\n    # Squared terms\n    Phi[:, 1 + F : 1 + 2*F] = logX_norm**2\n    # Pairwise interaction terms\n    Phi[:, 1 + 2*F :] = logX_norm[:, _TRIU_I] * logX_norm[:, _TRIU_J]\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via the learned\n    normalized-quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    4 linear coeffs,\n                    4 squared coeffs,\n                    6 interaction coeffs]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # Normalize features in log-domain\n    logX_norm = _normalize_log_features(X)\n    # Build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n\n    # Predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Normalize features and build design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)\n\n    # Log-transform targets, avoiding zeros\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Solve normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)       # (15\u00d715)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # Adaptive ridge: \u03bb = 1e-6 \u00d7 (trace(A) / P)\n    ridge = 1e-6 * np.trace(A) / _P\n\n    # Penalize all but the intercept\n    I = np.eye(_P, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain minima and ranges for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0,   4e9, 2.14e8], dtype=float))\n_LOG_F_RANGES = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float)) - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a normalized quadratic design matrix in log-feature space:\n      - intercept\n      - linear terms\n      - squared terms\n      - pairwise interactions\n    \"\"\"\n    N, F = logX_norm.shape\n    # Number of parameters: 1 + F (linear) + F (squared) + F*(F-1)/2 (interactions)\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.zeros((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic polynomial\n    in the log-domain.\n\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n\n    Returns:\n      preds: array of shape (N,) predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize features to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict in log-loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed-form ridge regression\n    in the log-loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # ridge regularization for stability (no penalty on intercept)\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for normalization\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to avoid log(0), log-transform, and normalize each feature \n    to [0,1] using precomputed log-mins and ranges.\n    Inputs:\n      X: ndarray of shape (N,4)\n    Returns:\n      u: ndarray of shape (N,4) with values in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Inputs:\n      u: ndarray of shape (N,4)\n    Returns:\n      Phi: ndarray of shape (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n    Returns:\n      preds: array of shape (N,) predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # predict in log-loss domain and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: array of length 15 of fitted coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if y.ndim != 1:\n        y = y.ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    \n    # assemble normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    \n    # adaptive ridge regularization\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A += ridge * I\n    \n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.1774, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling-law model for LLM training:\nWe model log-loss as a parsimonious polynomial in the log-domain:\n  log(loss) = p0\n            + p1*logP\n            + p2*logD\n            + p3*log(lr)\n            + p4*log(bsz)\n            + p5*logP*logD\n            + p6*(log(lr))^2\n            + p7*(log(bsz))^2\n            + p8*log(lr)*log(bsz)\nwhere\n  P   = non_embedding_param_size,\n  D   = data_size,\n  lr  = learning rate,\n  bsz = batch size.\n\nThis 9-parameter linear model in the log-domain balances flexibility\n(capturing cross-effects and saturation in lr/bsz) with parsimony\n(for good generalization and stable fitting).\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from columns [lr, bsz, data_size, non_embedding_param_size].\n    data_points: shape (N,4)\n    params: length-9 array\n    Returns: length-N array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # guard against zeros before logging\n    X = np.maximum(X, 1e-12)\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    N = X.shape[0]\n    # Construct design matrix of shape (N, 9)\n    Phi = np.stack([\n        np.ones(N),           # intercept\n        logP,                 # p1\n        logD,                 # p2\n        logr,                 # p3\n        logb,                 # p4\n        logP * logD,          # p5\n        logr * logr,          # p6\n        logb * logb,          # p7\n        logr * logb           # p8\n    ], axis=1)\n\n    p = np.ravel(params).astype(float)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"scaling_law_func expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9-parameter log-domain model via ridge regression.\n    Returns: params array of length 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # guard against zeros\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    N = X.shape[0]\n    # Build design matrix\n    Phi = np.stack([\n        np.ones(N),\n        logP,\n        logD,\n        logr,\n        logb,\n        logP * logD,\n        logr * logr,\n        logb * logb,\n        logr * logb\n    ], axis=1)  # (N,9)\n\n    # Ridge regression (small regularization for stability)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal, except intercept term\n    # A[ii,ii] += ridge for all i>0\n    diag_idx = np.arange(Phi.shape[1])\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # undo at intercept\n\n    b = Phi.T.dot(np.log(y))\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.102), Excellent nmae (3.600)\n\n\n### Inspiration 4 (Score: 1.3280, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (11.586), Excellent nmae (4.232)\n\n\n### Inspiration 5 (Score: 1.0567, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified separable power-law scaling law for LLM training:\nWe model the language-model loss as\n   y_pred = A * lr^{\u03b1_lr} * bsz^{\u03b1_bsz} * data_size^{\u03b1_D} * param_size^{\u03b1_P}\nin log-space:\n   log y \u2248 p0 + \u03b1_lr\u00b7log(lr) + \u03b1_bsz\u00b7log(bsz) + \u03b1_D\u00b7log(data_size) + \u03b1_P\u00b7log(param_size)\nThis yields a linear regression in the log-domain with closed-form ridge solution,\nusing only 5 parameters for stability and generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a separable power-law:\n      y_pred = exp(p0) * lr^\u03b1_lr * bsz^\u03b1_bsz * data_size^\u03b1_D * param_size^\u03b1_P\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, param_size]\n      params:      1D array of length 5 = [p0, \u03b1_lr, \u03b1_bsz, \u03b1_D, \u03b1_P]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.ravel(params).astype(float)\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.size}\")\n\n    p0, \u03b1_lr, \u03b1_bsz, \u03b1_D, \u03b1_P = p\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # compute the separable power-law\n    return np.exp(p0) * (lr ** \u03b1_lr) * (bsz ** \u03b1_bsz) * (D ** \u03b1_D) * (Psize ** \u03b1_P)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law scaling law via ridge regression\n    in the log-loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 5 = [p0, \u03b1_lr, \u03b1_bsz, \u03b1_D, \u03b1_P]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    y = np.maximum(y, 1e-12)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # build design matrix for log-domain linear regression\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_D     = np.log(D)\n    log_Psize = np.log(Psize)\n    N = X.shape[0]\n    # columns: [1, log_lr, log_bsz, log_D, log_Psize]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_Psize\n    ])\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries except the intercept term\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.000), Excellent nmae (3.084)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# We fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\n# of the four inputs [lr, batch size, data size, non\u2010embedding params].\n# This yields 15 parameters: intercept, 4 linear, 4 squared, 6 interactions.\n# We solve via closed\u2010form ridge regression in the log\u2010loss domain with\n# a tiny adaptive regularization for numerical stability (no penalty on intercept).\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order = [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs, take logs, normalize each feature to [0,1] using\n    precomputed log-min and log-range, then clip again.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    \"\"\"\n    N, F = u.shape\n    # intercept + F linears + F squared + C(F,2) interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # expect 15 parameters\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n    log_pred = Phi.dot(p)           # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    # prepare normalized features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n    # adaptive ridge regularization\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I = np.eye(Pdim, dtype=A.dtype)\n    I[0, 0] = 0.0  # no penalty on intercept\n    A += ridge * I\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}