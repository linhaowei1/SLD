{"id": "4cba9357-7919-4d07-ba45-dce3e6e4623f", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # to normalize logs into [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X > 0, log-transform, and normalize each column\n    to [0,1] using precomputed log-mins and ranges.\n    X: (N,4) array\n    Returns: (N,4) array in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a 2nd-order polynomial design matrix on normalized logs u.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    u: (N,4)\n    Returns: (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # total params = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    Phi[:, 1+F:1+2*F] = u**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using\n    a 2nd-order polynomial in normalized log-domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss then exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized-log quadratic scaling law\n    via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients\n              in the log-loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure consistent shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # clamp positives and transform\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # normalize features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n    # target in log-domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n    # adaptive ridge regularization\n    P = A.shape[0]\n    # \u03bb proportional to trace(A)/P\n    lam = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    I = np.eye(P, dtype=float)\n    I[0, 0] = 0.0\n    A += lam * I\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "25516660-d4b0-4b3c-932a-64f60dfc71c3", "generation": 5, "timestamp": 1754806626.7168434, "iteration_found": 132, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43746493436771966, "nmae": 0.6955528083679813, "r2": 0.5625350656322803, "combined_score": 0.6956691437067005}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6956\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for normalization\n_LOG_FEAT_MINS = np.log(np.array([\n    1.2e-4,   # learning rate\n    16.0,     # batch size\n    4e9,      # data size\n    2.14e8    # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_MAXS = np.log(np.array([\n    2.2e-2,   # learning rate\n    4096.0,   # batch size\n    1e11,     # data size\n    1e9       # non\u2010embedding param size\n], dtype=float))\n_LOG_FEAT_RANGES = _LOG_FEAT_MAXS - _LOG_FEAT_MINS  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X to avoid log(0), log-transform, and normalize each feature \n    to [0,1] using precomputed log-mins and ranges.\n    Inputs:\n      X: ndarray of shape (N,4)\n    Returns:\n      u: ndarray of shape (N,4) with values in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_FEAT_MINS) / _LOG_FEAT_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second-order polynomial design matrix for normalized log features u.\n    Columns: [1,\n              u0, u1, u2, u3,\n              u0^2, u1^2, u2^2, u3^2,\n              u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    Inputs:\n      u: ndarray of shape (N,4)\n    Returns:\n      Phi: ndarray of shape (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log-loss domain)\n    Returns:\n      preds: array of shape (N,) predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # predict in log-loss domain and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: array of length 15 of fitted coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if y.ndim != 1:\n        y = y.ravel()\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4) and loss_values length N, got {X.shape}, {y.shape}\")\n    \n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # shape (N,15)\n    \n    # log-transform target\n    y_safe = np.clip(y, 1e-12, None)\n    logy = np.log(y_safe)\n    \n    # assemble normal equations\n    A = Phi.T.dot(Phi)  # (15,15)\n    b = Phi.T.dot(logy) # (15,)\n    \n    # adaptive ridge regularization\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    I = np.eye(P_dim, dtype=A.dtype)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A += ridge * I\n    \n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, batch_size, data_size, non_embedding_param_size].\nThis yields 15 parameters:\n  - 1 intercept\n  - 4 linear terms\n  - 4 squared terms\n  - 6 pairwise interaction terms\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Known global log\u2010range of each feature for normalization\n# Columns: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 xi for each feature i,\n                 xi^2 for each feature i,\n                 xi * xj for all i<j]\n    where xi = log\u2010normalized feature i.\n    Returns shape (N, 15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape != (X.shape[0], 4):\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid non\u2010positive values\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # clamp positives\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    # target in log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n    # adaptive ridge: tiny regularization on non\u2010intercept terms\n    P = A.shape[0]\n    ridge = 1e-6 * (np.trace(A) / P)\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0] -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, bsz, data_size, non_embedding_param_size]. This\nyields 15 parameters (intercept, 4 linear, 4 squared, 6 pairwise).\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data_size min\n    2.14e8     # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data_size max\n    1e9        # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n# Number of original features\n_F = 4\n# Upper\u2010triangle indices for pairwise interactions (i<j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of parameters: intercept + F linear + F squared + C(F,2) interactions\n_P = 1 + _F + _F + len(_TRIU_I)  # = 15\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns shape (N,15).\n    \"\"\"\n    N = logX_norm.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logX_norm\n    # squared terms\n    Phi[:, 1+_F:1+2*_F] = logX_norm ** 2\n    # pairwise interaction terms\n    Phi[:, 1+2*_F:] = logX_norm[:, _TRIU_I] * logX_norm[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + linear + squared + interactions)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # log\u2010transform target\n    logy = np.log(y)                       # shape (N,)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)                     # (15,15)\n    b = Phi.T.dot(logy)                    # (15,)\n\n    # adaptive ridge regularization: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but the intercept (index 0)\n    I = np.eye(Pdim, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# ------------------------------------------------------------------\n# Normalized\u2010Quadratic Scaling Law for LLM Hyperparameters\n# ------------------------------------------------------------------\n# We model log(loss) as a second\u2010order polynomial in the normalized\n# log\u2010domain of the four inputs [lr, bsz, data_size, non_embedding_param_size].\n#\n# Features are log\u2010transformed and each feature is normalized to [0,1]\n# based on known global minima and maxima to ensure numerical stability.\n# The design matrix includes:\n#   \u2022 intercept\n#   \u2022 4 linear terms\n#   \u2022 4 squared terms\n#   \u2022 6 pairwise interaction terms\n#\n# We fit via closed\u2010form ridge regression in the log\u2010loss domain, using\n# an adaptive regularization \u03bb = 1e\u22126 \u00d7 trace(A)/P to balance bias\u2010variance,\n# and we do not penalize the intercept.\n# ------------------------------------------------------------------\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN = np.log(\n    np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float)\n)\n_LOG_FEAT_MAX = np.log(\n    np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float)\n)\n_LOG_FEAT_RANGE = _LOG_FEAT_MAX - _LOG_FEAT_MIN  # for normalization to [0,1]\n\n# Precompute indices for pairwise interaction terms (i < j)\n_F = 4\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of parameters: 1 intercept + 4 linear + 4 squared + C(4,2)=6 interactions\n_P = 1 + 2 * _F + len(_TRIU_I)  # should equal 15\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip features at 1e-12, log-transform, and normalize each dimension\n    to [0,1] using precomputed global minima and ranges.\n    \"\"\"\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_FEAT_MIN) / _LOG_FEAT_RANGE\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized quadratic model:\n      Columns = [1,\n                 logX_norm_i for i in 0..3,\n                 (logX_norm_i)^2 for i in 0..3,\n                 logX_norm_i * logX_norm_j for all i<j]\n    Returns an (N \u00d7 15) array.\n    \"\"\"\n    N, F = logX_norm.shape\n    # Allocate matrix\n    Phi = np.empty((N, _P), dtype=logX_norm.dtype)\n    # Intercept\n    Phi[:, 0] = 1.0\n    # Linear terms\n    Phi[:, 1 : 1 + F] = logX_norm\n    # Squared terms\n    Phi[:, 1 + F : 1 + 2*F] = logX_norm**2\n    # Pairwise interaction terms\n    Phi[:, 1 + 2*F :] = logX_norm[:, _TRIU_I] * logX_norm[:, _TRIU_J]\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via the learned\n    normalized-quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    4 linear coeffs,\n                    4 squared coeffs,\n                    6 interaction coeffs]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # Normalize features in log-domain\n    logX_norm = _normalize_log_features(X)\n    # Build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n\n    # Predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in the log-loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Normalize features and build design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)\n\n    # Log-transform targets, avoiding zeros\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Solve normal equations with adaptive ridge regularization\n    A = Phi.T.dot(Phi)       # (15\u00d715)\n    b = Phi.T.dot(logy)      # (15,)\n\n    # Adaptive ridge: \u03bb = 1e-6 \u00d7 (trace(A) / P)\n    ridge = 1e-6 * np.trace(A) / _P\n\n    # Penalize all but the intercept\n    I = np.eye(_P, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-domain:\n      - intercept\n      - linear terms (4)\n      - squared terms (4)\n      - pairwise interactions (6)\n    Total columns = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second-order polynomial in the log\u2010domain.\n    \n    Inputs:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15: [intercept, linear (4), squared (4), interactions (6)]\n    Returns:\n      preds:       array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second-order polynomial scaling law via\n    closed-form ridge-regularized least squares in the log-loss domain.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      numpy array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform features and target\n    logX = np.log(X)\n    logy = np.log(y)\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                     # (15,15)\n    b = Phi.T.dot(logy)                    # (15,)\n\n    # adaptive ridge regularization: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Migrant)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, batch_size, data_size, non_embedding_param_size].\nThis yields 15 parameters:\n  - 1 intercept\n  - 4 linear terms\n  - 4 squared terms\n  - 6 pairwise interaction terms\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Known global log\u2010range of each feature for normalization\n# Columns: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a normalized quadratic polynomial:\n      Columns = [1,\n                 xi for each feature i,\n                 xi^2 for each feature i,\n                 xi * xj for all i<j]\n    where xi = log\u2010normalized feature i.\n    Returns shape (N, 15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape != (X.shape[0], 4):\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid non\u2010positive values\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # clamp positives\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform & normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    # target in log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n    # adaptive ridge: tiny regularization on non\u2010intercept terms\n    P = A.shape[0]\n    ridge = 1e-6 * (np.trace(A) / P)\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0] -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law for LLM training:\nWe model log(loss) as a hybrid polynomial in the log of each feature,\nincluding first\u2010order terms for lr and bsz, and both linear and quadratic\nterms plus their interaction for data_size (D) and non_embedding_param_size (P).\nThis keeps the model compact (8 params) and regularizes heavily for better\ncross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a tailored log\u2010domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size (D), non_embedding_param_size (P)]\n      params:      1D array of length 8:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P,\n                    \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid non-positive inputs\n    X = np.maximum(X, 1e-12)\n    # take logs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with columns:\n    # [1, log_lr, log_bsz, log_D, log_P, (log_D)^2, (log_P)^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear model in the log\u2010domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the tailored log\u2010domain scaling law via ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid non-positive\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and output\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # construct design matrix \u03a6 (N\u00d78)\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all but the intercept term\n    diag_idx = np.arange(8)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 4 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized log\u2010features.\n    Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized quadratic model in log\u2010space.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [p0,\n                    p_lr, p_bsz, p_D, p_P,\n                    p_lr2, p_bsz2, p_D2, p_P2,\n                    p_lr_bsz, p_lr_D, p_lr_P, p_bsz_D, p_bsz_P, p_D_P]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # reshape if single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize to [0,1]\n    logX      = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log\u2010loss domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized closed\u2010form\n    linear regression in the log\u2010loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # reshape if single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log-transform inputs and target\n    logX      = np.log(X)\n    logy      = np.log(y)\n    # normalize features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # ridge regularization for stability (no penalty on intercept)\n    ridge = 1e-6\n    P = A.shape[0]\n    I = np.eye(P, dtype=A.dtype)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEight\u2010parameter log\u2010domain scaling law for LLM training hyperparameters.\n\nWe model the log\u2013loss as a quadratic polynomial in the log\u2010features:\n    log(y) = \u03b20\n           + \u03b2_lr  * log(lr)\n           + \u03b2_bsz * log(bsz)\n           + \u03b2_D   * log(data_size)\n           + \u03b2_P   * log(non_embedding_param_size)\n           + \u03b2_D2  * [log(data_size)]^2\n           + \u03b2_P2  * [log(non_embedding_param_size)]^2\n           + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\nThis 8\u2010parameter form is fitted via small\u2010ridge regression in closed form\nfor numerical stability and strong generalization across scales.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 8\u2010parameter\n    log\u2010domain polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = \n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log\u2010transform features\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter log\u2010domain scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # unpack & log\u2010transform\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # closed\u2010form ridge regression (small ridge on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (index 0)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log-domain bounds for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd-order polynomial design matrix in normalized log-features:\n      [1,\n       xi for each feature i         (4 cols),\n       xi^2 for each feature i       (4 cols),\n       xi * xj for all i<j pairs     (6 cols)]\n    Total columns = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd-order polynomial\n    in normalized log-domain:\n\n      log(loss) \u2248 p0\n                 + sum_i p_i * xi\n                 + sum_i p_{ii} * xi^2\n                 + sum_{i<j} p_{ij} * xi * xj\n\n    where xi = (log(feature_i) - min_i) / (max_i - min_i).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 15\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs and log-transform\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and predict in log-domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 15-parameter model via closed-form\n    ridge-regularized linear regression in the log-loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching shapes and 2D input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize log-features\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # differential ridge penalties for stability\n    # no penalty on intercept\n    penalty = np.ones(P, dtype=float) * 1e-5\n    penalty[0] = 0.0\n    # lighter penalty on linear terms\n    penalty[1:1+4] = 1e-6\n    # stronger penalty on squared terms\n    penalty[1+4:1+8] = 1e-4\n    # medium penalty on cross terms\n    penalty[1+8:P] = 1e-5\n\n    # apply ridge on diagonal\n    # A_ii += penalty[i]\n    diag_idx = np.arange(P)\n    A[diag_idx, diag_idx] += penalty\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # to normalize logs into [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X > 0, log-transform, and normalize each column\n    to [0,1] using precomputed log-mins and ranges.\n    X: (N,4) array\n    Returns: (N,4) array in [0,1]\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a 2nd-order polynomial design matrix on normalized logs u.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    u: (N,4)\n    Returns: (N,15)\n    \"\"\"\n    N, F = u.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    # total params = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    Phi[:, 1+F:1+2*F] = u**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using\n    a 2nd-order polynomial in normalized log-domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # normalize and build features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss then exponentiate\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized-log quadratic scaling law\n    via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients\n              in the log-loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure consistent shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # clamp positives and transform\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # normalize features\n    u = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)  # (N,15)\n    # target in log-domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n    # adaptive ridge regularization\n    P = A.shape[0]\n    # \u03bb proportional to trace(A)/P\n    lam = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    I = np.eye(P, dtype=float)\n    I[0, 0] = 0.0\n    A += lam * I\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Reverted to a single adaptive ridge coefficient \u03bb = 1e-6\u00b7Tr(A)/P, which proved numerically stable and yielded strong generalization in prior tests.\n- Factored out normalization and design\u2010matrix construction into helper functions for clarity.\n- Ensured robust handling of edge cases (single\u2010sample inputs, shape validation, clipping near zero).\n- Maintained the same 15\u2010parameter quadratic model in the normalized log\u2010domain for expressive power.\n"]}}}