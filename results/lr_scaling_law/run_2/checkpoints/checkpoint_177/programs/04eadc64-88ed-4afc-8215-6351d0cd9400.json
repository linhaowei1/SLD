{"id": "04eadc64-88ed-4afc-8215-6351d0cd9400", "code": "import numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip inputs to positive, take logs, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1] to avoid extreme extrapolation.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    normed = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    return np.clip(normed, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      Columns:\n        1                         (intercept)\n        x_i                       (4 linear terms)\n        x_i^2                     (4 squared terms)\n        x_i * x_j for i<j         (6 cross\u2010terms)\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = x.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    cross\u2010term coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log\u2010loss space\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # (15,15)\n    b = Phi.T.dot(logy)    # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "4fad717e-b698-4ec1-81df-24c9ed563218", "generation": 3, "timestamp": 1754806920.1317906, "iteration_found": 162, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.09757678739762139, "nmae": 0.3101087598372845, "r2": 0.9024232126023786, "combined_score": 0.9110979855642009}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0976\n- nmae: 0.3101\n- r2: 0.9024\n- combined_score: 0.9111\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0976, nmae: 0.3101, r2: 0.9024, combined_score: 0.9111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1].\n    Input:\n      X: array of shape (N,4) or (4,)\n    Returns:\n      x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor values to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip to [-1,1] to avoid extrapolation extremes\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns: [1,\n                x1, x2, x3, x4,            # linear\n                x1^2, x2^2, x3^2, x4^2,    # squared\n                x1\u00b7x2, x1\u00b7x3, x1\u00b7x4,       # interactions\n                x2\u00b7x3, x2\u00b7x4,\n                x3\u00b7x4]\n    Input:\n      x: array of shape (N,4)\n    Returns:\n      Phi: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape  # F must be 4\n    # total parameters = 1 + F + F + (F*(F-1))//2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms x_i\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms x_i^2\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions x_i * x_j for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    interaction coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain, then exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15:\n              [intercept,\n               linear coeffs (4),\n               squared coeffs (4),\n               interaction coeffs (6)]\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients in log-loss domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5553)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via an 8-parameter log-domain model.\n\n    We model:\n      log(loss) = \u03b20\n                + \u03b2_lr  * log(lr)\n                + \u03b2_bsz * log(bsz)\n                + \u03b2_D   * log(data_size)\n                + \u03b2_P   * log(non_embedding_param_size)\n                + \u03b2_D2  * [log(data_size)]^2\n                + \u03b2_P2  * [log(non_embedding_param_size)]^2\n                + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n\n    # extract features\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 with 8 columns\n    # [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # return on original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8:\n              [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # extract and log-transform\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # only penalize non-intercept terms\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n### Program 3 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as\n    log(loss) = \u03b20\n              + \u03b2_lr    * log(lr)\n              + \u03b2_bsz   * log(batch_size)\n              + \u03b2_D     * log(data_size)\n              + \u03b2_P     * log(non_embedding_param_size)\n              + \u03b2_D2    * [log(data_size)]^2\n              + \u03b2_P2    * [log(non_embedding_param_size)]^2\n              + \u03b2_DP    * log(data_size) * log(non_embedding_param_size)\n\nThis parameter-efficient form captures the primary scaling\neffects and is fitted via small-ridge regression in closed form.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8,\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # compute log-loss and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with small ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (row/col 0)\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0976), Performs well on nmae (0.3101), Performs well on r2 (0.9024), Performs well on combined_score (0.9111)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 10-parameter log-domain polynomial scaling law for LLM training hyperparameters.\n\nWe model:\n    log(loss) = \u03b20\n              + \u03b2_lr  * log(lr)\n              + \u03b2_b    * log(bsz)\n              + \u03b2_D    * log(data_size)\n              + \u03b2_P    * log(non_embedding_param_size)\n              + \u03b2_lr2  * [log(lr)]^2\n              + \u03b2_b2   * [log(bsz)]^2\n              + \u03b2_D2   * [log(data_size)]^2\n              + \u03b2_P2   * [log(non_embedding_param_size)]^2\n              + \u03b2_DP   * log(data_size)*log(non_embedding_param_size)\n\nThis adds squared\u2010terms for lr, batch size, data size, and model size\nto capture non-monotonic and saturation effects, plus the main joint\ndata-model interaction.  We fit all 10 parameters via closed-form\nridge regression in the log-domain for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_b, \u03b2_D, \u03b2_P,\n                    \u03b2_lr2, \u03b2_b2, \u03b2_D2, \u03b2_P2,\n                    \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow for single\u2010point inputs\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # unpack and log-transform features\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr = np.log(lr)\n    log_b  = np.log(bsz)\n    log_D  = np.log(D)\n    log_P  = np.log(P)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # build design matrix (N x 10)\n    N = X.shape[0]\n    Phi = np.empty((N, 10), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_b\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    # squared terms\n    Phi[:, 5] = log_lr * log_lr\n    Phi[:, 6] = log_b  * log_b\n    Phi[:, 7] = log_D  * log_D\n    Phi[:, 8] = log_P  * log_P\n    # interaction: data_size \u00d7 model_size\n    Phi[:, 9] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # convert back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter scaling law via ridge-regularized least squares.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length 10\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # basic sanity checks\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # floor inputs/outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # unpack and log-transform\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr = np.log(lr)\n    log_b  = np.log(bsz)\n    log_D  = np.log(D)\n    log_P  = np.log(P)\n    log_y  = np.log(y)\n\n    # build the same design matrix\n    N = X.shape[0]\n    Phi = np.empty((N, 10), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_b\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_lr * log_lr\n    Phi[:, 6] = log_b  * log_b\n    Phi[:, 7] = log_D  * log_D\n    Phi[:, 8] = log_P  * log_P\n    Phi[:, 9] = log_D  * log_P\n\n    # ridge regularization strength\n    ridge = 1e-6\n    # normal equations\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept\n    diag_idx = np.arange(10)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    b = Phi.T.dot(log_y)\n\n    # solve for parameter vector\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via an 8-parameter\n    log-domain polynomial scaling law:\n\n      log(loss) = \u03b20\n                + \u03b2_lr  * log(lr)\n                + \u03b2_bsz * log(bsz)\n                + \u03b2_D   * log(data_size)\n                + \u03b2_P   * log(non_embedding_param_size)\n                + \u03b2_D2  * [log(data_size)]^2\n                + \u03b2_P2  * [log(non_embedding_param_size)]^2\n                + \u03b2_DP  * log(data_size) * log(non_embedding_param_size)\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n\n    # log-transform inputs\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge-regularized least squares\n    in the log-domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 8 [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # floor to avoid log(0) or negative\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform features and target\n    log_lr  = np.log(X[:, 0])\n    log_bsz = np.log(X[:, 1])\n    log_D   = np.log(X[:, 2])\n    log_P   = np.log(X[:, 3])\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = X.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = log_lr\n    Phi[:, 2] = log_bsz\n    Phi[:, 3] = log_D\n    Phi[:, 4] = log_P\n    Phi[:, 5] = log_D * log_D\n    Phi[:, 6] = log_P * log_P\n    Phi[:, 7] = log_D * log_P\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all parameters except the intercept (index 0)\n    idx = np.arange(8)\n    A[idx, idx] += ridge\n    A[0, 0] -= ridge  # unpenalize intercept\n    b = Phi.T.dot(log_y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1].\n    Input:\n      X: array of shape (N,4) or (4,)\n    Returns:\n      x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor values to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip to [-1,1] to avoid extrapolation extremes\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns: [1,\n                x1, x2, x3, x4,            # linear\n                x1^2, x2^2, x3^2, x4^2,    # squared\n                x1\u00b7x2, x1\u00b7x3, x1\u00b7x4,       # interactions\n                x2\u00b7x3, x2\u00b7x4,\n                x3\u00b7x4]\n    Input:\n      x: array of shape (N,4)\n    Returns:\n      Phi: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape  # F must be 4\n    # total parameters = 1 + F + F + (F*(F-1))//2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms x_i\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms x_i^2\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions x_i * x_j for i<j\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    interaction coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain, then exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15:\n              [intercept,\n               linear coeffs (4),\n               squared coeffs (4),\n               interaction coeffs (6)]\n    \"\"\"\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients in log-loss domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                   [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),   # intercept\n        log_lr,                    # main effect lr\n        log_bsz,                   # main effect bsz\n        log_D,                     # main effect data_size\n        log_P,                     # main effect param_size\n        log_lr  * log_bsz,         # interaction lr*bsz\n        log_D   * log_P           # interaction data_size*param_size\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching sizes and 2D input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr  * log_bsz,\n        log_D   * log_P\n    ])\n\n    # closed-form ridge regression (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize only the non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010domain mins/maxs (same as before) for stable normalization\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,  4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      [1,\n       logX_norm (4 cols),\n       (logX_norm)**2 (4 cols),\n       pairwise products for i<j (6 cols)]\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    cols.append(logX_norm)\n    cols.append(logX_norm**2)\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010order polynomial.\n    Inputs:\n      data_points: (N,4) \u21d2 [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients\n    Returns:\n      preds:       (N,) array of loss predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 2nd\u2010order normalized\u2010log polynomial via weighted ridge regression.\n    Inputs:\n      data_points: (N,4)\n      loss_values: (N,)\n    Returns:\n      params:      length\u201015 coefficient array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX  = np.log(X)\n    logy  = np.log(y)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi    = _build_design_matrix(logX_norm)\n    N, P   = Phi.shape\n\n    # normal\u2010equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # base ridge scaled to average diagonal\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag   # lighter global regularization\n\n    # per\u2010feature penalties (length P = 15)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # no penalty on intercept\n    # linear terms (indices 1\u20134)\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5\u20138)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9\u201314): \n    #   [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply weighted ridge on diagonal\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.9041, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a compact 8-parameter\n    log-domain model:\n      log(loss) = \u03b20\n                + \u03b2_lr * log(lr)\n                + \u03b2_bsz * log(bsz)\n                + \u03b2_D * log(data_size)\n                + \u03b2_P * log(param_size)\n                + \u03b2_D2 * [log(data_size)]^2\n                + \u03b2_P2 * [log(param_size)]^2\n                + \u03b2_DP * log(data_size)*log(param_size)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # unpack logs\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n    # build design matrix (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n    # linear predictor in log\u2010loss space\n    log_pred = Phi.dot(p)\n    # back to original loss\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via closed\u2010form ridge regression.\n    Returns an array of 8 coefficients [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be shape (N,4) and match loss_values length.\")\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # unpack logs\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n    logy = np.log(y)\n    # build design matrix (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_D),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge strength\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    reg = np.eye(Pdim)\n    reg[0, 0] = 0.0\n    A += ridge * reg\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.674), Excellent nmae (2.402)\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef _build_design_matrix(X, include_sq=True):\n    \"\"\"\n    Build a design matrix Phi for log-domain polynomial regression.\n    Features:\n      - intercept\n      - log(X_i) for each feature i\n      - [optionally] (log(X_i))^2 for each feature i\n      - log(X_i) * log(X_j) for all i<j pairwise interactions\n\n    Inputs:\n      X: array of shape (N, F)\n      include_sq: whether to include squared-log features\n\n    Returns:\n      Phi: array of shape (N, P)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    N, F = logX.shape\n\n    # count parameters\n    P = 1 + F + (F*(F-1)//2)\n    if include_sq:\n        P += F\n\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # main effects: log(X_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # optional squared terms: (log X_i)^2\n    if include_sq:\n        Phi[:, idx:idx+F] = logX**2\n        idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a log-domain polynomial.\n\n    data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + (opt 4) + 6 = either 11 (no squares) or 15 (with squares)\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n\n    # infer whether squared terms were used by matching param count\n    F = X.shape[1]\n    base_P = 1 + F + (F*(F-1)//2)\n    sq_P   = base_P + F\n\n    if p.size == sq_P:\n        include_sq = True\n    elif p.size == base_P:\n        include_sq = False\n    else:\n        raise ValueError(f\"params length must be {base_P} or {sq_P}, got {p.size}\")\n\n    Phi = _build_design_matrix(X, include_sq=include_sq)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters (length 15, including squared terms)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if y.ndim == 0:\n        y = np.array([y])\n\n    # floor y to avoid log(0)\n    y = np.maximum(y, 1e-12)\n\n    # build design matrix with squared-log features for extra flexibility\n    Phi = _build_design_matrix(X, include_sq=True)\n\n    # log-transform target\n    logy = np.log(y)\n\n    # ridge regression in closed form\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge penalty to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge   # no penalty on intercept\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law for LLM training:\n\nWe model log(loss) as\n    log(loss) = \u03b20\n              + \u03b2_lr    * log(lr)\n              + \u03b2_bsz   * log(batch_size)\n              + \u03b2_D     * log(data_size)\n              + \u03b2_P     * log(non_embedding_param_size)\n              + \u03b2_D2    * [log(data_size)]^2\n              + \u03b2_P2    * [log(non_embedding_param_size)]^2\n              + \u03b2_DP    * log(data_size) * log(non_embedding_param_size)\n\nThis parameter-efficient form captures the primary scaling\neffects and is fitted via small-ridge regression in closed form.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8,\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix \u03a6: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # compute log-loss and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 8\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # guard against non-positive and zero\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, P = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # normal equations with small ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize all except intercept (row/col 0)\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip inputs to positive, take logs, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1] to avoid extreme extrapolation.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    normed = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    return np.clip(normed, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      Columns:\n        1                         (intercept)\n        x_i                       (4 linear terms)\n        x_i^2                     (4 squared terms)\n        x_i * x_j for i<j         (6 cross\u2010terms)\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = x.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    cross\u2010term coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log\u2010loss space\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # (15,15)\n    b = Phi.T.dot(logy)    # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}