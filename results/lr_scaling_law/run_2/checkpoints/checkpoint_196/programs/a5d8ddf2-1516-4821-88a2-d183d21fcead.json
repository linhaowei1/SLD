{"id": "a5d8ddf2-1516-4821-88a2-d183d21fcead", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half-span for zero-centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters: 1 intercept + 4 linear + 4 squared + 6 cross\u2010terms = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, 15)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs in log\u2010domain\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build quadratic features\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression\n    in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features and build design matrix\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # safe log of target\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cc6b484a-1288-42ee-82eb-d56f0538e3d8", "generation": 5, "timestamp": 1754807372.8808563, "iteration_found": 196, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.09757690575929612, "nmae": 0.3101095785135347, "r2": 0.9024230942407039, "combined_score": 0.9110978873122397}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0976\n- nmae: 0.3101\n- r2: 0.9024\n- combined_score: 0.9111\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build design matrix\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # param size min\n], dtype=float))\n\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # param size max\n], dtype=float))\n\n# For centering to roughly [-1,1]\n_LOG_F_MEANS = 0.5 * (_LOG_F_MINS + _LOG_F_MAXS)\n_LOG_F_HALFS = 0.5 * (_LOG_F_MAXS - _LOG_F_MINS)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then center & scale each feature:\n      x_norm = (log(X) - mean) / half_range\n    clipped to [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x_norm = (logX - _LOG_F_MEANS) / _LOG_F_HALFS\n    return np.clip(x_norm, -1.0, 1.0)\n\ndef _build_design_matrix(x_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      Columns: [1,\n                x_i                      (4 linear terms),\n                x_i^2                    (4 squared terms),\n                x_i * x_j for i<j        (6 cross\u2010terms)]\n    Total columns = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    N, F = x_norm.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + 2*F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x_norm**2\n    col += F\n    # cross\u2010terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x_norm[:, i] * x_norm[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized second\u2010order\n    polynomial in log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    lin_coeffs (4),\n                    sq_coeffs (4),\n                    cross_coeffs (6)]\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted LM loss.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # normalize features\n    x_norm = _normalize_log_features(X)\n    # design matrix\n    Phi = _build_design_matrix(x_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares in log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 15 of optimized coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"Mismatched shapes between data_points and loss_values.\")\n    # normalize features\n    x_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(x_norm)\n    # log\u2010transform target\n    y_clip = np.clip(y, 1e-12, None)\n    logy = np.log(y_clip)\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0]  -= ridge\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization to [-1,1]\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, log-transform, then normalize each feature to [-1,1]:\n      logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # zero-centered normalization\n    logXn = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # guard against numerical overflow\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-space:\n      [1,\n       x_i           (4 cols),\n       x_i^2         (4 cols),\n       x_i * x_j     (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    P = 1 + F + F + (F*(F-1))//2   # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logXn[:, i] * logXn[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a learned quadratic model\n    in the normalized-log domain.\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log-loss domain)\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # normalize features in log-space\n    logXn = _normalize_log_features(X)\n    # build polynomial features\n    Phi   = _build_design_matrix(logXn)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points shape (N,4) and matching loss_values, got {X.shape} and {y.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    # transform target to log-domain\n    y_clipped = np.clip(y, 1e-12, None)\n    logy      = np.log(y_clipped)\n    # normal equations for ridge regression\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge penalty for numerical stability\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # apply penalty to all coefficients except intercept\n    i_diag = np.arange(Pdim)\n    A[i_diag, i_diag] += ridge\n    A[0, 0]         -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5553)\n```python\nimport numpy as np\n\nFLOOR = 1e-12\n\n# EVOLVE-BLOCK-START\ndef _build_phi(X):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N,8) for the 8-parameter model:\n        [1,\n         log(lr),\n         log(bsz),\n         log(data_size),\n         log(param_size),\n         log(data_size)^2,\n         log(param_size)^2,\n         log(data_size)*log(param_size)]\n    \"\"\"\n    # X has shape (N,4): columns [lr, bsz, data_size, param_size]\n    # Clip to avoid log(0)\n    X = np.maximum(X, FLOOR)\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n\n    return np.column_stack([\n        np.ones(X.shape[0], dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via an 8-parameter log-domain polynomial.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    Phi = _build_phi(X)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge\u2010regularized least squares\n    in the log-domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # build design matrix & target in log-domain\n    Phi = _build_phi(X)\n    log_y = np.log(np.maximum(y, FLOOR))\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to every diagonal, then un\u2010penalize the intercept\n    diag_ix = np.arange(A.shape[0])\n    A[diag_ix, diag_ix] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5553)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact 8-parameter log-domain scaling law:\n\nWe model log(loss) as a simple linear function of the logs of each feature,\nwith squared terms for data_size and param_size and their interaction:\n    log y = \u03b20\n          + \u03b2_lr    * log(lr)\n          + \u03b2_bsz   * log(bsz)\n          + \u03b2_D     * log(data_size)\n          + \u03b2_P     * log(param_size)\n          + \u03b2_D2    * [log(data_size)]^2\n          + \u03b2_P2    * [log(param_size)]^2\n          + \u03b2_DP    * log(data_size) * log(param_size)\n\nThis 8-parameter form is compact, stable, and fits in closed-form with\na tiny ridge penalty for numerical robustness.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8-parameter log-domain model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 8:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    lr, bsz, D, Psize = X[:,0], X[:,1], X[:,2], X[:,3]\n\n    # log-transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix \u03a6 of shape (N,8)\n    # columns = [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear predictor in log-loss domain\n    log_pred = Phi.dot(p)\n    # back to loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain scaling law via ridge-regularized\n    least squares in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of length 8 (\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr, bsz, D, Psize = X[:,0], X[:,1], X[:,2], X[:,3]\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    log_y   = np.log(y)\n\n    N = X.shape[0]\n    # assemble design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D**2,\n        log_P**2,\n        log_D * log_P\n    ])\n\n    # closed-form ridge solution: solve (\u03a6\u1d40\u03a6 + \u03bb\u00b7I') p = \u03a6\u1d40 log_y\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply small ridge only to non-intercept terms\n    A[1:,1:] += ridge\n    b = Phi.T.dot(log_y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half\u2010span for zero\u2010centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters:\n#   1 intercept + 4 linear + 4 squared + 6 pairwise = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, _P)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build design matrix\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge regression in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 3.0124, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nA more parsimonious log-domain scaling law for LLM loss:\n  log(loss) = p0\n            + p1*log(lr)\n            + p2*log(bsz)\n            + p3*log(data_size)\n            + p4*log(param_size)\n            + p5*(log(lr))^2       # captures non-monotonic LR effect\n            + p6*(log(bsz))^2     # captures BS saturation curvature\n            + p7*(log(data_size)*log(param_size))  # joint size effect\n\nThis 8-parameter model is fitted via small-ridge regression in closed form,\ncentering the design matrix to keep the intercept unpenalized.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) holding\n                   [p0,p1,...,p7] as described above\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure positivity\n    X = np.clip(X, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build the log-loss predictor\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_data\n      + p[4]*log_param\n      + p[5]*log_lr**2\n      + p[6]*log_bsz**2\n      + p[7]*(log_data * log_param)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain model via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (8,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n    logy      = np.log(y)\n\n    # build design matrix with 8 columns\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),              # intercept\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_data * log_param\n    ])\n\n    # center columns so intercept stays unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_c    = Phi - col_mean\n\n    # small ridge term for numerical stability\n    ridge = 1e-6\n    P     = Phi_c.shape[1]\n\n    # solve (Phi_c^T Phi_c + ridge*I) w_c = Phi_c^T logy\n    A = Phi_c.T.dot(Phi_c) + ridge * np.eye(P)\n    b = Phi_c.T.dot(logy)\n    w_c = np.linalg.solve(A, b)\n\n    # recover true intercept p0\n    # original: Phi\u00b7p = (Phi_c + col_mean)\u00b7w_c = Phi_c\u00b7w_c + (col_mean\u00b7w_c)\n    # so intercept = w_c[0] - sum(col_mean * w_c)\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n\n    params = w_c.copy()\n    params[0] = intercept\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (75.818), Excellent nmae (11.037)\n\n\n### Inspiration 3 (Score: 0.5554, Type: Experimental)\n```python\nimport numpy as np\n\n# -------------------------------------------------------------------------\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved hybrid log\u2010domain scaling law with feature\u2010wise normalization\nand scaled ridge regularization for enhanced numerical stability and\ncross\u2010configuration generalization.\n\nModel form (in normalized log\u2010domain):\n  log y \u2248 \u03b20\n         + \u03b2_lr  \u00b7 x_lr_norm\n         + \u03b2_bsz \u00b7 x_bsz_norm\n         + \u03b2_D   \u00b7 x_D_norm\n         + \u03b2_P   \u00b7 x_P_norm\n         + \u03b2_D2  \u00b7 (x_D_norm)^2\n         + \u03b2_P2  \u00b7 (x_P_norm)^2\n         + \u03b2_DP  \u00b7 (x_D_norm * x_P_norm)\n\nwhere x_*_norm = (log(feature) - mid) / half, using precomputed (mid, half)\nfrom known feature bounds.  We fit via closed\u2010form ridge regression with\nridge strength scaled by the average diagonal of \u03a6\u1d40\u03a6.\n\"\"\"\n# Precomputed log\u2010domain bounds from data specification:\n#   lr \u2208 [1.2e-4, 2.2e-2]\n#   bsz \u2208 [16,    4096]\n#   data_size \u2208 [4e9, 1e11]\n#   non_embedding_param_size \u2208 [2.14e8, 1e9]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X to >0, take natural log, then scale each dimension to approximately [-1,1]:\n      x_norm = (log(X) - mid) / half\n    \"\"\"\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the 8\u2010parameter\n    normalized\u2010log hybrid polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20108 vector:\n                   [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize logs to [-1,1] per feature\n    Xn = _normalize_log_features(X)  # shape (N,4)\n\n    # build design matrix \u03a6 (N\u00d78)\n    N = Xn.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1] = Xn[:, 0]   # lr\n    Phi[:, 2] = Xn[:, 1]   # bsz\n    Phi[:, 3] = Xn[:, 2]   # data_size\n    Phi[:, 4] = Xn[:, 3]   # non_embedding_param_size\n    # quadratic for data & param\n    Phi[:, 5] = Xn[:, 2] * Xn[:, 2]\n    Phi[:, 6] = Xn[:, 3] * Xn[:, 3]\n    # interaction (data \u00d7 param)\n    Phi[:, 7] = Xn[:, 2] * Xn[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # linear prediction in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter normalized\u2010log hybrid polynomial via\n    closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: length\u20108 vector of learned coefficients\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize log\u2010features\n    Xn = _normalize_log_features(X)  # (N,4)\n\n    # build design matrix \u03a6\n    N = Xn.shape[0]\n    Phi = np.empty((N, 8), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Xn[:, 0]\n    Phi[:, 2] = Xn[:, 1]\n    Phi[:, 3] = Xn[:, 2]\n    Phi[:, 4] = Xn[:, 3]\n    Phi[:, 5] = Xn[:, 2] * Xn[:, 2]\n    Phi[:, 6] = Xn[:, 3] * Xn[:, 3]\n    Phi[:, 7] = Xn[:, 2] * Xn[:, 3]\n\n    # target in log domain\n    logy = np.log(np.maximum(y, 1e-12))\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # scale ridge by data\u2010adaptive average diagonal\n    P_dim = A.shape[0]\n    avg_diag = np.trace(A) / P_dim\n    ridge_strength = 1e-4 * avg_diag\n\n    # apply ridge to all but intercept\n    diag_idx = np.arange(P_dim)\n    A[diag_idx, diag_idx] += ridge_strength\n    A[0, 0] -= ridge_strength  # no penalty on \u03b20\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n# -------------------------------------------------------------------------\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n# Compute midpoint and half\u2010range for normalization to roughly [\u22121,1]\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_feature_matrix(logX_norm):\n    \"\"\"\n    Build the second\u2010order feature matrix (without intercept) for normalized log\u2010features.\n    Columns: [xi for i in features,\n              xi * xj for all combinations_with_replacement]\n    Returns an array of shape (N, 4 + 10) = (N,14).\n    \"\"\"\n    N, F = logX_norm.shape\n    feats = []\n    # first\u2010order terms\n    for i in range(F):\n        feats.append(logX_norm[:, i])\n    # second\u2010order and cross terms\n    for i, j in combinations_with_replacement(range(F), 2):\n        feats.append(logX_norm[:, i] * logX_norm[:, j])\n    # stack into (N, 14)\n    return np.stack(feats, axis=1)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\u2010log\u2010domain\n    second\u2010order polynomial.\n\n    Args:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (1 intercept + 14 feature weights)\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n\n    # avoid non\u2010positive values\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize to roughly [-1,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build feature matrix (no intercept)\n    Phi = _build_feature_matrix(logX_norm)  # shape (N,14)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1] + 1:\n        raise ValueError(f\"Expected {Phi.shape[1] + 1} parameters, got {p.size}\")\n\n    # intercept + weighted sum of features\n    p0 = p[0]\n    w = p[1:]\n    log_pred = p0 + Phi.dot(w)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log second\u2010order polynomial via closed\u2010form ridge regression\n    with an explicit intercept term.  We center the features and target to\n    decouple intercept (unpenalized) from feature weights.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 (1 intercept + 14 feature weights)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per point, got shape {X.shape}\")\n\n    # avoid non\u2010positive values\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # build feature matrix (no intercept)\n    Phi = _build_feature_matrix(logX_norm)  # shape (N,14)\n\n    # prepare centered regression\n    logy = np.log(y)\n    y_mean = logy.mean()\n    Phi_mean = Phi.mean(axis=0)\n    Phi_centered = Phi - Phi_mean  # (N,14)\n    y_centered = logy - y_mean     # (N,)\n\n    # form normal equations for centered data\n    P_feat = Phi_centered.shape[1]\n    A = Phi_centered.T.dot(Phi_centered)\n    # adaptive ridge: small fraction of avg diag magnitude\n    avg_diag = np.trace(A) / P_feat\n    ridge = 1e-6 * avg_diag\n    A += ridge * np.eye(P_feat)\n\n    b = Phi_centered.T.dot(y_centered)\n\n    # solve for feature weights\n    w = np.linalg.solve(A, b)  # (14,)\n\n    # recover intercept: y_mean = p0 + Phi_mean \u22c5 w  =>  p0 = y_mean - Phi_mean\u22c5w\n    p0 = y_mean - Phi_mean.dot(w)\n\n    # combine intercept and weights\n    params = np.empty(P_feat + 1, dtype=float)\n    params[0] = p0\n    params[1:] = w\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a second\u2010order polynomial in the log of each feature\n(including squares and pairwise interactions) and fit via closed\u2010form ridge\nregression for numerical stability and parameter efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + F + F*(F+1)/2 where F=4\n                   = 1 (intercept)\n                     + 4 (main effects)\n                     + 10 (4 squares + 6 pairwise products)\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                # shape (N,4)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters\n    P_expected = 1 + F + (F * (F + 1)) // 2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # second-order terms: squares and pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010domain polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: 1D array of learned parameters of length P = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)   # shape (N,4)\n    logy = np.log(y)   # shape (N,)\n\n    N, F = logX.shape\n    # total parameters: intercept + F main + F*(F+1)/2 second-order\n    P = 1 + F + (F * (F + 1)) // 2\n\n    # build design matrix\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization for stability (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal\n    A += ridge * np.eye(P)\n    # remove ridge penalty from intercept term\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\nFLOOR = 1e-12\n\n# EVOLVE-BLOCK-START\ndef _build_phi(X):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N,8) for the 8-parameter model:\n        [1,\n         log(lr),\n         log(bsz),\n         log(data_size),\n         log(param_size),\n         log(data_size)^2,\n         log(param_size)^2,\n         log(data_size)*log(param_size)]\n    \"\"\"\n    # X has shape (N,4): columns [lr, bsz, data_size, param_size]\n    # Clip to avoid log(0)\n    X = np.maximum(X, FLOOR)\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n\n    return np.column_stack([\n        np.ones(X.shape[0], dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via an 8-parameter log-domain polynomial.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    Phi = _build_phi(X)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge\u2010regularized least squares\n    in the log-domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # build design matrix & target in log-domain\n    Phi = _build_phi(X)\n    log_y = np.log(np.maximum(y, FLOOR))\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to every diagonal, then un\u2010penalize the intercept\n    diag_ix = np.arange(A.shape[0])\n    A[diag_ix, diag_ix] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX  = np.log(np.array([2.2e-2, 4096.0,  1e11,   1e9   ], dtype=float))\n# Midpoint and half-span for zero-centered normalization to [-1,1]\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise (i < j) interactions\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters: 1 intercept + 4 linear + 4 squared + 6 cross\u2010terms = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take logs, then normalize each feature to [-1,1]:\n      X_n = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip to [-1,1] to guard numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build the normalized-log quadratic design matrix:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise interactions (6)\n      ]\n    Output shape: (N, 15)\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    # normalize inputs in log\u2010domain\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    # build quadratic features\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)                         # (N,)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression\n    in the log-loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients\n    \"\"\"\n    # prepare inputs\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length\")\n    # normalize features and build design matrix\n    logXn = _normalize_log_features(X)            # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    # safe log of target\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # normal equations\n    A = Phi.T.dot(Phi)                            # (15,15)\n    b = Phi.T.dot(logy)                           # (15,)\n    # adaptive ridge regularization (no penalty on intercept)\n    ridge = 1e-6 * np.trace(A) / _P\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Expanded the model to a full normalized\u2010log quadratic form (15 parameters) to capture nonlinear and interaction effects between all hyperparameters.\n- Zero\u2010centered, feature\u2010wise normalization in log\u2010space ensures stability across diverse scales.\n- Closed\u2010form ridge regression with adaptive penalty (scaled by trace) provides numerical robustness and avoids overfitting while leaving the intercept unpenalized.\n- Vectorized construction of both normalization and design matrix for clarity and maintainability."]}}}