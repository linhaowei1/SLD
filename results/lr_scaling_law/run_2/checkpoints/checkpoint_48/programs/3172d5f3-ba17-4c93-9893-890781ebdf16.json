{"id": "3172d5f3-ba17-4c93-9893-890781ebdf16", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Cross\u2010quadratic scaling law:\n      log(loss) \u2248 bias\n                  + \u03a3_i w_i\u00b7log(x_i)\n                  + \u03a3_i q_i\u00b7[log(x_i)]^2\n                  + c1\u00b7log(lr)\u00b7log(bsz)\n                  + c2\u00b7log(data_size)\u00b7log(non_embedding_param_size)\n\n    params is length 11:\n      [bias,\n       w_lr, w_bsz, w_data, w_param,\n       q_lr, q_bsz, q_data, q_param,\n       c_lr_bsz, c_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)  # (N,4)\n    # numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                # (N,4)\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    data = logX[:, 2]\n    prm  = logX[:, 3]\n\n    # build design matrix Z: bias, linear, quadratic, two cross\u2010terms\n    Z = np.column_stack([\n        np.ones_like(lr),    # bias\n        lr, bsz, data, prm,  # linear terms\n        lr*lr, bsz*bsz, data*data, prm*prm,  # squared terms\n        lr*bsz,             # interaction lr \u00d7 bsz\n        data*prm            # interaction data_size \u00d7 param_size\n    ])  # shape (N,11)\n\n    theta = np.asarray(params, dtype=np.float64)    # (11,)\n    log_pred = Z.dot(theta)                         # (N,)\n    # clip to avoid overflow/underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the cross\u2010quadratic scaling law via ridge\u2010regularized\n    linear regression in log\u2010space. Returns an (11,) parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)    # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)    # (N,)\n\n    # numerical safeguards\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    data = logX[:, 2]\n    prm  = logX[:, 3]\n\n    # design matrix: [1, lin(4), quad(4), cross(2)] = 11 cols\n    Z = np.column_stack([\n        np.ones_like(lr),\n        lr, bsz, data, prm,\n        lr*lr, bsz*bsz, data*data, prm*prm,\n        lr*bsz,\n        data*prm\n    ])  # (N,11)\n\n    # ridge regularization (no penalty on bias)\n    P = Z.shape[1]   # 11\n    lambda_reg = 1e-2\n    reg = np.eye(P, dtype=np.float64) * lambda_reg\n    reg[0, 0] = 0.0\n\n    # solve (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg   # (11,11)\n    b = Z.T.dot(logy)      # (11,)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        theta, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e88e13b6-fa99-42d2-9ea9-86b6aaee34f4", "generation": 3, "timestamp": 1754717617.9529989, "iteration_found": 48, "metrics": {"nmse": 0.1654494686068055, "nmae": 0.3513378268219352, "r2": 0.8345505313931945, "combined_score": 0.8580380590806858}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3938917154217117, "nmae": 0.5087149294585225, "r2": 0.6061082845782884, "combined_score": 0.7174158429497929}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2592, nmae: 0.4558, r2: 0.7408, combined_score: 0.7941\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.2543, nmae: 0.4490, r2: 0.7457, combined_score: 0.7972\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1654, nmae: 0.3513, r2: 0.8346, combined_score: 0.8580\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5523)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law function supporting:\n      (a) pure power\u2010law with 5 parameters: [bias, w_lr, w_bsz, w_data, w_param]\n      (b) cross\u2010quadratic law with 11 parameters:\n          [bias,\n           w1..w4 (linear in log),\n           q1..q4 (quadratic in log),\n           c1=log(lr)*log(bsz),\n           c2=log(data)*log(param)]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    X = np.maximum(X, eps)         # avoid log(0)\n    logX = np.log(X)               # (N,4)\n\n    theta = np.asarray(params, dtype=float)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = logX.shape\n\n    # Build design matrix Z based on parameter length\n    if P == F + 1:\n        # pure power\u2010law: bias + linear terms\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)\n    elif P == 11:\n        # cross\u2010quadratic law: bias + linear + quadratic + two cross terms\n        lr   = logX[:, 0:1]   # log(lr)\n        bsz  = logX[:, 1:2]   # log(bsz)\n        data = logX[:, 2:3]   # log(data_size)\n        prm  = logX[:, 3:4]   # log(param_size)\n        lin   = np.concatenate([lr, bsz, data, prm], axis=1)\n        quad  = lin**2\n        cross = np.concatenate([lr * bsz, data * prm], axis=1)\n        Z     = np.concatenate([np.ones((N, 1)), lin, quad, cross], axis=1)\n    else:\n        raise ValueError(f\"Unsupported params length {P}, expected {F+1} or 11\")\n\n    # Linear model in log-space \u2192 exponentiate to get loss\n    log_pred = Z.dot(theta.T)      # (N, M)\n    pred     = np.exp(log_pred)    # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the cross\u2010quadratic scaling law:\n      log(loss) \u2248 bias\n                  + \u03a3_i w_i\u00b7log(x_i)\n                  + \u03a3_i q_i\u00b7[log(x_i)]^2\n                  + c1\u00b7log(lr)\u00b7log(bsz)\n                  + c2\u00b7log(data_size)\u00b7log(param_size)\n\n    Solves a ridge\u2010regularized linear system in log-space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # Clip to avoid log(0)\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    logX = np.log(X)         # (N,4)\n    logy = np.log(y)         # (N,)\n\n    # Split features\n    lr   = logX[:, 0:1]\n    bsz  = logX[:, 1:2]\n    data = logX[:, 2:3]\n    prm  = logX[:, 3:4]\n\n    # Build design matrix Z: bias + linear(4) + quad(4) + cross(2) = 11 cols\n    lin   = np.concatenate([lr, bsz, data, prm], axis=1)     # (N,4)\n    quad  = lin**2                                             # (N,4)\n    cross = np.concatenate([lr * bsz, data * prm], axis=1)    # (N,2)\n    Z     = np.concatenate([np.ones((N,1)), lin, quad, cross], axis=1)  # (N,11)\n\n    # Ridge regularization (no penalty on bias)\n    P = Z.shape[1]\n    lambda_reg = 1e-2\n    reg = np.eye(P)\n    reg[0, 0] = 0.0\n\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    # Solve for parameters in log-space\n    params = np.linalg.solve(A, b)  # (11,)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1654), Performs well on nmae (0.3513), Performs well on r2 (0.8346), Performs well on combined_score (0.8580)\n\n\n### Program 2 (Score: 0.5616)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters using a log\u2010space quadratic scaling law.\n    Supports three forms depending on len(params):\n      1) Pure power\u2010law:       P = F+1       \u2192 [intercept, a1\u2026aF]\n      2) Quadratic log\u2010law:    P = 2F+1      \u2192 [intercept, a1\u2026aF, b1\u2026bF]\n      3) Full quadratic + interactions:\n         P = 1 + F + F + F*(F\u22121)/2\n    where F = number of features (4 here).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    X_clipped = np.clip(X, eps, None)\n    logX = np.log(X_clipped)            # (N, F)\n    N, F = logX.shape\n\n    theta = np.asarray(params, dtype=float)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n\n    # Build design matrix Z according to parameter length\n    if P == F + 1:\n        # pure power\u2010law: intercept + linear terms\n        Z = np.concatenate([np.ones((N,1)), logX], axis=1)\n    elif P == 2*F + 1:\n        # quadratic in log\u2010space: intercept + linear + squared terms\n        Z = np.concatenate([np.ones((N,1)), logX, logX**2], axis=1)\n    elif P == 1 + F + F + (F*(F-1)//2):\n        # full quadratic + pairwise interactions\n        sq = logX**2\n        inter_terms = []\n        for i in range(F):\n            for j in range(i+1, F):\n                inter_terms.append(logX[:, i] * logX[:, j])\n        inter = np.stack(inter_terms, axis=1) if inter_terms else np.zeros((N,0))\n        Z = np.concatenate([np.ones((N,1)), logX, sq, inter], axis=1)\n    else:\n        raise ValueError(f\"Unexpected parameter length {P} for input dimension {F}\")\n\n    # Linear model in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)       # (N, M)\n    pred = np.exp(pred_log)         # (N, M)\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the quadratic log\u2010law:\n        log(loss) \u2248 intercept + \u03a3_i a_i\u00b7log(x_i) + \u03a3_i b_i\u00b7[log(x_i)]^2\n    via ridge\u2010regularized least squares in log\u2010space.\n    Returns params of length 2F+1.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # Clip to avoid log(0)\n    X_clipped = np.clip(X, eps, None)\n    y_clipped = np.clip(y, eps, None)\n\n    logX = np.log(X_clipped)      # (N, F)\n    logy = np.log(y_clipped)      # (N,)\n    N, F = logX.shape\n\n    # Design matrix: [1, logX, (logX)^2]\n    Z = np.concatenate([np.ones((N,1)), logX, logX**2], axis=1)\n    P = Z.shape[1]  # should be 2F+1\n\n    # Ridge penalty for stability (no penalty on intercept)\n    lambda_reg = 1e-3\n    reg = np.eye(P)\n    reg[0,0] = 0.0\n\n    # Normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    theta = np.linalg.solve(A, b)  # (P,)\n\n    return theta\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2543), Performs well on nmae (0.4490), Performs well on r2 (0.7457), Performs well on combined_score (0.7972)\n\n\n### Program 3 (Score: 0.5625)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a log\u2010polynomial scaling law:\n\n      log(loss) \u2248 b0\n                  + \u03a3_i w_i * log(x_i)\n                  + \u03a3_i c_i * (log(x_i))^2\n\n    where x_i = [lr, bsz, data_size, non_embedding_param_size].\n\n    params is a length-9 vector: [b0, w0, w1, w2, w3, c0, c1, c2, c3].\n    Returns an array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # shape (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # shape (N,4)\n\n    # unpack parameters\n    b0 = params[0]                                              # scalar\n    w  = params[1:5]                                           # shape (4,)\n    c  = params[5:9]                                           # shape (4,)\n\n    # compute log\u2010predictions\n    log_pred = b0 + logX.dot(w) + (logX**2).dot(c)              # shape (N,)\n\n    # clip to avoid overflow/underflow when exponentiating\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above log\u2010polynomial model with ridge regularization in closed form.\n\n    Returns params array of shape (9,) = [b0, w0, w1, w2, w3, c0, c1, c2, c3].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # shape (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # shape (N,)\n\n    # numerical safeguards\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)      # shape (N,4)\n    logy = np.log(y)      # shape (N,)\n\n    N, F = logX.shape     # F == 4\n\n    # build design matrix with linear and quadratic log terms\n    # [1, logX[:,0], ..., logX[:,3], (logX[:,0])^2, ..., (logX[:,3])^2]\n    ones = np.ones((N, 1), dtype=np.float64)\n    lin  = logX\n    quad = logX**2\n    design = np.hstack([ones, lin, quad])                        # shape (N,9)\n\n    # ridge regularization (no penalty on intercept)\n    P = design.shape[1]  # 9\n    lambda_reg = 1e-4\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0\n\n    # solve normal equations: (D^T D + \u03bbI) \u03b8 = D^T logy\n    A = design.T.dot(design) + lambda_reg * I   # (9,9)\n    b = design.T.dot(logy)                      # (9,)\n\n    params = np.linalg.solve(A, b)              # shape (9,)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2592), Performs well on nmae (0.4558), Performs well on r2 (0.7408), Performs well on combined_score (0.7941)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5698)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a floor + exp(intercept + w1*log_lr + w2*(log_lr)^2 + w3*log_bsz\n                      + w4*log_data_size + w5*log_param_size).\n\n    params: array_like of length 7:\n      [loss_floor,\n       intercept,\n       w_lr1,\n       w_lr2,\n       w_bsz,\n       w_data,\n       w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # split columns\n    lr, bsz, data_sz, param_sz = X.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_sz)\n    log_param= np.log(param_sz)\n\n    loss_floor, intercept, w1, w2, w3, w4, w5 = params\n\n    # polynomial in log\u2010space (quadratic in log_lr)\n    f = (\n        intercept\n        + w1 * log_lr\n        + w2 * (log_lr**2)\n        + w3 * log_bsz\n        + w4 * log_data\n        + w5 * log_param\n    )\n    return loss_floor + np.exp(f)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above model via:\n      1) Linear regression in transformed log\u2010space to get an initial guess.\n      2) Robust Huber least\u2010squares in original loss\u2010space to refine,\n         solving also for the nonzero floor.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # unpack for logs\n    lr, bsz, data_sz, param_sz = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n    log_lr2   = log_lr**2\n    log_y     = np.log(y)\n\n    N = y.shape[0]\n    # design matrix for initial linear solve:\n    # columns = [1, log_lr, (log_lr)^2, log_bsz, log_data, log_param]\n    D = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_lr2,\n        log_bsz,\n        log_data,\n        log_param\n    ])\n\n    # ridge for stability (no penalty on intercept)\n    lam = 1e-6\n    M = D.shape[1]\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n    # solve (D^T D + lam I) p = D^T log_y\n    A = D.T.dot(D) + lam * I\n    b = D.T.dot(log_y)\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(D, log_y, rcond=None)\n\n    # unpack initial intercept and weights\n    # p_lin = [ intercept, w1, w2, w3, w4, w5 ]\n    intercept_init, w1, w2, w3, w4, w5 = p_lin\n\n    # initial floor ~ half the minimum observed loss\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack full parameter vector of length 7\n    x0 = np.array([\n        loss_floor_init,\n        intercept_init,\n        w1, w2, w3, w4, w5\n    ], dtype=np.float64)\n\n    # floor constrained to [0, min(y)], others unconstrained\n    lower = np.array([0.0] + [-np.inf]*6, dtype=np.float64)\n    upper = np.array([np.min(y)] + [ np.inf]*6, dtype=np.float64)\n\n    # define residuals in original loss space\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        res = least_squares(\n            residuals,\n            x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000,\n            xtol=1e-12,\n            ftol=1e-12\n        )\n        return res.x\n    except Exception:\n        # fallback on the initial linearized guess\n        return x0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized, ridge\u2010regularized\n    power\u2010law in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    The features are standardized (zero\u2010mean, unit\u2010variance) before fitting\n    for improved numerical stability, then weights are un\u2010standardized.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    # Assemble arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # Avoid zero or negative inside logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Move to log-space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    # Standardize features for numerical stability\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    sigma[sigma < 1e-6] = 1.0                                     # avoid division by zero\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # Build design matrix [1, standardized features]\n    N = Z_feat.shape[0]\n    bias_col = np.ones((N, 1), dtype=np.float64)\n    Z = np.concatenate([bias_col, Z_feat], axis=1)                # (N,5)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = Z.shape[1]  # 5\n    reg = np.eye(P, dtype=np.float64) * lambda_reg\n    reg[0, 0] = 0.0\n\n    # Solve normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg                                          # (5,5)\n    b = Z.T.dot(logy)                                             # (5,)\n    theta = np.linalg.solve(A, b)                                 # (5,)\n\n    # Un\u2010standardize weights\n    intercept_std = theta[0]\n    w_std         = theta[1:]                                     # (4,)\n    w = w_std / sigma                                             # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)\n\n    # Pack parameters: [intercept, w_lr, w_bsz, w_data, w_param]\n    params = np.empty(1 + w.size, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5523, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law function supporting:\n      (a) pure power\u2010law with 5 parameters: [bias, w_lr, w_bsz, w_data, w_param]\n      (b) cross\u2010quadratic law with 11 parameters:\n          [bias,\n           w1..w4 (linear in log),\n           q1..q4 (quadratic in log),\n           c1=log(lr)*log(bsz),\n           c2=log(data)*log(param)]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    eps = 1e-12\n    X = np.maximum(X, eps)         # avoid log(0)\n    logX = np.log(X)               # (N,4)\n\n    theta = np.asarray(params, dtype=float)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = logX.shape\n\n    # Build design matrix Z based on parameter length\n    if P == F + 1:\n        # pure power\u2010law: bias + linear terms\n        Z = np.concatenate([np.ones((N, 1)), logX], axis=1)\n    elif P == 11:\n        # cross\u2010quadratic law: bias + linear + quadratic + two cross terms\n        lr   = logX[:, 0:1]   # log(lr)\n        bsz  = logX[:, 1:2]   # log(bsz)\n        data = logX[:, 2:3]   # log(data_size)\n        prm  = logX[:, 3:4]   # log(param_size)\n        lin   = np.concatenate([lr, bsz, data, prm], axis=1)\n        quad  = lin**2\n        cross = np.concatenate([lr * bsz, data * prm], axis=1)\n        Z     = np.concatenate([np.ones((N, 1)), lin, quad, cross], axis=1)\n    else:\n        raise ValueError(f\"Unsupported params length {P}, expected {F+1} or 11\")\n\n    # Linear model in log-space \u2192 exponentiate to get loss\n    log_pred = Z.dot(theta.T)      # (N, M)\n    pred     = np.exp(log_pred)    # (N, M)\n\n    return pred.ravel() if M == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the cross\u2010quadratic scaling law:\n      log(loss) \u2248 bias\n                  + \u03a3_i w_i\u00b7log(x_i)\n                  + \u03a3_i q_i\u00b7[log(x_i)]^2\n                  + c1\u00b7log(lr)\u00b7log(bsz)\n                  + c2\u00b7log(data_size)\u00b7log(param_size)\n\n    Solves a ridge\u2010regularized linear system in log-space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    eps = 1e-12\n\n    # Clip to avoid log(0)\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    logX = np.log(X)         # (N,4)\n    logy = np.log(y)         # (N,)\n\n    # Split features\n    lr   = logX[:, 0:1]\n    bsz  = logX[:, 1:2]\n    data = logX[:, 2:3]\n    prm  = logX[:, 3:4]\n\n    # Build design matrix Z: bias + linear(4) + quad(4) + cross(2) = 11 cols\n    lin   = np.concatenate([lr, bsz, data, prm], axis=1)     # (N,4)\n    quad  = lin**2                                             # (N,4)\n    cross = np.concatenate([lr * bsz, data * prm], axis=1)    # (N,2)\n    Z     = np.concatenate([np.ones((N,1)), lin, quad, cross], axis=1)  # (N,11)\n\n    # Ridge regularization (no penalty on bias)\n    P = Z.shape[1]\n    lambda_reg = 1e-2\n    reg = np.eye(P)\n    reg[0, 0] = 0.0\n\n    A = Z.T.dot(Z) + lambda_reg * reg\n    b = Z.T.dot(logy)\n\n    # Solve for parameters in log-space\n    params = np.linalg.solve(A, b)  # (11,)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5698, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a floor + exp(intercept + w1*log_lr + w2*(log_lr)^2 + w3*log_bsz\n                      + w4*log_data_size + w5*log_param_size).\n\n    params: array_like of length 7:\n      [loss_floor,\n       intercept,\n       w_lr1,\n       w_lr2,\n       w_bsz,\n       w_data,\n       w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # split columns\n    lr, bsz, data_sz, param_sz = X.T\n    log_lr   = np.log(lr)\n    log_bsz  = np.log(bsz)\n    log_data = np.log(data_sz)\n    log_param= np.log(param_sz)\n\n    loss_floor, intercept, w1, w2, w3, w4, w5 = params\n\n    # polynomial in log\u2010space (quadratic in log_lr)\n    f = (\n        intercept\n        + w1 * log_lr\n        + w2 * (log_lr**2)\n        + w3 * log_bsz\n        + w4 * log_data\n        + w5 * log_param\n    )\n    return loss_floor + np.exp(f)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above model via:\n      1) Linear regression in transformed log\u2010space to get an initial guess.\n      2) Robust Huber least\u2010squares in original loss\u2010space to refine,\n         solving also for the nonzero floor.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # unpack for logs\n    lr, bsz, data_sz, param_sz = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n    log_lr2   = log_lr**2\n    log_y     = np.log(y)\n\n    N = y.shape[0]\n    # design matrix for initial linear solve:\n    # columns = [1, log_lr, (log_lr)^2, log_bsz, log_data, log_param]\n    D = np.column_stack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_lr2,\n        log_bsz,\n        log_data,\n        log_param\n    ])\n\n    # ridge for stability (no penalty on intercept)\n    lam = 1e-6\n    M = D.shape[1]\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n    # solve (D^T D + lam I) p = D^T log_y\n    A = D.T.dot(D) + lam * I\n    b = D.T.dot(log_y)\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(D, log_y, rcond=None)\n\n    # unpack initial intercept and weights\n    # p_lin = [ intercept, w1, w2, w3, w4, w5 ]\n    intercept_init, w1, w2, w3, w4, w5 = p_lin\n\n    # initial floor ~ half the minimum observed loss\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack full parameter vector of length 7\n    x0 = np.array([\n        loss_floor_init,\n        intercept_init,\n        w1, w2, w3, w4, w5\n    ], dtype=np.float64)\n\n    # floor constrained to [0, min(y)], others unconstrained\n    lower = np.array([0.0] + [-np.inf]*6, dtype=np.float64)\n    upper = np.array([np.min(y)] + [ np.inf]*6, dtype=np.float64)\n\n    # define residuals in original loss space\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        res = least_squares(\n            residuals,\n            x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000,\n            xtol=1e-12,\n            ftol=1e-12\n        )\n        return res.x\n    except Exception:\n        # fallback on the initial linearized guess\n        return x0\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5565, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRevised model: A log\u2010linear (multiplicative power\u2010law) form fitted via ridge\u2010regularized linear regression in log\u2010space.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and params = [intercept, w_lr, w_bsz, w_data, w_param].\n    \"\"\"\n    # Ensure array shape and type\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute in log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    # Unpack parameters\n    intercept = float(params[0])                                  # scalar\n    weights = np.asarray(params[1:], dtype=np.float64)           # (4,)\n    # Linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                      # (N,)\n    # Map back to original scale\n    return np.exp(log_pred)                                       # (N,)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the multiplicative power\u2010law model by solving\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    via ridge\u2010regularized normal equations for numerical stability.\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    # Avoid zeros in logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # Transform to log\u2010space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n    N, F = logX.shape                                             # F == 4\n    # Design matrix with intercept term\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                              # (N,5)\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    D = F + 1                                                    # 5\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    # Solve (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                    # (5,5)\n    b = design.T.dot(logy)                                       # (5,)\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # Fallback to least squares if matrix is singular\n        params, *_ = np.linalg.lstsq(design, logy, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5565, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters using a multiplicative power\u2010law:\n      loss \u2248 exp(intercept) * \u03a0_i x_i**exponent_i\n\n    Inputs:\n      data_points: (N, F) array of positive hyperparameters\n      params:     (P,) or (M, P) array of learned parameters,\n                  where P = F + 1  (intercept + one exponent per feature)\n    Returns:\n      preds: shape (N,) if single output or (N, M) if M\u2010output\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    eps = 1e-12\n    # log\u2010transform the features for a linear model in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n\n    theta = np.asarray(params, dtype=float)\n    # support multi\u2010target: shape into (M, P)\n    if theta.ndim == 1:\n        theta = theta[None, :]\n    M, P = theta.shape\n    N, F = X.shape\n    if P != F + 1:\n        raise ValueError(f\"Expected param length {F+1}, got {P}\")\n\n    # design matrix Z = [1, log(x1), log(x2), ..., log(xF)]\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n\n    # linear prediction in log\u2010space, then exponentiate\n    pred_log = Z.dot(theta.T)                            # (N, M)\n    pred = np.exp(pred_log)                              # (N, M)\n\n    # flatten if only one target\n    return pred.ravel() if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the intercept + exponents in log\u2010space via (ridge\u2010regularized)\n    linear regression:\n      log(loss) \u2248 intercept + \u03a3_i exponent_i * log(x_i)\n\n    Returns:\n      params: shape (P,) or (T, P) if multi\u2010target,\n              where P = F + 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    eps = 1e-12\n\n    # build design matrix in log\u2010space\n    logX = np.log(X + eps)              # (N, F)\n    Z = np.concatenate([np.ones((N, 1)), logX], axis=1)  # (N, P)\n    P = F + 1\n\n    # small ridge penalty for numeric stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    reg = np.eye(P)\n    reg[0, 0] = 0\n    A = Z.T.dot(Z) + lambda_reg * reg   # (P, P)\n\n    # support multi\u2010target losses\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    params = np.zeros((T, P), dtype=float)\n    for t in range(T):\n        logy = np.log(y2d[:, t] + eps)  # (N,)\n        b = Z.T.dot(logy)                # (P,)\n        params[t] = np.linalg.solve(A, b)\n\n    # return (P,) when single target, else (T, P)\n    return params[0] if T == 1 else params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a stabilized, ridge\u2010regularized\n    power\u2010law in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                             # (N,4)\n\n    intercept = float(params[0])                                 # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)        # (4,)\n\n    # linear model in log\u2010space\n    log_pred = intercept + logX.dot(weights)                     # (N,)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by ridge\u2010regularized linear regression in log\u2010space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n    The features are standardized (zero\u2010mean, unit\u2010variance) before fitting\n    for improved numerical stability, then weights are un\u2010standardized.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    # Assemble arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # Avoid zero or negative inside logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Move to log-space\n    logX = np.log(X)                                              # (N,4)\n    logy = np.log(y)                                              # (N,)\n\n    # Standardize features for numerical stability\n    mu    = logX.mean(axis=0)                                     # (4,)\n    sigma = logX.std(axis=0)                                      # (4,)\n    sigma[sigma < 1e-6] = 1.0                                     # avoid division by zero\n    Z_feat = (logX - mu) / sigma                                  # (N,4)\n\n    # Build design matrix [1, standardized features]\n    N = Z_feat.shape[0]\n    bias_col = np.ones((N, 1), dtype=np.float64)\n    Z = np.concatenate([bias_col, Z_feat], axis=1)                # (N,5)\n\n    # Ridge\u2010regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = Z.shape[1]  # 5\n    reg = np.eye(P, dtype=np.float64) * lambda_reg\n    reg[0, 0] = 0.0\n\n    # Solve normal equations: (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg                                          # (5,5)\n    b = Z.T.dot(logy)                                             # (5,)\n    theta = np.linalg.solve(A, b)                                 # (5,)\n\n    # Un\u2010standardize weights\n    intercept_std = theta[0]\n    w_std         = theta[1:]                                     # (4,)\n    w = w_std / sigma                                             # (4,)\n    intercept = intercept_std - np.dot(w_std, mu / sigma)\n\n    # Pack parameters: [intercept, w_lr, w_bsz, w_data, w_param]\n    params = np.empty(1 + w.size, dtype=np.float64)\n    params[0] = intercept\n    params[1:] = w\n\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Cross\u2010quadratic scaling law:\n      log(loss) \u2248 bias\n                  + \u03a3_i w_i\u00b7log(x_i)\n                  + \u03a3_i q_i\u00b7[log(x_i)]^2\n                  + c1\u00b7log(lr)\u00b7log(bsz)\n                  + c2\u00b7log(data_size)\u00b7log(non_embedding_param_size)\n\n    params is length 11:\n      [bias,\n       w_lr, w_bsz, w_data, w_param,\n       q_lr, q_bsz, q_data, q_param,\n       c_lr_bsz, c_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)  # (N,4)\n    # numerical safeguard\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                # (N,4)\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    data = logX[:, 2]\n    prm  = logX[:, 3]\n\n    # build design matrix Z: bias, linear, quadratic, two cross\u2010terms\n    Z = np.column_stack([\n        np.ones_like(lr),    # bias\n        lr, bsz, data, prm,  # linear terms\n        lr*lr, bsz*bsz, data*data, prm*prm,  # squared terms\n        lr*bsz,             # interaction lr \u00d7 bsz\n        data*prm            # interaction data_size \u00d7 param_size\n    ])  # shape (N,11)\n\n    theta = np.asarray(params, dtype=np.float64)    # (11,)\n    log_pred = Z.dot(theta)                         # (N,)\n    # clip to avoid overflow/underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the cross\u2010quadratic scaling law via ridge\u2010regularized\n    linear regression in log\u2010space. Returns an (11,) parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)    # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)    # (N,)\n\n    # numerical safeguards\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    lr   = logX[:, 0]\n    bsz  = logX[:, 1]\n    data = logX[:, 2]\n    prm  = logX[:, 3]\n\n    # design matrix: [1, lin(4), quad(4), cross(2)] = 11 cols\n    Z = np.column_stack([\n        np.ones_like(lr),\n        lr, bsz, data, prm,\n        lr*lr, bsz*bsz, data*data, prm*prm,\n        lr*bsz,\n        data*prm\n    ])  # (N,11)\n\n    # ridge regularization (no penalty on bias)\n    P = Z.shape[1]   # 11\n    lambda_reg = 1e-2\n    reg = np.eye(P, dtype=np.float64) * lambda_reg\n    reg[0, 0] = 0.0\n\n    # solve (Z^T Z + \u03bb I) \u03b8 = Z^T logy\n    A = Z.T.dot(Z) + reg   # (11,11)\n    b = Z.T.dot(logy)      # (11,)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        theta, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END\n```"]}}}