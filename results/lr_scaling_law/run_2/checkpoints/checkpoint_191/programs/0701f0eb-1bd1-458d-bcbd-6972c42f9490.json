{"id": "0701f0eb-1bd1-458d-bcbd-6972c42f9490", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain bounds for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Center and half\u2010range for zero\u2010centered normalization to approximately [\u22121,1]\n_LOG_FEAT_CEN  = 0.5 * (_LOG_FEAT_MIN + _LOG_FEAT_MAX)\n_LOG_FEAT_HALF = 0.5 * (_LOG_FEAT_MAX - _LOG_FEAT_MIN)\n\n# Number of raw features\n_F = 4\n# Total parameters: 1 intercept + F linear + F*(F+1)/2 second\u2010order = 1 + 4 + 10 = 15\n_P = 1 + _F + (_F * (_F + 1)) // 2\n# Precompute indices for second\u2010order terms (i \u2264 j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=0)\n\n\ndef _normalize_log(X):\n    \"\"\"\n    Clip X > 0, take log, then zero\u2010center & scale to [-1,1]:\n      x_norm = (log(X) - center) / half_range\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_FEAT_CEN) / _LOG_FEAT_HALF\n    return np.clip(logXn, -1.0, 1.0)\n\n\ndef _build_design(logXn):\n    \"\"\"\n    Build the polynomial design matrix \u03a6 of shape (N,15):\n      Col 0           = 1\n      Cols 1..4       = the 4 normalized log\u2010features\n      Cols 5..14      = all second\u2010order terms logXn_i * logXn_j for i \u2264 j\n    \"\"\"\n    N = logXn.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logXn\n    # second\u2010order (squares + pairwise interactions)\n    idx = 1 + _F\n    for i, j in zip(_TRIU_I, _TRIU_J):\n        Phi[:, idx] = logXn[:, i] * logXn[:, j]\n        idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a zero\u2010centered log\u2010domain\n    second\u2010order polynomial scaling law.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    logXn = _normalize_log(data_points)      # (N,4)\n    Phi   = _build_design(logXn)             # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                    # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the zero\u2010centered log\u2010domain second\u2010order polynomial scaling law\n    via closed\u2010form ridge regression in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients (log\u2010loss domain)\n    \"\"\"\n    logXn = _normalize_log(data_points)      # (N,4)\n    Phi   = _build_design(logXn)             # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    logy = np.log(np.clip(y, 1e-12, None))   # (N,)\n\n    # Normal equations with adaptive ridge (no penalty on intercept)\n    A     = Phi.T.dot(Phi)                   # (15,15)\n    b     = Phi.T.dot(logy)                  # (15,)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    A    += ridge * np.eye(Pdim)\n    A[0, 0] -= ridge\n\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "da432058-812c-4b8b-917e-3eafd0db9476", "generation": 5, "timestamp": 1754807257.8290215, "iteration_found": 183, "metrics": {"nmse": 0.00953876955185305, "nmae": 0.10324238167687869, "r2": 0.9904612304481469, "combined_score": 0.9905513588585733}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0095\n- nmae: 0.1032\n- r2: 0.9905\n- combined_score: 0.9906\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs >0, take logs, then normalize each feature to [0,1]:\n      u = (log(X) - _LOG_F_MIN) / _LOG_F_RANGE\n    Returns an (N,4) array of normalized log\u2010features.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build the design matrix \u03a6 for the normalized\u2010log quadratic model:\n      \u03a6 columns = [1,\n                   u_i            (4 cols),\n                   u_i^2          (4 cols),\n                   u_i * u_j      (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = u.shape\n    P = 1 + F + F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n\n    # linear terms\n    Phi[:, idx:idx+F] = u\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = u**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients in the log\u2010loss domain\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    u = _normalize_log_features(data_points)      # (N,4)\n    Phi = _build_design_matrix(u)                # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_preds = Phi.dot(p)                       # (N,)\n    return np.exp(log_preds)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of fitted coefficients (log\u2010loss domain)\n    \"\"\"\n    u = _normalize_log_features(data_points)      # (N,4)\n    Phi = _build_design_matrix(u)                # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)                             # (N,)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                           # (15,15)\n    b = Phi.T.dot(logy)                          # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # penalize all but intercept\n    I = np.eye(Pdim, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain bounds for normalization:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAX - _LOG_MIN\n\ndef _prepare_design(data_points):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized-log quadratic model:\n      Columns = [1,\n                 u_i           (4 cols),\n                 u_i^2         (4 cols),\n                 u_i * u_j     (6 cols for i<j)]\n    where u_i = (log(x_i) - _LOG_MIN[i]) / _LOG_RANGE[i] \u2208 [0,1].\n\n    Args:\n      data_points: array-like of shape (N,4)\n\n    Returns:\n      Phi: numpy array of shape (N,15)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # Normalize log-features to [0,1]\n    u = (np.log(X) - _LOG_MIN) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n\n    N, F = u.shape\n    # Total params: 1 (intercept) + F (linear) + F (squared) + F*(F-1)/2 (interactions)\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n\n    # Linear terms\n    Phi[:, 1:1+F] = u\n    # Squared terms\n    Phi[:, 1+F:1+2*F] = u**2\n    # Pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n\n    return Phi\n# EVOLVE-BLOCK-END\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned normalized-log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients in the log-loss domain\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    Phi = _prepare_design(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of fitted coefficients (log-loss domain)\n    \"\"\"\n    Phi = _prepare_design(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # Avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # Adaptive ridge penalty (no penalty on intercept)\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN  # for normalization to [0,1]\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to positive, take logs, then normalize each feature u_i to [0,1]:\n      u_i = (log(X_i) - log_min_i) / (log_max_i - log_min_i)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    u = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    # clamp to [0,1]\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build design matrix \u03a6 for 2nd\u2010order polynomial in normalized log\u2010features:\n      columns = [1,\n                 u_i            (4),\n                 u_i^2          (4),\n                 u_i * u_j      (6 for i<j)]\n    Total cols = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = u.shape\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = u\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = u**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via learned quadratic model in normalized log\u2010space.\n    Args:\n      data_points: array\u2010like (N,4): [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log\u2010loss domain)\n    Returns:\n      preds: numpy array (N,) of predicted losses\n    \"\"\"\n    u = _normalize_log_features(data_points)   # (N,4)\n    Phi = _build_design_matrix(u)             # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_preds = Phi.dot(p)                    # (N,)\n    return np.exp(log_preds)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n    Args:\n      data_points: array\u2010like (N,4)\n      loss_values: array\u2010like (N,)\n    Returns:\n      params: 1D numpy array length 15 of fitted coefficients (log\u2010loss domain)\n    \"\"\"\n    u = _normalize_log_features(data_points)   # (N,4)\n    Phi = _build_design_matrix(u)             # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # clip to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)                          # (N,)\n\n    # normal equations\n    A = Phi.T.dot(Phi)                        # (15,15)\n    b = Phi.T.dot(logy)                       # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    I = np.eye(Pdim, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN       = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX       = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Compute per\u2010feature center and half\u2010range for normalization to roughly [\u22121,1]\n_LOG_F_CENTER    = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF_RANGE = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), floor to avoid log(0), then log-transform,\n    center & scale each feature:\n      x_i = (log(X_i) - center_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_CENTER) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape    # F should be 4\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    Phi = _build_design_matrix(x)  # shape (N,15)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                    # (15,15)\n    b = Phi.T.dot(logy)                   # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain bounds for each feature: [lr, bsz, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization in [-1,1]\n_LOG_FEAT_MID  = 0.5 * (_LOG_FEAT_MIN + _LOG_FEAT_MAX)\n_LOG_FEAT_HALF = 0.5 * (_LOG_FEAT_MAX - _LOG_FEAT_MIN)\n\n# Number of features\n_F = 4\n# Precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total parameters: 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs >0, take logs, then normalize each feature to [-1,1]:\n      logX_norm = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_FEAT_MID) / _LOG_FEAT_HALF\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build design matrix \u03a6 for a normalized quadratic model:\n      Columns = [\n        1,\n        logXn_i for i in 0..3,\n        (logXn_i)^2 for i in 0..3,\n        logXn_i * logXn_j for all i<j\n      ]\n    Returns \u03a6 of shape (N, 15).\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=logXn.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn ** 2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned quadratic model\n    in normalized log-space.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                         # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge-regularized regression in the log-loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Normal equations\n    A = Phi.T.dot(Phi)    # (15,15)\n    b = Phi.T.dot(logy)   # (15,)\n\n    # Adaptive ridge regularization \u03bb = 1e-6 * trace(A)/P for stability\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=A.dtype)\n    I[0,0] = 0.0         # no penalty on intercept\n    A += ridge * I\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.2432, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                  [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log of zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # targeted interactions\n    lr_bsz = log_lr * log_bsz\n    D_P    = log_D  * log_P\n\n    # linear model in log-domain\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_D\n      + p[4]*log_P\n      + p[5]*lr_bsz\n      + p[6]*D_P\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr * log_bsz,\n        log_D  * log_P\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    diag_idx = np.diag_indices_from(A)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # exempt intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 2 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain bounds for each feature: [lr, bsz, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization in [-1,1]\n_LOG_FEAT_MID  = 0.5 * (_LOG_FEAT_MIN + _LOG_FEAT_MAX)\n_LOG_FEAT_HALF = 0.5 * (_LOG_FEAT_MAX - _LOG_FEAT_MIN)\n\n# Number of features\n_F = 4\n# Precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total parameters: 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs >0, take logs, then normalize each feature to [-1,1]:\n      logX_norm = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected input of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_FEAT_MID) / _LOG_FEAT_HALF\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build design matrix \u03a6 for a normalized quadratic model:\n      Columns = [\n        1,\n        logXn_i for i in 0..3,\n        (logXn_i)^2 for i in 0..3,\n        logXn_i * logXn_j for all i<j\n      ]\n    Returns \u03a6 of shape (N, 15).\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=logXn.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn ** 2\n    # pairwise interactions\n    Phi[:, 1+2*F:] = logXn[:, _TRIU_I] * logXn[:, _TRIU_J]\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned quadratic model\n    in normalized log-space.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                         # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form\n    ridge-regularized regression in the log-loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of learned coefficients\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Normal equations\n    A = Phi.T.dot(Phi)    # (15,15)\n    b = Phi.T.dot(logy)   # (15,)\n\n    # Adaptive ridge regularization \u03bb = 1e-6 * trace(A)/P for stability\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=A.dtype)\n    I[0,0] = 0.0         # no penalty on intercept\n    A += ridge * I\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nParsimonious log\u2010domain scaling law for LLM training:\n\nWe predict the language\u2010model loss via a small 8\u2010parameter model:\n    log(loss) \u2248 \u03b20\n              + \u03b2_lr * log(lr)\n              + \u03b2_bsz * log(bsz)\n              + \u03b2_D  * log(data_size)\n              + \u03b2_P  * log(param_size)\n              + \u03b2_D2 * [log(data_size)]^2\n              + \u03b2_P2 * [log(param_size)]^2\n              + \u03b2_DP * log(data_size) * log(param_size)\n\nThis form captures the primary power\u2010law effects of lr and bsz\nand allows mild curvature and interaction in data/parameter scale\nfor stable cross\u2010configuration generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 8\u2010parameter log\u2010domain model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) or (4,), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 8 = [\u03b20, \u03b2_lr, \u03b2_bsz, \u03b2_D, \u03b2_P, \u03b2_D2, \u03b2_P2, \u03b2_DP]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # build design matrix \u03a6 (N\u00d78)\n    # columns: [1, log_lr, log_bsz, log_D, log_P, log_D^2, log_P^2, log_D*log_P]\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log\u2010domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8\u2010parameter scaling\u2010law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 8 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    # log\u2010transform\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n    log_y   = np.log(y)\n\n    # build design matrix \u03a6 (N\u00d78)\n    Phi = np.column_stack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    # A = \u03a6\u1d40\u03a6 + ridge * I (except intercept unpenalized)\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries for parameters 1..7\n    idx = np.arange(Phi.shape[1])\n    A[idx, idx] += ridge\n    # remove penalty on intercept term\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 4 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN       = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX       = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Compute per\u2010feature center and half\u2010range for normalization to roughly [\u22121,1]\n_LOG_F_CENTER    = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF_RANGE = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), floor to avoid log(0), then log-transform,\n    center & scale each feature:\n      x_i = (log(X_i) - center_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_CENTER) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a 2nd\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape    # F should be 4\n    # total parameters: 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a normalized\u2010log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    Phi = _build_design_matrix(x)  # shape (N,15)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                    # (15,15)\n    b = Phi.T.dot(logy)                   # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training:\nWe predict log(loss) as a second\u2010order polynomial in the log of each hyperparameter\n(including squared terms and pairwise interactions), fitted via closed\u2010form ridge\nregression for stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + F + F*(F+1)//2 where F=4\n                   = 1 (intercept)\n                     + 4 (linear log\u2010terms)\n                     + 10 (4 squares + 6 pairwise products)\n\n    Returns:\n      preds: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) / negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)                # shape (N,4)\n    N, F = logX.shape\n\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + (F * (F + 1)) // 2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # build design matrix \u03a6\n    # column 0: intercept (ones)\n    # columns 1..F: linear log\u2010terms\n    # remaining columns: squares and pairwise interactions\n    Phi = np.ones((N, P_expected), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log\u2010loss space\n    log_pred = Phi.dot(p)\n    # map back to original loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010domain second\u2010order polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length P = 1 + 4 + 10 = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # guard against non-positive inputs/outputs\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    logX = np.log(X)   # shape (N,4)\n    logy = np.log(y)   # shape (N,)\n    N, F = logX.shape\n\n    # total parameters count\n    P = 1 + F + (F * (F + 1)) // 2\n\n    # build design matrix \u03a6\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # form normal equations for ridge regression\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # small ridge for numerical stability (no penalty on intercept)\n    ridge = 1e-8\n    A += ridge * np.eye(P)\n    A[0, 0] -= ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log-domain bounds for normalization:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,    4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_RANGE = _LOG_MAX - _LOG_MIN\n\ndef _prepare_design(data_points):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized-log quadratic model:\n      Columns = [1,\n                 u_i           (4 cols),\n                 u_i^2         (4 cols),\n                 u_i * u_j     (6 cols for i<j)]\n    where u_i = (log(x_i) - _LOG_MIN[i]) / _LOG_RANGE[i] \u2208 [0,1].\n\n    Args:\n      data_points: array-like of shape (N,4)\n\n    Returns:\n      Phi: numpy array of shape (N,15)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # Avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # Normalize log-features to [0,1]\n    u = (np.log(X) - _LOG_MIN) / _LOG_RANGE\n    u = np.clip(u, 0.0, 1.0)\n\n    N, F = u.shape\n    # Total params: 1 (intercept) + F (linear) + F (squared) + F*(F-1)/2 (interactions)\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n\n    # Linear terms\n    Phi[:, 1:1+F] = u\n    # Squared terms\n    Phi[:, 1+F:1+2*F] = u**2\n    # Pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n\n    return Phi\n# EVOLVE-BLOCK-END\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned normalized-log quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients in the log-loss domain\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    Phi = _prepare_design(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 of fitted coefficients (log-loss domain)\n    \"\"\"\n    Phi = _prepare_design(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # Avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # Normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # Adaptive ridge penalty (no penalty on intercept)\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n\n    params = np.linalg.solve(A, b)\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain bounds for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Center and half\u2010range for zero\u2010centered normalization to approximately [\u22121,1]\n_LOG_FEAT_CEN  = 0.5 * (_LOG_FEAT_MIN + _LOG_FEAT_MAX)\n_LOG_FEAT_HALF = 0.5 * (_LOG_FEAT_MAX - _LOG_FEAT_MIN)\n\n# Number of raw features\n_F = 4\n# Total parameters: 1 intercept + F linear + F*(F+1)/2 second\u2010order = 1 + 4 + 10 = 15\n_P = 1 + _F + (_F * (_F + 1)) // 2\n# Precompute indices for second\u2010order terms (i \u2264 j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=0)\n\n\ndef _normalize_log(X):\n    \"\"\"\n    Clip X > 0, take log, then zero\u2010center & scale to [-1,1]:\n      x_norm = (log(X) - center) / half_range\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_FEAT_CEN) / _LOG_FEAT_HALF\n    return np.clip(logXn, -1.0, 1.0)\n\n\ndef _build_design(logXn):\n    \"\"\"\n    Build the polynomial design matrix \u03a6 of shape (N,15):\n      Col 0           = 1\n      Cols 1..4       = the 4 normalized log\u2010features\n      Cols 5..14      = all second\u2010order terms logXn_i * logXn_j for i \u2264 j\n    \"\"\"\n    N = logXn.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logXn\n    # second\u2010order (squares + pairwise interactions)\n    idx = 1 + _F\n    for i, j in zip(_TRIU_I, _TRIU_J):\n        Phi[:, idx] = logXn[:, i] * logXn[:, j]\n        idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a zero\u2010centered log\u2010domain\n    second\u2010order polynomial scaling law.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    logXn = _normalize_log(data_points)      # (N,4)\n    Phi   = _build_design(logXn)             # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                    # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the zero\u2010centered log\u2010domain second\u2010order polynomial scaling law\n    via closed\u2010form ridge regression in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients (log\u2010loss domain)\n    \"\"\"\n    logXn = _normalize_log(data_points)      # (N,4)\n    Phi   = _build_design(logXn)             # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    logy = np.log(np.clip(y, 1e-12, None))   # (N,)\n\n    # Normal equations with adaptive ridge (no penalty on intercept)\n    A     = Phi.T.dot(Phi)                   # (15,15)\n    b     = Phi.T.dot(logy)                  # (15,)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    A    += ridge * np.eye(Pdim)\n    A[0, 0] -= ridge\n\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END\n```"]}}}