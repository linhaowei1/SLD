{"id": "5c1099da-7581-4185-823d-29759e6aa086", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized-log quadratic scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a second-order polynomial in the log-domain of four features:\n  [learning_rate, batch_size, data_size, non_embedding_param_size].\n\nFeatures are clipped, log-transformed, normalized to [-1,1] using fixed bounds,\nthen used to build a design matrix containing intercept, linear, squared,\nand pairwise interaction terms (total 15 parameters). Coefficients\nare fitted via closed-form ridge-regularized linear regression in log-loss domain.\n\"\"\"\n\n# log-domain bounds for [lr, bsz, data_size, param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n_F = 4\n# total model parameters = 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n_P = 1 + 2*_F + (_F * (_F - 1)) // 2\n# precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, then normalize each feature to [-1,1]:\n      Xn = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    Xn = (logX - _LOG_MID) / _LOG_HALF\n    return np.clip(Xn, -1.0, 1.0)\n\ndef _build_design_matrix(Xn):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-space:\n      [1,\n       x_i for i in [0..3],\n       x_i^2 for i in [0..3],\n       x_i * x_j for all i<j]\n    Returns shape (N, 15).\n    \"\"\"\n    N = Xn.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = Xn\n    # squared terms\n    Phi[:, 1+_F:1+2*_F] = Xn**2\n    # pairwise interactions\n    idx = 1 + 2*_F\n    for i, j in zip(_TRIU_I, _TRIU_J):\n        Phi[:, idx] = Xn[:, i] * Xn[:, j]\n        idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized-log quadratic model.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, param_size]\n      params:      array-like of length 15 [intercept, linear (4), squared (4), interactions (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    Xn  = _normalize_log_features(data_points)   # (N,4)\n    Phi = _build_design_matrix(Xn)               # (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                        # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients.\n    \"\"\"\n    Xn  = _normalize_log_features(data_points)   # (N,4)\n    Phi = _build_design_matrix(Xn)               # (N,15)\n    y   = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y    = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / _P\n    # add penalty on all but intercept\n    diag_idx = np.arange(_P)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0]          -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "64caf3e2-08d7-4372-a12d-39d48e469d7d", "generation": 4, "timestamp": 1754807341.9091554, "iteration_found": 192, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 6.000126113321131, "nmae": 3.0841327048208274, "r2": -5.000126113321131, "combined_score": 0.14285456916226347}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 6.0001\n- nmae: 3.0841\n- r2: -5.0001\n- combined_score: 0.1429\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding param size max\n], dtype=float))\n\n# Center and scale constants to map log-features roughly to [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n_FLOOR = 1e-12\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip to positive, log-transform, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1].\n    Input X: array of shape (N,4) or (4,)\n    Returns x: array of shape (N,4)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, _FLOOR)\n    logX = np.log(X)\n    # center & scale\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip to avoid extreme extrapolation\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second-order polynomial in normalized log-features x:\n      Columns: [1,\n                x1, x2, x3, x4,            # linear\n                x1^2, x2^2, x3^2, x4^2,    # squared\n                x1\u00b7x2, x1\u00b7x3, x1\u00b7x4,       # interactions\n                x2\u00b7x3, x2\u00b7x4,\n                x3\u00b7x4]\n    Input x: array of shape (N,4)\n    Returns \u03a6: array of shape (N,15)\n    \"\"\"\n    N, F = x.shape  # F must be 4\n    # total parameters = 1 + F + F + F*(F-1)/2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized second-order\n    polynomial in log-domain.\n    Args:\n      data_points: array-like of shape (N,4) or (4,),\n                     columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array-like of length 15\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    interaction coeffs (6)]\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    # prepare normalized log-features\n    x = _prepare_normed_log(data_points)    # (N,4)\n    Phi = _build_design_matrix(x)           # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain then exponentiate\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second-order polynomial scaling law via\n    closed-form ridge-regularized least squares.\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: numpy array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # shape checks\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # prepare design matrix\n    x = _prepare_normed_log(X)         # (N,4)\n    Phi = _build_design_matrix(x)      # (N,15)\n    # log-transform target\n    logy = np.log(np.maximum(y, _FLOOR))\n    # normal equations\n    A = Phi.T.dot(Phi)                 # (15,15)\n    b = Phi.T.dot(logy)                # (15,)\n    # adaptive ridge regularization for numerical stability\n    P_dim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P_dim\n    # penalize all coefficients except intercept\n    A[np.diag_indices(P_dim)] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip inputs to positive, take logs, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1] to avoid extreme extrapolation.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    normed = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    return np.clip(normed, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      Columns:\n        1                         (intercept)\n        x_i                       (4 linear terms)\n        x_i^2                     (4 squared terms)\n        x_i * x_j for i<j         (6 cross\u2010terms)\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = x.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    cross\u2010term coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log\u2010loss space\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # (15,15)\n    b = Phi.T.dot(logy)    # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010log quadratic scaling\u2010law for LLM training hyperparameters.\n\nWe predict LM loss by modeling log(loss) as a second\u2010order polynomial\nin the log\u2010domain of the four inputs [lr, batch_size, data_size, param_size].\nFeatures are clipped, log\u2010transformed, then linearly normalized to [-1,1]\nusing fixed domain bounds to ensure numerical stability and good extrapolation.\nWe build a design matrix with intercept, linear, squared, and pairwise\ninteraction terms (15 total parameters) and solve for the coefficients\nvia closed\u2010form ridge\u2010regularized linear regression in the log\u2010loss domain.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for [lr, batch_size, data_size, param_size]\n_LOG_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Midpoint and half\u2010range for zero\u2010centered normalization to [-1,1]\n_LOG_MID  = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Number of raw features\n_F = 4\n# Precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n# Total number of model parameters: 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n_P = 1 + 2 * _F + len(_TRIU_I)\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, then normalize each feature to [-1,1]:\n      logXn = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_MID) / _LOG_HALF\n    # clip stray numerical overshoot\n    return np.clip(logXn, -1.0, 1.0)\n\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010space:\n      columns = [1,\n                 logXn_i for i in 0..3,\n                 (logXn_i)^2 for i in 0..3,\n                 logXn_i*logXn_j for all i<j]\n    Returns shape (N, 15).\n    \"\"\"\n    N, F = logXn.shape\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i, j in zip(_TRIU_I, _TRIU_J):\n        Phi[:, idx] = logXn[:, i] * logXn[:, j]\n        idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized\u2010log quadratic model.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, param_size]\n      params:      array-like of length 15 (intercept, linear, squared, interaction coefficients)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    # linear predictor in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # back-transform to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients.\n    \"\"\"\n    # prepare features\n    logXn = _normalize_log_features(data_points)  # (N,4)\n    Phi   = _build_design_matrix(logXn)           # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / _P\n    # add penalty on all but intercept\n    I = np.eye(_P, dtype=float)\n    I[0, 0] = 0.0\n    A += ridge * I\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization to [-1,1]\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X>0, take log, then normalize each feature to [-1,1]:\n      logX_norm = (logX - mid) / half.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # clip any numerical drift\n    return np.clip(logX_norm, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in normalized log\u2010space:\n      [1,\n       x_i           (4 cols),\n       x_i^2         (4 cols),\n       x_i * x_j     (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    P = 1 + F + F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logXn[:, i] * logXn[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a learned quadratic model\n    in the normalized-log domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points shape (N,4) and matching loss_values, got {X.shape} and {y.shape}\")\n    # normalize features and build design matrix\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    # transform target to log\u2010domain\n    y_clipped = np.clip(y, 1e-12, None)\n    logy      = np.log(y_clipped)\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge penalty\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n# Precomputed log\u2010domain bounds for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_FEAT_MIN  = np.log(np.array([1.2e-4, 16.0,    4e9,   2.14e8], dtype=float))\n_LOG_FEAT_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Center and half\u2010range for zero\u2010centered normalization to approximately [\u22121,1]\n_LOG_FEAT_CEN  = 0.5 * (_LOG_FEAT_MIN + _LOG_FEAT_MAX)\n_LOG_FEAT_HALF = 0.5 * (_LOG_FEAT_MAX - _LOG_FEAT_MIN)\n\n# Number of raw features\n_F = 4\n# Total parameters: 1 intercept + F linear + F*(F+1)/2 second\u2010order = 1 + 4 + 10 = 15\n_P = 1 + _F + (_F * (_F + 1)) // 2\n# Precompute indices for second\u2010order terms (i \u2264 j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=0)\n\n\ndef _normalize_log(X):\n    \"\"\"\n    Clip X > 0, take log, then zero\u2010center & scale to [-1,1]:\n      x_norm = (log(X) - center) / half_range\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logXn = (logX - _LOG_FEAT_CEN) / _LOG_FEAT_HALF\n    return np.clip(logXn, -1.0, 1.0)\n\n\ndef _build_design(logXn):\n    \"\"\"\n    Build the polynomial design matrix \u03a6 of shape (N,15):\n      Col 0           = 1\n      Cols 1..4       = the 4 normalized log\u2010features\n      Cols 5..14      = all second\u2010order terms logXn_i * logXn_j for i \u2264 j\n    \"\"\"\n    N = logXn.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = logXn\n    # second\u2010order (squares + pairwise interactions)\n    idx = 1 + _F\n    for i, j in zip(_TRIU_I, _TRIU_J):\n        Phi[:, idx] = logXn[:, i] * logXn[:, j]\n        idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a zero\u2010centered log\u2010domain\n    second\u2010order polynomial scaling law.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, batch_size, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    logXn = _normalize_log(data_points)      # (N,4)\n    Phi   = _build_design(logXn)             # (N,15)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected { _P } parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                    # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the zero\u2010centered log\u2010domain second\u2010order polynomial scaling law\n    via closed\u2010form ridge regression in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients (log\u2010loss domain)\n    \"\"\"\n    logXn = _normalize_log(data_points)      # (N,4)\n    Phi   = _build_design(logXn)             # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    logy = np.log(np.clip(y, 1e-12, None))   # (N,)\n\n    # Normal equations with adaptive ridge (no penalty on intercept)\n    A     = Phi.T.dot(Phi)                   # (15,15)\n    b     = Phi.T.dot(logy)                  # (15,)\n    Pdim  = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    A    += ridge * np.eye(Pdim)\n    A[0, 0] -= ridge\n\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # batch size min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # batch size max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n\n# Compute means and half\u2010ranges for centering to roughly [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Clip inputs to positive, take logs, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    clipped to [-1,1] to avoid extreme extrapolation.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    normed = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    return np.clip(normed, -1.0, 1.0)\n\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      Columns:\n        1                         (intercept)\n        x_i                       (4 linear terms)\n        x_i^2                     (4 squared terms)\n        x_i * x_j for i<j         (6 cross\u2010terms)\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = x.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = x\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = x**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = x[:, i] * x[:, j]\n            col += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order polynomial in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [intercept,\n                    linear coeffs (4),\n                    squared coeffs (4),\n                    cross\u2010term coeffs (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log\u2010loss space\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15\n    \"\"\"\n    # prepare features\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)          # (N,15)\n\n    # prepare target\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # (15,15)\n    b = Phi.T.dot(logy)    # (15,)\n\n    # adaptive ridge regularization for stability\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.1774, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling-law model for LLM training:\nWe model log-loss as a parsimonious polynomial in the log-domain:\n  log(loss) = p0\n            + p1*logP\n            + p2*logD\n            + p3*log(lr)\n            + p4*log(bsz)\n            + p5*logP*logD\n            + p6*(log(lr))^2\n            + p7*(log(bsz))^2\n            + p8*log(lr)*log(bsz)\nwhere\n  P   = non_embedding_param_size,\n  D   = data_size,\n  lr  = learning rate,\n  bsz = batch size.\n\nThis 9-parameter linear model in the log-domain balances flexibility\n(capturing cross-effects and saturation in lr/bsz) with parsimony\n(for good generalization and stable fitting).\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from columns [lr, bsz, data_size, non_embedding_param_size].\n    data_points: shape (N,4)\n    params: length-9 array\n    Returns: length-N array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # guard against zeros before logging\n    X = np.maximum(X, 1e-12)\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    N = X.shape[0]\n    # Construct design matrix of shape (N, 9)\n    Phi = np.stack([\n        np.ones(N),           # intercept\n        logP,                 # p1\n        logD,                 # p2\n        logr,                 # p3\n        logb,                 # p4\n        logP * logD,          # p5\n        logr * logr,          # p6\n        logb * logb,          # p7\n        logr * logb           # p8\n    ], axis=1)\n\n    p = np.ravel(params).astype(float)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"scaling_law_func expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 9-parameter log-domain model via ridge regression.\n    Returns: params array of length 9.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # guard against zeros\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    lr   = X[:, 0]\n    bsz  = X[:, 1]\n    D    = X[:, 2]\n    P    = X[:, 3]\n\n    logr = np.log(lr)\n    logb = np.log(bsz)\n    logD = np.log(D)\n    logP = np.log(P)\n\n    N = X.shape[0]\n    # Build design matrix\n    Phi = np.stack([\n        np.ones(N),\n        logP,\n        logD,\n        logr,\n        logb,\n        logP * logD,\n        logr * logr,\n        logb * logb,\n        logr * logb\n    ], axis=1)  # (N,9)\n\n    # Ridge regression (small regularization for stability)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal, except intercept term\n    # A[ii,ii] += ridge for all i>0\n    diag_idx = np.arange(Phi.shape[1])\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0] -= ridge  # undo at intercept\n\n    b = Phi.T.dot(np.log(y))\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.102), Excellent nmae (3.600)\n\n\n### Inspiration 4 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization to [-1,1]\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip X>0, take log, then normalize each feature to [-1,1]:\n      logX_norm = (logX - mid) / half.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # clip any numerical drift\n    return np.clip(logX_norm, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in normalized log\u2010space:\n      [1,\n       x_i           (4 cols),\n       x_i^2         (4 cols),\n       x_i * x_j     (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    P = 1 + F + F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logXn[:, i] * logXn[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a learned quadratic model\n    in the normalized-log domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points shape (N,4) and matching loss_values, got {X.shape} and {y.shape}\")\n    # normalize features and build design matrix\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    # transform target to log\u2010domain\n    y_clipped = np.clip(y, 1e-12, None)\n    logy      = np.log(y_clipped)\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge penalty\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for stable normalization\n_LOG_F_MIN   = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clamp X > 0, take log, then normalize to approximately [-1,1]:\n        logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    return (logX - _LOG_F_MID) / _LOG_F_HALF\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a quadratic design matrix in normalized log-space:\n      [1,\n       linear terms (4),\n       squared terms (4),\n       pairwise products (6)]\n    Total columns = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    N, F = logX_norm.shape\n    # intercept\n    cols = [np.ones((N,), dtype=float)]\n    # linear\n    cols.append(logX_norm)\n    # squared\n    cols.append(logX_norm ** 2)\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            cols.append(logX_norm[:, i] * logX_norm[:, j])\n    # stack into (N,15)\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-log quadratic model.\n    Inputs:\n      data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15 (model coefficients)\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    # build design matrix\n    Phi = _build_design_matrix(logXn)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic model via closed-form weighted ridge regression.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      array of length 15 (fitted coefficients)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # normalize features and target\n    Phi = _build_design_matrix(_normalize_log_features(X))\n    logy = np.log(np.maximum(y, 1e-12))\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    N, P = Phi.shape\n\n    # weighted ridge regularization\n    # base ridge scaled by average diagonal of A\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag\n\n    # per-parameter penalties\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # intercept unpenalized\n    # linear terms (indices 1-4): [lr, bsz, data, param]\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5-8)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9-14): [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply to diagonal of A\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified separable power-law scaling law for LLM training:\nWe model the language-model loss as\n   y_pred = A * lr^{\u03b1_lr} * bsz^{\u03b1_bsz} * data_size^{\u03b1_D} * param_size^{\u03b1_P}\nin log-space:\n   log y \u2248 p0 + \u03b1_lr\u00b7log(lr) + \u03b1_bsz\u00b7log(bsz) + \u03b1_D\u00b7log(data_size) + \u03b1_P\u00b7log(param_size)\nThis yields a linear regression in the log-domain with closed-form ridge solution,\nusing only 5 parameters for stability and generalization.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a separable power-law:\n      y_pred = exp(p0) * lr^\u03b1_lr * bsz^\u03b1_bsz * data_size^\u03b1_D * param_size^\u03b1_P\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, param_size]\n      params:      1D array of length 5 = [p0, \u03b1_lr, \u03b1_bsz, \u03b1_D, \u03b1_P]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.ravel(params).astype(float)\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.size}\")\n\n    p0, \u03b1_lr, \u03b1_bsz, \u03b1_D, \u03b1_P = p\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # compute the separable power-law\n    return np.exp(p0) * (lr ** \u03b1_lr) * (bsz ** \u03b1_bsz) * (D ** \u03b1_D) * (Psize ** \u03b1_P)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter power-law scaling law via ridge regression\n    in the log-loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 5 = [p0, \u03b1_lr, \u03b1_bsz, \u03b1_D, \u03b1_P]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    y = np.maximum(y, 1e-12)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # build design matrix for log-domain linear regression\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_D     = np.log(D)\n    log_Psize = np.log(Psize)\n    N = X.shape[0]\n    # columns: [1, log_lr, log_bsz, log_D, log_Psize]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_Psize\n    ])\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries except the intercept term\n    for i in range(1, Pdim):\n        A[i, i] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized-log quadratic scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a second-order polynomial in the log-domain of four features:\n  [learning_rate, batch_size, data_size, non_embedding_param_size].\n\nFeatures are clipped, log-transformed, normalized to [-1,1] using fixed bounds,\nthen used to build a design matrix containing intercept, linear, squared,\nand pairwise interaction terms (total 15 parameters). Coefficients\nare fitted via closed-form ridge-regularized linear regression in log-loss domain.\n\"\"\"\n\n# log-domain bounds for [lr, bsz, data_size, param_size]\n_LOG_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_MID   = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALF  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n_F = 4\n# total model parameters = 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n_P = 1 + 2*_F + (_F * (_F - 1)) // 2\n# precompute indices for pairwise interactions (i < j)\n_TRIU_I, _TRIU_J = np.triu_indices(_F, k=1)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, then normalize each feature to [-1,1]:\n      Xn = (log(X) - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _F:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    Xn = (logX - _LOG_MID) / _LOG_HALF\n    return np.clip(Xn, -1.0, 1.0)\n\ndef _build_design_matrix(Xn):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-space:\n      [1,\n       x_i for i in [0..3],\n       x_i^2 for i in [0..3],\n       x_i * x_j for all i<j]\n    Returns shape (N, 15).\n    \"\"\"\n    N = Xn.shape[0]\n    Phi = np.empty((N, _P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+_F] = Xn\n    # squared terms\n    Phi[:, 1+_F:1+2*_F] = Xn**2\n    # pairwise interactions\n    idx = 1 + 2*_F\n    for i, j in zip(_TRIU_I, _TRIU_J):\n        Phi[:, idx] = Xn[:, i] * Xn[:, j]\n        idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the normalized-log quadratic model.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = [lr, bsz, data_size, param_size]\n      params:      array-like of length 15 [intercept, linear (4), squared (4), interactions (6)]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    Xn  = _normalize_log_features(data_points)   # (N,4)\n    Phi = _build_design_matrix(Xn)               # (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != _P:\n        raise ValueError(f\"Expected {_P} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                        # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients.\n    \"\"\"\n    Xn  = _normalize_log_features(data_points)   # (N,4)\n    Phi = _build_design_matrix(Xn)               # (N,15)\n    y   = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    y    = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / _P\n    # add penalty on all but intercept\n    diag_idx = np.arange(_P)\n    A[diag_idx, diag_idx] += ridge\n    A[0, 0]          -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}