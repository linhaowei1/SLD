{"id": "759fc85d-2d4a-47b2-921b-f0ce93c27713", "code": "import numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN   = np.log(np.array([1.2e-4,   16.0,     4e9,     2.14e8 ], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2,  4096.0,   1e11,    1e9    ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix Phi for a second\u2010order polynomial\n    in normalized log\u2010features.\n    Columns = [1,\n               logX_norm_i for i in 0..3,\n               (logX_norm_i)^2 for i in 0..3,\n               logX_norm_i * logX_norm_j for all i<j].\n    Total features = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                              # shape (N,4)\n    # normalize each log\u2010feature into [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    N, F = logX_norm.shape\n\n    # build Phi\n    # intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embedding_param_size]\n      params:      vector of length 15\n                   [p0,\n                    p_lr, p_bsz, p_D, p_P,\n                    p_lr^2, p_bsz^2, p_D^2, p_P^2,\n                    p_lr*bsz, p_lr*D, p_lr*P,\n                    p_bsz*D, p_bsz*P, p_D*P]\n    Returns:\n      preds: array (N,) of predicted losses\n    \"\"\"\n    # build design matrix\n    Phi = _build_design_matrix(data_points)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log\u2010loss domain\n    logy_pred = Phi.dot(p)                # shape (N,)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes match\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    y = np.maximum(y, 1e-12)\n\n    # build design matrix\n    Phi = _build_design_matrix(X)\n    logy = np.log(y)\n\n    # closed\u2010form ridge regression\n    ridge = 1e-5\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge on all but the intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge   # keep intercept unpenalized\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "9c593cd8-ed0b-4311-af46-5f70f77809b4", "generation": 3, "timestamp": 1754806063.5121052, "iteration_found": 61, "metrics": {"nmse": 0.43745516208030055, "nmae": 0.6955408396206373, "r2": 0.5625448379196994, "combined_score": 0.6956738730916582}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.772227422596041, "nmae": 1.6562210455328756, "r2": -0.772227422596041, "combined_score": 0.36072076621461097}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7722\n- nmae: 1.6562\n- r2: -0.7722\n- combined_score: 0.3607\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4372, nmae: 0.6954, r2: 0.5628, combined_score: 0.6958\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5978)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010domain mins/maxs (same as before) for stable normalization\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,  4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      [1,\n       logX_norm (4 cols),\n       (logX_norm)**2 (4 cols),\n       pairwise products for i<j (6 cols)]\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    cols.append(logX_norm)\n    cols.append(logX_norm**2)\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010order polynomial.\n    Inputs:\n      data_points: (N,4) \u21d2 [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients\n    Returns:\n      preds:       (N,) array of loss predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 2nd\u2010order normalized\u2010log polynomial via weighted ridge regression.\n    Inputs:\n      data_points: (N,4)\n      loss_values: (N,)\n    Returns:\n      params:      length\u201015 coefficient array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX  = np.log(X)\n    logy  = np.log(y)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi    = _build_design_matrix(logX_norm)\n    N, P   = Phi.shape\n\n    # normal\u2010equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # base ridge scaled to average diagonal\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag   # lighter global regularization\n\n    # per\u2010feature penalties (length P = 15)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # no penalty on intercept\n    # linear terms (indices 1\u20134)\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5\u20138)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9\u201314): \n    #   [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply weighted ridge on diagonal\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4372), Performs well on nmae (0.6954), Performs well on r2 (0.5628), Performs well on combined_score (0.6958)\n\n\n### Program 2 (Score: 0.5978)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand ridge\u2010regularized closed\u2010form fitting for numerical stability and generalization.\nWe normalize each log\u2010feature to [0,1] based on known domain ranges,\nthen fit a polynomial with linear, squared, and pairwise terms.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8 ], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2,  4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix Phi for a second\u2010order polynomial in normalized log\u2010features.\n    Columns: [1, logX_norm_i, (logX_norm_i)^2, logX_norm_i * logX_norm_j (i<j)].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) or negatives\n    X = np.maximum(X, 1e-12)\n    # log\u2010transform\n    logX = np.log(X)                        # shape (N,4)\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    N, F = logX_norm.shape\n\n    # number of basis functions:\n    #   1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds: array (N,) of predicted lm loss\n    \"\"\"\n    # build design matrix\n    Phi = _build_design_matrix(data_points)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters but got {p.size}\")\n\n    # linear model in log\u2010loss domain\n    logy_pred = Phi.dot(p)                # shape (N,)\n    return np.exp(logy_pred)              # back to loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # build design matrix\n    Phi = _build_design_matrix(X)\n\n    # ridge regularization\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # keep intercept unpenalized\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 3 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log-domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix with:\n      - intercept\n      - linear terms\n      - squared terms\n      - pairwise interactions\n    for F features in logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 for bias, F linear, F squared, F*(F-1)/2 interactions\n    P = 1 + 2 * F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic\n    polynomial in the log-domain.\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients)\n\n    Returns:\n      preds:       numpy array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix and predict in log-loss domain\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed-form\n    ridge-regularized linear regression in log-loss domain.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 (learned coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    # ridge regularization for numerical stability\n    ridge = 1e-6\n    Pdim = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge on all diagonal except intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling-law model for LLM training:\nWe work in the log\u2013domain and fit a quadratic polynomial\n(including main effects, squared terms, and pairwise interactions)\nvia closed\u2010form ridge regression for numerical stability.\nThis richer basis can capture saturation and curvature effects\nwhile remaining linear in the parameters.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a log-domain quadratic polynomial:\n      log_loss \u2248 p0\n               + sum_i p_i * xi\n               + sum_i p_{ii} * xi^2\n               + sum_{i<j} p_{ij} * xi * xj\n    where xi = log(feature_i).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N, 4)\n    N, F = logX.shape\n\n    p = np.ravel(params).astype(float)\n    # total params = 1 + F main + F squared + F*(F-1)/2 interactions\n    P_exp = 1 + F + F + (F*(F-1))//2\n    if p.size != P_exp:\n        raise ValueError(f\"Expected {P_exp} params, got {p.size}\")\n\n    # build design matrix\n    Phi = np.ones((N, P_exp), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared effects\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log-domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the quadratic log-domain scaling law via ridge regression.\n    Returns parameter vector of length P = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n    N, F = logX.shape\n\n    # construct design matrix\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    Phi[:, 1+F:1+2*F] = logX**2\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (small to avoid overfitting higher\u2010order terms)\n    # no penalty on intercept\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag, except intercept term\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef _build_design_matrix(X, include_sq=True):\n    \"\"\"\n    Build a design matrix Phi for log-domain polynomial regression.\n    Features:\n      - intercept\n      - log(X_i) for each feature i\n      - [optionally] (log(X_i))^2 for each feature i\n      - log(X_i) * log(X_j) for all i<j pairwise interactions\n\n    Inputs:\n      X: array of shape (N, F)\n      include_sq: whether to include squared-log features\n\n    Returns:\n      Phi: array of shape (N, P)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    N, F = logX.shape\n\n    # count parameters\n    P = 1 + F + (F*(F-1)//2)\n    if include_sq:\n        P += F\n\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # main effects: log(X_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # optional squared terms: (log X_i)^2\n    if include_sq:\n        Phi[:, idx:idx+F] = logX**2\n        idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a log-domain polynomial.\n\n    data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + (opt 4) + 6 = either 11 (no squares) or 15 (with squares)\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n\n    # infer whether squared terms were used by matching param count\n    F = X.shape[1]\n    base_P = 1 + F + (F*(F-1)//2)\n    sq_P   = base_P + F\n\n    if p.size == sq_P:\n        include_sq = True\n    elif p.size == base_P:\n        include_sq = False\n    else:\n        raise ValueError(f\"params length must be {base_P} or {sq_P}, got {p.size}\")\n\n    Phi = _build_design_matrix(X, include_sq=include_sq)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters (length 15, including squared terms)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if y.ndim == 0:\n        y = np.array([y])\n\n    # floor y to avoid log(0)\n    y = np.maximum(y, 1e-12)\n\n    # build design matrix with squared-log features for extra flexibility\n    Phi = _build_design_matrix(X, include_sq=True)\n\n    # log-transform target\n    logy = np.log(y)\n\n    # ridge regression in closed form\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge penalty to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge   # no penalty on intercept\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# EVOLVE-BLOCK-START\n\n# Fixed log\u2010domain mins/maxs (same as before) for stable normalization\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,  4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features:\n      [1,\n       logX_norm (4 cols),\n       (logX_norm)**2 (4 cols),\n       pairwise products for i<j (6 cols)]\n    Total = 1 + 4 + 4 + 6 = 15 columns.\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    cols.append(logX_norm)\n    cols.append(logX_norm**2)\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    return np.column_stack(cols)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010order polynomial.\n    Inputs:\n      data_points: (N,4) \u21d2 [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u201015 array of coefficients\n    Returns:\n      preds:       (N,) array of loss predictions\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 2nd\u2010order normalized\u2010log polynomial via weighted ridge regression.\n    Inputs:\n      data_points: (N,4)\n      loss_values: (N,)\n    Returns:\n      params:      length\u201015 coefficient array\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX  = np.log(X)\n    logy  = np.log(y)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi    = _build_design_matrix(logX_norm)\n    N, P   = Phi.shape\n\n    # normal\u2010equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # base ridge scaled to average diagonal\n    avg_diag   = np.trace(A) / P\n    base_ridge = 1e-4 * avg_diag   # lighter global regularization\n\n    # per\u2010feature penalties (length P = 15)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0                   # no penalty on intercept\n    # linear terms (indices 1\u20134)\n    penalty[1:5] = [0.05, 0.05, 0.02, 0.02]\n    # squared terms (5\u20138)\n    penalty[5:9] = [1.0, 1.0, 0.5, 0.5]\n    # cross terms (9\u201314): \n    #   [lr*bsz, lr*data, lr*param, bsz*data, bsz*param, data*param]\n    penalty[9:15] = [1.0, 1.0, 1.0, 1.0, 1.0, 0.1]\n\n    # apply weighted ridge on diagonal\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 1.2432, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nCompact, parameter\u2010efficient log\u2010domain scaling law with targeted interactions:\nWe model log(loss) as a linear function of:\n  - main effects: log(lr), log(bsz), log(data_size), log(param_size)\n  - two key pairwise interactions: log(lr)*log(bsz) and log(data_size)*log(param_size)\nThis 7-parameter model balances expressivity and stability, and is fitted via\nclosed-form ridge regression in the log-loss domain.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 7-parameter log-linear model with two interactions.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of length 7\n                   [p0, p_lr, p_bsz, p_D, p_P, p_lr_bsz, p_D_P]\n    Returns:\n      y_pred:      array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # build design matrix with main effects + two interactions\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),   # intercept\n        log_lr,                    # main effect lr\n        log_bsz,                   # main effect bsz\n        log_D,                     # main effect data_size\n        log_P,                     # main effect param_size\n        log_lr  * log_bsz,         # interaction lr*bsz\n        log_D   * log_P           # interaction data_size*param_size\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # predict in log-domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure matching sizes and 2D input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n    y     = np.maximum(y, 1e-12)\n\n    # log transforms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    logy    = np.log(y)\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N, dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_lr  * log_bsz,\n        log_D   * log_P\n    ])\n\n    # closed-form ridge regression (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # penalize only the non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (9.394), Excellent nmae (3.877)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand ridge\u2010regularized closed\u2010form fitting for numerical stability and generalization.\nWe normalize each log\u2010feature to [0,1] based on known domain ranges,\nthen fit a polynomial with linear, squared, and pairwise terms.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4,   16.0,   4e9,    2.14e8 ], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2,  4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix Phi for a second\u2010order polynomial in normalized log\u2010features.\n    Columns: [1, logX_norm_i, (logX_norm_i)^2, logX_norm_i * logX_norm_j (i<j)].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) or negatives\n    X = np.maximum(X, 1e-12)\n    # log\u2010transform\n    logX = np.log(X)                        # shape (N,4)\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    N, F = logX_norm.shape\n\n    # number of basis functions:\n    #   1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embed_param_size]\n      params:      vector of length P = 1 + 2*4 + (4*3)//2 = 15\n    Returns:\n      preds: array (N,) of predicted lm loss\n    \"\"\"\n    # build design matrix\n    Phi = _build_design_matrix(data_points)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters but got {p.size}\")\n\n    # linear model in log\u2010loss domain\n    logy_pred = Phi.dot(p)                # shape (N,)\n    return np.exp(logy_pred)              # back to loss scale\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform target\n    logy = np.log(y)\n\n    # build design matrix\n    Phi = _build_design_matrix(X)\n\n    # ridge regularization\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # add ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # keep intercept unpenalized\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef _build_design_matrix(X, include_sq=True):\n    \"\"\"\n    Build a design matrix Phi for log-domain polynomial regression.\n    Features:\n      - intercept\n      - log(X_i) for each feature i\n      - [optionally] (log(X_i))^2 for each feature i\n      - log(X_i) * log(X_j) for all i<j pairwise interactions\n\n    Inputs:\n      X: array of shape (N, F)\n      include_sq: whether to include squared-log features\n\n    Returns:\n      Phi: array of shape (N, P)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    N, F = logX.shape\n\n    # count parameters\n    P = 1 + F + (F*(F-1)//2)\n    if include_sq:\n        P += F\n\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n\n    # main effects: log(X_i)\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # optional squared terms: (log X_i)^2\n    if include_sq:\n        Phi[:, idx:idx+F] = logX**2\n        idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a log-domain polynomial.\n\n    data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + (opt 4) + 6 = either 11 (no squares) or 15 (with squares)\n\n    Returns:\n      y_pred: array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n\n    # infer whether squared terms were used by matching param count\n    F = X.shape[1]\n    base_P = 1 + F + (F*(F-1)//2)\n    sq_P   = base_P + F\n\n    if p.size == sq_P:\n        include_sq = True\n    elif p.size == base_P:\n        include_sq = False\n    else:\n        raise ValueError(f\"params length must be {base_P} or {sq_P}, got {p.size}\")\n\n    Phi = _build_design_matrix(X, include_sq=include_sq)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters (length 15, including squared terms)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[None, :]\n    if y.ndim == 0:\n        y = np.array([y])\n\n    # floor y to avoid log(0)\n    y = np.maximum(y, 1e-12)\n\n    # build design matrix with squared-log features for extra flexibility\n    Phi = _build_design_matrix(X, include_sq=True)\n\n    # log-transform target\n    logy = np.log(y)\n\n    # ridge regression in closed form\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge penalty to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0]   -= ridge   # no penalty on intercept\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling-law model for LLM training:\nWe work in the log\u2013domain and fit a quadratic polynomial\n(including main effects, squared terms, and pairwise interactions)\nvia closed\u2010form ridge regression for numerical stability.\nThis richer basis can capture saturation and curvature effects\nwhile remaining linear in the parameters.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a log-domain quadratic polynomial:\n      log_loss \u2248 p0\n               + sum_i p_i * xi\n               + sum_i p_{ii} * xi^2\n               + sum_{i<j} p_{ij} * xi * xj\n    where xi = log(feature_i).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N, 4)\n    N, F = logX.shape\n\n    p = np.ravel(params).astype(float)\n    # total params = 1 + F main + F squared + F*(F-1)/2 interactions\n    P_exp = 1 + F + F + (F*(F-1))//2\n    if p.size != P_exp:\n        raise ValueError(f\"Expected {P_exp} params, got {p.size}\")\n\n    # build design matrix\n    Phi = np.ones((N, P_exp), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared effects\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log-domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the quadratic log-domain scaling law via ridge regression.\n    Returns parameter vector of length P = 1 + 4 + 4 + 6 = 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n    N, F = logX.shape\n\n    # construct design matrix\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    Phi[:, 1+F:1+2*F] = logX**2\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (small to avoid overfitting higher\u2010order terms)\n    # no penalty on intercept\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diag, except intercept term\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Mixed iteration strategies\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model the LM loss as an asymptotic floor plus a joint power\u2010law in\nmodel size (P), data size (D), batch size (bsz), and learning rate (lr):\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\nParameters are internally reparameterized as:\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\nfor numerical stability. Fitting is done via L-BFGS-B on the original loss MSE.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via an asymptotic\n    power\u2010law model.\n\n    data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, alpha_P, alpha_D, alpha_b, alpha_l, log_yinf = p\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # exponentiate the intercept and floor\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term and add asymptotic floor\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_b) * (lr ** alpha_l)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter asymptotic power\u2010law scaling law by minimizing MSE.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[0] != y.size or X.shape[1] != 4:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes.\")\n\n    # clamp losses to positive range\n    y = np.maximum(y, 1e-12)\n\n    # initial guess\n    min_y = np.min(y)\n    init_logA     = 0.0\n    init_alpha_P  = -0.2   # more params \u2192 lower loss\n    init_alpha_D  = -0.1   # more data \u2192 lower loss\n    init_alpha_b  = -0.05  # larger batch \u2192 slightly lower loss\n    init_alpha_l  = -0.1   # higher lr (in range) \u2192 lower loss\n    init_log_yinf = np.log(min_y * 0.1 + 1e-8)\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_b,\n        init_alpha_l,\n        init_log_yinf\n    ], dtype=float)\n\n    # objective: mean squared error on original loss\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # bounds to keep exponents in a reasonable range and floor \u2265 0\n    bnds = [\n        (None, None),          # logA\n        (-5.0, 5.0),           # \u03b1_P\n        (-5.0, 5.0),           # \u03b1_D\n        (-5.0, 5.0),           # \u03b1_b\n        (-5.0, 5.0),           # \u03b1_l\n        (np.log(1e-12), np.log(min_y))  # log_y_inf\n    ]\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'ftol':1e-12, 'maxiter':1000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN   = np.log(np.array([1.2e-4,   16.0,     4e9,     2.14e8 ], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2,  4096.0,   1e11,    1e9    ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the design matrix Phi for a second\u2010order polynomial\n    in normalized log\u2010features.\n    Columns = [1,\n               logX_norm_i for i in 0..3,\n               (logX_norm_i)^2 for i in 0..3,\n               logX_norm_i * logX_norm_j for all i<j].\n    Total features = 1 + 4 + 4 + 6 = 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                              # shape (N,4)\n    # normalize each log\u2010feature into [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    N, F = logX_norm.shape\n\n    # build Phi\n    # intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array (N,4) of [lr, bsz, data_size, non_embedding_param_size]\n      params:      vector of length 15\n                   [p0,\n                    p_lr, p_bsz, p_D, p_P,\n                    p_lr^2, p_bsz^2, p_D^2, p_P^2,\n                    p_lr*bsz, p_lr*D, p_lr*P,\n                    p_bsz*D, p_bsz*P, p_D*P]\n    Returns:\n      preds: array (N,) of predicted losses\n    \"\"\"\n    # build design matrix\n    Phi = _build_design_matrix(data_points)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear model in log\u2010loss domain\n    logy_pred = Phi.dot(p)                # shape (N,)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via\n    closed\u2010form ridge\u2010regularized least squares.\n    Inputs:\n      data_points: array (N,4)\n      loss_values: array (N,)\n    Returns:\n      params:      vector of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes match\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # floor inputs to avoid log(0)\n    y = np.maximum(y, 1e-12)\n\n    # build design matrix\n    Phi = _build_design_matrix(X)\n    logy = np.log(y)\n\n    # closed\u2010form ridge regression\n    ridge = 1e-5\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge on all but the intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge   # keep intercept unpenalized\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}