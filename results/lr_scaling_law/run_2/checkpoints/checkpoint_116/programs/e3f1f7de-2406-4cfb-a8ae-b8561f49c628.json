{"id": "e3f1f7de-2406-4cfb-a8ae-b8561f49c628", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010log quadratic scaling\u2010law for LLM training hyperparameters.\n\nWe model the LM loss via:\n    log_loss \u2248 \u03a6 \u00b7 w\nwhere \u03a6 is a second\u2010order polynomial basis in normalized log\u2010features:\n    [1,\n     x\u0302_i           (4 terms),\n     x\u0302_i^2         (4 terms),\n     x\u0302_i * x\u0302_j    (6 terms for all i<j)\n    ]\nwith x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min), clipped to [0,1].\nWe fit w by closed\u2010form ridge regression in the log\u2010loss domain for stability\nand cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature (order: lr, bsz, data_size, param_size)\n_LOG_MINS   = np.log(np.array([1.2e-4,   16.0,    4e9,      2.14e8], dtype=float))\n_LOG_MAXS   = np.log(np.array([2.2e-2,  4096.0, 1e11,     1e9    ], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns (total 15):\n      [1,\n       logX_norm_i      (4),\n       (logX_norm_i)^2  (4),\n       logX_norm_i * logX_norm_j for all i<j  (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (weights in the log\u2010loss domain)\n\n    Returns:\n      np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    w   = np.asarray(params, dtype=float).ravel()\n    if w.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.size}\")\n\n    log_pred = Phi.dot(w)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      np.ndarray of length 15 of learned weights in the log\u2010loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    # adaptive ridge = 1e\u20106 * (trace(A)/P)\n    ridge = 1e-6 * np.trace(A) / P\n    # apply to all but intercept\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for weights\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "72f35620-b737-45d5-a3a8-3c4e1bb2b0dc", "generation": 6, "timestamp": 1754806445.7288666, "iteration_found": 107, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.41361164147743323, "nmae": 0.6827305266623002, "r2": 0.5863883585225668, "combined_score": 0.7074078697844141}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4136\n- nmae: 0.6827\n- r2: 0.5864\n- combined_score: 0.7074\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN   = np.log(np.array([1.2e-4,  16.0,    4e9,     2.14e8], dtype=float))\n_LOG_F_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,    1e9   ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for:\n      1 (intercept)\n      + F linear terms\n      + F squared terms\n      + F*(F-1)/2 pairwise interactions\n    where F = number of features (here F=4).\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters\n    via a normalized quadratic model in the log\u2010space.\n\n    Args:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:      array of length P = 1 + 2*4 + 4*3/2 = 15\n\n    Returns:\n      preds: array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize each log\u2010feature into [0,1]\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and evaluate\n    Phi = _build_design_matrix(logX_norm)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # allow single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) inputs, got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    logX = np.log(X)\n    # normalize as above\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    logy = np.log(y)\n\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # adaptive ridge = (1e\u20106)*(trace(A)/P) for scale\u2010free regularization\n    Pdim = Phi.shape[1]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    idx = np.diag_indices(Pdim)\n    A[idx] += ridge\n    # no regularization on intercept\n    A[0, 0] -= ridge\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved quadratic scaling law for LLM training hyperparameters.\n\nWe approximate the final LM loss as:\n    y \u2248 exp(\u03a6\u00b7w)\nwhere \u03a6 is a second\u2010order polynomial basis in the normalized log\u2010features:\n    [1,\n     x\u0302_i           (4 terms),\n     x\u0302_i^2         (4 terms),\n     x\u0302_i * x\u0302_j    (6 terms for all i<j)\n    ]\nwith x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min), clipped to [0,1].\nWe fit w via closed\u2010form ridge\u2010regularized least squares in the log\u2010loss domain\nfor numerical stability, efficiency, and strong cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature (in order):\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9    ], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS   # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns:\n      [1,\n       logX_norm_i      (4),\n       (logX_norm_i)^2  (4),\n       logX_norm_i * logX_norm_j for all i<j  (6)\n      ]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F + F + F*(F-1)/2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm ** 2\n    col += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4), columns = \n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (model weights in log\u2010loss domain)\n\n    Returns:\n      preds:       np.ndarray of shape (N,) of predicted LM loss.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log\u2010transform\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    # clip slight out\u2010of\u2010range numerical issues\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    w   = np.asarray(params, dtype=float).ravel()\n    if w.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.size}\")\n\n    log_y_pred = Phi.dot(w)  # shape (N,)\n    return np.exp(log_y_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params:      np.ndarray of length 15 of learned weights in log\u2010loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize log\u2010features\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # normal equations for ridge regression\n    A = Phi.T.dot(Phi)                      # (15,15)\n    b = Phi.T.dot(logy)                     # (15,)\n\n    # adaptive ridge strength ~ trace(A)/P\n    ridge = 1e-6 * (np.trace(A) / P)\n    # penalize all but intercept\n    ridge_mat = np.eye(P, dtype=A.dtype) * ridge\n    ridge_mat[0, 0] = 0.0\n    A += ridge_mat\n\n    # solve for weights\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_MINS = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the quadratic design matrix \u03a6 from normalized log\u2010features.\n    Columns:\n      [1, linear terms (4), squared terms (4), cross terms (6)] = 15 total.\n    \"\"\"\n    N, F = logX_norm.shape  # F must be 4\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interaction terms\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a normalized\u2010log 2nd\u2010order polynomial model.\n\n    Args:\n      data_points: array of shape (N,4) columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got shape {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize each feature to [0,1]\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build polynomial features\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    w = np.asarray(params, dtype=float).ravel()\n    if w.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.size}\")\n\n    # predict in log\u2010loss domain and exponentiate\n    log_pred = Phi.dot(w)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic model via closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # allow single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and match loss_values length.\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # normal equations\n    A = Phi.T @ Phi\n    b = Phi.T @ logy\n\n    # adaptive ridge strength\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    A += np.eye(P) * ridge\n    A[0, 0] -= ridge\n\n    # solve for coefficients\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters:\nWe predict LM loss by fitting log(loss) as a normalized quadratic polynomial\nin the log\u2010domain of each feature (learning rate, batch size, data size,\nnon\u2010embedding parameter size).  We normalize each log\u2010feature to [0,1]\nbased on known domain ranges for numerical stability, build a design matrix\nwith intercept, linear, squared, and pairwise interaction terms, and solve\nthe normal equations with adaptive ridge regularization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain.  Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip to [0,1] to guard against slight out\u2010of\u2010range values\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    # transform target to log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n    # adaptive ridge: scale by trace(A)/P for balanced regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe predict LM loss by fitting log(loss) as a second\u2010order polynomial\nin the log\u2010domain of each feature (learning rate, batch size, data size,\nnon\u2010embedding parameter size).  Each log\u2010feature is normalized to [0,1]\nbased on known domain ranges for numerical stability.  The design matrix\nincludes intercept, linear, squared, and pairwise interaction terms.\nWe fit via closed\u2010form adaptive\u2010ridge regression in the log\u2010loss domain.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain.  Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip to [0,1] to guard against slight out\u2010of\u2010range values\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    # transform target to log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n    # adaptive ridge: scale by trace(A)/P for balanced regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters:\nWe predict LM loss by fitting log(loss) as a normalized quadratic polynomial\nin the log\u2010domain of each feature (learning rate, batch size, data size,\nnon\u2010embedding parameter size).  We normalize each log\u2010feature to [0,1]\nbased on known domain ranges for numerical stability, build a design matrix\nwith intercept, linear, squared, and pairwise interaction terms, and solve\nthe normal equations with adaptive ridge regularization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain.  Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total params: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip to [0,1] to guard against slight out\u2010of\u2010range values\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)                       # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of length 15 of learned coefficients in log\u2010loss domain\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)       # shape (N,15)\n    # transform target to log\u2010domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                          # shape (15,15)\n    b = Phi.T.dot(logy)                         # shape (15,)\n    # adaptive ridge: scale by trace(A)/P for balanced regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # add ridge to diagonal except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 2.6536, Type: High-Performer)\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved LLM hyperparameter scaling-law model.\n\nWe fit a second\u2010order polynomial in the log\u2010domain of the four inputs:\n[lr, bsz, data_size, non_embedding_param_size].  To boost numerical\nstability and generalization we:\n\n 1. Log-transform and clip inputs to avoid non-positive values.\n 2. Build a design matrix with intercept, first-order, and second-order\n    (squared + pairwise) terms via combinations_with_replacement.\n 3. Center the design matrix (zero-mean columns) so that intercept is\n    unpenalized in ridge regression.\n 4. Solve the closed-form ridge regression with a small Tikhonov term.\n 5. Recover the true intercept after centering.\n\nThis yields a compact 15-parameter model fit in one shot.\n\"\"\"\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build the Vandermonde\u2010style design matrix for log-features.\n\n    Inputs:\n      logX: (N, F) array of log-transformed features\n    Returns:\n      Phi: (N, P) design matrix with columns:\n           [1,\n            logX[:,0],...,logX[:,F-1],\n            logX[:,0]**2, logX[:,0]*logX[:,1], ..., logX[:,F-1]**2]\n    \"\"\"\n    N, F = logX.shape\n    # Start with intercept\n    cols = [np.ones(N, dtype=float)]\n    # First-order terms\n    for i in range(F):\n        cols.append(logX[:, i])\n    # Second-order and cross terms\n    for i, j in combinations_with_replacement(range(F), 2):\n        cols.append(logX[:, i] * logX[:, j])\n    # Stack into (N, P)\n    Phi = np.stack(cols, axis=1)\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (intercept + 4 first-order +\n                   10 second-order terms)\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zeros/negatives\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # Linear predictor in log-loss space\n    log_pred = Phi.dot(p)\n    # Convert back\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd-order log-domain polynomial via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # Clip to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # Log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n    N, P = Phi.shape\n\n    # Center each column of Phi so intercept is unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_centered = Phi - col_mean\n\n    # Ridge term (Tikhonov)\n    ridge = 1e-6\n    # Solve (Phi_c\u1d40 Phi_c + ridge I) w = Phi_c\u1d40 logy\n    A = Phi_centered.T.dot(Phi_centered) + ridge * np.eye(P)\n    b = Phi_centered.T.dot(logy)\n    w_centered = np.linalg.solve(A, b)\n\n    # Recover true intercept: p0 + sum_j (-mean_j * w_j) = true intercept\n    intercept = w_centered[0] - np.dot(col_mean, w_centered)\n    params = w_centered.copy()\n    params[0] = intercept\n\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (57.417), Excellent nmae (9.597)\n\n\n### Inspiration 3 (Score: 0.5972, Type: Experimental)\n```python\nimport numpy as np\n\n# We work in log\u2010domain of each feature, then center to zero mean and scale to unit half\u2010range,\n# so logX_norm \u2248 in [\u22121,1].  This reduces multicollinearity and yields numerically stable polynomials.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9, 2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9], dtype=float))\n\n# Compute midpoints and half\u2010ranges in log\u2010domain\n_LOG_F_MID   = (_LOG_F_MIN + _LOG_F_MAX) * 0.5\n_LOG_F_HALF  = (_LOG_F_MAX - _LOG_F_MIN) * 0.5\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a 2nd\u2010order polynomial in the F=4 normalized log\u2010features:\n      - intercept\n      - F linear terms\n      - F squared terms\n      - F*(F-1)/2 pairwise products\n    Returns Phi of shape (N, 1 + F + F + F*(F-1)//2).\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    col = 0\n\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a zero\u2010centered, scaled,\n    2nd\u2010order polynomial in log\u2010domain.\n    \n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + 4 + 4 + 6 = 15\n    Returns:\n      preds:       array of shape (N,) of predicted losses\n    \"\"\"\n    X = np.array(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # (N,4)\n\n    # normalize to zero mean, half\u2010range = 1\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.shape[0]}\")\n\n    # linear model in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above polynomial scaling law via ridge\u2010regularized normal equations.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.array(data_points, dtype=float)\n    y = np.array(loss_values, dtype=float)\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    # normalize features\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n\n    # build design\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # adaptive ridge: scale by average diag magnitude\n    avg_diag = np.trace(A) / P\n    ridge = 1e-3 * avg_diag\n\n    # apply ridge to all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0,0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a normalized quadratic polynomial in the log of each feature,\nincluding squared terms and all pairwise interactions.  Normalizing each log\u2010feature\nto [0,1] based on known global ranges improves numerical stability and extrapolation.\nWe fit via closed\u2010form ridge\u2010regularized linear regression in the log\u2010loss domain\nfor efficiency, robustness, and cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for [lr, bsz, data_size, non_embedding_param_size]\n_LOG_F_MINS   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS   = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 with columns:\n      [1,\n       logX_norm_i for each feature,\n       (logX_norm_i)^2 for each feature,\n       logX_norm_i * logX_norm_j for all i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.zeros((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized quadratic model in log\u2010space.\n    Inputs:\n      data_points: array of shape (N,4) [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length P = 1 + 2*4 + 6 = 15\n    Returns:\n      preds:       array of shape (N,) of predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per point, got shape {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize to [0,1]\n    logX     = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # build feature matrix and predict\n    Phi = _build_design_matrix(logX_norm)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params but got {p.size}\")\n    logy_pred = Phi.dot(p)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized quadratic scaling law via ridge\u2010regularized\n    closed\u2010form linear regression in the log\u2010loss domain.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      array of length 15 of learned coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor inputs and targets to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log\u2010transform features and target\n    logX      = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logy      = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept\n    diag = np.eye(A.shape[0], dtype=A.dtype)\n    diag[0, 0] = 0.0\n    A += ridge * diag\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010domain quadratic scaling law for LLM training:\nWe model log(loss) as a quadratic polynomial in the log\u2013features\n[lr, bsz, data_size, non_embedding_param_size], including\nmain effects, squared terms, and pairwise interactions.\nFitting is done via closed\u2010form ridge regression for robustness.\n\nAdvantages:\n- Captures curvature and saturation across hyperparameter scales.\n- Linear in parameters \u21d2 efficient closed\u2010form solution.\n- Numerically stable via log\u2010transform and small ridge regularization.\n- Parameter\u2010efficient: 15 parameters total.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a log-domain quadratic polynomial:\n      log_loss = p0\n               + sum_i p_i * xi\n               + sum_i p_{ii} * xi^2\n               + sum_{i<j} p_{ij} * xi * xj\n    where xi = log(feature_i).\n    Returns exp(log_loss).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N, 4)\n    N, F = logX.shape\n\n    # total parameters: 1 intercept + F mains + F squares + F*(F-1)/2 interactions\n    P_tot = 1 + F + F + (F*(F-1))//2\n    p = np.ravel(params).astype(float)\n    if p.size != P_tot:\n        raise ValueError(f\"Expected {P_tot} params, got {p.size}\")\n\n    # build design matrix\n    Phi = np.ones((N, P_tot), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # squared effects\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log-domain\n    log_pred = Phi.dot(p)\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the quadratic log-domain scaling law via ridge regression.\n    Returns parameter vector of length 15 (for 4 features).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X)  # (N,4)\n    logy = np.log(y)  # (N,)\n    N, F = logX.shape\n\n    # construct design matrix Phi\n    P_tot = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P_tot), dtype=float)\n    Phi[:, 1:1+F] = logX\n    Phi[:, 1+F:1+2*F] = logX**2\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization (small) for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge on all but intercept\n    diag_idx = np.diag_indices(P_tot)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no regularization on intercept\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# We work in the log\u2010domain of each feature and normalize to roughly [\u22121,1]\n# using fixed, precomputed minima and maxima to ensure stability.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the normalized log\u2010features.\n    Columns: [1,\n              logX_norm[:,0..F-1],\n              logX_norm[:,0..F-1]**2,\n              pairwise products logX_norm[:,i]*logX_norm[:,j] for i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    # linear terms\n    cols.append(logX_norm)\n    # squared terms\n    cols.append(logX_norm**2)\n    # cross\u2010interaction terms\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    Phi = np.column_stack(cols)  # (N, P)\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    normalized\u2010log\u2010domain 2nd\u2010order polynomial.\n\n    Inputs:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + 4 + 4 + 6 = 15\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # guard against non-positive or zero\n    X = np.maximum(X, 1e-12)\n    # log\u2010transform and normalize\n    logX = np.log(X)                               # (N,4)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF   # (N,4)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)           # (N,15)\n\n    # parameters\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    # linear predictor in log\u2010loss domain\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order normalized\u2010log polynomial via weighted\u2010ridge regression,\n    with extra emphasis on large\u2010scale (data_size, param_size) points to\n    improve generalization on the test set.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # guard against zero/negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    # normalize features to roughly [-1,1]\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF  # (N,4)\n    Phi = _build_design_matrix(logX_norm)          # (N,15)\n    N, P = Phi.shape\n\n    # Weighting to emphasize high data_size and param_size instances:\n    # compute a weight per example based on normalized log(data_size) and log(param_size)\n    alpha = 0.3\n    # features 2 and 3 correspond to data_size and non_embedding_param_size\n    w = 1.0 + alpha * (logX_norm[:, 2] + logX_norm[:, 3]) / 2.0\n    # clip to prevent extreme weights, then re\u2010normalize to mean=1\n    w = np.clip(w, 0.5, 1.5)\n    w = w / np.mean(w)\n\n    # build weighted normal equations\n    # A = Phi^T * diag(w) * Phi,   b = Phi^T * (w * logy)\n    A = Phi.T.dot(Phi * w[:, np.newaxis])\n    b = Phi.T.dot(logy * w)\n\n    # adaptive ridge scale: average diagonal magnitude\n    avg_diag = np.trace(A) / P\n    base_ridge = 1e-3 * avg_diag\n\n    # per\u2010term penalty weights to control overfitting:\n    #   intercept       \u2192 0.0\n    #   linear terms    \u2192 0.2\n    #   squared terms   \u2192 0.8\n    #   cross terms     \u2192 2.0\n    F = 4\n    num_linear = F\n    num_squared = F\n    num_cross = F * (F - 1) // 2\n\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0\n    # linear indices 1..F\n    penalty[1:1 + num_linear] = 0.2\n    # squared indices\n    penalty[1 + num_linear:1 + num_linear + num_squared] = 0.8\n    # cross\u2010interaction indices\n    start = 1 + num_linear + num_squared\n    penalty[start:start + num_cross] = 2.0\n\n    # apply ridge: add to diagonal\n    A.flat[::P + 1] += base_ridge * penalty\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010log quadratic scaling\u2010law for LLM training hyperparameters.\n\nWe model the LM loss via:\n    log_loss \u2248 \u03a6 \u00b7 w\nwhere \u03a6 is a second\u2010order polynomial basis in normalized log\u2010features:\n    [1,\n     x\u0302_i           (4 terms),\n     x\u0302_i^2         (4 terms),\n     x\u0302_i * x\u0302_j    (6 terms for all i<j)\n    ]\nwith x\u0302 = (log(feature) \u2212 log_min) / (log_max \u2212 log_min), clipped to [0,1].\nWe fit w by closed\u2010form ridge regression in the log\u2010loss domain for stability\nand cross\u2010configuration generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature (order: lr, bsz, data_size, param_size)\n_LOG_MINS   = np.log(np.array([1.2e-4,   16.0,    4e9,      2.14e8], dtype=float))\n_LOG_MAXS   = np.log(np.array([2.2e-2,  4096.0, 1e11,     1e9    ], dtype=float))\n_LOG_RANGES = _LOG_MAXS - _LOG_MINS  # for normalization to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build the design matrix \u03a6 for a normalized\u2010log quadratic model.\n    Columns (total 15):\n      [1,\n       logX_norm_i      (4),\n       (logX_norm_i)^2  (4),\n       logX_norm_i * logX_norm_j for all i<j  (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    col = 0\n    # intercept\n    Phi[:, col] = 1.0\n    col += 1\n    # linear terms\n    Phi[:, col:col+F] = logX_norm\n    col += F\n    # squared terms\n    Phi[:, col:col+F] = logX_norm**2\n    col += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, col] = logX_norm[:, i] * logX_norm[:, j]\n            col += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15 (weights in the log\u2010loss domain)\n\n    Returns:\n      np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n\n    # normalize to [0,1]\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    w   = np.asarray(params, dtype=float).ravel()\n    if w.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {w.size}\")\n\n    log_pred = Phi.dot(w)  # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via ridge\u2010regularized\n    least squares in the log\u2010loss domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      np.ndarray of length 15 of learned weights in the log\u2010loss domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and losses must match.\")\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log\u2010transform\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # normalize features\n    logX_norm = (logX - _LOG_MINS) / _LOG_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    # adaptive ridge = 1e\u20106 * (trace(A)/P)\n    ridge = 1e-6 * np.trace(A) / P\n    # apply to all but intercept\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge\n\n    # solve for weights\n    w = np.linalg.solve(A, b)\n    return w\n# EVOLVE-BLOCK-END\n```"]}}}