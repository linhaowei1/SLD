{"id": "dc1f1aa9-042a-4922-be14-506e1884c2f9", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in the log\u2010domain of the four inputs:\n  [lr, bsz, data_size, non_embedding_param_size]\n\nSteps:\n 1. Clip inputs to >0 and take logs.\n 2. Center & scale each log\u2010feature to approximately [-1,1] using fixed midpoints\n    and half\u2010ranges derived from the known data bounds.\n 3. Build a design matrix with intercept, linear terms, squared terms, and\n    pairwise interactions (15 features total).\n 4. Fit via closed\u2010form ridge regression in the log\u2010loss domain,\n    unpenalizing the intercept for better generalization.\n 5. Predict by exponentiating the linear model output in log\u2010loss space.\n\nThis yields a 15\u2010parameter model that balances expressivity,\nnumerical stability, and parameter efficiency.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_X_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_X_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Precompute midpoints and half\u2010ranges for normalization to [-1,1]\n_LOG_X_MID   = 0.5 * (_LOG_X_MIN + _LOG_X_MAX)\n_LOG_X_HALFR = 0.5 * (_LOG_X_MAX - _LOG_X_MIN)\n\ndef _normalize_features(X):\n    \"\"\"\n    Clip inputs to >0, log\u2010transform, then center & scale each feature:\n      x_i = (log(X_i) - mid_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_X_MID) / _LOG_X_HALFR\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features.\n    Columns:\n      [1,\n       x1, x2, x3, x4,\n       x1^2, x2^2, x3^2, x4^2,\n       x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape\n    P = 1 + F + F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = x\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = x**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients in log\u2010loss domain\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # normalize features and build design matrix\n    x_norm = _normalize_features(X)\n    Phi    = _build_design_matrix(x_norm)\n    p      = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log\u2010loss domain then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and loss_values length N\")\n    # normalize features\n    x_norm = _normalize_features(X)\n    Phi    = _build_design_matrix(x_norm)\n    # transform target to log\u2010domain, floor to avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    P = A.shape[0]\n    # adaptive ridge penalty scale\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all coefficients except intercept (index 0)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0\n    A += ridge * np.diag(penalty)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "0dc29d65-782d-4501-8bea-dd24a4777647", "generation": 3, "timestamp": 1754807203.2756305, "iteration_found": 176, "metrics": {"nmse": 0.009538769551852337, "nmae": 0.10324238167687366, "r2": 0.9904612304481477, "combined_score": 0.9905513588585739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.780115203244622, "nmae": 1.660022808363727, "r2": -0.7801152032446219, "combined_score": 0.3596973243529326}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7801\n- nmae: 1.6600\n- r2: -0.7801\n- combined_score: 0.3597\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved LLM hyperparameter scaling\u2010law model using a normalized\nsecond\u2010order polynomial in the log\u2010domain of [lr, bsz, data_size,\nnon_embedding_param_size]. Features are log-transformed, normalized\nto [0,1] via precomputed bounds, and fit with closed-form ridge\nregression for numerical stability and expressivity.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalizing logs into [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix \u03a6 for a second\u2010order polynomial in normalized log\u2010features.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    where u = logX_norm of shape (N,4). Resulting \u03a6 is (N,15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total features: 1 + F + F + F*(F-1)/2 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned normalized\u2010log\n    quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize features to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients\n              (in the log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log-transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    # transform target to log-domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                     # (15,15)\n    b = Phi.T.dot(logy)                    # (15,)\n    # adaptive ridge regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_X_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_X_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9    ], dtype=float))\n_LOG_X_RANGE = _LOG_X_MAX - _LOG_X_MIN\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to positive, log-transform, and normalize each feature to [0,1]\n    based on precomputed log\u2010domain minima and ranges.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # normalize into [0,1]\n    u = (logX - _LOG_X_MIN) / _LOG_X_RANGE\n    return np.clip(u, 0.0, 1.0)\n\ndef _build_design_matrix(u):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix on normalized logs u.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0\u00b7u1, u0\u00b7u2, u0\u00b7u3,\n       u1\u00b7u2, u1\u00b7u3,\n       u2\u00b7u3]\n    \"\"\"\n    N, F = u.shape\n    # total terms = 1 intercept + 4 linear + 4 squared + 6 interactions = 15\n    P = 1 + F + F + (F*(F-1)//2)\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = u\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = u**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = u[:, i] * u[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4):\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # normalize inputs and build design matrix\n    u   = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log\u2010loss domain then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression\n    in the log\u2010loss domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients in log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # normalize inputs and build design matrix\n    u   = _normalize_log_features(X)\n    Phi = _build_design_matrix(u)\n    # transform target to log\u2010domain\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge regularization (no penalty on intercept)\n    Pdim  = A.shape[0]\n    lam   = 1e-6 * np.trace(A) / Pdim\n    I     = np.eye(Pdim, dtype=float)\n    I[0, 0] = 0.0\n    A += lam * I\n    # solve and return\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _transform_and_build_features(data_points):\n    \"\"\"\n    Given raw hyperparameters, clip to positive, log-transform,\n    normalize to [0,1], and build 14 polynomial features:\n      - 4 linear terms (u_i)\n      - 4 squared terms (u_i^2)\n      - 6 pairwise interactions (u_i * u_j, i<j)\n    Returns an (N\u00d714) array.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0) and negatives\n    X = np.clip(X, 1e-12, None)\n    # log\u2010transform and normalize each feature to [0,1]\n    logX = np.log(X)\n    u = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    u = np.clip(u, 0.0, 1.0)\n    # build features\n    # linear terms\n    lin = u                           # shape (N,4)\n    # squared terms\n    sq  = u**2                        # shape (N,4)\n    # pairwise interactions\n    inters = []\n    for i in range(4):\n        for j in range(i+1, 4):\n            inters.append(u[:, i] * u[:, j])\n    inters = np.stack(inters, axis=1) # shape (N,6)\n    # concatenate: [lin | sq | inters] -> (N,14)\n    return np.hstack([lin, sq, inters])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a centered-ridge\n    normalized-quadratic model in log-space.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15:\n                   [intercept, w_lin0..w_lin3, w_sq0..w_sq3, w_int01..w_int23]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n    # build feature matrix (N\u00d714)\n    X_feat = _transform_and_build_features(data_points)  # (N,14)\n    intercept = p[0]\n    weights   = p[1:]                                    # length 14\n    # linear predictor in log-space\n    log_pred = intercept + X_feat.dot(weights)           # shape (N,)\n    # back-transform\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via centered\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    We build 14 polynomial features from the 4 inputs (lin, sq, interactions),\n    center them, and solve:\n        (X_c\u1d40 X_c + \u03bb I) w = X_c\u1d40 y_c\n    where y_c = log(y) - mean(log(y)), X_c = X_feat - mean(X_feat).\n    The intercept is recovered as:\n        intercept = mean(log(y)) - mean(X_feat) \u00b7 w\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 [intercept, w...].\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    log_y = np.log(y)\n    # build and center features\n    X_feat = _transform_and_build_features(X)   # (N,14)\n    y_mean = log_y.mean()\n    X_mean = X_feat.mean(axis=0)               # (14,)\n    Xc = X_feat - X_mean                       # centered features\n    yc = log_y - y_mean                        # centered target\n    # normal equations with ridge\n    A = Xc.T.dot(Xc)                           # (14,14)\n    trace_A = np.trace(A)\n    # adaptive ridge strength\n    ridge = 1e-6 * trace_A / A.shape[0]\n    A += ridge * np.eye(A.shape[0])            # penalize all weights equally\n    b = Xc.T.dot(yc)                            # (14,)\n    # solve for weights\n    w = np.linalg.solve(A, b)                  # (14,)\n    # recover intercept\n    intercept = y_mean - X_mean.dot(w)\n    # return full parameter vector\n    return np.concatenate([[intercept], w])\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\n# Precomputed log-domain feature bounds for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN  = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_F_MAX  = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Midpoint and half-range for zero-centered normalization to [-1,1]\n_LOG_F_MID   = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF  = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, log-transform, then normalize each feature to [-1,1]:\n      logX_norm = (logX - mid) / half\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single-row input\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    # zero-centered normalization\n    logXn = (logX - _LOG_F_MID) / _LOG_F_HALF\n    # guard against numerical overflow\n    return np.clip(logXn, -1.0, 1.0)\n\ndef _build_design_matrix(logXn):\n    \"\"\"\n    Build a second-order polynomial design matrix in normalized log-space:\n      [1,\n       x_i           (4 cols),\n       x_i^2         (4 cols),\n       x_i * x_j     (6 cols for i<j)]\n    Returns \u03a6 of shape (N,15).\n    \"\"\"\n    N, F = logXn.shape\n    P = 1 + F + F + (F*(F-1))//2   # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logXn\n    # squared terms\n    Phi[:, 1+F:1+2*F] = logXn**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logXn[:, i] * logXn[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a learned quadratic model\n    in the normalized-log domain.\n\n    Inputs:\n      data_points: array-like of shape (N,4), columns =\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (model coefficients in log-loss domain)\n    Returns:\n      preds: numpy array of shape (N,) with predicted loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # normalize features in log-space\n    logXn = _normalize_log_features(X)\n    # build polynomial features\n    Phi   = _build_design_matrix(logXn)\n    p     = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict log-loss and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-log quadratic scaling law via closed-form ridge regression.\n\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: 1D numpy array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(f\"Expected data_points shape (N,4) and matching loss_values, got {X.shape} and {y.shape}\")\n    # normalize features\n    logXn = _normalize_log_features(X)\n    Phi   = _build_design_matrix(logXn)\n    # transform target to log-domain\n    y_clipped = np.clip(y, 1e-12, None)\n    logy      = np.log(y_clipped)\n    # normal equations for ridge regression\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    Pdim = A.shape[0]\n    # adaptive ridge penalty for numerical stability\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # apply penalty to all coefficients except intercept\n    i_diag = np.arange(Pdim)\n    A[i_diag, i_diag] += ridge\n    A[0, 0]         -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in normalized log\u2010features:\n   log(loss) \u2248 w0 \n              + \u03a3_i w_i\u00b7x_i\n              + \u03a3_i w_{ii}\u00b7x_i^2\n              + \u03a3_{i<j} w_{ij}\u00b7x_i\u00b7x_j\n\nwhere x_i = (log(feature_i) \u2212 \u03bc_i) / \u0394_i normalizes each log\u2010feature to roughly [\u22121,1].\nWe fit the 15\u2010parameter model via closed\u2010form ridge regression,\nunpenalizing the intercept for better generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n\n# Compute per-feature mean and half-range for centering to [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), apply log, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape\n    # total params = 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients (log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values\n    \"\"\"\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    # build design matrix\n    Phi = _build_design_matrix(x)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features and target\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n    # set up normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept (index 0)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved LLM hyperparameter scaling\u2010law model using a normalized\nsecond\u2010order polynomial in the log\u2010domain of [lr, bsz, data_size,\nnon_embedding_param_size]. Features are log-transformed, normalized\nto [0,1] via precomputed bounds, and fit with closed-form ridge\nregression for numerical stability and expressivity.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalizing logs into [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix \u03a6 for a second\u2010order polynomial in normalized log\u2010features.\n    Columns:\n      [1,\n       u0, u1, u2, u3,\n       u0^2, u1^2, u2^2, u3^2,\n       u0*u1, u0*u2, u0*u3, u1*u2, u1*u3, u2*u3]\n    where u = logX_norm of shape (N,4). Resulting \u03a6 is (N,15).\n    \"\"\"\n    N, F = logX_norm.shape\n    # total features: 1 + F + F + F*(F-1)/2 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned normalized\u2010log\n    quadratic scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (coefficients in log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    # log-transform and normalize features to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-loss domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients\n              (in the log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n    # log-transform and normalize features\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)   # shape (N,15)\n    # transform target to log-domain\n    logy = np.log(y)\n    # normal equations\n    A = Phi.T.dot(Phi)                     # (15,15)\n    b = Phi.T.dot(logy)                    # (15,)\n    # adaptive ridge regularization\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all except intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 3.0124, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nA more parsimonious log-domain scaling law for LLM loss:\n  log(loss) = p0\n            + p1*log(lr)\n            + p2*log(bsz)\n            + p3*log(data_size)\n            + p4*log(param_size)\n            + p5*(log(lr))^2       # captures non-monotonic LR effect\n            + p6*(log(bsz))^2     # captures BS saturation curvature\n            + p7*(log(data_size)*log(param_size))  # joint size effect\n\nThis 8-parameter model is fitted via small-ridge regression in closed form,\ncentering the design matrix to keep the intercept unpenalized.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) holding\n                   [p0,p1,...,p7] as described above\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure positivity\n    X = np.clip(X, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build the log-loss predictor\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_data\n      + p[4]*log_param\n      + p[5]*log_lr**2\n      + p[6]*log_bsz**2\n      + p[7]*(log_data * log_param)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain model via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (8,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n    logy      = np.log(y)\n\n    # build design matrix with 8 columns\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),              # intercept\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_data * log_param\n    ])\n\n    # center columns so intercept stays unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_c    = Phi - col_mean\n\n    # small ridge term for numerical stability\n    ridge = 1e-6\n    P     = Phi_c.shape[1]\n\n    # solve (Phi_c^T Phi_c + ridge*I) w_c = Phi_c^T logy\n    A = Phi_c.T.dot(Phi_c) + ridge * np.eye(P)\n    b = Phi_c.T.dot(logy)\n    w_c = np.linalg.solve(A, b)\n\n    # recover true intercept p0\n    # original: Phi\u00b7p = (Phi_c + col_mean)\u00b7w_c = Phi_c\u00b7w_c + (col_mean\u00b7w_c)\n    # so intercept = w_c[0] - sum(col_mean * w_c)\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n\n    params = w_c.copy()\n    params[0] = intercept\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (75.818), Excellent nmae (11.037)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010polynomial scaling\u2010law model for LLM training hyperparameters.\n\nWe fit a second\u2010order polynomial in the log\u2010domain of the four inputs:\n  [lr, bsz, data_size, non_embedding_param_size]\n\nSteps:\n 1. Clip inputs >0, take logs.\n 2. Normalize each log\u2010feature to [-1,1] using fixed midpoints and half\u2010ranges.\n 3. Build a design matrix with intercept, linear, and second\u2010order (squared + cross) terms.\n 4. Fit via closed\u2010form ridge regression (no penalty on the intercept).\n 5. Predict by exponentiating the linear model output in log\u2010loss space.\n\nThis yields a 15\u2010parameter model that balances expressivity, numerical stability,\nand code readability.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [lr, batch_size, data_size, non_embedding_param_size]\n_LOG_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n# Midpoint and half\u2010range for normalization to [-1,1]\n_LOG_MID    = 0.5 * (_LOG_MIN + _LOG_MAX)\n_LOG_HALFR  = 0.5 * (_LOG_MAX - _LOG_MIN)\n\n# Precompute index pairs for second\u2010order monomials (including squares)\n_F = 4\n_PAIRS = list(combinations_with_replacement(range(_F), 2))  # length = 10\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix \u03a6 of shape (N, 1 + F + F*(F+1)/2) = (N,15):\n      [1,\n       logX_norm[:,0], ..., logX_norm[:,F-1],        # linear terms\n       logX_norm[:,i] * logX_norm[:,j] for (i,j) in _PAIRS  # second\u2010order\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + len(_PAIRS)\n    Phi = np.empty((N, P), dtype=float)\n    # Intercept column\n    Phi[:, 0] = 1.0\n    # Linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # Second\u2010order terms (squares and pairwise products)\n    idx = 1 + F\n    for i, j in _PAIRS:\n        Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n        idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 15: coefficients in log\u2010loss space\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted lm loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Handle single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != _F:\n        raise ValueError(f\"Expected input with 4 features, got shape {X.shape}\")\n\n    # Clip and log\u2010transform\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n\n    # Normalize to [-1,1]\n    logX_norm = (logX - _LOG_MID) / _LOG_HALFR\n\n    # Build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)         # shape (N,15)\n    p   = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    log_pred = Phi.dot(p)                         # shape (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15\u2010parameter scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients in log\u2010loss space\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Handle single data point\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != _F or X.shape[0] != y.size:\n        raise ValueError(\"Mismatch between data_points and loss_values shapes\")\n\n    # Clip and log\u2010transform\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)\n    logy = np.log(y)\n\n    # Normalize features\n    logX_norm = (logX - _LOG_MID) / _LOG_HALFR\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX_norm)         # shape (N,15)\n\n    # Closed\u2010form ridge regression in log\u2010loss domain\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)                            # (15,15)\n    # Do not penalize intercept (index 0)\n    diag = np.ones(A.shape[0], dtype=float)\n    diag[0] = 0.0\n    A += ridge * np.diag(diag)\n\n    b = Phi.T.dot(logy)                           # (15,)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\nimport numpy as np\nfrom itertools import combinations\n\n# We work in the log\u2010domain of each feature and normalize to roughly [\u22121,1]\n# using fixed, precomputed minima and maxima to ensure stability.\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0, 4e9,    2.14e8], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11, 1e9   ], dtype=float))\n_LOG_F_MID  = 0.5 * (_LOG_F_MIN + _LOG_F_MAX)\n_LOG_F_HALF = 0.5 * (_LOG_F_MAX - _LOG_F_MIN)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the normalized log\u2010features.\n    Columns: [1,\n              logX_norm[:,0..F-1],\n              logX_norm[:,0..F-1]**2,\n              pairwise products logX_norm[:,i]*logX_norm[:,j] for i<j]\n    \"\"\"\n    N, F = logX_norm.shape\n    cols = [np.ones(N, dtype=float)]\n    # linear terms\n    cols.append(logX_norm)\n    # squared terms\n    cols.append(logX_norm**2)\n    # cross\u2010interaction terms\n    for i, j in combinations(range(F), 2):\n        cols.append(logX_norm[:, i] * logX_norm[:, j])\n    # stack into (N, P)\n    Phi = np.column_stack(cols)\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    normalized\u2010log\u2010domain 2nd\u2010order polynomial.\n\n    Inputs:\n      data_points: array of shape (N,4), columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length P = 1 + 4 + 4 + 6 = 15\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0) / negatives\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                          # (N,4)\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)     # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order normalized\u2010log polynomial via weighted\u2010ridge regression.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params:      1D array of length 15\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0) / negatives\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)                          # (N,4)\n    logy = np.log(y)                          # (N,)\n\n    # normalize features to zero\u2010center \u00b11 range\n    logX_norm = (logX - _LOG_F_MID) / _LOG_F_HALF\n    Phi = _build_design_matrix(logX_norm)     # (N,15)\n    N, P = Phi.shape\n\n    # normal equations\n    A = Phi.T.dot(Phi)                        # (P,P)\n    b = Phi.T.dot(logy)                       # (P,)\n\n    # adaptive ridge scale: average diagonal magnitude\n    avg_diag = np.trace(A) / P\n    base_ridge = 1e-3 * avg_diag\n\n    # build per\u2010term penalty weights:\n    #   intercept  \u2192 0 (no penalty)\n    #   linear     \u2192 light penalty (0.1)\n    #   squared+cross \u2192 heavier penalty (1.0)\n    F = 4\n    num_linear = F\n    num_squared = F\n    num_cross = F * (F - 1) // 2\n\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0\n    penalty[1:1 + num_linear] = 0.1\n    penalty[1 + num_linear : 1 + num_linear + num_squared + num_cross] = 1.0\n\n    # apply weighted ridge: A_ii += base_ridge * penalty[i]\n    A.flat[::P+1] += base_ridge * penalty\n\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in normalized log\u2010features:\n   log(loss) \u2248 w0 \n              + \u03a3_i w_i\u00b7x_i\n              + \u03a3_i w_{ii}\u00b7x_i^2\n              + \u03a3_{i<j} w_{ij}\u00b7x_i\u00b7x_j\n\nwhere x_i = (log(feature_i) \u2212 \u03bc_i) / \u0394_i normalizes each log\u2010feature to roughly [\u22121,1].\nWe fit the 15\u2010parameter model via closed\u2010form ridge regression,\nunpenalizing the intercept for better generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n\n# Compute per-feature mean and half-range for centering to [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), apply log, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape\n    # total params = 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients (log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values\n    \"\"\"\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    # build design matrix\n    Phi = _build_design_matrix(x)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features and target\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n    # set up normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept (index 0)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe adopt a 6\u2010parameter power\u2010law with an asymptotic loss floor:\n\n    y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_l\n\nwhere:\n  - P = non_embedding_param_size (model size)\n  - D = data_size (training tokens)\n  - bsz = batch size\n  - lr = learning rate\n\nParameters (6):\n  [ logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_l, log_y_inf ]\n\nWe optimize these parameters via L-BFGS-B on MSE in original loss space,\nensuring positivity of A and y_inf by parameterizing them in the log domain.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the 6-parameter power law.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 6:\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {X.shape[1]}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n\n    # unpack parameters\n    logA, alpha_P, alpha_D, alpha_bsz, alpha_lr, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute the power\u2010law term\n    term = A * (Psize ** alpha_P) * (D ** alpha_D) * (bsz ** alpha_bsz) * (lr ** alpha_lr)\n    y_pred = y_inf + term\n\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law scaling law by minimizing MSE (original loss).\n\n    data_points:  array of shape (N,4)\n    loss_values:  array of shape (N,)\n    Returns:      1D array of learned parameters [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # ensure strictly positive for log transforms\n    y_safe = np.maximum(y, 1e-12)\n\n    # initialize parameters\n    y_min = np.min(y_safe)\n    # initial floor half of min loss\n    init_log_yinf = np.log(max(y_min * 0.1, 1e-12))\n    # initial amplitude to roughly match mean loss above floor\n    init_A = max(np.mean(y_safe) - np.exp(init_log_yinf), 1e-6)\n    init_logA = np.log(init_A)\n\n    # plausible exponents (negative for returns-to-scale, small magnitude)\n    init_alpha_P    = -0.2\n    init_alpha_D    = -0.2\n    init_alpha_bsz  = -0.1\n    init_alpha_lr   =  0.0\n\n    p0 = np.array([\n        init_logA,\n        init_alpha_P,\n        init_alpha_D,\n        init_alpha_bsz,\n        init_alpha_lr,\n        init_log_yinf\n    ], dtype=float)\n\n    # bounds to keep parameters in reasonable ranges\n    # logA and log_yinf unbounded except float stability\n    # alphas typically between -5 and +5\n    bounds = [\n        (-20, 20),   # logA\n        (-5, 5),     # \u03b1_P\n        (-5, 5),     # \u03b1_D\n        (-5, 5),     # \u03b1_bsz\n        (-5, 5),     # \u03b1_lr\n        (-20, np.log(np.max(y_safe)))  # log_yinf <= log(max observed loss)\n    ]\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in the log\u2010domain of the four inputs:\n  [lr, bsz, data_size, non_embedding_param_size]\n\nSteps:\n 1. Clip inputs to >0 and take logs.\n 2. Center & scale each log\u2010feature to approximately [-1,1] using fixed midpoints\n    and half\u2010ranges derived from the known data bounds.\n 3. Build a design matrix with intercept, linear terms, squared terms, and\n    pairwise interactions (15 features total).\n 4. Fit via closed\u2010form ridge regression in the log\u2010loss domain,\n    unpenalizing the intercept for better generalization.\n 5. Predict by exponentiating the linear model output in log\u2010loss space.\n\nThis yields a 15\u2010parameter model that balances expressivity,\nnumerical stability, and parameter efficiency.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_X_MIN   = np.log(np.array([1.2e-4, 16.0,   4e9,    2.14e8], dtype=float))\n_LOG_X_MAX   = np.log(np.array([2.2e-2, 4096.0, 1e11,   1e9   ], dtype=float))\n# Precompute midpoints and half\u2010ranges for normalization to [-1,1]\n_LOG_X_MID   = 0.5 * (_LOG_X_MIN + _LOG_X_MAX)\n_LOG_X_HALFR = 0.5 * (_LOG_X_MAX - _LOG_X_MIN)\n\ndef _normalize_features(X):\n    \"\"\"\n    Clip inputs to >0, log\u2010transform, then center & scale each feature:\n      x_i = (log(X_i) - mid_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_X_MID) / _LOG_X_HALFR\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in normalized log\u2010features.\n    Columns:\n      [1,\n       x1, x2, x3, x4,\n       x1^2, x2^2, x3^2, x4^2,\n       x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape\n    P = 1 + F + F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = x\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = x**2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) or (4,)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients in log\u2010loss domain\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # normalize features and build design matrix\n    x_norm = _normalize_features(X)\n    Phi    = _build_design_matrix(x_norm)\n    p      = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log\u2010loss domain then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4 or X.shape[0] != y.size:\n        raise ValueError(\"data_points must be (N,4) and loss_values length N\")\n    # normalize features\n    x_norm = _normalize_features(X)\n    Phi    = _build_design_matrix(x_norm)\n    # transform target to log\u2010domain, floor to avoid log(0)\n    y_safe = np.clip(y, 1e-12, None)\n    logy   = np.log(y_safe)\n    # form normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    P = A.shape[0]\n    # adaptive ridge penalty scale\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all coefficients except intercept (index 0)\n    penalty = np.ones(P, dtype=float)\n    penalty[0] = 0.0\n    A += ridge * np.diag(penalty)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}