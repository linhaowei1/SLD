{"id": "d4b755e0-0c98-4616-80c2-a0b7c8854964", "code": "import numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non-embed\u2010param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non-embed\u2010param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take log, then normalize each feature to [0,1]\n    using global log-min and log-max.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the normalized log\u2010domain.\n    Columns:\n      [1,\n       u1, u2, u3, u4,\n       u1^2, u2^2, u3^2, u4^2,\n       u1*u2, u1*u3, u1*u4, u2*u3, u2*u4, u3*u4]\n    where u = logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # total params = 1 + F linear + F squared + F*(F-1)/2 interactions = 15\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms u_i\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms u_i^2\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm ** 2\n    # pairwise interactions u_i * u_j\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized 2nd\u2010order\n    log\u2010domain polynomial with 15 parameters.\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15 (coeffs in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log-loss and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized second\u2010order log\u2010domain polynomial\n    via adaptive ridge\u2010regularized closed\u2010form least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # log-transform target (clip to avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # (15,15)\n    b = Phi.T.dot(logy)    # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1820baf9-722f-40bb-8deb-43a93b258b3c", "generation": 4, "timestamp": 1754806649.711936, "iteration_found": 135, "metrics": {"nmse": 0.009529812593006361, "nmae": 0.10319057777458805, "r2": 0.9904701874069937, "combined_score": 0.990560147432864}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 6.790231890748938, "nmae": 3.285745547414298, "r2": -5.790231890748938, "combined_score": 0.1283658835865362}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 6.7902\n- nmae: 3.2857\n- r2: -5.7902\n- combined_score: 0.1284\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0095, nmae: 0.1032, r2: 0.9905, combined_score: 0.9906\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5234)\n```python\n\"\"\"\nSimplified second\u2010order log\u2010domain polynomial scaling law with\nnormalized features and adaptive ridge regression for stability.\n\"\"\"\nimport numpy as np\n\n# Pre\u2010computed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on global log\u2010min/max.\n    \"\"\"\n    # avoid log(0) and negatives\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip any numerical drift\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a normalized 2nd\u2010order polynomial:\n      [1,\n       u_i for i in 0..3,\n       u_i^2 for i in 0..3,\n       u_i * u_j for all 0 <= i < j < 4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log\u2010loss and exponentiate\n    logy_pred = Phi.dot(p)  # (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients for log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build normalized design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # transform target to log\u2010domain (avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge to all diagonal entries, then remove it from intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 2 (Score: 0.5234)\n```python\n\"\"\"\nSecond\u2010order log\u2010domain polynomial scaling law with feature normalization\nand adaptive ridge\u2010regularized closed\u2010form fitting for numerical stability\nand cross\u2010configuration generalization.\n\"\"\"\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for features:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # batch size min\n    4e9,      # data size min\n    2.14e8    # non-embedding parameter size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # batch size max\n    1e11,     # data size max\n    1e9       # non-embedding parameter size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a second\u2010order polynomial in the normalized\n    log\u2010domain. Columns:\n      [1,\n       logX_norm_i for each feature (4),\n       (logX_norm_i)^2 for each feature (4),\n       logX_norm_i * logX_norm_j for all i<j (6)\n      ]\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n    Inputs:\n      data_points: array-like of shape (N,4) for [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15 (intercept + linear + squared + interactions)\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform & normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip small numerical drift\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    # predict in log-domain\n    logy_pred = Phi.dot(p)                 # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law via closed\u2010form\n    ridge\u2010regularized least squares with adaptive regularization.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      array of length 15 (intercept + linear + squared + interactions)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # support single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform features & target\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n    logy = np.log(y)\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    # normal equations\n    A = Phi.T.dot(Phi)                     # shape (15,15)\n    b = Phi.T.dot(logy)                    # shape (15,)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A) / P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    A[np.diag_indices(Pdim)] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n### Program 3 (Score: 0.5234)\n```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n#   [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non_embedding_param_size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non_embedding_param_size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # used to normalize to [0,1]\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a second-order polynomial in the normalized\n    log-domain. Features:\n      - intercept\n      - linear terms: logX_norm_i for i in [0..3]\n      - squared terms: (logX_norm_i)^2\n      - pairwise interactions: logX_norm_i * logX_norm_j for i<j\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape\n    # total parameters = 1 + F + F + (F*(F-1)//2)\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n\n    # squared terms\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm**2\n\n    # pairwise interactions\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized-quadratic scaling law.\n\n    data_points: array-like of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      array-like of length 15: coefficients in the log-loss domain.\n\n    Returns:     array of shape (N,) of predicted LM loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # avoid non-positive\n    X = np.clip(X, 1e-12, None)\n\n    # log-transform and normalize to [0,1]\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized-quadratic scaling law via closed-form ridge regression.\n\n    data_points: array-like of shape (N,4)\n    loss_values: array-like of shape (N,)\n\n    Returns:      params: array of length 15 (coefficients in log-loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non-positive\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform and normalize\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    logX_norm = np.clip(logX_norm, 0.0, 1.0)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # log-target\n    logy = np.log(y)\n\n    # normal equations with adaptive ridge\n    A = Phi.T.dot(Phi)      # (15,15)\n    b = Phi.T.dot(logy)     # (15,)\n\n    P = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.0095), Performs well on nmae (0.1032), Performs well on r2 (0.9905), Performs well on combined_score (0.9906)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in normalized log\u2010features:\n   log(loss) \u2248 w0 \n              + \u03a3_i w_i\u00b7x_i\n              + \u03a3_i w_{ii}\u00b7x_i^2\n              + \u03a3_{i<j} w_{ij}\u00b7x_i\u00b7x_j\n\nwhere x_i = (log(feature_i) \u2212 \u03bc_i) / \u0394_i normalizes each log\u2010feature to roughly [\u22121,1].\nWe fit the 15\u2010parameter model via closed\u2010form ridge regression,\nunpenalizing the intercept for better generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n\n# Compute per-feature mean and half-range for centering to [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), apply log, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape\n    # total params = 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients (log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values\n    \"\"\"\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    # build design matrix\n    Phi = _build_design_matrix(x)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features and target\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n    # set up normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept (index 0)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5234)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nNormalized\u2010log quadratic scaling\u2010law model for LLM hyperparameters.\n\nWe fit log(loss) as a second\u2010order polynomial in the normalized log\u2010domain\nof the four inputs [lr, batch_size, data_size, non_embedding_param_size].\nThis yields 15 parameters:\n  - 1 intercept\n  - 4 linear terms\n  - 4 squared terms\n  - 6 pairwise interaction terms\n\nWe solve via closed\u2010form ridge regression in the log\u2010loss domain with a\ntiny adaptive regularization for numerical stability and no penalty on\nthe intercept.\n\"\"\"\n\n# Known global log\u2010range of each feature for normalization\n# Order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MIN = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8 ], dtype=float))\n_LOG_F_MAX = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9    ], dtype=float))\n_LOG_F_RANGE = _LOG_F_MAX - _LOG_F_MIN  # normalize to [0,1]\n\ndef _prepare_normalized_logs(X):\n    \"\"\"\n    Clip, log\u2010transform, and normalize each feature to [0,1].\n    Returns array of shape (N,4).\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # support single\u2010row input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    logX_norm = (logX - _LOG_F_MIN) / _LOG_F_RANGE\n    # clip to [0,1] for safety\n    return np.clip(logX_norm, 0.0, 1.0)\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix \u03a6 for a normalized quadratic polynomial:\n      [1,\n       u_i            (4 cols),\n       u_i^2          (4 cols),\n       u_i * u_j      (6 cols for i<j)]\n    where u = normalized log\u2010features.\n    Returns shape (N,15).\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + 2*F + (F*(F-1))//2  # 1 + 4 + 4 + 6 = 15\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned\n    normalized\u2010quadratic scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients in log\u2010loss domain\n\n    Returns:\n      preds: array of shape (N,) of predicted LM loss values\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)                              # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010log quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of learned coefficients (log\u2010loss domain)\n    \"\"\"\n    logX_norm = _prepare_normalized_logs(data_points)  # (N,4)\n    Phi = _build_design_matrix(logX_norm)              # (N,15)\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log(0)\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n\n    # normal equations\n    A = Phi.T.dot(Phi)    # (15,15)\n    b = Phi.T.dot(logy)   # (15,)\n\n    # adaptive ridge: small \u03bb scaled by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    for i in range(Pdim):\n        A[i, i] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5234, Type: Migrant)\n```python\n\"\"\"\nSimplified second\u2010order log\u2010domain polynomial scaling law with\nnormalized features and adaptive ridge regression for stability.\n\"\"\"\nimport numpy as np\n\n# Pre\u2010computed log\u2010domain minima and maxima for each feature:\n# [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,    # lr min\n    16.0,      # bsz min\n    4e9,       # data size min\n    2.14e8     # non\u2010embedding param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,    # lr max\n    4096.0,    # bsz max\n    1e11,      # data size max\n    1e9        # non\u2010embedding param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip inputs to >0, take logs, and normalize each feature to [0,1]\n    based on global log\u2010min/max.\n    \"\"\"\n    # avoid log(0) and negatives\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    # clip any numerical drift\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build design matrix for a normalized 2nd\u2010order polynomial:\n      [1,\n       u_i for i in 0..3,\n       u_i^2 for i in 0..3,\n       u_i * u_j for all 0 <= i < j < 4]\n    Returns an (N,15) matrix.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms\n    sq_start = 1 + F\n    Phi[:, sq_start:sq_start+F] = logX_norm ** 2\n    # pairwise interactions\n    idx = sq_start + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized\n    second\u2010order log\u2010domain polynomial.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4), columns = [lr, bsz, data_size, non_embed_param_size]\n      params:      array\u2010like of length 15 (coefficients in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted LM loss values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log\u2010loss and exponentiate\n    logy_pred = Phi.dot(p)  # (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized second\u2010order polynomial scaling law by closed\u2010form\n    ridge\u2010regularized least squares in the log\u2010loss domain.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (coefficients for log\u2010loss domain)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != _LOG_F_MINS.size:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build normalized design matrix\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # (N,15)\n\n    # transform target to log\u2010domain (avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)   # (15,15)\n    b = Phi.T.dot(logy)  # (15,)\n\n    # adaptive ridge: scale by trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n\n    # add ridge to all diagonal entries, then remove it from intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 3.0124, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nA more parsimonious log-domain scaling law for LLM loss:\n  log(loss) = p0\n            + p1*log(lr)\n            + p2*log(bsz)\n            + p3*log(data_size)\n            + p4*log(param_size)\n            + p5*(log(lr))^2       # captures non-monotonic LR effect\n            + p6*(log(bsz))^2     # captures BS saturation curvature\n            + p7*(log(data_size)*log(param_size))  # joint size effect\n\nThis 8-parameter model is fitted via small-ridge regression in closed form,\ncentering the design matrix to keep the intercept unpenalized.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict lm loss from hyperparameters.\n\n    Arguments:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) holding\n                   [p0,p1,...,p7] as described above\n\n    Returns:\n      preds:       array of shape (N,) of predicted lm loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure positivity\n    X = np.clip(X, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 8:\n        raise ValueError(f\"Expected 8 parameters, got {p.size}\")\n\n    # build the log-loss predictor\n    log_pred = (\n        p[0]\n      + p[1]*log_lr\n      + p[2]*log_bsz\n      + p[3]*log_data\n      + p[4]*log_param\n      + p[5]*log_lr**2\n      + p[6]*log_bsz**2\n      + p[7]*(log_data * log_param)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter log-domain model via ridge regression.\n\n    Arguments:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params:      array of shape (8,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    lr  = X[:, 0]\n    bsz = X[:, 1]\n    D   = X[:, 2]\n    M   = X[:, 3]\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(D)\n    log_param = np.log(M)\n    logy      = np.log(y)\n\n    # build design matrix with 8 columns\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),              # intercept\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr**2,\n        log_bsz**2,\n        log_data * log_param\n    ])\n\n    # center columns so intercept stays unpenalized\n    col_mean = Phi.mean(axis=0)\n    Phi_c    = Phi - col_mean\n\n    # small ridge term for numerical stability\n    ridge = 1e-6\n    P     = Phi_c.shape[1]\n\n    # solve (Phi_c^T Phi_c + ridge*I) w_c = Phi_c^T logy\n    A = Phi_c.T.dot(Phi_c) + ridge * np.eye(P)\n    b = Phi_c.T.dot(logy)\n    w_c = np.linalg.solve(A, b)\n\n    # recover true intercept p0\n    # original: Phi\u00b7p = (Phi_c + col_mean)\u00b7w_c = Phi_c\u00b7w_c + (col_mean\u00b7w_c)\n    # so intercept = w_c[0] - sum(col_mean * w_c)\n    intercept = w_c[0] - np.dot(col_mean, w_c)\n\n    params = w_c.copy()\n    params[0] = intercept\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (75.818), Excellent nmae (11.037)\n\n\n### Inspiration 3 (Score: 1.3280, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (11.586), Excellent nmae (4.232)\n\n\n### Inspiration 4 (Score: 0.5553, Type: Experimental)\n```python\nimport numpy as np\n\nFLOOR = 1e-12\n\n# EVOLVE-BLOCK-START\ndef _build_phi(X):\n    \"\"\"\n    Build the design matrix \u03a6 of shape (N,8) for the 8-parameter model:\n        [1,\n         log(lr),\n         log(bsz),\n         log(data_size),\n         log(param_size),\n         log(data_size)^2,\n         log(param_size)^2,\n         log(data_size)*log(param_size)]\n    \"\"\"\n    # X has shape (N,4): columns [lr, bsz, data_size, param_size]\n    # Clip to avoid log(0)\n    X = np.maximum(X, FLOOR)\n    log_lr, log_bsz, log_D, log_P = np.log(X).T\n\n    return np.column_stack([\n        np.ones(X.shape[0], dtype=float),\n        log_lr,\n        log_bsz,\n        log_D,\n        log_P,\n        log_D * log_D,\n        log_P * log_P,\n        log_D * log_P\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via an 8-parameter log-domain polynomial.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n\n    Phi = _build_phi(X)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 8-parameter scaling law via ridge\u2010regularized least squares\n    in the log-domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # support 1D \u2192 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points of shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # build design matrix & target in log-domain\n    Phi = _build_phi(X)\n    log_y = np.log(np.maximum(y, FLOOR))\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to every diagonal, then un\u2010penalize the intercept\n    diag_ix = np.arange(A.shape[0])\n    A[diag_ix, diag_ix] += ridge\n    A[0, 0] -= ridge\n\n    b = Phi.T.dot(log_y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.902)\n\n\n### Inspiration 5 (Score: 0.5234, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined normalized\u2010quadratic scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in normalized log\u2010features:\n   log(loss) \u2248 w0 \n              + \u03a3_i w_i\u00b7x_i\n              + \u03a3_i w_{ii}\u00b7x_i^2\n              + \u03a3_{i<j} w_{ij}\u00b7x_i\u00b7x_j\n\nwhere x_i = (log(feature_i) \u2212 \u03bc_i) / \u0394_i normalizes each log\u2010feature to roughly [\u22121,1].\nWe fit the 15\u2010parameter model via closed\u2010form ridge regression,\nunpenalizing the intercept for better generalization.\n\"\"\"\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([1.2e-4, 16.0,   4e9,   2.14e8], dtype=float))\n_LOG_F_MAXS = np.log(np.array([2.2e-2, 4096.0, 1e11,  1e9   ], dtype=float))\n\n# Compute per-feature mean and half-range for centering to [-1,1]\n_LOG_F_MEAN       = (_LOG_F_MINS + _LOG_F_MAXS) / 2.0\n_LOG_F_HALF_RANGE = (_LOG_F_MAXS - _LOG_F_MINS) / 2.0\n\ndef _prepare_normed_log(X):\n    \"\"\"\n    Take raw hyperparameters X (N\u00d74), apply log, then center & scale each feature:\n      x_i = (log(X_i) - mean_i) / half_range_i\n    yielding values in approximately [-1,1].\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    # floor to avoid log(0)\n    X = np.clip(X, 1e-12, None)\n    logX = np.log(X)\n    x = (logX - _LOG_F_MEAN) / _LOG_F_HALF_RANGE\n    # clip for numerical safety\n    return np.clip(x, -1.0, 1.0)\n\ndef _build_design_matrix(x):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order polynomial in x:\n      Columns:\n        [1,\n         x1, x2, x3, x4,\n         x1^2, x2^2, x3^2, x4^2,\n         x1\u00b7x2, x1\u00b7x3, x1\u00b7x4, x2\u00b7x3, x2\u00b7x4, x3\u00b7x4]\n    \"\"\"\n    N, F = x.shape\n    # total params = 1 intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = x\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = x**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = x[:, i] * x[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, batch_size, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients (log-loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values\n    \"\"\"\n    # prepare normalized features\n    x = _prepare_normed_log(data_points)\n    # build design matrix\n    Phi = _build_design_matrix(x)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # linear predictor in log-loss domain\n    logy_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized\u2010quadratic scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of learned coefficients (log-loss domain)\n    \"\"\"\n    # prepare features and target\n    x = _prepare_normed_log(data_points)   # (N,4)\n    Phi = _build_design_matrix(x)         # (N,15)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor & log-transform target\n    y = np.clip(y, 1e-12, None)\n    logy = np.log(y)\n    # set up normal equations\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    ridge = 1e-6 * np.trace(A) / P\n    # penalize all but intercept (index 0)\n    diag_idx = np.diag_indices(P)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    via a compact 2nd-order log-domain model with 10 parameters:\n\n      log(loss) = \u03b20\n                + \u03b21\u00b7log(lr) + \u03b22\u00b7log(bsz)\n                + \u03b23\u00b7log(D)  + \u03b24\u00b7log(P)\n                + \u03b25\u00b7[log(lr)]^2 + \u03b26\u00b7[log(bsz)]^2\n                + \u03b27\u00b7[log(D)]^2   + \u03b28\u00b7[log(P)]^2\n                + \u03b29\u00b7log(D)\u00b7log(P)\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, D, P]\n      params:      array-like of length 10\n\n    Returns:\n      preds: np.ndarray of shape (N,) of predicted lm losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # guard against non-positive values\n    X = np.clip(X, 1e-12, None)\n    # take logs\n    logX = np.log(X)\n    lr, bsz, D, P = logX[:,0], logX[:,1], logX[:,2], logX[:,3]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # build design matrix \u03a6 of shape (N,10)\n    # columns: [1, lr, bsz, D, P, lr^2, bsz^2, D^2, P^2, D\u00b7P]\n    ones = np.ones_like(lr)\n    Phi = np.column_stack([\n        ones,\n        lr, bsz, D, P,\n        lr*lr, bsz*bsz, D*D, P*P,\n        D*P\n    ])\n\n    # linear predictor in log-loss space\n    log_pred = Phi.dot(p)\n    # back to original loss\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter scaling law via ridge\u2010regularized\n    normal equations in the log-domain.\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, D, P]\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 10\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n\n    # guard against non-positive values\n    X = np.clip(X, 1e-12, None)\n    y = np.clip(y, 1e-12, None)\n\n    # log-transform\n    logX = np.log(X)\n    logy = np.log(y)\n    lr, bsz, D, P = logX[:,0], logX[:,1], logX[:,2], logX[:,3]\n\n    # design matrix \u03a6 (N\u00d710)\n    ones = np.ones_like(lr)\n    Phi = np.column_stack([\n        ones,\n        lr, bsz, D, P,\n        lr*lr, bsz*bsz, D*D, P*P,\n        D*P\n    ])\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # adaptive ridge for stability (no penalty on intercept)\n    P_dim = A.shape[0]\n    avg_diag = np.trace(A) / P_dim\n    ridge = 1e-3 * avg_diag\n    idx = np.arange(P_dim)\n    A[idx, idx] += ridge\n    A[0, 0] -= ridge  # do not penalize intercept\n\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Precomputed log\u2010domain minima and maxima for each feature:\n# order: [learning_rate, batch_size, data_size, non_embedding_param_size]\n_LOG_F_MINS = np.log(np.array([\n    1.2e-4,   # lr min\n    16.0,     # bsz min\n    4e9,      # data_size min\n    2.14e8    # non-embed\u2010param size min\n], dtype=float))\n_LOG_F_MAXS = np.log(np.array([\n    2.2e-2,   # lr max\n    4096.0,   # bsz max\n    1e11,     # data_size max\n    1e9       # non-embed\u2010param size max\n], dtype=float))\n_LOG_F_RANGES = _LOG_F_MAXS - _LOG_F_MINS  # for normalization to [0,1]\n\n\ndef _normalize_log_features(X):\n    \"\"\"\n    Clip to positive, take log, then normalize each feature to [0,1]\n    using global log-min and log-max.\n    \"\"\"\n    X_clipped = np.clip(X, 1e-12, None)\n    logX = np.log(X_clipped)\n    logX_norm = (logX - _LOG_F_MINS) / _LOG_F_RANGES\n    return np.clip(logX_norm, 0.0, 1.0)\n\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the normalized log\u2010domain.\n    Columns:\n      [1,\n       u1, u2, u3, u4,\n       u1^2, u2^2, u3^2, u4^2,\n       u1*u2, u1*u3, u1*u4, u2*u3, u2*u4, u3*u4]\n    where u = logX_norm.\n    \"\"\"\n    N, F = logX_norm.shape  # F should be 4\n    # total params = 1 + F linear + F squared + F*(F-1)/2 interactions = 15\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=logX_norm.dtype)\n\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms u_i\n    Phi[:, 1:1+F] = logX_norm\n    # squared terms u_i^2\n    start_sq = 1 + F\n    Phi[:, start_sq:start_sq+F] = logX_norm ** 2\n    # pairwise interactions u_i * u_j\n    idx = start_sq + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized 2nd\u2010order\n    log\u2010domain polynomial with 15 parameters.\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embed_param_size]\n      params:      array-like of length 15 (coeffs in log\u2010loss domain)\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n    # build polynomial design matrix\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # predict log-loss and exponentiate\n    logy_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(logy_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 15-parameter normalized second\u2010order log\u2010domain polynomial\n    via adaptive ridge\u2010regularized closed\u2010form least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 (fitted coefficients)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # allow single-sample input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.ndim != 2 or X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (N,4), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # normalize features in log\u2010domain\n    logX_norm = _normalize_log_features(X)\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # log-transform target (clip to avoid log(0))\n    logy = np.log(np.clip(y, 1e-12, None))\n\n    # normal equations\n    A = Phi.T.dot(Phi)     # (15,15)\n    b = Phi.T.dot(logy)    # (15,)\n\n    # adaptive ridge: \u03bb = 1e-6 * trace(A)/P\n    Pdim = A.shape[0]\n    ridge = 1e-6 * np.trace(A) / Pdim\n    # penalize all but intercept\n    diag_idx = np.diag_indices(Pdim)\n    A[diag_idx] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}