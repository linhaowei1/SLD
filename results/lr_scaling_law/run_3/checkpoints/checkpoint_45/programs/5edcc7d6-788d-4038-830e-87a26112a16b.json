{"id": "5edcc7d6-788d-4038-830e-87a26112a16b", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law discovery for LLM training hyperparameters.\n\nModel form:\n    y_pred = y_inf + A * P^aP * D^aD * bsz^aB * lr^aL\n\nWe parameterize:\n    p = [logA, aP, aD, aB, aL, log_yinf]\n\nWe initialize by subtracting an initial y_inf guess and fitting\na linear least\u2010squares in log\u2010space, then refine all parameters\nvia L-BFGS-B with analytic gradients.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, aP, aD, aB, aL, log_yinf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N,T) for multiple sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features (lr,bsz,D,P), got {F}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    # Precompute logs\n    log_lr   = np.log(np.maximum(lr, 1e-12))\n    log_bsz  = np.log(np.maximum(bsz, 1.0))\n    log_D    = np.log(np.maximum(D, 1.0))\n    log_P    = np.log(np.maximum(Psize, 1.0))\n\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # log\u2010term for the power law piece\n        log_term = (logA\n                    + aP * log_P\n                    + aD * log_D\n                    + aB * log_bsz\n                    + aL * log_lr)\n        term = np.exp(log_term)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    return y_all[:, 0] if T == 1 else y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, aP, aD, aB, aL, log_yinf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # 1) Initial guess for y_inf and linear LS on log\u2010space\n    y_min = max(np.min(y), 1e-8)\n    y_inf0 = y_min * 0.5\n\n    # prevent zeros before logging\n    lr    = X[:, 0]; bsz  = X[:, 1]\n    D     = X[:, 2]; Psize = X[:, 3]\n    log_lr   = np.log(np.maximum(lr, 1e-12))\n    log_bsz  = np.log(np.maximum(bsz, 1.0))\n    log_D    = np.log(np.maximum(D, 1.0))\n    log_P    = np.log(np.maximum(Psize, 1.0))\n\n    # subtract floor and take logs\n    y_tilde = np.maximum(y - y_inf0, 1e-8)\n    log_y   = np.log(y_tilde)\n\n    # Design matrix for [logA, aP, aD, aB, aL]\n    M = np.vstack([\n        np.ones_like(log_y),\n        log_P,\n        log_D,\n        log_bsz,\n        log_lr\n    ]).T\n    # solve least squares\n    beta, *_ = np.linalg.lstsq(M, log_y, rcond=None)\n    # beta = [logA, aP, aD, aB, aL]\n    p0 = np.concatenate([beta, [np.log(y_inf0)]])\n\n    # 2) refine by minimizing MSE with analytic gradient\n    # bounds: keep exponents and logs in reasonable range\n    lb = [-20.0, -10.0, -10.0, -10.0, -10.0, np.log(1e-8)]\n    ub = [ 20.0,  10.0,  10.0,  10.0,  10.0, np.log(y_min)]\n    bounds = list(zip(lb, ub))\n\n    # reuse logs computed above inside objective\n    def obj_and_grad(p):\n        logA, aP, aD, aB, aL, log_yinf = p\n        y_inf = np.exp(log_yinf)\n        # power\u2010law term\n        log_term = (logA\n                    + aP * log_P\n                    + aD * log_D\n                    + aB * log_bsz\n                    + aL * log_lr)\n        term = np.exp(log_term)\n        y_pred = y_inf + term\n        r = y_pred - y\n        mse = np.mean(r * r)\n\n        # gradients\n        Ninv2 = 2.0 / float(y.size)\n        g_logA      = Ninv2 * np.sum(r * term)\n        g_aP        = Ninv2 * np.sum(r * term * log_P)\n        g_aD        = Ninv2 * np.sum(r * term * log_D)\n        g_aB        = Ninv2 * np.sum(r * term * log_bsz)\n        g_aL        = Ninv2 * np.sum(r * term * log_lr)\n        g_log_yinf  = Ninv2 * np.sum(r * y_inf)\n\n        grad = np.array([\n            g_logA,\n            g_aP,\n            g_aD,\n            g_aB,\n            g_aL,\n            g_log_yinf\n        ], dtype=float)\n        return mse, grad\n\n    result = minimize(\n        fun=lambda p: obj_and_grad(p)[0],\n        x0=p0,\n        jac=lambda p: obj_and_grad(p)[1],\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={\"maxiter\":1000, \"ftol\":1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010LS initial guess\n        return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4e1b9075-6eaa-41a5-815a-3eae5589ff12", "generation": 2, "timestamp": 1754807637.865607, "iteration_found": 10, "metrics": {"nmse": 1.7852713642337685, "nmae": 1.6625078054821167, "r2": -0.7852713642337685, "combined_score": 0.35903144406006604}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'"}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3645157993675680530464505856.0000, nmae: 76538078494753.6562, r2: -3645157993675680530464505856.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 19134519623688.4141)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (3645157993675680530464505856.0000), Performs well on nmae (76538078494753.6562), Performs well on r2 (-3645157993675680530464505856.0000), Performs well on combined_score (0.0000)\n\n\n### Program 2 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype')\n\n\n### Program 3 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype')\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Below is the evolved program.  We\u2019ve changed the scaling\u2010law model to fit in log\u2010space (linearizing the power law), automatically initialize by a quick least\u2010squares on log\u2010data (including a floor y_inf), and then refine all six parameters via L-BFGS-B with analytic gradients and sensible bounds. This typically converges faster, more stably, and generalizes better than the naive approach.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law discovery for LLM training hyperparameters.\n\nModel form:\n    y_pred = y_inf + A * P^aP * D^aD * bsz^aB * lr^aL\n\nWe parameterize:\n    p = [logA, aP, aD, aB, aL, log_yinf]\n\nWe initialize by subtracting an initial y_inf guess and fitting\na linear least\u2010squares in log\u2010space, then refine all parameters\nvia L-BFGS-B with analytic gradients.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, aP, aD, aB, aL, log_yinf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N,T) for multiple sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features (lr,bsz,D,P), got {F}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    # Precompute logs\n    log_lr   = np.log(np.maximum(lr, 1e-12))\n    log_bsz  = np.log(np.maximum(bsz, 1.0))\n    log_D    = np.log(np.maximum(D, 1.0))\n    log_P    = np.log(np.maximum(Psize, 1.0))\n\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # log\u2010term for the power law piece\n        log_term = (logA\n                    + aP * log_P\n                    + aD * log_D\n                    + aB * log_bsz\n                    + aL * log_lr)\n        term = np.exp(log_term)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    return y_all[:, 0] if T == 1 else y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, aP, aD, aB, aL, log_yinf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # 1) Initial guess for y_inf and linear LS on log\u2010space\n    y_min = max(np.min(y), 1e-8)\n    y_inf0 = y_min * 0.5\n\n    # prevent zeros before logging\n    lr    = X[:, 0]; bsz  = X[:, 1]\n    D     = X[:, 2]; Psize = X[:, 3]\n    log_lr   = np.log(np.maximum(lr, 1e-12))\n    log_bsz  = np.log(np.maximum(bsz, 1.0))\n    log_D    = np.log(np.maximum(D, 1.0))\n    log_P    = np.log(np.maximum(Psize, 1.0))\n\n    # subtract floor and take logs\n    y_tilde = np.maximum(y - y_inf0, 1e-8)\n    log_y   = np.log(y_tilde)\n\n    # Design matrix for [logA, aP, aD, aB, aL]\n    M = np.vstack([\n        np.ones_like(log_y),\n        log_P,\n        log_D,\n        log_bsz,\n        log_lr\n    ]).T\n    # solve least squares\n    beta, *_ = np.linalg.lstsq(M, log_y, rcond=None)\n    # beta = [logA, aP, aD, aB, aL]\n    p0 = np.concatenate([beta, [np.log(y_inf0)]])\n\n    # 2) refine by minimizing MSE with analytic gradient\n    # bounds: keep exponents and logs in reasonable range\n    lb = [-20.0, -10.0, -10.0, -10.0, -10.0, np.log(1e-8)]\n    ub = [ 20.0,  10.0,  10.0,  10.0,  10.0, np.log(y_min)]\n    bounds = list(zip(lb, ub))\n\n    # reuse logs computed above inside objective\n    def obj_and_grad(p):\n        logA, aP, aD, aB, aL, log_yinf = p\n        y_inf = np.exp(log_yinf)\n        # power\u2010law term\n        log_term = (logA\n                    + aP * log_P\n                    + aD * log_D\n                    + aB * log_bsz\n                    + aL * log_lr)\n        term = np.exp(log_term)\n        y_pred = y_inf + term\n        r = y_pred - y\n        mse = np.mean(r * r)\n\n        # gradients\n        Ninv2 = 2.0 / float(y.size)\n        g_logA      = Ninv2 * np.sum(r * term)\n        g_aP        = Ninv2 * np.sum(r * term * log_P)\n        g_aD        = Ninv2 * np.sum(r * term * log_D)\n        g_aB        = Ninv2 * np.sum(r * term * log_bsz)\n        g_aL        = Ninv2 * np.sum(r * term * log_lr)\n        g_log_yinf  = Ninv2 * np.sum(r * y_inf)\n\n        grad = np.array([\n            g_logA,\n            g_aP,\n            g_aD,\n            g_aB,\n            g_aL,\n            g_log_yinf\n        ], dtype=float)\n        return mse, grad\n\n    result = minimize(\n        fun=lambda p: obj_and_grad(p)[0],\n        x0=p0,\n        jac=lambda p: obj_and_grad(p)[1],\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={\"maxiter\":1000, \"ftol\":1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010LS initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of the main changes:\n- We reparametrize in log\u2010space so that fitting a power\u2010law becomes a linear least\u2010squares problem for an initial guess.\n- We include an explicit \u201closs floor\u201d y_inf whose logarithm is optimized as well.\n- We supply analytic gradients to L-BFGS-B and use sensible bounds to ensure numerical stability.\n- This generally converges faster, is more robust over wide hyperparameter ranges, and yields better fits (lower MSE, better R\u00b2) than the naive all\u2010power\u2010law or black\u2010box BFGS approach."]}}}