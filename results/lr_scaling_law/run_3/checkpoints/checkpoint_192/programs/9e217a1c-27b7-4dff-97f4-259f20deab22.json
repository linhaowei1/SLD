{"id": "9e217a1c-27b7-4dff-97f4-259f20deab22", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved 6-parameter scaling law for LLM training loss:\n  y_pred = y_inf + A * (P/P0)^\u03b1_P * (D/D0)^\u03b1_D * (bsz/BSZ0)^\u03b1_bsz * (lr/LR0)^\u03b1_lr\n\nParameters (6 total):\n  logA      -- log of the prefactor A\n  \u03b1_P       -- exponent on non-embedding parameter size\n  \u03b1_D       -- exponent on data size\n  \u03b1_bsz     -- exponent on batch size\n  \u03b1_lr      -- exponent on learning rate\n  log_y_inf -- log of the asymptotic minimum loss floor y_inf\n\nWe normalize each input by a mid-range constant:\n  _P0  \u2248 5e8 parameters\n  _D0  \u2248 2e10 tokens\n  _BSZ0\u2261 256\n  _LR0 \u2261 1e-3\nFit procedure:\n  1) initial y_inf \u2248 0.9\u00b7min(y)\n  2) closed\u2010form LS on log(y - y_inf) to get logA and exponents\n  3) refine all 6 params via L-BFGS-B minimizing MSE(y_pred, y)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants (geometric means of each range)\n_P0    = 5e8      # \u2248 (2.14e8\u20131e9)^(1/2)\n_D0    = 2e10     # \u2248 (4e9\u20131e11)^(1/2)\n_BSZ0  = 256.0    # \u2248 (16\u20134096)^(1/2)\n_LR0   = 1e-3     # \u2248 (1.2e-4\u20132.2e-2)^(1/2)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Compute y_pred = y_inf + A*(P/P0)^\u03b1_P*(D/D0)^\u03b1_D*(bsz/BSZ0)^\u03b1_bsz*(lr/LR0)^\u03b1_lr.\n    Inputs:\n      data_points: array\u2010like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size].\n      params:      1d array (6,) or 2d (T,6):\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: if params is (6,), shape (N,)\n              if params is (T,6), shape (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 cols, got {F}\")\n    p = np.asarray(params, dtype=float)\n    # allow single or multiple param sets\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 params, got {Pcount}\")\n\n    # unpack & floor inputs\n    lr    = np.maximum(X[:,0], 1e-12) / _LR0\n    bsz   = np.maximum(X[:,1], 1e-12) / _BSZ0\n    D     = np.maximum(X[:,2], 1e-12) / _D0\n    Psize = np.maximum(X[:,3], 1e-12) / _P0\n\n    # prepare output\n    out = np.zeros((N, T), dtype=float)\n    # vectorized loop over param sets\n    for i in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[i]\n        A_term = np.exp(logA)\n        y_inf  = np.exp(log_yinf)\n        # compute power-law term\n        term = A_term * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n        out[:, i] = y_inf + term\n\n    return out[:,0] if T==1 else out\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law:\n      1) y_inf0 = 0.9\u00b7min(y)\n      2) solve LS for log(y - y_inf0) to get logA0, \u03b1s\n      3) refine [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf] via L-BFGS-B on MSE\n    Returns:\n      params: 1d array of length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: input shapes mismatch\")\n\n    # floor y to avoid zeros\n    y = np.maximum(y, 1e-12)\n    # initial y_inf0 slightly below min(y)\n    y_min = y.min()\n    y_inf0 = max(0.9*y_min, 1e-12)\n    log_yinf0 = np.log(y_inf0)\n\n    # form z = y - y_inf0, shift if any <=0\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z = z + (abs(z.min()) + 1e-8)\n    log_z = np.log(z)\n\n    # normalize & log-features\n    lr    = np.maximum(X[:,0], 1e-12) / _LR0\n    bsz   = np.maximum(X[:,1], 1e-12) / _BSZ0\n    D     = np.maximum(X[:,2], 1e-12) / _D0\n    Psize = np.maximum(X[:,3], 1e-12) / _P0\n    xL = np.log(lr)\n    xB = np.log(bsz)\n    xD = np.log(D)\n    xP = np.log(Psize)\n\n    # build design matrix for LS: [1, xP, xD, xB, xL]\n    M = np.column_stack([np.ones(N), xP, xD, xB, xL])\n    # closed-form least-squares to get [logA0, \u03b1_P0, \u03b1_D0, \u03b1_bsz0, \u03b1_lr0]\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # initial param vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, log_yinf0], dtype=float)\n\n    # bounds: keep y_inf <= log(y_min), exponents in reasonable ranges\n    bnds = [\n        (None, None),            # logA\n        (-5.0, 5.0),             # \u03b1_P\n        (-5.0, 5.0),             # \u03b1_D\n        (-2.0, 2.0),             # \u03b1_bsz\n        (-2.0, 2.0),             # \u03b1_lr\n        (None, np.log(y_min))    # log_y_inf <= log(min_y)\n    ]\n\n    # objective: MSE in original loss space\n    def _mse(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y)**2)\n\n    res = minimize(\n        _mse,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter':1000, 'ftol':1e-12}\n    )\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ef7fd17f-e3e5-4994-ab12-c6aea436f87a", "generation": 2, "timestamp": 1754809408.1661072, "iteration_found": 155, "metrics": {"nmse": 1.784438627860074, "nmae": 1.6621080615916095, "r2": -0.7844386278600739, "combined_score": 0.35913881886078075}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'"}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1892, nmae: 0.5152, r2: 0.8108, combined_score: 0.8409\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5890)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10\u2010parameter\n    log\u2010polynomial scaling law:\n\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data    + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n    The prediction in real space is y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns:\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array\u2010like of length 10: [p0\u2026p9]\n\n    Returns:\n      y_pred: 1D np.ndarray of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative inputs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N \u00d7 10)\n    #   [1,\n    #    L_lr, L_bsz, L_data, L_param,\n    #    L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #    L_data * L_param]\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via weighted,\n    ridge\u2010regularized regression in the log\u2010domain.\n\n    We up\u2010weight large\u2010scale configurations (high data_size + high model size)\n    to improve fit in the regime of interest, and apply differential\n    ridge penalties on linear, quadratic, and cross\u2010term coefficients.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients [p0\u2026p9].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: mismatch between data_points and loss_values lengths\")\n\n    # floor to avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and targets\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix \u03a6 (N \u00d7 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # compute sample weights to emphasize large\u2010scale regimes\n    scale_signal = L_data + L_param\n    median_sig = np.median(scale_signal)\n    # exponential weighting above median\n    w = np.exp(0.5 * (scale_signal - median_sig))\n    W_sqrt = np.sqrt(w)[:, np.newaxis]  # shape (N,1)\n\n    # weighted normal equations: (\u03a6\u1d40 W \u03a6 + ridge) p = \u03a6\u1d40 W y\n    Phi_w = Phi * W_sqrt\n    y_w   = logy * W_sqrt.ravel()\n    A = Phi_w.T.dot(Phi_w)   # (10 \u00d7 10)\n    b = Phi_w.T.dot(y_w)     # (10,)\n\n    # differential ridge penalties\n    #   intercept index 0: none\n    #   linear        1\u20134: \u03bb_lin\n    #   quadratic     5\u20138: \u03bb_quad\n    #   cross\u2010term    9  : \u03bb_cross\n    \u03bb_lin   = 1e-6\n    \u03bb_quad  = 1e-4\n    \u03bb_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += \u03bb_lin\n    for i in range(5, 9):\n        A[i, i] += \u03bb_quad\n    A[9, 9] += \u03bb_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.1892), Performs well on nmae (0.5152), Performs well on r2 (0.8108), Performs well on combined_score (0.8409)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter log-polynomial scaling law:\n    \n      log y_pred = p0\n                 + p1 * log(lr)\n                 + p2 * log(bsz)\n                 + p3 * log(data_size)\n                 + p4 * log(non_embedding_param_size)\n                 + p5 * [log(lr)]^2\n                 + p6 * [log(bsz)]^2\n                 + p7 * [log(data_size)]^2\n                 + p8 * [log(non_embedding_param_size)]^2\n                 + p9 * (log(data_size) * log(non_embedding_param_size))\n                 \n    Then y_pred = exp(log y_pred).\n    \n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # [log(lr)]^2\n        L_bsz**2,             # [log(bsz)]^2\n        L_data**2,            # [log(data_size)]^2\n        L_param**2,           # [log(non_embedding_param_size)]^2\n        L_data * L_param      # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form ridge regression\n    in the log-domain. Minimizes squared error on log(loss).\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge regularization strength\n    ridge = 1e-6\n    \n    # normal equations: (\u03a6\u1d40 \u03a6 + \u03bb I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log of the LM loss as a simple but expressive\n2nd\u2010order polynomial in the log\u2010features:\n   L_lr    = log(lr)\n   L_bsz   = log(batch size)\n   L_data  = log(data size)\n   L_param = log(non\u2010embedding parameter size)\n\nSpecifically:\n   log(loss) \u2248 p0\n              + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n              + p5*(L_lr**2) + p6*(L_bsz**2) + p7*(L_data**2) + p8*(L_param**2)\n              + p9*(L_data * L_param)\n\nThis form captures individual power\u2010law effects, a quadratic effect\nin each scale, and a key interaction between data size and model size.\nWe fit via closed\u2010form ridge\u2010regularized least squares in the log\u2010domain.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the improved scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1 (L_lr), p2 (L_bsz), p3 (L_data), p4 (L_param),\n                    p5 (L_lr^2), p6 (L_bsz^2), p7 (L_data^2), p8 (L_param^2),\n                    p9 (L_data * L_param)]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters but got {p.size}\")\n\n    # floor to avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 of shape (N,10)\n    # columns: [1, L_lr, L_bsz, L_data, L_param,\n    #           L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #           L_data * L_param]\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # predict in log\u2010domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the improved scaling\u2010law parameters via ridge\u2010regularized\n    least squares in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to diagonal entries 1..9\n    idx = np.arange(1, 10)\n    A[idx, idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5890, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10\u2010parameter\n    log\u2010polynomial scaling law:\n\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data    + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n    The prediction in real space is y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns:\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array\u2010like of length 10: [p0\u2026p9]\n\n    Returns:\n      y_pred: 1D np.ndarray of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative inputs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N \u00d7 10)\n    #   [1,\n    #    L_lr, L_bsz, L_data, L_param,\n    #    L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #    L_data * L_param]\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via weighted,\n    ridge\u2010regularized regression in the log\u2010domain.\n\n    We up\u2010weight large\u2010scale configurations (high data_size + high model size)\n    to improve fit in the regime of interest, and apply differential\n    ridge penalties on linear, quadratic, and cross\u2010term coefficients.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients [p0\u2026p9].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: mismatch between data_points and loss_values lengths\")\n\n    # floor to avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and targets\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix \u03a6 (N \u00d7 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # compute sample weights to emphasize large\u2010scale regimes\n    scale_signal = L_data + L_param\n    median_sig = np.median(scale_signal)\n    # exponential weighting above median\n    w = np.exp(0.5 * (scale_signal - median_sig))\n    W_sqrt = np.sqrt(w)[:, np.newaxis]  # shape (N,1)\n\n    # weighted normal equations: (\u03a6\u1d40 W \u03a6 + ridge) p = \u03a6\u1d40 W y\n    Phi_w = Phi * W_sqrt\n    y_w   = logy * W_sqrt.ravel()\n    A = Phi_w.T.dot(Phi_w)   # (10 \u00d7 10)\n    b = Phi_w.T.dot(y_w)     # (10,)\n\n    # differential ridge penalties\n    #   intercept index 0: none\n    #   linear        1\u20134: \u03bb_lin\n    #   quadratic     5\u20138: \u03bb_quad\n    #   cross\u2010term    9  : \u03bb_cross\n    \u03bb_lin   = 1e-6\n    \u03bb_quad  = 1e-4\n    \u03bb_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += \u03bb_lin\n    for i in range(5, 9):\n        A[i, i] += \u03bb_quad\n    A[9, 9] += \u03bb_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.7553, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# -----------------------------------------------------------------------------\n# Normalization constants (choose mid\u2010range values to improve numerical stability)\n# -----------------------------------------------------------------------------\n_P0   = 5e8        # ~5\u00d710^8 non\u2010embedding parameters\n_D0   = 5e10       # ~5\u00d710^10 training tokens\n_BSZ0 = 512.0      # typical batch size\n_LR0  = 1e-3       # typical learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 6\u2010parameter\n    power\u2010law with an asymptotic floor:\n\n      y_pred = y_inf + A * (P/P0)^aP * (D/D0)^aD * (bsz/BSZ0)^aB * (lr/LR0)^aL\n\n    where params = [logA, aP, aD, aB, aL, log_yinf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n\n    # unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # unpack & normalize features (avoid zeros)\n    lr    = np.maximum(X[:, 0], 1e-12) / _LR0\n    bsz   = np.maximum(X[:, 1], 1e-12) / _BSZ0\n    D     = np.maximum(X[:, 2], 1e-12) / _D0\n    Psize = np.maximum(X[:, 3], 1e-12) / _P0\n\n    # compute power\u2010law term and add floor\n    term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law scaling law by minimizing MSE\n    in the original loss space via L-BFGS-B.\n    \n    Returns:\n      params: array of length 6 [logA, aP, aD, aB, aL, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure 2D X\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor losses to avoid zeros\n    y = np.maximum(y, 1e-12)\n    y_min = np.min(y)\n\n    # initial guess for y_inf ~ 90% of minimum observed loss\n    init_log_yinf = np.log(y_min * 0.9 + 1e-12)\n    # initial guess for A so that mean term \u2248 mean(y - y_inf)\n    init_logA = np.log(max(np.mean(y) - np.exp(init_log_yinf), 1e-6))\n    # initial exponents (negative slopes, since more data/params typically reduce loss)\n    init_alphas = np.array([-0.5, -0.4, -0.2, -0.1], dtype=float)\n\n    p0 = np.hstack([init_logA, init_alphas, init_log_yinf])\n\n    # bounds: keep exponents in reasonable range, and floor below min loss\n    bounds = [\n        (-10, 10),    # logA\n        (-5, 5),      # aP\n        (-5, 5),      # aD\n        (-2, 2),      # aB\n        (-2, 2),      # aL\n        (-20, np.log(y_min))  # log_yinf\n    ]\n\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.785), Excellent nmae (1.662)\n\n\n### Inspiration 4 (Score: 0.7553, Type: Alternative)\n```python\nimport numpy as np\n\n# Try to import SciPy for nonlinear refinement; if unavailable, we'll fall back to\n# the closed\u2010form initialization.\ntry:\n    from scipy.optimize import minimize\nexcept ImportError:\n    minimize = None\n\n# Normalization constants (geometric means of typical ranges):\n_P0   = 5e8        # ~5e8 non\u2010embedding parameters\n_D0   = 2e10       # ~2e10 training tokens\n_BSZ0 = 256.0      # batch size\n_LR0  = 1e-3       # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6\u2010parameter power law plus floor:\n      y_pred = y_inf + A * (P/P0)^\u03b1_P * (D/D0)^\u03b1_D * (bsz/BSZ0)^\u03b1_bsz * (lr/LR0)^\u03b1_lr\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of shape (6,) or (T,6), in order\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns shape (N,); if params is (T,6), returns (N,T).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, Df = X.shape\n    if Df != 4:\n        raise ValueError(f\"scaling_law_func: expected input with 4 features, got {Df}\")\n\n    p = np.asarray(params, dtype=float)\n    # accept either a single set or multiple sets\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters per set, got {Pn}\")\n\n    # unpack hyperparameters\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # normalize\n    xL = lr  / _LR0\n    xB = bsz / _BSZ0\n    xD = D   / _D0\n    xP = Psize / _P0\n\n    # allocate output\n    y_out = np.zeros((N, T), dtype=float)\n\n    # compute prediction for each parameter set\n    for i in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[i]\n        A_term = np.exp(logA)\n        y_inf  = np.exp(log_yinf)\n        # power\u2010law multipliers\n        term = A_term * (xP ** aP) * (xD ** aD) * (xB ** aB) * (xL ** aL)\n        y_out[:, i] = y_inf + term\n\n    # return (N,) if only one parameter set, else (N,T)\n    return y_out[:, 0] if T == 1 else y_out\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law scaling law by:\n      1) initializing y_inf \u2248 0.9 * min(y)\n      2) closed\u2010form least squares on log(y - y_inf)\n      3) (optionally) refining all 6 params via L-BFGS-B minimizing MSE\n\n    Returns:\n      params: 1D array of length 6 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, Df = X.shape\n    if Df != 4:\n        raise ValueError(f\"fit_scaling_law: expected input with 4 features, got {Df}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # avoid zeros or negatives\n    y = np.maximum(y, 1e-12)\n    X[:, 0] = np.maximum(X[:, 0], 1e-12)\n    X[:, 1] = np.maximum(X[:, 1], 1e-12)\n    X[:, 2] = np.maximum(X[:, 2], 1e-12)\n    X[:, 3] = np.maximum(X[:, 3], 1e-12)\n\n    # initial floor approx: slightly below the minimum observed loss\n    y_min = y.min()\n    y_inf0 = max(0.9 * y_min, 1e-12)\n    log_yinf0 = np.log(y_inf0)\n\n    # target for LS: z = y - y_inf0\n    z = y - y_inf0\n    # shift if any non\u2010positive\n    if np.any(z <= 0):\n        z += (abs(z.min()) + 1e-8)\n    log_z = np.log(z)\n\n    # normalized logs of features\n    lr    = X[:, 0] / _LR0\n    bsz   = X[:, 1] / _BSZ0\n    D     = X[:, 2] / _D0\n    Psize = X[:, 3] / _P0\n\n    xL = np.log(lr)\n    xB = np.log(bsz)\n    xD = np.log(D)\n    xP = np.log(Psize)\n\n    # design matrix for LS: columns [1, xP, xD, xB, xL]\n    M = np.column_stack([np.ones(N), xP, xD, xB, xL])\n\n    # solve initial least squares for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # pack initial parameter vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, log_yinf0], dtype=float)\n\n    # if SciPy is present, refine by minimizing MSE on the original loss values\n    if minimize is not None:\n        # bounds: allow exponents in reasonable intervals\n        #   logA:    free\n        #   \u03b1_P,\u03b1_D in [-2,2]\n        #   \u03b1_bsz,\u03b1_lr in [-1,1]\n        #   log_y_inf \u2264 log(y_min)\n        bnds = [\n            (None,       None),\n            (-2.0,        2.0),\n            (-2.0,        2.0),\n            (-1.0,        1.0),\n            (-1.0,        1.0),\n            (None, np.log(y_min))\n        ]\n\n        def _mse(p):\n            y_pred = scaling_law_func(X, p)\n            return np.mean((y_pred - y) ** 2)\n\n        res = minimize(\n            _mse,\n            p0,\n            method='L-BFGS-B',\n            bounds=bnds,\n            options={'ftol': 1e-12, 'maxiter': 2000}\n        )\n        if res.success:\n            return res.x\n\n    # fallback: return the closed\u2010form initialization\n    return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.784), Excellent nmae (1.662)\n\n\n### Inspiration 5 (Score: 0.6144, Type: Alternative)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log of the LM loss as a simple but expressive\n2nd\u2010order polynomial in the log\u2010features:\n   L_lr    = log(lr)\n   L_bsz   = log(batch size)\n   L_data  = log(data size)\n   L_param = log(non\u2010embedding parameter size)\n\nSpecifically:\n   log(loss) \u2248 p0\n              + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n              + p5*(L_lr**2) + p6*(L_bsz**2) + p7*(L_data**2) + p8*(L_param**2)\n              + p9*(L_data * L_param)\n\nThis form captures individual power\u2010law effects, a quadratic effect\nin each scale, and a key interaction between data size and model size.\nWe fit via closed\u2010form ridge\u2010regularized least squares in the log\u2010domain.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the improved scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1 (L_lr), p2 (L_bsz), p3 (L_data), p4 (L_param),\n                    p5 (L_lr^2), p6 (L_bsz^2), p7 (L_data^2), p8 (L_param^2),\n                    p9 (L_data * L_param)]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters but got {p.size}\")\n\n    # floor to avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 of shape (N,10)\n    # columns: [1, L_lr, L_bsz, L_data, L_param,\n    #           L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #           L_data * L_param]\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # predict in log\u2010domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the improved scaling\u2010law parameters via ridge\u2010regularized\n    least squares in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to diagonal entries 1..9\n    idx = np.arange(1, 10)\n    A[idx, idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is an improved 6-parameter power\u2010law + floor model.  We first normalize hyperparameters to typical mid\u2010range values for numerical stability, then fit an initial closed\u2010form least\u2010squares solution for  \nlog(y \u2013 y_inf), and finally refine all 6 parameters via a bounded L\u2010BFGS\u2010B sweep on MSE in the original loss space.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 6-parameter scaling law for LLM training loss:\n  y_pred = y_inf + A * (P/P0)^\u03b1_P * (D/D0)^\u03b1_D * (bsz/BSZ0)^\u03b1_bsz * (lr/LR0)^\u03b1_lr\n\nParameters (6 total):\n  logA      -- log of the prefactor A\n  \u03b1_P       -- exponent on non-embedding parameter size\n  \u03b1_D       -- exponent on data size\n  \u03b1_bsz     -- exponent on batch size\n  \u03b1_lr      -- exponent on learning rate\n  log_y_inf -- log of the asymptotic minimum loss floor y_inf\n\nWe normalize each input by a mid-range constant:\n  _P0  \u2248 5e8 parameters\n  _D0  \u2248 2e10 tokens\n  _BSZ0\u2261 256\n  _LR0 \u2261 1e-3\nFit procedure:\n  1) initial y_inf \u2248 0.9\u00b7min(y)\n  2) closed\u2010form LS on log(y - y_inf) to get logA and exponents\n  3) refine all 6 params via L-BFGS-B minimizing MSE(y_pred, y)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants (geometric means of each range)\n_P0    = 5e8      # \u2248 (2.14e8\u20131e9)^(1/2)\n_D0    = 2e10     # \u2248 (4e9\u20131e11)^(1/2)\n_BSZ0  = 256.0    # \u2248 (16\u20134096)^(1/2)\n_LR0   = 1e-3     # \u2248 (1.2e-4\u20132.2e-2)^(1/2)\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Compute y_pred = y_inf + A*(P/P0)^\u03b1_P*(D/D0)^\u03b1_D*(bsz/BSZ0)^\u03b1_bsz*(lr/LR0)^\u03b1_lr.\n    Inputs:\n      data_points: array\u2010like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size].\n      params:      1d array (6,) or 2d (T,6):\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: if params is (6,), shape (N,)\n              if params is (T,6), shape (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 cols, got {F}\")\n    p = np.asarray(params, dtype=float)\n    # allow single or multiple param sets\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 params, got {Pcount}\")\n\n    # unpack & floor inputs\n    lr    = np.maximum(X[:,0], 1e-12) / _LR0\n    bsz   = np.maximum(X[:,1], 1e-12) / _BSZ0\n    D     = np.maximum(X[:,2], 1e-12) / _D0\n    Psize = np.maximum(X[:,3], 1e-12) / _P0\n\n    # prepare output\n    out = np.zeros((N, T), dtype=float)\n    # vectorized loop over param sets\n    for i in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[i]\n        A_term = np.exp(logA)\n        y_inf  = np.exp(log_yinf)\n        # compute power-law term\n        term = A_term * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n        out[:, i] = y_inf + term\n\n    return out[:,0] if T==1 else out\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law:\n      1) y_inf0 = 0.9\u00b7min(y)\n      2) solve LS for log(y - y_inf0) to get logA0, \u03b1s\n      3) refine [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf] via L-BFGS-B on MSE\n    Returns:\n      params: 1d array of length 6.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: input shapes mismatch\")\n\n    # floor y to avoid zeros\n    y = np.maximum(y, 1e-12)\n    # initial y_inf0 slightly below min(y)\n    y_min = y.min()\n    y_inf0 = max(0.9*y_min, 1e-12)\n    log_yinf0 = np.log(y_inf0)\n\n    # form z = y - y_inf0, shift if any <=0\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z = z + (abs(z.min()) + 1e-8)\n    log_z = np.log(z)\n\n    # normalize & log-features\n    lr    = np.maximum(X[:,0], 1e-12) / _LR0\n    bsz   = np.maximum(X[:,1], 1e-12) / _BSZ0\n    D     = np.maximum(X[:,2], 1e-12) / _D0\n    Psize = np.maximum(X[:,3], 1e-12) / _P0\n    xL = np.log(lr)\n    xB = np.log(bsz)\n    xD = np.log(D)\n    xP = np.log(Psize)\n\n    # build design matrix for LS: [1, xP, xD, xB, xL]\n    M = np.column_stack([np.ones(N), xP, xD, xB, xL])\n    # closed-form least-squares to get [logA0, \u03b1_P0, \u03b1_D0, \u03b1_bsz0, \u03b1_lr0]\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # initial param vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, log_yinf0], dtype=float)\n\n    # bounds: keep y_inf <= log(y_min), exponents in reasonable ranges\n    bnds = [\n        (None, None),            # logA\n        (-5.0, 5.0),             # \u03b1_P\n        (-5.0, 5.0),             # \u03b1_D\n        (-2.0, 2.0),             # \u03b1_bsz\n        (-2.0, 2.0),             # \u03b1_lr\n        (None, np.log(y_min))    # log_y_inf <= log(min_y)\n    ]\n\n    # objective: MSE in original loss space\n    def _mse(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y)**2)\n\n    res = minimize(\n        _mse,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter':1000, 'ftol':1e-12}\n    )\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- Normalized each hyperparameter by a mid\u2010range constant (_P0,_D0,_BSZ0,_LR0) to improve numerical conditioning.\n- Solved for an initial floor y_inf\u2080 \u2248 0.9\u00b7min(y), then performed closed\u2010form least squares on log(y\u2013y_inf\u2080) to obtain starting values.\n- Added soft bounds on exponents and on the floor (y_inf \u2264 min observed loss) when refining with L-BFGS-B.\n- Returns the refined parameter vector if optimization succeeds, otherwise falls back to the closed\u2010form initialization."]}}}