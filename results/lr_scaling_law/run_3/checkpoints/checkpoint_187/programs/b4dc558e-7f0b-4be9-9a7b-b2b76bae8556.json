{"id": "b4dc558e-7f0b-4be9-9a7b-b2b76bae8556", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an 11-parameter 2nd-order log-polynomial scaling law with two cross-interactions:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                  + p9*(L_data * L_param) + p10*(L_lr * L_bsz)\n    where L_x = log(x). The result is exponentiated back to the original loss space.\n    \n    Inputs:\n      data_points: array-like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like, length 11\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p.size}\")\n    \n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    N = X_safe.shape[0]\n    \n    # build design matrix: intercept, linear, quadratic, two cross terms\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11-parameter 2nd-order log-polynomial scaling law via \n    closed-form ridge-regularized regression in the log domain.\n    Applies differential penalties: small on linear terms, moderate on\n    quadratics, stronger on cross-interactions for stability.\n    \n    Inputs:\n      data_points: array-like, shape (N,4)\n      loss_values: array-like, shape (N,)\n    Returns:\n      params:      np.ndarray, length 11\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # safe floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n    \n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    \n    # differential ridge penalties\n    # indices: 0=intercept, 1-4=linear, 5-8=quadratic, 9-10=cross\n    P = Phi.shape[1]\n    ridge = np.zeros(P, dtype=float)\n    ridge[1:5]  = 1e-6   # gentle on linear\n    ridge[5:9]  = 1e-4   # moderate on quadratics\n    ridge[9:11] = 1e-3   # stronger on interactions\n    \n    # add to diagonal\n    A[np.diag_indices(P)] += ridge\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "61e6e640-db80-4c2e-9f28-d13992aac35b", "generation": 3, "timestamp": 1754809703.7580829, "iteration_found": 182, "metrics": {"nmse": 0.6844962451320435, "nmae": 0.9804768301483663, "r2": 0.31550375486795645, "combined_score": 0.5936492900413752}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.7851840742215663, "nmae": 1.6624676768489157, "r2": -0.7851840742215663, "combined_score": 0.3590426964075941}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7852\n- nmae: 1.6625\n- r2: -0.7852\n- combined_score: 0.3590\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter log-polynomial scaling law:\n      log(y_pred) = p0\n                    + p1*L_P + p2*L_D + p3*L_bsz + p4*L_lr\n                    + p5*(L_P)^2 + p6*(L_D)^2 + p7*(L_bsz)^2 + p8*(L_lr)^2\n                    + p9*(L_P * L_D)\n    where L_x = log(x). We then exponentiate to return y_pred.\n    \n    Inputs:\n      data_points: array-like of shape (N,4) (lr, bsz, data_size, non_embedding_param_size)\n      params:      array-like of length 10: [p0\u2026p9]\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # Avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X_safe.T\n    L_lr   = np.log(lr)\n    L_bsz  = np.log(bsz)\n    L_D    = np.log(D)\n    L_P    = np.log(P)\n    \n    # Build design matrix \u03a6 (N x 10)\n    # Columns: [1, L_P, L_D, L_bsz, L_lr, L_P^2, L_D^2, L_bsz^2, L_lr^2, L_P*L_D]\n    N = X_safe.shape[0]\n    Phi = np.empty((N, 10), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L_P\n    Phi[:, 2] = L_D\n    Phi[:, 3] = L_bsz\n    Phi[:, 4] = L_lr\n    Phi[:, 5] = L_P**2\n    Phi[:, 6] = L_D**2\n    Phi[:, 7] = L_bsz**2\n    Phi[:, 8] = L_lr**2\n    Phi[:, 9] = L_P * L_D\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain.\n    \n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # Floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # Compute log-features\n    lr, bsz, D, P = X_safe.T\n    L_lr   = np.log(lr)\n    L_bsz  = np.log(bsz)\n    L_D    = np.log(D)\n    L_P    = np.log(P)\n    \n    # Build design matrix \u03a6 (N x 10) same as in scaling_law_func\n    Phi = np.empty((N, 10), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L_P\n    Phi[:, 2] = L_D\n    Phi[:, 3] = L_bsz\n    Phi[:, 4] = L_lr\n    Phi[:, 5] = L_P**2\n    Phi[:, 6] = L_D**2\n    Phi[:, 7] = L_bsz**2\n    Phi[:, 8] = L_lr**2\n    Phi[:, 9] = L_P * L_D\n    \n    # Target in log-domain\n    logy = np.log(y_safe)\n    \n    # Ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # Regularize all parameters except intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n    \n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6435)\n```python\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features,\nincluding two key cross\u2010terms for capturing interactions while keeping\nthe model compact:\n\n    log(y_pred) = p0\n                 + p1*L_lr    + p2*L_bsz\n                 + p3*L_data  + p4*L_param\n                 + p5*L_lr^2  + p6*L_bsz^2\n                 + p7*L_data^2 + p8*L_param^2\n                 + p9*(L_data * L_param)\n                 + p10*(L_lr   * L_bsz)\n\nwhere L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit this via closed\u2010form ridge\u2010regularized regression with\ndifferential penalties:\n  - gentle penalty on linear terms\n  - moderate penalty on quadratic terms\n  - stronger penalty on the two interaction terms\n\nThis improves numerical stability and cross\u2010scale generalization.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a refined 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 11:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param, p10_lr_bsz]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),               # p0 intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,         # p9 interaction\n        L_lr   * L_bsz            # p10 interaction\n    ])\n\n    # predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the refined 2nd\u2010order log\u2010polynomial scaling law via\n    closed\u2010form differential ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 11 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr   * L_bsz\n    ])\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # differential ridge penalties\n    ridge_lin   = 1e-6    # linear terms (indices 1..4)\n    ridge_quad  = 1e-4    # quadratic terms (5..8)\n    ridge_cross = 1e-2    # interaction terms (9..10)\n\n    # build diagonal regularization vector\n    reg = np.zeros(11, dtype=float)\n    # linear\n    reg[1:5] = ridge_lin\n    # quadratic\n    reg[5:9] = ridge_quad\n    # interactions\n    reg[9:11] = ridge_cross\n\n    # add to A\n    A[np.diag_indices(11)] += reg\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6030)\n```python\nimport numpy as np\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix (with interaction terms)\n    from normalized log\u2010features.\n\n    Inputs:\n      logX_norm: array of shape (N,4)\n                 each column is a normalized log\u2010feature:\n                   (log x_i - \u03bc_i) / \u03c3_i\n\n    Returns:\n      Phi: array of shape (N,15) with columns\n           [1 (intercept),\n            linear terms (4),\n            squared terms (4),\n            pairwise interactions (6)]\n    \"\"\"\n    N, F = logX_norm.shape\n    # 1 intercept + F linear + F squared + C(F,2) interactions\n    P = 1 + F + F + (F*(F-1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a normalized 2nd\u2010order\n    log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 23:\n                   [ \u03bc_0..\u03bc_3,      means of log\u2010features\n                     \u03c3_0..\u03c3_3,      stds  of log\u2010features\n                     coeffs (15) ]  polynomial coefficients\n                                     (intercept, linear(4), squared(4), interactions(6))\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 23:\n        raise ValueError(f\"scaling_law_func: expected 23 parameters, got {p.size}\")\n\n    # unpack normalization stats and coeffs\n    mu    = p[0:4]\n    sigma = p[4:8]\n    coeff = p[8:]\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX   = np.log(X_safe)             # shape (N,4)\n    logX_norm = (logX - mu) / sigma     # shape (N,4)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n    log_pred = Phi.dot(coeff)              # shape (N,)\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized 2nd\u2010order log\u2010polynomial scaling law via\n    weighted ridge regression in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 23:\n              [ \u03bc_0..\u03bc_3, \u03c3_0..\u03c3_3, coeffs(15) ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values length mismatch\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)   # (N,4)\n    logy = np.log(y_safe)   # (N,)\n\n    # compute normalization stats\n    mu    = np.mean(logX, axis=0)               # (4,)\n    sigma = np.std(logX, axis=0, ddof=1)        # (4,)\n    sigma = np.maximum(sigma, 1e-8)             # avoid zero\u2010division\n\n    # normalize features\n    logX_norm = (logX - mu) / sigma             # (N,4)\n\n    # build design matrix \u03a6 in normalized space\n    Phi = _build_design_matrix(logX_norm)       # (N,15)\n\n    # emphasize large\u2010scale configs in fitting\n    combined = logX[:, 2] + logX[:, 3]          # log(data_size) + log(param_size)\n    median_comb = np.median(combined)\n    w = np.exp(0.75 * (combined - median_comb)) # (N,)\n    W_sqrt = np.sqrt(w)[:, None]                # (N,1)\n\n    # weighted normal equations\n    Phi_w = Phi * W_sqrt                        # each row scaled\n    y_w   = logy * W_sqrt.ravel()               # (N,)\n\n    A = Phi_w.T.dot(Phi_w)                      # (15,15)\n    b = Phi_w.T.dot(y_w)                        # (15,)\n\n    # ridge regularization on non\u2010intercept terms\n    ridge = 1e-3\n    P = Phi.shape[1]\n    for i in range(1, P):\n        A[i, i] += ridge\n\n    # solve for coefficients\n    coeff = np.linalg.solve(A, b)               # (15,)\n\n    # pack parameters: normalization stats + coefficients\n    params = np.concatenate([mu, sigma, coeff]) # length 4 + 4 + 15 = 23\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 6\u2010parameter power\u2010law model with an asymptotic floor:\n      y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_lr\n\n    where:\n      lr    = learning rate\n      bsz   = batch size\n      D     = data_size (training tokens)\n      P     = non_embedding_param_size\n\n    params is a length\u20106 vector:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n\n    # unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # unpack and floor inputs\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # compute power\u2010law term\n    term   = A * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n    y_pred = y_inf + term\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law scaling law with asymptotic floor\n    by minimizing mean\u2010squared error in the original loss space via L-BFGS-B.\n\n    Returns params: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid zero or negative\n    y_safe = np.maximum(y, 1e-12)\n    min_y  = np.min(y_safe)\n\n    # initial guesses\n    init_log_yinf = np.log(min_y * 0.1 + 1e-12)\n    init_logA     = np.log(max(np.median(y_safe) - np.exp(init_log_yinf), 1e-12))\n    init_alphas   = np.zeros(4, dtype=float)\n    p0 = np.hstack([init_logA, init_alphas, init_log_yinf])\n\n    # bounds for stability\n    bounds = [(-10, 10)]            +  # logA\n             [(-5, 5)] * 4          +  # \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr\n             [(-20, np.log(min_y))]   # log_y_inf\n\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe)**2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.7554, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved 6-parameter power-law scaling law with an asymptotic loss floor,\nnormalized for numerical stability.  We model:\n\n  y_pred = y_inf + A * (P/P0)^\u03b1_P * (D/D0)^\u03b1_D * (bsz/BSZ0)^\u03b1_bsz * (lr/LR0)^\u03b1_lr\n\nwhere\n  P  = non-embedding parameter count,\n  D  = training data size (tokens),\n  bsz = batch size,\n  lr  = learning rate.\n\nWe reparameterize A and y_inf in log-space:\n  logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf.\n\nFitting is done by:\n  1) initialize y_inf near the minimum observed loss,\n  2) linear least-squares in log-domain for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr],\n     using normalized features,\n  3) refine all 6 parameters by L-BFGS-B minimizing MSE on original losses.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# normalization constants (fixed, not data-dependent)\n_P0   = 5e8        # ~5e8 non-embedding parameters\n_D0   = 5e10       # ~5e10 tokens\n_BSZ0 = 512.0      # typical batch size\n_LR0  = 1e-3       # typical learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 6-parameter power law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      If params is 1D, returns y_pred (N,) array.\n      If params is (T,6), returns y_pred (N,T) array.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float)\n    # ensure param sets in rows\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 params per set, got {Pn}\")\n\n    # unpack features\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # normalize and take logs\n    xL = np.log(lr  / _LR0)\n    xB = np.log(bsz / _BSZ0)\n    xD = np.log(D   / _D0)\n    xP = np.log(Psize / _P0)\n\n    # prepare output\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # power-law term\n        term = np.exp(logA + aP*xP + aD*xD + aB*xB + aL*xL)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    return y_all[:, 0] if T == 1 else y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 6:\n              [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: mismatch between data points and losses\")\n\n    # avoid non-positive before subtracting floor or logging\n    y = np.maximum(y, 1e-12)\n    # initial y_inf near minimum observed loss\n    y_min = np.min(y)\n    y_inf0 = max(0.8 * y_min, 1e-12)\n    # build target z = y - y_inf0, shift to positive if needed\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z += (float(abs(np.min(z))) + 1e-8)\n    log_z = np.log(z)\n\n    # unpack and normalize features\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    xL = np.log(lr  / _LR0)\n    xB = np.log(bsz / _BSZ0)\n    xD = np.log(D   / _D0)\n    xP = np.log(Psize / _P0)\n\n    # design matrix for initial linear LS: [1, xP, xD, xB, xL]\n    M = np.vstack([np.ones(N), xP, xD, xB, xL]).T\n    # solve least squares: log_z \u2248 M @ sol\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # initialize parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    p0 = np.concatenate([sol, [np.log(y_inf0)]])\n\n    # bounds for refine:\n    #   logA: unrestricted\n    #   \u03b1_P,\u03b1_D in [-3,3], \u03b1_bsz,\u03b1_lr in [-3,3]\n    #   log_y_inf \u2264 log(y_min)\n    bnds = [\n        (None, None),\n        (-3.0, 3.0),\n        (-3.0, 3.0),\n        (-3.0, 3.0),\n        (-3.0, 3.0),\n        (None, np.log(y_min))\n    ]\n\n    # objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # refine by L-BFGS-B\n    try:\n        res = minimize(_obj, p0, method='L-BFGS-B', bounds=bnds,\n                       options={'ftol':1e-12, 'maxiter':1000})\n        if res.success:\n            return res.x\n        else:\n            return p0\n    except Exception:\n        # fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.786), Excellent nmae (1.663)\n\n\n### Inspiration 4 (Score: 1.0407, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss as the sum of an asymptotic floor y_inf and\na single anisotropic power\u2010law term in log\u2010space:\n    y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * (lr * bsz)^{\u03b1_E}\n\nwhere:\n  P   = non\u2010embedding parameter count\n  D   = data size (tokens)\n  lr  = learning rate\n  bsz = batch size\n\nWe fit the reparameterized vector p = [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_yinf]\nby minimizing the MSE in log\u2010loss space with simple bound constraints\nvia L-BFGS-B for robustness and numerical stability.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the fitted scaling law.\n\n    Args:\n      data_points: array\u2010like, shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 5:\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_yinf]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {p.size}\")\n\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # avoid zeros in logs\n    eps = 1e-12\n    logP = np.log(np.maximum(Psize, eps))\n    logD = np.log(np.maximum(D, eps))\n    logE = np.log(np.maximum(lr * bsz, eps))\n\n    # unpack params\n    logA, alpha_P, alpha_D, alpha_E, log_yinf = p\n\n    # compute power\u2010law term\n    log_term = logA + alpha_P * logP + alpha_D * logD + alpha_E * logE\n    term     = np.exp(log_term)\n\n    # asymptotic floor\n    y_inf = np.exp(log_yinf)\n\n    # final prediction\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law by minimizing the MSE in log\u2010loss space:\n        MSE( log(y_pred) - log(y_true) )\n\n    with L-BFGS-B and simple bounds on exponents and y_inf.\n\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: numpy array of length 5: [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of samples and losses must match\")\n\n    # safe floors\n    eps = 1e-12\n    y_safe = np.maximum(y, eps)\n    lr     = X[:, 0]\n    bsz    = X[:, 1]\n    D      = X[:, 2]\n    Psize  = X[:, 3]\n\n    logP = np.log(np.maximum(Psize, eps))\n    logD = np.log(np.maximum(D, eps))\n    logE = np.log(np.maximum(lr * bsz, eps))\n    logy = np.log(y_safe)\n\n    # initial guess: simple linear fit in log\u2010space for power term, small y_inf\n    # solve least squares: logy \u2248 c0 + c1*logP + c2*logD + c3*logE\n    A_ls = np.column_stack([np.ones(N), logP, logD, logE])\n    coef, *_ = np.linalg.lstsq(A_ls, logy, rcond=None)\n    logA0, alpha_P0, alpha_D0, alpha_E0 = coef\n    min_y = np.min(y_safe)\n    log_yinf0 = np.log(min_y * 0.01 + eps)\n\n    p0 = np.array([logA0, alpha_P0, alpha_D0, alpha_E0, log_yinf0], dtype=float)\n\n    # bounds: alpha_* in [-10,10], log_yinf <= log(0.5*min_y)\n    bounds = [\n        (None, None),                    # logA\n        (-10.0, 10.0),                   # \u03b1_P\n        (-10.0, 10.0),                   # \u03b1_D\n        (-10.0, 10.0),                   # \u03b1_E\n        (None, np.log(0.5 * min_y + eps))  # log_yinf\n    ]\n\n    def objective(p):\n        # unpack\n        logA, aP, aD, aE, log_yinf = p\n        # compute log\u2010term and stable log\u2010sum\u2010exp for y_pred\n        lt = logA + aP * logP + aD * logD + aE * logE\n        # stable log(y_inf + exp(lt))\n        M = np.maximum(log_yinf, lt)\n        log_pred = M + np.log(np.exp(log_yinf - M) + np.exp(lt - M))\n        return np.mean((log_pred - logy) ** 2)\n\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess\n        return p0.copy()\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (5.709), Excellent nmae (3.014)\n\n\n### Inspiration 5 (Score: 0.8565, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\n# Normalization constants near mid\u2010ranges for stability\n_P0   = 6e8     # ~ mid\u2010range non\u2010embedding params (214M\u20131B)\n_D0   = 5e10    # ~ mid\u2010range training tokens     (4B\u2013100B)\n_BSZ0 = 512.0   # mid\u2010range batch size             (16\u20134096)\n_LR0  = 1e-3    # mid\u2010range learning rate          (1.2e-4\u20132.2e-2)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with a 6\u2010parameter power\u2010law model with floor:\n      y_pred = y_inf\n             + exp(logA) * (P/_P0)^aP * (D/_D0)^aD * (bsz/_BSZ0)^aB * (lr/_LR0)^aL\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 6: [logA, aP, aD, aB, aL, y_inf]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, y_inf = p\n\n    # unpack and normalize to avoid extreme exponents\n    lr    = np.maximum(X[:, 0] / _LR0,   1e-12)\n    bsz   = np.maximum(X[:, 1] / _BSZ0,  1e-12)\n    D     = np.maximum(X[:, 2] / _D0,    1e-12)\n    Psize = np.maximum(X[:, 3] / _P0,    1e-12)\n\n    A = np.exp(logA)\n    term = A * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law scaling model by minimizing MSE in original loss space.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 6: [logA, aP, aD, aB, aL, y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    # ensure positivity\n    y_safe = np.maximum(y, 1e-12)\n    y_min  = y_safe.min()\n\n    # initialize floor at half the minimum observed loss\n    init_yinf   = y_min * 0.5\n    # residual above floor for A init\n    resid       = np.maximum(y_safe - init_yinf, 1e-12)\n    init_logA   = np.log(np.mean(resid))\n    # typical exponents: P & D ~ -0.5, bsz & lr ~ -0.1\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    p0          = np.concatenate(([init_logA], init_alphas, [init_yinf]))\n\n    # bounds: allow wide range for exponents, floor \u2208 [0, y_min]\n    bounds = [\n        (None, None),        # logA\n        (-5.0, 5.0),         # aP\n        (-5.0, 5.0),         # aD\n        (-5.0, 5.0),         # aB\n        (-5.0, 5.0),         # aL\n        (0.0, y_min)         # y_inf\n    ]\n\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe)**2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return result.x if result.success else p0\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.020), Excellent nmae (2.177)\n\n\n\n# Current Program\n```python\n\"\"\"\nEvolved scaling law model for LLM training hyperparameters.\nWe model the LM loss as\n   y_pred = y_inf + A * (P/P0)^{\u03b1_P} * (D/D0)^{\u03b1_D} * (bsz/bsz0)^{\u03b1_bsz} * (lr/lr0)^{\u03b1_lr}\n\nwhere:\n  - P = non\u2010embedding parameter count\n  - D = training data size (tokens)\n  - bsz = batch size\n  - lr = learning rate\n\nWe reparameterize A and y_inf in log\u2010space for numerical stability:\n   logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf\n\nFeatures are normalized by typical scales P0,D0,bsz0,lr0 to avoid large exponents.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Typical scales for normalization (midpoints of the training range)\n_P0 = 1e8          # ~1e8 parameters\n_D0 = 1e10         # ~1e10 training tokens\n_BSZ0 = 512.0      # batch size\n_LR0 = 1e-3        # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the evolved scaling law.\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 OR 2D array of shape (T,6)\n                   param order: [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns shape (N,),\n              if params is 2D (T sets), returns shape (N, T).\n    \"\"\"\n    # ensure array, then at least 2D\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, D_feat = X.shape\n    if D_feat != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {D_feat}\")\n    # pack params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"Expected params with length 6, got {Pn}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # normalize\n    lr_n  = lr  / _LR0\n    bsz_n = bsz / _BSZ0\n    D_n   = D   / _D0\n    P_n   = Psize / _P0\n\n    # allocate output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # loop over param sets\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # compute the power-law term in log\u2010space\n        # log_term = logA + aP*log(P_n) + aD*log(D_n) + aB*log(bsz_n) + aL*log(lr_n)\n        # then term = exp(log_term)\n        # we compute directly:\n        term = np.exp(logA) * (P_n ** aP) * (D_n ** aD) * (bsz_n ** aB) * (lr_n ** aL)\n        y_inf = np.exp(log_yinf)\n        # total prediction\n        y_all[:, t] = y_inf + term\n\n    # return\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing mean squared error.\n\n    Returns the optimized parameter vector:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same number of rows.\")\n\n    # initial estimates\n    y_min = np.maximum(y.min(), 1e-6)\n    # start y_inf near the smallest observed loss\n    init_yinf = y_min * 0.8\n    init_log_yinf = np.log(init_yinf)\n    # rough scale for A: average of (y - y_inf)\n    avg_term = np.maximum(np.mean(y - init_yinf), 1e-6)\n    init_logA = np.log(avg_term)\n    # initial exponents (weak negative scaling)\n    init_alphas = np.array([-0.4, -0.3, -0.1, -0.05], dtype=float)  # [\u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    p0 = np.concatenate([ [init_logA], init_alphas, [init_log_yinf] ])\n\n    # bounds: allow exponents in a reasonable range\n    # logA: free, \u03b1_P, \u03b1_D in [-2,2], \u03b1_bsz, \u03b1_lr in [-1,1], log_yinf: free\n    bnds = [\n        (None, None),\n        (-2.0, 2.0),\n        (-2.0, 2.0),\n        (-1.0, 1.0),\n        (-1.0, 1.0),\n        (None, None)\n    ]\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # optimize with L-BFGS-B\n    res = minimize(\n        _obj,\n        p0,\n        bounds=bnds,\n        method='L-BFGS-B',\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if fitting fails\n        return p0\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using an 11-parameter 2nd-order log-polynomial scaling law with two cross-interactions:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                  + p9*(L_data * L_param) + p10*(L_lr * L_bsz)\n    where L_x = log(x). The result is exponentiated back to the original loss space.\n    \n    Inputs:\n      data_points: array-like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like, length 11\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p.size}\")\n    \n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    N = X_safe.shape[0]\n    \n    # build design matrix: intercept, linear, quadratic, two cross terms\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11-parameter 2nd-order log-polynomial scaling law via \n    closed-form ridge-regularized regression in the log domain.\n    Applies differential penalties: small on linear terms, moderate on\n    quadratics, stronger on cross-interactions for stability.\n    \n    Inputs:\n      data_points: array-like, shape (N,4)\n      loss_values: array-like, shape (N,)\n    Returns:\n      params:      np.ndarray, length 11\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # safe floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n    \n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    \n    # differential ridge penalties\n    # indices: 0=intercept, 1-4=linear, 5-8=quadratic, 9-10=cross\n    P = Phi.shape[1]\n    ridge = np.zeros(P, dtype=float)\n    ridge[1:5]  = 1e-6   # gentle on linear\n    ridge[5:9]  = 1e-4   # moderate on quadratics\n    ridge[9:11] = 1e-3   # stronger on interactions\n    \n    # add to diagonal\n    A[np.diag_indices(P)] += ridge\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}