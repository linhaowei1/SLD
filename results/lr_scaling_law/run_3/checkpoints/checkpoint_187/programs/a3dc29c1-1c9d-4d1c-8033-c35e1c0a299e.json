{"id": "a3dc29c1-1c9d-4d1c-8033-c35e1c0a299e", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter power-law\n    with an additive asymptotic floor:\n\n      y_pred = y_inf + exp(logA + aP*log(P) + aD*log(D) + aB*log(bsz) + aL*log(lr))\n\n    where:\n      P   = non-embedding parameter size\n      D   = data size (tokens)\n      bsz = batch size\n      lr  = learning rate\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 or shape (T,6):\n                   [logA, aP, aD, aB, aL, log_yinf]\n\n    Returns:\n      y_pred: np.ndarray of shape (N,) if params is (6,), or (N,T) if params is (T,6).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # ensure params shape (T,6)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {Pcount}\")\n\n    # safe logs\n    eps = 1e-12\n    log_lr   = np.log(np.maximum(lr,   eps))\n    log_bsz  = np.log(np.maximum(bsz,  eps))\n    log_D    = np.log(np.maximum(D,    eps))\n    log_P    = np.log(np.maximum(Psize,eps))\n\n    # compute y_pred for each param vector\n    y_pred = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        log_term = logA + aP * log_P + aD * log_D + aB * log_bsz + aL * log_lr\n        power_term = np.exp(log_term)\n        floor = np.exp(log_yinf)\n        y_pred[:, t] = floor + power_term\n\n    return y_pred[:, 0] if T == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by:\n      1) Estimating an initial floor y_inf0 = 0.5*min(loss_values),\n      2) Doing linear least-squares on log(loss - y_inf0) to get\n         [logA, aP, aD, aB, aL],\n      3) Refining all six parameters (including log_yinf) via\n         L-BFGS-B to minimize MSE in log-space.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of length N\n\n    Returns:\n      params: np.ndarray of length 6: [logA, aP, aD, aB, aL, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n\n    # ensure positivity\n    eps = 1e-12\n    y = np.maximum(y, eps)\n    y_min = np.min(y)\n\n    # 1) initial floor guess\n    y_inf0 = 0.5 * y_min\n\n    # 2) subtract floor and linearize\n    z = y - y_inf0\n    z = np.maximum(z, eps)\n    log_z = np.log(z)\n\n    # feature logs\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    log_lr   = np.log(np.maximum(lr,   eps))\n    log_bsz  = np.log(np.maximum(bsz,  eps))\n    log_D    = np.log(np.maximum(D,    eps))\n    log_P    = np.log(np.maximum(Psize,eps))\n\n    # design matrix for [logA, aP, aD, aB, aL]\n    M = np.stack([\n        np.ones(N),\n        log_P,\n        log_D,\n        log_bsz,\n        log_lr\n    ], axis=1)\n\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # initial parameter vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # bounds to keep exponents reasonable and floor \u2264 log(y_min)\n    lb = [-np.inf, -5.0, -5.0, -5.0, -5.0, np.log(eps)]\n    ub = [ np.inf,  5.0,  5.0,  5.0,  5.0, np.log(y_min)]\n    bounds = list(zip(lb, ub))\n\n    # objective: MSE in log-space for stability\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((np.log(y_pred + eps) - np.log(y))**2)\n\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    return res.x if res.success else p0.copy()\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "cc3e1177-061e-4098-a2e0-36fba33f513b", "generation": 3, "timestamp": 1754809684.9221165, "iteration_found": 181, "metrics": {"nmse": 3.794662099544441, "nmae": 2.4455115574003528, "r2": -2.794662099544441, "combined_score": 0.2085652709697757}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3868934976149482, "nmae": 0.7363985304629478, "r2": 0.6131065023850518, "combined_score": 0.7210358990936997}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3869\n- nmae: 0.7364\n- r2: 0.6131\n- combined_score: 0.7210\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1892, nmae: 0.5152, r2: 0.8108, combined_score: 0.8409\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5890)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a weighted,\n    regularized 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # safe log\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, one cross-term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight samples to emphasize large\u2010scale configurations\n    (higher data_size and model_size), and apply light ridge on\n    linear terms, moderate on quadratic, stronger on the data\u00d7model cross-term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # weight samples by scale: up-weight larger (data_size + model_size)\n    scale_signal = L_data + L_param\n    median_s = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_s))\n    W_sqrt = np.sqrt(w)[:, None]\n\n    # weighted normal equations\n    Phi_w = Phi * W_sqrt         # each row scaled by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties\n    # intercept idx=0 (no penalty)\n    # linear idx 1-4, quadratic idx 5-8, cross-term idx 9\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.1892), Performs well on nmae (0.5152), Performs well on r2 (0.8108), Performs well on combined_score (0.8409)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 2nd-order log\u2010polynomial scaling law\n    with one key cross\u2010term. We model in the log\u2010domain:\n\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x). Finally, y_pred = exp(log(y_pred)).\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10 of fitted coefficients.\n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    # columns: [1,\n    #           L_lr, L_bsz, L_data, L_param,\n    #           L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #           L_data * L_param]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge\u2010regularization for numerical stability\n    ridge = 1e-6\n    # normal equations: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term (index 0)\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter log-polynomial scaling law:\n    \n      log y_pred = p0\n                 + p1 * log(lr)\n                 + p2 * log(bsz)\n                 + p3 * log(data_size)\n                 + p4 * log(non_embedding_param_size)\n                 + p5 * [log(lr)]^2\n                 + p6 * [log(bsz)]^2\n                 + p7 * [log(data_size)]^2\n                 + p8 * [log(non_embedding_param_size)]^2\n                 + p9 * (log(data_size) * log(non_embedding_param_size))\n                 \n    Then y_pred = exp(log y_pred).\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # [log(lr)]^2\n        L_bsz**2,             # [log(bsz)]^2\n        L_data**2,            # [log(data_size)]^2\n        L_param**2,           # [log(non_embedding_param_size)]^2\n        L_data * L_param      # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form ridge regression\n    in the log-domain. Minimizes squared error on log(loss).\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n    \n    # avoid log(0) or negatives\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge regularization strength\n    ridge = 1e-6\n    \n    # normal equations: (\u03a6\u1d40 \u03a6 + \u03bb I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5890, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a weighted,\n    regularized 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # safe log\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, one cross-term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight samples to emphasize large\u2010scale configurations\n    (higher data_size and model_size), and apply light ridge on\n    linear terms, moderate on quadratic, stronger on the data\u00d7model cross-term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # weight samples by scale: up-weight larger (data_size + model_size)\n    scale_signal = L_data + L_param\n    median_s = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_s))\n    W_sqrt = np.sqrt(w)[:, None]\n\n    # weighted normal equations\n    Phi_w = Phi * W_sqrt         # each row scaled by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties\n    # intercept idx=0 (no penalty)\n    # linear idx 1-4, quadratic idx 5-8, cross-term idx 9\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 2.2831, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved, robust scaling law model for LLM training hyperparameters.\n\nWe model the asymptotic loss floor plus a single power\u2010law term\nin log\u2010space for numerical stability and parsimony:\n    y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * (bsz * lr)^{\u03b1_E}\n\nwhere:\n    P   = non\u2010embedding parameter count\n    D   = data size (tokens)\n    bsz = batch size\n    lr  = learning rate\nand we fit the reparameterized vector:\n    p = [ logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf ]\n\nFitting is done by minimizing the mean squared error in log\u2010loss space:\n    MSE( log(y_pred) - log(y_true) ) \nwith simple box\u2010constraints to keep y_inf below the observed minimum.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the fitted scaling law.\n    Args:\n      data_points: array\u2010like of shape (N,4): [lr, bsz, data_size, P_size]\n      params:      array of shape (5,) or (T,5): [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf]\n    Returns:\n      y_pred: np.ndarray of shape (N,) if params is (5,),\n              or (N,T) if params is (T,5).\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # combine bsz and lr into a single effective exponent\n    E     = lr * bsz\n    # take logs of factors\n    logP = np.log(Psize)\n    logD = np.log(D)\n    logE = np.log(E + 1e-20)\n    # normalize params array\n    p = np.asarray(params, float)\n    if p.ndim == 1:\n        p = p.reshape(1, -1)\n    T, Pcount = p.shape\n    if Pcount != 5:\n        raise ValueError(f\"Expected params with 5 entries, got {Pcount}\")\n    # unpack parameter vectors\n    logA     = p[:, 0]   # shape (T,)\n    alpha_P  = p[:, 1]\n    alpha_D  = p[:, 2]\n    alpha_E  = p[:, 3]\n    log_yinf = p[:, 4]\n    # compute the power\u2010law term in log\u2010space: shape (N,T)\n    # log_term[n,t] = logA[t] + alpha_P[t]*logP[n] + alpha_D[t]*logD[n] + alpha_E[t]*logE[n]\n    # we broadcast: (N,1)+(1,T)*(N,1) etc.\n    log_term = (\n        logA[np.newaxis, :]\n        + np.outer(logP, alpha_P)\n        + np.outer(logD, alpha_D)\n        + np.outer(logE, alpha_E)\n    )  # shape (N,T)\n    # exponentiate the term\n    term = np.exp(log_term)\n    # exponentiate y_inf\n    y_inf = np.exp(log_yinf)[np.newaxis, :]  # shape (1,T)\n    # predicted loss\n    y_all = y_inf + term  # shape (N,T)\n    # return (N,) if single param vector\n    if y_all.shape[1] == 1:\n        return y_all[:, 0]\n    return y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law by minimizing log\u2010MSE:\n        MSE( log(y_pred) - log(y_true) )\n    with simple box\u2010constraints on exponents and y_inf.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {X.shape[1]}\")\n    # ensure y > 0\n    eps = 1e-8\n    y_safe = np.maximum(y, eps)\n    # compute logs of features once\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    E     = lr * bsz\n    logP = np.log(Psize + 1e-20)\n    logD = np.log(D + 1e-20)\n    logE = np.log(E + 1e-20)\n    # initial parameter guesses\n    min_y = np.min(y_safe)\n    p0 = np.array([\n        0.0,       # logA\n       -0.5,       # \u03b1_P\n       -0.3,       # \u03b1_D\n       -0.2,       # \u03b1_E\n        np.log(min_y * 0.05 + eps)  # log_y_inf (5% of min observed)\n    ], dtype=float)\n    # bounds: allow exponents in a reasonable range, keep y_inf below half of min(y)\n    bounds = [\n        (None, None),           # logA free\n        (-5.0, 5.0),            # \u03b1_P\n        (-5.0, 5.0),            # \u03b1_D\n        (-5.0, 5.0),            # \u03b1_E\n        (None, np.log(min_y * 0.5 + eps))  # log_y_inf \u2264 log(0.5 * min_y)\n    ]\n    # objective: mean squared error in log\u2010space\n    def objective(p):\n        logA, aP, aD, aE, log_yinf = p\n        # compute log_term\n        lt = (\n            logA\n            + aP * logP[:, None]\n            + aD * logD[:, None]\n            + aE * logE[:, None]\n        ).ravel()\n        # stable log\u2010sum\u2010exp for y_pred:\n        # log(y_inf + exp(lt)) = M + log(exp(log_yinf - M) + exp(lt - M))\n        M = np.maximum(log_yinf, lt)\n        logy_pred = M + np.log(np.exp(log_yinf - M) + np.exp(lt - M))\n        # residual in log-space\n        return np.mean((logy_pred - np.log(y_safe))**2)\n    # run L-BFGS-B\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial\n        return p0.copy()\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (40.963), Excellent nmae (8.108)\n\n\n### Inspiration 3 (Score: 0.7554, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law discovery for LLM training hyperparameters.\n\nModel form:\n    y_pred = y_inf + A * P^aP * D^aD * bsz^aB * lr^aL\n\nWe parameterize:\n    p = [logA, aP, aD, aB, aL, log_yinf]\n\nWe initialize by subtracting an initial y_inf guess and fitting\na linear least\u2010squares in log\u2010space, then refine all parameters\nvia L-BFGS-B with analytic gradients.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, aP, aD, aB, aL, log_yinf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N,T) for multiple sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features (lr,bsz,D,P), got {F}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    # Precompute logs\n    log_lr   = np.log(np.maximum(lr, 1e-12))\n    log_bsz  = np.log(np.maximum(bsz, 1.0))\n    log_D    = np.log(np.maximum(D, 1.0))\n    log_P    = np.log(np.maximum(Psize, 1.0))\n\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # log\u2010term for the power law piece\n        log_term = (logA\n                    + aP * log_P\n                    + aD * log_D\n                    + aB * log_bsz\n                    + aL * log_lr)\n        term = np.exp(log_term)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    return y_all[:, 0] if T == 1 else y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, aP, aD, aB, aL, log_yinf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # 1) Initial guess for y_inf and linear LS on log\u2010space\n    y_min = max(np.min(y), 1e-8)\n    y_inf0 = y_min * 0.5\n\n    # prevent zeros before logging\n    lr    = X[:, 0]; bsz  = X[:, 1]\n    D     = X[:, 2]; Psize = X[:, 3]\n    log_lr   = np.log(np.maximum(lr, 1e-12))\n    log_bsz  = np.log(np.maximum(bsz, 1.0))\n    log_D    = np.log(np.maximum(D, 1.0))\n    log_P    = np.log(np.maximum(Psize, 1.0))\n\n    # subtract floor and take logs\n    y_tilde = np.maximum(y - y_inf0, 1e-8)\n    log_y   = np.log(y_tilde)\n\n    # Design matrix for [logA, aP, aD, aB, aL]\n    M = np.vstack([\n        np.ones_like(log_y),\n        log_P,\n        log_D,\n        log_bsz,\n        log_lr\n    ]).T\n    # solve least squares\n    beta, *_ = np.linalg.lstsq(M, log_y, rcond=None)\n    # beta = [logA, aP, aD, aB, aL]\n    p0 = np.concatenate([beta, [np.log(y_inf0)]])\n\n    # 2) refine by minimizing MSE with analytic gradient\n    # bounds: keep exponents and logs in reasonable range\n    lb = [-20.0, -10.0, -10.0, -10.0, -10.0, np.log(1e-8)]\n    ub = [ 20.0,  10.0,  10.0,  10.0,  10.0, np.log(y_min)]\n    bounds = list(zip(lb, ub))\n\n    # reuse logs computed above inside objective\n    def obj_and_grad(p):\n        logA, aP, aD, aB, aL, log_yinf = p\n        y_inf = np.exp(log_yinf)\n        # power\u2010law term\n        log_term = (logA\n                    + aP * log_P\n                    + aD * log_D\n                    + aB * log_bsz\n                    + aL * log_lr)\n        term = np.exp(log_term)\n        y_pred = y_inf + term\n        r = y_pred - y\n        mse = np.mean(r * r)\n\n        # gradients\n        Ninv2 = 2.0 / float(y.size)\n        g_logA      = Ninv2 * np.sum(r * term)\n        g_aP        = Ninv2 * np.sum(r * term * log_P)\n        g_aD        = Ninv2 * np.sum(r * term * log_D)\n        g_aB        = Ninv2 * np.sum(r * term * log_bsz)\n        g_aL        = Ninv2 * np.sum(r * term * log_lr)\n        g_log_yinf  = Ninv2 * np.sum(r * y_inf)\n\n        grad = np.array([\n            g_logA,\n            g_aP,\n            g_aD,\n            g_aB,\n            g_aL,\n            g_log_yinf\n        ], dtype=float)\n        return mse, grad\n\n    result = minimize(\n        fun=lambda p: obj_and_grad(p)[0],\n        x0=p0,\n        jac=lambda p: obj_and_grad(p)[1],\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={\"maxiter\":1000, \"ftol\":1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010LS initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.785), Excellent nmae (1.663)\n\n\n### Inspiration 4 (Score: 0.6387, Type: Alternative)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss as an additive floor plus an exponential of a\n2nd\u2010order polynomial in the log\u2010features:\n\n    y_pred = y_inf + exp( p0\n                         + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                         + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                         + p9*(L_data * L_param) )\n\nwhere L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size],\nand y_inf is a learned asymptotic loss floor.  We fit y_inf by\nalternating closed\u2010form ridge regression for the log\u2010term coefficients\nand a moment\u2010matching update for the floor.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an additive floor and a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 11:\n                   [y_inf,\n                    p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p_all = np.asarray(params, dtype=float).ravel()\n    if p_all.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p_all.size}\")\n    # unpack floor and polynomial coefficients\n    y_inf = p_all[0]\n    p = p_all[1:]\n\n    # clamp to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix: intercept, linear, quadratic, one interaction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    log_term = Phi.dot(p)\n    return y_inf + np.exp(log_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law (floor + log\u2010polynomial) by alternating\n    ridge regression for the polynomial and a simple moment update\n    for the floor.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 11:\n              [y_inf,\n               p0,\n               p1_lr, p2_bsz, p3_data, p4_param,\n               p5_lr2, p6_bsz2, p7_data2, p8_param2,\n               p9_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # build design matrix once (for the exp\u2010term)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])  # shape (N,10)\n\n    # initialize y_inf near 90% of min observed loss\n    y_inf = max(np.min(y) * 0.9, 0.0)\n    ridge = 1e-6\n    eps = 1e-12\n\n    # alternate: solve for p given y_inf, then update y_inf by mean residual\n    for _ in range(4):\n        # residual above floor\n        z = y - y_inf\n        # ensure positivity for log\n        z = np.maximum(z, eps)\n        logz = np.log(z)\n        # closed\u2010form ridge regression for p: minimize ||Phi p - logz||^2 + ridge||p[1:]||^2\n        A = Phi.T.dot(Phi)\n        # regularize all but the intercept term p0\n        A[1:, 1:] += ridge\n        b = Phi.T.dot(logz)\n        p = np.linalg.solve(A, b)\n        # update floor by mean of residuals\n        term = np.exp(Phi.dot(p))\n        y_inf = np.mean(y - term)\n        # enforce non-negative floor\n        if y_inf < 0:\n            y_inf = 0.0\n\n    # pack parameters\n    params = np.empty(11, dtype=float)\n    params[0] = y_inf\n    params[1:] = p\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.907), NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.7552, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants to keep feature scales ~1\nP0   = 1e8     # ~1e8 non\u2010embedding parameters\nD0   = 1e10    # ~1e10 training tokens\nBSZ0 = 512.0   # batch size\nLR0  = 1e-3    # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter power\u2010law with asymptotic floor:\n      y_pred = y_inf + A * (P/P0)^a_P * (D/D0)^a_D * (bsz/BSZ0)^a_bsz * (lr/LR0)^a_lr\n\n    data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array shape (6,) or (T,6): [logA, a_P, a_D, a_bsz, a_lr, log_yinf]\n    Returns:\n      y_pred: shape (N,) if single param row, or (N,T) for multiple.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # normalize features\n    lr   = X[:, 0] / LR0\n    bsz  = X[:, 1] / BSZ0\n    D    = X[:, 2] / D0\n    P    = X[:, 3] / P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (_,6), got {p.shape}\")\n    # unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p.T\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute term via broadcasting: shape (N,1) ** (1,T) \u2192 (N,T)\n    term = (\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :]) *\n        (A[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # if only one parameter set, return (N,)\n    return y_pred[:, 0] if y_pred.shape[1] == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      (1) estimating y_inf via the min observed loss,\n      (2) doing linear least\u2010squares on log(y \u2212 y_inf),\n      (3) refining with L-BFGS-B to minimize MSE in original space.\n\n    Returns: array [logA, a_P, a_D, a_bsz, a_lr, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"Mismatch between data_points shape and loss_values length.\")\n\n    # ensure positivity\n    y = np.maximum(y, 1e-12)\n    y_min = np.min(y)\n\n    # 1) Initial floor estimate\n    y_inf0 = y_min * 0.9\n\n    # 2) Linearized power\u2010law fit on log(y - y_inf0)\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z += (abs(np.min(z)) + 1e-12)\n    log_z = np.log(z)\n\n    # normalize features for linear fit\n    lr   = X[:, 0] / LR0\n    bsz  = X[:, 1] / BSZ0\n    D    = X[:, 2] / D0\n    P    = X[:, 3] / P0\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix: [1, log_P, log_D, log_bsz, log_lr]\n    M = np.stack([np.ones(N), log_P, log_D, log_bsz, log_lr], axis=1)\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # pack initial params\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # bounds for stable optimization\n    bounds = [\n        (None, None),                 # logA\n        (-5.0, 5.0),                  # a_P\n        (-5.0, 5.0),                  # a_D\n        (-5.0, 5.0),                  # a_bsz\n        (-5.0, 5.0),                  # a_lr\n        (np.log(1e-12), np.log(y_min))# log_yinf\n    ]\n\n    # objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        _obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.783), Excellent nmae (1.662)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 2nd-order log\u2010polynomial scaling law\n    with one key cross\u2010term. We model in the log\u2010domain:\n\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x). Finally, y_pred = exp(log(y_pred)).\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10 of fitted coefficients.\n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    # columns: [1,\n    #           L_lr, L_bsz, L_data, L_param,\n    #           L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #           L_data * L_param]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge\u2010regularization for numerical stability\n    ridge = 1e-6\n    # normal equations: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term (index 0)\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter power-law\n    with an additive asymptotic floor:\n\n      y_pred = y_inf + exp(logA + aP*log(P) + aD*log(D) + aB*log(bsz) + aL*log(lr))\n\n    where:\n      P   = non-embedding parameter size\n      D   = data size (tokens)\n      bsz = batch size\n      lr  = learning rate\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 6 or shape (T,6):\n                   [logA, aP, aD, aB, aL, log_yinf]\n\n    Returns:\n      y_pred: np.ndarray of shape (N,) if params is (6,), or (N,T) if params is (T,6).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # ensure params shape (T,6)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {Pcount}\")\n\n    # safe logs\n    eps = 1e-12\n    log_lr   = np.log(np.maximum(lr,   eps))\n    log_bsz  = np.log(np.maximum(bsz,  eps))\n    log_D    = np.log(np.maximum(D,    eps))\n    log_P    = np.log(np.maximum(Psize,eps))\n\n    # compute y_pred for each param vector\n    y_pred = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        log_term = logA + aP * log_P + aD * log_D + aB * log_bsz + aL * log_lr\n        power_term = np.exp(log_term)\n        floor = np.exp(log_yinf)\n        y_pred[:, t] = floor + power_term\n\n    return y_pred[:, 0] if T == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by:\n      1) Estimating an initial floor y_inf0 = 0.5*min(loss_values),\n      2) Doing linear least-squares on log(loss - y_inf0) to get\n         [logA, aP, aD, aB, aL],\n      3) Refining all six parameters (including log_yinf) via\n         L-BFGS-B to minimize MSE in log-space.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of length N\n\n    Returns:\n      params: np.ndarray of length 6: [logA, aP, aD, aB, aL, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n\n    # ensure positivity\n    eps = 1e-12\n    y = np.maximum(y, eps)\n    y_min = np.min(y)\n\n    # 1) initial floor guess\n    y_inf0 = 0.5 * y_min\n\n    # 2) subtract floor and linearize\n    z = y - y_inf0\n    z = np.maximum(z, eps)\n    log_z = np.log(z)\n\n    # feature logs\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    log_lr   = np.log(np.maximum(lr,   eps))\n    log_bsz  = np.log(np.maximum(bsz,  eps))\n    log_D    = np.log(np.maximum(D,    eps))\n    log_P    = np.log(np.maximum(Psize,eps))\n\n    # design matrix for [logA, aP, aD, aB, aL]\n    M = np.stack([\n        np.ones(N),\n        log_P,\n        log_D,\n        log_bsz,\n        log_lr\n    ], axis=1)\n\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # initial parameter vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # bounds to keep exponents reasonable and floor \u2264 log(y_min)\n    lb = [-np.inf, -5.0, -5.0, -5.0, -5.0, np.log(eps)]\n    ub = [ np.inf,  5.0,  5.0,  5.0,  5.0, np.log(y_min)]\n    bounds = list(zip(lb, ub))\n\n    # objective: MSE in log-space for stability\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((np.log(y_pred + eps) - np.log(y))**2)\n\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    return res.x if res.success else p0.copy()\n\n# EVOLVE-BLOCK-END\n```"]}}}