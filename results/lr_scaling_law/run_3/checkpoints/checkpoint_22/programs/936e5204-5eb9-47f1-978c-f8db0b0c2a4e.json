{"id": "936e5204-5eb9-47f1-978c-f8db0b0c2a4e", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed power\u2010law + finite\u2010size correction model:\n        log(loss) \u2248 \u03b80 + \u03a3_{i=1}^4 \u03b8_i * log(x_i)\n                           + \u03c6_data * (1/data_size)\n                           + \u03c6_param * (1/non_embedding_param_size)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # features in log-space\n    logX = np.log(X)                      # (N,4)\n\n    # finite-size corrections\n    inv_data  = 1.0 / X[:, 2]             # (N,)\n    inv_param = 1.0 / X[:, 3]             # (N,)\n\n    # unpack parameters\n    intercept = params[0]                 # \u03b80\n    theta     = params[1:5]               # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data  = params[5]                 # \u03c6_data\n    phi_param = params[6]                 # \u03c6_param\n\n    # compute predicted log-loss\n    log_pred = (intercept\n                + logX.dot(theta)\n                + inv_data * phi_data\n                + inv_param * phi_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log-space:\n        log(loss) \u2248 \u03b80 + \u03a3_i \u03b8_i * log(x_i) + \u03c6_data*(1/data_size) + \u03c6_param*(1/param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (7,) as in scaling_law_func doc\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build feature matrix\n    logX     = np.log(X)                       # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])              # (N,1)\n    inv_param = (1.0 / X[:, 3:4])              # (N,1)\n    logy      = np.log(y)                      # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    design = np.hstack([ones, logX, inv_data, inv_param])        # (N,7)\n\n    # ridge regularization for numerical stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (D^T D + \u03bb I) p = D^T logy\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "433f3f57-bf12-4cc1-a7c6-b76118d9f91a", "generation": 2, "timestamp": 1754717759.164078, "iteration_found": 19, "metrics": {"nmse": 0.393891715792555, "nmae": 0.508714930781905, "r2": 0.606108284207445, "combined_score": 0.7174158427589251}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: Evaluation failed or timed out.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: Evaluation failed or timed out.\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 2.8483, nmae: 1.6853, r2: -1.8483, combined_score: 0.2599\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.7363)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an additive inverse\u2010law model:\n        loss \u2248 intercept + \u03a3_i w_i / x_i\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    # avoid division by zero or extremely small values\n    eps = 1e-8\n    X = np.maximum(X, eps)\n\n    # construct design matrix = [1, 1/x1, 1/x2, 1/x3, 1/x4]\n    invX = 1.0 / X\n    ones = np.ones((X.shape[0], 1), dtype=np.float64)\n    design = np.hstack([ones, invX])  # shape (N,5)\n\n    # linear model in the transformed space\n    preds = design.dot(params)       # shape (N,)\n    return preds.ravel()\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the additive inverse\u2010law model:\n        loss \u2248 intercept + \u03a3_i w_i / x_i\n    via ridge\u2010regularized least squares.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid division by zero\n    eps = 1e-8\n    X = np.maximum(X, eps)\n\n    # build design matrix: [1, 1/x1, 1/x2, 1/x3, 1/x4]\n    invX = 1.0 / X\n    ones = np.ones((X.shape[0], 1), dtype=np.float64)\n    design = np.hstack([ones, invX])  # shape (N,5)\n\n    # ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (D^T D + \u03bb I) p = D^T y\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(y)\n    params = np.linalg.solve(A, b)\n\n    return params\n```\nKey features: Performs well on nmse (2.8483), Performs well on nmae (1.6853), Performs well on r2 (-1.8483), Performs well on combined_score (0.2599)\n\n\n### Program 2 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: Evaluation failed or timed out.)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.7363, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an additive inverse\u2010law model:\n        loss \u2248 intercept + \u03a3_i w_i / x_i\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    # avoid division by zero or extremely small values\n    eps = 1e-8\n    X = np.maximum(X, eps)\n\n    # construct design matrix = [1, 1/x1, 1/x2, 1/x3, 1/x4]\n    invX = 1.0 / X\n    ones = np.ones((X.shape[0], 1), dtype=np.float64)\n    design = np.hstack([ones, invX])  # shape (N,5)\n\n    # linear model in the transformed space\n    preds = design.dot(params)       # shape (N,)\n    return preds.ravel()\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the additive inverse\u2010law model:\n        loss \u2248 intercept + \u03a3_i w_i / x_i\n    via ridge\u2010regularized least squares.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid division by zero\n    eps = 1e-8\n    X = np.maximum(X, eps)\n\n    # build design matrix: [1, 1/x1, 1/x2, 1/x3, 1/x4]\n    invX = 1.0 / X\n    ones = np.ones((X.shape[0], 1), dtype=np.float64)\n    design = np.hstack([ones, invX])  # shape (N,5)\n\n    # ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (D^T D + \u03bb I) p = D^T y\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(y)\n    params = np.linalg.solve(A, b)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.848), Excellent nmae (1.685)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed power\u2010law + finite\u2010size correction model:\n        log(loss) \u2248 \u03b80 + \u03a3_{i=1}^4 \u03b8_i * log(x_i)\n                           + \u03c6_data * (1/data_size)\n                           + \u03c6_param * (1/non_embedding_param_size)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # features in log-space\n    logX = np.log(X)                      # (N,4)\n\n    # finite-size corrections\n    inv_data  = 1.0 / X[:, 2]             # (N,)\n    inv_param = 1.0 / X[:, 3]             # (N,)\n\n    # unpack parameters\n    intercept = params[0]                 # \u03b80\n    theta     = params[1:5]               # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data  = params[5]                 # \u03c6_data\n    phi_param = params[6]                 # \u03c6_param\n\n    # compute predicted log-loss\n    log_pred = (intercept\n                + logX.dot(theta)\n                + inv_data * phi_data\n                + inv_param * phi_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log-space:\n        log(loss) \u2248 \u03b80 + \u03a3_i \u03b8_i * log(x_i) + \u03c6_data*(1/data_size) + \u03c6_param*(1/param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (7,) as in scaling_law_func doc\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build feature matrix\n    logX     = np.log(X)                       # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])              # (N,1)\n    inv_param = (1.0 / X[:, 3:4])              # (N,1)\n    logy      = np.log(y)                      # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    design = np.hstack([ones, logX, inv_data, inv_param])        # (N,7)\n\n    # ridge regularization for numerical stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (D^T D + \u03bb I) p = D^T logy\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Introduced a combined power\u2010law (in log-space) and finite\u2010size correction (inverse terms) to capture both scaling trends and residual effects for large data/model sizes.\n- Expanded parameter vector to 7 coefficients: 4 for log\u2010slopes, 2 for finite\u2010size corrections, and an intercept.\n- Fitting via a single ridge\u2010regularized linear solve in the augmented log\u2010feature space ensures numerical stability and closed\u2010form efficiency.\n- Avoids feature\u2010dependent scaling, using only raw `log(x)` and `1/x` basis functions for model\u2010size and data\u2010size corrections, improving cross\u2010configuration generalization."]}}}