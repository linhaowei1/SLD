{"id": "54819475-6de1-43dc-9bad-24109ff1b3d1", "code": "\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a simplified 2nd\u2010order polynomial in the log\u2010features,\nfocusing on the most significant cross\u2010term between data size and model size\nfor parameter efficiency and improved generalization:\n\n   log(y_pred) = p0\n                + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                + p9*(L_data * L_param)\n\nwhere L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit this via closed\u2010form ridge\u2010regularized regression for stability,\nand predict by exponentiating the log\u2010domain value.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a simplified 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # Safe log to avoid -inf\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix with intercept, linear, quadratic, and one key interaction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),      # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param        # cross-term capturing data\u00d7model interplay\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform inputs and targets\n    logX = np.log(np.maximum(X, 1e-12))\n    logy = np.log(np.maximum(y, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build the same design matrix as in prediction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # Closed\u2010form ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # Regularize all but intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b98f2771-a45e-45ac-9329-55820df5a0ff", "generation": 4, "timestamp": 1754808060.1312742, "iteration_found": 45, "metrics": {"nmse": 0.386893500186614, "nmae": 0.736398522018268, "r2": 0.6131064998133859, "combined_score": 0.7210358977567092}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.43745368419125447, "nmae": 0.6955391817494094, "r2": 0.5625463158087456, "combined_score": 0.6956745883347356}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4375\n- nmae: 0.6955\n- r2: 0.5625\n- combined_score: 0.6957\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.5978)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = c0\n              + \u2211_{i} c1_i log x_i\n              + \u2211_{i} c2_i (log x_i)^2\n              + \u2211_{i<j} c3_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit this via ridge\u2010regularized linear regression in closed\u2010form for\nstability, efficiency, and good generalization across scales.\n\nThe returned parameter vector has length 15:\n   [c0,\n    c1_lr, c1_bsz, c1_data, c1_param,\n    c2_lr, c2_bsz, c2_data, c2_param,\n    c3_lr_bsz, c3_lr_data, c3_lr_param,\n    c3_bsz_data, c3_bsz_param, c3_data_param]\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix for 2nd\u2010order polynomial expansion in log\u2010features.\n    Input:\n      logX: array of shape (N, F) of log\u2010features.\n    Output:\n      Phi:  array of shape (N, P) where\n            P = 1 + F + F + F*(F-1)//2\n    \"\"\"\n    N, F = logX.shape\n    P = 1 + F + F + F*(F-1)//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX * logX\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # Avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n\n    # Build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor values to avoid log(0) and negative logs\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log\u2010transform\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n\n    # Ridge regularization (small \u03bb for stability)\n    ridge = 1e-6\n    _, P = Phi.shape\n    A = Phi.T.dot(Phi)\n    # Do not regularize the intercept (index 0)\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 3 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log\u2010loss as a second\u2010order polynomial in the log\u2010domain of each feature,\nincluding cross\u2010terms, and fit via ridge\u2010regularized closed\u2010form regression.\n\nModel:\n    log(y_pred) = c0\n                + sum_i c1_i * log(x_i)\n                + sum_i c2_i * (log(x_i))^2\n                + sum_{i<j} c3_{ij} * log(x_i) * log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nThis form balances flexibility (capturing curvature and interactions) with\nparameter efficiency (15 coefficients) and numerical stability (ridge regularization).\n\"\"\"\nimport numpy as np\n\ndef _build_log_polynomial_features(logX):\n    \"\"\"\n    Given log-transformed features logX of shape (N,4), build the design matrix Phi\n    for the intercept, linear, quadratic, and pairwise interaction terms.\n    \n    Returns Phi of shape (N, 15).\n    \"\"\"\n    N, F = logX.shape\n    # 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    \n    # Intercept\n    Phi[:, 0] = 1.0\n    \n    # Linear terms\n    start = 1\n    Phi[:, start:start+F] = logX\n    start += F\n    \n    # Quadratic terms\n    Phi[:, start:start+F] = logX**2\n    start += F\n    \n    # Pairwise interaction terms\n    idx = start\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    \n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the fitted scaling law.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n    \n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    \n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.shape[0]}\")\n    \n    # Avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    \n    # Build design matrix and predict\n    Phi = _build_log_polynomial_features(logX)\n    log_y_pred = Phi.dot(p)\n    return np.exp(log_y_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    \n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    \n    # Floor inputs and outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # Log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    \n    # Build design matrix (N \u00d7 15)\n    Phi = _build_log_polynomial_features(logX)\n    \n    # Ridge\u2010regularized normal equations\n    # A = Phi^T Phi + \u03bb I (only on non\u2010intercept)\n    # b = Phi^T logy\n    lam = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal except intercept term\n    diag = np.arange(1, A.shape[0])\n    A[diag, diag] += lam\n    b = Phi.T.dot(logy)\n    \n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0567)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a simple log\u2010linear scaling law:\n      log(y_pred) = c0 + a_lr*log(lr) + a_bsz*log(bsz)\n                    + a_data*log(data_size) + a_param*log(non_embedding_param_size)\n\n    Args:\n        data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 5: [c0, a_lr, a_bsz, a_data, a_param]\n\n    Returns:\n        y_pred:      1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.shape[0]}\")\n\n    # Floor inputs to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)  # shape (N,4)\n\n    # Build design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Predict in log\u2010domain then exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simple log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    Model: log(y) = c0 + sum_i a_i * log(x_i)\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n\n    Returns:\n        params:      numpy array of length 5 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log\u2010transform\n    logX = np.log(X_clipped)  # shape (N,4)\n    logy = np.log(y_clipped)  # shape (N,)\n\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Ridge regularization (only on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge * np.eye(4)\n    b = Phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 1.0567, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a simple log\u2010linear scaling law:\n      log(y_pred) = c0 + a_lr*log(lr) + a_bsz*log(bsz)\n                    + a_data*log(data_size) + a_param*log(non_embedding_param_size)\n\n    Args:\n        data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 5: [c0, a_lr, a_bsz, a_data, a_param]\n\n    Returns:\n        y_pred:      1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.shape[0]}\")\n\n    # Floor inputs to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)  # shape (N,4)\n\n    # Build design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Predict in log\u2010domain then exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simple log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    Model: log(y) = c0 + sum_i a_i * log(x_i)\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n\n    Returns:\n        params:      numpy array of length 5 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log\u2010transform\n    logX = np.log(X_clipped)  # shape (N,4)\n    logy = np.log(y_clipped)  # shape (N,)\n\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Ridge regularization (only on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge * np.eye(4)\n    b = Phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.000), Excellent nmae (3.084)\n\n\n\n# Current Program\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = c0\n              + \u2211_{i} c1_i log x_i\n              + \u2211_{i} c2_i (log x_i)^2\n              + \u2211_{i<j} c3_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit this via ridge\u2010regularized linear regression in closed\u2010form for\nstability, efficiency, and good generalization across scales.\n\nThe returned parameter vector has length 15:\n   [c0,\n    c1_lr, c1_bsz, c1_data, c1_param,\n    c2_lr, c2_bsz, c2_data, c2_param,\n    c3_lr_bsz, c3_lr_data, c3_lr_param,\n    c3_bsz_data, c3_bsz_param, c3_data_param]\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix for 2nd\u2010order polynomial expansion in log\u2010features.\n    Input:\n      logX: array of shape (N, F) of log\u2010features.\n    Output:\n      Phi:  array of shape (N, P) where\n            P = 1 + F + F + F*(F-1)//2\n    \"\"\"\n    N, F = logX.shape\n    P = 1 + F + F + F*(F-1)//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX * logX\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # Avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n\n    # Build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor values to avoid log(0) and negative logs\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log\u2010transform\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n\n    # Ridge regularization (small \u03bb for stability)\n    ridge = 1e-6\n    _, P = Phi.shape\n    A = Phi.T.dot(Phi)\n    # Do not regularize the intercept (index 0)\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a simplified 2nd\u2010order polynomial in the log\u2010features,\nfocusing on the most significant cross\u2010term between data size and model size\nfor parameter efficiency and improved generalization:\n\n   log(y_pred) = p0\n                + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                + p9*(L_data * L_param)\n\nwhere L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit this via closed\u2010form ridge\u2010regularized regression for stability,\nand predict by exponentiating the log\u2010domain value.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a simplified 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # Safe log to avoid -inf\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix with intercept, linear, quadratic, and one key interaction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),      # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param        # cross-term capturing data\u00d7model interplay\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe log\u2010transform inputs and targets\n    logX = np.log(np.maximum(X, 1e-12))\n    logy = np.log(np.maximum(y, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build the same design matrix as in prediction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # Closed\u2010form ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # Regularize all but intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}