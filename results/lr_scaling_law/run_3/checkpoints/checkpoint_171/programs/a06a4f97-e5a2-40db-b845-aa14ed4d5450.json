{"id": "a06a4f97-e5a2-40db-b845-aa14ed4d5450", "code": "\"\"\"\nEnhanced 2nd\u2010order log\u2010polynomial scaling law for LLM training hyperparameters\nwith input\u2010feature normalization and uniform ridge regularization.\n\nWe model:\n   log y_pred = \u03b20\n                + \u03a3_i \u03b2_i * ( (log x_i - \u03bc_i) / \u03c3_i )\n                + \u03a3_i \u03b3_i * ( (log x_i - \u03bc_i) / \u03c3_i )^2\n                + \u03a3_{i<j} \u03b4_{ij} * ( (log x_i - \u03bc_i) / \u03c3_i ) * ( (log x_j - \u03bc_j) / \u03c3_j )\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit by weighted ridge regression in the log\u2010domain.  We normalize each\nlog\u2010feature to zero mean and unit variance before building the polynomial\ndesign matrix.  A uniform ridge penalty stabilizes all non\u2010intercept terms.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a 2nd\u2010order polynomial in normalized log\u2010features.\n\n    Inputs:\n      logX_norm: array of shape (N,4), where columns are\n                  normalized features ( (log x_i - \u03bc_i)/\u03c3_i )\n\n    Returns:\n      Phi: array of shape (N,15) with columns\n           [1 (intercept),\n            linear terms (4),\n            squared terms (4),\n            pairwise interactions (6) ]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via normalized 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 23:\n                   [ \u03bc_0..\u03bc_3,         # means of log\u2010features\n                     \u03c3_0..\u03c3_3,         # stds of log\u2010features\n                     coeffs (15),      # polynomial coefficients: intercept,\n                                        # linear (4), squared (4), interactions (6)\n                   ]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 23:\n        raise ValueError(f\"scaling_law_func: expected 23 params, got {p.size}\")\n\n    # unpack normalization stats and model coefficients\n    mu    = p[0:4]\n    sigma = p[4:8]\n    coeff = p[8:]\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX   = np.log(X_safe)  # shape (N,4)\n\n    # normalize features\n    logX_norm = (logX - mu) / sigma\n\n    # build design matrix in normalized log\u2010space\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # linear prediction in log\u2010domain\n    log_pred = Phi.dot(coeff)              # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized 2nd\u2010order log\u2010polynomial scaling law via weighted ridge regression.\n\n    We normalize each log\u2010feature to zero mean and unit variance, then\n    fit a polynomial in that normalized space.  We weight samples by\n      w_i = exp(0.75 * ((log data_size_i + log param_size_i) - median(...)))\n    to emphasize large\u2010scale configurations.  A uniform ridge (\u03bb=1e-3)\n    stabilizes all non\u2010intercept terms.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 23 of fitted\n              [\u03bc_0..\u03bc_3, \u03c3_0..\u03c3_3, coeffs (15)].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values length mismatch\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # compute normalization statistics\n    mu    = np.mean(logX, axis=0)                  # (4,)\n    sigma = np.std(logX, axis=0, ddof=1)           # (4,)\n    sigma = np.maximum(sigma, 1e-8)                # avoid zero\u2010division\n\n    # normalize log\u2010features\n    logX_norm = (logX - mu) / sigma                # shape (N,4)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)          # shape (N,15)\n    _, P = Phi.shape                               # P should be 15\n\n    # sample weights to emphasize large\u2010scale configs\n    combined = logX[:, 2] + logX[:, 3]             # data_size + param_size\n    median_comb = np.median(combined)\n    w = np.exp(0.75 * (combined - median_comb))    # shape (N,)\n\n    # form weighted normal equations\n    W_sqrt = np.sqrt(w)[:, None]                   # shape (N,1)\n    Phi_w  = Phi * W_sqrt                          # each row scaled\n    y_w    = logy * W_sqrt.ravel()                 # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)                         # (15,15)\n    b = Phi_w.T.dot(y_w)                           # (15,)\n\n    # uniform ridge regularization on non-intercept\n    ridge = 1e-3\n    for i in range(1, P):\n        A[i, i] += ridge\n\n    # solve for normalized\u2010space coefficients\n    coeff = np.linalg.solve(A, b)                  # (15,)\n\n    # pack normalization stats and coefficients\n    params = np.concatenate([mu, sigma, coeff])   # length 4+4+15 = 23\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "5fe7a1f9-37db-4779-b021-6660bd4bbeb6", "generation": 3, "timestamp": 1754808510.5532558, "iteration_found": 81, "metrics": {"nmse": 0.42038538096290456, "nmae": 0.7078950958598113, "r2": 0.5796146190370954, "combined_score": 0.7040342806978781}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.40616019375195006, "nmae": 0.6892980047588617, "r2": 0.5938398062480499, "combined_score": 0.7111565271462963}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4062\n- nmae: 0.6893\n- r2: 0.5938\n- combined_score: 0.7112\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4374, nmae: 0.6955, r2: 0.5626, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4062, nmae: 0.6893, r2: 0.5938, combined_score: 0.7111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4062, nmae: 0.6893, r2: 0.5938, combined_score: 0.7112\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6001)\n```python\n\"\"\"\nEnhanced 2nd\u2010order log\u2010polynomial scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = \u03b20\n                + \u03a3_i \u03b2_i log x_i\n                + \u03a3_i \u03b3_i (log x_i)^2\n                + \u03a3_{i<j} \u03b4_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via weighted, differential\u2010ridge regression in closed form to\nemphasize large\u2010scale configurations and ensure numeric stability.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix \u03a6 for a 2nd\u2010order polynomial in log\u2010features.\n\n    Inputs:\n      logX: array of shape (N,4), where columns are\n            [log(lr), log(bsz), log(data_size), log(non_embedding_params)]\n\n    Returns:\n      Phi: array of shape (N,P) with\n           P = 1 (intercept)\n             + 4 (linear terms)\n             + 4 (squared terms)\n             + 6 (pairwise interactions)\n           = 15 total columns.\n    \"\"\"\n    N, F = logX.shape\n    # total features: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)    # shape (N,15)\n    log_pred = Phi.dot(p)               # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight each sample by w_i = exp(0.5 * ((log data_size_i + log param_size_i)\n    - median(log_data_size + log_param_size))) to emphasize large\u2010scale\n    configurations. We apply small ridge on linear terms, moderate on squared,\n    and stronger on pairwise interactions for numerical stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to up\u2010weight large model/data\n    log_ds = logX[:, 2]\n    log_ps = logX[:, 3]\n    combined = log_ds + log_ps\n    median_combined = np.median(combined)\n    w = np.exp(0.5 * (combined - median_combined))  # shape (N,)\n\n    # build weighted normal equations\n    # A = \u03a6^T W \u03a6, b = \u03a6^T (W logy)\n    W_sqrt = np.sqrt(w)[:, None]  # shape (N,1)\n    Phi_w = Phi * W_sqrt          # each row i scaled by sqrt(w_i)\n    y_w = logy * W_sqrt.ravel()   # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)        # shape (15,15)\n    b = Phi_w.T.dot(y_w)          # shape (15,)\n\n    # differential ridge regularization\n    # indices for blocks\n    idx_lin   = slice(1, 1+F)              # linear terms\n    idx_sq    = slice(1+F, 1+2*F)          # squared terms\n    idx_inter = slice(1+2*F, P)            # interaction terms\n\n    # set ridge strengths\n    ridge_lin   = 1e-6\n    ridge_sq    = 1e-4\n    ridge_inter = 1e-2\n\n    # apply ridge to diagonal of A\n    for i in range(idx_lin.start, idx_lin.stop):\n        A[i, i] += ridge_lin\n    for i in range(idx_sq.start, idx_sq.stop):\n        A[i, i] += ridge_sq\n    for i in range(idx_inter.start, idx_inter.stop):\n        A[i, i] += ridge_inter\n\n    # intercept (index 0) is left unregularized\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4062), Performs well on nmae (0.6893), Performs well on r2 (0.5938), Performs well on combined_score (0.7112)\n\n\n### Program 2 (Score: 0.6001)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the log\u2010domain.\n    Inputs:\n      logX: array of shape (N,4) of log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Output:\n      Phi:  array of shape (N,15) with columns\n            [1,\n             logX[:,0], logX[:,1], logX[:,2], logX[:,3],\n             (logX[:,0])^2, \u2026, (logX[:,3])^2,\n             logX[:,0]*logX[:,1], \u2026, logX[:,2]*logX[:,3]]\n    \"\"\"\n    N, F = logX.shape\n    # total params = 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=np.float64)\n\n    # linear terms\n    Phi[:, 1 : 1 + F] = logX\n\n    # quadratic terms\n    start_q = 1 + F\n    Phi[:, start_q : start_q + F] = logX * logX\n\n    # pairwise interaction terms\n    idx = start_q + F\n    for i in range(F):\n        for j in range(i + 1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 2nd\u2010order polynomial in log\u2010features.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients.\n\n    Returns:\n      y_pred: 1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_P = 1 + F + F + (F * (F - 1)) // 2\n    if p.size != expected_P:\n        raise ValueError(f\"Expected {expected_P} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    log_pred = Phi.dot(p)             # shape (N,)\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted ridge regression.\n\n    We weight each sample by its combined scale of data_size and param_size:\n      w_i = exp(0.5 * ((log data_size_i + log param_size_i) - median(...)))\n    to emphasize large\u2010scale configurations.\n    A small ridge (\u03bb=1e-6) stabilizes higher\u2010order terms.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Mismatched data points and losses\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)  # (N,4)\n    logy = np.log(y_safe)  # (N,)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX)  # (N,15)\n\n    # sample weights to emphasize large-scale configs\n    scale_sum = logX[:, 2] + logX[:, 3]\n    median_scale = np.median(scale_sum)\n    w = np.exp(0.5 * (scale_sum - median_scale))  # (N,)\n\n    # weighted ridge regression normal equations\n    ridge = 1e-6\n    # A = \u03a6\u1d40 W \u03a6\n    A = Phi.T.dot(Phi * w[:, np.newaxis])\n    # regularize all but intercept\n    A[1:, 1:] += ridge\n    # b = \u03a6\u1d40 (W logy)\n    b = Phi.T.dot(logy * w)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4062), Performs well on nmae (0.6893), Performs well on r2 (0.5938), Performs well on combined_score (0.7111)\n\n\n### Program 3 (Score: 0.5978)\n```python\nimport numpy as np\n\ndef _build_log_poly_features(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in log\u2010space.\n    Input:\n      logX: array of shape (N,4) with log\u2010transformed features.\n    Returns:\n      Phi: array of shape (N,15) with columns:\n           [1,\n            log(x1),\u2026,log(x4),\n            log(x1)^2,\u2026,log(x4)^2,\n            log(x1)*log(x2), log(x1)*log(x3),\u2026,log(x3)*log(x4)]\n    \"\"\"\n    N, F = logX.shape\n    # total features: 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    # linear terms\n    Phi[:, 1:1+F] = logX\n    # quadratic terms\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred:      1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    expected_P = 1 + F + F + (F*(F-1))//2\n    if p.size != expected_P:\n        raise ValueError(f\"Expected {expected_P} parameters, got {p.size}\")\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    Phi = _build_log_poly_features(logX)  # (N,15)\n    log_pred = Phi.dot(p)                 # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single sample\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    logX = np.log(X_safe)    # (N,4)\n    logy = np.log(y_safe)    # (N,)\n    Phi = _build_log_poly_features(logX)  # (N,15)\n    # normal equations\n    A = Phi.T.dot(Phi)        # (15,15)\n    b = Phi.T.dot(logy)       # (15,)\n    # apply ridge regularization:\n    # mild on linear terms, moderate on quadratic, stronger on interactions\n    # parameter index layout:\n    #   0                   \u2192 intercept\n    #   1..4                \u2192 linear\n    #   5..8                \u2192 quadratic\n    #   9..14               \u2192 interactions\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n    # linear block\n    for i in range(1, 1+F):\n        A[i, i] += ridge_lin\n    # quadratic block\n    for i in range(1+F, 1+2*F):\n        A[i, i] += ridge_quad\n    # interaction block\n    for i in range(1+2*F, A.shape[0]):\n        A[i, i] += ridge_inter\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.4374), Performs well on nmae (0.6955), Performs well on r2 (0.5626), Performs well on combined_score (0.6957)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010polynomial scaling law for LLM training hyperparameters.\n\nModel form:\n    log(y_pred) = c0\n                + sum_i c1_i * log(x_i)\n                + sum_i c2_i * (log(x_i))^2\n                + sum_{i<j} c3_{ij} * log(x_i) * log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit parameters by ridge\u2010regularized linear regression in the log\u2010domain\nfor stability and efficient closed\u2010form solution.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2  # intercept + linear + quadratic + interactions\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)  # shape (N,4)\n\n    # build design matrix Phi: [1, logX, (logX)^2, pairwise(logX_i * logX_j)]\n    Phi = np.ones((N, P_expected), dtype=float)\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # build design matrix Phi as in scaling_law_func\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all but intercept term\n    for k in range(1, P):\n        A[k, k] += ridge\n    b = Phi.T.dot(logy)\n\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for LLM training hyperparameters.\nWe fit a second\u2010order polynomial in the log\u2010domain of each feature,\nincluding quadratic terms and pairwise interactions, via ridge\u2010regularized\nclosed\u2010form regression for stability, efficiency, and improved accuracy.\n\nModel form:\n   log(y_pred) = c0\n               + sum_i c1_i * log(x_i)\n               + sum_i c2_i * (log(x_i))^2\n               + sum_{i<j} c3_{ij} * log(x_i)*log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size],\nand y_pred is the predicted LM loss.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, float).ravel()\n    # total parameters = 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # floor inputs to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)        # shape (N,4)\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), float)\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)           # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_clipped)        # shape (N,4)\n    logy = np.log(y_clipped)        # shape (N,)\n\n    # build design matrix Phi\n    P = 1 + F + F + (F*(F-1))//2     # 15\n    Phi = np.ones((N, P), float)\n    idx = 1\n    # linear\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    A[np.arange(1, P), np.arange(1, P)] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.7876, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters using an extended\n    power\u2010law in log\u2010domain with a quadratic term for learning rate and an\n    asymptotic loss floor.\n\n    Model:\n      y_pred = y_inf + exp(\n                   logA\n                   + \u03b1_P * log(P)\n                   + \u03b1_D * log(D)\n                   + \u03b1_bsz * log(bsz)\n                   + \u03b1_lr * log(lr)\n                   + \u03b1_lr2 * (log(lr))^2\n               )\n\n    Inputs:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 7 or 2D array (T\u00d77):\n                   [logA,\n                    \u03b1_P, \u03b1_D, \u03b1_bsz,\n                    \u03b1_lr, \u03b1_lr2,\n                    log_y_inf]\n\n    Returns:\n      y_pred: shape (N,) if params is 1D, else (N,T).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 7:\n        raise ValueError(f\"scaling_law_func: expected 7 parameters, got {Pcount}\")\n\n    # Unpack features and take logs safely\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n\n    xP   = np.log(P)\n    xD   = np.log(D)\n    xB   = np.log(bsz)\n    xL   = np.log(lr)\n\n    # Prepare output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # Compute predictions for each parameter set\n    for t in range(T):\n        logA, aP, aD, aB, aL, aL2, log_yinf = p[t]\n        exp_term = np.exp(logA\n                          + aP * xP\n                          + aD * xD\n                          + aB * xB\n                          + aL * xL\n                          + aL2 * (xL ** 2))\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + exp_term\n\n    # Return (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing MSE on observed losses.\n    Uses a linear least\u2010squares initialization in log\u2010domain with a quadratic\n    learning\u2010rate term, then refines via L-BFGS-B.\n\n    Returns optimized params:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2, log_y_inf]\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match in length\")\n\n    # Avoid log(0)\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n\n    xP   = np.log(P)\n    xD   = np.log(D)\n    xB   = np.log(bsz)\n    xL   = np.log(lr)\n\n    # Initial guess for the asymptotic loss floor\n    min_y = np.min(y)\n    y_inf0 = max(min_y * 0.9, 1e-8)\n\n    # Linearize: log(y - y_inf0) \u2248 logA + \u03b1_P xP + \u03b1_D xD + \u03b1_bsz xB + \u03b1_lr xL + \u03b1_lr2 xL^2\n    z = y - y_inf0\n    if np.any(z <= 0):\n        # shift to positive\n        z = z + (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    # Build design matrix for initial LS estimate\n    # Columns: [1, xP, xD, xB, xL, xL^2]\n    M = np.vstack([\n        np.ones(N),\n        xP,\n        xD,\n        xB,\n        xL,\n        xL**2\n    ]).T\n\n    # Solve least-squares\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # Pack initial parameters\n    # sol => [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2]\n    p0 = np.concatenate([sol, [np.log(y_inf0)]])\n\n    # Objective: MSE in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # Parameter bounds\n    #   logA:    unrestricted\n    #   \u03b1_P..\u03b1_bsz, \u03b1_lr, \u03b1_lr2: reasonable power\u2010law exponents\n    #   log_y_inf \u2264 log(min observed loss)\n    lb = [-np.inf, -5.0, -5.0, -5.0, -5.0, -5.0, -np.inf]\n    ub = [ np.inf,  5.0,  5.0,  5.0,  5.0,  5.0,  np.log(min_y)]\n    bounds = list(zip(lb, ub))\n\n    # Refine by L-BFGS-B\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to the linearized solution\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.118), Excellent nmae (1.830)\n\n\n### Inspiration 2 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010polynomial scaling law for LLM training hyperparameters.\n\nModel form:\n    log(y_pred) = c0\n                + sum_i c1_i * log(x_i)\n                + sum_i c2_i * (log(x_i))^2\n                + sum_{i<j} c3_{ij} * log(x_i) * log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit parameters by ridge\u2010regularized linear regression in the log\u2010domain\nfor stability and efficient closed\u2010form solution.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2  # intercept + linear + quadratic + interactions\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)  # shape (N,4)\n\n    # build design matrix Phi: [1, logX, (logX)^2, pairwise(logX_i * logX_j)]\n    Phi = np.ones((N, P_expected), dtype=float)\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # build design matrix Phi as in scaling_law_func\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all but intercept term\n    for k in range(1, P):\n        A[k, k] += ridge\n    b = Phi.T.dot(logy)\n\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.6001, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the log\u2010domain.\n    Inputs:\n      logX: array of shape (N,4) of log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Output:\n      Phi:  array of shape (N,15) with columns\n            [1,\n             logX[:,0], logX[:,1], logX[:,2], logX[:,3],\n             (logX[:,0])^2, \u2026, (logX[:,3])^2,\n             logX[:,0]*logX[:,1], \u2026, logX[:,2]*logX[:,3]]\n    \"\"\"\n    N, F = logX.shape\n    # total params = 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=np.float64)\n\n    # linear terms\n    Phi[:, 1 : 1 + F] = logX\n\n    # quadratic terms\n    start_q = 1 + F\n    Phi[:, start_q : start_q + F] = logX * logX\n\n    # pairwise interaction terms\n    idx = start_q + F\n    for i in range(F):\n        for j in range(i + 1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 2nd\u2010order polynomial in log\u2010features.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients.\n\n    Returns:\n      y_pred: 1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_P = 1 + F + F + (F * (F - 1)) // 2\n    if p.size != expected_P:\n        raise ValueError(f\"Expected {expected_P} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    log_pred = Phi.dot(p)             # shape (N,)\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted ridge regression.\n\n    We weight each sample by its combined scale of data_size and param_size:\n      w_i = exp(0.5 * ((log data_size_i + log param_size_i) - median(...)))\n    to emphasize large\u2010scale configurations.\n    A small ridge (\u03bb=1e-6) stabilizes higher\u2010order terms.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Mismatched data points and losses\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)  # (N,4)\n    logy = np.log(y_safe)  # (N,)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX)  # (N,15)\n\n    # sample weights to emphasize large-scale configs\n    scale_sum = logX[:, 2] + logX[:, 3]\n    median_scale = np.median(scale_sum)\n    w = np.exp(0.5 * (scale_sum - median_scale))  # (N,)\n\n    # weighted ridge regression normal equations\n    ridge = 1e-6\n    # A = \u03a6\u1d40 W \u03a6\n    A = Phi.T.dot(Phi * w[:, np.newaxis])\n    # regularize all but intercept\n    A[1:, 1:] += ridge\n    # b = \u03a6\u1d40 (W logy)\n    b = Phi.T.dot(logy * w)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5981, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a second\u2010order polynomial in the log of each feature:\n    log y = \u03b20\n            + \u03a3_i \u03b2_i * log x_i\n            + \u03a3_i \u03b3_i * (log x_i)^2\n            + \u03a3_{i<j} \u03b4_{ij} * (log x_i * log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via closed\u2010form ridge regression for stability and numerical efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_data, \u03b2_param,\n                    \u03b3_lr2, \u03b3_bsz2, \u03b3_data2, \u03b3_param2,\n                    \u03b4_lr_bsz, \u03b4_lr_data, \u03b4_lr_param,\n                    \u03b4_bsz_data, \u03b4_bsz_param, \u03b4_data_param]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zero or negative before log\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N,4)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters but got {p.size}\")\n\n    # Build design matrix \u03a6 of shape (N, 15)\n    Phi = np.empty((N, P_expected), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    # squared terms\n    for i in range(F):\n        Phi[:, idx] = logX[:, i] ** 2\n        idx += 1\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010domain quadratic scaling law via ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched number of data points and losses.\")\n\n    # floor to avoid log issues\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    N, F = logX.shape\n\n    # number of parameters: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n\n    # Build design matrix \u03a6\n    Phi = np.empty((N, P), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        Phi[:, idx] = logX[:, i] ** 2\n        idx += 1\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # Ridge regularization\n    ridge = 1e-3\n    A = Phi.T.dot(Phi)\n    # apply ridge on all but intercept\n    diag_indices = np.diag_indices(P)\n    A[diag_indices] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for LLM training hyperparameters.\nWe fit a second\u2010order polynomial in the log\u2010domain of each feature,\nincluding quadratic terms and pairwise interactions, via ridge\u2010regularized\nclosed\u2010form regression for stability, efficiency, and improved accuracy.\n\nModel form:\n   log(y_pred) = c0\n               + sum_i c1_i * log(x_i)\n               + sum_i c2_i * (log(x_i))^2\n               + sum_{i<j} c3_{ij} * log(x_i)*log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size],\nand y_pred is the predicted LM loss.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, float).ravel()\n    # total parameters = 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # floor inputs to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)        # shape (N,4)\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), float)\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)           # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_clipped)        # shape (N,4)\n    logy = np.log(y_clipped)        # shape (N,)\n\n    # build design matrix Phi\n    P = 1 + F + F + (F*(F-1))//2     # 15\n    Phi = np.ones((N, P), float)\n    idx = 1\n    # linear\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    A[np.arange(1, P), np.arange(1, P)] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n\"\"\"\nEnhanced 2nd\u2010order log\u2010polynomial scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = \u03b20\n                + \u03a3_i \u03b2_i log x_i\n                + \u03a3_i \u03b3_i (log x_i)^2\n                + \u03a3_{i<j} \u03b4_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via weighted, differential\u2010ridge regression in closed form to\nemphasize large\u2010scale configurations and ensure numeric stability.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix \u03a6 for a 2nd\u2010order polynomial in log\u2010features.\n\n    Inputs:\n      logX: array of shape (N,4), where columns are\n            [log(lr), log(bsz), log(data_size), log(non_embedding_params)]\n\n    Returns:\n      Phi: array of shape (N,P) with\n           P = 1 (intercept)\n             + 4 (linear terms)\n             + 4 (squared terms)\n             + 6 (pairwise interactions)\n           = 15 total columns.\n    \"\"\"\n    N, F = logX.shape\n    # total features: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)    # shape (N,15)\n    log_pred = Phi.dot(p)               # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight each sample by w_i = exp(0.5 * ((log data_size_i + log param_size_i)\n    - median(log_data_size + log_param_size))) to emphasize large\u2010scale\n    configurations. We apply small ridge on linear terms, moderate on squared,\n    and stronger on pairwise interactions for numerical stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to up\u2010weight large model/data\n    log_ds = logX[:, 2]\n    log_ps = logX[:, 3]\n    combined = log_ds + log_ps\n    median_combined = np.median(combined)\n    w = np.exp(0.5 * (combined - median_combined))  # shape (N,)\n\n    # build weighted normal equations\n    # A = \u03a6^T W \u03a6, b = \u03a6^T (W logy)\n    W_sqrt = np.sqrt(w)[:, None]  # shape (N,1)\n    Phi_w = Phi * W_sqrt          # each row i scaled by sqrt(w_i)\n    y_w = logy * W_sqrt.ravel()   # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)        # shape (15,15)\n    b = Phi_w.T.dot(y_w)          # shape (15,)\n\n    # differential ridge regularization\n    # indices for blocks\n    idx_lin   = slice(1, 1+F)              # linear terms\n    idx_sq    = slice(1+F, 1+2*F)          # squared terms\n    idx_inter = slice(1+2*F, P)            # interaction terms\n\n    # set ridge strengths\n    ridge_lin   = 1e-6\n    ridge_sq    = 1e-4\n    ridge_inter = 1e-2\n\n    # apply ridge to diagonal of A\n    for i in range(idx_lin.start, idx_lin.stop):\n        A[i, i] += ridge_lin\n    for i in range(idx_sq.start, idx_sq.stop):\n        A[i, i] += ridge_sq\n    for i in range(idx_inter.start, idx_inter.stop):\n        A[i, i] += ridge_inter\n\n    # intercept (index 0) is left unregularized\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nEnhanced 2nd\u2010order log\u2010polynomial scaling law for LLM training hyperparameters\nwith input\u2010feature normalization and uniform ridge regularization.\n\nWe model:\n   log y_pred = \u03b20\n                + \u03a3_i \u03b2_i * ( (log x_i - \u03bc_i) / \u03c3_i )\n                + \u03a3_i \u03b3_i * ( (log x_i - \u03bc_i) / \u03c3_i )^2\n                + \u03a3_{i<j} \u03b4_{ij} * ( (log x_i - \u03bc_i) / \u03c3_i ) * ( (log x_j - \u03bc_j) / \u03c3_j )\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit by weighted ridge regression in the log\u2010domain.  We normalize each\nlog\u2010feature to zero mean and unit variance before building the polynomial\ndesign matrix.  A uniform ridge penalty stabilizes all non\u2010intercept terms.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX_norm):\n    \"\"\"\n    Build a design matrix \u03a6 for a 2nd\u2010order polynomial in normalized log\u2010features.\n\n    Inputs:\n      logX_norm: array of shape (N,4), where columns are\n                  normalized features ( (log x_i - \u03bc_i)/\u03c3_i )\n\n    Returns:\n      Phi: array of shape (N,15) with columns\n           [1 (intercept),\n            linear terms (4),\n            squared terms (4),\n            pairwise interactions (6) ]\n    \"\"\"\n    N, F = logX_norm.shape\n    P = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX_norm\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX_norm**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX_norm[:, i] * logX_norm[:, j]\n            idx += 1\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via normalized 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 23:\n                   [ \u03bc_0..\u03bc_3,         # means of log\u2010features\n                     \u03c3_0..\u03c3_3,         # stds of log\u2010features\n                     coeffs (15),      # polynomial coefficients: intercept,\n                                        # linear (4), squared (4), interactions (6)\n                   ]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 23:\n        raise ValueError(f\"scaling_law_func: expected 23 params, got {p.size}\")\n\n    # unpack normalization stats and model coefficients\n    mu    = p[0:4]\n    sigma = p[4:8]\n    coeff = p[8:]\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX   = np.log(X_safe)  # shape (N,4)\n\n    # normalize features\n    logX_norm = (logX - mu) / sigma\n\n    # build design matrix in normalized log\u2010space\n    Phi = _build_design_matrix(logX_norm)  # shape (N,15)\n\n    # linear prediction in log\u2010domain\n    log_pred = Phi.dot(coeff)              # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the normalized 2nd\u2010order log\u2010polynomial scaling law via weighted ridge regression.\n\n    We normalize each log\u2010feature to zero mean and unit variance, then\n    fit a polynomial in that normalized space.  We weight samples by\n      w_i = exp(0.75 * ((log data_size_i + log param_size_i) - median(...)))\n    to emphasize large\u2010scale configurations.  A uniform ridge (\u03bb=1e-3)\n    stabilizes all non\u2010intercept terms.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 23 of fitted\n              [\u03bc_0..\u03bc_3, \u03c3_0..\u03c3_3, coeffs (15)].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values length mismatch\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # compute normalization statistics\n    mu    = np.mean(logX, axis=0)                  # (4,)\n    sigma = np.std(logX, axis=0, ddof=1)           # (4,)\n    sigma = np.maximum(sigma, 1e-8)                # avoid zero\u2010division\n\n    # normalize log\u2010features\n    logX_norm = (logX - mu) / sigma                # shape (N,4)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX_norm)          # shape (N,15)\n    _, P = Phi.shape                               # P should be 15\n\n    # sample weights to emphasize large\u2010scale configs\n    combined = logX[:, 2] + logX[:, 3]             # data_size + param_size\n    median_comb = np.median(combined)\n    w = np.exp(0.75 * (combined - median_comb))    # shape (N,)\n\n    # form weighted normal equations\n    W_sqrt = np.sqrt(w)[:, None]                   # shape (N,1)\n    Phi_w  = Phi * W_sqrt                          # each row scaled\n    y_w    = logy * W_sqrt.ravel()                 # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)                         # (15,15)\n    b = Phi_w.T.dot(y_w)                           # (15,)\n\n    # uniform ridge regularization on non-intercept\n    ridge = 1e-3\n    for i in range(1, P):\n        A[i, i] += ridge\n\n    # solve for normalized\u2010space coefficients\n    coeff = np.linalg.solve(A, b)                  # (15,)\n\n    # pack normalization stats and coefficients\n    params = np.concatenate([mu, sigma, coeff])   # length 4+4+15 = 23\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- We normalize each log\u2010feature (learning rate, batch size, data size, model size) to zero mean and unit variance before constructing the polynomial features.  This greatly improves the conditioning of the regression and yields more balanced shrinkage across terms.\n- We use a uniform ridge penalty (\u03bb=1e-3) on all non\u2010intercept coefficients for numerical stability.\n- We up\u2010weight large\u2010scale configurations with an exponent of 0.75 (instead of 0.5) to slightly emphasize high-data/high-parameter points.\n- The returned parameter vector now includes the four means and four standard deviations used for normalization, followed by the 15 polynomial coefficients.  The `scaling_law_func` unpacks these and applies the same normalization at prediction time."]}}}