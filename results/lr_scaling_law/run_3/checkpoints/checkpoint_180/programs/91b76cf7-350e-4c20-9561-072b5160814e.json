{"id": "91b76cf7-350e-4c20-9561-072b5160814e", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\n# Normalization constants to center hyperparameter scales.\n_P0   = 1e8        # typical non\u2010embedding parameter count\n_D0   = 1e10       # typical training token count\n_BSZ0 = 512.0      # typical batch size\n_LR0  = 1e-3       # typical learning rate\n_eps  = 1e-12      # numeric floor for logs\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 6\u2010parameter power\u2010law plus an additive floor:\n\n      y_pred = y_inf\n             + exp(logA)\n               * (P/_P0)^aP\n               * (D/_D0)^aD\n               * (bsz/_BSZ0)^aB\n               * (lr/_LR0)^aL\n\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      params:      array\u2010like, length 6:\n                   [logA, aP, aD, aB, aL, y_inf]\n\n    Returns:\n      y_pred:      np.ndarray, shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, y_inf = p\n\n    # unpack and normalize features\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    # ensure positivity before exponentiation\n    lr  = np.maximum(lr, _eps)\n    bsz = np.maximum(bsz, _eps)\n    D   = np.maximum(D, _eps)\n    P   = np.maximum(P, _eps)\n\n    term = np.exp(logA) * (P ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in log-loss space:\n\n      MSE( log(y_pred) - log(y_true) )\n\n    with L-BFGS-B and box constraints.\n\n    Returns:\n      params: np.ndarray of length 6: [logA, aP, aD, aB, aL, y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Floor target to avoid log(0)\n    y_safe = np.maximum(y, _eps)\n    logy   = np.log(y_safe)\n\n    # Precompute normalized log\u2010features\n    lr   = np.maximum(X[:, 0], _eps) / _LR0\n    bsz  = np.maximum(X[:, 1], _eps) / _BSZ0\n    D    = np.maximum(X[:, 2], _eps) / _D0\n    P    = np.maximum(X[:, 3], _eps) / _P0\n\n    logLR  = np.log(lr)\n    logBSZ = np.log(bsz)\n    logD   = np.log(D)\n    logP   = np.log(P)\n\n    # Initial parameter guess\n    y_min     = np.min(y_safe)\n    init_yinf = 0.1 * y_min\n    # estimate initial amplitude by mean residual\n    resid     = np.maximum(y_safe - init_yinf, _eps)\n    init_logA = np.log(np.mean(resid))\n    # rough initial exponents\n    init_exps = np.array([-0.5, -0.2, 0.1, -0.3], dtype=float)\n    # order: [aP, aD, aB, aL]\n    p0 = np.hstack([init_logA, init_exps, init_yinf])\n\n    # Bounds: logA free, exponents in [-5,5], y_inf in [0, y_min]\n    bounds = [(None, None)] + [(-5.0, 5.0)] * 4 + [(0.0, y_min)]\n\n    def _objective(p):\n        logA, aP, aD, aB, aL, y_inf = p\n\n        # compute log\u2010term = logA + aP\u00b7logP + aD\u00b7logD + aB\u00b7logBSZ + aL\u00b7logLR\n        lt = logA + aP * logP + aD * logD + aB * logBSZ + aL * logLR\n\n        # stable log-sum-exp to get log(y_pred) = log(y_inf + exp(lt))\n        ly = np.log(np.maximum(y_inf, _eps))\n        M  = np.maximum(ly, lt)\n        logy_pred = M + np.log(np.exp(ly - M) + np.exp(lt - M))\n\n        return np.mean((logy_pred - logy) ** 2)\n\n    result = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return p0.copy()\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6c908600-9d12-460a-acb7-ec42727d88cb", "generation": 6, "timestamp": 1754809611.2227767, "iteration_found": 166, "metrics": {"nmse": 4.952158814946025, "nmae": 2.79889028396962, "r2": -3.952158814946025, "combined_score": 0.16800626984094813}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 40.96322458991165, "nmae": 8.108392368272721, "r2": -39.96322458991165, "combined_score": 0.023830389818050576}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 40.9632\n- nmae: 8.1084\n- r2: -39.9632\n- combined_score: 0.0238\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y_pred = p0\n                 + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),      # intercept\n        L_lr,            # log(lr)\n        L_bsz,           # log(bsz)\n        L_data,          # log(data_size)\n        L_param,         # log(param_size)\n        L_lr**2,         # (log(lr))^2\n        L_bsz**2,        # (log(bsz))^2\n        L_data**2,       # (log(data_size))^2\n        L_param**2,      # (log(param_size))^2\n        L_data * L_param # cross term\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter log-polynomial scaling law:\n    \n      log y_pred = p0\n                 + p1 * log(lr)\n                 + p2 * log(bsz)\n                 + p3 * log(data_size)\n                 + p4 * log(non_embedding_param_size)\n                 + p5 * [log(lr)]^2\n                 + p6 * [log(bsz)]^2\n                 + p7 * [log(data_size)]^2\n                 + p8 * [log(non_embedding_param_size)]^2\n                 + p9 * (log(data_size) * log(non_embedding_param_size))\n                 \n    Then y_pred = exp(log y_pred).\n    \n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # [log(lr)]^2\n        L_bsz**2,             # [log(bsz)]^2\n        L_data**2,            # [log(data_size)]^2\n        L_param**2,           # [log(non_embedding_param_size)]^2\n        L_data * L_param      # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form ridge regression\n    in the log-domain. Minimizes squared error on log(loss).\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge regularization strength\n    ridge = 1e-6\n    \n    # normal equations: (\u03a6\u1d40 \u03a6 + \u03bb I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter 2nd-order log-polynomial scaling law:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz\n                   + p3*L_data  + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2\n                   + p7*L_data^2 + p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n    Exponentiate at the end to get y_pred.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param      # key interaction\n    ])\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter scaling law via closed-form ridge regression\n    in the log-domain.  We add a small ridge penalty on all but the intercept\n    for numerical stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes align\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # normal equations with ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.6001, Type: Alternative)\n```python\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd-order polynomial design matrix in the log-domain.\n    Inputs:\n      logX: array of shape (N,4) of log-features\n            [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\n    Output:\n      Phi:  array of shape (N,15) with columns\n            [1,\n             logX[:,0],\u2026,logX[:,3],\n             (logX[:,0])^2,\u2026,(logX[:,3])^2,\n             logX[:,0]*logX[:,1],\u2026,logX[:,2]*logX[:,3]]\n    \"\"\"\n    N, F = logX.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    # total params = 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=np.float64)\n\n    # fill linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # fill quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # fill pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters via a 2nd-order log-polynomial.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients.\n\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"scaling_law_func: expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log-domain\n    Phi = _build_design_matrix(logX)     # shape (N,15)\n    log_pred = Phi.dot(p)                # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd-order log-polynomial scaling law via weighted, differential-ridge regression.\n\n    We up-weight large-scale configurations by w_i = exp(0.5 * ((log data_size_i + log param_size_i)\n    - median(log data_size + log param_size))). We apply small ridge on linear terms,\n    moderate on quadratic, and stronger on interaction terms for numerical stability.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid numerical issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to emphasize large model/data\n    combined = logX[:, 2] + logX[:, 3]  # log data_size + log param_size\n    median_combined = np.median(combined)\n    w = np.exp(0.5 * (combined - median_combined))  # shape (N,)\n\n    # weighted normal equations\n    W_sqrt = np.sqrt(w)[:, np.newaxis]  # shape (N,1)\n    Phi_w = Phi * W_sqrt                 # scale rows\n    y_w = logy * W_sqrt.ravel()          # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)               # shape (15,15)\n    b = Phi_w.T.dot(y_w)                 # shape (15,)\n\n    # differential ridge regularization\n    # index blocks\n    idx_lin   = slice(1, 1+F)               # linear terms\n    idx_sq    = slice(1+F, 1+2*F)           # quadratic terms\n    idx_inter = slice(1+2*F, P)             # interactions\n\n    # ridge strengths\n    ridge_lin   = 1e-6\n    ridge_sq    = 1e-4\n    ridge_inter = 1e-2\n\n    # apply ridge penalties\n    for i in range(idx_lin.start, idx_lin.stop):\n        A[i, i] += ridge_lin\n    for i in range(idx_sq.start, idx_sq.stop):\n        A[i, i] += ridge_sq\n    for i in range(idx_inter.start, idx_inter.stop):\n        A[i, i] += ridge_inter\n    # intercept (index 0) remains unregularized\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.8378, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants to center hyperparameter scales\n_P0 = 1e8        # typical non\u2010embedding parameter count\n_D0 = 1e10       # typical training token count\n_BSZ0 = 512.0    # typical batch size\n_LR0 = 1e-3      # typical learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a 6-parameter\n    power\u2010law with an additive floor:\n        y_pred = y_inf + A * (P/_P0)^aP * (D/_D0)^aD * (bsz/_BSZ0)^aB * (lr/_LR0)^aL\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      length\u20106 vector (or shape (T,6)) of parameters\n                   [logA, aP, aD, aB, aL, y_inf].\n\n    Returns:\n      y_pred: numpy array of shape (N,) if params is 1D, or (N,T) if params is 2D.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n\n    # normalize features\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    # unpack parameters\n    logA = p[:, 0]    # log of amplitude\n    aP   = p[:, 1]    # exponent on model size\n    aD   = p[:, 2]    # exponent on data size\n    aB   = p[:, 3]    # exponent on batch size\n    aL   = p[:, 4]    # exponent on learning rate\n    y_inf = p[:, 5]   # asymptotic floor on loss\n\n    # compute power\u2010law term in a batched manner\n    # shape manipulations: (N,1) broadcast against (1,T)\n    term = (\n        np.exp(logA)[None, :] *\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # return (N,) when only one parameter set, else (N,T)\n    return y_pred[:, 0] if T == 1 else y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing mean squared error\n    in the original loss space using L-BFGS-B with bounds.\n\n    Returns:\n      params: array of length 6 [logA, aP, aD, aB, aL, y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non\u2010positive targets\n    y = np.maximum(y, 1e-12)\n\n    # initialize y_inf near half the minimum observed loss\n    y_min = np.min(y)\n    init_yinf = y_min * 0.5\n\n    # initialize logA from the average residual above y_inf\n    residual = np.maximum(y - init_yinf, 1e-12)\n    init_logA = np.log(np.mean(residual))\n\n    # weak negative exponents as a starting point\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n\n    # initial parameter vector\n    p0 = np.concatenate([[init_logA], init_alphas, [init_yinf]])\n\n    # bounds: logA free, each exponent in [-5,5], y_inf in [0, y_min]\n    bounds = [(None, None)] + [(-5.0, 5.0)]*4 + [(0.0, y_min)]\n\n    def _objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y)**2)\n\n    result = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n\n    return result.x if result.success else p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.779), Excellent nmae (2.087)\n\n\n### Inspiration 5 (Score: 1.0567, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a simple log\u2010linear scaling law:\n      log(y_pred) = c0 + a_lr*log(lr) + a_bsz*log(bsz)\n                    + a_data*log(data_size) + a_param*log(non_embedding_param_size)\n\n    Args:\n        data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 5: [c0, a_lr, a_bsz, a_data, a_param]\n\n    Returns:\n        y_pred:      1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.shape[0]}\")\n\n    # Floor inputs to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)  # shape (N,4)\n\n    # Build design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Predict in log\u2010domain then exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simple log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    Model: log(y) = c0 + sum_i a_i * log(x_i)\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n\n    Returns:\n        params:      numpy array of length 5 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log\u2010transform\n    logX = np.log(X_clipped)  # shape (N,4)\n    logy = np.log(y_clipped)  # shape (N,)\n\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Ridge regularization (only on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge * np.eye(4)\n    b = Phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.000), Excellent nmae (3.084)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 5-parameter\n    power-law scaling plus asymptotic floor:\n\n      y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * (lr * bsz)^\u03b1_E\n\n    where:\n      P   = non-embedding parameter count\n      D   = data_size (tokens)\n      lr  = learning rate\n      bsz = batch size\n\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf]\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5: [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf]\n\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features per point, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {p.size}\")\n\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # compute combined term E = lr * bsz\n    E = lr * bsz\n\n    # ensure positivity\n    eps = 1e-20\n    logP = np.log(np.maximum(Psize, eps))\n    logD = np.log(np.maximum(D, eps))\n    logE = np.log(np.maximum(E, eps))\n\n    # unpack params\n    logA, alpha_P, alpha_D, alpha_E, log_yinf = p\n\n    # compute power-law term in log-space\n    #   log_term = logA + \u03b1_P logP + \u03b1_D logD + \u03b1_E logE\n    log_term = logA + alpha_P * logP + alpha_D * logD + alpha_E * logE\n\n    # exponentiate\n    term = np.exp(log_term)\n\n    # add floor\n    y_inf = np.exp(log_yinf)\n    y_pred = y_inf + term\n\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing the mean squared error\n    in log-loss space:\n\n      MSE( log(y_pred) - log(y_true) )\n\n    with box constraints to keep the asymptotic floor reasonable.\n\n    Returns params = [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features per point, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # ensure positivity\n    eps = 1e-20\n    y_safe = np.maximum(y, eps)\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    E     = lr * bsz\n\n    logP = np.log(np.maximum(Psize, eps))\n    logD = np.log(np.maximum(D, eps))\n    logE = np.log(np.maximum(E, eps))\n    logy = np.log(y_safe)\n\n    # initial guess based on simple power-law and small floor\n    min_y = np.min(y_safe)\n    p0 = np.array([\n        0.0,            # logA\n       -0.5,            # \u03b1_P\n       -0.3,            # \u03b1_D\n       -0.2,            # \u03b1_E\n        np.log(min_y * 0.05 + eps)  # log_y_inf (5% of minimum observed)\n    ], dtype=float)\n\n    # bounds: exponents in reasonable range, floor below half the minimum observed\n    bounds = [\n        (None, None),                   # logA free\n        (-5.0, 5.0),                    # \u03b1_P\n        (-5.0, 5.0),                    # \u03b1_D\n        (-5.0, 5.0),                    # \u03b1_E\n        (None, np.log(min_y * 0.5 + eps))  # log_y_inf \u2264 log(0.5 * min_y)\n    ]\n\n    def objective(p):\n        logA, aP, aD, aE, log_yinf = p\n        # compute log_term\n        lt = logA + aP * logP + aD * logD + aE * logE\n        # stable log-sum-exp: log(y_inf + exp(lt))\n        M = np.maximum(log_yinf, lt)\n        logy_pred = M + np.log(np.exp(log_yinf - M) + np.exp(lt - M))\n        return np.mean((logy_pred - logy) ** 2)\n\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0.copy()\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\n# Normalization constants to center hyperparameter scales.\n_P0   = 1e8        # typical non\u2010embedding parameter count\n_D0   = 1e10       # typical training token count\n_BSZ0 = 512.0      # typical batch size\n_LR0  = 1e-3       # typical learning rate\n_eps  = 1e-12      # numeric floor for logs\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using a 6\u2010parameter power\u2010law plus an additive floor:\n\n      y_pred = y_inf\n             + exp(logA)\n               * (P/_P0)^aP\n               * (D/_D0)^aD\n               * (bsz/_BSZ0)^aB\n               * (lr/_LR0)^aL\n\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      params:      array\u2010like, length 6:\n                   [logA, aP, aD, aB, aL, y_inf]\n\n    Returns:\n      y_pred:      np.ndarray, shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, y_inf = p\n\n    # unpack and normalize features\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    # ensure positivity before exponentiation\n    lr  = np.maximum(lr, _eps)\n    bsz = np.maximum(bsz, _eps)\n    D   = np.maximum(D, _eps)\n    P   = np.maximum(P, _eps)\n\n    term = np.exp(logA) * (P ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in log-loss space:\n\n      MSE( log(y_pred) - log(y_true) )\n\n    with L-BFGS-B and box constraints.\n\n    Returns:\n      params: np.ndarray of length 6: [logA, aP, aD, aB, aL, y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and losses must match\")\n\n    # Floor target to avoid log(0)\n    y_safe = np.maximum(y, _eps)\n    logy   = np.log(y_safe)\n\n    # Precompute normalized log\u2010features\n    lr   = np.maximum(X[:, 0], _eps) / _LR0\n    bsz  = np.maximum(X[:, 1], _eps) / _BSZ0\n    D    = np.maximum(X[:, 2], _eps) / _D0\n    P    = np.maximum(X[:, 3], _eps) / _P0\n\n    logLR  = np.log(lr)\n    logBSZ = np.log(bsz)\n    logD   = np.log(D)\n    logP   = np.log(P)\n\n    # Initial parameter guess\n    y_min     = np.min(y_safe)\n    init_yinf = 0.1 * y_min\n    # estimate initial amplitude by mean residual\n    resid     = np.maximum(y_safe - init_yinf, _eps)\n    init_logA = np.log(np.mean(resid))\n    # rough initial exponents\n    init_exps = np.array([-0.5, -0.2, 0.1, -0.3], dtype=float)\n    # order: [aP, aD, aB, aL]\n    p0 = np.hstack([init_logA, init_exps, init_yinf])\n\n    # Bounds: logA free, exponents in [-5,5], y_inf in [0, y_min]\n    bounds = [(None, None)] + [(-5.0, 5.0)] * 4 + [(0.0, y_min)]\n\n    def _objective(p):\n        logA, aP, aD, aB, aL, y_inf = p\n\n        # compute log\u2010term = logA + aP\u00b7logP + aD\u00b7logD + aB\u00b7logBSZ + aL\u00b7logLR\n        lt = logA + aP * logP + aD * logD + aB * logBSZ + aL * logLR\n\n        # stable log-sum-exp to get log(y_pred) = log(y_inf + exp(lt))\n        ly = np.log(np.maximum(y_inf, _eps))\n        M  = np.maximum(ly, lt)\n        logy_pred = M + np.log(np.exp(ly - M) + np.exp(lt - M))\n\n        return np.mean((logy_pred - logy) ** 2)\n\n    result = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return p0.copy()\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Switched from a single \u201c(lr\u00b7bsz)\u201d exponent to separate exponents for learning rate and batch size, increasing expressivity.\n- Introduced normalization constants (_P0, _D0, _BSZ0, _LR0) to condition the optimization better across widely varying scales.\n- Fitted all six parameters (logA, exponents, floor y_inf) by minimizing MSE in log\u2010loss space with a stable log\u2010sum\u2010exp formulation.\n- Used sensible initialization and box\u2010constraints to guide L-BFGS-B, improving both convergence and generalization."]}}}