{"id": "75fcecb1-41c6-4003-89ee-a6db3c0c0b90", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using a\n    10-parameter log-quadratic scaling law with one key interaction.\n\n    Model in the log-domain:\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                   + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x). We then exponentiate to return y_pred.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # (log(lr))^2\n        L_bsz**2,             # (log(bsz))^2\n        L_data**2,            # (log(data_size))^2\n        L_param**2,           # (log(non_embedding_param_size))^2\n        L_data * L_param      # cross term\n    ])\n\n    # log-domain prediction and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-quadratic scaling law via\n    ridge-regularized closed-form regression in log-space.\n\n    Solves for p in:\n      log(y) \u2248 \u03a6 p,\n    with a small ridge penalty on non-intercept coefficients.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations:\n    #   (\u03a6\u1d40\u03a6 + \u03bb * I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all but the intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "fbf92bd1-0944-40d3-a806-6532629b77ac", "generation": 2, "timestamp": 1754809586.1442027, "iteration_found": 169, "metrics": {"nmse": 0.3868934976149482, "nmae": 0.7363985304629478, "r2": 0.6131065023850518, "combined_score": 0.7210358990936997}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'"}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter log-polynomial scaling law:\n    \n      log y_pred = p0\n                 + p1 * log(lr)\n                 + p2 * log(bsz)\n                 + p3 * log(data_size)\n                 + p4 * log(non_embedding_param_size)\n                 + p5 * [log(lr)]^2\n                 + p6 * [log(bsz)]^2\n                 + p7 * [log(data_size)]^2\n                 + p8 * [log(non_embedding_param_size)]^2\n                 + p9 * (log(data_size) * log(non_embedding_param_size))\n                 \n    Then y_pred = exp(log y_pred).\n    \n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # [log(lr)]^2\n        L_bsz**2,             # [log(bsz)]^2\n        L_data**2,            # [log(data_size)]^2\n        L_param**2,           # [log(non_embedding_param_size)]^2\n        L_data * L_param      # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form ridge regression\n    in the log-domain. Minimizes squared error on log(loss).\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge regularization strength\n    ridge = 1e-6\n    \n    # normal equations: (\u03a6\u1d40 \u03a6 + \u03bb I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10-parameter\n    2nd-order log-polynomial with one key interaction.\n\n    Model in log-domain:\n      log y_pred = p0\n                 + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x). We exponentiate to return y_pred.\n    Inputs:\n      data_points: array\u2010like shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like shape (10,)\n    Returns:\n      y_pred:      np.ndarray shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data*L_param]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via\n    closed-form ridge-regularized regression in log-space.\n    Inputs:\n      data_points: array\u2010like shape (N,4)\n      loss_values: array\u2010like shape (N,)\n    Returns:\n      params:      np.ndarray shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all non-intercept coefficients\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.0202, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using an enhanced log\u2010quadratic scaling law:\n      log(y_pred) = c0\n                    + a1*log(lr) + a2*log(bsz)\n                    + a3*log(data_size) + a4*log(non_embedding_param_size)\n                    + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 7: \n                     [c0, a1, a2, a3, a4, a5, a6]\n    Returns:\n        1D numpy array of length N with predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[0]}\")\n\n    # Avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix with log\u2010linear and log\u2010quadratic terms\n    # Columns: [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2]\n    Phi = np.vstack([\n        np.ones_like(L_lr),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T  # shape (N, 7)\n\n    log_pred = Phi.dot(p)      # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced log\u2010quadratic scaling law via ridge\u2010regularized least squares.\n\n    Model:\n      log(y) = c0\n               + a1*log(lr) + a2*log(bsz)\n               + a3*log(data_size) + a4*log(non_embedding_param_size)\n               + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n    Returns:\n        params: numpy array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix (N x 7)\n    Phi = np.vstack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T\n\n    # Ridge regularization on non\u2010intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)              # (7,7)\n    A[1:, 1:] += ridge * np.eye(6)  # only penalize a1..a6\n    b = Phi.T.dot(np.log(y_clipped))\n\n    # Solve linear system for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (5.349), Excellent nmae (2.923)\n\n\n### Inspiration 4 (Score: 0.7202, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved 6-parameter power\u2010law scaling law with an asymptotic loss floor,\nnormalized for numerical stability and strong extrapolation behavior.\n\nWe model:\n    y_pred = y_inf + A * (P/P0)^\u03b1_P * (D/D0)^\u03b1_D * (bsz/BSZ0)^\u03b1_bsz * (lr/LR0)^\u03b1_lr\n\nParameters (6):\n    [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\nwhere\n    P  = non\u2010embedding parameter count\n    D  = training data size (tokens)\n    bsz = batch size\n    lr  = learning rate\n\nNormalization constants (fixed):\n    P0   = 5e8      (\u2248 midpoint of 2.14e8\u20131e9)\n    D0   = 5e10     (\u2248 midpoint of 4e9\u20131e11)\n    BSZ0 = 512.0\n    LR0  = 1e-3\n\nFitting:\n  1) Initialize y_inf0 near 80% of the minimum observed loss\n  2) Linear least\u2010squares in log\u2010domain to solve for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n     via: log(y - y_inf0) \u2248 logA + \u03b1_P*log(P/P0) + \u03b1_D*log(D/D0)\n                                 + \u03b1_bsz*log(bsz/BSZ0) + \u03b1_lr*log(lr/LR0)\n\"\"\"\nimport numpy as np\n\n# normalization constants\n_P0   = 5e8\n_D0   = 5e10\n_BSZ0 = 512.0\n_LR0  = 1e-3\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 6-parameter power law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns array of shape (N,),\n              if params is 2D, returns array of shape (N,T).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {F}\")\n\n    # ensure parameter array shape (T,6)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p.reshape(1, -1)\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"Expected params of length 6, got {Pn}\")\n\n    # unpack and normalize features\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    lr_n  = lr    / _LR0\n    bsz_n = bsz   / _BSZ0\n    D_n   = D     / _D0\n    P_n   = Psize / _P0\n\n    # prepare output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # compute prediction for each parameter set\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        term   = np.exp(logA) * (P_n ** aP) * (D_n ** aD) * (bsz_n ** aB) * (lr_n ** aL)\n        y_inf  = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    # return shape (N,) if single param set\n    return y_all[:, 0] if T == 1 else y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law scaling law via linear least squares.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 6:\n              [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid non-positive for log/floor\n    y_safe = np.maximum(y, 1e-12)\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # initial asymptotic floor near 80% of min observed loss\n    y_min   = y_safe.min()\n    y_inf0  = max(0.8 * y_min, 1e-12)\n    log_yinf0 = np.log(y_inf0)\n\n    # target for linear regression: z = y - y_inf0\n    z = y_safe - y_inf0\n    if np.any(z <= 0):\n        # shift to positive domain\n        z = z + (abs(z.min()) + 1e-12)\n    log_z = np.log(z)\n\n    # build normalized log\u2010features\n    xL = np.log(lr    / _LR0)\n    xB = np.log(bsz   / _BSZ0)\n    xD = np.log(D     / _D0)\n    xP = np.log(Psize / _P0)\n\n    # design matrix for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    M = np.vstack([\n        np.ones(N),\n        xP,\n        xD,\n        xB,\n        xL\n    ]).T  # shape (N,5)\n\n    # least\u2010squares solve\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA, aP, aD, aB, aL = sol\n\n    # return parameter vector\n    return np.array([logA, aP, aD, aB, aL, log_yinf0], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.396), Excellent nmae (1.464)\n\n\n### Inspiration 5 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10-parameter\n    2nd-order log-polynomial with one key interaction.\n\n    Model in log-domain:\n      log y_pred = p0\n                 + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x). We exponentiate to return y_pred.\n    Inputs:\n      data_points: array\u2010like shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like shape (10,)\n    Returns:\n      y_pred:      np.ndarray shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data*L_param]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via\n    closed-form ridge-regularized regression in log-space.\n    Inputs:\n      data_points: array\u2010like shape (N,4)\n      loss_values: array\u2010like shape (N,)\n    Returns:\n      params:      np.ndarray shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all non-intercept coefficients\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using a\n    10-parameter log-quadratic scaling law with one key interaction.\n\n    Model in the log-domain:\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                   + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x). We then exponentiate to return y_pred.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # (log(lr))^2\n        L_bsz**2,             # (log(bsz))^2\n        L_data**2,            # (log(data_size))^2\n        L_param**2,           # (log(non_embedding_param_size))^2\n        L_data * L_param      # cross term\n    ])\n\n    # log-domain prediction and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-quadratic scaling law via\n    ridge-regularized closed-form regression in log-space.\n\n    Solves for p in:\n      log(y) \u2248 \u03a6 p,\n    with a small ridge penalty on non-intercept coefficients.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations:\n    #   (\u03a6\u1d40\u03a6 + \u03bb * I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all but the intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of Key Improvements:\n- Switched from a nonlinear iterative fit (L-BFGS-B on original loss) to a closed-form ridge\u2010regularized linear solve in log\u2010space for numerical stability and speed.\n- Expanded the parameterization to a 10-parameter log-quadratic polynomial (including one cross-term) to capture nonlinear interactions among [lr, bsz, data_size, non_embedding_param_size].\n- Added a small ridge penalty to improve conditioning and generalization.\n- Removed external dependencies on SciPy by using NumPy only.\n- Included robust input checking and clipping to avoid log(0) or negative values."]}}}