{"id": "ee0399d5-2d3b-4599-89c6-393e64c7a322", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log of the LM loss as a small but expressive\npolynomial in selected log\u2010features:\n\n    z_lr    = log(lr)\n    z_bsz   = log(batch size)\n    z_data  = log(data size)\n    z_param = log(non\u2010embedding parameter size)\n\nSpecifically:\n    log(loss) \u2248 c0\n               + c1*z_param\n               + c2*z_data\n               + c3*z_bsz\n               + c4*z_lr\n               + c5*(z_lr)^2\n               + c6*(z_param * z_data)\n\nThis form captures:\n  - power\u2010law effects of model and data scale,\n  - a quadratic dependence on learning rate (to approximate an optimal lr),\n  - a cross\u2010term between model size and data size.\nWe fit via closed\u2010form ridge\u2010regularized least squares in the log\u2010domain\nfor numerical stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the evolved scaling law.\n\n    Args:\n        data_points: array\u2010like of shape (N,4), columns\n                     [lr, bsz, data_size, non_embedding_param_size]\n        params:      1D array of length 7:\n                     [c0,\n                      c1 (z_param),\n                      c2 (z_data),\n                      c3 (z_bsz),\n                      c4 (z_lr),\n                      c5 (z_lr^2),\n                      c6 (z_param * z_data)]\n\n    Returns:\n        y_pred: 1D numpy array of length N with predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # Floor to avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    # Compute logs of features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # Build design matrix \u03a6 (N\u00d77)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0                 # intercept\n    Phi[:, 1] = z_param            # model\u2010size effect\n    Phi[:, 2] = z_data             # data\u2010size effect\n    Phi[:, 3] = z_bsz              # batch\u2010size effect\n    Phi[:, 4] = z_lr               # learning\u2010rate linear effect\n    Phi[:, 5] = z_lr * z_lr        # learning\u2010rate quadratic term\n    Phi[:, 6] = z_param * z_data   # cross\u2010term model\u00d7data\n\n    # Predict in log\u2010domain, then back\u2010transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the evolved scaling\u2010law parameters via ridge\u2010regularized\n    least squares in the log\u2010domain.\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n\n    Returns:\n        params:      1D array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor inputs/outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # Logs of inputs and outputs\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n    logy    = np.log(y)\n\n    # Build design matrix \u03a6 (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # Closed\u2010form ridge regression: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # Regularize only non\u2010intercept terms\n    A[1:, 1:] += ridge * np.eye(6)\n    b = Phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4e1b9075-6eaa-41a5-815a-3eae5589ff12", "generation": 2, "timestamp": 1754808131.8219993, "iteration_found": 50, "metrics": {"nmse": 8.789038342112905, "nmae": 3.750437375759466, "r2": -7.789038342112905, "combined_score": 0.10215508051469702}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'"}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: atleast_2d() got an unexpected keyword argument 'dtype'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.9898, nmae: 1.2163, r2: 0.0102, combined_score: 0.5026\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4376, nmae: 0.6957, r2: 0.5624, combined_score: 0.6956\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training hyperparameters:\nWe model log(loss) as a second\u2010order polynomial in the log of each feature,\nincluding squared terms and pairwise interactions, then fit via\nclosed\u2010form ridge regression for stability and efficiency.\nThis richer model can capture curvature in the log\u2010domain with\na moderate number of parameters (15 for 4 features).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order\n    polynomial in log\u2010domain.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4 + 4*3/2 = 15\n                 weights for [intercept,\n                              log(x_i) terms (4),\n                              log(x_i)^2 terms (4),\n                              log(x_i)*log(x_j) pairwise terms (6)]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                   # shape (N,4)\n    N, F = logX.shape                  # F should be 4\n    # total parameters: 1 + F + F + F*(F-1)/2\n    P_expected = 1 + F + F + (F*(F-1))//2\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.size}\")\n    # build design matrix Phi\n    # columns: [1,\n    #           logX[:,0..F-1],\n    #           logX[:,0..F-1]**2,\n    #           for i<j: logX[:,i]*logX[:,j]]\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n    # linear log terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # squared log terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise cross terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # compute log-prediction\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the second\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values.\")\n    # floor inputs/outputs\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)                   # shape (N,4)\n    logy = np.log(y)                   # shape (N,)\n    N, F = logX.shape\n    # build design matrix Phi\n    P = 1 + F + F + (F*(F-1))//2       # 15 for F=4\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries except intercept term\n    diag_inds = np.diag_indices(P)\n    A[diag_inds] += ridge\n    A[0, 0] -= ridge\n    b = Phi.T.dot(logy)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n### Program 2 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss via a second\u2010order polynomial in the log\u2010domain of each feature:\n   log(loss) = c0\n             + sum_i ci * log(x_i)\n             + sum_i di * (log(x_i))^2\n             + sum_{i<j} e_{ij} * log(x_i)*log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit this via ridge\u2010regularized closed\u2010form regression for stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build the design matrix \u03a6 for a second\u2010order log\u2010polynomial.\n    X: (N,4) array of positive features.\n    Returns: \u03a6 of shape (N, 15).\n    \"\"\"\n    N, F = X.shape\n    # Floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # (N,4)\n    \n    # Total parameters = 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    \n    # Fill linear & quadratic & interaction terms\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15.\n\n    Returns:\n      y_pred:      1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    P_exp = 1 + F + F + (F*(F-1))//2\n    if p.size != P_exp:\n        raise ValueError(f\"Expected {P_exp} parameters, got {p.size}\")\n    \n    Phi = _build_design_matrix(X)           # (N,15)\n    log_pred = Phi.dot(p)                   # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # Floor to avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    \n    # Log\u2010transform\n    logy = np.log(y)\n    Phi = _build_design_matrix(X)           # (N,15)\n    \n    # Closed\u2010form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-4\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge on all but intercept\n    A[np.arange(1, P), np.arange(1, P)] += ridge\n    b = Phi.T.dot(logy)\n    \n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4376), Performs well on nmae (0.6957), Performs well on r2 (0.5624), Performs well on combined_score (0.6956)\n\n\n### Program 3 (Score: 0.6797)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters with learned asymptotic floor.\n\nWe model\n    y_pred = y_inf + exp( \u03a6(log X) \u00b7 p )\nwhere\n    \u03a6(log X) contains an intercept, first\u2010order, squared, and pairwise interaction\n    terms on the log of each feature.\nWe jointly learn the polynomial coefficients p and the floor y_inf by\na 1D golden\u2010section search over y_inf and closed\u2010form ridge regression\nfor p at each candidate.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 16:\n                   [y_inf,\n                    \u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_data, \u03b2_param,\n                    \u03b3_lr2, \u03b3_bsz2, \u03b3_data2, \u03b3_param2,\n                    \u03b4_lr_bsz, \u03b4_lr_data, \u03b4_lr_param,\n                    \u03b4_bsz_data, \u03b4_bsz_param, \u03b4_data_param]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # clamp to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # (N,4)\n    N, F = logX.shape\n\n    p_all = np.asarray(params, dtype=float).ravel()\n    if p_all.size != 1 + (1 + F + F + (F*(F-1))//2):\n        raise ValueError(f\"Expected 16 parameters but got {p_all.size}\")\n    y_inf = p_all[0]\n    p = p_all[1:]\n\n    # build design matrix \u03a6\n    P_expected = 1 + F + F + (F*(F-1))//2  # intercept + linear + squared + interactions\n    Phi = np.empty((N, P_expected), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    # squared terms\n    for i in range(F):\n        Phi[:, idx] = logX[:, i]**2\n        idx += 1\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    log_term = Phi.dot(p)\n    y_pred = y_inf + np.exp(log_term)\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law by jointly optimizing the floor y_inf via\n    golden\u2010section search and the polynomial coefficients via\n    closed\u2010form ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters of length 16.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match.\")\n\n    # clamp inputs/outputs\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    N, F = X.shape\n    # build log\u2010feature matrix once\n    logX = np.log(X)\n    # design\u2010matrix dimension\n    P_poly = 1 + F + F + (F*(F-1))//2\n\n    def make_Phi(logX):\n        Phi = np.empty((logX.shape[0], P_poly), dtype=float)\n        Phi[:, 0] = 1.0\n        Phi[:, 1:1+F] = logX\n        idx = 1 + F\n        for i in range(F):\n            Phi[:, idx] = logX[:, i]**2\n            idx += 1\n        for i in range(F):\n            for j in range(i+1, F):\n                Phi[:, idx] = logX[:, i] * logX[:, j]\n                idx += 1\n        return Phi\n\n    Phi = make_Phi(logX)\n\n    # ridge penalty for polynomial terms (not intercept)\n    ridge = 1e-3\n\n    # residual MSE given y_inf candidate: solve for p then compute MSE.\n    def mse_for_yinf(y_inf):\n        z = y - y_inf\n        # require positivity\n        if np.any(z <= 0):\n            return np.inf\n        logz = np.log(z)\n        # solve (\u03a6\u1d40\u03a6 + ridge*I) p = \u03a6\u1d40 logz, but no penalty on intercept\n        A = Phi.T.dot(Phi)\n        # add ridge to diagonal\n        diag = np.arange(P_poly)\n        A[diag, diag] += ridge\n        A[0, 0] -= ridge  # no regularization on intercept\n        b = Phi.T.dot(logz)\n        try:\n            p = np.linalg.solve(A, b)\n        except np.linalg.LinAlgError:\n            return np.inf\n        # compute predictions\n        log_term = Phi.dot(p)\n        y_pred = y_inf + np.exp(log_term)\n        return np.mean((y_pred - y)**2)\n\n    # golden\u2010section search for y_inf in [0, min(y)*0.9]\n    y_min = np.min(y)\n    a, b = 0.0, y_min * 0.9\n    gr = (np.sqrt(5) - 1) / 2\n    # initial interior points\n    c = b - gr*(b - a)\n    d = a + gr*(b - a)\n    fc = mse_for_yinf(c)\n    fd = mse_for_yinf(d)\n    for _ in range(25):\n        if fc > fd:\n            a = c\n            c = d\n            fc = fd\n            d = a + gr*(b - a)\n            fd = mse_for_yinf(d)\n        else:\n            b = d\n            d = c\n            fd = fc\n            c = b - gr*(b - a)\n            fc = mse_for_yinf(c)\n    # best y_inf\n    y_inf_opt = c if fc < fd else d\n\n    # re\u2010solve for polynomial at optimal y_inf\n    z = y - y_inf_opt\n    logz = np.log(z)\n    A = Phi.T.dot(Phi)\n    diag = np.arange(P_poly)\n    A[diag, diag] += ridge\n    A[0, 0] -= ridge\n    bvec = Phi.T.dot(logz)\n    p_opt = np.linalg.solve(A, bvec)\n\n    # pack parameters: [y_inf, ...polynomial coefficients...]\n    params = np.concatenate([[y_inf_opt], p_opt])\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.9898), Performs well on nmae (1.2163), Performs well on r2 (0.0102), Performs well on combined_score (0.5026)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0202)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using an enhanced log\u2010quadratic scaling law:\n      log(y_pred) = c0\n                    + a1*log(lr) + a2*log(bsz)\n                    + a3*log(data_size) + a4*log(non_embedding_param_size)\n                    + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 7: \n                     [c0, a1, a2, a3, a4, a5, a6]\n    Returns:\n        1D numpy array of length N with predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[0]}\")\n\n    # Avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix with log\u2010linear and log\u2010quadratic terms\n    # Columns: [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2]\n    Phi = np.vstack([\n        np.ones_like(L_lr),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T  # shape (N, 7)\n\n    log_pred = Phi.dot(p)      # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced log\u2010quadratic scaling law via ridge\u2010regularized least squares.\n\n    Model:\n      log(y) = c0\n               + a1*log(lr) + a2*log(bsz)\n               + a3*log(data_size) + a4*log(non_embedding_param_size)\n               + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n    Returns:\n        params: numpy array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix (N x 7)\n    Phi = np.vstack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T\n\n    # Ridge regularization on non\u2010intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)              # (7,7)\n    A[1:, 1:] += ridge * np.eye(6)  # only penalize a1..a6\n    b = Phi.T.dot(np.log(y_clipped))\n\n    # Solve linear system for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.2131)\n```python\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log of the LM loss as a small but expressive\npolynomial in selected log\u2010features:\n   z_lr        = log(lr)\n   z_bsz       = log(batch size)\n   z_data      = log(data size)\n   z_param     = log(non\u2010embedding parameter size)\n\nSpecifically:\n   log(loss) \u2248 c0\n              + c1*z_param\n              + c2*z_data\n              + c3*z_bsz\n              + c4*z_lr\n              + c5*z_lr**2\n              + c6*(z_param * z_data)\n\nThis form captures the main power\u2010law effects of model and data scale,\na quadratic learning\u2010rate dependence (to approximate an optimal lr),\nand a cross\u2010term between model size and data size. We fit via\nridge\u2010regularized least squares in the log\u2010domain for numerical stability.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the evolved scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 7:\n                   [c0,\n                    c1 (z_param),\n                    c2 (z_data),\n                    c3 (z_bsz),\n                    c4 (z_lr),\n                    c5 (z_lr^2),\n                    c6 (z_param * z_data)]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 7:\n        raise ValueError(f\"Expected 7 parameters but got {p.shape[0]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # feature logs\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix \u03a6 of shape (N,7)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear effects\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    # quadratic learning\u2010rate term\n    Phi[:, 5] = z_lr * z_lr\n    # cross term model\u2010size \u00d7 data\u2010size\n    Phi[:, 6] = z_param * z_data\n\n    # predict in log\u2010domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the evolved scaling\u2010law parameters via ridge\u2010regularized\n    least squares in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # logs of inputs and outputs\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n    logy    = np.log(y)\n\n    # design matrix \u03a6 (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to diagonal entries 1..6\n    diag_idx = np.arange(1, 7)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law discovery for LLM training hyperparameters:\nWe model log(loss) as a second\u2010order polynomial in the log of each feature,\nincluding squared terms and pairwise interactions, then fit via\nclosed\u2010form ridge regression for stability and efficiency.\nThis richer model can capture curvature in the log\u2010domain with\na moderate number of parameters (15 for 4 features).\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order\n    polynomial in log\u2010domain.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4 + 4*3/2 = 15\n                 weights for [intercept,\n                              log(x_i) terms (4),\n                              log(x_i)^2 terms (4),\n                              log(x_i)*log(x_j) pairwise terms (6)]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                   # shape (N,4)\n    N, F = logX.shape                  # F should be 4\n    # total parameters: 1 + F + F + F*(F-1)/2\n    P_expected = 1 + F + F + (F*(F-1))//2\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.size}\")\n    # build design matrix Phi\n    # columns: [1,\n    #           logX[:,0..F-1],\n    #           logX[:,0..F-1]**2,\n    #           for i<j: logX[:,i]*logX[:,j]]\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n    # linear log terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # squared log terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise cross terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # compute log-prediction\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the second\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched number of data points and loss values.\")\n    # floor inputs/outputs\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)                   # shape (N,4)\n    logy = np.log(y)                   # shape (N,)\n    N, F = logX.shape\n    # build design matrix Phi\n    P = 1 + F + F + (F*(F-1))//2       # 15 for F=4\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal entries except intercept term\n    diag_inds = np.diag_indices(P)\n    A[diag_inds] += ridge\n    A[0, 0] -= ridge\n    b = Phi.T.dot(logy)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 4 (Score: 1.0202, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using an enhanced log\u2010quadratic scaling law:\n      log(y_pred) = c0\n                    + a1*log(lr) + a2*log(bsz)\n                    + a3*log(data_size) + a4*log(non_embedding_param_size)\n                    + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 7: \n                     [c0, a1, a2, a3, a4, a5, a6]\n    Returns:\n        1D numpy array of length N with predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[0]}\")\n\n    # Avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix with log\u2010linear and log\u2010quadratic terms\n    # Columns: [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2]\n    Phi = np.vstack([\n        np.ones_like(L_lr),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T  # shape (N, 7)\n\n    log_pred = Phi.dot(p)      # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced log\u2010quadratic scaling law via ridge\u2010regularized least squares.\n\n    Model:\n      log(y) = c0\n               + a1*log(lr) + a2*log(bsz)\n               + a3*log(data_size) + a4*log(non_embedding_param_size)\n               + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n    Returns:\n        params: numpy array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix (N x 7)\n    Phi = np.vstack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T\n\n    # Ridge regularization on non\u2010intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)              # (7,7)\n    A[1:, 1:] += ridge * np.eye(6)  # only penalize a1..a6\n    b = Phi.T.dot(np.log(y_clipped))\n\n    # Solve linear system for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (5.349), Excellent nmae (2.923)\n\n\n### Inspiration 5 (Score: 1.2131, Type: High-Performer)\n```python\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log of the LM loss as a small but expressive\npolynomial in selected log\u2010features:\n   z_lr        = log(lr)\n   z_bsz       = log(batch size)\n   z_data      = log(data size)\n   z_param     = log(non\u2010embedding parameter size)\n\nSpecifically:\n   log(loss) \u2248 c0\n              + c1*z_param\n              + c2*z_data\n              + c3*z_bsz\n              + c4*z_lr\n              + c5*z_lr**2\n              + c6*(z_param * z_data)\n\nThis form captures the main power\u2010law effects of model and data scale,\na quadratic learning\u2010rate dependence (to approximate an optimal lr),\nand a cross\u2010term between model size and data size. We fit via\nridge\u2010regularized least squares in the log\u2010domain for numerical stability.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the evolved scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 7:\n                   [c0,\n                    c1 (z_param),\n                    c2 (z_data),\n                    c3 (z_bsz),\n                    c4 (z_lr),\n                    c5 (z_lr^2),\n                    c6 (z_param * z_data)]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 7:\n        raise ValueError(f\"Expected 7 parameters but got {p.shape[0]}\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # feature logs\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix \u03a6 of shape (N,7)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear effects\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    # quadratic learning\u2010rate term\n    Phi[:, 5] = z_lr * z_lr\n    # cross term model\u2010size \u00d7 data\u2010size\n    Phi[:, 6] = z_param * z_data\n\n    # predict in log\u2010domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the evolved scaling\u2010law parameters via ridge\u2010regularized\n    least squares in the log\u2010domain.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # logs of inputs and outputs\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n    logy    = np.log(y)\n\n    # design matrix \u03a6 (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to diagonal entries 1..6\n    diag_idx = np.arange(1, 7)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.789), Excellent nmae (3.750)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log of the LM loss as a small but expressive\npolynomial in selected log\u2010features:\n\n    z_lr    = log(lr)\n    z_bsz   = log(batch size)\n    z_data  = log(data size)\n    z_param = log(non\u2010embedding parameter size)\n\nSpecifically:\n    log(loss) \u2248 c0\n               + c1*z_param\n               + c2*z_data\n               + c3*z_bsz\n               + c4*z_lr\n               + c5*(z_lr)^2\n               + c6*(z_param * z_data)\n\nThis form captures:\n  - power\u2010law effects of model and data scale,\n  - a quadratic dependence on learning rate (to approximate an optimal lr),\n  - a cross\u2010term between model size and data size.\nWe fit via closed\u2010form ridge\u2010regularized least squares in the log\u2010domain\nfor numerical stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using the evolved scaling law.\n\n    Args:\n        data_points: array\u2010like of shape (N,4), columns\n                     [lr, bsz, data_size, non_embedding_param_size]\n        params:      1D array of length 7:\n                     [c0,\n                      c1 (z_param),\n                      c2 (z_data),\n                      c3 (z_bsz),\n                      c4 (z_lr),\n                      c5 (z_lr^2),\n                      c6 (z_param * z_data)]\n\n    Returns:\n        y_pred: 1D numpy array of length N with predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # Floor to avoid log(0) or negative\n    X = np.maximum(X, 1e-12)\n    # Compute logs of features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # Build design matrix \u03a6 (N\u00d77)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0                 # intercept\n    Phi[:, 1] = z_param            # model\u2010size effect\n    Phi[:, 2] = z_data             # data\u2010size effect\n    Phi[:, 3] = z_bsz              # batch\u2010size effect\n    Phi[:, 4] = z_lr               # learning\u2010rate linear effect\n    Phi[:, 5] = z_lr * z_lr        # learning\u2010rate quadratic term\n    Phi[:, 6] = z_param * z_data   # cross\u2010term model\u00d7data\n\n    # Predict in log\u2010domain, then back\u2010transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the evolved scaling\u2010law parameters via ridge\u2010regularized\n    least squares in the log\u2010domain.\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n\n    Returns:\n        params:      1D array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor inputs/outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # Logs of inputs and outputs\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n    logy    = np.log(y)\n\n    # Build design matrix \u03a6 (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # Closed\u2010form ridge regression: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # Regularize only non\u2010intercept terms\n    A[1:, 1:] += ridge * np.eye(6)\n    b = Phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Switched from a 6\u2010parameter purely power\u2010law + floor fit via iterative BFGS to a 7\u2010parameter closed\u2010form ridge solution.\n- Modeled log(loss) directly as a small polynomial in the logs of features, capturing key effects:\n  \u2022 Model\u2010size and data\u2010size power\u2010laws  \n  \u2022 Batch\u2010size linear scaling  \n  \u2022 Learning\u2010rate linear and quadratic terms  \n  \u2022 Cross\u2010term between model\u2010size and data\u2010size  \n- Employed ridge regularization for numerical stability.\n- Removed iterative numerical minimization, ensuring reproducible, efficient closed\u2010form fitting."]}}}