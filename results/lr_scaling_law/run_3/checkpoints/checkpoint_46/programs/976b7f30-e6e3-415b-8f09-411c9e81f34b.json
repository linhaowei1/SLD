{"id": "976b7f30-e6e3-415b-8f09-411c9e81f34b", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a mixed power\u2010law + finite\u2010size correction:\n      log(loss) = \u03b80\n                + \u03b8_lr  * log(lr)\n                + \u03b8_bsz * log(bsz)\n                + \u03b8_data * log(data_size)\n                + \u03b8_param* log(non_embedding_param_size)\n                + \u03c6_data * (1/data_size)\n                + \u03c6_param* (1/non_embedding_param_size)\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array_like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array_like of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid zeros in log or division\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs of the four hyperparameters\n    logX = np.log(X)                  # shape (N,4)\n\n    # inverse\u2010size corrections\n    inv_data  = 1.0 / X[:, 2]         # (N,)\n    inv_param = 1.0 / X[:, 3]         # (N,)\n\n    # unpack parameters\n    \u03b80      = params[0]\n    \u03b8_lr    = params[1]\n    \u03b8_bsz   = params[2]\n    \u03b8_data  = params[3]\n    \u03b8_param = params[4]\n    \u03c6_data  = params[5]\n    \u03c6_param = params[6]\n\n    # compute log\u2010loss\n    log_pred = (\n        \u03b80\n        + \u03b8_lr    * logX[:, 0]\n        + \u03b8_bsz   * logX[:, 1]\n        + \u03b8_data  * logX[:, 2]\n        + \u03b8_param * logX[:, 3]\n        + \u03c6_data  * inv_data\n        + \u03c6_param * inv_param\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log\u2010space:\n      log(loss) \u2248 \u03b80\n                + \u03b8_lr  * log(lr)\n                + \u03b8_bsz * log(bsz)\n                + \u03b8_data * log(data_size)\n                + \u03b8_param* log(non_embedding_param_size)\n                + \u03c6_data * (1/data_size)\n                + \u03c6_param* (1/non_embedding_param_size)\n\n    Inputs:\n      data_points: array_like of shape (N,4)\n      loss_values: array_like of shape (N,)\n    Returns:\n      params: numpy.ndarray of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid zeros for log and division\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build features\n    logX      = np.log(X)              # (N,4)\n    inv_data  = 1.0 / X[:, 2:3]        # (N,1)\n    inv_param = 1.0 / X[:, 3:4]        # (N,1)\n    logy      = np.log(y)              # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    D = np.hstack([ones, logX, inv_data, inv_param])  # shape (N,7)\n\n    # ridge regularization for stability (no penalty on intercept)\n    \u03bb = 1e-6\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0  # do not regularize intercept\n\n    # solve normal equations: (D^T D + \u03bb I) p = D^T logy\n    A = D.T.dot(D) + \u03bb * I\n    b = D.T.dot(logy)\n\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        params, *_ = np.linalg.lstsq(D, logy, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ffd9e185-6841-4741-875a-bd417579abc3", "generation": 2, "timestamp": 1754717966.3482168, "iteration_found": 46, "metrics": {"nmse": 0.39389171579255755, "nmae": 0.5087149307819061, "r2": 0.6061082842074424, "combined_score": 0.7174158427589238}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.42203473513337164, "nmae": 0.5815254794417888, "r2": 0.5779652648666284, "combined_score": 0.703217702981222}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4220\n- nmae: 0.5815\n- r2: 0.5780\n- combined_score: 0.7032\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4123, nmae: 0.5598, r2: 0.5877, combined_score: 0.7081\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a mixed power\u2010law + finite\u2010size correction model:\n      log(loss) = \u03b80\n                + \u03b8_lr  * log(lr)\n                + \u03b8_bsz * log(bsz)\n                + \u03b8_data * log(data_size)\n                + \u03b8_param* log(non_embedding_param_size)\n                + \u03c6_data * (1/data_size)\n                + \u03c6_param* (1/non_embedding_param_size)\n\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array_like shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array_like shape (7,) =\n                     [\u03b80,\n                      \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                      \u03c6_data, \u03c6_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # guard against zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs of features\n    logX = np.log(X)                 # shape (N,4)\n    # finite\u2010size corrections\n    inv_data  = 1.0 / X[:, 2]        # shape (N,)\n    inv_param = 1.0 / X[:, 3]        # shape (N,)\n\n    # unpack parameters\n    \u03b80       = params[0]\n    \u03b8        = params[1:5]           # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    \u03c6_data   = params[5]\n    \u03c6_param  = params[6]\n\n    # predicted log\u2010loss\n    log_pred = \u03b80 + logX.dot(\u03b8) + \u03c6_data * inv_data + \u03c6_param * inv_param\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log\u2010space:\n\n      log(loss) \u2248 \u03b80\n                + \u03b8_lr  * log(lr)\n                + \u03b8_bsz * log(bsz)\n                + \u03b8_data * log(data_size)\n                + \u03b8_param* log(non_embedding_param_size)\n                + \u03c6_data * (1/data_size)\n                + \u03c6_param* (1/non_embedding_param_size)\n\n    Inputs:\n      data_points: array_like shape (N,4)\n      loss_values: array_like shape (N,)\n    Returns:\n      params: ndarray shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # guard against zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build features\n    logX      = np.log(X)                # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])        # (N,1)\n    inv_param = (1.0 / X[:, 3:4])        # (N,1)\n    logy      = np.log(y)                # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    D = np.hstack([ones, logX, inv_data, inv_param])  # shape (N,7)\n\n    # ridge regularization (stabilize inversion), no penalty on intercept\n    \u03bb = 1e-6\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (D^T D + \u03bb I) p = D^T logy\n    A = D.T.dot(D) + \u03bb * I\n    b = D.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n### Program 2 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed power\u2010law + finite\u2010size correction model:\n        log(loss) \u2248 \u03b80 + \u03a3_{i=1}^4 \u03b8_i * log(x_i)\n                           + \u03c6_data * (1/data_size)\n                           + \u03c6_param * (1/non_embedding_param_size)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # features in log-space\n    logX = np.log(X)                      # (N,4)\n\n    # finite-size corrections\n    inv_data  = 1.0 / X[:, 2]             # (N,)\n    inv_param = 1.0 / X[:, 3]             # (N,)\n\n    # unpack parameters\n    intercept = params[0]                 # \u03b80\n    theta     = params[1:5]               # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data  = params[5]                 # \u03c6_data\n    phi_param = params[6]                 # \u03c6_param\n\n    # compute predicted log-loss\n    log_pred = (intercept\n                + logX.dot(theta)\n                + inv_data * phi_data\n                + inv_param * phi_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log-space:\n        log(loss) \u2248 \u03b80 + \u03a3_i \u03b8_i * log(x_i) + \u03c6_data*(1/data_size) + \u03c6_param*(1/param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (7,) as in scaling_law_func doc\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build feature matrix\n    logX     = np.log(X)                       # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])              # (N,1)\n    inv_param = (1.0 / X[:, 3:4])              # (N,1)\n    logy      = np.log(y)                      # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    design = np.hstack([ones, logX, inv_data, inv_param])        # (N,7)\n\n    # ridge regularization for numerical stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (D^T D + \u03bb I) p = D^T logy\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n### Program 3 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.4123), Performs well on nmae (0.5598), Performs well on r2 (0.5877), Performs well on combined_score (0.7081)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law:\n      loss \u2248 loss_floor + exp(intercept + \u03a3_i w_i * log(x_i))\n    where x_i are [lr, bsz, data_size, non_embedding_param_size].\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (6,) =\n                   [loss_floor, intercept, w_lr, w_bsz, w_data_size, w_param_size]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                    # (N,4)\n\n    loss_floor = params[0]              # \u2265 0\n    intercept = params[1]               # scalar\n    weights = params[2:]                # (4,)\n\n    log_pred = intercept + logX.dot(weights)  # (N,)\n    return loss_floor + np.exp(log_pred)      # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) Initial linear regression in log\u2010space to get intercept & weights\n      2) Robust least_squares refinement (Huber loss) in original space to also fit floor\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (6,) = [loss_floor, intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # log\u2010space design\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    N, F = logX.shape   # F == 4\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])  # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I  # (5,5)\n    b = design.T.dot(logy)                     # (5,)\n\n    # initial solve in log\u2010space\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                  # (4,)\n\n    # initial floor ~ half of the smallest observed loss\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack initial guess for all 6 params\n    x0 = np.concatenate([[loss_floor_init], [intercept_init], weights_init])\n\n    # constraints: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf] * (F + 1)\n    upper = [np.min(y)] + [np.inf] * (F + 1)\n\n    # refine with robust least-squares in original space\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    try:\n        res = least_squares(\n            residuals,\n            x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        return res.x\n    except Exception:\n        # fallback if optimizer fails\n        return x0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law:\n      loss \u2248 floor + exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (6,) =\n                   [floor, intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # (N,4)\n\n    floor      = float(params[0])\n    intercept  = float(params[1])\n    weights    = np.asarray(params[2:], dtype=np.float64)  # (4,)\n\n    # multiplicative power\u2010law form\n    log_part = intercept + logX.dot(weights)  # (N,)\n    return floor + np.exp(log_part)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the floor + power\u2010law model by:\n      1) Closed\u2010form ridge in standardized log\u2010space to get an initial [intercept, weights]\n         and a heuristic floor \u2248 0.8*min(loss).\n      2) Robust least_squares (Huber) refinement over all 6 parameters in original space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [floor, intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log problems\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape  # F == 4\n\n    # 0) Initial floor guess (we'll let least_squares adjust)\n    floor0 = max(0.0, 0.8 * np.min(y))\n\n    # 1) CLOSED-FORM INITIAL REGRESSION ON y - floor0\n    y0 = y - floor0\n    y0 = np.maximum(y0, eps)\n\n    logX  = np.log(X)   # (N,4)\n    logy0 = np.log(y0)  # (N,)\n\n    # Standardize features for numeric stability\n    mu    = logX.mean(axis=0)                     # (4,)\n    sigma = logX.std(axis=0) + eps                # (4,)\n    Z     = (logX - mu) / sigma                   # (N,4)\n\n    # Build ridge design matrix in standardized log-space\n    ones   = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, Z])                 # (N, 5)\n\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0  # do not penalize intercept\n\n    A = design.T.dot(design) + lambda_reg * I     # (5,5)\n    b = design.T.dot(logy0)                       # (5,)\n\n    # solve for params in standardized space\n    pz = np.linalg.solve(A, b)  # (5,)\n    cz, wz = pz[0], pz[1:]      # intercept_z and weights_z\n\n    # recover original-space intercept and weights\n    w_init = wz / sigma                                # (4,)\n    intercept_init = cz - np.sum(wz * (mu / sigma))    # scalar\n\n    x0 = np.concatenate([[floor0, intercept_init], w_init])  # (6,)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    lower = [0.0] + [-np.inf] * (F+1)\n    upper = [np.min(y)] + [np.inf] * (F+1)\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000,\n            xtol=1e-9,\n            ftol=1e-9\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to closed\u2010form solution if LSQR fails\n        params_opt = x0\n\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed power\u2010law + finite\u2010size correction model:\n        log(loss) \u2248 \u03b80 + \u03a3_{i=1}^4 \u03b8_i * log(x_i)\n                           + \u03c6_data * (1/data_size)\n                           + \u03c6_param * (1/non_embedding_param_size)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # features in log-space\n    logX = np.log(X)                      # (N,4)\n\n    # finite-size corrections\n    inv_data  = 1.0 / X[:, 2]             # (N,)\n    inv_param = 1.0 / X[:, 3]             # (N,)\n\n    # unpack parameters\n    intercept = params[0]                 # \u03b80\n    theta     = params[1:5]               # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data  = params[5]                 # \u03c6_data\n    phi_param = params[6]                 # \u03c6_param\n\n    # compute predicted log-loss\n    log_pred = (intercept\n                + logX.dot(theta)\n                + inv_data * phi_data\n                + inv_param * phi_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log-space:\n        log(loss) \u2248 \u03b80 + \u03a3_i \u03b8_i * log(x_i) + \u03c6_data*(1/data_size) + \u03c6_param*(1/param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (7,) as in scaling_law_func doc\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build feature matrix\n    logX     = np.log(X)                       # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])              # (N,1)\n    inv_param = (1.0 / X[:, 3:4])              # (N,1)\n    logy      = np.log(y)                      # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    design = np.hstack([ones, logX, inv_data, inv_param])        # (N,7)\n\n    # ridge regularization for numerical stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (D^T D + \u03bb I) p = D^T logy\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5670, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law:\n      loss \u2248 floor + exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (6,) =\n                   [floor, intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)  # (N,4)\n\n    floor      = float(params[0])\n    intercept  = float(params[1])\n    weights    = np.asarray(params[2:], dtype=np.float64)  # (4,)\n\n    # multiplicative power\u2010law form\n    log_part = intercept + logX.dot(weights)  # (N,)\n    return floor + np.exp(log_part)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the floor + power\u2010law model by:\n      1) Closed\u2010form ridge in standardized log\u2010space to get an initial [intercept, weights]\n         and a heuristic floor \u2248 0.8*min(loss).\n      2) Robust least_squares (Huber) refinement over all 6 parameters in original space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [floor, intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log problems\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape  # F == 4\n\n    # 0) Initial floor guess (we'll let least_squares adjust)\n    floor0 = max(0.0, 0.8 * np.min(y))\n\n    # 1) CLOSED-FORM INITIAL REGRESSION ON y - floor0\n    y0 = y - floor0\n    y0 = np.maximum(y0, eps)\n\n    logX  = np.log(X)   # (N,4)\n    logy0 = np.log(y0)  # (N,)\n\n    # Standardize features for numeric stability\n    mu    = logX.mean(axis=0)                     # (4,)\n    sigma = logX.std(axis=0) + eps                # (4,)\n    Z     = (logX - mu) / sigma                   # (N,4)\n\n    # Build ridge design matrix in standardized log-space\n    ones   = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, Z])                 # (N, 5)\n\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0  # do not penalize intercept\n\n    A = design.T.dot(design) + lambda_reg * I     # (5,5)\n    b = design.T.dot(logy0)                       # (5,)\n\n    # solve for params in standardized space\n    pz = np.linalg.solve(A, b)  # (5,)\n    cz, wz = pz[0], pz[1:]      # intercept_z and weights_z\n\n    # recover original-space intercept and weights\n    w_init = wz / sigma                                # (4,)\n    intercept_init = cz - np.sum(wz * (mu / sigma))    # scalar\n\n    x0 = np.concatenate([[floor0, intercept_init], w_init])  # (6,)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    lower = [0.0] + [-np.inf] * (F+1)\n    upper = [np.min(y)] + [np.inf] * (F+1)\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000,\n            xtol=1e-9,\n            ftol=1e-9\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to closed\u2010form solution if LSQR fails\n        params_opt = x0\n\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5670, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nWe model:\n    loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nThis captures a multiplicative power\u2010law via the exp\u2010linear term,\nplus an additive floor (bias). We fit initial weights by linear\nregression in log\u2010space, then refine via robust nonlinear least\nsquares (Huber loss) for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via:\n      loss_pred = bias + exp(intercept + w^T log(X))\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    bias      = params[0]\n    intercept = params[1]\n    weights   = params[2:]                                        # (4,)\n    # avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                                      # (N,4)\n    lin_term = intercept + logX.dot(weights)                      # (N,)\n    # model output\n    return bias + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the model:\n      loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\n    by:\n      1) Initial ridge\u2010regularized linear fit in log\u2010space to get\n         intercept and weights.\n      2) Bias floor initialized to half the minimum observed loss.\n      3) Refinement via robust nonlinear least\u2010squares (Huber loss).\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features: [lr, bsz, data_size, param_size]\"\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    y_clamped = np.maximum(y, eps)\n\n    # build log\u2010space design matrix for initial linear regression\n    logX = np.log(X_clamped)               # (N,4)\n    logy = np.log(y_clamped)               # (N,)\n\n    # design matrix [1, logX]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack((ones, logX))       # (N,5)\n\n    # ridge regularization for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    sol = np.linalg.solve(A, b)            # (5,)\n\n    intercept0 = sol[0]\n    weights0   = sol[1:]                   # (4,)\n\n    # initialize bias floor to half the min observed loss (but at least eps)\n    bias0 = max(y.min() * 0.5, eps)\n\n    # initial parameter vector: [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    p0 = np.concatenate(([bias0, intercept0], weights0))\n\n    # residual function for robust least squares\n    def residuals(p):\n        bias_p      = p[0]\n        intercept_p = p[1]\n        w_p         = p[2:]\n        log_term = intercept_p + np.log(np.maximum(X, eps)).dot(w_p)\n        y_pred = bias_p + np.exp(log_term)\n        return y_pred - y\n\n    # refine with Huber loss for robustness\n    try:\n        result = least_squares(\n            residuals,\n            p0,\n            loss='huber',\n            f_scale=1.0,\n            max_nfev=1000,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8\n        )\n        p_opt = result.x if result.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a mixed power\u2010law + finite\u2010size correction:\n      log(loss) = \u03b80\n                + \u03b8_lr  * log(lr)\n                + \u03b8_bsz * log(bsz)\n                + \u03b8_data * log(data_size)\n                + \u03b8_param* log(non_embedding_param_size)\n                + \u03c6_data * (1/data_size)\n                + \u03c6_param* (1/non_embedding_param_size)\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array_like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array_like of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid zeros in log or division\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs of the four hyperparameters\n    logX = np.log(X)                  # shape (N,4)\n\n    # inverse\u2010size corrections\n    inv_data  = 1.0 / X[:, 2]         # (N,)\n    inv_param = 1.0 / X[:, 3]         # (N,)\n\n    # unpack parameters\n    \u03b80      = params[0]\n    \u03b8_lr    = params[1]\n    \u03b8_bsz   = params[2]\n    \u03b8_data  = params[3]\n    \u03b8_param = params[4]\n    \u03c6_data  = params[5]\n    \u03c6_param = params[6]\n\n    # compute log\u2010loss\n    log_pred = (\n        \u03b80\n        + \u03b8_lr    * logX[:, 0]\n        + \u03b8_bsz   * logX[:, 1]\n        + \u03b8_data  * logX[:, 2]\n        + \u03b8_param * logX[:, 3]\n        + \u03c6_data  * inv_data\n        + \u03c6_param * inv_param\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log\u2010space:\n      log(loss) \u2248 \u03b80\n                + \u03b8_lr  * log(lr)\n                + \u03b8_bsz * log(bsz)\n                + \u03b8_data * log(data_size)\n                + \u03b8_param* log(non_embedding_param_size)\n                + \u03c6_data * (1/data_size)\n                + \u03c6_param* (1/non_embedding_param_size)\n\n    Inputs:\n      data_points: array_like of shape (N,4)\n      loss_values: array_like of shape (N,)\n    Returns:\n      params: numpy.ndarray of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid zeros for log and division\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build features\n    logX      = np.log(X)              # (N,4)\n    inv_data  = 1.0 / X[:, 2:3]        # (N,1)\n    inv_param = 1.0 / X[:, 3:4]        # (N,1)\n    logy      = np.log(y)              # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    D = np.hstack([ones, logX, inv_data, inv_param])  # shape (N,7)\n\n    # ridge regularization for stability (no penalty on intercept)\n    \u03bb = 1e-6\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0  # do not regularize intercept\n\n    # solve normal equations: (D^T D + \u03bb I) p = D^T logy\n    A = D.T.dot(D) + \u03bb * I\n    b = D.T.dot(logy)\n\n    try:\n        params = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # fallback to least\u2010squares if singular\n        params, *_ = np.linalg.lstsq(D, logy, rcond=None)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}