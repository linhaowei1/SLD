{"id": "8cecd027-76be-4d00-8301-a1f623e75222", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using a 10-parameter\n    2nd-order log-polynomial scaling law with one key cross-term.\n\n    Model (in log-space):\n        log(y_pred) = p0\n                     + p1*L_lr    + p2*L_bsz\n                     + p3*L_data  + p4*L_param\n                     + p5*(L_lr)^2  + p6*(L_bsz)^2\n                     + p7*(L_data)^2 + p8*(L_param)^2\n                     + p9*(L_data * L_param)\n\n    where L_x = log(x).  We then exponentiate to get y_pred.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-10 array of coefficients [p0\u2026p9]\n\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix \u03a6 (N\u00d710):\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #        L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #        L_data * L_param]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)   # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    weighted, differentially-regularized ridge regression in the log-domain.\n\n    We up-weight larger data-model scales and apply\n    light penalty on linear terms, moderate on quadratic,\n    and stronger on the data\u00d7model interaction.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients [p0\u2026p9]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # Sample weighting: emphasize larger data-model scale\n    scale_signal = L_data + L_param\n    median_sig = np.median(scale_signal)\n    # weight factor >1 for (scale_signal > median), <1 otherwise\n    w = np.exp(0.5 * (scale_signal - median_sig))\n\n    # Form weighted normal equations:\n    #   A = (W^{1/2} \u03a6)^T (W^{1/2} \u03a6)\n    #   b = (W^{1/2} \u03a6)^T (W^{1/2} logy)\n    W_half = np.sqrt(w)[:, None]   # (N,1)\n    Phi_w = Phi * W_half           # each row i scaled by sqrt(w_i)\n    y_w   = logy * W_half.ravel()  # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)         # (10,10)\n    b = Phi_w.T.dot(y_w)           # (10,)\n\n    # Differential ridge penalties\n    #   intercept idx=0 \u2192 no penalty\n    #   linear idx 1\u20134 \u2192 small\n    #   quadratic idx 5\u20138 \u2192 moderate\n    #   cross-term idx 9 \u2192 stronger\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "771d9678-e2e2-4e39-9ffc-f9e1adcabdc8", "generation": 4, "timestamp": 1754808923.492777, "iteration_found": 108, "metrics": {"nmse": 0.18924071786620764, "nmae": 0.5151606686437805, "r2": 0.8107592821337923, "combined_score": 0.840872655112455}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.386893500186614, "nmae": 0.736398522018268, "r2": 0.6131064998133859, "combined_score": 0.7210358977567092}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3869\n- nmae: 0.7364\n- r2: 0.6131\n- combined_score: 0.7210\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse. Consider continuing with similar changes.\n- Metrics showing regression: nmae, r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1892, nmae: 0.5152, r2: 0.8108, combined_score: 0.8409\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5890)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd\u2010order log\u2010polynomial scaling law with one key interaction:\n\n        log(y_pred) = p0\n                     + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                     + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                     + p9*(L_data * L_param)\n\n    where L_x = log(x).  We then exponentiate to return y_pred.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10: [p0 \u2026 p9]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid invalid logs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, and key cross-term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),  # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via\n    weighted, differentially\u2010regularized ridge regression in closed form.\n\n    We up-weight large\u2010scale configurations (data*model),\n    and apply light penalty on linear, moderate on quadratic,\n    stronger on the data\u00d7model interaction.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # safe floor to avoid log(0) or negatives\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # sample weighting: emphasize larger data\u2010model scale\n    scale_signal = L_data + L_param\n    median_sig = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_sig))  # (N,)\n\n    # form weighted normal equations: A p = b\n    W_sqrt = np.sqrt(w)[:, None]       # (N,1)\n    Phi_w = Phi * W_sqrt               # each row scaled\n    y_w   = logy * W_sqrt.ravel()      # weighted target\n    A = Phi_w.T.dot(Phi_w)             # (10,10)\n    b = Phi_w.T.dot(y_w)               # (10,)\n\n    # differential ridge penalties\n    # intercept idx=0 \u2192 no penalty\n    # linear idx 1-4 \u2192 small\n    # quadratic idx 5-8 \u2192 moderate\n    # cross-term idx 9 \u2192 stronger\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1892), Performs well on nmae (0.5152), Performs well on r2 (0.8108), Performs well on combined_score (0.8409)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y_pred = p0\n                 + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),      # intercept\n        L_lr,            # log(lr)\n        L_bsz,           # log(bsz)\n        L_data,          # log(data_size)\n        L_param,         # log(param_size)\n        L_lr**2,         # (log(lr))^2\n        L_bsz**2,        # (log(bsz))^2\n        L_data**2,       # (log(data_size))^2\n        L_param**2,      # (log(param_size))^2\n        L_data * L_param # cross term\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter 2nd-order log-polynomial scaling law:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz\n                   + p3*L_data  + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2\n                   + p7*L_data^2 + p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n    Exponentiate at the end to get y_pred.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param      # key interaction\n    ])\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter scaling law via closed-form ridge regression\n    in the log-domain.  We add a small ridge penalty on all but the intercept\n    for numerical stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes align\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # normal equations with ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd-order log-polynomial scaling law:\n      log y = p0\n              + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n              + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n              + p9*(L_data * L_param)\n    where L_x = log(x). We then exponentiate to return y.\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients [p0\u2026p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D with shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: [1, linear terms, quadratic terms, cross-term]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge-regularized normal equations: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5890, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd\u2010order log\u2010polynomial scaling law with one key interaction:\n\n        log(y_pred) = p0\n                     + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                     + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                     + p9*(L_data * L_param)\n\n    where L_x = log(x).  We then exponentiate to return y_pred.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10: [p0 \u2026 p9]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid invalid logs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, and key cross-term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),  # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via\n    weighted, differentially\u2010regularized ridge regression in closed form.\n\n    We up-weight large\u2010scale configurations (data*model),\n    and apply light penalty on linear, moderate on quadratic,\n    stronger on the data\u00d7model interaction.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n\n    # safe floor to avoid log(0) or negatives\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # sample weighting: emphasize larger data\u2010model scale\n    scale_signal = L_data + L_param\n    median_sig = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_sig))  # (N,)\n\n    # form weighted normal equations: A p = b\n    W_sqrt = np.sqrt(w)[:, None]       # (N,1)\n    Phi_w = Phi * W_sqrt               # each row scaled\n    y_w   = logy * W_sqrt.ravel()      # weighted target\n    A = Phi_w.T.dot(Phi_w)             # (10,10)\n    b = Phi_w.T.dot(y_w)               # (10,)\n\n    # differential ridge penalties\n    # intercept idx=0 \u2192 no penalty\n    # linear idx 1-4 \u2192 small\n    # quadratic idx 5-8 \u2192 moderate\n    # cross-term idx 9 \u2192 stronger\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for params\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 1.2131, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a compact, 7-parameter\n    log-domain model:\n\n        z_lr      = log(lr)\n        z_bsz     = log(batch size)\n        z_data    = log(data size)\n        z_param   = log(non-embedding parameter size)\n\n        log(loss) = c0\n                   + c1 * z_param\n                   + c2 * z_data\n                   + c3 * z_bsz\n                   + c4 * z_lr\n                   + c5 * (z_lr)^2\n                   + c6 * (z_param * z_data)\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns: [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-7 vector [c0, c1\u2026c6]\n\n    Returns:\n      y_pred: array of length N of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0               # intercept\n    Phi[:, 1] = z_param           # model size effect\n    Phi[:, 2] = z_data            # data size effect\n    Phi[:, 3] = z_bsz             # batch size effect\n    Phi[:, 4] = z_lr              # linear lr effect\n    Phi[:, 5] = z_lr * z_lr       # quadratic lr term\n    Phi[:, 6] = z_param * z_data  # model\u00d7data interaction\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)         # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-domain model via ridge-regularized\n    least squares in closed form.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: length-7 numpy vector of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # compute log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # target in log-space\n    logy = np.log(y)\n\n    # closed-form ridge solve: (\u03a6\u1d40\u03a6 + \u03bbI\u2081:\u2087) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge * np.eye(6)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.789), Excellent nmae (3.750)\n\n\n### Inspiration 3 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log\u2010loss as a second\u2010order polynomial in the log\u2010domain of each feature,\nincluding cross\u2010terms, and fit via ridge\u2010regularized closed\u2010form regression.\n\nModel:\n    log(y_pred) = c0\n                + sum_i c1_i * log(x_i)\n                + sum_i c2_i * (log(x_i))^2\n                + sum_{i<j} c3_{ij} * log(x_i) * log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nThis form balances flexibility (capturing curvature and interactions) with\nparameter efficiency (15 coefficients) and numerical stability (ridge regularization).\n\"\"\"\nimport numpy as np\n\ndef _build_log_polynomial_features(logX):\n    \"\"\"\n    Given log-transformed features logX of shape (N,4), build the design matrix Phi\n    for the intercept, linear, quadratic, and pairwise interaction terms.\n    \n    Returns Phi of shape (N, 15).\n    \"\"\"\n    N, F = logX.shape\n    # 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    \n    # Intercept\n    Phi[:, 0] = 1.0\n    \n    # Linear terms\n    start = 1\n    Phi[:, start:start+F] = logX\n    start += F\n    \n    # Quadratic terms\n    Phi[:, start:start+F] = logX**2\n    start += F\n    \n    # Pairwise interaction terms\n    idx = start\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    \n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the fitted scaling law.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n    \n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    \n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.shape[0]}\")\n    \n    # Avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    \n    # Build design matrix and predict\n    Phi = _build_log_polynomial_features(logX)\n    log_y_pred = Phi.dot(p)\n    return np.exp(log_y_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    \n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    \n    # Floor inputs and outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # Log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    \n    # Build design matrix (N \u00d7 15)\n    Phi = _build_log_polynomial_features(logX)\n    \n    # Ridge\u2010regularized normal equations\n    # A = Phi^T Phi + \u03bb I (only on non\u2010intercept)\n    # b = Phi^T logy\n    lam = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal except intercept term\n    diag = np.arange(1, A.shape[0])\n    A[diag, diag] += lam\n    b = Phi.T.dot(logy)\n    \n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y_pred = p0\n                 + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),      # intercept\n        L_lr,            # log(lr)\n        L_bsz,           # log(bsz)\n        L_data,          # log(data_size)\n        L_param,         # log(param_size)\n        L_lr**2,         # (log(lr))^2\n        L_bsz**2,        # (log(bsz))^2\n        L_data**2,       # (log(data_size))^2\n        L_param**2,      # (log(param_size))^2\n        L_data * L_param # cross term\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5972, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a second\u2010order polynomial in the log of each feature,\nplus a cubic term for learning\u2010rate to capture asymmetry:\n\n    log y \u2248 \u03b20\n          + \u03a3_i \u03b2_i * log x_i\n          + \u03a3_i \u03b3_i * (log x_i)^2\n          + \u03a3_{i<j} \u03b4_{ij} * (log x_i * log x_j)\n          + \u03ba * (log lr)^3\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via closed\u2010form ridge regression (excluding intercept penalty)\nfor stability and numerical efficiency.\n\"\"\"\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix \u03a6 from log\u2010features with\n    - intercept\n    - linear terms\n    - squared terms\n    - pairwise cross terms\n    - cubic term for the first feature (learning\u2010rate)\n    \"\"\"\n    N, F = logX.shape\n    # total params: 1 + F + F + F*(F-1)/2 + 1(cubic lr)\n    P = 1 + F + F + (F*(F-1))//2 + 1\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # cubic term for learning rate (feature 0)\n    Phi[:, idx] = logX[:, 0]**3\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using the learned polynomial in log\u2010domain with a cubic lr term.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    # build \u03a6\n    Phi = _build_design_matrix(logX)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above model by ridge\u2010regularized closed-form solution in log\u2010domain.\n    Excludes intercept from penalty for unbiased baseline.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log issues\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)\n    logy = np.log(y)\n    # design matrix\n    Phi = _build_design_matrix(logX)   # shape (N, P)\n    P = Phi.shape[1]\n    # normal equations with ridge\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # ridge regularization parameter\n    ridge = 1e-6\n    # apply ridge to all except intercept (index 0)\n    diag = np.arange(P)\n    A[diag, diag] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd-order log-polynomial scaling law:\n      log y = p0\n              + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n              + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n              + p9*(L_data * L_param)\n    where L_x = log(x). We then exponentiate to return y.\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients [p0\u2026p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D with shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: [1, linear terms, quadratic terms, cross-term]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge-regularized normal equations: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language-model loss from hyperparameters using a 10-parameter\n    2nd-order log-polynomial scaling law with one key cross-term.\n\n    Model (in log-space):\n        log(y_pred) = p0\n                     + p1*L_lr    + p2*L_bsz\n                     + p3*L_data  + p4*L_param\n                     + p5*(L_lr)^2  + p6*(L_bsz)^2\n                     + p7*(L_data)^2 + p8*(L_param)^2\n                     + p9*(L_data * L_param)\n\n    where L_x = log(x).  We then exponentiate to get y_pred.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-10 array of coefficients [p0\u2026p9]\n\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix \u03a6 (N\u00d710):\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #        L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #        L_data * L_param]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)   # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    weighted, differentially-regularized ridge regression in the log-domain.\n\n    We up-weight larger data-model scales and apply\n    light penalty on linear terms, moderate on quadratic,\n    and stronger on the data\u00d7model interaction.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients [p0\u2026p9]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # Sample weighting: emphasize larger data-model scale\n    scale_signal = L_data + L_param\n    median_sig = np.median(scale_signal)\n    # weight factor >1 for (scale_signal > median), <1 otherwise\n    w = np.exp(0.5 * (scale_signal - median_sig))\n\n    # Form weighted normal equations:\n    #   A = (W^{1/2} \u03a6)^T (W^{1/2} \u03a6)\n    #   b = (W^{1/2} \u03a6)^T (W^{1/2} logy)\n    W_half = np.sqrt(w)[:, None]   # (N,1)\n    Phi_w = Phi * W_half           # each row i scaled by sqrt(w_i)\n    y_w   = logy * W_half.ravel()  # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)         # (10,10)\n    b = Phi_w.T.dot(y_w)           # (10,)\n\n    # Differential ridge penalties\n    #   intercept idx=0 \u2192 no penalty\n    #   linear idx 1\u20134 \u2192 small\n    #   quadratic idx 5\u20138 \u2192 moderate\n    #   cross-term idx 9 \u2192 stronger\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}