{"id": "932b853a-a97d-41cb-b1b1-5b081b17dc9d", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants to keep feature scales ~1\nP0   = 1e8     # ~1e8 non\u2010embedding parameters\nD0   = 1e10    # ~1e10 training tokens\nBSZ0 = 512.0   # batch size\nLR0  = 1e-3    # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter power\u2010law with asymptotic floor:\n      y_pred = y_inf + A * (P/P0)^a_P * (D/D0)^a_D * (bsz/BSZ0)^a_bsz * (lr/LR0)^a_lr\n\n    data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array shape (6,) or (T,6): [logA, a_P, a_D, a_bsz, a_lr, log_yinf]\n    Returns:\n      y_pred: shape (N,) if single param row, or (N,T) for multiple.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # normalize features\n    lr   = X[:, 0] / LR0\n    bsz  = X[:, 1] / BSZ0\n    D    = X[:, 2] / D0\n    P    = X[:, 3] / P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (_,6), got {p.shape}\")\n    # unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p.T\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute term via broadcasting: shape (N,1) ** (1,T) \u2192 (N,T)\n    term = (\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :]) *\n        (A[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # if only one parameter set, return (N,)\n    return y_pred[:, 0] if y_pred.shape[1] == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      (1) estimating y_inf via the min observed loss,\n      (2) doing linear least\u2010squares on log(y \u2212 y_inf),\n      (3) refining with L-BFGS-B to minimize MSE in original space.\n\n    Returns: array [logA, a_P, a_D, a_bsz, a_lr, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"Mismatch between data_points shape and loss_values length.\")\n\n    # ensure positivity\n    y = np.maximum(y, 1e-12)\n    y_min = np.min(y)\n\n    # 1) Initial floor estimate\n    y_inf0 = y_min * 0.9\n\n    # 2) Linearized power\u2010law fit on log(y - y_inf0)\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z += (abs(np.min(z)) + 1e-12)\n    log_z = np.log(z)\n\n    # normalize features for linear fit\n    lr   = X[:, 0] / LR0\n    bsz  = X[:, 1] / BSZ0\n    D    = X[:, 2] / D0\n    P    = X[:, 3] / P0\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix: [1, log_P, log_D, log_bsz, log_lr]\n    M = np.stack([np.ones(N), log_P, log_D, log_bsz, log_lr], axis=1)\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # pack initial params\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # bounds for stable optimization\n    bounds = [\n        (None, None),                 # logA\n        (-5.0, 5.0),                  # a_P\n        (-5.0, 5.0),                  # a_D\n        (-5.0, 5.0),                  # a_bsz\n        (-5.0, 5.0),                  # a_lr\n        (np.log(1e-12), np.log(y_min))# log_yinf\n    ]\n\n    # objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        _obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "dd6dca04-c8ee-4046-a1e0-0d2d57e9ee81", "generation": 4, "timestamp": 1754807826.5191524, "iteration_found": 34, "metrics": {"nmse": 1.783280818244146, "nmae": 1.661550988548337, "r2": -0.783280818244146, "combined_score": 0.3592882160668422}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 2.778863338028198, "nmae": 2.0866822512903394, "r2": -1.7788633380281982, "combined_score": 0.26462983986126304}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 2.7789\n- nmae: 2.0867\n- r2: -1.7789\n- combined_score: 0.2646\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 11.5862, nmae: 4.2324, r2: -10.5862, combined_score: 0.0795\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 2.7789, nmae: 2.0867, r2: -1.7789, combined_score: 0.2646\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.7718, nmae: 1.6560, r2: -0.7718, combined_score: 0.3608\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.7542)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters using a power-law\n    with an asymptotic loss floor.\n\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of shape (6,) or (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: shape (N,) if single param set or (N,T) for multiple sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + A * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    if N != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # Initial guess for asymptotic loss floor y_inf\n    min_y = np.min(y)\n    y_inf0 = max(min_y * 0.9, 1e-8)\n\n    # Prepare for linearized power-law fit:\n    # log(y - y_inf0) \u2248 logA + \u03b1_P log(P) + \u03b1_D log(D) + \u03b1_bsz log(bsz) + \u03b1_lr log(lr)\n    z = y - y_inf0\n    if np.any(z <= 0):\n        # Shift to ensure positivity\n        z = z + (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    log_lr   = np.log(X[:, 0])\n    log_bsz  = np.log(X[:, 1])\n    log_D    = np.log(X[:, 2])\n    log_P    = np.log(X[:, 3])\n\n    # Design matrix for linear regression\n    M = np.stack([np.ones(N), log_P, log_D, log_bsz, log_lr], axis=1)\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # Pack initial parameter vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # Objective: MSE in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # Bounds for stable optimization\n    bounds = [\n        (None, None),          # logA\n        (-5.0, 5.0),           # \u03b1_P\n        (-5.0, 5.0),           # \u03b1_D\n        (-5.0, 5.0),           # \u03b1_bsz\n        (-5.0, 5.0),           # \u03b1_lr\n        (None, np.log(min_y))  # log_y_inf \u2264 log(min observed loss)\n    ]\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to the linearized solution\n        return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.7718), Performs well on nmae (1.6560), Performs well on r2 (-0.7718), Performs well on combined_score (0.3608)\n\n\n### Program 2 (Score: 0.8378)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants (mid\u2010range of typical training hyperparameters)\n_P0 = 1e8        # ~1e8 non\u2010embedding parameters\n_D0 = 1e10       # ~1e10 training tokens\n_BSZ0 = 512.0    # batch size\n_LR0 = 1e-3      # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter power\u2010law with offset:\n      y_pred = y_inf + A * (P/_P0)^a_P * (D/_D0)^a_D * (bsz/_BSZ0)^a_bsz * (lr/_LR0)^a_lr\n\n    Inputs:\n      data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array (T,6)\n                   order: [logA, a_P, a_D, a_bsz, a_lr, y_inf]\n\n    Returns:\n      y_pred: array (N,) if params is 1D or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (_,4), got {X.shape}\")\n    # unpack and normalize features\n    lr   = X[:, 0] / LR0 if False else X[:, 0]  # dummy to appease linter\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params with length 6, got shape {p.shape}\")\n    # unpack parameters\n    logA   = p[:, 0]   # shape (T,)\n    aP     = p[:, 1]\n    aD     = p[:, 2]\n    aB     = p[:, 3]\n    aL     = p[:, 4]\n    y_inf  = p[:, 5]\n\n    # compute the multiplicative term in log\u2010space then exponentiate\n    # shape manipulations to get broadcasting (N,T)\n    term = (\n        np.exp(logA)[None, :] *\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # if only one parameter set, return shape (N,)\n    return y_pred[:, 0] if y_pred.shape[1] == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n\n    Returns parameter vector of length 6:\n      [logA, a_P, a_D, a_bsz, a_lr, y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match.\")\n    # avoid non\u2010positive values\n    y = np.maximum(y, 1e-12)\n\n    # initial y_inf near the minimum observed loss\n    y_min = np.min(y)\n    init_yinf = y_min * 0.5\n    # initial A from average residual\n    avg_term = np.mean(np.maximum(y - init_yinf, 1e-12))\n    init_logA = np.log(avg_term)\n    # weak negative exponents as a starting point\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    # parameter order: logA, a_P, a_D, a_bsz, a_lr, y_inf\n    p0 = np.concatenate([ [init_logA], init_alphas, [init_yinf] ])\n\n    # bounds: logA free, exponents in [-5,5], y_inf in [0, y_min]\n    bnds = [\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (0.0, y_min)\n    ]\n\n    # objective: MSE in original loss space\n    def _objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (2.7789), Performs well on nmae (2.0867), Performs well on r2 (-1.7789), Performs well on combined_score (0.2646)\n\n\n### Program 3 (Score: 1.3280)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (11.5862), Performs well on nmae (4.2324), Performs well on r2 (-10.5862), Performs well on combined_score (0.0795)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 49999.7500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.7542, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters using a power-law\n    with an asymptotic loss floor.\n\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of shape (6,) or (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: shape (N,) if single param set or (N,T) for multiple sets.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + A * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    if N != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # Initial guess for asymptotic loss floor y_inf\n    min_y = np.min(y)\n    y_inf0 = max(min_y * 0.9, 1e-8)\n\n    # Prepare for linearized power-law fit:\n    # log(y - y_inf0) \u2248 logA + \u03b1_P log(P) + \u03b1_D log(D) + \u03b1_bsz log(bsz) + \u03b1_lr log(lr)\n    z = y - y_inf0\n    if np.any(z <= 0):\n        # Shift to ensure positivity\n        z = z + (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    log_lr   = np.log(X[:, 0])\n    log_bsz  = np.log(X[:, 1])\n    log_D    = np.log(X[:, 2])\n    log_P    = np.log(X[:, 3])\n\n    # Design matrix for linear regression\n    M = np.stack([np.ones(N), log_P, log_D, log_bsz, log_lr], axis=1)\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # Pack initial parameter vector\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # Objective: MSE in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # Bounds for stable optimization\n    bounds = [\n        (None, None),          # logA\n        (-5.0, 5.0),           # \u03b1_P\n        (-5.0, 5.0),           # \u03b1_D\n        (-5.0, 5.0),           # \u03b1_bsz\n        (-5.0, 5.0),           # \u03b1_lr\n        (None, np.log(min_y))  # log_y_inf \u2264 log(min observed loss)\n    ]\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to the linearized solution\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.772), Excellent nmae (1.656)\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants (mid\u2010range of typical training hyperparameters)\n_P0 = 1e8        # ~1e8 non\u2010embedding parameters\n_D0 = 1e10       # ~1e10 training tokens\n_BSZ0 = 512.0    # batch size\n_LR0 = 1e-3      # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter power\u2010law with offset:\n      y_pred = y_inf + A * (P/_P0)^a_P * (D/_D0)^a_D * (bsz/_BSZ0)^a_bsz * (lr/_LR0)^a_lr\n\n    Inputs:\n      data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array (T,6)\n                   order: [logA, a_P, a_D, a_bsz, a_lr, y_inf]\n\n    Returns:\n      y_pred: array (N,) if params is 1D or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (_,4), got {X.shape}\")\n    # unpack and normalize features\n    lr   = X[:, 0] / LR0 if False else X[:, 0]  # dummy to appease linter\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params with length 6, got shape {p.shape}\")\n    # unpack parameters\n    logA   = p[:, 0]   # shape (T,)\n    aP     = p[:, 1]\n    aD     = p[:, 2]\n    aB     = p[:, 3]\n    aL     = p[:, 4]\n    y_inf  = p[:, 5]\n\n    # compute the multiplicative term in log\u2010space then exponentiate\n    # shape manipulations to get broadcasting (N,T)\n    term = (\n        np.exp(logA)[None, :] *\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # if only one parameter set, return shape (N,)\n    return y_pred[:, 0] if y_pred.shape[1] == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n\n    Returns parameter vector of length 6:\n      [logA, a_P, a_D, a_bsz, a_lr, y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match.\")\n    # avoid non\u2010positive values\n    y = np.maximum(y, 1e-12)\n\n    # initial y_inf near the minimum observed loss\n    y_min = np.min(y)\n    init_yinf = y_min * 0.5\n    # initial A from average residual\n    avg_term = np.mean(np.maximum(y - init_yinf, 1e-12))\n    init_logA = np.log(avg_term)\n    # weak negative exponents as a starting point\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    # parameter order: logA, a_P, a_D, a_bsz, a_lr, y_inf\n    p0 = np.concatenate([ [init_logA], init_alphas, [init_yinf] ])\n\n    # bounds: logA free, exponents in [-5,5], y_inf in [0, y_min]\n    bnds = [\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (0.0, y_min)\n    ]\n\n    # objective: MSE in original loss space\n    def _objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants to keep feature scales ~1\nP0   = 1e8     # ~1e8 non\u2010embedding parameters\nD0   = 1e10    # ~1e10 training tokens\nBSZ0 = 512.0   # batch size\nLR0  = 1e-3    # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter power\u2010law with asymptotic floor:\n      y_pred = y_inf + A * (P/P0)^a_P * (D/D0)^a_D * (bsz/BSZ0)^a_bsz * (lr/LR0)^a_lr\n\n    data_points: array (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array shape (6,) or (T,6): [logA, a_P, a_D, a_bsz, a_lr, log_yinf]\n    Returns:\n      y_pred: shape (N,) if single param row, or (N,T) for multiple.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected (N,4) input, got {X.shape}\")\n    # normalize features\n    lr   = X[:, 0] / LR0\n    bsz  = X[:, 1] / BSZ0\n    D    = X[:, 2] / D0\n    P    = X[:, 3] / P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params shape (_,6), got {p.shape}\")\n    # unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p.T\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # compute term via broadcasting: shape (N,1) ** (1,T) \u2192 (N,T)\n    term = (\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :]) *\n        (A[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # if only one parameter set, return (N,)\n    return y_pred[:, 0] if y_pred.shape[1] == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by:\n      (1) estimating y_inf via the min observed loss,\n      (2) doing linear least\u2010squares on log(y \u2212 y_inf),\n      (3) refining with L-BFGS-B to minimize MSE in original space.\n\n    Returns: array [logA, a_P, a_D, a_bsz, a_lr, log_yinf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"Mismatch between data_points shape and loss_values length.\")\n\n    # ensure positivity\n    y = np.maximum(y, 1e-12)\n    y_min = np.min(y)\n\n    # 1) Initial floor estimate\n    y_inf0 = y_min * 0.9\n\n    # 2) Linearized power\u2010law fit on log(y - y_inf0)\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z += (abs(np.min(z)) + 1e-12)\n    log_z = np.log(z)\n\n    # normalize features for linear fit\n    lr   = X[:, 0] / LR0\n    bsz  = X[:, 1] / BSZ0\n    D    = X[:, 2] / D0\n    P    = X[:, 3] / P0\n\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(P)\n\n    # design matrix: [1, log_P, log_D, log_bsz, log_lr]\n    M = np.stack([np.ones(N), log_P, log_D, log_bsz, log_lr], axis=1)\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n\n    # pack initial params\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, np.log(y_inf0)], dtype=float)\n\n    # bounds for stable optimization\n    bounds = [\n        (None, None),                 # logA\n        (-5.0, 5.0),                  # a_P\n        (-5.0, 5.0),                  # a_D\n        (-5.0, 5.0),                  # a_bsz\n        (-5.0, 5.0),                  # a_lr\n        (np.log(1e-12), np.log(y_min))# log_yinf\n    ]\n\n    # objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        _obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}