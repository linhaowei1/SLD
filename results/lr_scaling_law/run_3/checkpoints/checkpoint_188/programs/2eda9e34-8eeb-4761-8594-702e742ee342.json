{"id": "2eda9e34-8eeb-4761-8594-702e742ee342", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\n# Typical normalization scales (center of training ranges)\n_P0   = 1e9       # ~ non\u2010embedding parameters (200M\u20131B)\n_D0   = 1e10      # ~ training tokens (4B\u2013100B)\n_BSZ0 = 512.0     # batch size (16\u20134096)\n_LR0  = 1e-3      # learning rate (1.2e-4\u20132.2e-2)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter power\u2010law with floor:\n      y_pred = y_inf + exp(logA)\n                        * (P/_P0)^\u03b1_P\n                        * (D/_D0)^\u03b1_D\n                        * (bsz/_BSZ0)^\u03b1_bsz\n                        * (lr/_LR0)^\u03b1_lr\n\n    Args:\n      data_points: array-like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like, length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # reshape single sample\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    # floor to avoid log(0)\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n\n    # normalized features\n    Pn   = P   / _P0\n    Dn   = D   / _D0\n    Bn   = bsz / _BSZ0\n    Ln   = lr  / _LR0\n\n    # power\u2010law term\n    term = np.exp(logA) \\\n           * (Pn ** aP) \\\n           * (Dn ** aD) \\\n           * (Bn ** aB) \\\n           * (Ln ** aL)\n    y_inf = np.exp(log_yinf)\n    return y_inf + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law + floor model in two stages:\n      1) closed\u2010form linear least squares in log-domain for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n         using an initial y_inf0 = 0.9 * min(y).\n      2) L-BFGS-B refinement minimizing MSE in original loss-space.\n\n    Args:\n      data_points: array-like, shape (N,4)\n      loss_values: array-like, shape (N,)\n\n    Returns:\n      params: ndarray of length 6 of fitted [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # reshape single sample\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # initial floor guess: 90% of minimum observed loss\n    y_min = np.min(y_safe)\n    y_inf0 = max(y_min * 0.9, 1e-8)\n    log_yinf0 = np.log(y_inf0)\n\n    # residual target z = y - y_inf0 (must be >0)\n    z = y_safe - y_inf0\n    if np.any(z <= 0):\n        z += (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    # prepare normalized log\u2010features\n    lr   = X_safe[:, 0] / _LR0\n    bsz  = X_safe[:, 1] / _BSZ0\n    D    = X_safe[:, 2] / _D0\n    P    = X_safe[:, 3] / _P0\n    Llr  = np.log(np.maximum(lr, 1e-12))\n    Lbsz = np.log(np.maximum(bsz,1e-12))\n    LD   = np.log(np.maximum(D,  1e-12))\n    LP   = np.log(np.maximum(P,  1e-12))\n\n    # design matrix for linearized problem: [1, LP, LD, Lbsz, Llr]\n    M = np.column_stack([\n        np.ones(N),\n        LP,\n        LD,\n        Lbsz,\n        Llr\n    ])\n    # solve for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    coeffs, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # initial parameter vector\n    p0 = np.concatenate([coeffs, [log_yinf0]])\n\n    # objective: MSE in original loss space\n    def _mse_obj(p):\n        y_pred = scaling_law_func(X_safe, p)\n        return np.mean((y_pred - y_safe)**2)\n\n    # bounds: exponents on P,D in [-2,2], on bsz,lr in [-1,1]; floor \u2264 observed min\n    bounds = [\n        (None, None),    # logA\n        (-2.0, 2.0),     # \u03b1_P\n        (-2.0, 2.0),     # \u03b1_D\n        (-1.0, 1.0),     # \u03b1_bsz\n        (-1.0, 1.0),     # \u03b1_lr\n        (None, np.log(y_min))  # log_y_inf\n    ]\n\n    # refine with L-BFGS-B\n    res = minimize(\n        _mse_obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n    if res.success:\n        return res.x\n    else:\n        return p0\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "10b9a2c3-4742-4487-b81f-5c634eaa96a1", "generation": 4, "timestamp": 1754809094.9120302, "iteration_found": 127, "metrics": {"nmse": 1.7848914648343928, "nmae": 1.6623246655041302, "r2": -0.7848914648343928, "combined_score": 0.35908042113212707}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 2.118005950653342, "nmae": 1.829521339080409, "r2": -1.118005950653342, "combined_score": 0.32071779715188214}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 2.1180\n- nmae: 1.8295\n- r2: -1.1180\n- combined_score: 0.3207\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1892, nmae: 0.5152, r2: 0.8108, combined_score: 0.8409\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5890)\n```python\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) via a small but expressive 2nd\u2010order polynomial in the log\u2010features:\n   L = [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\nWe include:\n  \u2022 an intercept\n  \u2022 linear terms for each log\u2010feature\n  \u2022 quadratic terms for each log\u2010feature\n  \u2022 one key cross\u2010term between data_size and model_size\n\nThis yields 10 parameters:\n  p0\n  p1..p4    linear coefficients for [L_lr, L_bsz, L_data, L_param]\n  p5..p8    quadratic coefficients for [L_lr^2, L_bsz^2, L_data^2, L_param^2]\n  p9        cross\u2010term coefficient for (L_data * L_param)\n\nWe fit via closed\u2010form, weighted ridge\u2010regularized regression in the log\u2010domain for stability,\nthen predict by exponentiating back to the original loss scale.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 10\u2010parameter\n    2nd\u2010order log\u2010polynomial scaling law with one cross\u2010term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single point\n    if X.ndim == 1:\n        X = X.reshape(1, 4)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # Safe log transform\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones_like(L_lr),      # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param         # cross\u2010term\n    ])\n\n    # Predict in log\u2010domain and back\u2010transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We up\u2010weight large\u2010scale configurations (higher data and model size)\n    and apply light ridge on linear terms, moderate on quadratic,\n    and stronger on the cross\u2010term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single point\n    if X.ndim == 1:\n        X = X.reshape(1, 4)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe logs\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # Weight samples by scale (data + model size)\n    scale_sig = L_data + L_param\n    med = np.median(scale_sig)\n    w = np.exp(0.5 * (scale_sig - med))\n    sqrt_w = np.sqrt(w)\n\n    # Weighted normal equations\n    Phi_w = Phi * sqrt_w[:, None]\n    y_w = logy * sqrt_w\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # Differential ridge penalties\n    ridge_lin = 1e-6\n    ridge_quad = 1e-4\n    ridge_cross = 1e-2\n    # apply to linear terms (idx 1\u20134)\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    # quadratic terms (idx 5\u20138)\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    # cross\u2010term (idx 9)\n    A[9, 9] += ridge_cross\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1892), Performs well on nmae (0.5152), Performs well on r2 (0.8108), Performs well on combined_score (0.8409)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y_pred = p0\n                 + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),      # intercept\n        L_lr,            # log(lr)\n        L_bsz,           # log(bsz)\n        L_data,          # log(data_size)\n        L_param,         # log(param_size)\n        L_lr**2,         # (log(lr))^2\n        L_bsz**2,        # (log(bsz))^2\n        L_data**2,       # (log(data_size))^2\n        L_param**2,      # (log(param_size))^2\n        L_data * L_param # cross term\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd-order log-polynomial scaling law:\n      log y = p0\n              + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n              + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n              + p9*(L_data * L_param)\n    where L_x = log(x). We then exponentiate to return y.\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients [p0\u2026p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D with shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: [1, linear terms, quadratic terms, cross-term]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge-regularized normal equations: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter 2nd-order log-polynomial scaling law:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz\n                   + p3*L_data  + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2\n                   + p7*L_data^2 + p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n    Exponentiate at the end to get y_pred.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param      # key interaction\n    ])\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter scaling law via closed-form ridge regression\n    in the log-domain.  We add a small ridge penalty on all but the intercept\n    for numerical stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes align\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # normal equations with ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5890, Type: Experimental)\n```python\n\"\"\"\nEvolved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) via a small but expressive 2nd\u2010order polynomial in the log\u2010features:\n   L = [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\nWe include:\n  \u2022 an intercept\n  \u2022 linear terms for each log\u2010feature\n  \u2022 quadratic terms for each log\u2010feature\n  \u2022 one key cross\u2010term between data_size and model_size\n\nThis yields 10 parameters:\n  p0\n  p1..p4    linear coefficients for [L_lr, L_bsz, L_data, L_param]\n  p5..p8    quadratic coefficients for [L_lr^2, L_bsz^2, L_data^2, L_param^2]\n  p9        cross\u2010term coefficient for (L_data * L_param)\n\nWe fit via closed\u2010form, weighted ridge\u2010regularized regression in the log\u2010domain for stability,\nthen predict by exponentiating back to the original loss scale.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 10\u2010parameter\n    2nd\u2010order log\u2010polynomial scaling law with one cross\u2010term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single point\n    if X.ndim == 1:\n        X = X.reshape(1, 4)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # Safe log transform\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Build design matrix \u03a6 (N x 10)\n    Phi = np.column_stack([\n        np.ones_like(L_lr),      # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param         # cross\u2010term\n    ])\n\n    # Predict in log\u2010domain and back\u2010transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We up\u2010weight large\u2010scale configurations (higher data and model size)\n    and apply light ridge on linear terms, moderate on quadratic,\n    and stronger on the cross\u2010term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single point\n    if X.ndim == 1:\n        X = X.reshape(1, 4)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Safe logs\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # Design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # Weight samples by scale (data + model size)\n    scale_sig = L_data + L_param\n    med = np.median(scale_sig)\n    w = np.exp(0.5 * (scale_sig - med))\n    sqrt_w = np.sqrt(w)\n\n    # Weighted normal equations\n    Phi_w = Phi * sqrt_w[:, None]\n    y_w = logy * sqrt_w\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # Differential ridge penalties\n    ridge_lin = 1e-6\n    ridge_quad = 1e-4\n    ridge_cross = 1e-2\n    # apply to linear terms (idx 1\u20134)\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    # quadratic terms (idx 5\u20138)\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    # cross\u2010term (idx 9)\n    A[9, 9] += ridge_cross\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 1.2131, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a compact, 7-parameter\n    log-domain model:\n\n        z_lr      = log(lr)\n        z_bsz     = log(batch size)\n        z_data    = log(data size)\n        z_param   = log(non-embedding parameter size)\n\n        log(loss) = c0\n                   + c1 * z_param\n                   + c2 * z_data\n                   + c3 * z_bsz\n                   + c4 * z_lr\n                   + c5 * (z_lr)^2\n                   + c6 * (z_param * z_data)\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns: [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-7 vector [c0, c1\u2026c6]\n\n    Returns:\n      y_pred: array of length N of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0               # intercept\n    Phi[:, 1] = z_param           # model size effect\n    Phi[:, 2] = z_data            # data size effect\n    Phi[:, 3] = z_bsz             # batch size effect\n    Phi[:, 4] = z_lr              # linear lr effect\n    Phi[:, 5] = z_lr * z_lr       # quadratic lr term\n    Phi[:, 6] = z_param * z_data  # model\u00d7data interaction\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)         # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-domain model via ridge-regularized\n    least squares in closed form.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: length-7 numpy vector of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # compute log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # target in log-space\n    logy = np.log(y)\n\n    # closed-form ridge solve: (\u03a6\u1d40\u03a6 + \u03bbI\u2081:\u2087) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge * np.eye(6)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.789), Excellent nmae (3.750)\n\n\n### Inspiration 3 (Score: 0.7554, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling law model for LLM training hyperparameters.\n\nWe model the LM loss as\n\n    y_pred = y_inf + A * (P / P0)^\u03b1_P * (D / D0)^\u03b1_D * (bsz / BSZ0)^\u03b1_bsz * (lr / LR0)^\u03b1_lr\n\nwhere\n  - P  = non\u2010embedding parameter count\n  - D  = training data size (tokens)\n  - bsz = batch size\n  - lr  = learning rate\n\nWe reparameterize A and y_inf in log\u2010space for numerical stability:\n    logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf\n\nFeatures are normalized by typical midpoint scales to avoid extremely large or small exponents.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Typical midpoint scales (chosen near the center of the training range)\n_P0   = 1e8        # ~1e8 non\u2010embedding parameters\n_D0   = 1e10       # ~1e10 training tokens\n_BSZ0 = 512.0      # batch size\n_LR0  = 1e-3       # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter scaling law.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 OR 2D array of shape (T,6),\n                   in order [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns shape (N,),\n              if params is 2D (T sets), returns shape (N, T).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure at least 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float)\n    # allow evaluating multiple parameter sets at once\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {Pn}\")\n\n    # Unpack features and floor to avoid zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # Normalize\n    lr_n  = lr    / _LR0\n    bsz_n = bsz   / _BSZ0\n    D_n   = D     / _D0\n    P_n   = Psize / _P0\n\n    # Allocate output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # Compute for each parameter set\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # power\u2010law term\n        term = np.exp(logA) \\\n               * (P_n ** aP) \\\n               * (D_n ** aD) \\\n               * (bsz_n ** aB) \\\n               * (lr_n ** aL)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    # return (N,) if single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on the original losses.\n\n    Returns parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes match\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must match in length.\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n\n    # floor to avoid zeros or negatives\n    y_safe = np.maximum(y, 1e-12)\n\n    # initial guess for y_inf ~ 80% of min observed\n    y_min = np.min(y_safe)\n    y_inf0 = max(y_min * 0.8, 1e-8)\n    log_yinf0 = np.log(y_inf0)\n\n    # initial guess for A from average residual\n    avg_term = np.maximum(np.mean(y_safe - y_inf0), 1e-6)\n    logA0 = np.log(avg_term)\n\n    # initial exponents (weak negative scaling)\n    # [\u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    init_alphas = np.array([-0.4, -0.3, -0.1, -0.05], dtype=float)\n\n    # pack initial parameter vector\n    p0 = np.concatenate(([logA0], init_alphas, [log_yinf0]))\n\n    # bounds for parameters\n    # logA:    unrestricted\n    # \u03b1_P,\u03b1_D: in [-2,2]\n    # \u03b1_bsz,\u03b1_lr: in [-1,1]\n    # log_yinf: unrestricted\n    bnds = [\n        (None, None),\n        (-2.0, 2.0),\n        (-2.0, 2.0),\n        (-1.0, 1.0),\n        (-1.0, 1.0),\n        (None, None),\n    ]\n\n    # Objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe) ** 2)\n\n    # Run L-BFGS-B\n    res = minimize(\n        _obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.785), Excellent nmae (1.662)\n\n\n### Inspiration 4 (Score: 1.0567, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a simple log\u2010linear scaling law:\n      log(y_pred) = c0 + a_lr*log(lr) + a_bsz*log(bsz)\n                    + a_data*log(data_size) + a_param*log(non_embedding_param_size)\n\n    Args:\n        data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 5: [c0, a_lr, a_bsz, a_data, a_param]\n\n    Returns:\n        y_pred:      1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.shape[0]}\")\n\n    # Floor inputs to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)  # shape (N,4)\n\n    # Build design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Predict in log\u2010domain then exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simple log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    Model: log(y) = c0 + sum_i a_i * log(x_i)\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n\n    Returns:\n        params:      numpy array of length 5 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log\u2010transform\n    logX = np.log(X_clipped)  # shape (N,4)\n    logy = np.log(y_clipped)  # shape (N,)\n\n    # Design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    Phi = np.empty((N, 5), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:] = logX\n\n    # Ridge regularization (only on non\u2010intercept terms)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge * np.eye(4)\n    b = Phi.T.dot(logy)\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (6.000), Excellent nmae (3.084)\n\n\n### Inspiration 5 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd-order polynomial design matrix in log-features:\n      - intercept\n      - linear terms   (log x_i)\n      - quadratic terms (log x_i)^2\n      - pairwise interactions log x_i * log x_j for i<j\n    Input:\n      logX: (N,4) array\n    Output:\n      Phi:  (N,15) design matrix\n    \"\"\"\n    N, F = logX.shape\n    # number of terms: 1 + F + F + F*(F-1)/2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd-order log-polynomial.\n\n    Args:\n      data_points: array-like of shape (N,4), columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    # build design matrix\n    Phi = _build_design_matrix(logX)    # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-domain\n    logy_pred = Phi.dot(p)               # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd-order log-polynomial scaling law via closed-form\n    ridge-regularized regression with blockwise regularization.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor inputs/outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    # build design matrix and normal equations\n    Phi = _build_design_matrix(logX)   # (N,15)\n    P = Phi.shape[1]\n\n    # unweighted normal equations: A p = b\n    A = Phi.T.dot(Phi)                 # (15,15)\n    b = Phi.T.dot(logy)                # (15,)\n\n    # blockwise ridge regularization (exclude intercept at index 0)\n    # linear terms indices: 1..4, quadratic: 5..8, interactions: 9..14\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n\n    # linear block\n    lin_slice  = slice(1, 1+F)\n    A[lin_slice, lin_slice] += ridge_lin * np.eye(F)\n    # quadratic block\n    quad_slice = slice(1+F, 1+2*F)\n    A[quad_slice, quad_slice] += ridge_quad * np.eye(F)\n    # interaction block\n    inter_slice = slice(1+2*F, P)\n    K = P - (1+2*F)\n    A[inter_slice, inter_slice] += ridge_inter * np.eye(K)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 7-parameter extended power\u2010law\n    with an asymptotic loss floor.\n    \n    Model:\n      y_pred = y_inf + exp(\n                    logA\n                  + \u03b1_P * log(P)\n                  + \u03b1_D * log(D)\n                  + \u03b1_bsz * log(bsz)\n                  + \u03b1_lr * log(lr)\n                  + \u03b1_lr2 * (log(lr))^2\n               )\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 7:\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2, log_y_inf]\n    \n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func: expected 7 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, aL2, log_yinf = p\n    \n    # clip inputs to avoid log(0)\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n    \n    xP = np.log(P)\n    xD = np.log(D)\n    xB = np.log(bsz)\n    xL = np.log(lr)\n    \n    # compute the exponential term\n    exp_term = np.exp(\n        logA\n        + aP * xP\n        + aD * xD\n        + aB * xB\n        + aL * xL\n        + aL2 * (xL**2)\n    )\n    # asymptotic floor\n    y_inf = np.exp(log_yinf)\n    return y_inf + exp_term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter extended power\u2010law scaling law by\n    a two\u2010stage procedure: closed\u2010form least\u2010squares initialization\n    followed by L-BFGS-B refinement on MSE.\n    \n    Returns optimized params:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected data with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: mismatched data points and loss values\")\n    \n    # clip to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # logs of inputs\n    lr   = X_safe[:, 0]\n    bsz  = X_safe[:, 1]\n    D    = X_safe[:, 2]\n    P    = X_safe[:, 3]\n    xP = np.log(P)\n    xD = np.log(D)\n    xB = np.log(bsz)\n    xL = np.log(lr)\n    \n    # initial guess for asymptotic floor: 90% of min observed loss\n    min_y = np.min(y_safe)\n    y_inf0 = max(min_y * 0.9, 1e-8)\n    log_yinf0 = np.log(y_inf0)\n    \n    # build target for linearization: z = y - y_inf0\n    z = y_safe - y_inf0\n    # shift if any non-positive\n    if np.any(z <= 0):\n        z = z + (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n    \n    # design matrix for LS: columns [1, xP, xD, xB, xL, xL^2]\n    M = np.vstack([\n        np.ones(N),\n        xP,\n        xD,\n        xB,\n        xL,\n        xL**2\n    ]).T  # shape (N,6)\n    \n    # least-squares solve\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # sol -> [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2]\n    p0 = np.concatenate([sol, [log_yinf0]])\n    \n    # objective: MSE in original loss space\n    def _objective(p):\n        y_pred = scaling_law_func(X_safe, p)\n        return np.mean((y_pred - y_safe)**2)\n    \n    # bounds: exponents in [-5,5], log_yinf \u2264 log(min_y)\n    lb = [-np.inf, -5.0, -5.0, -5.0, -5.0, -5.0, -np.inf]\n    ub = [ np.inf,  5.0,  5.0,  5.0,  5.0,  5.0,  np.log(min_y)]\n    bounds = list(zip(lb, ub))\n    \n    # run L-BFGS-B\n    result = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n    \n    if result.success:\n        return result.x\n    else:\n        # fallback to initial LS solution\n        return p0\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\n# Typical normalization scales (center of training ranges)\n_P0   = 1e9       # ~ non\u2010embedding parameters (200M\u20131B)\n_D0   = 1e10      # ~ training tokens (4B\u2013100B)\n_BSZ0 = 512.0     # batch size (16\u20134096)\n_LR0  = 1e-3      # learning rate (1.2e-4\u20132.2e-2)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter power\u2010law with floor:\n      y_pred = y_inf + exp(logA)\n                        * (P/_P0)^\u03b1_P\n                        * (D/_D0)^\u03b1_D\n                        * (bsz/_BSZ0)^\u03b1_bsz\n                        * (lr/_LR0)^\u03b1_lr\n\n    Args:\n      data_points: array-like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like, length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: ndarray of shape (N,) predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # reshape single sample\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    # floor to avoid log(0)\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n\n    # normalized features\n    Pn   = P   / _P0\n    Dn   = D   / _D0\n    Bn   = bsz / _BSZ0\n    Ln   = lr  / _LR0\n\n    # power\u2010law term\n    term = np.exp(logA) \\\n           * (Pn ** aP) \\\n           * (Dn ** aD) \\\n           * (Bn ** aB) \\\n           * (Ln ** aL)\n    y_inf = np.exp(log_yinf)\n    return y_inf + term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law + floor model in two stages:\n      1) closed\u2010form linear least squares in log-domain for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n         using an initial y_inf0 = 0.9 * min(y).\n      2) L-BFGS-B refinement minimizing MSE in original loss-space.\n\n    Args:\n      data_points: array-like, shape (N,4)\n      loss_values: array-like, shape (N,)\n\n    Returns:\n      params: ndarray of length 6 of fitted [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # reshape single sample\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # initial floor guess: 90% of minimum observed loss\n    y_min = np.min(y_safe)\n    y_inf0 = max(y_min * 0.9, 1e-8)\n    log_yinf0 = np.log(y_inf0)\n\n    # residual target z = y - y_inf0 (must be >0)\n    z = y_safe - y_inf0\n    if np.any(z <= 0):\n        z += (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    # prepare normalized log\u2010features\n    lr   = X_safe[:, 0] / _LR0\n    bsz  = X_safe[:, 1] / _BSZ0\n    D    = X_safe[:, 2] / _D0\n    P    = X_safe[:, 3] / _P0\n    Llr  = np.log(np.maximum(lr, 1e-12))\n    Lbsz = np.log(np.maximum(bsz,1e-12))\n    LD   = np.log(np.maximum(D,  1e-12))\n    LP   = np.log(np.maximum(P,  1e-12))\n\n    # design matrix for linearized problem: [1, LP, LD, Lbsz, Llr]\n    M = np.column_stack([\n        np.ones(N),\n        LP,\n        LD,\n        Lbsz,\n        Llr\n    ])\n    # solve for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    coeffs, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # initial parameter vector\n    p0 = np.concatenate([coeffs, [log_yinf0]])\n\n    # objective: MSE in original loss space\n    def _mse_obj(p):\n        y_pred = scaling_law_func(X_safe, p)\n        return np.mean((y_pred - y_safe)**2)\n\n    # bounds: exponents on P,D in [-2,2], on bsz,lr in [-1,1]; floor \u2264 observed min\n    bounds = [\n        (None, None),    # logA\n        (-2.0, 2.0),     # \u03b1_P\n        (-2.0, 2.0),     # \u03b1_D\n        (-1.0, 1.0),     # \u03b1_bsz\n        (-1.0, 1.0),     # \u03b1_lr\n        (None, np.log(y_min))  # log_y_inf\n    ]\n\n    # refine with L-BFGS-B\n    res = minimize(\n        _mse_obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n    if res.success:\n        return res.x\n    else:\n        return p0\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Switched to a compact 6-parameter power-law plus asymptotic floor, removing the quadratic LR term for simplicity and greater robustness.\n- Normalized each feature by a typical scale (_P0, _D0, _BSZ0, _LR0) to keep exponents well-conditioned.\n- Two-stage fit: closed-form linear least-squares in the log domain for a fast, stable initialization, then L-BFGS-B refinement directly minimizing MSE in the original loss space.\n- Bounds on exponents ensure physically plausible scaling and avoid runaway fits.\n- The streamlined model and fitting procedure improve generalization across hyperparameter scales while maintaining numerical stability."]}}}