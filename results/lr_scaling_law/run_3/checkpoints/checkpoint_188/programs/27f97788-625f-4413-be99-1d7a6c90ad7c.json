{"id": "27f97788-625f-4413-be99-1d7a6c90ad7c", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a concise power\u2010law + floor model:\n        y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * bsz^{\u03b1_B} * lr^{\u03b1_L}\n\n    where:\n      - lr: learning rate\n      - bsz: batch size\n      - D:  data_size (tokens)\n      - P:  non_embedding_param_size\n      - params = [logA, \u03b1_P, \u03b1_D, \u03b1_B, \u03b1_L, log_y_inf]\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, P_size]\n      params:      array\u2010like of length 6:\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_B, \u03b1_L, log_y_inf]\n    Returns:\n      y_pred:      np.ndarray of shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    # avoid non\u2010positive inputs\n    X_safe = np.maximum(X, 1e-12)\n    lr    = X_safe[:, 0]\n    bsz   = X_safe[:, 1]\n    D     = X_safe[:, 2]\n    Psize = X_safe[:, 3]\n\n    # compute logarithms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # power\u2010law term in log\u2010space\n    log_term = logA + aP * log_P + aD * log_D + aB * log_bsz + aL * log_lr\n\n    # back to original space\n    term  = np.exp(log_term)\n    y_inf = np.exp(log_yinf)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law + floor scaling law by minimizing\n    mean squared error in log\u2010loss space:\n        y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * bsz^{\u03b1_B} * lr^{\u03b1_L}\n\n    We optimize parameters:\n        [logA, \u03b1_P, \u03b1_D, \u03b1_B, \u03b1_L, log_y_inf]\n    under box constraints for stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      params: np.ndarray of length 6 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # reshape if necessary\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # ensure positivity\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    y_safe = np.maximum(y, eps)\n\n    # extract features\n    lr    = X_safe[:, 0]\n    bsz   = X_safe[:, 1]\n    D     = X_safe[:, 2]\n    Psize = X_safe[:, 3]\n\n    # precompute logs\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    log_y   = np.log(y_safe)\n\n    # initial guesses\n    min_y = np.min(y_safe)\n    mean_y = np.mean(y_safe)\n    p0 = np.array([\n        np.log(max(mean_y * 0.1, eps)),  # logA\n        -0.3,                            # \u03b1_P\n        -0.3,                            # \u03b1_D\n        -0.2,                            # \u03b1_B\n        -0.2,                            # \u03b1_L\n        np.log(min_y * 0.05 + eps)      # log_y_inf\n    ], dtype=float)\n\n    # bounds for stability\n    # exponents in [-5, 0], floor below half of min_y\n    bounds = [\n        (None, None),              # logA\n        (-5.0, 0.0),               # \u03b1_P\n        (-5.0, 0.0),               # \u03b1_D\n        (-5.0, 0.0),               # \u03b1_B\n        (-5.0, 0.0),               # \u03b1_L\n        (None, np.log(min_y * 0.5 + eps))  # log_y_inf <= log(0.5*min_y)\n    ]\n\n    # objective: MSE in log\u2010space\n    def objective(p):\n        logA, aP, aD, aB, aL, log_yinf = p\n        # compute log power\u2010law term\n        log_term = logA + aP*log_P + aD*log_D + aB*log_bsz + aL*log_lr\n        # stable log-sum-exp: log(y_inf + exp(log_term))\n        M = np.maximum(log_yinf, log_term)\n        log_pred = M + np.log(np.exp(log_yinf - M) + np.exp(log_term - M))\n        return np.mean((log_pred - log_y)**2)\n\n    # optimize with L-BFGS-B\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-9}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess\n        return p0.copy()", "language": "python", "parent_id": "3e391037-337a-41ed-99ba-3dae04ca1121", "generation": 3, "timestamp": 1754809225.0216637, "iteration_found": 139, "metrics": {"nmse": 2.8065486675111986, "nmae": 2.1031587119559916, "r2": -1.8065486675111986, "combined_score": 0.26270516610886285}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4061604030445895, "nmae": 0.6892982077613492, "r2": 0.5938395969554104, "combined_score": 0.7111564212978979}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4062\n- nmae: 0.6893\n- r2: 0.5938\n- combined_score: 0.7112\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse. Consider continuing with similar changes.\n- Metrics showing regression: nmae, r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1892, nmae: 0.5152, r2: 0.8108, combined_score: 0.8409\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5890)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a weighted,\n    regularized 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # safe log\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, one cross-term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight samples to emphasize large\u2010scale configurations\n    (higher data_size and model_size), and apply light ridge on\n    linear terms, moderate on quadratic, stronger on the data\u00d7model cross-term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # weight samples by scale: up-weight larger (data_size + model_size)\n    scale_signal = L_data + L_param\n    median_s = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_s))\n    W_sqrt = np.sqrt(w)[:, None]\n\n    # weighted normal equations\n    Phi_w = Phi * W_sqrt         # each row scaled by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties\n    # intercept idx=0 (no penalty)\n    # linear idx 1-4, quadratic idx 5-8, cross-term idx 9\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.1892), Performs well on nmae (0.5152), Performs well on r2 (0.8108), Performs well on combined_score (0.8409)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a simple, robust log-polynomial scaling law:\n       log y = p0\n             + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n             + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n             + p9*(L_data * L_param)\n    where L_x = log(x).  We then exponentiate to return y.\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients [p0\u2026p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, one cross-term\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via\n    closed-form ridge-regularized regression in log-domain.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe logs\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build same design matrix as in prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a simplified 2nd\u2010order polynomial in the log\u2010features,\nfocusing on the dominant quadratic effects and the key data\u00d7model interaction:\n\n   log(y_pred) = p0\n                + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                + p9*(L_data * L_param)\n\nwhere L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit this via closed\u2010form ridge\u2010regularized regression in the log\u2010domain\nfor numerical stability and good extrapolation.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using the simplified 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # compute safe logs\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, and data\u00d7model interaction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align dimensions\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build the same design matrix as in prediction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge\u2010regularized normal equations in log\u2010domain\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept term\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5890, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a weighted,\n    regularized 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n                   columns = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data\u00d7param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # safe log\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, one cross-term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight samples to emphasize large\u2010scale configurations\n    (higher data_size and model_size), and apply light ridge on\n    linear terms, moderate on quadratic, stronger on the data\u00d7model cross-term.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # weight samples by scale: up-weight larger (data_size + model_size)\n    scale_signal = L_data + L_param\n    median_s = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_s))\n    W_sqrt = np.sqrt(w)[:, None]\n\n    # weighted normal equations\n    Phi_w = Phi * W_sqrt         # each row scaled by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties\n    # intercept idx=0 (no penalty)\n    # linear idx 1-4, quadratic idx 5-8, cross-term idx 9\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 2.2831, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved, robust scaling law model for LLM training hyperparameters.\n\nWe model the asymptotic loss floor plus a single power\u2010law term\nin log\u2010space for numerical stability and parsimony:\n    y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * (bsz * lr)^{\u03b1_E}\n\nwhere:\n    P   = non\u2010embedding parameter count\n    D   = data size (tokens)\n    bsz = batch size\n    lr  = learning rate\nand we fit the reparameterized vector:\n    p = [ logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf ]\n\nFitting is done by minimizing the mean squared error in log\u2010loss space:\n    MSE( log(y_pred) - log(y_true) ) \nwith simple box\u2010constraints to keep y_inf below the observed minimum.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the fitted scaling law.\n    Args:\n      data_points: array\u2010like of shape (N,4): [lr, bsz, data_size, P_size]\n      params:      array of shape (5,) or (T,5): [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf]\n    Returns:\n      y_pred: np.ndarray of shape (N,) if params is (5,),\n              or (N,T) if params is (T,5).\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # combine bsz and lr into a single effective exponent\n    E     = lr * bsz\n    # take logs of factors\n    logP = np.log(Psize)\n    logD = np.log(D)\n    logE = np.log(E + 1e-20)\n    # normalize params array\n    p = np.asarray(params, float)\n    if p.ndim == 1:\n        p = p.reshape(1, -1)\n    T, Pcount = p.shape\n    if Pcount != 5:\n        raise ValueError(f\"Expected params with 5 entries, got {Pcount}\")\n    # unpack parameter vectors\n    logA     = p[:, 0]   # shape (T,)\n    alpha_P  = p[:, 1]\n    alpha_D  = p[:, 2]\n    alpha_E  = p[:, 3]\n    log_yinf = p[:, 4]\n    # compute the power\u2010law term in log\u2010space: shape (N,T)\n    # log_term[n,t] = logA[t] + alpha_P[t]*logP[n] + alpha_D[t]*logD[n] + alpha_E[t]*logE[n]\n    # we broadcast: (N,1)+(1,T)*(N,1) etc.\n    log_term = (\n        logA[np.newaxis, :]\n        + np.outer(logP, alpha_P)\n        + np.outer(logD, alpha_D)\n        + np.outer(logE, alpha_E)\n    )  # shape (N,T)\n    # exponentiate the term\n    term = np.exp(log_term)\n    # exponentiate y_inf\n    y_inf = np.exp(log_yinf)[np.newaxis, :]  # shape (1,T)\n    # predicted loss\n    y_all = y_inf + term  # shape (N,T)\n    # return (N,) if single param vector\n    if y_all.shape[1] == 1:\n        return y_all[:, 0]\n    return y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law by minimizing log\u2010MSE:\n        MSE( log(y_pred) - log(y_true) )\n    with simple box\u2010constraints on exponents and y_inf.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features per data point, got {X.shape[1]}\")\n    # ensure y > 0\n    eps = 1e-8\n    y_safe = np.maximum(y, eps)\n    # compute logs of features once\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    E     = lr * bsz\n    logP = np.log(Psize + 1e-20)\n    logD = np.log(D + 1e-20)\n    logE = np.log(E + 1e-20)\n    # initial parameter guesses\n    min_y = np.min(y_safe)\n    p0 = np.array([\n        0.0,       # logA\n       -0.5,       # \u03b1_P\n       -0.3,       # \u03b1_D\n       -0.2,       # \u03b1_E\n        np.log(min_y * 0.05 + eps)  # log_y_inf (5% of min observed)\n    ], dtype=float)\n    # bounds: allow exponents in a reasonable range, keep y_inf below half of min(y)\n    bounds = [\n        (None, None),           # logA free\n        (-5.0, 5.0),            # \u03b1_P\n        (-5.0, 5.0),            # \u03b1_D\n        (-5.0, 5.0),            # \u03b1_E\n        (None, np.log(min_y * 0.5 + eps))  # log_y_inf \u2264 log(0.5 * min_y)\n    ]\n    # objective: mean squared error in log\u2010space\n    def objective(p):\n        logA, aP, aD, aE, log_yinf = p\n        # compute log_term\n        lt = (\n            logA\n            + aP * logP[:, None]\n            + aD * logD[:, None]\n            + aE * logE[:, None]\n        ).ravel()\n        # stable log\u2010sum\u2010exp for y_pred:\n        # log(y_inf + exp(lt)) = M + log(exp(log_yinf - M) + exp(lt - M))\n        M = np.maximum(log_yinf, lt)\n        logy_pred = M + np.log(np.exp(log_yinf - M) + np.exp(lt - M))\n        # residual in log-space\n        return np.mean((logy_pred - np.log(y_safe))**2)\n    # run L-BFGS-B\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial\n        return p0.copy()\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (40.963), Excellent nmae (8.108)\n\n\n### Inspiration 3 (Score: 0.6144, Type: Migrant)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.6144, Type: Alternative)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a simplified 2nd\u2010order polynomial in the log\u2010features,\nfocusing on the dominant quadratic effects and the key data\u00d7model interaction:\n\n   log(y_pred) = p0\n                + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                + p9*(L_data * L_param)\n\nwhere L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit this via closed\u2010form ridge\u2010regularized regression in the log\u2010domain\nfor numerical stability and good extrapolation.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using the simplified 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # compute safe logs\n    logX = np.log(np.maximum(X, 1e-12))\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, and data\u00d7model interaction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align dimensions\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {X.shape[1]}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # safe floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform inputs and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build the same design matrix as in prediction\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge\u2010regularized normal equations in log\u2010domain\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept term\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.6435, Type: Alternative)\n```python\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build an 11\u2010column design matrix for a 2nd\u2010order log\u2010polynomial scaling law\n    with two key interactions: data_size\u00d7param_size and lr\u00d7bsz.\n\n    Inputs:\n      logX: array of shape (N,4), columns [L_lr, L_bsz, L_data, L_param]\n\n    Returns:\n      Phi: array of shape (N,11) with columns\n           [1,\n            L_lr, L_bsz, L_data, L_param,\n            L_lr^2, L_bsz^2, L_data^2, L_param^2,\n            L_data*L_param,\n            L_lr*L_bsz ]\n    \"\"\"\n    N, F = logX.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    L_lr, L_bsz, L_data, L_param = logX.T\n    return np.column_stack([\n        np.ones(N),        # intercept\n        L_lr,              # linear lr\n        L_bsz,             # linear bsz\n        L_data,            # linear data\n        L_param,           # linear param\n        L_lr**2,           # quadratic lr\n        L_bsz**2,          # quadratic bsz\n        L_data**2,         # quadratic data\n        L_param**2,        # quadratic param\n        L_data * L_param,  # interaction data\u00d7param\n        L_lr * L_bsz       # interaction lr\u00d7bsz\n    ])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 2nd\u2010order log\u2010polynomial\n    with two interactions (data\u00d7param, lr\u00d7bsz).\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 11:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param, p10_lr_bsz]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {p.size}\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict\n    Phi = _build_design_matrix(logX)\n    log_pred = Phi.dot(p)  # shape (N,)\n\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via closed\u2010form\n    ridge regression. We include a small ridge penalty on all\n    coefficients except the intercept for stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 11 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,11)\n\n    # normal equations with ridge (no penalty on intercept)\n    A = Phi.T.dot(Phi)                # (11,11)\n    b =   Phi.T.dot(logy)             # (11,)\n\n    ridge = 1e-6\n    # add ridge to diagonal entries except intercept (idx 0)\n    I = np.arange(1, A.shape[0])\n    A[I, I] += ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.980), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in log\u2010features:\n     - intercept\n     - linear terms (log x_i)\n     - quadratic terms (log x_i)^2\n     - pairwise interactions log x_i * log x_j for i<j\n    \"\"\"\n    N, F = logX.shape\n    # total columns = 1 + F + F + F*(F-1)/2\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=float)\n    # linear terms\n    start = 1\n    Phi[:, start:start+F] = logX\n    # quadratic terms\n    start_q = start + F\n    Phi[:, start_q:start_q+F] = logX**2\n    # pairwise interactions\n    idx = start_q + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4), columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # Avoid invalid logs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    # Build design matrix and predict\n    Phi = _build_design_matrix(logX)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differentially\u2010regularized ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Avoid zeros / negatives before log\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Build design matrix (N x 15)\n    Phi = _build_design_matrix(logX)\n    P = Phi.shape[1]\n\n    # Sample weighting to emphasize large\u2010scale points\n    # w_i = exp( 0.5 * ((log data_size + log param_size) - median) )\n    ds = logX[:, 2]\n    ps = logX[:, 3]\n    prod = ds + ps\n    med = np.median(prod)\n    w = np.exp(0.5 * (prod - med))  # shape (N,)\n\n    # Form normal equations with weights\n    # A = Phi^T (W * Phi), b = Phi^T (W * logy)\n    W = w[:, None]  # (N,1)\n    A = Phi.T.dot(Phi * W)\n    b = Phi.T.dot(logy * w)\n\n    # Differential ridge: no penalty on intercept\n    #   small on linear, moderate on quadratic, stronger on interactions\n    regs = np.zeros(P, dtype=float)\n    # indices\n    lin_slice = slice(1, 1+F)\n    quad_slice = slice(1+F, 1+2*F)\n    interact_slice = slice(1+2*F, P)\n    # strengths\n    regs[lin_slice] = 1e-6\n    regs[quad_slice] = 1e-4\n    regs[interact_slice] = 1e-2\n    # Apply to diagonal of A\n    diag_idx = np.arange(P)\n    A[diag_idx, diag_idx] += regs\n\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a concise power\u2010law + floor model:\n        y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * bsz^{\u03b1_B} * lr^{\u03b1_L}\n\n    where:\n      - lr: learning rate\n      - bsz: batch size\n      - D:  data_size (tokens)\n      - P:  non_embedding_param_size\n      - params = [logA, \u03b1_P, \u03b1_D, \u03b1_B, \u03b1_L, log_y_inf]\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, P_size]\n      params:      array\u2010like of length 6:\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_B, \u03b1_L, log_y_inf]\n    Returns:\n      y_pred:      np.ndarray of shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, log_yinf = p\n\n    # avoid non\u2010positive inputs\n    X_safe = np.maximum(X, 1e-12)\n    lr    = X_safe[:, 0]\n    bsz   = X_safe[:, 1]\n    D     = X_safe[:, 2]\n    Psize = X_safe[:, 3]\n\n    # compute logarithms\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n\n    # power\u2010law term in log\u2010space\n    log_term = logA + aP * log_P + aD * log_D + aB * log_bsz + aL * log_lr\n\n    # back to original space\n    term  = np.exp(log_term)\n    y_inf = np.exp(log_yinf)\n    return y_inf + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law + floor scaling law by minimizing\n    mean squared error in log\u2010loss space:\n        y_pred = y_inf + A * P^{\u03b1_P} * D^{\u03b1_D} * bsz^{\u03b1_B} * lr^{\u03b1_L}\n\n    We optimize parameters:\n        [logA, \u03b1_P, \u03b1_D, \u03b1_B, \u03b1_L, log_y_inf]\n    under box constraints for stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      params: np.ndarray of length 6 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # reshape if necessary\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # ensure positivity\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    y_safe = np.maximum(y, eps)\n\n    # extract features\n    lr    = X_safe[:, 0]\n    bsz   = X_safe[:, 1]\n    D     = X_safe[:, 2]\n    Psize = X_safe[:, 3]\n\n    # precompute logs\n    log_lr  = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_D   = np.log(D)\n    log_P   = np.log(Psize)\n    log_y   = np.log(y_safe)\n\n    # initial guesses\n    min_y = np.min(y_safe)\n    mean_y = np.mean(y_safe)\n    p0 = np.array([\n        np.log(max(mean_y * 0.1, eps)),  # logA\n        -0.3,                            # \u03b1_P\n        -0.3,                            # \u03b1_D\n        -0.2,                            # \u03b1_B\n        -0.2,                            # \u03b1_L\n        np.log(min_y * 0.05 + eps)      # log_y_inf\n    ], dtype=float)\n\n    # bounds for stability\n    # exponents in [-5, 0], floor below half of min_y\n    bounds = [\n        (None, None),              # logA\n        (-5.0, 0.0),               # \u03b1_P\n        (-5.0, 0.0),               # \u03b1_D\n        (-5.0, 0.0),               # \u03b1_B\n        (-5.0, 0.0),               # \u03b1_L\n        (None, np.log(min_y * 0.5 + eps))  # log_y_inf <= log(0.5*min_y)\n    ]\n\n    # objective: MSE in log\u2010space\n    def objective(p):\n        logA, aP, aD, aB, aL, log_yinf = p\n        # compute log power\u2010law term\n        log_term = logA + aP*log_P + aD*log_D + aB*log_bsz + aL*log_lr\n        # stable log-sum-exp: log(y_inf + exp(log_term))\n        M = np.maximum(log_yinf, log_term)\n        log_pred = M + np.log(np.exp(log_yinf - M) + np.exp(log_term - M))\n        return np.mean((log_pred - log_y)**2)\n\n    # optimize with L-BFGS-B\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-9}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess\n        return p0.copy()\n```"]}}}