{"id": "6c4d7c8c-585e-410a-b92e-814e4f09eebc", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 11-parameter\n    2nd-order log-polynomial scaling law with two interaction terms.\n\n    log(y_pred) = p0\n                + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                + p9*(L_data * L_param)\n                + p10*(L_lr * L_bsz)\n\n    where L_x = log(x). Returns y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 11 of fitted coefficients.\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    # columns: [1,\n    #           L_lr, L_bsz, L_data, L_param,\n    #           L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #           L_data*L_param, L_lr*L_bsz]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11-parameter log-polynomial scaling law via\n    closed-form differential-ridge regression in the log-domain.\n\n    Returns a parameter vector [p0\u2026p10] minimizing MSE on log(loss).\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 11 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n\n    # normal equations: A p = b\n    A = Phi.T.dot(Phi)   # shape (11,11)\n    b = Phi.T.dot(logy)  # shape (11,)\n\n    # differential ridge regularization\n    # parameter indices:\n    #   0       : intercept       (no penalty)\n    #   1..4    : linear terms    (small penalty)\n    #   5..8    : quadratic terms (moderate penalty)\n    #   9..10   : cross terms     (stronger penalty)\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    # apply penalties on diagonal\n    # linear terms\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    # quadratic terms\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    # cross terms\n    for i in range(9, 11):\n        A[i, i] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "0230f66e-cb1e-4343-8ebe-ea29d8d9d17e", "generation": 5, "timestamp": 1754809606.2004914, "iteration_found": 172, "metrics": {"nmse": 0.6845559158282241, "nmae": 0.9805252115661772, "r2": 0.31544408417177594, "combined_score": 0.5936282616705797}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.348721623417525, "nmae": 2.9232175664641797, "r2": -4.348721623417525, "combined_score": 0.1575120251471506}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 5.3487\n- nmae: 2.9232\n- r2: -4.3487\n- combined_score: 0.1575\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter log-polynomial scaling law:\n    \n      log y_pred = p0\n                 + p1 * log(lr)\n                 + p2 * log(bsz)\n                 + p3 * log(data_size)\n                 + p4 * log(non_embedding_param_size)\n                 + p5 * [log(lr)]^2\n                 + p6 * [log(bsz)]^2\n                 + p7 * [log(data_size)]^2\n                 + p8 * [log(non_embedding_param_size)]^2\n                 + p9 * (log(data_size) * log(non_embedding_param_size))\n                 \n    Then y_pred = exp(log y_pred).\n    \n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # [log(lr)]^2\n        L_bsz**2,             # [log(bsz)]^2\n        L_data**2,            # [log(data_size)]^2\n        L_param**2,           # [log(non_embedding_param_size)]^2\n        L_data * L_param      # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form ridge regression\n    in the log-domain. Minimizes squared error on log(loss).\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge regularization strength\n    ridge = 1e-6\n    \n    # normal equations: (\u03a6\u1d40 \u03a6 + \u03bb I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10-parameter\n    2nd-order log-polynomial with one key interaction.\n\n    Model in log-domain:\n      log y_pred = p0\n                 + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x). We exponentiate to return y_pred.\n    Inputs:\n      data_points: array\u2010like shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like shape (10,)\n    Returns:\n      y_pred:      np.ndarray shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data*L_param]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via\n    closed-form ridge-regularized regression in log-space.\n    Inputs:\n      data_points: array\u2010like shape (N,4)\n      loss_values: array\u2010like shape (N,)\n    Returns:\n      params:      np.ndarray shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all non-intercept coefficients\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    10\u2010parameter 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                   + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    We exponentiate to return y_pred.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure two\u2010dimensional\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, and one cross term\n    Phi = np.column_stack([\n        np.ones(N),         # intercept\n        L_lr,               # log(lr)\n        L_bsz,              # log(bsz)\n        L_data,             # log(data_size)\n        L_param,            # log(non_embedding_param_size)\n        L_lr**2,            # [log(lr)]^2\n        L_bsz**2,           # [log(bsz)]^2\n        L_data**2,          # [log(data_size)]^2\n        L_param**2,         # [log(non_embedding_param_size)]^2\n        L_data * L_param    # cross\u2010term data_size\u00d7param_size\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10\u2010parameter log\u2010polynomial scaling law via\n    closed\u2010form ridge\u2010regularized regression in log\u2010space.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10\u2010parameter\n    log\u2010polynomial scaling law:\n\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x).  The function returns y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, length 10\n\n    Returns:\n      y_pred: np.ndarray of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, one cross\u2010term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),   # p0\n        L_lr,                 # p1\n        L_bsz,                # p2\n        L_data,               # p3\n        L_param,              # p4\n        L_lr**2,              # p5\n        L_bsz**2,             # p6\n        L_data**2,            # p7\n        L_param**2,           # p8\n        L_data * L_param      # p9\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form ridge\u2010regression\n    in the log\u2010domain. Solves for params = [p0\u2026p9] minimizing squared error on log(loss).\n\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n\n    Returns:\n      params: np.ndarray of length 10\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features in data_points, got {F}\")\n    if y.size != N:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # floor inputs/outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 19134519623688.4141, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (3645157993675680530464505856.000), Excellent nmae (76538078494753.656), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 4 (Score: 0.6435, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a refined 2nd-order log-polynomial scaling law:\n\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n                  + p10*(L_lr   * L_bsz)\n\n    where L_x = log(x) for x = [lr, bsz, data_size, non_embedding_param_size].\n    The output is exponentiated back to the original loss scale.\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 11:\n                   [intercept,\n                    coef_L_lr, coef_L_bsz, coef_L_data, coef_L_param,\n                    coef_L_lr2, coef_L_bsz2, coef_L_data2, coef_L_param2,\n                    coef_L_data_L_param, coef_L_lr_L_bsz]\n\n    Returns:\n      y_pred: numpy array of shape (N,), predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param,\n    #  L_lr   * L_bsz]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr   * L_bsz\n    ])\n\n    log_pred = Phi.dot(p)  # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the refined 2nd-order log-polynomial scaling law via\n    closed-form differential ridge regression.\n\n    Returns a parameter vector of length 11:\n      [intercept,\n       coef_L_lr, coef_L_bsz, coef_L_data, coef_L_param,\n       coef_L_lr2, coef_L_bsz2, coef_L_data2, coef_L_param2,\n       coef_L_data_L_param, coef_L_lr_L_bsz]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values length mismatch\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr   * L_bsz\n    ])\n\n    # normal equations\n    A = Phi.T.dot(Phi)    # (11,11)\n    b = Phi.T.dot(logy)   # (11,)\n\n    # differential ridge penalties\n    # index blocks:\n    #   intercept: [0] (no penalty)\n    #   linear terms:    1..4\n    #   quadratic terms: 5..8\n    #   cross terms:     9..10\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    P = Phi.shape[1]\n    # build a vector of diagonal regularization\n    reg = np.zeros(P, dtype=float)\n    reg[1:5]   = ridge_lin\n    reg[5:9]   = ridge_quad\n    reg[9:11]  = ridge_cross\n\n    # apply to diagonal\n    A[np.diag_indices(P)] += reg\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.981), NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.6067, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a polynomial in the log\u2010features:\n   z = [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\n\nlog(y_pred) = c0\n            + \u03a3_i c1_i * z_i\n            + \u03a3_i c2_i * z_i^2\n            + \u03a3_{i<j} c3_{ij} * (z_i * z_j)\n            + c4 * z_0^3   (cubic term on log(lr) to capture learning\u2010rate curvature)\n\nTotal parameters: 1 intercept + 4 linear + 4 quadratic + 6 pairwise + 1 cubic = 16.\n\nWe fit via closed\u2010form weighted, differential\u2010ridge regression in the log\u2010domain\nto emphasize large\u2010scale configs and ensure numerical stability.\n\"\"\"\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build design matrix \u03a6 for the polynomial in log\u2010features.\n    Inputs:\n      logX: (N,4) array of log\u2010features [z0, z1, z2, z3]\n    Returns:\n      Phi: (N,16) design matrix with columns\n           [1,\n            z0, z1, z2, z3,\n            z0^2, z1^2, z2^2, z3^2,\n            z0\u00b7z1, z0\u00b7z2, z0\u00b7z3, z1\u00b7z2, z1\u00b7z3, z2\u00b7z3,\n            z0^3]\n    \"\"\"\n    N, F = logX.shape\n    if F != 4:\n        raise ValueError(f\"_build_design_matrix: expected 4 features, got {F}\")\n    # total columns = 1 + 4 + 4 + 6 + 1 = 16\n    P = 16\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # cubic term on log(lr) (feature 0)\n    Phi[:, idx] = logX[:, 0]**3\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the enhanced scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 16 of fitted coefficients.\n\n    Returns:\n      y_pred: 1D array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 16:\n        raise ValueError(f\"scaling_law_func: expected 16 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)  # shape (N,4)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)  # (N,16)\n    log_pred = Phi.dot(p)             # (N,)\n\n    # back to original loss space\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law via weighted, differential\u2010ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 16 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of points and losses must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)  # (N,4)\n    logy = np.log(y_safe)  # (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # (N,16)\n\n    # sample weights to emphasize large\u2010scale configurations\n    scale_sum = logX[:, 2] + logX[:, 3]  # log(data_size) + log(model_size)\n    median_scale = np.median(scale_sum)\n    w = np.exp(0.5 * (scale_sum - median_scale))  # (N,)\n\n    # assemble weighted normal equations\n    W_phi = Phi * w[:, np.newaxis]     # (N,16)\n    A = Phi.T.dot(W_phi)               # (16,16)\n    b = Phi.T.dot(logy * w)            # (16,)\n\n    # differential ridge regularization\n    ridge_lin   = 1e-6   # linear terms\n    ridge_quad  = 1e-4   # quadratic terms\n    ridge_inter = 1e-2   # interaction terms\n    ridge_cubic = 1e-3   # cubic term on lr\n\n    # parameter index blocks\n    idx_lin   = range(1, 1+F)                                # 1..4\n    idx_quad  = range(1+F, 1+2*F)                            # 5..8\n    idx_inter = range(1+2*F, 1+2*F + (F*(F-1)//2))           # 9..14\n    idx_cubic = [A.shape[0]-1]                                # 15\n\n    # apply penalties (intercept at 0 left unregularized)\n    for i in idx_lin:\n        A[i, i] += ridge_lin\n    for i in idx_quad:\n        A[i, i] += ridge_quad\n    for i in idx_inter:\n        A[i, i] += ridge_inter\n    for i in idx_cubic:\n        A[i, i] += ridge_cubic\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using an enhanced log\u2010quadratic scaling law:\n      log(y_pred) = c0\n                    + a1*log(lr) + a2*log(bsz)\n                    + a3*log(data_size) + a4*log(non_embedding_param_size)\n                    + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4), columns [lr, bsz, data_size, non_embedding_param_size]\n        params:      array\u2010like of length 7: \n                     [c0, a1, a2, a3, a4, a5, a6]\n    Returns:\n        1D numpy array of length N with predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[0]}\")\n\n    # Avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix with log\u2010linear and log\u2010quadratic terms\n    # Columns: [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2]\n    Phi = np.vstack([\n        np.ones_like(L_lr),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T  # shape (N, 7)\n\n    log_pred = Phi.dot(p)      # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced log\u2010quadratic scaling law via ridge\u2010regularized least squares.\n\n    Model:\n      log(y) = c0\n               + a1*log(lr) + a2*log(bsz)\n               + a3*log(data_size) + a4*log(non_embedding_param_size)\n               + a5*(log(lr))^2 + a6*(log(bsz))^2\n\n    Args:\n        data_points: array\u2010like of shape (N,4)\n        loss_values: array\u2010like of shape (N,)\n    Returns:\n        params: numpy array of length 7 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of loss values must match number of data points\")\n\n    # Clip to avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    L = np.log(X_clipped)\n    L_lr    = L[:, 0]\n    L_bsz   = L[:, 1]\n    L_data  = L[:, 2]\n    L_param = L[:, 3]\n\n    # Build design matrix (N x 7)\n    Phi = np.vstack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2\n    ]).T\n\n    # Ridge regularization on non\u2010intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)              # (7,7)\n    A[1:, 1:] += ridge * np.eye(6)  # only penalize a1..a6\n    b = Phi.T.dot(np.log(y_clipped))\n\n    # Solve linear system for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an 11-parameter\n    2nd-order log-polynomial scaling law with two interaction terms.\n\n    log(y_pred) = p0\n                + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                + p9*(L_data * L_param)\n                + p10*(L_lr * L_bsz)\n\n    where L_x = log(x). Returns y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 11 of fitted coefficients.\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 11:\n        raise ValueError(f\"scaling_law_func: expected 11 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    # columns: [1,\n    #           L_lr, L_bsz, L_data, L_param,\n    #           L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #           L_data*L_param, L_lr*L_bsz]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 11-parameter log-polynomial scaling law via\n    closed-form differential-ridge regression in the log-domain.\n\n    Returns a parameter vector [p0\u2026p10] minimizing MSE on log(loss).\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: numpy array of length 11 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 11)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param,\n        L_lr * L_bsz\n    ])\n\n    # normal equations: A p = b\n    A = Phi.T.dot(Phi)   # shape (11,11)\n    b = Phi.T.dot(logy)  # shape (11,)\n\n    # differential ridge regularization\n    # parameter indices:\n    #   0       : intercept       (no penalty)\n    #   1..4    : linear terms    (small penalty)\n    #   5..8    : quadratic terms (moderate penalty)\n    #   9..10   : cross terms     (stronger penalty)\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    # apply penalties on diagonal\n    # linear terms\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    # quadratic terms\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    # cross terms\n    for i in range(9, 11):\n        A[i, i] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}