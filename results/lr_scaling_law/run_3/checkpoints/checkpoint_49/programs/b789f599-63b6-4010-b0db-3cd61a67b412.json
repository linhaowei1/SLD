{"id": "b789f599-63b6-4010-b0db-3cd61a67b412", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive loss floor, a quadratic learning-rate term,\n    and an interaction between data size and model parameter size:\n\n        loss_pred = loss_floor + exp(\n            intercept\n            + w_lr1 * log(lr)\n            + w_lr2 * (log(lr))^2\n            + w_bsz * log(bsz)\n            + w_data * log(data_size)\n            + w_param * log(non_embedding_param_size)\n            + w_cross * [log(data_size) * log(non_embedding_param_size)]\n        )\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr1, w_lr2,\n                     w_bsz,\n                     w_data,\n                     w_param,\n                     w_cross\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    loss_floor, intercept = params[0], params[1]\n    w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross = params[2:]\n\n    # Compute log\u2010features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # Linear term in expanded log\u2010space\n    lin_term = (\n        intercept\n        + w_lr1 * log_lr\n        + w_lr2 * (log_lr ** 2)\n        + w_bsz * log_bsz\n        + w_data * log_data\n        + w_param * log_param\n        + w_cross * (log_data * log_param)\n    )\n\n    return loss_floor + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law in two stages:\n      1) Ridge\u2010regularized linear regression in log\u2010loss space (ignoring floor)\n      2) Robust Huber least\u2010squares refinement on original loss scale\n\n    Returns params of shape (8,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Avoid zero / negative before logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features per data point\"\n\n    # Build log\u2010features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # Design matrix for initial linear solve (in log(y))\n    # Columns: [1, log_lr, (log_lr)^2, log_bsz, log_data, log_param, log_data*log_param]\n    phi = np.vstack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param,\n        log_data * log_param\n    ]).T  # shape (N,7)\n\n    logy = np.log(y)\n\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    P = phi.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = phi.T.dot(phi) + lam * I\n    b = phi.T.dot(logy)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        theta, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    intercept0 = theta[0]\n    w_init     = theta[1:]  # length 6\n\n    # Initialize floor as half the minimum observed loss\n    loss_floor0 = max(0.0, 0.5 * np.min(y))\n\n    # Pack initial parameters: [floor, intercept, w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross]\n    p0 = np.concatenate(([loss_floor0, intercept0], w_init))\n\n    # Bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = np.concatenate(([0.0, -np.inf], [-np.inf] * (P - 1)))\n    upper = np.concatenate(([np.min(y),  np.inf], [ np.inf] * (P - 1)))\n\n    # Residual function on original loss scale\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Robust Huber refinement\n    try:\n        res = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.5,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8,\n            max_nfev=3000\n        )\n        p_opt = res.x if res.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6f418647-358c-4659-966b-9b052a2091d0", "generation": 3, "timestamp": 1754717980.2454927, "iteration_found": 49, "metrics": {"nmse": 0.28747244368043123, "nmae": 0.4747929184285147, "r2": 0.7125275563195688, "combined_score": 0.7767156531454386}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3938917154217057, "nmae": 0.508714929458518, "r2": 0.6061082845782944, "combined_score": 0.7174158429497959}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3426, nmae: 0.5090, r2: 0.6574, combined_score: 0.7448\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2875, nmae: 0.4748, r2: 0.7125, combined_score: 0.7767\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5629)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law: additive floor + extended log\u2010space regression with\nquadratic lr term and data\u2010param interaction.\n\nModel:\n  loss_pred = loss_floor + exp(\n      intercept\n      + w_lr1 * log(lr)\n      + w_lr2 * (log(lr))^2\n      + w_bsz * log(bsz)\n      + w_data * log(data_size)\n      + w_param * log(non_embedding_param_size)\n      + w_cross * log(data_size) * log(non_embedding_param_size)\n  )\n\nFitting:\n  1) Ridge\u2010regularized linear regression in augmented log\u2010space\n  2) Robust Huber least\u2010squares refinement on original loss\u2010space\n\"\"\"\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n    params: (8,) = [\n      loss_floor,\n      intercept,\n      w_lr1, w_lr2,\n      w_bsz,\n      w_data,\n      w_param,\n      w_cross\n    ]\n    returns: (N,) predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack\n    loss_floor = params[0]\n    intercept  = params[1]\n    w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross = params[2:]\n\n    # compute logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # quadratic and interaction features\n    lr_quad    = log_lr * log_lr\n    data_param = log_data * log_param\n\n    lin_term = (\n        intercept\n        + w_lr1 * log_lr\n        + w_lr2 * lr_quad\n        + w_bsz * log_bsz\n        + w_data * log_data\n        + w_param * log_param\n        + w_cross * data_param\n    )\n    return loss_floor + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended scaling law.\n    Returns params of shape (8,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features per point\"\n\n    # clamp\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build augmented log\u2010space design matrix\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    lr_quad    = log_lr * log_lr\n    data_param = log_data * log_param\n\n    # columns: [1, log_lr, lr_quad, log_bsz, log_data, log_param, data_param]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([\n        ones,\n        log_lr.reshape(-1, 1),\n        lr_quad.reshape(-1, 1),\n        log_bsz.reshape(-1, 1),\n        log_data.reshape(-1, 1),\n        log_param.reshape(-1, 1),\n        data_param.reshape(-1, 1)\n    ])  # shape (N,7)\n\n    # initial linear solve in log\u2010loss space\n    logy = np.log(y)\n    # ridge regularization (no penalty on intercept)\n    D = design.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    try:\n        sol = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        sol, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    intercept0 = sol[0]\n    w_init     = sol[1:]  # length 6\n\n    # initial floor: half min(y)\n    loss_floor0 = max(0.0, 0.5 * np.min(y))\n\n    # pack initial params: [floor, intercept, w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross]\n    p0 = np.concatenate(([loss_floor0, intercept0], w_init))\n\n    # bounds: loss_floor \u2208 [0, min(y)], others unconstrained\n    lower = np.concatenate(([0.0, -np.inf], [-np.inf] * (D - 1)))\n    upper = np.concatenate(([np.min(y), np.inf], [np.inf] * (D - 1)))\n\n    # residual function in original space\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # robust refinement\n    try:\n        res = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.5,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8,\n            max_nfev=5000\n        )\n        p_opt = res.x if res.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2875), Performs well on nmae (0.4748), Performs well on r2 (0.7125), Performs well on combined_score (0.7767)\n\n\n### Program 2 (Score: 0.5635)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended power\u2010law model\n    in log\u2010space with all pairwise interaction terms:\n        log(loss) = intercept\n                    + w_lr * log(lr)\n                    + w_bsz * log(bsz)\n                    + w_data * log(data_size)\n                    + w_param * log(non_embedding_param_size)\n                    + \u03a3_{i<j} w_{ij} * [log(x_i)*log(x_j)]\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    The full parameter vector has length 1 + 4 + 6 = 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute logs\n    logX = np.log(X)  # shape (N,4)\n    lr, bsz, data_size, param_size = logX[:,0], logX[:,1], logX[:,2], logX[:,3]\n\n    # Build design matrix: [1, lr, bsz, data_size, param_size,\n    #                       lr*bsz, lr*data_size, lr*param_size,\n    #                       bsz*data_size, bsz*param_size,\n    #                       data_size*param_size]\n    N = X.shape[0]\n    design = np.empty((N, 11), dtype=np.float64)\n    design[:, 0] = 1.0\n    design[:, 1] = lr\n    design[:, 2] = bsz\n    design[:, 3] = data_size\n    design[:, 4] = param_size\n    design[:, 5] = lr * bsz\n    design[:, 6] = lr * data_size\n    design[:, 7] = lr * param_size\n    design[:, 8] = bsz * data_size\n    design[:, 9] = bsz * param_size\n    design[:,10] = data_size * param_size\n\n    # Linear model in log-space\n    log_pred = design.dot(params)\n    # Back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space. Solves (\u03a6^T \u03a6 + \u03bbI) \u03b8 = \u03a6^T log(loss) for \u03b8.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Log-transform\n    logX = np.log(X)   # (N,4)\n    logy = np.log(y)   # (N,)\n\n    lr, bsz, data_size, param_size = logX[:,0], logX[:,1], logX[:,2], logX[:,3]\n\n    # Build same design matrix as in scaling_law_func\n    N = X.shape[0]\n    Phi = np.empty((N, 11), dtype=np.float64)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = lr\n    Phi[:, 2] = bsz\n    Phi[:, 3] = data_size\n    Phi[:, 4] = param_size\n    Phi[:, 5] = lr * bsz\n    Phi[:, 6] = lr * data_size\n    Phi[:, 7] = lr * param_size\n    Phi[:, 8] = bsz * data_size\n    Phi[:, 9] = bsz * param_size\n    Phi[:,10] = data_size * param_size\n\n    # Ridge regression: (\u03a6^T \u03a6 + \u03bbI) \u03b8 = \u03a6^T logy\n    # Do not regularize intercept term (index 0)\n    lambda_reg = 1e-3\n    P = Phi.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = Phi.T.dot(Phi) + lambda_reg * I\n    b = Phi.T.dot(logy)\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3426), Performs well on nmae (0.5090), Performs well on r2 (0.6574), Performs well on combined_score (0.7448)\n\n\n### Program 3 (Score: 0.5565)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # guard against zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)  # (4,)\n\n    log_pred = intercept + logX.dot(weights)       # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space with\n    internal standardization + ridge, then recovers unstandardized weights.\n\n    Model:\n      log(loss) \u2248 intercept + w_lr*log(lr)\n                        + w_bsz*log(bsz)\n                        + w_data*log(data_size)\n                        + w_param*log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # Prevent log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Take logs\n    logX = np.log(X)  # (N,4)\n    logy = np.log(y)  # (N,)\n\n    # Standardize features for numerical stability\n    mu    = logX.mean(axis=0)                     # (4,)\n    sigma = logX.std(axis=0) + eps                # (4,)\n    Z     = (logX - mu) / sigma                   # (N,4)\n\n    N, F = Z.shape  # F == 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # Design matrix in standardized log-space\n    design = np.hstack([ones, Z])  # (N, 5)\n\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # Solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I  # (5,5)\n    b = design.T.dot(logy)                     # (5,)\n\n    p_z = np.linalg.solve(A, b)                # standardized-space params (5,)\n\n    c_z   = p_z[0]     # intercept in standardized space\n    w_z   = p_z[1:]    # weights in standardized space, shape (4,)\n\n    # Recover original-space weights:\n    #   w_orig_i = w_z_i / sigma_i\n    #   intercept_orig = c_z - sum(w_z_i * mu_i/sigma_i)\n    w_orig = w_z / sigma\n    intercept_orig = c_z - np.dot(w_z, mu / sigma)\n\n    # Pack back into length-5 parameter vector\n    params = np.concatenate([[intercept_orig], w_orig])\n    return params\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5656)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an enhanced power\u2010law model with:\n      - quadratic term in log(lr)\n      - interaction term between log(lr) and log(data_size)\n    log(loss) = p0\n                + p1*log(lr)\n                + p2*(log(lr))^2\n                + p3*log(bsz)\n                + p4*log(data_size)\n                + p5*log(non_embedding_param_size)\n                + p6*[log(lr)*log(data_size)]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid zeros / negatives before taking logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # assemble design matrix with interaction term log_lr * log_data\n    # columns: [1, log_lr, log_lr^2, log_bsz, log_data, log_param, log_lr*log_data]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr * log_data\n    ]).T\n\n    # linear model in log\u2010space\n    log_pred = phi.dot(params)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law model in log\u2010space via ridge\u2010regularized least squares.\n    We choose a data\u2010driven ridge\u2010factor \u03bb = \u03bb0 * trace(phi^T phi) / M for numerical stability.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    N = X.shape[0]\n    # build design matrix \u03c6\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr * log_data\n    ]).T  # shape (N,7)\n\n    # normal equations components\n    A0 = phi.T.dot(phi)           # shape (7,7)\n    b  = phi.T.dot(np.log(y))     # shape (7,)\n\n    # dynamic ridge regularization factor\n    M = A0.shape[0]\n    lambda0 = 1e-6\n    lambda_reg = lambda0 * np.trace(A0) / M\n\n    # do not penalize the intercept (first parameter)\n    reg_mask = np.ones(M, dtype=np.float64)\n    reg_mask[0] = 0.0\n\n    A = A0 + lambda_reg * np.diag(reg_mask)\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5629, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law: additive floor + extended log\u2010space regression with\nquadratic lr term and data\u2010param interaction.\n\nModel:\n  loss_pred = loss_floor + exp(\n      intercept\n      + w_lr1 * log(lr)\n      + w_lr2 * (log(lr))^2\n      + w_bsz * log(bsz)\n      + w_data * log(data_size)\n      + w_param * log(non_embedding_param_size)\n      + w_cross * log(data_size) * log(non_embedding_param_size)\n  )\n\nFitting:\n  1) Ridge\u2010regularized linear regression in augmented log\u2010space\n  2) Robust Huber least\u2010squares refinement on original loss\u2010space\n\"\"\"\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n    params: (8,) = [\n      loss_floor,\n      intercept,\n      w_lr1, w_lr2,\n      w_bsz,\n      w_data,\n      w_param,\n      w_cross\n    ]\n    returns: (N,) predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # unpack\n    loss_floor = params[0]\n    intercept  = params[1]\n    w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross = params[2:]\n\n    # compute logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # quadratic and interaction features\n    lr_quad    = log_lr * log_lr\n    data_param = log_data * log_param\n\n    lin_term = (\n        intercept\n        + w_lr1 * log_lr\n        + w_lr2 * lr_quad\n        + w_bsz * log_bsz\n        + w_data * log_data\n        + w_param * log_param\n        + w_cross * data_param\n    )\n    return loss_floor + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended scaling law.\n    Returns params of shape (8,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features per point\"\n\n    # clamp\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build augmented log\u2010space design matrix\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    lr_quad    = log_lr * log_lr\n    data_param = log_data * log_param\n\n    # columns: [1, log_lr, lr_quad, log_bsz, log_data, log_param, data_param]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([\n        ones,\n        log_lr.reshape(-1, 1),\n        lr_quad.reshape(-1, 1),\n        log_bsz.reshape(-1, 1),\n        log_data.reshape(-1, 1),\n        log_param.reshape(-1, 1),\n        data_param.reshape(-1, 1)\n    ])  # shape (N,7)\n\n    # initial linear solve in log\u2010loss space\n    logy = np.log(y)\n    # ridge regularization (no penalty on intercept)\n    D = design.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(D, dtype=np.float64)\n    I[0, 0] = 0.0\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    try:\n        sol = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        sol, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    intercept0 = sol[0]\n    w_init     = sol[1:]  # length 6\n\n    # initial floor: half min(y)\n    loss_floor0 = max(0.0, 0.5 * np.min(y))\n\n    # pack initial params: [floor, intercept, w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross]\n    p0 = np.concatenate(([loss_floor0, intercept0], w_init))\n\n    # bounds: loss_floor \u2208 [0, min(y)], others unconstrained\n    lower = np.concatenate(([0.0, -np.inf], [-np.inf] * (D - 1)))\n    upper = np.concatenate(([np.min(y), np.inf], [np.inf] * (D - 1)))\n\n    # residual function in original space\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # robust refinement\n    try:\n        res = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.5,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8,\n            max_nfev=5000\n        )\n        p_opt = res.x if res.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5656, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an enhanced power\u2010law model with:\n      - quadratic term in log(lr)\n      - interaction term between log(lr) and log(data_size)\n    log(loss) = p0\n                + p1*log(lr)\n                + p2*(log(lr))^2\n                + p3*log(bsz)\n                + p4*log(data_size)\n                + p5*log(non_embedding_param_size)\n                + p6*[log(lr)*log(data_size)]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Clip to avoid zeros / negatives before taking logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # compute log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # assemble design matrix with interaction term log_lr * log_data\n    # columns: [1, log_lr, log_lr^2, log_bsz, log_data, log_param, log_lr*log_data]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr * log_data\n    ]).T\n\n    # linear model in log\u2010space\n    log_pred = phi.dot(params)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law model in log\u2010space via ridge\u2010regularized least squares.\n    We choose a data\u2010driven ridge\u2010factor \u03bb = \u03bb0 * trace(phi^T phi) / M for numerical stability.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    N = X.shape[0]\n    # build design matrix \u03c6\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param,\n        log_lr * log_data\n    ]).T  # shape (N,7)\n\n    # normal equations components\n    A0 = phi.T.dot(phi)           # shape (7,7)\n    b  = phi.T.dot(np.log(y))     # shape (7,)\n\n    # dynamic ridge regularization factor\n    M = A0.shape[0]\n    lambda0 = 1e-6\n    lambda_reg = lambda0 * np.trace(A0) / M\n\n    # do not penalize the intercept (first parameter)\n    reg_mask = np.ones(M, dtype=np.float64)\n    reg_mask[0] = 0.0\n\n    A = A0 + lambda_reg * np.diag(reg_mask)\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5635, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via an extended power\u2010law model\n    in log\u2010space with all pairwise interaction terms:\n        log(loss) = intercept\n                    + w_lr * log(lr)\n                    + w_bsz * log(bsz)\n                    + w_data * log(data_size)\n                    + w_param * log(non_embedding_param_size)\n                    + \u03a3_{i<j} w_{ij} * [log(x_i)*log(x_j)]\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    The full parameter vector has length 1 + 4 + 6 = 11.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # Compute logs\n    logX = np.log(X)  # shape (N,4)\n    lr, bsz, data_size, param_size = logX[:,0], logX[:,1], logX[:,2], logX[:,3]\n\n    # Build design matrix: [1, lr, bsz, data_size, param_size,\n    #                       lr*bsz, lr*data_size, lr*param_size,\n    #                       bsz*data_size, bsz*param_size,\n    #                       data_size*param_size]\n    N = X.shape[0]\n    design = np.empty((N, 11), dtype=np.float64)\n    design[:, 0] = 1.0\n    design[:, 1] = lr\n    design[:, 2] = bsz\n    design[:, 3] = data_size\n    design[:, 4] = param_size\n    design[:, 5] = lr * bsz\n    design[:, 6] = lr * data_size\n    design[:, 7] = lr * param_size\n    design[:, 8] = bsz * data_size\n    design[:, 9] = bsz * param_size\n    design[:,10] = data_size * param_size\n\n    # Linear model in log-space\n    log_pred = design.dot(params)\n    # Back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power\u2010law model by ridge\u2010regularized linear regression\n    in log\u2010space. Solves (\u03a6^T \u03a6 + \u03bbI) \u03b8 = \u03a6^T log(loss) for \u03b8.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Log-transform\n    logX = np.log(X)   # (N,4)\n    logy = np.log(y)   # (N,)\n\n    lr, bsz, data_size, param_size = logX[:,0], logX[:,1], logX[:,2], logX[:,3]\n\n    # Build same design matrix as in scaling_law_func\n    N = X.shape[0]\n    Phi = np.empty((N, 11), dtype=np.float64)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = lr\n    Phi[:, 2] = bsz\n    Phi[:, 3] = data_size\n    Phi[:, 4] = param_size\n    Phi[:, 5] = lr * bsz\n    Phi[:, 6] = lr * data_size\n    Phi[:, 7] = lr * param_size\n    Phi[:, 8] = bsz * data_size\n    Phi[:, 9] = bsz * param_size\n    Phi[:,10] = data_size * param_size\n\n    # Ridge regression: (\u03a6^T \u03a6 + \u03bbI) \u03b8 = \u03a6^T logy\n    # Do not regularize intercept term (index 0)\n    lambda_reg = 1e-3\n    P = Phi.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = Phi.T.dot(Phi) + lambda_reg * I\n    b = Phi.T.dot(logy)\n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5670, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # guard against zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)  # (4,)\n\n    log_pred = intercept + logX.dot(weights)       # (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space with\n    internal standardization + ridge, then recovers unstandardized weights.\n\n    Model:\n      log(loss) \u2248 intercept + w_lr*log(lr)\n                        + w_bsz*log(bsz)\n                        + w_data*log(data_size)\n                        + w_param*log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # Prevent log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # Take logs\n    logX = np.log(X)  # (N,4)\n    logy = np.log(y)  # (N,)\n\n    # Standardize features for numerical stability\n    mu    = logX.mean(axis=0)                     # (4,)\n    sigma = logX.std(axis=0) + eps                # (4,)\n    Z     = (logX - mu) / sigma                   # (N,4)\n\n    N, F = Z.shape  # F == 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # Design matrix in standardized log-space\n    design = np.hstack([ones, Z])  # (N, 5)\n\n    # Ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # Solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I  # (5,5)\n    b = design.T.dot(logy)                     # (5,)\n\n    p_z = np.linalg.solve(A, b)                # standardized-space params (5,)\n\n    c_z   = p_z[0]     # intercept in standardized space\n    w_z   = p_z[1:]    # weights in standardized space, shape (4,)\n\n    # Recover original-space weights:\n    #   w_orig_i = w_z_i / sigma_i\n    #   intercept_orig = c_z - sum(w_z_i * mu_i/sigma_i)\n    w_orig = w_z / sigma\n    intercept_orig = c_z - np.dot(w_z, mu / sigma)\n\n    # Pack back into length-5 parameter vector\n    params = np.concatenate([[intercept_orig], w_orig])\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive loss floor, a quadratic learning-rate term,\n    and an interaction between data size and model parameter size:\n\n        loss_pred = loss_floor + exp(\n            intercept\n            + w_lr1 * log(lr)\n            + w_lr2 * (log(lr))^2\n            + w_bsz * log(bsz)\n            + w_data * log(data_size)\n            + w_param * log(non_embedding_param_size)\n            + w_cross * [log(data_size) * log(non_embedding_param_size)]\n        )\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (8,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr1, w_lr2,\n                     w_bsz,\n                     w_data,\n                     w_param,\n                     w_cross\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # Avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    loss_floor, intercept = params[0], params[1]\n    w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross = params[2:]\n\n    # Compute log\u2010features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # Linear term in expanded log\u2010space\n    lin_term = (\n        intercept\n        + w_lr1 * log_lr\n        + w_lr2 * (log_lr ** 2)\n        + w_bsz * log_bsz\n        + w_data * log_data\n        + w_param * log_param\n        + w_cross * (log_data * log_param)\n    )\n\n    return loss_floor + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law in two stages:\n      1) Ridge\u2010regularized linear regression in log\u2010loss space (ignoring floor)\n      2) Robust Huber least\u2010squares refinement on original loss scale\n\n    Returns params of shape (8,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # Avoid zero / negative before logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features per data point\"\n\n    # Build log\u2010features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # Design matrix for initial linear solve (in log(y))\n    # Columns: [1, log_lr, (log_lr)^2, log_bsz, log_data, log_param, log_data*log_param]\n    phi = np.vstack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param,\n        log_data * log_param\n    ]).T  # shape (N,7)\n\n    logy = np.log(y)\n\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-6\n    P = phi.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = phi.T.dot(phi) + lam * I\n    b = phi.T.dot(logy)\n\n    try:\n        theta = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        theta, *_ = np.linalg.lstsq(A, b, rcond=None)\n\n    intercept0 = theta[0]\n    w_init     = theta[1:]  # length 6\n\n    # Initialize floor as half the minimum observed loss\n    loss_floor0 = max(0.0, 0.5 * np.min(y))\n\n    # Pack initial parameters: [floor, intercept, w_lr1, w_lr2, w_bsz, w_data, w_param, w_cross]\n    p0 = np.concatenate(([loss_floor0, intercept0], w_init))\n\n    # Bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = np.concatenate(([0.0, -np.inf], [-np.inf] * (P - 1)))\n    upper = np.concatenate(([np.min(y),  np.inf], [ np.inf] * (P - 1)))\n\n    # Residual function on original loss scale\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Robust Huber refinement\n    try:\n        res = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.5,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8,\n            max_nfev=3000\n        )\n        p_opt = res.x if res.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```"]}}}