{"id": "015e6c0e-a725-46c6-a8c9-2bb0e56bfbc9_migrant_2", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "015e6c0e-a725-46c6-a8c9-2bb0e56bfbc9", "generation": 3, "timestamp": 1754809052.0589027, "iteration_found": 0, "metrics": {"nmse": 0.3868934976149482, "nmae": 0.7363985304629478, "r2": 0.6131065023850518, "combined_score": 0.7210358990936997}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4375628979305829, "nmae": 0.6957091062837715, "r2": 0.5624371020694171, "combined_score": 0.6956217369268026}, "island": 2, "migrant": true}, "artifacts_json": null, "artifact_dir": null}