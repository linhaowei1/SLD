{"id": "cd76e5c3-dd9f-4322-9c5c-be238247406f", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via an extended multiplicative power\u2010law model with pairwise log interactions:\n      log(loss) = intercept\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(non_embedding_param_size)\n                  + w5*[log(lr)*log(bsz)]\n                  + w6*[log(lr)*log(data_size)]\n                  + w7*[log(bsz)*log(non_embedding_param_size)]\n                  + w8*[log(data_size)*log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (9,) = \n                   [intercept,\n                    w_lr, w_bsz, w_data, w_param,\n                    w_lr_bsz, w_lr_data, w_bsz_param, w_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # compute pairwise interactions\n    lr_bsz     = log_lr * log_bsz\n    lr_data    = log_lr * log_data\n    bsz_param  = log_bsz * log_param\n    data_param = log_data * log_param\n\n    # unpack parameters\n    intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_lr_data, w_bsz_param, w_data_param = params\n\n    # linear combination in log\u2010space\n    log_pred = (\n        intercept\n        + w_lr        * log_lr\n        + w_bsz       * log_bsz\n        + w_data      * log_data\n        + w_param     * log_param\n        + w_lr_bsz    * lr_bsz\n        + w_lr_data   * lr_data\n        + w_bsz_param * bsz_param\n        + w_data_param* data_param\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression in log\u2010space.\n    Design matrix columns:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(lr)*log(data_size),\n       log(bsz)*log(param_size), log(data_size)*log(param_size)]\n    Solves (D^T D + \u03bb I) p = D^T log(y) for p.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (9,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    lr_bsz     = log_lr * log_bsz\n    lr_data    = log_lr * log_data\n    bsz_param  = log_bsz * log_param\n    data_param = log_data * log_param\n\n    N = X.shape[0]\n    D = np.vstack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        lr_bsz,\n        lr_data,\n        bsz_param,\n        data_param\n    ]).T  # shape (N,9)\n\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = D.T.dot(D) + lambda_reg * I\n    b_vec = D.T.dot(logy)\n\n    params = np.linalg.solve(A, b_vec)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3a206aa0-a818-45b6-974c-93b012f49977", "generation": 3, "timestamp": 1754717983.3844576, "iteration_found": 50, "metrics": {"nmse": 0.31879136905367256, "nmae": 0.4490270350157665, "r2": 0.6812086309463274, "combined_score": 0.7582700520079774}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.35475711478799465, "nmae": 0.50644546542682, "r2": 0.6452428852120053, "combined_score": 0.7381396924100964}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3548\n- nmae: 0.5064\n- r2: 0.6452\n- combined_score: 0.7381\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3548, nmae: 0.5064, r2: 0.6452, combined_score: 0.7381\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3355, nmae: 0.5255, r2: 0.6645, combined_score: 0.7488\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3188, nmae: 0.4490, r2: 0.6812, combined_score: 0.7583\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5518)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via an extended multiplicative power\u2010law model:\n      log(loss) \u2248 intercept\n                 + w1*log(lr)\n                 + w2*log(bsz)\n                 + w3*log(data_size)\n                 + w4*log(non_embedding_param_size)\n                 + w5*[log(lr)*log(bsz)]\n                 + w6*[log(lr)*log(data_size)]\n                 + w7*[log(bsz)*log(non_embedding_param_size)]\n                 + w8*[log(data_size)*log(non_embedding_param_size)]\n    Returns: loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (9,)\n                   [intercept,\n                    w1, w2, w3, w4,\n                    w5, w6, w7, w8]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid zero or negative inputs for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # compute primary logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # compute pairwise interactions\n    lr_bsz    = log_lr    * log_bsz\n    lr_data   = log_lr    * log_data\n    bsz_param = log_bsz   * log_param\n    data_param= log_data  * log_param\n\n    # unpack parameters\n    intercept = params[0]\n    w1, w2, w3, w4, w5, w6, w7, w8 = params[1:]\n\n    # linear combination in log-space\n    log_pred = (\n        intercept\n        + w1 * log_lr\n        + w2 * log_bsz\n        + w3 * log_data\n        + w4 * log_param\n        + w5 * lr_bsz\n        + w6 * lr_data\n        + w7 * bsz_param\n        + w8 * data_param\n    )\n\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above extended power\u2010law model by ridge\u2010regularized linear regression in log\u2010space.\n    Builds a design matrix with columns:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(lr)*log(data_size),\n       log(bsz)*log(param_size), log(data_size)*log(param_size)]\n    and solves (D^T D + \u03bb I) p = D^T log(y) for p.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (9,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid invalid log/zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # compute interactions\n    lr_bsz    = log_lr    * log_bsz\n    lr_data   = log_lr    * log_data\n    bsz_param = log_bsz   * log_param\n    data_param= log_data  * log_param\n\n    # assemble design matrix D of shape (N,9)\n    N = X.shape[0]\n    D = np.vstack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        lr_bsz,\n        lr_data,\n        bsz_param,\n        data_param\n    ]).T\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0\n\n    # normal equations\n    A = D.T.dot(D) + lambda_reg * I\n    b = D.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3188), Performs well on nmae (0.4490), Performs well on r2 (0.6812), Performs well on combined_score (0.7583)\n\n\n### Program 2 (Score: 0.5686)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + polynomial power-law model in log-space:\n\n      loss \u2248 loss_floor + exp( intercept\n                               + \u03a3_i w_i * log(x_i)\n                               + \u03a3_i u_i * (log(x_i))^2 )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (10,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     u_lr, u_bsz, u_data, u_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                          # (N,4)\n\n    loss_floor = params[0]                     # scalar \u2265 0\n    intercept  = params[1]                     # scalar\n    w = params[2:6]                            # linear weights (4,)\n    u = params[6:10]                           # quadratic weights (4,)\n\n    # build log-prediction with both linear and squared-log terms\n    log_pred = intercept + logX.dot(w) + (logX**2).dot(u)  # (N,)\n    return loss_floor + np.exp(log_pred)                  # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the polynomial power\u2010law model by:\n      1) A linear regression in log\u2010space to get intercept & linear weights\n      2) Initializing quadratic weights to zero\n      3) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to solve for the floor, intercept, linear & quadratic weights.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (10,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # clamp to avoid zeros / negs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # INITIAL REGRESSION IN LOG-SPACE (no quadratic terms yet)\n    logX = np.log(X)     # (N,4)\n    logy = np.log(y)     # (N,)\n\n    N, F = logX.shape    # F == 4\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])  # shape (N,5)\n\n    # ridge regularization for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I  # (5,5)\n    b = design.T.dot(logy)                     # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    w_init = p_lin[1:]               # (4,)\n    u_init = np.zeros(F, dtype=np.float64)  # start quadratic terms at zero\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 10-vector\n    x0 = np.concatenate([\n        [loss_floor_init],\n        [intercept_init],\n        w_init,\n        u_init\n    ])\n\n    # parameter bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf] * (1 + F + F)\n    upper = [np.min(y)] + [np.inf] * (1 + F + F)\n\n    # ROBUST REFINEMENT IN ORIGINAL LOSS SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals,\n            x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess\n        params_opt = x0\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3355), Performs well on nmae (0.5255), Performs well on r2 (0.6645), Performs well on combined_score (0.7488)\n\n\n### Program 3 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3548), Performs well on nmae (0.5064), Performs well on r2 (0.6452), Performs well on combined_score (0.7381)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters by a multiplicative power\u2010law:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # compute in log\u2010space\n    logX = np.log(X)                         # (N,4)\n    intercept = float(params[0])             # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)  # (4,)\n    # linear model in log space\n    log_pred = intercept + logX.dot(weights) # (N,)\n    # back to original scale\n    preds = np.exp(log_pred)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by a ridge\u2010regularized linear regression in log\u2010space:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    N, F = X.shape\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # log transform\n    logX = np.log(X)   # (N,4)\n    logy = np.log(y)   # (N,)\n\n    # standardize features for numerical stability\n    means = logX.mean(axis=0)    # (4,)\n    stds  = logX.std(axis=0)     # (4,)\n    # avoid division by zero\n    stds = np.where(stds < eps, 1.0, stds)\n    X_std = (logX - means) / stds  # (N,4)\n\n    # build design matrix [1, x1_std, x2_std, x3_std, x4_std]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, X_std])  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    # scale lambda to trace of X^T X for balanced reg.\n    gram = design.T.dot(design)\n    trace = np.trace(gram)\n    lambda_reg = 1e-6 * (trace / (F + 1))\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (X^T X + \u03bbI) w = X^T y\n    A = gram + lambda_reg * I\n    b = design.T.dot(logy)\n\n    w_hat = np.linalg.solve(A, b)   # (5,)\n\n    # recover original weights & intercept\n    intercept_std = w_hat[0]\n    w_std = w_hat[1:]               # standardized weights\n    # original weights: w_i = w_std_i / stds_i\n    weights = w_std / stds\n    # intercept_orig = intercept_std - \u03a3_i (w_std_i * mean_i / stds_i)\n    intercept = intercept_std - np.dot(weights, means)\n\n    params = np.concatenate(([intercept], weights))\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5582)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed model:\n      loss_pred = bias\n                  + exp(intercept\n                        + \u03b8_lr * log(lr)\n                        + \u03b8_bsz * log(bsz)\n                        + \u03b8_data * log(data_size)\n                        + \u03b8_param * log(non_embedding_param_size)\n                        + \u03c6_data * (1/data_size)\n                        + \u03c6_param * (1/non_embedding_param_size))\n    params: array of shape (8,) = [\n        bias,\n        intercept,\n        \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n        \u03c6_data, \u03c6_param\n    ]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clamp to avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    lr        = X[:, 0]\n    bsz       = X[:, 1]\n    data_sz   = X[:, 2]\n    param_sz  = X[:, 3]\n\n    # log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # finite\u2010size features\n    inv_data  = 1.0 / data_sz\n    inv_param = 1.0 / param_sz\n\n    # unpack params\n    bias       = params[0]\n    intercept  = params[1]\n    theta      = params[2:6]   # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data   = params[6]\n    phi_param  = params[7]\n\n    # compute log\u2010prediction\n    log_pred = (\n        intercept\n        + theta[0] * log_lr\n        + theta[1] * log_bsz\n        + theta[2] * log_data\n        + theta[3] * log_param\n        + phi_data  * inv_data\n        + phi_param * inv_param\n    )\n\n    # back to original scale with bias floor\n    return bias + np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed\u2010model:\n      loss \u2248 bias\n            + exp(intercept\n                  + \u03a3 \u03b8_i log(x_i)\n                  + \u03c6_data*(1/data_size)\n                  + \u03c6_param*(1/param_size))\n    Procedure:\n      1. Estimate bias \u2248 0.5 * min(loss) (clamped)\n      2. Subtract bias and do ridge\u2010regularized linear regression in an\n         augmented log\u2010space to get intercept, \u03b8's, \u03c6_data, \u03c6_param.\n      3. Refinement via robust least squares (Huber loss) on all 8 params.\n    Returns:\n      params: array of shape (8,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # clamp to avoid invalid logs/divisions\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    N = X.shape[0]\n\n    # 1) initial bias floor\n    bias0 = max(np.min(y) * 0.5, eps)\n    # residual target for log regression\n    y0 = np.maximum(y - bias0, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # build log and finite\u2010size features\n    log_lr    = np.log(lr).reshape(-1, 1)\n    log_bsz   = np.log(bsz).reshape(-1, 1)\n    log_data  = np.log(data_sz).reshape(-1, 1)\n    log_param = np.log(param_sz).reshape(-1, 1)\n    inv_data  = (1.0 / data_sz).reshape(-1, 1)\n    inv_param = (1.0 / param_sz).reshape(-1, 1)\n\n    # design matrix for initial ridge regression\n    # columns: [1, log_lr, log_bsz, log_data, log_param, inv_data, inv_param]\n    ones = np.ones((N, 1), dtype=np.float64)\n    D = np.hstack([ones,\n                   log_lr,\n                   log_bsz,\n                   log_data,\n                   log_param,\n                   inv_data,\n                   inv_param])  # shape (N,7)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = D.T.dot(D) + lambda_reg * I\n    b_vec = D.T.dot(np.log(y0))\n\n    sol = np.linalg.solve(A, b_vec)  # shape (7,)\n    intercept0 = sol[0]\n    theta0     = sol[1:5]            # 4\u2010vector\n    phi_data0  = sol[5]\n    phi_param0 = sol[6]\n\n    # initial full parameter vector\n    p0 = np.concatenate((\n        [bias0, intercept0],\n        theta0.tolist(),\n        [phi_data0, phi_param0]\n    ))  # shape (8,)\n\n    # bounds: bias \u2208 [0, min(y)], \u03c6_data, \u03c6_param \u2265 0, others unconstrained\n    lower = np.array([0.0,          -np.inf,  -np.inf, -np.inf, -np.inf, -np.inf,    0.0,    0.0])\n    upper = np.array([np.min(y)] + [np.inf] * 7)\n\n    # robust least\u2010squares refinement\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        res = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=2000,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8\n        )\n        return res.x if res.success else p0\n    except Exception:\n        return p0\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5518, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via an extended multiplicative power\u2010law model:\n      log(loss) \u2248 intercept\n                 + w1*log(lr)\n                 + w2*log(bsz)\n                 + w3*log(data_size)\n                 + w4*log(non_embedding_param_size)\n                 + w5*[log(lr)*log(bsz)]\n                 + w6*[log(lr)*log(data_size)]\n                 + w7*[log(bsz)*log(non_embedding_param_size)]\n                 + w8*[log(data_size)*log(non_embedding_param_size)]\n    Returns: loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (9,)\n                   [intercept,\n                    w1, w2, w3, w4,\n                    w5, w6, w7, w8]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # avoid zero or negative inputs for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    # compute primary logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # compute pairwise interactions\n    lr_bsz    = log_lr    * log_bsz\n    lr_data   = log_lr    * log_data\n    bsz_param = log_bsz   * log_param\n    data_param= log_data  * log_param\n\n    # unpack parameters\n    intercept = params[0]\n    w1, w2, w3, w4, w5, w6, w7, w8 = params[1:]\n\n    # linear combination in log-space\n    log_pred = (\n        intercept\n        + w1 * log_lr\n        + w2 * log_bsz\n        + w3 * log_data\n        + w4 * log_param\n        + w5 * lr_bsz\n        + w6 * lr_data\n        + w7 * bsz_param\n        + w8 * data_param\n    )\n\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above extended power\u2010law model by ridge\u2010regularized linear regression in log\u2010space.\n    Builds a design matrix with columns:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(lr)*log(data_size),\n       log(bsz)*log(param_size), log(data_size)*log(param_size)]\n    and solves (D^T D + \u03bb I) p = D^T log(y) for p.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (9,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid invalid log/zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    # compute logs\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # compute interactions\n    lr_bsz    = log_lr    * log_bsz\n    lr_data   = log_lr    * log_data\n    bsz_param = log_bsz   * log_param\n    data_param= log_data  * log_param\n\n    # assemble design matrix D of shape (N,9)\n    N = X.shape[0]\n    D = np.vstack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        lr_bsz,\n        lr_data,\n        bsz_param,\n        data_param\n    ]).T\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0,0] = 0.0\n\n    # normal equations\n    A = D.T.dot(D) + lambda_reg * I\n    b = D.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 188883725141.5290, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (542512111103883970871296.000), Excellent nmae (755534900566.116), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5582, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed model:\n      loss_pred = bias\n                  + exp(intercept\n                        + \u03b8_lr * log(lr)\n                        + \u03b8_bsz * log(bsz)\n                        + \u03b8_data * log(data_size)\n                        + \u03b8_param * log(non_embedding_param_size)\n                        + \u03c6_data * (1/data_size)\n                        + \u03c6_param * (1/non_embedding_param_size))\n    params: array of shape (8,) = [\n        bias,\n        intercept,\n        \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n        \u03c6_data, \u03c6_param\n    ]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # clamp to avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    lr        = X[:, 0]\n    bsz       = X[:, 1]\n    data_sz   = X[:, 2]\n    param_sz  = X[:, 3]\n\n    # log\u2010features\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_sz)\n    log_param = np.log(param_sz)\n\n    # finite\u2010size features\n    inv_data  = 1.0 / data_sz\n    inv_param = 1.0 / param_sz\n\n    # unpack params\n    bias       = params[0]\n    intercept  = params[1]\n    theta      = params[2:6]   # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data   = params[6]\n    phi_param  = params[7]\n\n    # compute log\u2010prediction\n    log_pred = (\n        intercept\n        + theta[0] * log_lr\n        + theta[1] * log_bsz\n        + theta[2] * log_data\n        + theta[3] * log_param\n        + phi_data  * inv_data\n        + phi_param * inv_param\n    )\n\n    # back to original scale with bias floor\n    return bias + np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed\u2010model:\n      loss \u2248 bias\n            + exp(intercept\n                  + \u03a3 \u03b8_i log(x_i)\n                  + \u03c6_data*(1/data_size)\n                  + \u03c6_param*(1/param_size))\n    Procedure:\n      1. Estimate bias \u2248 0.5 * min(loss) (clamped)\n      2. Subtract bias and do ridge\u2010regularized linear regression in an\n         augmented log\u2010space to get intercept, \u03b8's, \u03c6_data, \u03c6_param.\n      3. Refinement via robust least squares (Huber loss) on all 8 params.\n    Returns:\n      params: array of shape (8,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # clamp to avoid invalid logs/divisions\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    N = X.shape[0]\n\n    # 1) initial bias floor\n    bias0 = max(np.min(y) * 0.5, eps)\n    # residual target for log regression\n    y0 = np.maximum(y - bias0, eps)\n\n    # unpack features\n    lr       = X[:, 0]\n    bsz      = X[:, 1]\n    data_sz  = X[:, 2]\n    param_sz = X[:, 3]\n\n    # build log and finite\u2010size features\n    log_lr    = np.log(lr).reshape(-1, 1)\n    log_bsz   = np.log(bsz).reshape(-1, 1)\n    log_data  = np.log(data_sz).reshape(-1, 1)\n    log_param = np.log(param_sz).reshape(-1, 1)\n    inv_data  = (1.0 / data_sz).reshape(-1, 1)\n    inv_param = (1.0 / param_sz).reshape(-1, 1)\n\n    # design matrix for initial ridge regression\n    # columns: [1, log_lr, log_bsz, log_data, log_param, inv_data, inv_param]\n    ones = np.ones((N, 1), dtype=np.float64)\n    D = np.hstack([ones,\n                   log_lr,\n                   log_bsz,\n                   log_data,\n                   log_param,\n                   inv_data,\n                   inv_param])  # shape (N,7)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = D.T.dot(D) + lambda_reg * I\n    b_vec = D.T.dot(np.log(y0))\n\n    sol = np.linalg.solve(A, b_vec)  # shape (7,)\n    intercept0 = sol[0]\n    theta0     = sol[1:5]            # 4\u2010vector\n    phi_data0  = sol[5]\n    phi_param0 = sol[6]\n\n    # initial full parameter vector\n    p0 = np.concatenate((\n        [bias0, intercept0],\n        theta0.tolist(),\n        [phi_data0, phi_param0]\n    ))  # shape (8,)\n\n    # bounds: bias \u2208 [0, min(y)], \u03c6_data, \u03c6_param \u2265 0, others unconstrained\n    lower = np.array([0.0,          -np.inf,  -np.inf, -np.inf, -np.inf, -np.inf,    0.0,    0.0])\n    upper = np.array([np.min(y)] + [np.inf] * 7)\n\n    # robust least\u2010squares refinement\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        res = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=2000,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8\n        )\n        return res.x if res.success else p0\n    except Exception:\n        return p0\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 5 (Score: 0.5565, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters by a multiplicative power\u2010law:\n      loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # compute in log\u2010space\n    logX = np.log(X)                         # (N,4)\n    intercept = float(params[0])             # scalar\n    weights   = np.asarray(params[1:], dtype=np.float64)  # (4,)\n    # linear model in log space\n    log_pred = intercept + logX.dot(weights) # (N,)\n    # back to original scale\n    preds = np.exp(log_pred)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the power\u2010law model by a ridge\u2010regularized linear regression in log\u2010space:\n      log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    N, F = X.shape\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n    # log transform\n    logX = np.log(X)   # (N,4)\n    logy = np.log(y)   # (N,)\n\n    # standardize features for numerical stability\n    means = logX.mean(axis=0)    # (4,)\n    stds  = logX.std(axis=0)     # (4,)\n    # avoid division by zero\n    stds = np.where(stds < eps, 1.0, stds)\n    X_std = (logX - means) / stds  # (N,4)\n\n    # build design matrix [1, x1_std, x2_std, x3_std, x4_std]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, X_std])  # (N,5)\n\n    # ridge regularization (no penalty on intercept)\n    # scale lambda to trace of X^T X for balanced reg.\n    gram = design.T.dot(design)\n    trace = np.trace(gram)\n    lambda_reg = 1e-6 * (trace / (F + 1))\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (X^T X + \u03bbI) w = X^T y\n    A = gram + lambda_reg * I\n    b = design.T.dot(logy)\n\n    w_hat = np.linalg.solve(A, b)   # (5,)\n\n    # recover original weights & intercept\n    intercept_std = w_hat[0]\n    w_std = w_hat[1:]               # standardized weights\n    # original weights: w_i = w_std_i / stds_i\n    weights = w_std / stds\n    # intercept_orig = intercept_std - \u03a3_i (w_std_i * mean_i / stds_i)\n    intercept = intercept_std - np.dot(weights, means)\n\n    params = np.concatenate(([intercept], weights))\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via an extended multiplicative power\u2010law model with pairwise log interactions:\n      log(loss) = intercept\n                  + w1*log(lr)\n                  + w2*log(bsz)\n                  + w3*log(data_size)\n                  + w4*log(non_embedding_param_size)\n                  + w5*[log(lr)*log(bsz)]\n                  + w6*[log(lr)*log(data_size)]\n                  + w7*[log(bsz)*log(non_embedding_param_size)]\n                  + w8*[log(data_size)*log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (9,) = \n                   [intercept,\n                    w_lr, w_bsz, w_data, w_param,\n                    w_lr_bsz, w_lr_data, w_bsz_param, w_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # compute pairwise interactions\n    lr_bsz     = log_lr * log_bsz\n    lr_data    = log_lr * log_data\n    bsz_param  = log_bsz * log_param\n    data_param = log_data * log_param\n\n    # unpack parameters\n    intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_lr_data, w_bsz_param, w_data_param = params\n\n    # linear combination in log\u2010space\n    log_pred = (\n        intercept\n        + w_lr        * log_lr\n        + w_bsz       * log_bsz\n        + w_data      * log_data\n        + w_param     * log_param\n        + w_lr_bsz    * lr_bsz\n        + w_lr_data   * lr_data\n        + w_bsz_param * bsz_param\n        + w_data_param* data_param\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge\u2010regularized linear regression in log\u2010space.\n    Design matrix columns:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(lr)*log(data_size),\n       log(bsz)*log(param_size), log(data_size)*log(param_size)]\n    Solves (D^T D + \u03bb I) p = D^T log(y) for p.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (9,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64)\n    eps = 1e-12\n\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    lr_bsz     = log_lr * log_bsz\n    lr_data    = log_lr * log_data\n    bsz_param  = log_bsz * log_param\n    data_param = log_data * log_param\n\n    N = X.shape[0]\n    D = np.vstack([\n        np.ones(N, dtype=np.float64),\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        lr_bsz,\n        lr_data,\n        bsz_param,\n        data_param\n    ]).T  # shape (N,9)\n\n    logy = np.log(y)\n\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-3\n    P = D.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    A = D.T.dot(D) + lambda_reg * I\n    b_vec = D.T.dot(logy)\n\n    params = np.linalg.solve(A, b_vec)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}