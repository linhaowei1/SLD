{"id": "152cb463-1e31-4782-a98a-9781655bcf4e", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended multiplicative power\u2010law with two key interactions:\n      log(loss) \u2248 intercept\n                 + w_lr * log(lr)\n                 + w_bsz * log(bsz)\n                 + w_data * log(data_size)\n                 + w_param * log(non_embedding_param_size)\n                 + w_lr_bsz * (log(lr) * log(bsz))\n                 + w_data_param * (log(data_size) * log(non_embedding_param_size))\n\n    Inputs:\n      data_points: array-like shape (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n      params:       array-like shape (7,) = [\n                      intercept,\n                      w_lr, w_bsz, w_data, w_param,\n                      w_lr_bsz, w_data_param\n                    ]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure non-negativity for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs of primary features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interaction features\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack parameters\n    intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param = params\n\n    # build linear predictor in log-space\n    log_pred = (\n        intercept\n        + w_lr          * log_lr\n        + w_bsz         * log_bsz\n        + w_data        * log_data\n        + w_param       * log_param\n        + w_lr_bsz      * inter_lr_bsz\n        + w_data_param  * inter_data_param\n    )\n\n    # return to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power\u2010law + interactions model by ridge\u2010regularized\n    linear regression in log-space:\n      log(loss) \u2248 intercept\n                 + w_lr * log(lr)\n                 + w_bsz * log(bsz)\n                 + w_data * log(data_size)\n                 + w_param * log(non_embedding_param_size)\n                 + w_lr_bsz * (log(lr)*log(bsz))\n                 + w_data_param * (log(data_size)*log(non_embedding_param_size))\n\n    A small ridge \u03bb is chosen automatically: \u03bb = 1e-6 * (trace(G)/d),\n    where G = X^T X and d is the number of features.\n\n    Inputs:\n      data_points: array-like shape (N,4)\n      loss_values: array-like shape (N,)\n    Returns:\n      params: array of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid zero or negative inputs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log-features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interaction terms\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix (N x 7)\n    N = X.shape[0]\n    ones = np.ones(N, dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_param\n    ])\n\n    # target is log-loss\n    logy = np.log(y)\n\n    # compute ridge regularization parameter based on trace of Gram matrix\n    G = design.T.dot(design)\n    dim = G.shape[0]\n    trace_G = np.trace(G)\n    lambda_reg = 1e-6 * (trace_G / dim)\n\n    # build regularizer (do not penalize intercept at index 0)\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (G + \u03bb I) p = X^T logy\n    A = G + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "abe096fa-2980-48af-910a-0a1e34e42097", "generation": 3, "timestamp": 1754717937.3975039, "iteration_found": 42, "metrics": {"nmse": 0.35231887088332614, "nmae": 0.47847456366291263, "r2": 0.6476811291166739, "combined_score": 0.7394705653606728}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.393891715792555, "nmae": 0.508714930781905, "r2": 0.606108284207445, "combined_score": 0.7174158427589251}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3548, nmae: 0.5064, r2: 0.6452, combined_score: 0.7381\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3510, nmae: 0.5023, r2: 0.6490, combined_score: 0.7402\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3456, nmae: 0.4742, r2: 0.6544, combined_score: 0.7431\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5543)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (7,)\n                    [intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative input to log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # extract columns\n    lr = X[:, 0]\n    bsz = X[:, 1]\n    data_size = X[:, 2]\n    param_size = X[:, 3]\n\n    # compute logs\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions\n    inter_lr_bsz = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack params\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear combination in log-space\n    log_pred = (intercept\n                + w_lr * log_lr\n                + w_bsz * log_bsz\n                + w_data * log_data\n                + w_param * log_param\n                + w_lr_bsz * inter_lr_bsz\n                + w_data_param * inter_data_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge-regression in log-space \n    with two interaction terms.\n    Builds a design matrix:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(data_size)*log(param_size)]\n    and solves (X^T X + \u03bbI) p = X^T y for p in log-loss space.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,) = \n              [intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix: shape (N,7)\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (do not penalize intercept)\n    dim = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3456), Performs well on nmae (0.4742), Performs well on r2 (0.6544), Performs well on combined_score (0.7431)\n\n\n### Program 2 (Score: 0.5606)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a small generalized power\u2010law:\n      log(loss) \u2248 intercept\n                 + w1 * log(lr)\n                 + w2 * (log(lr))^2\n                 + w3 * log(bsz)\n                 + w4 * log(data_size)\n                 + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: (N,4) array = [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,)   array = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix: [1, log(lr), (log(lr))^2, log(bsz), log(data), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above model by a trace-scaled ridge regression in log-space:\n      log(loss) \u2248 intercept + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz) + w4*log(data_size) + w5*log(param_size)\n\n    Inputs:\n      data_points: (N,4) hyperparameters\n      loss_values: (N,)   observed LM losses\n\n    Returns:\n      params: (6,) [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    N = X.shape[0]\n    # design matrix\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # (N,6)\n\n    # trace\u2010scaled ridge regularization for numerical stability\n    M = phi.shape[1]\n    G = phi.T.dot(phi)\n    trace_G = np.trace(G)\n    # scale \u03bb so that penalty ~1e-6 of average eigenvalue\n    lambda_reg = 1e-6 * (trace_G / M)\n\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0  # do not penalize intercept\n\n    A = G + lambda_reg * I\n    b = phi.T.dot(np.log(y))\n\n    # solve for log\u2010space weights\n    params = np.linalg.solve(A, b)  # (6,)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3510), Performs well on nmae (0.5023), Performs well on r2 (0.6490), Performs well on combined_score (0.7402)\n\n\n### Program 3 (Score: 0.5611)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3548), Performs well on nmae (0.5064), Performs well on r2 (0.6452), Performs well on combined_score (0.7381)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5691)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via:\n      loss_pred = bias + exp(intercept + w^T log(X))\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)  # (N,4)\n    bias      = params[0]\n    intercept = params[1]\n    weights   = params[2:]                         # (4,)\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                       # (N,4)\n    # compute power\u2010law term\n    lin = intercept + logX.dot(weights)            # (N,)\n    return bias + np.exp(lin)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the model: loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\n    via a single ridge\u2010regularized linear regression in transformed space.\n    1) Set bias = 0.9 * min(y) as additive floor.\n    2) Define y_adj = y - bias; clamp y_adj > 0.\n    3) Fit log(y_adj) \u2248 intercept + \u03a3_i w_i * log(x_i) by solving\n       (X^T X + \u03bbI) p = X^T log(y_adj).\n    Returns params array of shape (6,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)  # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features: [lr, bsz, data_size, non_embedding_param_size]\"\n    # avoid zeros\n    eps = 1e-12\n    # additive floor for bias\n    bias = max(np.min(y) * 0.9, eps)\n    # adjust and clamp\n    y_adj = np.maximum(y - bias, eps)\n    # log\u2010transform inputs\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                      # (N,4)\n    logy = np.log(y_adj)                          # (N,)\n    # design matrix [1, logX]\n    ones = np.ones((N, 1), dtype=np.float64)\n    D = np.hstack((ones, logX))                   # (N,5)\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n    A = D.T.dot(D) + lambda_reg * I               # (5,5)\n    b = D.T.dot(logy)                             # (5,)\n    sol = np.linalg.solve(A, b)                   # (5,)\n    intercept = sol[0]\n    weights   = sol[1:]                           # (4,)\n    # combine parameters\n    return np.concatenate(([bias, intercept], weights))\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5565)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed power\u2010law + finite\u2010size correction model:\n        log(loss) \u2248 \u03b80 + \u03a3_{i=1}^4 \u03b8_i * log(x_i)\n                           + \u03c6_data * (1/data_size)\n                           + \u03c6_param * (1/non_embedding_param_size)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # features in log-space\n    logX = np.log(X)                      # (N,4)\n\n    # finite-size corrections\n    inv_data  = 1.0 / X[:, 2]             # (N,)\n    inv_param = 1.0 / X[:, 3]             # (N,)\n\n    # unpack parameters\n    intercept = params[0]                 # \u03b80\n    theta     = params[1:5]               # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data  = params[5]                 # \u03c6_data\n    phi_param = params[6]                 # \u03c6_param\n\n    # compute predicted log-loss\n    log_pred = (intercept\n                + logX.dot(theta)\n                + inv_data * phi_data\n                + inv_param * phi_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log-space:\n        log(loss) \u2248 \u03b80 + \u03a3_i \u03b8_i * log(x_i) + \u03c6_data*(1/data_size) + \u03c6_param*(1/param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (7,) as in scaling_law_func doc\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build feature matrix\n    logX     = np.log(X)                       # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])              # (N,1)\n    inv_param = (1.0 / X[:, 3:4])              # (N,1)\n    logy      = np.log(y)                      # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    design = np.hstack([ones, logX, inv_data, inv_param])        # (N,7)\n\n    # ridge regularization for numerical stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (D^T D + \u03bb I) p = D^T logy\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5543, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an extended multiplicative \n    power\u2010law model with two key interaction terms:\n        log(loss) \u2248 intercept \n                     + w_lr * log(lr) \n                     + w_bsz * log(bsz)\n                     + w_data * log(data_size)\n                     + w_param * log(non_embedding_param_size)\n                     + w_lr_bsz * [log(lr) * log(bsz)]\n                     + w_data_param * [log(data_size) * log(non_embedding_param_size)]\n    Returns loss = exp(log_pred).\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (7,)\n                    [intercept,\n                     w_lr, w_bsz, w_data, w_param,\n                     w_lr_bsz, w_data_param]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative input to log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    # extract columns\n    lr = X[:, 0]\n    bsz = X[:, 1]\n    data_size = X[:, 2]\n    param_size = X[:, 3]\n\n    # compute logs\n    log_lr = np.log(lr)\n    log_bsz = np.log(bsz)\n    log_data = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # interactions\n    inter_lr_bsz = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack params\n    intercept     = params[0]\n    w_lr          = params[1]\n    w_bsz         = params[2]\n    w_data        = params[3]\n    w_param       = params[4]\n    w_lr_bsz      = params[5]\n    w_data_param  = params[6]\n\n    # linear combination in log-space\n    log_pred = (intercept\n                + w_lr * log_lr\n                + w_bsz * log_bsz\n                + w_data * log_data\n                + w_param * log_param\n                + w_lr_bsz * inter_lr_bsz\n                + w_data_param * inter_data_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the extended power\u2010law model by ridge-regression in log-space \n    with two interaction terms.\n    Builds a design matrix:\n      [1,\n       log(lr), log(bsz), log(data_size), log(param_size),\n       log(lr)*log(bsz), log(data_size)*log(param_size)]\n    and solves (X^T X + \u03bbI) p = X^T y for p in log-loss space.\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (7,) = \n              [intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # logs\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interactions\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix: shape (N,7)\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr[:, None],\n        log_bsz[:, None],\n        log_data[:, None],\n        log_param[:, None],\n        inter_lr_bsz[:, None],\n        inter_data_param[:, None]\n    ])\n\n    # target in log-space\n    logy = np.log(y)\n\n    # ridge regularization (do not penalize intercept)\n    dim = design.shape[1]\n    lambda_reg = 1e-3\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # normal equations\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5691, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via:\n      loss_pred = bias + exp(intercept + w^T log(X))\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)  # (N,4)\n    bias      = params[0]\n    intercept = params[1]\n    weights   = params[2:]                         # (4,)\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                       # (N,4)\n    # compute power\u2010law term\n    lin = intercept + logX.dot(weights)            # (N,)\n    return bias + np.exp(lin)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the model: loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\n    via a single ridge\u2010regularized linear regression in transformed space.\n    1) Set bias = 0.9 * min(y) as additive floor.\n    2) Define y_adj = y - bias; clamp y_adj > 0.\n    3) Fit log(y_adj) \u2248 intercept + \u03a3_i w_i * log(x_i) by solving\n       (X^T X + \u03bbI) p = X^T log(y_adj).\n    Returns params array of shape (6,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)  # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features: [lr, bsz, data_size, non_embedding_param_size]\"\n    # avoid zeros\n    eps = 1e-12\n    # additive floor for bias\n    bias = max(np.min(y) * 0.9, eps)\n    # adjust and clamp\n    y_adj = np.maximum(y - bias, eps)\n    # log\u2010transform inputs\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                      # (N,4)\n    logy = np.log(y_adj)                          # (N,)\n    # design matrix [1, logX]\n    ones = np.ones((N, 1), dtype=np.float64)\n    D = np.hstack((ones, logX))                   # (N,5)\n    # ridge regularization (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n    A = D.T.dot(D) + lambda_reg * I               # (5,5)\n    b = D.T.dot(logy)                             # (5,)\n    sol = np.linalg.solve(A, b)                   # (5,)\n    intercept = sol[0]\n    weights   = sol[1:]                           # (4,)\n    # combine parameters\n    return np.concatenate(([bias, intercept], weights))\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5606, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a small generalized power\u2010law:\n      log(loss) \u2248 intercept\n                 + w1 * log(lr)\n                 + w2 * (log(lr))^2\n                 + w3 * log(bsz)\n                 + w4 * log(data_size)\n                 + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: (N,4) array = [lr, bsz, data_size, non_embedding_param_size]\n      params:       (6,)   array = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: (N,) predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix: [1, log(lr), (log(lr))^2, log(bsz), log(data), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above model by a trace-scaled ridge regression in log-space:\n      log(loss) \u2248 intercept + w1*log(lr) + w2*(log(lr))^2 + w3*log(bsz) + w4*log(data_size) + w5*log(param_size)\n\n    Inputs:\n      data_points: (N,4) hyperparameters\n      loss_values: (N,)   observed LM losses\n\n    Returns:\n      params: (6,) [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    N = X.shape[0]\n    # design matrix\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # (N,6)\n\n    # trace\u2010scaled ridge regularization for numerical stability\n    M = phi.shape[1]\n    G = phi.T.dot(phi)\n    trace_G = np.trace(G)\n    # scale \u03bb so that penalty ~1e-6 of average eigenvalue\n    lambda_reg = 1e-6 * (trace_G / M)\n\n    I = np.eye(M, dtype=np.float64)\n    I[0, 0] = 0.0  # do not penalize intercept\n\n    A = G + lambda_reg * I\n    b = phi.T.dot(np.log(y))\n\n    # solve for log\u2010space weights\n    params = np.linalg.solve(A, b)  # (6,)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5611, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a generalized power\u2010law model\n    with a small quadratic term in log(lr):\n        log(loss) \u2248 intercept\n                   + w1 * log(lr)\n                   + w2 * (log(lr))^2\n                   + w3 * log(bsz)\n                   + w4 * log(data_size)\n                   + w5 * log(non_embedding_param_size)\n\n    Inputs:\n      data_points: array of shape (N,4) = [lr, bsz, data_size, param_size]\n      params:       array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid zero or negative before log\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build the design matrix\n    # features: [1, log(lr), (log(lr))^2, log(bsz), log(data_size), log(param)]\n    phi = np.vstack([\n        np.ones_like(log_lr),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    log_pred = phi.dot(params)    # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the generalized model by ridge\u2010regularized linear regression in log\u2010space.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) = [intercept, w1, w2, w3, w4, w5]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    lr, bsz, data_size, param_size = X.T\n\n    log_lr    = np.log(lr)\n    log_bsz   = np.log(bsz)\n    log_data  = np.log(data_size)\n    log_param = np.log(param_size)\n\n    # build design matrix phi: columns = [1, log_lr, log_lr^2, log_bsz, log_data, log_param]\n    N = X.shape[0]\n    phi = np.vstack([\n        np.ones(N),\n        log_lr,\n        log_lr**2,\n        log_bsz,\n        log_data,\n        log_param\n    ]).T  # shape (N,6)\n\n    # ridge regularization (no penalty on intercept)\n    M = phi.shape[1]\n    lambda_reg = 1e-6\n    I = np.eye(M, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = phi.T.dot(phi) + lambda_reg * I  # (6,6)\n    b = phi.T.dot(np.log(y))             # (6,)\n\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a mixed power\u2010law + finite\u2010size correction model:\n        log(loss) \u2248 \u03b80 + \u03a3_{i=1}^4 \u03b8_i * log(x_i)\n                           + \u03c6_data * (1/data_size)\n                           + \u03c6_param * (1/non_embedding_param_size)\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n    Returns loss = exp(log_pred).\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:      array of shape (7,) = [\n                     \u03b80,\n                     \u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param,\n                     \u03c6_data, \u03c6_param\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # features in log-space\n    logX = np.log(X)                      # (N,4)\n\n    # finite-size corrections\n    inv_data  = 1.0 / X[:, 2]             # (N,)\n    inv_param = 1.0 / X[:, 3]             # (N,)\n\n    # unpack parameters\n    intercept = params[0]                 # \u03b80\n    theta     = params[1:5]               # [\u03b8_lr, \u03b8_bsz, \u03b8_data, \u03b8_param]\n    phi_data  = params[5]                 # \u03c6_data\n    phi_param = params[6]                 # \u03c6_param\n\n    # compute predicted log-loss\n    log_pred = (intercept\n                + logX.dot(theta)\n                + inv_data * phi_data\n                + inv_param * phi_param)\n\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the mixed power\u2010law + finite\u2010size correction model by linear regression in augmented log-space:\n        log(loss) \u2248 \u03b80 + \u03a3_i \u03b8_i * log(x_i) + \u03c6_data*(1/data_size) + \u03c6_param*(1/param_size)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (7,) as in scaling_law_func doc\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()         # (N,)\n\n    # avoid log(0) or division by zero\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build feature matrix\n    logX     = np.log(X)                       # (N,4)\n    inv_data  = (1.0 / X[:, 2:3])              # (N,1)\n    inv_param = (1.0 / X[:, 3:4])              # (N,1)\n    logy      = np.log(y)                      # (N,)\n\n    N = X.shape[0]\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # design matrix: [1, log(lr), log(bsz), log(data_size), log(param_size), 1/data_size, 1/param_size]\n    design = np.hstack([ones, logX, inv_data, inv_param])        # (N,7)\n\n    # ridge regularization for numerical stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (D^T D + \u03bb I) p = D^T logy\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended multiplicative power\u2010law with two key interactions:\n      log(loss) \u2248 intercept\n                 + w_lr * log(lr)\n                 + w_bsz * log(bsz)\n                 + w_data * log(data_size)\n                 + w_param * log(non_embedding_param_size)\n                 + w_lr_bsz * (log(lr) * log(bsz))\n                 + w_data_param * (log(data_size) * log(non_embedding_param_size))\n\n    Inputs:\n      data_points: array-like shape (N,4) = [lr, bsz, data_size, non_embedding_param_size]\n      params:       array-like shape (7,) = [\n                      intercept,\n                      w_lr, w_bsz, w_data, w_param,\n                      w_lr_bsz, w_data_param\n                    ]\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    # ensure non-negativity for logs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # logs of primary features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interaction features\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # unpack parameters\n    intercept, w_lr, w_bsz, w_data, w_param, w_lr_bsz, w_data_param = params\n\n    # build linear predictor in log-space\n    log_pred = (\n        intercept\n        + w_lr          * log_lr\n        + w_bsz         * log_bsz\n        + w_data        * log_data\n        + w_param       * log_param\n        + w_lr_bsz      * inter_lr_bsz\n        + w_data_param  * inter_data_param\n    )\n\n    # return to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended power\u2010law + interactions model by ridge\u2010regularized\n    linear regression in log-space:\n      log(loss) \u2248 intercept\n                 + w_lr * log(lr)\n                 + w_bsz * log(bsz)\n                 + w_data * log(data_size)\n                 + w_param * log(non_embedding_param_size)\n                 + w_lr_bsz * (log(lr)*log(bsz))\n                 + w_data_param * (log(data_size)*log(non_embedding_param_size))\n\n    A small ridge \u03bb is chosen automatically: \u03bb = 1e-6 * (trace(G)/d),\n    where G = X^T X and d is the number of features.\n\n    Inputs:\n      data_points: array-like shape (N,4)\n      loss_values: array-like shape (N,)\n    Returns:\n      params: array of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid zero or negative inputs\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # compute log-features\n    log_lr    = np.log(X[:, 0])\n    log_bsz   = np.log(X[:, 1])\n    log_data  = np.log(X[:, 2])\n    log_param = np.log(X[:, 3])\n\n    # interaction terms\n    inter_lr_bsz     = log_lr * log_bsz\n    inter_data_param = log_data * log_param\n\n    # build design matrix (N x 7)\n    N = X.shape[0]\n    ones = np.ones(N, dtype=np.float64)\n    design = np.column_stack([\n        ones,\n        log_lr,\n        log_bsz,\n        log_data,\n        log_param,\n        inter_lr_bsz,\n        inter_data_param\n    ])\n\n    # target is log-loss\n    logy = np.log(y)\n\n    # compute ridge regularization parameter based on trace of Gram matrix\n    G = design.T.dot(design)\n    dim = G.shape[0]\n    trace_G = np.trace(G)\n    lambda_reg = 1e-6 * (trace_G / dim)\n\n    # build regularizer (do not penalize intercept at index 0)\n    I = np.eye(dim, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve (G + \u03bb I) p = X^T logy\n    A = G + lambda_reg * I\n    b = design.T.dot(logy)\n    params = np.linalg.solve(A, b)\n\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}