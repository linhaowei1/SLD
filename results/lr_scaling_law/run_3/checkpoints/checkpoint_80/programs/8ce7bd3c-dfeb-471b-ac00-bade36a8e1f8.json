{"id": "8ce7bd3c-dfeb-471b-ac00-bade36a8e1f8", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features,\nincluding all pairwise interactions and an extra cubic term on the learning rate:\n    log(y_pred) = c0\n                + \u03a3_i c1_i\u00b7log(x_i)\n                + \u03a3_i c2_i\u00b7[log(x_i)]^2\n                + \u03a3_{i<j} c3_{ij}\u00b7[log(x_i)\u00b7log(x_j)]\n                + c4\u00b7[log(lr)]^3\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via weighted, closed\u2010form ridge regression in the log\u2010domain:\n  - Samples weighted to emphasize large model & data scales\n  - Differential regularization on linear, quadratic, interaction, and cubic terms\n\"\"\"\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build design matrix \u03a6 for polynomial expansion in log\u2010features.\n    Inputs:\n      logX: array (N,4) of log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Outputs:\n      Phi:  array (N,16) with columns:\n            [1,\n             logX[:,0..3],\n             (logX[:,0..3])**2,\n             pairwise products logX[i]*logX[j] for i<j,\n             (logX[:,0])**3 ]\n    \"\"\"\n    N, F = logX.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features in logX, got {F}\")\n    # total parameters: 1 intercept + 4 linear + 4 quadratic + 6 interactions + 1 cubic = 16\n    P = 1 + F + F + (F*(F-1)//2) + 1\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # cubic term for log(lr)\n    Phi[:, idx] = logX[:, 0]**3\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via enhanced scaling\u2010law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4):\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 16: model coefficients.\n\n    Returns:\n      y_pred: 1D array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # build design matrix\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    Phi = _build_design_matrix(logX)  # (N,16)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling\u2010law via weighted, closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 16 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.size != N:\n        raise ValueError(\"Mismatched shapes for data_points and loss_values\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)      # (N,4)\n    logy = np.log(y_safe)      # (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # (N,16)\n    P = Phi.shape[1]\n\n    # sample weights: emphasize large\u2010scale configs\n    # w_i = exp(0.5 * ((log data_size + log param_size) - median(...)))\n    prod_scale = logX[:, 2] + logX[:, 3]\n    median_scale = np.median(prod_scale)\n    w = np.exp(0.5 * (prod_scale - median_scale))  # (N,)\n\n    # weighted normal equations\n    # A = \u03a6\u1d40 W \u03a6, b = \u03a6\u1d40 (W logy)\n    W_phi = Phi * w[:, np.newaxis]\n    A = Phi.T.dot(W_phi)                    # (16,16)\n    b = Phi.T.dot(logy * w)                 # (16,)\n\n    # differential ridge regularization\n    # no penalty on intercept (0)\n    # gentle penalty on linear [1:5), quad [5:9), interaction [9:15), cubic [15]\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n    ridge_cubic = 1e-3\n\n    # indices\n    idx_lin   = range(1, 1+F)                             # 1..4\n    idx_quad  = range(1+F, 1+2*F)                         # 5..8\n    idx_inter = range(1+2*F, 1+2*F + (F*(F-1)//2))        # 9..14\n    idx_cubic = [P-1]                                     # 15\n\n    for i in idx_lin:\n        A[i, i] += ridge_lin\n    for i in idx_quad:\n        A[i, i] += ridge_quad\n    for i in idx_inter:\n        A[i, i] += ridge_inter\n    for i in idx_cubic:\n        A[i, i] += ridge_cubic\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7f6dd939-5e52-48f3-9226-3be16f8801a1", "generation": 4, "timestamp": 1754808345.9340067, "iteration_found": 75, "metrics": {"nmse": 0.46914370889294404, "nmae": 0.746284100897161, "r2": 0.530856291107056, "combined_score": 0.6806686057646044}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4375628979305829, "nmae": 0.6957091062837715, "r2": 0.5624371020694171, "combined_score": 0.6956217369268026}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4376\n- nmae: 0.6957\n- r2: 0.5624\n- combined_score: 0.6956\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4371, nmae: 0.6928, r2: 0.5629, combined_score: 0.6958\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4062, nmae: 0.6893, r2: 0.5938, combined_score: 0.7111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6001)\n```python\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe continue to model the loss in the log\u2010domain as a 2nd\u2010order polynomial\nin the log\u2010features but employ a weighted ridge\u2010regression that\nemphasizes samples with large model and dataset scales (to better\ngeneralize on the held\u2010out \u201clargest\u201d configurations).\n\nFeatures: [lr, bsz, data_size, non_embedding_param_size].\nModel coefficients: length = 1 (intercept) \n                 + 4 (linear) \n                 + 4 (quadratic) \n                 + 6 (pairwise) \n                 = 15 parameters.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in log\u2010features.\n    Inputs:\n      logX: array (N, F) of log\u2010features.\n    Output:\n      Phi:  array (N, P) with P = 1 + F + F + F*(F-1)//2\n           = intercept + linear + quadratic + pairwise.\n    \"\"\"\n    N, F = logX.shape\n    # total number of columns\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=float)\n\n    # linear terms\n    Phi[:, 1 : 1 + F] = logX\n\n    # quadratic terms: (log x_i)^2\n    start_q = 1 + F\n    Phi[:, start_q : start_q + F] = logX * logX\n\n    # pairwise interactions: log x_i * log x_j for i<j\n    idx = start_q + F\n    for i in range(F):\n        for j in range(i + 1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Clip inputs to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n\n    # Predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted ridge regression.\n\n    We weight each sample i by:\n        w_i = exp(0.5 * ((log data_size_i + log param_size_i) - median))\n    to emphasize large\u2010scale configurations.\n    Regularization \u03bb=1e-6 applied on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Clip to avoid log issues\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # Log transforms\n    logX = np.log(X_clipped)      # shape (N,4)\n    logy = np.log(y_clipped)      # shape (N,)\n\n    # Build design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n\n    # Compute sample weights based on dataset & model scale\n    # w_i = exp( 0.5 * ( (log data_size + log param_size) - median(...) ) )\n    log_ds = logX[:, 2]\n    log_ps = logX[:, 3]\n    prod_log = log_ds + log_ps\n    median_prod = np.median(prod_log)\n    w = np.exp(0.5 * (prod_log - median_prod))  # shape (N,)\n\n    # Weighted ridge regression\n    ridge = 1e-6\n    # A = Phi^T W Phi\n    A = Phi.T.dot(Phi * w[:, np.newaxis])\n    # regularize all but intercept (index 0)\n    A[1:, 1:] += ridge\n    # b = Phi^T (W logy)\n    b = Phi.T.dot(logy * w)\n\n    # Solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4062), Performs well on nmae (0.6893), Performs well on r2 (0.5938), Performs well on combined_score (0.7111)\n\n\n### Program 3 (Score: 0.5972)\n```python\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features,\nincluding all pairwise interactions and a cubic term for the learning rate\nto capture asymmetry in optimization dynamics:\n\n    log(y_pred) = c0\n                + \u03a3_i c1_i * log(x_i)\n                + \u03a3_i c2_i * (log(x_i))^2\n                + \u03a3_{i<j} c3_{ij} * (log(x_i) * log(x_j))\n                + c4 * (log(lr))^3\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit this model via closed\u2010form ridge\u2010regularized least squares with\nblock\u2010wise penalties for numerical stability and cross\u2010feature generalization.\n\"\"\"\n\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build the design matrix for our polynomial expansion in the log\u2010domain.\n    \n    Inputs:\n      logX: array of shape (N,4) containing log([lr, bsz, data_size, param_size])\n    \n    Outputs:\n      Phi: array of shape (N,16):\n           [1,\n            log(x)_1, ..., log(x)_4,\n            log(x)_1^2, ..., log(x)_4^2,\n            log(x)_1\u00b7log(x)_2, ..., log(x)_3\u00b7log(x)_4,\n            (log(x)_1)^3]\n    \"\"\"\n    N, F = logX.shape\n    if F != 4:\n        raise ValueError(f\"Expected logX with 4 features, got {F}\")\n    # total parameters: 1 + 4 linear + 4 quadratic + 6 interactions + 1 cubic(lr) = 16\n    P = 1 + F + F + (F*(F-1)//2) + 1\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # cubic term for log(lr) (feature 0)\n    Phi[:, idx] = logX[:, 0]**3\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via our refined scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 16 of model coefficients.\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    # expected parameter count = 16\n    if p.size != 16:\n        raise ValueError(f\"Expected 16 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the refined scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 16 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX)\n    _, P = Phi.shape  # should be 16\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # block\u2010wise ridge penalties for stability and generalization\n    # no penalty on intercept (0)\n    # mild penalty on linear terms [1:5)\n    # moderate penalty on quadratic terms [5:9)\n    # stronger penalty on pairwise interactions [9:15)\n    # moderate penalty on cubic lr term [15]\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n    ridge_cubic = 1e-4\n\n    # linear indices: 1..4\n    idx_lin = np.arange(1, 1+F)\n    # quad indices: 5..8\n    idx_quad = np.arange(1+F, 1+2*F)\n    # cross indices: 9..14\n    idx_cross = np.arange(1+2*F, 1+2*F + (F*(F-1)//2))\n    # cubic lr index: last\n    idx_cubic = [P - 1]\n\n    # apply penalties\n    for i in idx_lin:\n        A[i, i] += ridge_lin\n    for i in idx_quad:\n        A[i, i] += ridge_quad\n    for i in idx_cross:\n        A[i, i] += ridge_cross\n    for i in idx_cubic:\n        A[i, i] += ridge_cubic\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.4371), Performs well on nmae (0.6928), Performs well on r2 (0.5629), Performs well on combined_score (0.6958)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_log_polynomial_features(logX):\n    \"\"\"\n    Build a design matrix for a 2nd\u2010order polynomial in the log\u2010domain with interactions.\n    Input:\n      logX: array of shape (N,4) containing log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Output:\n      Phi:  array of shape (N,15) with columns\n            [1,\n             logX[:,0], logX[:,1], logX[:,2], logX[:,3],\n             logX[:,0]**2, ..., logX[:,3]**2,\n             logX[:,0]*logX[:,1], logX[:,0]*logX[:,2], ..., logX[:,2]*logX[:,3]\n            ]\n    \"\"\"\n    N, F = logX.shape\n    # number of parameters: 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010polynomial scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred: 1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    expected_P = 1 + F + F + (F*(F-1))//2\n    if p.size != expected_P:\n        raise ValueError(f\"Expected {expected_P} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_log_polynomial_features(logX)  # shape (N,15)\n    log_y_pred = Phi.dot(p)                     # shape (N,)\n\n    return np.exp(log_y_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes align\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor inputs/outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # build design matrix\n    Phi = _build_log_polynomial_features(logX)  # shape (N,15)\n    P = Phi.shape[1]\n\n    # ridge\u2010regularized normal equations\n    A = Phi.T.dot(Phi)                           # shape (15,15)\n    b = Phi.T.dot(logy)                          # shape (15,)\n\n    # apply a small ridge penalty on all but the intercept\n    ridge = 1e-6\n    idx = np.arange(1, P)\n    A[idx, idx] += ridge\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = c0\n              + \u2211_{i} c1_i log x_i\n              + \u2211_{i} c2_i (log x_i)^2\n              + \u2211_{i<j} c3_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit this via ridge\u2010regularized linear regression in closed\u2010form,\nusing stronger regularization on higher\u2010order terms to improve\ncross\u2010configuration generalization and numerical stability.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_log_polynomial_features(logX):\n    \"\"\"\n    Given log-transformed features logX of shape (N,4), build the design matrix Phi\n    for the intercept, linear, quadratic, and pairwise interaction terms.\n    Returns Phi of shape (N,15).\n    \"\"\"\n    N, F = logX.shape\n    # total parameters: 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    start = 1\n    Phi[:, start:start+F] = logX\n    start += F\n    # quadratic terms\n    Phi[:, start:start+F] = logX**2\n    start += F\n    # pairwise interaction terms\n    idx = start\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F * (F - 1)) // 2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict\n    Phi = _build_log_polynomial_features(logX)\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    We apply differential regularization:\n      - small ridge on linear terms\n      - moderate ridge on quadratic terms\n      - stronger ridge on interaction terms\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # build design matrix\n    Phi = _build_log_polynomial_features(logX)\n    _, P = Phi.shape  # P should be 15\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # differential ridge regularization\n    # indices for parameter blocks\n    idx_lin = slice(1, 1+F)               # linear terms\n    idx_quad = slice(1+F, 1+2*F)          # quadratic terms\n    idx_inter = slice(1+2*F, P)           # interaction terms\n\n    # regularization strengths\n    ridge_lin = 1e-6      # gentle on linear\n    ridge_quad = 1e-4     # moderate on quadratic\n    ridge_inter = 1e-2    # stronger on interactions\n\n    # apply ridge: only on diagonal\n    # linear\n    for i in range(idx_lin.start, idx_lin.stop):\n        A[i, i] += ridge_lin\n    # quadratic\n    for i in range(idx_quad.start, idx_quad.stop):\n        A[i, i] += ridge_quad\n    # interactions\n    for i in range(idx_inter.start, idx_inter.stop):\n        A[i, i] += ridge_inter\n\n    # solve\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a\n    2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p1_bsz, p1_data, p1_param,\n                    p2_lr, p2_bsz, p2_data, p2_param,\n                    p3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    # [1,\n    #  L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    We solve for parameters p in\n      log(y) \u2248 \u03a6 p,\n    with ridge penalty on all but the intercept.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log of zero\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # closed\u2010form ridge: (\u03a6\u1d40\u03a6 + \u03bb\u00b7I\u208d\u2081:\u208e) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal entries except the intercept (index 0)\n    diag_idx = np.arange(1, A.shape[0])\n    A[diag_idx, diag_idx] += ridge\n\n    b = Phi.T.dot(logy)\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law model for LLM training hyperparameters.\nWe fit a log\u2010linear power law with an asymptotic loss floor:\n   y_pred = y_inf + A * P^{\u03b11} * D^{\u03b12} * bsz^{\u03b13} * lr^{\u03b14}\nParameters are reparameterized for numerical stability:\n   logA, \u03b11\u2026\u03b14, log(y_inf) \n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters.\n    data_points: (N,4) array columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      array of length 6 or shape (T,6):\n                 [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    Returns:\n      y_pred: shape (N,) if single param set or (N, T) for multiple sets.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features per point, got {F}\")\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # compute predictions\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        A     = np.exp(logA)\n        y_inf = np.exp(log_yinf)\n        # power-law term\n        term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n        y_all[:, t] = y_inf + term\n    # return shape (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n    Returns optimized parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # initial guesses\n    min_y = max(np.min(y), 1e-6)\n    init_logA      = 0.0\n    init_alphas    = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    init_log_yinf  = np.log(min_y * 0.1 + 1e-8)\n    p0 = np.concatenate([[init_logA], init_alphas, [init_log_yinf]])\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial if optimization fails\n    return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.8378, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants (mid\u2010range of typical training hyperparameters)\n_P0 = 1e8        # ~1e8 non\u2010embedding parameters\n_D0 = 1e10       # ~1e10 training tokens\n_BSZ0 = 512.0    # batch size\n_LR0 = 1e-3      # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter power\u2010law with offset:\n      y_pred = y_inf + A * (P/_P0)^a_P * (D/_D0)^a_D * (bsz/_BSZ0)^a_bsz * (lr/_LR0)^a_lr\n\n    Inputs:\n      data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array (T,6)\n                   order: [logA, a_P, a_D, a_bsz, a_lr, y_inf]\n\n    Returns:\n      y_pred: array (N,) if params is 1D or (N,T) if params is 2D\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points shape (_,4), got {X.shape}\")\n    # unpack and normalize features\n    lr   = X[:, 0] / LR0 if False else X[:, 0]  # dummy to appease linter\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 6:\n        raise ValueError(f\"Expected params with length 6, got shape {p.shape}\")\n    # unpack parameters\n    logA   = p[:, 0]   # shape (T,)\n    aP     = p[:, 1]\n    aD     = p[:, 2]\n    aB     = p[:, 3]\n    aL     = p[:, 4]\n    y_inf  = p[:, 5]\n\n    # compute the multiplicative term in log\u2010space then exponentiate\n    # shape manipulations to get broadcasting (N,T)\n    term = (\n        np.exp(logA)[None, :] *\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # if only one parameter set, return shape (N,)\n    return y_pred[:, 0] if y_pred.shape[1] == 1 else y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE in the original loss space.\n\n    Returns parameter vector of length 6:\n      [logA, a_P, a_D, a_bsz, a_lr, y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and losses must match.\")\n    # avoid non\u2010positive values\n    y = np.maximum(y, 1e-12)\n\n    # initial y_inf near the minimum observed loss\n    y_min = np.min(y)\n    init_yinf = y_min * 0.5\n    # initial A from average residual\n    avg_term = np.mean(np.maximum(y - init_yinf, 1e-12))\n    init_logA = np.log(avg_term)\n    # weak negative exponents as a starting point\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    # parameter order: logA, a_P, a_D, a_bsz, a_lr, y_inf\n    p0 = np.concatenate([ [init_logA], init_alphas, [init_yinf] ])\n\n    # bounds: logA free, exponents in [-5,5], y_inf in [0, y_min]\n    bnds = [\n        (None, None),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (0.0, y_min)\n    ]\n\n    # objective: MSE in original loss space\n    def _objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.779), Excellent nmae (2.087)\n\n\n### Inspiration 4 (Score: 0.5981, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a second\u2010order polynomial in the log of each feature:\n    log y = \u03b20\n            + \u03a3_i \u03b2_i * log x_i\n            + \u03a3_i \u03b3_i * (log x_i)^2\n            + \u03a3_{i<j} \u03b4_{ij} * (log x_i * log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via closed\u2010form ridge regression for stability and numerical efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain quadratic model.\n\n    Args:\n      data_points: array of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [\u03b20,\n                    \u03b2_lr, \u03b2_bsz, \u03b2_data, \u03b2_param,\n                    \u03b3_lr2, \u03b3_bsz2, \u03b3_data2, \u03b3_param2,\n                    \u03b4_lr_bsz, \u03b4_lr_data, \u03b4_lr_param,\n                    \u03b4_bsz_data, \u03b4_bsz_param, \u03b4_data_param]\n\n    Returns:\n      y_pred: array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # avoid zero or negative before log\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)  # shape (N,4)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters but got {p.size}\")\n\n    # Build design matrix \u03a6 of shape (N, 15)\n    Phi = np.empty((N, P_expected), dtype=float)\n    # intercept\n    Phi[:, 0] = 1.0\n    # linear terms\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    # squared terms\n    for i in range(F):\n        Phi[:, idx] = logX[:, i] ** 2\n        idx += 1\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # linear model in log domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010domain quadratic scaling law via ridge regression.\n\n    Args:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: 1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Mismatched number of data points and losses.\")\n\n    # floor to avoid log issues\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)\n    logy = np.log(y)\n    N, F = logX.shape\n\n    # number of parameters: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n\n    # Build design matrix \u03a6\n    Phi = np.empty((N, P), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        Phi[:, idx] = logX[:, i] ** 2\n        idx += 1\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # Ridge regularization\n    ridge = 1e-3\n    A = Phi.T.dot(Phi)\n    # apply ridge on all but intercept\n    diag_indices = np.diag_indices(P)\n    A[diag_indices] += ridge\n    A[0, 0] -= ridge  # no penalty on intercept\n\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 1.3280, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training:\nWe model log(loss) as a low\u2010order polynomial in the log of each feature,\nincluding pairwise interactions, and fit via closed\u2010form ridge regression\nfor stability and efficiency.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain polynomial.\n\n    data_points: array of shape (N,4) with columns\n                 [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length P = 1 + 4 + 4*3/2 = 11\n                 weights for [intercept,\n                              log(lr), log(bsz), log(data_size), log(non_embedding_param_size),\n                              all pairwise products of those 4 logs]\n    Returns:     array of shape (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-transform each feature\n    logX = np.log(X)                          # shape (N,4)\n    N, F = logX.shape\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters: intercept + F main effects + F*(F-1)/2 interactions\n    P_expected = 1 + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), dtype=float)\n    # main effects\n    Phi[:, 1:1+F] = logX\n    # pairwise interactions\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log-domain polynomial scaling law via ridge regression.\n\n    data_points: array of shape (N,4)\n    loss_values: array of shape (N,)\n    Returns:      1D array of learned parameters of length 11.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float)\n    # floor inputs and outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # log-transform\n    logX = np.log(X)          # shape (N,4)\n    logy = np.log(y)          # shape (N,)\n    N, F = logX.shape\n    # number of parameters: intercept + F main + F*(F-1)/2 interactions\n    P = 1 + F + (F*(F-1))//2\n    # build design matrix Phi\n    Phi = np.ones((N, P), dtype=float)\n    Phi[:, 1:1+F] = logX\n    idx = 1 + F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-8\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal except intercept term\n    A[np.diag_indices(P)] += ridge\n    A[0, 0] -= ridge  # remove penalty on bias\n    b = Phi.T.dot(logy)\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (11.586), Excellent nmae (4.232)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved second\u2010order log\u2010domain polynomial scaling law for LLM training hyperparameters.\n\nWe model:\n    log(loss) \u2248 \u03b20\n              + \u2211_{i=1..4} \u03b2_i\u00b7log(x_i)\n              + \u2211_{i=1..4} \u03b3_i\u00b7[log(x_i)]^2\n              + \u2211_{1\u2264i<j\u22644} \u03b4_{ij}\u00b7log(x_i)\u00b7log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nTotal parameters: 1 + 4 + 4 + 6 = 15. We fit via closed\u2010form ridge regression\nin the log\u2010domain for numerical stability and cross\u2010configuration generalization.\n\"\"\"\n\ndef _build_design_matrix(X):\n    \"\"\"\n    Build the design matrix \u03a6 for the 2nd\u2010order polynomial in log\u2010features.\n    X: (N,4) array of positive hyperparameter values.\n    Returns: \u03a6 of shape (N,15).\n    \"\"\"\n    # ensure positivity to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)               # (N,4)\n    N, F = logX.shape              # F must be 4 here\n    # total parameters: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2   # 15 for F=4\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 2nd\u2010order log\u2010domain polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 (or shape (15,)): polynomial coefficients.\n\n    Returns:\n      y_pred:      1D array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_exp = 1 + F + F + (F*(F-1))//2\n    if p.size != P_exp:\n        raise ValueError(f\"Expected {P_exp} parameters, got {p.size}\")\n    # build design matrix and predict\n    Phi = _build_design_matrix(X)        # (N,15)\n    log_pred = Phi.dot(p)                # (N,)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010domain polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # handle single\u2010point input\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # floor to avoid log(0) / negative\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    # build design matrix and log\u2010target\n    Phi = _build_design_matrix(X)        # (N,15)\n    logy = np.log(y)                     # (N,)\n    # ridge regularization (no penalty on intercept)\n    ridge = 1e-4\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)                   # (15,15)\n    # apply ridge to diagonal entries 1..14\n    idx = np.arange(1, P)\n    A[idx, idx] += ridge\n    b = Phi.T.dot(logy)                  # (15,)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a 2nd\u2010order polynomial in the log\u2010features,\nincluding all pairwise interactions and an extra cubic term on the learning rate:\n    log(y_pred) = c0\n                + \u03a3_i c1_i\u00b7log(x_i)\n                + \u03a3_i c2_i\u00b7[log(x_i)]^2\n                + \u03a3_{i<j} c3_{ij}\u00b7[log(x_i)\u00b7log(x_j)]\n                + c4\u00b7[log(lr)]^3\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via weighted, closed\u2010form ridge regression in the log\u2010domain:\n  - Samples weighted to emphasize large model & data scales\n  - Differential regularization on linear, quadratic, interaction, and cubic terms\n\"\"\"\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build design matrix \u03a6 for polynomial expansion in log\u2010features.\n    Inputs:\n      logX: array (N,4) of log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Outputs:\n      Phi:  array (N,16) with columns:\n            [1,\n             logX[:,0..3],\n             (logX[:,0..3])**2,\n             pairwise products logX[i]*logX[j] for i<j,\n             (logX[:,0])**3 ]\n    \"\"\"\n    N, F = logX.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features in logX, got {F}\")\n    # total parameters: 1 intercept + 4 linear + 4 quadratic + 6 interactions + 1 cubic = 16\n    P = 1 + F + F + (F*(F-1)//2) + 1\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # cubic term for log(lr)\n    Phi[:, idx] = logX[:, 0]**3\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via enhanced scaling\u2010law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4):\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 16: model coefficients.\n\n    Returns:\n      y_pred: 1D array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    # build design matrix\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    Phi = _build_design_matrix(logX)  # (N,16)\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} params, got {p.size}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling\u2010law via weighted, closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 16 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4 or y.size != N:\n        raise ValueError(\"Mismatched shapes for data_points and loss_values\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)      # (N,4)\n    logy = np.log(y_safe)      # (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # (N,16)\n    P = Phi.shape[1]\n\n    # sample weights: emphasize large\u2010scale configs\n    # w_i = exp(0.5 * ((log data_size + log param_size) - median(...)))\n    prod_scale = logX[:, 2] + logX[:, 3]\n    median_scale = np.median(prod_scale)\n    w = np.exp(0.5 * (prod_scale - median_scale))  # (N,)\n\n    # weighted normal equations\n    # A = \u03a6\u1d40 W \u03a6, b = \u03a6\u1d40 (W logy)\n    W_phi = Phi * w[:, np.newaxis]\n    A = Phi.T.dot(W_phi)                    # (16,16)\n    b = Phi.T.dot(logy * w)                 # (16,)\n\n    # differential ridge regularization\n    # no penalty on intercept (0)\n    # gentle penalty on linear [1:5), quad [5:9), interaction [9:15), cubic [15]\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n    ridge_cubic = 1e-3\n\n    # indices\n    idx_lin   = range(1, 1+F)                             # 1..4\n    idx_quad  = range(1+F, 1+2*F)                         # 5..8\n    idx_inter = range(1+2*F, 1+2*F + (F*(F-1)//2))        # 9..14\n    idx_cubic = [P-1]                                     # 15\n\n    for i in idx_lin:\n        A[i, i] += ridge_lin\n    for i in idx_quad:\n        A[i, i] += ridge_quad\n    for i in idx_inter:\n        A[i, i] += ridge_inter\n    for i in idx_cubic:\n        A[i, i] += ridge_cubic\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}