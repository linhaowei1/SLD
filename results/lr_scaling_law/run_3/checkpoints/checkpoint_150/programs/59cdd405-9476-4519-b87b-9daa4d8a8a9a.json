{"id": "59cdd405-9476-4519-b87b-9daa4d8a8a9a", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a compact\n    10-parameter 2nd-order log-polynomial scaling law:\n\n      log(y_pred) = p0\n                   + p1 * log(lr)\n                   + p2 * log(bsz)\n                   + p3 * log(data_size)\n                   + p4 * log(non_embedding_param_size)\n                   + p5 * [log(lr)]^2\n                   + p6 * [log(bsz)]^2\n                   + p7 * [log(data_size)]^2\n                   + p8 * [log(non_embedding_param_size)]^2\n                   + p9 * (log(data_size) * log(non_embedding_param_size))\n\n    After computing log(y_pred), we exponentiate to return y_pred.\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients\n                   [p0, p1, \u2026, p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N \u00d7 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # predict in log-domain and back-transform\n    log_y_pred = Phi.dot(p)\n    return np.exp(log_y_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via\n    ridge-regularized closed-form regression in the log-domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected input with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match in length\")\n\n    # floor inputs/outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform features and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N \u00d7 10) consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "ecfd9f38-fac3-41a2-ba1d-578b12f1b92e", "generation": 3, "timestamp": 1754808512.6056411, "iteration_found": 88, "metrics": {"nmse": 0.386893500186614, "nmae": 0.736398522018268, "r2": 0.6131064998133859, "combined_score": 0.7210358977567092}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.7851840742215663, "nmae": 1.6624676768489157, "r2": -0.7851840742215663, "combined_score": 0.3590426964075941}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7852\n- nmae: 1.6625\n- r2: -0.7852\n- combined_score: 0.3590\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4371, nmae: 0.6928, r2: 0.5629, combined_score: 0.6958\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 2nd-order log-polynomial scaling law:\n      log y = p0\n              + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n              + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n              + p9*(L_data * L_param)\n    where L_x = log(x). We then exponentiate to return y.\n    Inputs:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients [p0\u2026p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D with shape (N,4)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: [1, linear terms, quadratic terms, cross-term]\n    N = X.shape[0]\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # linear model in log-domain\n    log_pred = Phi.dot(p)\n    # back to original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain.\n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge-regularized normal equations: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept coefficients\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.5972)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling\u2010law model for LLM training hyperparameters.\n\nWe model log(loss) as a second\u2010order polynomial in the log of each feature,\nplus a cubic term for learning\u2010rate to capture asymmetry:\n\n    log y \u2248 \u03b20\n          + \u03a3_i \u03b2_i * log x_i\n          + \u03a3_i \u03b3_i * (log x_i)^2\n          + \u03a3_{i<j} \u03b4_{ij} * (log x_i * log x_j)\n          + \u03ba * (log lr)^3\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via closed\u2010form ridge regression (excluding intercept penalty)\nfor stability and numerical efficiency.\n\"\"\"\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix \u03a6 from log\u2010features with\n    - intercept\n    - linear terms\n    - squared terms\n    - pairwise cross terms\n    - cubic term for the first feature (learning\u2010rate)\n    \"\"\"\n    N, F = logX.shape\n    # total params: 1 + F + F + F*(F-1)/2 + 1(cubic lr)\n    P = 1 + F + F + (F*(F-1))//2 + 1\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    # cubic term for learning rate (feature 0)\n    Phi[:, idx] = logX[:, 0]**3\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from [lr, bsz, data_size, non_embedding_param_size]\n    using the learned polynomial in log\u2010domain with a cubic lr term.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    # build \u03a6\n    Phi = _build_design_matrix(logX)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.shape[0]}\")\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above model by ridge\u2010regularized closed-form solution in log\u2010domain.\n    Excludes intercept from penalty for unbiased baseline.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match.\")\n    # floor to avoid log issues\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n    logX = np.log(X)\n    logy = np.log(y)\n    # design matrix\n    Phi = _build_design_matrix(logX)   # shape (N, P)\n    P = Phi.shape[1]\n    # normal equations with ridge\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n    # ridge regularization parameter\n    ridge = 1e-6\n    # apply ridge to all except intercept (index 0)\n    diag = np.arange(P)\n    A[diag, diag] += ridge\n    A[0, 0] -= ridge\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4371), Performs well on nmae (0.6928), Performs well on r2 (0.5629), Performs well on combined_score (0.6958)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the log\u2010domain.\n    Input:\n      logX: shape (N,4) array of log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Output:\n      Phi:  shape (N,15) design matrix with columns\n            [1,\n             z1, z2, z3, z4,\n             z1^2, z2^2, z3^2, z4^2,\n             z1\u00b7z2, z1\u00b7z3, z1\u00b7z4, z2\u00b7z3, z2\u00b7z4, z3\u00b7z4]\n    \"\"\"\n    N, F = logX.shape\n    # total parameters: 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial model.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)  # shape (N,4)\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    log_pred = Phi.dot(p)             # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via closed\u2010form ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)  # shape (N,4)\n    logy = np.log(y_safe)  # shape (N,)\n\n    # build design matrix\n    P = 1 + F + F + (F*(F-1))//2  # 15\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n\n    # normal equations\n    A = Phi.T.dot(Phi)\n    b = Phi.T.dot(logy)\n\n    # block\u2010wise ridge regularization:\n    #   small penalty on linear terms, moderate on quadratics, stronger on interactions\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n\n    # indices\n    idx_lin   = slice(1, 1 + F)\n    idx_quad  = slice(1 + F, 1 + 2*F)\n    idx_inter = slice(1 + 2*F, P)\n\n    # apply ridge penalties\n    A[idx_lin,   idx_lin]   += ridge_lin\n    A[idx_quad,  idx_quad]  += ridge_quad\n    A[idx_inter, idx_inter] += ridge_inter\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd-order polynomial design matrix in log-features:\n      - intercept\n      - linear terms   (log x_i)\n      - quadratic terms (log x_i)^2\n      - pairwise interactions log x_i * log x_j for i<j\n    Input:\n      logX: (N,4) array\n    Output:\n      Phi:  (N,15) design matrix\n    \"\"\"\n    N, F = logX.shape\n    # number of terms: 1 + F + F + F*(F-1)/2 = 1 + 4 + 4 + 6 = 15\n    P = 1 + 2*F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd-order log-polynomial.\n\n    Args:\n      data_points: array-like of shape (N,4), columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients\n\n    Returns:\n      y_pred: 1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)\n    # build design matrix\n    Phi = _build_design_matrix(logX)    # shape (N,15)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != Phi.shape[1]:\n        raise ValueError(f\"Expected {Phi.shape[1]} parameters, got {p.size}\")\n    # predict in log-domain\n    logy_pred = Phi.dot(p)               # shape (N,)\n    return np.exp(logy_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd-order log-polynomial scaling law via closed-form\n    ridge-regularized regression with blockwise regularization.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor inputs/outputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    # build design matrix and normal equations\n    Phi = _build_design_matrix(logX)   # (N,15)\n    P = Phi.shape[1]\n\n    # unweighted normal equations: A p = b\n    A = Phi.T.dot(Phi)                 # (15,15)\n    b = Phi.T.dot(logy)                # (15,)\n\n    # blockwise ridge regularization (exclude intercept at index 0)\n    # linear terms indices: 1..4, quadratic: 5..8, interactions: 9..14\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n\n    # linear block\n    lin_slice  = slice(1, 1+F)\n    A[lin_slice, lin_slice] += ridge_lin * np.eye(F)\n    # quadratic block\n    quad_slice = slice(1+F, 1+2*F)\n    A[quad_slice, quad_slice] += ridge_quad * np.eye(F)\n    # interaction block\n    inter_slice = slice(1+2*F, P)\n    K = P - (1+2*F)\n    A[inter_slice, inter_slice] += ridge_inter * np.eye(K)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 1.2131, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a compact, 7-parameter\n    log-domain model:\n\n        z_lr      = log(lr)\n        z_bsz     = log(batch size)\n        z_data    = log(data size)\n        z_param   = log(non-embedding parameter size)\n\n        log(loss) = c0\n                   + c1 * z_param\n                   + c2 * z_data\n                   + c3 * z_bsz\n                   + c4 * z_lr\n                   + c5 * (z_lr)^2\n                   + c6 * (z_param * z_data)\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns: [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-7 vector [c0, c1\u2026c6]\n\n    Returns:\n      y_pred: array of length N of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0               # intercept\n    Phi[:, 1] = z_param           # model size effect\n    Phi[:, 2] = z_data            # data size effect\n    Phi[:, 3] = z_bsz             # batch size effect\n    Phi[:, 4] = z_lr              # linear lr effect\n    Phi[:, 5] = z_lr * z_lr       # quadratic lr term\n    Phi[:, 6] = z_param * z_data  # model\u00d7data interaction\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)         # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-domain model via ridge-regularized\n    least squares in closed form.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: length-7 numpy vector of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # compute log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # target in log-space\n    logy = np.log(y)\n\n    # closed-form ridge solve: (\u03a6\u1d40\u03a6 + \u03bbI\u2081:\u2087) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge * np.eye(6)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.789), Excellent nmae (3.750)\n\n\n### Inspiration 3 (Score: 0.8378, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants to center hyperparameter scales\n_P0 = 1e8        # typical non\u2010embedding parameter count\n_D0 = 1e10       # typical training token count\n_BSZ0 = 512.0    # typical batch size\n_LR0 = 1e-3      # typical learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a 6-parameter\n    power\u2010law with an additive floor:\n        y_pred = y_inf + A * (P/_P0)^aP * (D/_D0)^aD * (bsz/_BSZ0)^aB * (lr/_LR0)^aL\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size].\n      params:      length\u20106 vector (or shape (T,6)) of parameters\n                   [logA, aP, aD, aB, aL, y_inf].\n\n    Returns:\n      y_pred: numpy array of shape (N,) if params is 1D, or (N,T) if params is 2D.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n\n    # normalize features\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    T, Pcount = p.shape\n    if Pcount != 6:\n        raise ValueError(f\"Expected 6 parameters, got {Pcount}\")\n\n    # unpack parameters\n    logA = p[:, 0]    # log of amplitude\n    aP   = p[:, 1]    # exponent on model size\n    aD   = p[:, 2]    # exponent on data size\n    aB   = p[:, 3]    # exponent on batch size\n    aL   = p[:, 4]    # exponent on learning rate\n    y_inf = p[:, 5]   # asymptotic floor on loss\n\n    # compute power\u2010law term in a batched manner\n    # shape manipulations: (N,1) broadcast against (1,T)\n    term = (\n        np.exp(logA)[None, :] *\n        (P[:, None] ** aP[None, :]) *\n        (D[:, None] ** aD[None, :]) *\n        (bsz[:, None] ** aB[None, :]) *\n        (lr[:, None] ** aL[None, :])\n    )\n    y_pred = y_inf[None, :] + term\n\n    # return (N,) when only one parameter set, else (N,T)\n    return y_pred[:, 0] if T == 1 else y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing mean squared error\n    in the original loss space using L-BFGS-B with bounds.\n\n    Returns:\n      params: array of length 6 [logA, aP, aD, aB, aL, y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non\u2010positive targets\n    y = np.maximum(y, 1e-12)\n\n    # initialize y_inf near half the minimum observed loss\n    y_min = np.min(y)\n    init_yinf = y_min * 0.5\n\n    # initialize logA from the average residual above y_inf\n    residual = np.maximum(y - init_yinf, 1e-12)\n    init_logA = np.log(np.mean(residual))\n\n    # weak negative exponents as a starting point\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n\n    # initial parameter vector\n    p0 = np.concatenate([[init_logA], init_alphas, [init_yinf]])\n\n    # bounds: logA free, each exponent in [-5,5], y_inf in [0, y_min]\n    bounds = [(None, None)] + [(-5.0, 5.0)]*4 + [(0.0, y_min)]\n\n    def _objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y)**2)\n\n    result = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n\n    return result.x if result.success else p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.779), Excellent nmae (2.087)\n\n\n### Inspiration 4 (Score: 0.5978, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model log\u2010loss as a second\u2010order polynomial in the log\u2010domain of each feature,\nincluding cross\u2010terms, and fit via ridge\u2010regularized closed\u2010form regression.\n\nModel:\n    log(y_pred) = c0\n                + sum_i c1_i * log(x_i)\n                + sum_i c2_i * (log(x_i))^2\n                + sum_{i<j} c3_{ij} * log(x_i) * log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nThis form balances flexibility (capturing curvature and interactions) with\nparameter efficiency (15 coefficients) and numerical stability (ridge regularization).\n\"\"\"\nimport numpy as np\n\ndef _build_log_polynomial_features(logX):\n    \"\"\"\n    Given log-transformed features logX of shape (N,4), build the design matrix Phi\n    for the intercept, linear, quadratic, and pairwise interaction terms.\n    \n    Returns Phi of shape (N, 15).\n    \"\"\"\n    N, F = logX.shape\n    # 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.empty((N, P), dtype=float)\n    \n    # Intercept\n    Phi[:, 0] = 1.0\n    \n    # Linear terms\n    start = 1\n    Phi[:, start:start+F] = logX\n    start += F\n    \n    # Quadratic terms\n    Phi[:, start:start+F] = logX**2\n    start += F\n    \n    # Pairwise interaction terms\n    idx = start\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    \n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via the fitted scaling law.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n    \n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    \n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.shape[0] != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.shape[0]}\")\n    \n    # Avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    \n    # Build design matrix and predict\n    Phi = _build_log_polynomial_features(logX)\n    log_y_pred = Phi.dot(p)\n    return np.exp(log_y_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    \n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected 4 features, got {X.shape[1]}\")\n    \n    # Floor inputs and outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # Log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    \n    # Build design matrix (N \u00d7 15)\n    Phi = _build_log_polynomial_features(logX)\n    \n    # Ridge\u2010regularized normal equations\n    # A = Phi^T Phi + \u03bb I (only on non\u2010intercept)\n    # b = Phi^T logy\n    lam = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on diagonal except intercept term\n    diag = np.arange(1, A.shape[0])\n    A[diag, diag] += lam\n    b = Phi.T.dot(logy)\n    \n    # Solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 1.0382, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a 6-parameter power\u2010law model\n    with an asymptotic loss floor.\n\n    Model:\n      y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_lr\n\n    where:\n      - lr: learning rate\n      - bsz: batch size\n      - D: data_size (training tokens)\n      - P: non_embedding_param_size\n\n    Parameters:\n      data_points: array\u2010like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 6:\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred:      1D np.ndarray of length N of predicted LM losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n\n    # Unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p\n    A      = np.exp(logA)\n    y_inf  = np.exp(log_yinf)\n\n    # Unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # Compute power\u2010law term\n    term = A * (Psize ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n    y_pred = y_inf + term\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power\u2010law scaling law with an asymptotic floor\n    by minimizing mean\u2010squared error in the original loss space.\n\n    Returns:\n      params: 1D np.ndarray of length 6: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Floor outputs to avoid zeros\n    y = np.maximum(y, 1e-12)\n    min_y = np.min(y)\n\n    # Initial guesses\n    # y_inf starts near 10% of the minimum observed loss\n    init_log_yinf = np.log(min_y * 0.1 + 1e-12)\n    # A such that median(term) \u2248 median(y - y_inf)\n    init_logA = np.log(max(np.median(y) - np.exp(init_log_yinf), 1e-12))\n    # Exponent guesses start at zero (no scale dependence)\n    init_alphas = np.zeros(4, dtype=float)\n    p0 = np.hstack([init_logA, init_alphas, init_log_yinf])\n\n    # Bounds for stability\n    #   logA \u2208 [-10, 10]\n    #   \u03b1_*  \u2208 [-5, 5]\n    #   log_y_inf \u2208 [-20, log(min_y)]\n    bounds = [(-10, 10)] + [(-5, 5)] * 4 + [(-20, np.log(min_y))]\n\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess if optimization fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (5.693), Excellent nmae (3.003)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved scaling law model for LLM training hyperparameters.\n\nWe model the LM loss as\n\n    y_pred = y_inf + A * (P / P0)^\u03b1_P * (D / D0)^\u03b1_D * (bsz / BSZ0)^\u03b1_bsz * (lr / LR0)^\u03b1_lr\n\nwhere\n  - P  = non\u2010embedding parameter count\n  - D  = training data size (tokens)\n  - bsz = batch size\n  - lr  = learning rate\n\nWe reparameterize A and y_inf in log\u2010space for numerical stability:\n    logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf\n\nFeatures are normalized by typical midpoint scales to avoid extremely large or small exponents.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Typical midpoint scales (chosen near the center of the training range)\n_P0   = 1e8        # ~1e8 non\u2010embedding parameters\n_D0   = 1e10       # ~1e10 training tokens\n_BSZ0 = 512.0      # batch size\n_LR0  = 1e-3       # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 6-parameter scaling law.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 OR 2D array of shape (T,6),\n                   in order [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns shape (N,),\n              if params is 2D (T sets), returns shape (N, T).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure at least 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float)\n    # allow evaluating multiple parameter sets at once\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {Pn}\")\n\n    # Unpack features and floor to avoid zero\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # Normalize\n    lr_n  = lr    / _LR0\n    bsz_n = bsz   / _BSZ0\n    D_n   = D     / _D0\n    P_n   = Psize / _P0\n\n    # Allocate output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # Compute for each parameter set\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # power\u2010law term\n        term = np.exp(logA) \\\n               * (P_n ** aP) \\\n               * (D_n ** aD) \\\n               * (bsz_n ** aB) \\\n               * (lr_n ** aL)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    # return (N,) if single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on the original losses.\n\n    Returns parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes match\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must match in length.\")\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n\n    # floor to avoid zeros or negatives\n    y_safe = np.maximum(y, 1e-12)\n\n    # initial guess for y_inf ~ 80% of min observed\n    y_min = np.min(y_safe)\n    y_inf0 = max(y_min * 0.8, 1e-8)\n    log_yinf0 = np.log(y_inf0)\n\n    # initial guess for A from average residual\n    avg_term = np.maximum(np.mean(y_safe - y_inf0), 1e-6)\n    logA0 = np.log(avg_term)\n\n    # initial exponents (weak negative scaling)\n    # [\u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    init_alphas = np.array([-0.4, -0.3, -0.1, -0.05], dtype=float)\n\n    # pack initial parameter vector\n    p0 = np.concatenate(([logA0], init_alphas, [log_yinf0]))\n\n    # bounds for parameters\n    # logA:    unrestricted\n    # \u03b1_P,\u03b1_D: in [-2,2]\n    # \u03b1_bsz,\u03b1_lr: in [-1,1]\n    # log_yinf: unrestricted\n    bnds = [\n        (None, None),\n        (-2.0, 2.0),\n        (-2.0, 2.0),\n        (-1.0, 1.0),\n        (-1.0, 1.0),\n        (None, None),\n    ]\n\n    # Objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe) ** 2)\n\n    # Run L-BFGS-B\n    res = minimize(\n        _obj,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a compact\n    10-parameter 2nd-order log-polynomial scaling law:\n\n      log(y_pred) = p0\n                   + p1 * log(lr)\n                   + p2 * log(bsz)\n                   + p3 * log(data_size)\n                   + p4 * log(non_embedding_param_size)\n                   + p5 * [log(lr)]^2\n                   + p6 * [log(bsz)]^2\n                   + p7 * [log(data_size)]^2\n                   + p8 * [log(non_embedding_param_size)]^2\n                   + p9 * (log(data_size) * log(non_embedding_param_size))\n\n    After computing log(y_pred), we exponentiate to return y_pred.\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of coefficients\n                   [p0, p1, \u2026, p9]\n    Returns:\n      y_pred:      1D numpy array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N \u00d7 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # predict in log-domain and back-transform\n    log_y_pred = Phi.dot(p)\n    return np.exp(log_y_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via\n    ridge-regularized closed-form regression in the log-domain.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      params:      1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected input with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match in length\")\n\n    # floor inputs/outputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform features and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N \u00d7 10) consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge-regularized normal equations: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}