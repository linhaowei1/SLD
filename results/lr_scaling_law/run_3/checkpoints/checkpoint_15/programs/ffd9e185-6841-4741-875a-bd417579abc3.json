{"id": "ffd9e185-6841-4741-875a-bd417579abc3", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nWe model:\n    loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nThis captures a multiplicative power\u2010law via the exp\u2010linear term,\nplus an additive floor (bias). We fit initial weights by linear\nregression in log\u2010space, then refine via robust nonlinear least\nsquares (Huber loss) for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via:\n      loss_pred = bias + exp(intercept + w^T log(X))\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    bias      = params[0]\n    intercept = params[1]\n    weights   = params[2:]                                        # (4,)\n    # avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                                      # (N,4)\n    lin_term = intercept + logX.dot(weights)                      # (N,)\n    # model output\n    return bias + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the model:\n      loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\n    by:\n      1) Initial ridge\u2010regularized linear fit in log\u2010space to get\n         intercept and weights.\n      2) Bias floor initialized to half the minimum observed loss.\n      3) Refinement via robust nonlinear least\u2010squares (Huber loss).\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features: [lr, bsz, data_size, param_size]\"\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    y_clamped = np.maximum(y, eps)\n\n    # build log\u2010space design matrix for initial linear regression\n    logX = np.log(X_clamped)               # (N,4)\n    logy = np.log(y_clamped)               # (N,)\n\n    # design matrix [1, logX]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack((ones, logX))       # (N,5)\n\n    # ridge regularization for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    sol = np.linalg.solve(A, b)            # (5,)\n\n    intercept0 = sol[0]\n    weights0   = sol[1:]                   # (4,)\n\n    # initialize bias floor to half the min observed loss (but at least eps)\n    bias0 = max(y.min() * 0.5, eps)\n\n    # initial parameter vector: [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    p0 = np.concatenate(([bias0, intercept0], weights0))\n\n    # residual function for robust least squares\n    def residuals(p):\n        bias_p      = p[0]\n        intercept_p = p[1]\n        w_p         = p[2:]\n        log_term = intercept_p + np.log(np.maximum(X, eps)).dot(w_p)\n        y_pred = bias_p + np.exp(log_term)\n        return y_pred - y\n\n    # refine with Huber loss for robustness\n    try:\n        result = least_squares(\n            residuals,\n            p0,\n            loss='huber',\n            f_scale=1.0,\n            max_nfev=1000,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8\n        )\n        p_opt = result.x if result.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b56bd7ce-e497-4567-8584-3350a1211382", "generation": 1, "timestamp": 1754717696.986129, "iteration_found": 9, "metrics": {"nmse": 0.42203473513337164, "nmae": 0.5815254794417888, "r2": 0.5779652648666284, "combined_score": 0.703217702981222}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 5.42512111103884e+23, "nmae": 755534900566.116, "r2": -5.42512111103884e+23, "combined_score": 1.8432768219040055e-24}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 542512111103883970871296.0000\n- nmae: 755534900566.1160\n- r2: -542512111103883970871296.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: Evaluation failed or timed out.\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 542512111103883970871296.0000, nmae: 755534900566.1160, r2: -542512111103883970871296.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 188883725141.5290)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nKey features: Performs well on nmse (542512111103883970871296.0000), Performs well on nmae (755534900566.1160), Performs well on r2 (-542512111103883970871296.0000), Performs well on combined_score (0.0000)\n\n\n### Program 2 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: Evaluation failed or timed out.)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nWe model:\n    loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nThis captures a multiplicative power\u2010law via the exp\u2010linear term,\nplus an additive floor (bias). We fit initial weights by linear\nregression in log\u2010space, then refine via robust nonlinear least\nsquares (Huber loss) for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via:\n      loss_pred = bias + exp(intercept + w^T log(X))\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    Returns:\n      preds: array of shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    bias      = params[0]\n    intercept = params[1]\n    weights   = params[2:]                                        # (4,)\n    # avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    logX = np.log(X_clamped)                                      # (N,4)\n    lin_term = intercept + logX.dot(weights)                      # (N,)\n    # model output\n    return bias + np.exp(lin_term)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the model:\n      loss \u2248 bias + exp(intercept + \u03a3_i w_i * log(x_i))\n    by:\n      1) Initial ridge\u2010regularized linear fit in log\u2010space to get\n         intercept and weights.\n      2) Bias floor initialized to half the minimum observed loss.\n      3) Refinement via robust nonlinear least\u2010squares (Huber loss).\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n    Returns:\n      params: array of shape (6,) = [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n    N, F = X.shape\n    assert F == 4, \"Expect 4 features: [lr, bsz, data_size, param_size]\"\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X_clamped = np.maximum(X, eps)\n    y_clamped = np.maximum(y, eps)\n\n    # build log\u2010space design matrix for initial linear regression\n    logX = np.log(X_clamped)               # (N,4)\n    logy = np.log(y_clamped)               # (N,)\n\n    # design matrix [1, logX]\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack((ones, logX))       # (N,5)\n\n    # ridge regularization for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    sol = np.linalg.solve(A, b)            # (5,)\n\n    intercept0 = sol[0]\n    weights0   = sol[1:]                   # (4,)\n\n    # initialize bias floor to half the min observed loss (but at least eps)\n    bias0 = max(y.min() * 0.5, eps)\n\n    # initial parameter vector: [bias, intercept, w_lr, w_bsz, w_data, w_param]\n    p0 = np.concatenate(([bias0, intercept0], weights0))\n\n    # residual function for robust least squares\n    def residuals(p):\n        bias_p      = p[0]\n        intercept_p = p[1]\n        w_p         = p[2:]\n        log_term = intercept_p + np.log(np.maximum(X, eps)).dot(w_p)\n        y_pred = bias_p + np.exp(log_term)\n        return y_pred - y\n\n    # refine with Huber loss for robustness\n    try:\n        result = least_squares(\n            residuals,\n            p0,\n            loss='huber',\n            f_scale=1.0,\n            max_nfev=1000,\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8\n        )\n        p_opt = result.x if result.success else p0\n    except Exception:\n        p_opt = p0\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n1) A unified additive-plus-multiplicative model (`bias + exp(intercept + w\u00b7logX)`) captures both a power-law relation and a nonzero floor in losses.\n2) Initial parameters come from a closed-form ridge-regularized linear regression in log space, ensuring a stable starting point.\n3) A robust nonlinear refinement (Huber-loss least squares) adjusts the small number of parameters to better fit the MSE and MAE objectives, while preventing sensitivity to outliers.\n4) Entire model uses only 6 parameters, making it sample-efficient and numerically stable across broad hyperparameter ranges."]}}}