{"id": "dbb41c68-6e76-4df2-bd9f-0e0af58c1f18", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a reference\u2010scaled power\u2010law:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i / x0_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and x0 = [1e-3, 32, 1e6, 1e8] are fixed references.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # fixed reference scales for stability\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    logX = np.log(X / x0)                   # shape (N,4)\n\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)  # shape (4,)\n\n    log_pred = intercept + logX.dot(weights)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the reference\u2010scaled power\u2010law by:\n      1) Ridge\u2010regularized linear regression in log\u2010space for init\n      2) Robust Huber least\u2010squares refinement on log\u2010loss residuals\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # clamp zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build log\u2010ratio features\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    logX = np.log(X / x0)     # (N,4)\n    logy = np.log(y)          # (N,)\n\n    N, F = logX.shape\n    # design matrix for linear log\u2010regression: [1, log(lr/x0), ..., log(param/x0)]\n    design = np.hstack([np.ones((N, 1), dtype=np.float64), logX])  # (N,5)\n\n    # 1) closed\u2010form ridge initialization\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    p0 = np.linalg.solve(A, b)  # shape (5,)\n\n    # 2) robust refinement in log\u2010space\n    def residuals(p):\n        # residual = (model_log - true_log)\n        return design.dot(p) - logy\n\n    # estimate a sensible f_scale from initial residuals\n    init_res = residuals(p0)\n    med = np.median(np.abs(init_res))\n    f_scale = med if med > 1e-3 else 1e-3\n\n    # bounds: intercept unbounded, weights in [-10, 10]\n    lower = [-np.inf] + [-10.0] * F\n    upper = [ np.inf] + [ 10.0] * F\n\n    try:\n        sol = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=f_scale,\n            max_nfev=2000\n        )\n        params_opt = sol.x if sol.success else p0\n    except Exception:\n        params_opt = p0\n\n    return params_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "020f5c0f-ee3f-40ae-924f-611d69270311", "generation": 3, "timestamp": 1754717846.4585447, "iteration_found": 33, "metrics": {"nmse": 0.4427374960962598, "nmae": 0.5326150125749904, "r2": 0.5572625039037402, "combined_score": 0.693126783427884}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.39389171579905646, "nmae": 0.508714930799998, "r2": 0.6061082842009435, "combined_score": 0.7174158427555789}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3939\n- nmae: 0.5087\n- r2: 0.6061\n- combined_score: 0.7174\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 2.8483, nmae: 1.6853, r2: -1.8483, combined_score: 0.2599\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4123, nmae: 0.5598, r2: 0.5877, combined_score: 0.7081\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3939, nmae: 0.5087, r2: 0.6061, combined_score: 0.7174\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5565)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law model with fixed reference scales:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i / x0_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and x0 = [1e-3, 32, 1e6, 1e8] are fixed reference values.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # fixed reference scales for numerical stability and interpretability\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    # compute log-ratio features\n    logX = np.log(X / x0)\n\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)\n\n    # linear model in log-ratio space\n    log_pred = intercept + logX.dot(weights)\n\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by regression in log\u2010ratio space plus a small refinement:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i / x0_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # fixed reference scales\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    # build log-ratio design matrix\n    logX = np.log(X / x0)\n    logy = np.log(y)\n\n    N, F = logX.shape  # F should be 4\n    # design: [1, log(lr/1e-3), log(bsz/32), log(data_size/1e6), log(param_size/1e8)]\n    design = np.hstack((np.ones((N, 1), dtype=np.float64), logX))\n\n    # closed-form ridge solution for initialization\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    p0 = np.linalg.solve(A, b)  # shape (5,)\n\n    # refine parameters by minimizing MSE in log space (relative error)\n    def objective(p):\n        lp = design.dot(p)\n        return np.mean((lp - logy) ** 2)\n\n    # bounds for stability: weights between -10 and +10, intercept unbounded\n    bounds = [(None, None)] + [(-10.0, 10.0)] * F\n    result = minimize(objective, p0, method='L-BFGS-B', bounds=bounds,\n                      options={'maxiter': 200, 'ftol': 1e-9})\n\n    params_opt = result.x if result.success else p0\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3939), Performs well on nmae (0.5087), Performs well on r2 (0.6061), Performs well on combined_score (0.7174)\n\n\n### Program 2 (Score: 0.5670)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a floor + multiplicative power-law model:\n\n      loss \u2248 loss_floor + exp( intercept + \u03a3_i w_i * log(x_i) )\n\n    Inputs:\n      data_points: array of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      array of shape (6,) = [\n                     loss_floor,\n                     intercept,\n                     w_lr,\n                     w_bsz,\n                     w_data_size,\n                     w_param_size\n                   ]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                               # (N,4)\n\n    loss_floor = params[0]                          # scalar \u2265 0\n    intercept  = params[1]                          # scalar\n    weights    = params[2:]                         # (4,)\n\n    # model in log\u2010space, then map back and add floor\n    log_pred = intercept + logX.dot(weights)        # (N,)\n    return loss_floor + np.exp(log_pred)            # (N,)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the above floor + power\u2010law model by:\n      1) A quick linear regression in log\u2010space to get intercept & weights\n      2) A robust least_squares refinement (Huber loss) in the original loss\u2010space\n         to also solve for the non\u2010zero floor.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (6,) as above.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # clamp to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # 1) INITIAL LOG\u2010SPACE REGRESSION\n    logX = np.log(X)                                # (N,4)\n    logy = np.log(y)                                # (N,)\n\n    N, F = logX.shape\n    ones = np.ones((N, 1), dtype=np.float64)\n    design = np.hstack([ones, logX])                # (N,5)\n\n    # ridge for stability (no penalty on intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0,0] = 0.0\n\n    A = design.T.dot(design) + lambda_reg * I       # (5,5)\n    b = design.T.dot(logy)                          # (5,)\n\n    try:\n        p_lin = np.linalg.solve(A, b)               # [intercept, w1..w4]\n    except np.linalg.LinAlgError:\n        p_lin, *_ = np.linalg.lstsq(design, logy, rcond=None)\n\n    intercept_init = p_lin[0]\n    weights_init   = p_lin[1:]                      # (4,)\n\n    # initial loss\u2010floor ~ half of min(y)\n    loss_floor_init = max(0.0, np.min(y) * 0.5)\n\n    # pack into initial 6\u2010vector\n    x0 = np.concatenate([[loss_floor_init, intercept_init], weights_init])\n\n    # bounds: floor \u2208 [0, min(y)], others unconstrained\n    lower = [0.0] + [-np.inf]*(F+1)\n    upper = [np.min(y)] + [np.inf]*(F+1)\n\n    # 2) ROBUST REFINEMENT IN ORIGINAL SPACE\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    try:\n        res = least_squares(\n            residuals, x0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=0.1,\n            max_nfev=5000\n        )\n        params_opt = res.x\n    except Exception:\n        # fallback to initial guess if something goes wrong\n        params_opt = x0\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.4123), Performs well on nmae (0.5598), Performs well on r2 (0.5877), Performs well on combined_score (0.7081)\n\n\n### Program 3 (Score: 0.7363)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via an additive inverse\u2010law model:\n        loss \u2248 intercept + \u03a3_i w_i / x_i\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    # avoid division by zero or extremely small values\n    eps = 1e-8\n    X = np.maximum(X, eps)\n\n    # construct design matrix = [1, 1/x1, 1/x2, 1/x3, 1/x4]\n    invX = 1.0 / X\n    ones = np.ones((X.shape[0], 1), dtype=np.float64)\n    design = np.hstack([ones, invX])  # shape (N,5)\n\n    # linear model in the transformed space\n    preds = design.dot(params)       # shape (N,)\n    return preds.ravel()\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the additive inverse\u2010law model:\n        loss \u2248 intercept + \u03a3_i w_i / x_i\n    via ridge\u2010regularized least squares.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # avoid division by zero\n    eps = 1e-8\n    X = np.maximum(X, eps)\n\n    # build design matrix: [1, 1/x1, 1/x2, 1/x3, 1/x4]\n    invX = 1.0 / X\n    ones = np.ones((X.shape[0], 1), dtype=np.float64)\n    design = np.hstack([ones, invX])  # shape (N,5)\n\n    # ridge regularization (do not penalize intercept)\n    lambda_reg = 1e-6\n    P = design.shape[1]\n    I = np.eye(P, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (D^T D + \u03bb I) p = D^T y\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(y)\n    params = np.linalg.solve(A, b)\n\n    return params\n```\nKey features: Performs well on nmse (2.8483), Performs well on nmae (1.6853), Performs well on r2 (-1.8483), Performs well on combined_score (0.2599)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a multiplicative power\u2010law model:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    logX = np.log(X)                                            # (N,4)\n    \n    intercept = params[0]                                       # scalar\n    weights   = params[1:]                                      # (4,)\n    \n    # linear model in log-space\n    log_pred = intercept + logX.dot(weights)                    # (N,)\n    \n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by linear regression in log-space:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=np.float64)  # (N,4)\n    y = np.asarray(loss_values, dtype=np.float64)                 # (N,)\n\n    # clip to avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build design matrix for log regression\n    logX = np.log(X)                                               # (N,4)\n    logy = np.log(y)                                               # (N,)\n\n    N, F = logX.shape                                              # F should be 4\n    ones = np.ones((N, 1), dtype=np.float64)\n\n    # [1, log(lr), log(bsz), log(data_size), log(param_size)]\n    design = np.hstack([ones, logX])                               # (N,5)\n\n    # ridge regularization for stability (do not penalize intercept)\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0\n\n    # solve normal equations: (X^T X + \u03bbI) p = X^T y\n    A = design.T.dot(design) + lambda_reg * I                      # (5,5)\n    b = design.T.dot(logy)                                         # (5,)\n\n    params = np.linalg.solve(A, b)                                 # (5,)\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss from hyperparameters via a power\u2010law model with fixed reference scales:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i / x0_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and x0 = [1e-3, 32, 1e6, 1e8] are fixed reference values.\n    \n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # fixed reference scales for numerical stability and interpretability\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    # compute log-ratio features\n    logX = np.log(X / x0)\n\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)\n\n    # linear model in log-ratio space\n    log_pred = intercept + logX.dot(weights)\n\n    # map back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the power\u2010law model by regression in log\u2010ratio space plus a small refinement:\n        log(loss) \u2248 intercept + \u03a3_i w_i * log(x_i / x0_i)\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64)\n\n    # avoid log(0)\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # fixed reference scales\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    # build log-ratio design matrix\n    logX = np.log(X / x0)\n    logy = np.log(y)\n\n    N, F = logX.shape  # F should be 4\n    # design: [1, log(lr/1e-3), log(bsz/32), log(data_size/1e6), log(param_size/1e8)]\n    design = np.hstack((np.ones((N, 1), dtype=np.float64), logX))\n\n    # closed-form ridge solution for initialization\n    lambda_reg = 1e-6\n    I = np.eye(F + 1, dtype=np.float64)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    p0 = np.linalg.solve(A, b)  # shape (5,)\n\n    # refine parameters by minimizing MSE in log space (relative error)\n    def objective(p):\n        lp = design.dot(p)\n        return np.mean((lp - logy) ** 2)\n\n    # bounds for stability: weights between -10 and +10, intercept unbounded\n    bounds = [(None, None)] + [(-10.0, 10.0)] * F\n    result = minimize(objective, p0, method='L-BFGS-B', bounds=bounds,\n                      options={'maxiter': 200, 'ftol': 1e-9})\n\n    params_opt = result.x if result.success else p0\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts LM loss via a reference\u2010scaled power\u2010law:\n        loss \u2248 exp(intercept + \u03a3_i w_i * log(x_i / x0_i))\n    where x = [lr, bsz, data_size, non_embedding_param_size]\n    and x0 = [1e-3, 32, 1e6, 1e8] are fixed references.\n\n    Inputs:\n      data_points: array of shape (N,4)\n      params:       array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n\n    Returns:\n      preds: array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n\n    # avoid zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n\n    # fixed reference scales for stability\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    logX = np.log(X / x0)                   # shape (N,4)\n\n    intercept = float(params[0])\n    weights   = np.asarray(params[1:], dtype=np.float64)  # shape (4,)\n\n    log_pred = intercept + logX.dot(weights)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the reference\u2010scaled power\u2010law by:\n      1) Ridge\u2010regularized linear regression in log\u2010space for init\n      2) Robust Huber least\u2010squares refinement on log\u2010loss residuals\n\n    Inputs:\n      data_points: array of shape (N,4)\n      loss_values: array of shape (N,)\n\n    Returns:\n      params: array of shape (5,) = [intercept, w_lr, w_bsz, w_data, w_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # clamp zeros\n    eps = 1e-12\n    X = np.maximum(X, eps)\n    y = np.maximum(y, eps)\n\n    # build log\u2010ratio features\n    x0 = np.array([1e-3, 32.0, 1e6, 1e8], dtype=np.float64)\n    logX = np.log(X / x0)     # (N,4)\n    logy = np.log(y)          # (N,)\n\n    N, F = logX.shape\n    # design matrix for linear log\u2010regression: [1, log(lr/x0), ..., log(param/x0)]\n    design = np.hstack([np.ones((N, 1), dtype=np.float64), logX])  # (N,5)\n\n    # 1) closed\u2010form ridge initialization\n    lambda_reg = 1e-6\n    I = np.eye(F+1, dtype=np.float64)\n    I[0, 0] = 0.0  # do not penalize intercept\n    A = design.T.dot(design) + lambda_reg * I\n    b = design.T.dot(logy)\n    p0 = np.linalg.solve(A, b)  # shape (5,)\n\n    # 2) robust refinement in log\u2010space\n    def residuals(p):\n        # residual = (model_log - true_log)\n        return design.dot(p) - logy\n\n    # estimate a sensible f_scale from initial residuals\n    init_res = residuals(p0)\n    med = np.median(np.abs(init_res))\n    f_scale = med if med > 1e-3 else 1e-3\n\n    # bounds: intercept unbounded, weights in [-10, 10]\n    lower = [-np.inf] + [-10.0] * F\n    upper = [ np.inf] + [ 10.0] * F\n\n    try:\n        sol = least_squares(\n            residuals,\n            p0,\n            bounds=(lower, upper),\n            loss='huber',\n            f_scale=f_scale,\n            max_nfev=2000\n        )\n        params_opt = sol.x if sol.success else p0\n    except Exception:\n        params_opt = p0\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```"]}}}