{"id": "a2e1d33c-8ed8-4544-a0dc-9e595d5a5aa4", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter log-polynomial scaling law:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz\n                   + p3*L_data  + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2\n                   + p7*L_data^2+ p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    L_lr, L_bsz, L_data, L_param = np.log(X_safe).T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    return np.exp(Phi.dot(p))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via\n    weighted, differential-ridge regression in the log-domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and losses must match\")\n\n    # safe log-transform\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    logs = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logs.T\n    logy = np.log(y_safe)\n\n    # design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # weight samples to emphasize large-scale configurations\n    scale_signal = L_data + L_param\n    median_scale = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_scale))\n    sqrt_w = np.sqrt(w)\n\n    # apply weights\n    Phi_w = Phi * sqrt_w[:, None]\n    y_w   = logy * sqrt_w\n\n    # normal equations\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties:\n    #   no penalty on intercept\n    #   light on linear terms (1\u20134)\n    #   moderate on quadratics (5\u20138)\n    #   stronger on cross term (9)\n    ridge_lin, ridge_quad, ridge_cross = 1e-6, 1e-4, 1e-2\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve\n    return np.linalg.solve(A, b)\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "58451f00-7b05-4c24-bd8a-8136162e0540", "generation": 6, "timestamp": 1754809708.9207668, "iteration_found": 184, "metrics": {"nmse": 0.18924071786620764, "nmae": 0.5151606686437805, "r2": 0.8107592821337923, "combined_score": 0.840872655112455}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3868934976149482, "nmae": 0.7363985304629478, "r2": 0.6131065023850518, "combined_score": 0.7210358990936997}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3869\n- nmae: 0.7364\n- r2: 0.6131\n- combined_score: 0.7210\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1892, nmae: 0.5152, r2: 0.8108, combined_score: 0.8409\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5890)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10\u2010parameter\n    log\u2010polynomial scaling law:\n\n        log(y_pred) = p0\n                     + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                     + p5*(L_lr)**2 + p6*(L_bsz)**2 + p7*(L_data)**2 + p8*(L_param)**2\n                     + p9*(L_data * L_param)\n\n    where L_x = log(x).  Then y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10 of coefficients [p0\u2026p9]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),        # p0\n        L_lr,              # p1\n        L_bsz,             # p2\n        L_data,            # p3\n        L_param,           # p4\n        L_lr**2,           # p5\n        L_bsz**2,          # p6\n        L_data**2,         # p7\n        L_param**2,        # p8\n        L_data * L_param   # p9\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in the log\u2010domain.\n\n    We weight samples to emphasize large\u2010scale configurations (larger\n    data_size and model_size) and apply light ridge on linear terms,\n    moderate ridge on quadratic terms, and stronger ridge on the single\n    cross term to control over\u2010fitting.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform inputs and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N \u00d7 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # sample weighting to emphasize large D & P\n    scale_signal = L_data + L_param\n    median_scale = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_scale))  # larger weight for larger-scale points\n    W_sqrt = np.sqrt(w)[:, None]\n\n    # weighted normal equations: (\u03a6\u1d40 W \u03a6 + ridge) p = \u03a6\u1d40 W logy\n    Phi_w = Phi * W_sqrt      # each row multiplied by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()\n\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties\n    # no penalty on intercept (idx 0)\n    # light penalty on linear terms (idx 1\u20134)\n    # moderate penalty on quadratic terms (idx 5\u20138)\n    # stronger penalty on cross term (idx 9)\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.1892), Performs well on nmae (0.5152), Performs well on r2 (0.8108), Performs well on combined_score (0.8409)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter log\u2010quadratic scaling law:\n    \n      log(y_pred) = p0\n                   + p1 * log(lr)\n                   + p2 * log(bsz)\n                   + p3 * log(data_size)\n                   + p4 * log(non_embed_param)\n                   + p5 * [log(lr)]^2\n                   + p6 * [log(bsz)]^2\n                   + p7 * [log(data_size)]^2\n                   + p8 * [log(non_embed_param)]^2\n                   + p9 * (log(data_size) * log(non_embed_param))\n                   \n    Then y_pred = exp(log(y_pred)).\n    \n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # safeguard against zero or negative inputs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, and one key cross term\n    Phi = np.column_stack([\n        np.ones(N),          # p0\n        L_lr,                # p1\n        L_bsz,               # p2\n        L_data,              # p3\n        L_param,             # p4\n        L_lr**2,             # p5\n        L_bsz**2,            # p6\n        L_data**2,           # p7\n        L_param**2,          # p8\n        L_data * L_param     # p9 (interaction)\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log\u2010quadratic scaling law via\n    closed\u2010form ridge\u2010regularized regression in log-space.\n    \n    Minimizes ||log(y) - \u03a6 p||^2 + \u03bb||p_{1:}||^2.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: mismatch between data_points and loss_values\")\n\n    # safeguard against zeros\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # closed\u2010form ridge regression\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply regularization to all but the intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter log-polynomial scaling law:\n      log(y_pred) = p0\n                    + p1*L_P + p2*L_D + p3*L_bsz + p4*L_lr\n                    + p5*(L_P)^2 + p6*(L_D)^2 + p7*(L_bsz)^2 + p8*(L_lr)^2\n                    + p9*(L_P * L_D)\n    where L_x = log(x). We then exponentiate to return y_pred.\n    \n    Inputs:\n      data_points: array-like of shape (N,4) (lr, bsz, data_size, non_embedding_param_size)\n      params:      array-like of length 10: [p0\u2026p9]\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # Avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    lr, bsz, D, P = X_safe.T\n    L_lr   = np.log(lr)\n    L_bsz  = np.log(bsz)\n    L_D    = np.log(D)\n    L_P    = np.log(P)\n    \n    # Build design matrix \u03a6 (N x 10)\n    # Columns: [1, L_P, L_D, L_bsz, L_lr, L_P^2, L_D^2, L_bsz^2, L_lr^2, L_P*L_D]\n    N = X_safe.shape[0]\n    Phi = np.empty((N, 10), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L_P\n    Phi[:, 2] = L_D\n    Phi[:, 3] = L_bsz\n    Phi[:, 4] = L_lr\n    Phi[:, 5] = L_P**2\n    Phi[:, 6] = L_D**2\n    Phi[:, 7] = L_bsz**2\n    Phi[:, 8] = L_lr**2\n    Phi[:, 9] = L_P * L_D\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain.\n    \n    Inputs:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params:      numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.ndim == 1:\n        X = X[None, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # Floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # Compute log-features\n    lr, bsz, D, P = X_safe.T\n    L_lr   = np.log(lr)\n    L_bsz  = np.log(bsz)\n    L_D    = np.log(D)\n    L_P    = np.log(P)\n    \n    # Build design matrix \u03a6 (N x 10) same as in scaling_law_func\n    Phi = np.empty((N, 10), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L_P\n    Phi[:, 2] = L_D\n    Phi[:, 3] = L_bsz\n    Phi[:, 4] = L_lr\n    Phi[:, 5] = L_P**2\n    Phi[:, 6] = L_D**2\n    Phi[:, 7] = L_bsz**2\n    Phi[:, 8] = L_lr**2\n    Phi[:, 9] = L_P * L_D\n    \n    # Target in log-domain\n    logy = np.log(y_safe)\n    \n    # Ridge regularization for numerical stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # Regularize all parameters except intercept\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n    \n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5890, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 10\u2010parameter\n    log\u2010polynomial scaling law:\n\n        log(y_pred) = p0\n                     + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                     + p5*(L_lr)**2 + p6*(L_bsz)**2 + p7*(L_data)**2 + p8*(L_param)**2\n                     + p9*(L_data * L_param)\n\n    where L_x = log(x).  Then y_pred = exp(log(y_pred)).\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10 of coefficients [p0\u2026p9]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),        # p0\n        L_lr,              # p1\n        L_bsz,             # p2\n        L_data,            # p3\n        L_param,           # p4\n        L_lr**2,           # p5\n        L_bsz**2,          # p6\n        L_data**2,         # p7\n        L_param**2,        # p8\n        L_data * L_param   # p9\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in the log\u2010domain.\n\n    We weight samples to emphasize large\u2010scale configurations (larger\n    data_size and model_size) and apply light ridge on linear terms,\n    moderate ridge on quadratic terms, and stronger ridge on the single\n    cross term to control over\u2010fitting.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform inputs and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N \u00d7 10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # sample weighting to emphasize large D & P\n    scale_signal = L_data + L_param\n    median_scale = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_scale))  # larger weight for larger-scale points\n    W_sqrt = np.sqrt(w)[:, None]\n\n    # weighted normal equations: (\u03a6\u1d40 W \u03a6 + ridge) p = \u03a6\u1d40 W logy\n    Phi_w = Phi * W_sqrt      # each row multiplied by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()\n\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties\n    # no penalty on intercept (idx 0)\n    # light penalty on linear terms (idx 1\u20134)\n    # moderate penalty on quadratic terms (idx 5\u20138)\n    # stronger penalty on cross term (idx 9)\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 6\u2010parameter power\u2010law model with an asymptotic floor:\n      y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * bsz^\u03b1_b * lr^\u03b1_lr\n\n    where:\n      lr    = learning rate\n      bsz   = batch size\n      D     = data_size (training tokens)\n      P     = non_embedding_param_size\n\n    params is a length\u20106 vector:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 parameters, got {p.size}\")\n\n    # unpack parameters\n    logA, aP, aD, aB, aL, log_yinf = p\n    A     = np.exp(logA)\n    y_inf = np.exp(log_yinf)\n\n    # unpack and floor inputs\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # compute power\u2010law term\n    term   = A * (Psize**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n    y_pred = y_inf + term\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law scaling law with asymptotic floor\n    by minimizing mean\u2010squared error in the original loss space via L-BFGS-B.\n\n    Returns params: [logA, \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid zero or negative\n    y_safe = np.maximum(y, 1e-12)\n    min_y  = np.min(y_safe)\n\n    # initial guesses\n    init_log_yinf = np.log(min_y * 0.1 + 1e-12)\n    init_logA     = np.log(max(np.median(y_safe) - np.exp(init_log_yinf), 1e-12))\n    init_alphas   = np.zeros(4, dtype=float)\n    p0 = np.hstack([init_logA, init_alphas, init_log_yinf])\n\n    # bounds for stability\n    bounds = [(-10, 10)]            +  # logA\n             [(-5, 5)] * 4          +  # \u03b1_P, \u03b1_D, \u03b1_b, \u03b1_lr\n             [(-20, np.log(min_y))]   # log_y_inf\n\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y_safe)**2)\n\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.7554, Type: Alternative)\n```python\n\"\"\"\nEvolved scaling law model for LLM training hyperparameters.\nWe model the LM loss as\n   y_pred = y_inf + A * (P/P0)^{\u03b1_P} * (D/D0)^{\u03b1_D} * (bsz/bsz0)^{\u03b1_bsz} * (lr/lr0)^{\u03b1_lr}\n\nwhere:\n  - P = non\u2010embedding parameter count\n  - D = training data size (tokens)\n  - bsz = batch size\n  - lr = learning rate\n\nWe reparameterize A and y_inf in log\u2010space for numerical stability:\n   logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf\n\nFeatures are normalized by typical scales P0,D0,bsz0,lr0 to avoid large exponents.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Typical scales for normalization (midpoints of the training range)\n_P0 = 1e8          # ~1e8 parameters\n_D0 = 1e10         # ~1e10 training tokens\n_BSZ0 = 512.0      # batch size\n_LR0 = 1e-3        # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the evolved scaling law.\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 OR 2D array of shape (T,6)\n                   param order: [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns shape (N,),\n              if params is 2D (T sets), returns shape (N, T).\n    \"\"\"\n    # ensure array, then at least 2D\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, D_feat = X.shape\n    if D_feat != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {D_feat}\")\n    # pack params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"Expected params with length 6, got {Pn}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # normalize\n    lr_n  = lr  / _LR0\n    bsz_n = bsz / _BSZ0\n    D_n   = D   / _D0\n    P_n   = Psize / _P0\n\n    # allocate output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # loop over param sets\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # compute the power-law term in log\u2010space\n        # log_term = logA + aP*log(P_n) + aD*log(D_n) + aB*log(bsz_n) + aL*log(lr_n)\n        # then term = exp(log_term)\n        # we compute directly:\n        term = np.exp(logA) * (P_n ** aP) * (D_n ** aD) * (bsz_n ** aB) * (lr_n ** aL)\n        y_inf = np.exp(log_yinf)\n        # total prediction\n        y_all[:, t] = y_inf + term\n\n    # return\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing mean squared error.\n\n    Returns the optimized parameter vector:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same number of rows.\")\n\n    # initial estimates\n    y_min = np.maximum(y.min(), 1e-6)\n    # start y_inf near the smallest observed loss\n    init_yinf = y_min * 0.8\n    init_log_yinf = np.log(init_yinf)\n    # rough scale for A: average of (y - y_inf)\n    avg_term = np.maximum(np.mean(y - init_yinf), 1e-6)\n    init_logA = np.log(avg_term)\n    # initial exponents (weak negative scaling)\n    init_alphas = np.array([-0.4, -0.3, -0.1, -0.05], dtype=float)  # [\u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    p0 = np.concatenate([ [init_logA], init_alphas, [init_log_yinf] ])\n\n    # bounds: allow exponents in a reasonable range\n    # logA: free, \u03b1_P, \u03b1_D in [-2,2], \u03b1_bsz, \u03b1_lr in [-1,1], log_yinf: free\n    bnds = [\n        (None, None),\n        (-2.0, 2.0),\n        (-2.0, 2.0),\n        (-1.0, 1.0),\n        (-1.0, 1.0),\n        (None, None)\n    ]\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # optimize with L-BFGS-B\n    res = minimize(\n        _obj,\n        p0,\n        bounds=bnds,\n        method='L-BFGS-B',\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if fitting fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.785), Excellent nmae (1.662)\n\n\n### Inspiration 5 (Score: 0.8565, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Normalization constants chosen within the typical ranges:\n_P0   = 6e8     # ~ mid\u2010range non\u2010embedding params (214M\u20131B)\n_D0   = 5e10    # ~ mid\u2010range training tokens (4B\u2013100B)\n_BSZ0 = 512.0   # mid\u2010range batch size (16\u20134096)\n_LR0  = 1e-3    # mid\u2010range learning rate (1.2e-4\u20132.2e-2)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 6\u2010parameter power\u2010law with an asymptotic floor:\n      y_pred = y_inf + A * (P/_P0)^aP * (D/_D0)^aD * (bsz/_BSZ0)^aB * (lr/_LR0)^aL\n\n    Inputs:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      length\u20106 array [logA, aP, aD, aB, aL, y_inf]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, y_inf = p\n\n    # unpack and normalize features\n    lr    = X[:, 0] / _LR0\n    bsz   = X[:, 1] / _BSZ0\n    D     = X[:, 2] / _D0\n    P     = X[:, 3] / _P0\n\n    # compute the power\u2010law term\n    A = np.exp(logA)\n    term = A * (P ** aP) * (D ** aD) * (bsz ** aB) * (lr ** aL)\n\n    y_pred = y_inf + term\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law by minimizing MSE in original loss space.\n\n    Returns parameter vector [logA, aP, aD, aB, aL, y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # avoid non-positive targets\n    y = np.maximum(y, 1e-12)\n    # initial floor near half the minimum observed loss\n    y_min = np.min(y)\n    init_yinf = y_min * 0.5\n\n    # initial A from average residual\n    avg_term = np.mean(np.maximum(y - init_yinf, 1e-12))\n    init_logA = np.log(avg_term)\n\n    # initialize exponents: param & data ~ -0.5, bsz & lr ~ -0.1\n    init_alphas = np.array([-0.5, -0.5, -0.1, -0.1], dtype=float)\n    # parameter order: [logA, aP, aD, aB, aL, y_inf]\n    p0 = np.concatenate(([init_logA], init_alphas, [init_yinf]))\n\n    # bounds for stability\n    bnds = [\n        (None, None),        # logA\n        (-5.0, 5.0),         # aP\n        (-5.0, 5.0),         # aD\n        (-5.0, 5.0),         # aB\n        (-5.0, 5.0),         # aL\n        (0.0, y_min)         # y_inf\n    ]\n\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bnds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return res.x if res.success else p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.020), Excellent nmae (2.177)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter log\u2010quadratic scaling law:\n    \n      log(y_pred) = p0\n                   + p1 * log(lr)\n                   + p2 * log(bsz)\n                   + p3 * log(data_size)\n                   + p4 * log(non_embed_param)\n                   + p5 * [log(lr)]^2\n                   + p6 * [log(bsz)]^2\n                   + p7 * [log(data_size)]^2\n                   + p8 * [log(non_embed_param)]^2\n                   + p9 * (log(data_size) * log(non_embed_param))\n                   \n    Then y_pred = exp(log(y_pred)).\n    \n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # safeguard against zero or negative inputs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, and one key cross term\n    Phi = np.column_stack([\n        np.ones(N),          # p0\n        L_lr,                # p1\n        L_bsz,               # p2\n        L_data,              # p3\n        L_param,             # p4\n        L_lr**2,             # p5\n        L_bsz**2,            # p6\n        L_data**2,           # p7\n        L_param**2,          # p8\n        L_data * L_param     # p9 (interaction)\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log\u2010quadratic scaling law via\n    closed\u2010form ridge\u2010regularized regression in log-space.\n    \n    Minimizes ||log(y) - \u03a6 p||^2 + \u03bb||p_{1:}||^2.\n    \n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: mismatch between data_points and loss_values\")\n\n    # safeguard against zeros\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # closed\u2010form ridge regression\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply regularization to all but the intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter log-polynomial scaling law:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz\n                   + p3*L_data  + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2\n                   + p7*L_data^2+ p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log of zero or negative\n    X_safe = np.maximum(X, 1e-12)\n    L_lr, L_bsz, L_data, L_param = np.log(X_safe).T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones_like(L_lr),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    return np.exp(Phi.dot(p))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via\n    weighted, differential-ridge regression in the log-domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: data points and losses must match\")\n\n    # safe log-transform\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    logs = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logs.T\n    logy = np.log(y_safe)\n\n    # design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # weight samples to emphasize large-scale configurations\n    scale_signal = L_data + L_param\n    median_scale = np.median(scale_signal)\n    w = np.exp(0.5 * (scale_signal - median_scale))\n    sqrt_w = np.sqrt(w)\n\n    # apply weights\n    Phi_w = Phi * sqrt_w[:, None]\n    y_w   = logy * sqrt_w\n\n    # normal equations\n    A = Phi_w.T.dot(Phi_w)\n    b = Phi_w.T.dot(y_w)\n\n    # differential ridge penalties:\n    #   no penalty on intercept\n    #   light on linear terms (1\u20134)\n    #   moderate on quadratics (5\u20138)\n    #   stronger on cross term (9)\n    ridge_lin, ridge_quad, ridge_cross = 1e-6, 1e-4, 1e-2\n    for i in range(1, 5):\n        A[i, i] += ridge_lin\n    for i in range(5, 9):\n        A[i, i] += ridge_quad\n    A[9, 9] += ridge_cross\n\n    # solve\n    return np.linalg.solve(A, b)\n\n# EVOLVE-BLOCK-END\n```"]}}}