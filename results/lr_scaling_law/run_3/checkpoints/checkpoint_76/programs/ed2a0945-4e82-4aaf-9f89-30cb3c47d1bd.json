{"id": "ed2a0945-4e82-4aaf-9f89-30cb3c47d1bd", "code": "import numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in the log\u2010domain.\n    Inputs:\n      logX: array of shape (N,4) with columns\n            [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\n    Returns:\n      Phi: array of shape (N,15) with columns\n           [1,\n            logX_i,\n            (logX_i)^2,\n            logX_i * logX_j  for i<j]\n    \"\"\"\n    N, F = logX.shape\n    # total terms = 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=np.float64)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log of zero or negatives\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)   # shape (N,15)\n    log_pred = Phi.dot(p)              # shape (N,)\n\n    # back to original loss space\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)    # shape (N,4)\n    logy = np.log(y_safe)    # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)   # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to emphasize large\u2010scale configs\n    # here we weight by combined size of data and params\n    weight_signal = logX[:, 2] + logX[:, 3]\n    median_ws = np.median(weight_signal)\n    w = np.exp(0.5 * (weight_signal - median_ws))   # shape (N,)\n\n    # build weighted normal equations\n    W_sqrt = np.sqrt(w)[:, None]      # shape (N,1)\n    Phi_w = Phi * W_sqrt              # each row scaled by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()     # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)            # shape (15,15)\n    b = Phi_w.T.dot(y_w)              # shape (15,)\n\n    # differential ridge regularization\n    # intercept index = 0 (no regularization)\n    # linear terms     = indices 1..F\n    # quadratic terms  = indices F+1..2F\n    # interactions     = indices 2F+1..P-1\n    idx_lin_start   = 1\n    idx_lin_end     = 1 + F\n    idx_quad_start  = idx_lin_end\n    idx_quad_end    = idx_quad_start + F\n    idx_int_start   = idx_quad_end\n    idx_int_end     = P\n\n    # small ridge for linear, moderate for quad, stronger for interactions\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n\n    for i in range(idx_lin_start, idx_lin_end):\n        A[i, i] += ridge_lin\n    for i in range(idx_quad_start, idx_quad_end):\n        A[i, i] += ridge_quad\n    for i in range(idx_int_start, idx_int_end):\n        A[i, i] += ridge_inter\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "36435002-d569-418f-b185-8042137d4cc5", "generation": 4, "timestamp": 1754808239.0533314, "iteration_found": 64, "metrics": {"nmse": 0.40616019375195006, "nmae": 0.6892980047588617, "r2": 0.5938398062480499, "combined_score": 0.7111565271462963}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.7856632787729239, "nmae": 1.6626967445393803, "r2": -0.7856632787729239, "combined_score": 0.35898093198130426}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.7857\n- nmae: 1.6627\n- r2: -0.7857\n- combined_score: 0.3590\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4375, nmae: 0.6955, r2: 0.5625, combined_score: 0.6957\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4062, nmae: 0.6893, r2: 0.5938, combined_score: 0.7111\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4062, nmae: 0.6893, r2: 0.5938, combined_score: 0.7112\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6001)\n```python\n\"\"\"\nEnhanced 2nd\u2010order log\u2010polynomial scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = \u03b20\n                + \u03a3_i \u03b2_i log x_i\n                + \u03a3_i \u03b3_i (log x_i)^2\n                + \u03a3_{i<j} \u03b4_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via weighted, differential\u2010ridge regression in closed form to\nemphasize large\u2010scale configurations and ensure numeric stability.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix \u03a6 for a 2nd\u2010order polynomial in log\u2010features.\n\n    Inputs:\n      logX: array of shape (N,4), where columns are\n            [log(lr), log(bsz), log(data_size), log(non_embedding_params)]\n\n    Returns:\n      Phi: array of shape (N,P) with\n           P = 1 (intercept)\n             + 4 (linear terms)\n             + 4 (squared terms)\n             + 6 (pairwise interactions)\n           = 15 total columns.\n    \"\"\"\n    N, F = logX.shape\n    # total features: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)    # shape (N,15)\n    log_pred = Phi.dot(p)               # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight each sample by w_i = exp(0.5 * ((log data_size_i + log param_size_i)\n    - median(log_data_size + log_param_size))) to emphasize large\u2010scale\n    configurations. We apply small ridge on linear terms, moderate on squared,\n    and stronger on pairwise interactions for numerical stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to up\u2010weight large model/data\n    log_ds = logX[:, 2]\n    log_ps = logX[:, 3]\n    combined = log_ds + log_ps\n    median_combined = np.median(combined)\n    w = np.exp(0.5 * (combined - median_combined))  # shape (N,)\n\n    # build weighted normal equations\n    # A = \u03a6^T W \u03a6, b = \u03a6^T (W logy)\n    W_sqrt = np.sqrt(w)[:, None]  # shape (N,1)\n    Phi_w = Phi * W_sqrt          # each row i scaled by sqrt(w_i)\n    y_w = logy * W_sqrt.ravel()   # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)        # shape (15,15)\n    b = Phi_w.T.dot(y_w)          # shape (15,)\n\n    # differential ridge regularization\n    # indices for blocks\n    idx_lin   = slice(1, 1+F)              # linear terms\n    idx_sq    = slice(1+F, 1+2*F)          # squared terms\n    idx_inter = slice(1+2*F, P)            # interaction terms\n\n    # set ridge strengths\n    ridge_lin   = 1e-6\n    ridge_sq    = 1e-4\n    ridge_inter = 1e-2\n\n    # apply ridge to diagonal of A\n    for i in range(idx_lin.start, idx_lin.stop):\n        A[i, i] += ridge_lin\n    for i in range(idx_sq.start, idx_sq.stop):\n        A[i, i] += ridge_sq\n    for i in range(idx_inter.start, idx_inter.stop):\n        A[i, i] += ridge_inter\n\n    # intercept (index 0) is left unregularized\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4062), Performs well on nmae (0.6893), Performs well on r2 (0.5938), Performs well on combined_score (0.7112)\n\n\n### Program 2 (Score: 0.6001)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a 2nd\u2010order polynomial design matrix in the log\u2010domain.\n    Inputs:\n      logX: array of shape (N,4) of log\u2010features [log(lr), log(bsz), log(data_size), log(param_size)]\n    Output:\n      Phi:  array of shape (N,15) with columns\n            [1,\n             logX[:,0], logX[:,1], logX[:,2], logX[:,3],\n             (logX[:,0])^2, \u2026, (logX[:,3])^2,\n             logX[:,0]*logX[:,1], \u2026, logX[:,2]*logX[:,3]]\n    \"\"\"\n    N, F = logX.shape\n    # total params = 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F * (F - 1)) // 2\n    Phi = np.ones((N, P), dtype=np.float64)\n\n    # linear terms\n    Phi[:, 1 : 1 + F] = logX\n\n    # quadratic terms\n    start_q = 1 + F\n    Phi[:, start_q : start_q + F] = logX * logX\n\n    # pairwise interaction terms\n    idx = start_q + F\n    for i in range(F):\n        for j in range(i + 1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss via a 2nd\u2010order polynomial in log\u2010features.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of coefficients.\n\n    Returns:\n      y_pred: 1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    expected_P = 1 + F + F + (F * (F - 1)) // 2\n    if p.size != expected_P:\n        raise ValueError(f\"Expected {expected_P} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    log_pred = Phi.dot(p)             # shape (N,)\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted ridge regression.\n\n    We weight each sample by its combined scale of data_size and param_size:\n      w_i = exp(0.5 * ((log data_size_i + log param_size_i) - median(...)))\n    to emphasize large\u2010scale configurations.\n    A small ridge (\u03bb=1e-6) stabilizes higher\u2010order terms.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Mismatched data points and losses\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)  # (N,4)\n    logy = np.log(y_safe)  # (N,)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX)  # (N,15)\n\n    # sample weights to emphasize large-scale configs\n    scale_sum = logX[:, 2] + logX[:, 3]\n    median_scale = np.median(scale_sum)\n    w = np.exp(0.5 * (scale_sum - median_scale))  # (N,)\n\n    # weighted ridge regression normal equations\n    ridge = 1e-6\n    # A = \u03a6\u1d40 W \u03a6\n    A = Phi.T.dot(Phi * w[:, np.newaxis])\n    # regularize all but intercept\n    A[1:, 1:] += ridge\n    # b = \u03a6\u1d40 (W logy)\n    b = Phi.T.dot(logy * w)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4062), Performs well on nmae (0.6893), Performs well on r2 (0.5938), Performs well on combined_score (0.7111)\n\n\n### Program 3 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for LLM training hyperparameters.\nWe fit a second\u2010order polynomial in the log\u2010domain of each feature,\nincluding quadratic terms and pairwise interactions, via ridge\u2010regularized\nclosed\u2010form regression for stability, efficiency, and improved accuracy.\n\nModel form:\n   log(y_pred) = c0\n               + sum_i c1_i * log(x_i)\n               + sum_i c2_i * (log(x_i))^2\n               + sum_{i<j} c3_{ij} * log(x_i)*log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size],\nand y_pred is the predicted LM loss.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, float).ravel()\n    # total parameters = 1 intercept + 4 linear + 4 quadratic + 6 interactions = 15\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # floor inputs to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)        # shape (N,4)\n\n    # build design matrix Phi\n    Phi = np.ones((N, P_expected), float)\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain and exponentiate\n    log_pred = Phi.dot(p)           # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_clipped)        # shape (N,4)\n    logy = np.log(y_clipped)        # shape (N,)\n\n    # build design matrix Phi\n    P = 1 + F + F + (F*(F-1))//2     # 15\n    Phi = np.ones((N, P), float)\n    idx = 1\n    # linear\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    A[np.arange(1, P), np.arange(1, P)] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4375), Performs well on nmae (0.6955), Performs well on r2 (0.5625), Performs well on combined_score (0.6957)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5978)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced, stable scaling\u2010law model for LLM training hyperparameters.\n\nWe model the log\u2010loss as a second\u2010order polynomial in the log\u2010features:\n   z = [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\n\nlog(y_pred) = c0\n            + \u2211_{i=1..4} c1_i * z_i\n            + \u2211_{i=1..4} c2_i * z_i^2\n            + \u2211_{1 \u2264 i < j \u2264 4} c3_{ij} * (z_i * z_j)\n\nTotal parameters: 1 (intercept) + 4 (linear) + 4 (quadratic) + 6 (pairwise) = 15.\n\nWe fit via closed\u2010form ridge regression in the log\u2010domain for numerical stability\nand strong generalization across scales.\n\"\"\"\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build design matrix \u03a6 for a second\u2010order polynomial in log\u2010features.\n\n    Input:\n      logX: (N,4) array of log\u2010transformed features.\n\n    Returns:\n      Phi: (N,15) matrix with columns\n           [1,\n            z1, z2, z3, z4,\n            z1^2, z2^2, z3^2, z4^2,\n            z1\u00b7z2, z1\u00b7z3, z1\u00b7z4, z2\u00b7z3, z2\u00b7z4, z3\u00b7z4]\n    \"\"\"\n    N, F = logX.shape\n    # number of terms: intercept + linear + quadratic + pairwise = 1 + F + F + F*(F-1)/2\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n\n    # linear terms\n    Phi[:, 1:1+F] = logX\n    # quadratic terms\n    Phi[:, 1+F:1+2*F] = logX**2\n    # pairwise interactions\n    idx = 1 + 2*F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the learned scaling law.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred:      1D array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 15:\n        raise ValueError(f\"Expected 15 parameters, got {p.size}\")\n\n    # avoid log of zero or negative\n    X_clipped = np.maximum(X, 1e-12)\n    # log\u2010transform features\n    logX = np.log(X_clipped)\n    # build design matrix and predict log\u2010loss\n    Phi = _build_design_matrix(logX)    # (N,15)\n    log_pred = Phi.dot(p)               # (N,)\n    # back to original loss space\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the second\u2010order log\u2010polynomial scaling law via ridge regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_clipped)   # (N,4)\n    logy = np.log(y_clipped)   # (N,)\n\n    # build design matrix\n    Phi = _build_design_matrix(logX)  # (N,15)\n\n    # closed\u2010form ridge regression: solve (\u03a6\u1d40\u03a6 + \u03bb\u00b7Diag) p = \u03a6\u1d40 logy\n    ridge = 1e-4\n    A = Phi.T.dot(Phi)           # (15,15)\n    # add ridge to all but intercept term\n    A[1:, 1:] += ridge * np.eye(14)\n    b = Phi.T.dot(logy)          # (15,)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced log\u2010polynomial scaling law for LLM training hyperparameters.\n\nModel form:\n    log(y_pred) = c0\n                + sum_i c1_i * log(x_i)\n                + sum_i c2_i * (log(x_i))^2\n                + sum_{i<j} c3_{ij} * log(x_i) * log(x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\nWe fit parameters by ridge\u2010regularized linear regression in the log\u2010domain\nfor stability and efficient closed\u2010form solution.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15:\n                   [c0,\n                    c1_lr, c1_bsz, c1_data, c1_param,\n                    c2_lr, c2_bsz, c2_data, c2_param,\n                    c3_lr_bsz, c3_lr_data, c3_lr_param,\n                    c3_bsz_data, c3_bsz_param, c3_data_param]\n\n    Returns:\n      y_pred:      1D array of length N of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2  # intercept + linear + quadratic + interactions\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)  # shape (N,4)\n\n    # build design matrix Phi: [1, logX, (logX)^2, pairwise(logX_i * logX_j)]\n    Phi = np.ones((N, P_expected), dtype=float)\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise interactions\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict log\u2010loss and exponentiate\n    log_pred = Phi.dot(p)  # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via ridge\u2010regularized regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params:      1D array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # build design matrix Phi as in scaling_law_func\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization for numerical stability (no penalty on intercept)\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge to all but intercept term\n    for k in range(1, P):\n        A[k, k] += ridge\n    b = Phi.T.dot(logy)\n\n    # closed\u2010form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6001, Type: Alternative)\n```python\n\"\"\"\nEnhanced 2nd\u2010order log\u2010polynomial scaling law for LLM training hyperparameters.\n\nWe model log(loss) as a 2nd\u2010order polynomial in the log\u2010features:\n   log y_pred = \u03b20\n                + \u03a3_i \u03b2_i log x_i\n                + \u03a3_i \u03b3_i (log x_i)^2\n                + \u03a3_{i<j} \u03b4_{ij} (log x_i)(log x_j)\n\nwhere x = [lr, bsz, data_size, non_embedding_param_size].\n\nWe fit via weighted, differential\u2010ridge regression in closed form to\nemphasize large\u2010scale configurations and ensure numeric stability.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a design matrix \u03a6 for a 2nd\u2010order polynomial in log\u2010features.\n\n    Inputs:\n      logX: array of shape (N,4), where columns are\n            [log(lr), log(bsz), log(data_size), log(non_embedding_params)]\n\n    Returns:\n      Phi: array of shape (N,P) with\n           P = 1 (intercept)\n             + 4 (linear terms)\n             + 4 (squared terms)\n             + 6 (pairwise interactions)\n           = 15 total columns.\n    \"\"\"\n    N, F = logX.shape\n    # total features: intercept + F linear + F squared + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=float)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    # flatten params\n    p = np.asarray(params, dtype=float).ravel()\n    # expected number of parameters\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)    # shape (N,15)\n    log_pred = Phi.dot(p)               # shape (N,)\n\n    # back to original loss domain\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n\n    We weight each sample by w_i = exp(0.5 * ((log data_size_i + log param_size_i)\n    - median(log_data_size + log_param_size))) to emphasize large\u2010scale\n    configurations. We apply small ridge on linear terms, moderate on squared,\n    and stronger on pairwise interactions for numerical stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform features and target\n    logX = np.log(X_safe)   # shape (N,4)\n    logy = np.log(y_safe)   # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)  # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to up\u2010weight large model/data\n    log_ds = logX[:, 2]\n    log_ps = logX[:, 3]\n    combined = log_ds + log_ps\n    median_combined = np.median(combined)\n    w = np.exp(0.5 * (combined - median_combined))  # shape (N,)\n\n    # build weighted normal equations\n    # A = \u03a6^T W \u03a6, b = \u03a6^T (W logy)\n    W_sqrt = np.sqrt(w)[:, None]  # shape (N,1)\n    Phi_w = Phi * W_sqrt          # each row i scaled by sqrt(w_i)\n    y_w = logy * W_sqrt.ravel()   # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)        # shape (15,15)\n    b = Phi_w.T.dot(y_w)          # shape (15,)\n\n    # differential ridge regularization\n    # indices for blocks\n    idx_lin   = slice(1, 1+F)              # linear terms\n    idx_sq    = slice(1+F, 1+2*F)          # squared terms\n    idx_inter = slice(1+2*F, P)            # interaction terms\n\n    # set ridge strengths\n    ridge_lin   = 1e-6\n    ridge_sq    = 1e-4\n    ridge_inter = 1e-2\n\n    # apply ridge to diagonal of A\n    for i in range(idx_lin.start, idx_lin.stop):\n        A[i, i] += ridge_lin\n    for i in range(idx_sq.start, idx_sq.stop):\n        A[i, i] += ridge_sq\n    for i in range(idx_inter.start, idx_inter.stop):\n        A[i, i] += ridge_inter\n\n    # intercept (index 0) is left unregularized\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 0.7876, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language modeling loss from hyperparameters using an extended\n    power\u2010law in log\u2010domain with a quadratic term for learning rate and an\n    asymptotic loss floor.\n\n    Model:\n      y_pred = y_inf + exp(\n                   logA\n                   + \u03b1_P * log(P)\n                   + \u03b1_D * log(D)\n                   + \u03b1_bsz * log(bsz)\n                   + \u03b1_lr * log(lr)\n                   + \u03b1_lr2 * (log(lr))^2\n               )\n\n    Inputs:\n      data_points: array of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 7 or 2D array (T\u00d77):\n                   [logA,\n                    \u03b1_P, \u03b1_D, \u03b1_bsz,\n                    \u03b1_lr, \u03b1_lr2,\n                    log_y_inf]\n\n    Returns:\n      y_pred: shape (N,) if params is 1D, else (N,T).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pcount = p.shape\n    if Pcount != 7:\n        raise ValueError(f\"scaling_law_func: expected 7 parameters, got {Pcount}\")\n\n    # Unpack features and take logs safely\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n\n    xP   = np.log(P)\n    xD   = np.log(D)\n    xB   = np.log(bsz)\n    xL   = np.log(lr)\n\n    # Prepare output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # Compute predictions for each parameter set\n    for t in range(T):\n        logA, aP, aD, aB, aL, aL2, log_yinf = p[t]\n        exp_term = np.exp(logA\n                          + aP * xP\n                          + aD * xD\n                          + aB * xB\n                          + aL * xL\n                          + aL2 * (xL ** 2))\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + exp_term\n\n    # Return (N,) for single set, else (N,T)\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing MSE on observed losses.\n    Uses a linear least\u2010squares initialization in log\u2010domain with a quadratic\n    learning\u2010rate term, then refines via L-BFGS-B.\n\n    Returns optimized params:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2, log_y_inf]\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=float)\n    X = np.atleast_2d(X)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: data points and loss values must match in length\")\n\n    # Avoid log(0)\n    lr   = np.maximum(X[:, 0], 1e-12)\n    bsz  = np.maximum(X[:, 1], 1e-12)\n    D    = np.maximum(X[:, 2], 1e-12)\n    P    = np.maximum(X[:, 3], 1e-12)\n\n    xP   = np.log(P)\n    xD   = np.log(D)\n    xB   = np.log(bsz)\n    xL   = np.log(lr)\n\n    # Initial guess for the asymptotic loss floor\n    min_y = np.min(y)\n    y_inf0 = max(min_y * 0.9, 1e-8)\n\n    # Linearize: log(y - y_inf0) \u2248 logA + \u03b1_P xP + \u03b1_D xD + \u03b1_bsz xB + \u03b1_lr xL + \u03b1_lr2 xL^2\n    z = y - y_inf0\n    if np.any(z <= 0):\n        # shift to positive\n        z = z + (abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    # Build design matrix for initial LS estimate\n    # Columns: [1, xP, xD, xB, xL, xL^2]\n    M = np.vstack([\n        np.ones(N),\n        xP,\n        xD,\n        xB,\n        xL,\n        xL**2\n    ]).T\n\n    # Solve least-squares\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # Pack initial parameters\n    # sol => [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, \u03b1_lr2]\n    p0 = np.concatenate([sol, [np.log(y_inf0)]])\n\n    # Objective: MSE in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # Parameter bounds\n    #   logA:    unrestricted\n    #   \u03b1_P..\u03b1_bsz, \u03b1_lr, \u03b1_lr2: reasonable power\u2010law exponents\n    #   log_y_inf \u2264 log(min observed loss)\n    lb = [-np.inf, -5.0, -5.0, -5.0, -5.0, -5.0, -np.inf]\n    ub = [ np.inf,  5.0,  5.0,  5.0,  5.0,  5.0,  np.log(min_y)]\n    bounds = list(zip(lb, ub))\n\n    # Refine by L-BFGS-B\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-12}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to the linearized solution\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.118), Excellent nmae (1.830)\n\n\n### Inspiration 3 (Score: 0.7553, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\n# Normalization constants chosen near the median of typical training scales\n_P0   = 1e9      # non\u2010embedding parameter size (around 1e8\u20131e9)\n_D0   = 5e10     # data size in tokens (around 1e10\u20131e11)\n_BSZ0 = 512.0    # batch size\n_LR0  = 1e-3     # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a 6\u2010parameter\n    power law with an asymptotic floor:\n\n        y_pred = y_inf + A * (P/_P0)^aP * (D/_D0)^aD * (bsz/_BSZ0)^aB * (lr/_LR0)^aL\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6: [logA, aP, aD, aB, aL, y_inf]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got shape {X.shape}\")\n\n    # Unpack and normalize features\n    lr   = X[:, 0] / _LR0\n    bsz  = X[:, 1] / _BSZ0\n    D    = X[:, 2] / _D0\n    P    = X[:, 3] / _P0\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {p.size}\")\n    logA, aP, aD, aB, aL, y_inf = p\n    A = np.exp(logA)\n\n    # Compute prediction\n    y_pred = y_inf + A * (P**aP) * (D**aD) * (bsz**aB) * (lr**aL)\n    return y_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter power\u2010law scaling law by minimizing MSE in the original\n    loss space using L-BFGS-B.\n\n    Returns optimized params: [logA, aP, aD, aB, aL, y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Ensure positivity\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess for asymptotic floor y_inf (just below the minimum observed loss)\n    y_min = np.min(y)\n    init_y_inf = y_min * 0.9\n\n    # Linearize via z = y - y_inf to do a quick OLS for exponents & logA\n    z = y - init_y_inf\n    if np.any(z <= 0):\n        # shift so log is defined\n        z += (np.abs(np.min(z)) + 1e-8)\n    log_z = np.log(z)\n\n    # Build design matrix for [1, logP, logD, logB, logL]\n    logP = np.log(X[:, 3] / _P0)\n    logD = np.log(X[:, 2] / _D0)\n    logB = np.log(X[:, 1] / _BSZ0)\n    logL = np.log(X[:, 0] / _LR0)\n    M = np.column_stack([np.ones_like(log_z), logP, logD, logB, logL])\n\n    # Solve linear least squares: [logA, aP, aD, aB, aL]\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    logA0, aP0, aD0, aB0, aL0 = sol\n    p0 = np.array([logA0, aP0, aD0, aB0, aL0, init_y_inf], dtype=float)\n\n    # Objective: MSE in original loss space\n    def objective(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y)**2)\n\n    # Bound exponents for stability, floor in [0, y_min]\n    bounds = [\n        (None, None),       # logA\n        (-5.0, 5.0),        # aP\n        (-5.0, 5.0),        # aD\n        (-5.0, 5.0),        # aB\n        (-5.0, 5.0),        # aL\n        (0.0, y_min)        # y_inf\n    ]\n\n    result = minimize(\n        fun=objective,\n        x0=p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol':1e-12, 'maxiter':1000}\n    )\n\n    if result.success:\n        return result.x\n    # Fallback if optimization fails\n    return p0\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.785), Excellent nmae (1.662)\n\n\n### Inspiration 4 (Score: 0.5979, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law discovery for LLM training hyperparameters.\n\nWe model log(loss) as a full second\u2010order polynomial in the log of each feature,\nincluding:\n  - an intercept\n  - F linear log\u2010terms\n  - F squared log\u2010terms\n  - F*(F\u22121)/2 pairwise log\u2010cross terms\n\nFor F=4 features this yields 1 + 4 + 4 + 6 = 15 parameters.  We fit by\nclosed\u2010form ridge regression in the log domain for numerical stability.\n\nFunctions:\n  scaling_law_func(data_points, params)\n  fit_scaling_law(data_points, loss_values)\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a log\u2010domain quadratic:\n      log(loss) \u2248 \u03a6(log(features)) \u22c5 params\n\n    data_points: array (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n    params:      1D array of length 15\n\n    Returns:     array (N,) of predicted loss values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    logX = np.log(X)                  # shape (N,4)\n    N, F = logX.shape\n\n    p = np.asarray(params, dtype=float).ravel()\n    # expected params: 1 + F + F + F*(F-1)/2\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} params but got {p.shape[0]}\")\n\n    # build design matrix \u03a6\n    Phi = np.ones((N, P_expected), dtype=float)\n    idx = 1\n    # linear terms\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    # squared terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    # pairwise cross terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # predict in log\u2010domain, then exponentiate\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010domain quadratic scaling law via ridge regression.\n\n    data_points: array (N,4)\n    loss_values: array (N,)\n\n    Returns:      1D array of learned parameters of length 15.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    # floor to avoid zero or negative values\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    logX = np.log(X)    # (N,4)\n    logy = np.log(y)    # (N,)\n\n    N, F = logX.shape\n    P = 1 + F + F + (F*(F-1))//2\n\n    # build design matrix \u03a6\n    Phi = np.ones((N, P), dtype=float)\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    # ridge regularization for stability\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to diagonal\n    A[np.diag_indices(P)] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.7554, Type: Alternative)\n```python\n\"\"\"\nEvolved scaling law model for LLM training hyperparameters.\nWe model the LM loss as\n   y_pred = y_inf + A * (P/P0)^{\u03b1_P} * (D/D0)^{\u03b1_D} * (bsz/bsz0)^{\u03b1_bsz} * (lr/lr0)^{\u03b1_lr}\n\nwhere:\n  - P = non\u2010embedding parameter count\n  - D = training data size (tokens)\n  - bsz = batch size\n  - lr = learning rate\n\nWe reparameterize A and y_inf in log\u2010space for numerical stability:\n   logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf\n\nFeatures are normalized by typical scales P0,D0,bsz0,lr0 to avoid large exponents.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Typical scales for normalization (midpoints of the training range)\n_P0 = 1e8          # ~1e8 parameters\n_D0 = 1e10         # ~1e10 training tokens\n_BSZ0 = 512.0      # batch size\n_LR0 = 1e-3        # learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the evolved scaling law.\n\n    Inputs:\n      data_points: array-like of shape (N,4) with columns [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 OR 2D array of shape (T,6)\n                   param order: [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      y_pred: if params is 1D, returns shape (N,),\n              if params is 2D (T sets), returns shape (N, T).\n    \"\"\"\n    # ensure array, then at least 2D\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, D_feat = X.shape\n    if D_feat != 4:\n        raise ValueError(f\"Expected data_points with 4 columns, got {D_feat}\")\n    # pack params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"Expected params with length 6, got {Pn}\")\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    # normalize\n    lr_n  = lr  / _LR0\n    bsz_n = bsz / _BSZ0\n    D_n   = D   / _D0\n    P_n   = Psize / _P0\n\n    # allocate output\n    y_all = np.zeros((N, T), dtype=float)\n\n    # loop over param sets\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # compute the power-law term in log\u2010space\n        # log_term = logA + aP*log(P_n) + aD*log(D_n) + aB*log(bsz_n) + aL*log(lr_n)\n        # then term = exp(log_term)\n        # we compute directly:\n        term = np.exp(logA) * (P_n ** aP) * (D_n ** aD) * (bsz_n ** aB) * (lr_n ** aL)\n        y_inf = np.exp(log_yinf)\n        # total prediction\n        y_all[:, t] = y_inf + term\n\n    # return\n    return y_all[:, 0] if T == 1 else y_all\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing mean squared error.\n\n    Returns the optimized parameter vector:\n      [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same number of rows.\")\n\n    # initial estimates\n    y_min = np.maximum(y.min(), 1e-6)\n    # start y_inf near the smallest observed loss\n    init_yinf = y_min * 0.8\n    init_log_yinf = np.log(init_yinf)\n    # rough scale for A: average of (y - y_inf)\n    avg_term = np.maximum(np.mean(y - init_yinf), 1e-6)\n    init_logA = np.log(avg_term)\n    # initial exponents (weak negative scaling)\n    init_alphas = np.array([-0.4, -0.3, -0.1, -0.05], dtype=float)  # [\u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr]\n    p0 = np.concatenate([ [init_logA], init_alphas, [init_log_yinf] ])\n\n    # bounds: allow exponents in a reasonable range\n    # logA: free, \u03b1_P, \u03b1_D in [-2,2], \u03b1_bsz, \u03b1_lr in [-1,1], log_yinf: free\n    bnds = [\n        (None, None),\n        (-2.0, 2.0),\n        (-2.0, 2.0),\n        (-1.0, 1.0),\n        (-1.0, 1.0),\n        (None, None)\n    ]\n\n    # objective: mean squared error in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # optimize with L-BFGS-B\n    res = minimize(\n        _obj,\n        p0,\n        bounds=bnds,\n        method='L-BFGS-B',\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if fitting fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.785), Excellent nmae (1.662)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEvolved 6-parameter power-law scaling law with an asymptotic loss floor,\nnormalized for numerical stability.  We model:\n\n  y_pred = y_inf + A * (P/P0)^\u03b1_P * (D/D0)^\u03b1_D * (bsz/BSZ0)^\u03b1_bsz * (lr/LR0)^\u03b1_lr\n\nwhere\n  P  = non-embedding parameter count,\n  D  = training data size (tokens),\n  bsz = batch size,\n  lr  = learning rate.\n\nWe reparameterize A and y_inf in log-space:\n  logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf.\n\nFitting is done by:\n  1) initialize y_inf near the minimum observed loss,\n  2) linear least-squares in log-domain for [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr],\n     using normalized features,\n  3) refine all 6 parameters by L-BFGS-B minimizing MSE on original losses.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# normalization constants (fixed, not data-dependent)\n_P0   = 5e8        # ~5e8 non-embedding parameters\n_D0   = 5e10       # ~5e10 tokens\n_BSZ0 = 512.0      # typical batch size\n_LR0  = 1e-3       # typical learning rate\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via the 6-parameter power law.\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 6 or 2D array of shape (T,6):\n                   [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n\n    Returns:\n      If params is 1D, returns y_pred (N,) array.\n      If params is (T,6), returns y_pred (N,T) array.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float)\n    # ensure param sets in rows\n    if p.ndim == 1:\n        p = p[None, :]\n    T, Pn = p.shape\n    if Pn != 6:\n        raise ValueError(f\"scaling_law_func: expected 6 params per set, got {Pn}\")\n\n    # unpack features\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    # normalize and take logs\n    xL = np.log(lr  / _LR0)\n    xB = np.log(bsz / _BSZ0)\n    xD = np.log(D   / _D0)\n    xP = np.log(Psize / _P0)\n\n    # prepare output\n    y_all = np.zeros((N, T), dtype=float)\n    for t in range(T):\n        logA, aP, aD, aB, aL, log_yinf = p[t]\n        # power-law term\n        term = np.exp(logA + aP*xP + aD*xD + aB*xB + aL*xL)\n        y_inf = np.exp(log_yinf)\n        y_all[:, t] = y_inf + term\n\n    return y_all[:, 0] if T == 1 else y_all\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by minimizing MSE on observed losses.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D array of length 6:\n              [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: mismatch between data points and losses\")\n\n    # avoid non-positive before subtracting floor or logging\n    y = np.maximum(y, 1e-12)\n    # initial y_inf near minimum observed loss\n    y_min = np.min(y)\n    y_inf0 = max(0.8 * y_min, 1e-12)\n    # build target z = y - y_inf0, shift to positive if needed\n    z = y - y_inf0\n    if np.any(z <= 0):\n        z += (float(abs(np.min(z))) + 1e-8)\n    log_z = np.log(z)\n\n    # unpack and normalize features\n    lr    = np.maximum(X[:, 0], 1e-12)\n    bsz   = np.maximum(X[:, 1], 1e-12)\n    D     = np.maximum(X[:, 2], 1e-12)\n    Psize = np.maximum(X[:, 3], 1e-12)\n\n    xL = np.log(lr  / _LR0)\n    xB = np.log(bsz / _BSZ0)\n    xD = np.log(D   / _D0)\n    xP = np.log(Psize / _P0)\n\n    # design matrix for initial linear LS: [1, xP, xD, xB, xL]\n    M = np.vstack([np.ones(N), xP, xD, xB, xL]).T\n    # solve least squares: log_z \u2248 M @ sol\n    sol, *_ = np.linalg.lstsq(M, log_z, rcond=None)\n    # initialize parameter vector [logA, \u03b1_P, \u03b1_D, \u03b1_bsz, \u03b1_lr, log_y_inf]\n    p0 = np.concatenate([sol, [np.log(y_inf0)]])\n\n    # bounds for refine:\n    #   logA: unrestricted\n    #   \u03b1_P,\u03b1_D in [-3,3], \u03b1_bsz,\u03b1_lr in [-3,3]\n    #   log_y_inf \u2264 log(y_min)\n    bnds = [\n        (None, None),\n        (-3.0, 3.0),\n        (-3.0, 3.0),\n        (-3.0, 3.0),\n        (-3.0, 3.0),\n        (None, np.log(y_min))\n    ]\n\n    # objective: MSE in original loss space\n    def _obj(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # refine by L-BFGS-B\n    try:\n        res = minimize(_obj, p0, method='L-BFGS-B', bounds=bnds,\n                       options={'ftol':1e-12, 'maxiter':1000})\n        if res.success:\n            return res.x\n        else:\n            return p0\n    except Exception:\n        # fallback to initial guess\n        return p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef _build_design_matrix(logX):\n    \"\"\"\n    Build a second\u2010order polynomial design matrix in the log\u2010domain.\n    Inputs:\n      logX: array of shape (N,4) with columns\n            [log(lr), log(bsz), log(data_size), log(non_embedding_param_size)]\n    Returns:\n      Phi: array of shape (N,15) with columns\n           [1,\n            logX_i,\n            (logX_i)^2,\n            logX_i * logX_j  for i<j]\n    \"\"\"\n    N, F = logX.shape\n    # total terms = 1 intercept + F linear + F quadratic + F*(F-1)/2 interactions\n    P = 1 + F + F + (F*(F-1))//2\n    Phi = np.empty((N, P), dtype=np.float64)\n\n    # intercept\n    Phi[:, 0] = 1.0\n\n    # linear terms\n    idx = 1\n    Phi[:, idx:idx+F] = logX\n    idx += F\n\n    # quadratic terms\n    Phi[:, idx:idx+F] = logX**2\n    idx += F\n\n    # pairwise interaction terms\n    for i in range(F):\n        for j in range(i+1, F):\n            Phi[:, idx] = logX[:, i] * logX[:, j]\n            idx += 1\n\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 2nd\u2010order log\u2010polynomial.\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 15 of fitted coefficients.\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    P_expected = 1 + F + F + (F*(F-1))//2\n    if p.size != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.size}\")\n\n    # avoid log of zero or negatives\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n\n    # build design matrix and predict in log\u2010domain\n    Phi = _build_design_matrix(logX)   # shape (N,15)\n    log_pred = Phi.dot(p)              # shape (N,)\n\n    # back to original loss space\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 2nd\u2010order log\u2010polynomial scaling law via weighted,\n    differential\u2010ridge regression in closed form.\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n    Returns:\n      params: numpy array of length 15 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log issues\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)    # shape (N,4)\n    logy = np.log(y_safe)    # shape (N,)\n\n    # design matrix\n    Phi = _build_design_matrix(logX)   # shape (N,15)\n    _, P = Phi.shape\n\n    # compute sample weights to emphasize large\u2010scale configs\n    # here we weight by combined size of data and params\n    weight_signal = logX[:, 2] + logX[:, 3]\n    median_ws = np.median(weight_signal)\n    w = np.exp(0.5 * (weight_signal - median_ws))   # shape (N,)\n\n    # build weighted normal equations\n    W_sqrt = np.sqrt(w)[:, None]      # shape (N,1)\n    Phi_w = Phi * W_sqrt              # each row scaled by sqrt(w_i)\n    y_w   = logy * W_sqrt.ravel()     # shape (N,)\n\n    A = Phi_w.T.dot(Phi_w)            # shape (15,15)\n    b = Phi_w.T.dot(y_w)              # shape (15,)\n\n    # differential ridge regularization\n    # intercept index = 0 (no regularization)\n    # linear terms     = indices 1..F\n    # quadratic terms  = indices F+1..2F\n    # interactions     = indices 2F+1..P-1\n    idx_lin_start   = 1\n    idx_lin_end     = 1 + F\n    idx_quad_start  = idx_lin_end\n    idx_quad_end    = idx_quad_start + F\n    idx_int_start   = idx_quad_end\n    idx_int_end     = P\n\n    # small ridge for linear, moderate for quad, stronger for interactions\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_inter = 1e-2\n\n    for i in range(idx_lin_start, idx_lin_end):\n        A[i, i] += ridge_lin\n    for i in range(idx_quad_start, idx_quad_end):\n        A[i, i] += ridge_quad\n    for i in range(idx_int_start, idx_int_end):\n        A[i, i] += ridge_inter\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\n\nExplanation of key choices:\n- We model log(loss) as a 2nd\u2010order polynomial in the log\u2010features (lr, bsz, data_size, non\u2010embedding parameter count), yielding 15 coefficients (intercept, linear, quadratic, and pairwise interaction terms).\n- We fit in closed form via weighted ridge regression:\n  \u2022 We weight examples by an exponential function of (log data_size + log param_size) to emphasize large\u2010scale configurations.\n  \u2022 We apply differential ridge strengths (very small on linear terms, moderate on quadratic, stronger on interaction terms) for numerical stability.\n- The prediction function simply exponentiates the polynomial in the log\u2010domain.\nThis approach improves cross\u2010scale generalization, numerical stability, and can be fitted reliably with limited data."]}}}