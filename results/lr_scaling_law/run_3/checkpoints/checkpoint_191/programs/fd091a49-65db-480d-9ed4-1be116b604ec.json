{"id": "fd091a49-65db-480d-9ed4-1be116b604ec", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter 2nd-order log-polynomial scaling law:\n    \n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n    \n    where L_x = log(x), for x = [lr, bsz, data_size, non_embedding_param_size].\n    y_pred is exp(log(y_pred)).\n    \n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10: coefficients [p0\u2026p9]\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),        # intercept\n        L_lr,              # linear lr\n        L_bsz,             # linear bsz\n        L_data,            # linear data_size\n        L_param,           # linear non_embedding_param_size\n        L_lr**2,           # quadratic lr\n        L_bsz**2,          # quadratic bsz\n        L_data**2,         # quadratic data_size\n        L_param**2,        # quadratic non_embedding_param_size\n        L_data * L_param   # interaction: data \u00d7 model size\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain:\n    \n      minimize ||\u03a6 p - log(y)||^2 + \u03bb||p_{1:}||^2\n    \n    where \u03a6 is the design matrix built from log-features.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients [p0\u2026p9].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge penalty (do not regularize intercept)\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge * np.eye(P - 1)\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6c908600-9d12-460a-acb7-ec42727d88cb", "generation": 6, "timestamp": 1754809753.943887, "iteration_found": 188, "metrics": {"nmse": 0.3868934976149482, "nmae": 0.7363985304629478, "r2": 0.6131065023850518, "combined_score": 0.7210358990936997}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 40.96322458991165, "nmae": 8.108392368272721, "r2": -39.96322458991165, "combined_score": 0.023830389818050576}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between learning rate, batch size, data size, model parameters and training loss.\n\nYou are allowed to decide the number of parameters in the scaling law function.\n\nFocus on mathematical accuracy across different hyperparameter scales, cross-configuration generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [lr, bsz, data_size, non_embedding_param_size] - 4D input\n- Labels: lm loss - scalar output\n- lr: learning rate\n- bsz: batch size\n- data_size: amount of training data\n- non_embedding_param_size: number of non-embedding parameters in the model\n- lm loss: language model loss (filtered to <= 4.0 to remove outliers)\n- Data explores the relationship between training hyperparameters and model performance\n- Test set consists of points with the largest data_size or non_embedding_param_size\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # lr: Array of learning rates\n    # bsz: Array of batch sizes\n    # data_size: Array of data sizes\n    # non_embedding_param_size: Array of non-embedding parameter sizes\n    # Returns: Predicted lm loss values\n    - Model parameters (N) range: ~214M to ~1B parameters\n    - Training tokens (D) range: 4B to 100B tokens\n    - Learning rates range: 1.2e-4 to 2.2e-2\n    - Batch sizes range: 16 to 4096\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,4) array with columns [lr, bsz, data_size, non_embedding_param_size]\n    # loss_values: Array of corresponding lm loss values\n    # Returns: Optimized parameters \n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 40.9632\n- nmae: 8.1084\n- r2: -39.9632\n- combined_score: 0.0238\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3869, nmae: 0.7364, r2: 0.6131, combined_score: 0.7210\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 2 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y = p0\n            + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n            + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n            + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input with 4 features, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # add ridge to all entries except intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n### Program 3 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters using a\n    simplified 2nd\u2010order log\u2010polynomial scaling law with one key interaction.\n\n    Model in the log\u2010domain:\n      log(y_pred) = p\u2080\n                   + p\u2081\u00b7L_lr   + p\u2082\u00b7L_bsz   + p\u2083\u00b7L_data   + p\u2084\u00b7L_param\n                   + p\u2085\u00b7L_lr\u00b2  + p\u2086\u00b7L_bsz\u00b2  + p\u2087\u00b7L_data\u00b2  + p\u2088\u00b7L_param\u00b2\n                   + p\u2089\u00b7(L_data\u00b7L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array\u2010like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10 of model coefficients:\n                   [p\u2080,\n                    p\u2081_lr, p\u2082_bsz, p\u2083_data, p\u2084_param,\n                    p\u2085_lr\u00b2, p\u2086_bsz\u00b2, p\u2087_data\u00b2, p\u2088_param\u00b2,\n                    p\u2089_data\u00d7param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = (\n        logX[:, 0],\n        logX[:, 1],\n        logX[:, 2],\n        logX[:, 3],\n    )\n\n    # build design matrix (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param,\n    #  L_lr^2, L_bsz^2, L_data^2, L_param^2,\n    #  L_data * L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # log\u2010domain prediction\n    log_pred = Phi.dot(p)\n    # back to original loss scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # align shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n\n    # Extract log\u2010features\n    L_lr = logX[:, 0]\n    L_bsz = logX[:, 1]\n    L_data = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix \u03a6 (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    # (\u03a6\u1d40\u03a6 + \u03bb\u00b7I_{1:}) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non\u2010intercept terms\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Performs well on nmse (0.3869), Performs well on nmae (0.7364), Performs well on r2 (0.6131), Performs well on combined_score (0.7210)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6144)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10\u2010parameter log\u2010polynomial scaling law:\n      log y_pred = p0\n                 + p1*L_lr + p2*L_bsz + p3*L_data + p4*L_param\n                 + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                 + p9*(L_data * L_param)\n    where L_x = log(x).  The result is exponentiated back to normal space.\n    Args:\n      data_points: array\u2010like, shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array\u2010like, shape (10,)\n    Returns:\n      y_pred:      np.ndarray, shape (N,), predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negative values\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones_like(L_lr),    # intercept\n        L_lr,                  # log(lr)\n        L_bsz,                 # log(bsz)\n        L_data,                # log(data_size)\n        L_param,               # log(param_size)\n        L_lr**2,               # (log(lr))^2\n        L_bsz**2,              # (log(bsz))^2\n        L_data**2,             # (log(data_size))^2\n        L_param**2,            # (log(param_size))^2\n        L_data * L_param       # cross term\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10\u2010parameter log\u2010polynomial scaling law by closed\u2010form\n    ridge\u2010regularized regression in the log\u2010domain.\n    Args:\n      data_points: array\u2010like, shape (N,4)\n      loss_values: array\u2010like, shape (N,)\n    Returns:\n      params:      np.ndarray, shape (10,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log\u2010transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix\n    Phi = np.column_stack([\n        np.ones(N),      # intercept\n        L_lr,            # log(lr)\n        L_bsz,           # log(bsz)\n        L_data,          # log(data_size)\n        L_param,         # log(param_size)\n        L_lr**2,         # (log(lr))^2\n        L_bsz**2,        # (log(bsz))^2\n        L_data**2,       # (log(data_size))^2\n        L_param**2,      # (log(param_size))^2\n        L_data * L_param # cross term\n    ])\n\n    # ridge\u2010regularized normal equations\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # regularize all but the intercept\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6144)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter log-polynomial scaling law:\n    \n      log y_pred = p0\n                 + p1 * log(lr)\n                 + p2 * log(bsz)\n                 + p3 * log(data_size)\n                 + p4 * log(non_embedding_param_size)\n                 + p5 * [log(lr)]^2\n                 + p6 * [log(bsz)]^2\n                 + p7 * [log(data_size)]^2\n                 + p8 * [log(non_embedding_param_size)]^2\n                 + p9 * (log(data_size) * log(non_embedding_param_size))\n                 \n    Then y_pred = exp(log y_pred).\n    \n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10 of fitted coefficients.\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6: intercept, linear, quadratic, one cross term\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr,                 # log(lr)\n        L_bsz,                # log(bsz)\n        L_data,               # log(data_size)\n        L_param,              # log(non_embedding_param_size)\n        L_lr**2,              # [log(lr)]^2\n        L_bsz**2,             # [log(bsz)]^2\n        L_data**2,            # [log(data_size)]^2\n        L_param**2,           # [log(non_embedding_param_size)]^2\n        L_data * L_param      # cross term\n    ])\n    \n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via closed-form ridge regression\n    in the log-domain. Minimizes squared error on log(loss).\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # ensure correct shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: number of data_points and loss_values must match\")\n    \n    # avoid log(0) or negative\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n    \n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n    \n    # build design matrix \u03a6\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n    \n    # ridge regularization strength\n    ridge = 1e-6\n    \n    # normal equations: (\u03a6\u1d40 \u03a6 + \u03bb I) p = \u03a6\u1d40 logy\n    A = Phi.T.dot(Phi)\n    # do not regularize intercept term\n    A[1:, 1:] += ridge * np.eye(9)\n    b = Phi.T.dot(logy)\n    \n    # solve for parameters in log-domain\n    params = np.linalg.solve(A, b)\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict language\u2010model loss from hyperparameters via a simplified\n    2nd\u2010order log\u2010polynomial with one cross\u2010interaction.\n\n    Model form in the log\u2010domain:\n      log(y_pred) = p0\n                  + p1*L_lr   + p2*L_bsz   + p3*L_data   + p4*L_param\n                  + p5*L_lr^2 + p6*L_bsz^2 + p7*L_data^2 + p8*L_param^2\n                  + p9*(L_data * L_param)\n\n    where L_x = log(x), and x = [lr, bsz, data_size, non_embedding_param_size].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    P_expected = 10\n    if p.shape[0] != P_expected:\n        raise ValueError(f\"Expected {P_expected} parameters, got {p.shape[0]}\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    logX = np.log(X_clipped)\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    # [1, L_lr, L_bsz, L_data, L_param, L_lr^2, L_bsz^2, L_data^2, L_param^2, L_data*L_param]\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    log_pred = Phi.dot(p)       # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 2nd\u2010order log\u2010polynomial scaling law via\n    ridge\u2010regularized closed\u2010form regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    X_clipped = np.maximum(X, 1e-12)\n    y_clipped = np.maximum(y, 1e-12)\n\n    logX = np.log(X_clipped)\n    logy = np.log(y_clipped)\n\n    L_lr    = logX[:, 0]\n    L_bsz   = logX[:, 1]\n    L_data  = logX[:, 2]\n    L_param = logX[:, 3]\n\n    # build design matrix Phi (N x 10)\n    Phi = np.stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ], axis=1)\n\n    # ridge\u2010regularized normal equations\n    P = Phi.shape[1]   # should be 10\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge on all terms except intercept\n    diag_idx = np.arange(1, P)\n    A[diag_idx, diag_idx] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a compact 10-parameter\n    2nd-order log-polynomial scaling law with one key interaction.\n\n    Model in the log-domain:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data   + p4*L_param\n                   + p5*(L_lr**2) + p6*(L_bsz**2) + p7*(L_data**2) + p8*(L_param**2)\n                   + p9*(L_data * L_param)\n\n    where L_x = log(x) for x = [lr, bsz, data_size, non_embedding_param_size].\n\n    Args:\n      data_points: array-like of shape (N,4) with columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 10:\n                   [p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: numpy array of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: Expected input with 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: Expected 10 parameters, got {p.size}\")\n\n    # avoid log(0) or negatives\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    # unpack log-features\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 10)\n    Phi = np.column_stack([\n        np.ones(N),         # intercept\n        L_lr,               # linear lr\n        L_bsz,              # linear bsz\n        L_data,             # linear data_size\n        L_param,            # linear non_embedding_param_size\n        L_lr**2,            # quadratic lr\n        L_bsz**2,           # quadratic bsz\n        L_data**2,          # quadratic data_size\n        L_param**2,         # quadratic non_embedding_param_size\n        L_data * L_param    # interaction: data_size \u00d7 param_size\n    ])\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 10-parameter log-polynomial scaling law via\n    closed-form ridge-regularized regression in the log-domain.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 10 of fitted coefficients:\n              [p0,\n               p1_lr, p2_bsz, p3_data, p4_param,\n               p5_lr2, p6_bsz2, p7_data2, p8_param2,\n               p9_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: Expected input with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: Number of data points and loss values must match\")\n\n    # floor to avoid log(0) or negatives\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform features and target\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix (N x 10) consistent with prediction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # closed-form ridge regression: solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.6144, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a compact 10-parameter 2nd-order log-polynomial scaling law:\n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz\n                   + p3*L_data  + p4*L_param\n                   + p5*L_lr^2  + p6*L_bsz^2\n                   + p7*L_data^2 + p8*L_param^2\n                   + p9*(L_data * L_param)\n    where L_x = log(x) and x = [lr, bsz, data_size, non_embedding_param_size].\n    Exponentiate at the end to get y_pred.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,4)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),           # intercept\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param      # key interaction\n    ])\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter scaling law via closed-form ridge regression\n    in the log-domain.  We add a small ridge penalty on all but the intercept\n    for numerical stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure shapes align\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    # log-transform\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # normal equations with ridge on non-intercept terms\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge\n    b = Phi.T.dot(logy)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 1.2131, Type: High-Performer)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters using a compact, 7-parameter\n    log-domain model:\n\n        z_lr      = log(lr)\n        z_bsz     = log(batch size)\n        z_data    = log(data size)\n        z_param   = log(non-embedding parameter size)\n\n        log(loss) = c0\n                   + c1 * z_param\n                   + c2 * z_data\n                   + c3 * z_bsz\n                   + c4 * z_lr\n                   + c5 * (z_lr)^2\n                   + c6 * (z_param * z_data)\n\n    Args:\n      data_points: array-like of shape (N,4)\n                   columns: [lr, bsz, data_size, non_embedding_param_size]\n      params:      length-7 vector [c0, c1\u2026c6]\n\n    Returns:\n      y_pred: array of length N of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"Expected input shape (N,4), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    # log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0               # intercept\n    Phi[:, 1] = z_param           # model size effect\n    Phi[:, 2] = z_data            # data size effect\n    Phi[:, 3] = z_bsz             # batch size effect\n    Phi[:, 4] = z_lr              # linear lr effect\n    Phi[:, 5] = z_lr * z_lr       # quadratic lr term\n    Phi[:, 6] = z_param * z_data  # model\u00d7data interaction\n\n    # predict in log-domain and back-transform\n    log_pred = Phi.dot(p)         # shape (N,)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-domain model via ridge-regularized\n    least squares in closed form.\n\n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: length-7 numpy vector of fitted coefficients\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected data_points with 4 features, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # floor to avoid log(0)\n    X = np.maximum(X, 1e-12)\n    y = np.maximum(y, 1e-12)\n\n    # compute log-features\n    z_lr    = np.log(X[:, 0])\n    z_bsz   = np.log(X[:, 1])\n    z_data  = np.log(X[:, 2])\n    z_param = np.log(X[:, 3])\n\n    # build design matrix (N\u00d77)\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = z_param\n    Phi[:, 2] = z_data\n    Phi[:, 3] = z_bsz\n    Phi[:, 4] = z_lr\n    Phi[:, 5] = z_lr * z_lr\n    Phi[:, 6] = z_param * z_data\n\n    # target in log-space\n    logy = np.log(y)\n\n    # closed-form ridge solve: (\u03a6\u1d40\u03a6 + \u03bbI\u2081:\u2087) p = \u03a6\u1d40 logy\n    ridge = 1e-6\n    A = Phi.T.dot(Phi)\n    # apply ridge only to non-intercept terms\n    A[1:, 1:] += ridge * np.eye(6)\n    b = Phi.T.dot(logy)\n\n    params = np.linalg.solve(A, b)\n    return params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (8.789), Excellent nmae (3.750)\n\n\n### Inspiration 5 (Score: 0.6562, Type: Alternative)\n```python\n\"\"\"\nImproved scaling\u2010law model for LLM training hyperparameters.\n\nWe model the LM loss as an additive floor plus an exponential of a\n2nd\u2010order polynomial in the log\u2010features:\n\n    y_pred = y_inf + exp( p0\n                         + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                         + p5*L_lr^2  + p6*L_bsz^2  + p7*L_data^2  + p8*L_param^2\n                         + p9*(L_data * L_param) )\n\nwhere L_x = log(x), x = [lr, bsz, data_size, non_embedding_param_size],\nand y_inf is a learned asymptotic loss floor. We fit y_inf and the\npolynomial coefficients by alternating a weighted, differential\u2010ridge\nregression for the log\u2010term and a weighted\u2010mean update for the floor.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss with an additive floor and a 2nd\u2010order log\u2010polynomial.\n\n    Args:\n      data_points: array\u2010like of shape (N,4) columns\n                   [lr, bsz, data_size, non_embedding_param_size]\n      params:      1D array of length 11:\n                   [y_inf,\n                    p0,\n                    p1_lr, p2_bsz, p3_data, p4_param,\n                    p5_lr2, p6_bsz2, p7_data2, p8_param2,\n                    p9_data_param]\n\n    Returns:\n      y_pred: 1D numpy array of length N of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"Expected input with 4 features, got {F}\")\n    p_all = np.asarray(params, dtype=float).ravel()\n    if p_all.size != 11:\n        raise ValueError(f\"Expected 11 parameters, got {p_all.size}\")\n\n    # unpack floor and polynomial coefficients\n    y_inf = p_all[0]\n    p = p_all[1:]\n\n    # avoid zero/negative inputs\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix: intercept, linear, quadratic, one interaction\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    return y_inf + np.exp(Phi.dot(p))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law (floor + log\u2010polynomial) by alternating\n    weighted, differential\u2010ridge regression for the polynomial\n    and a weighted\u2010mean update for the floor.\n\n    Args:\n      data_points: array\u2010like of shape (N,4)\n      loss_values: array\u2010like of shape (N,)\n\n    Returns:\n      params: 1D numpy array of length 11:\n              [y_inf,\n               p0,\n               p1_lr, p2_bsz, p3_data, p4_param,\n               p5_lr2, p6_bsz2, p7_data2, p8_param2,\n               p9_data_param]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, F = X.shape\n    if F != 4 or y.shape[0] != N:\n        raise ValueError(\"Expected data_points shape (N,4) and matching loss_values length\")\n\n    # safe log\u2010features\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix (N,10)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr, L_bsz, L_data, L_param,\n        L_lr**2, L_bsz**2, L_data**2, L_param**2,\n        L_data * L_param\n    ])\n\n    # sample weights to emphasize larger scale configs\n    scale_sig = L_data + L_param\n    med_sig = np.median(scale_sig)\n    w = np.exp(0.5 * (scale_sig - med_sig))\n    w_sqrt = np.sqrt(w)\n\n    # ridge strengths\n    ridge_lin   = 1e-6\n    ridge_quad  = 1e-4\n    ridge_cross = 1e-2\n\n    # initialize floor near 90% of minimum observed loss\n    y_inf = max(np.min(y) * 0.9, 0.0)\n    eps = 1e-12\n\n    # alternating updates\n    for _ in range(5):\n        # subtract floor and log\n        z = y - y_inf\n        z = np.maximum(z, eps)\n        logz = np.log(z)\n\n        # weighted normal equations\n        Phi_w = Phi * w_sqrt[:, None]\n        yz = logz * w_sqrt\n        A = Phi_w.T.dot(Phi_w)\n        b = Phi_w.T.dot(yz)\n\n        # differential ridge penalties on polynomial terms\n        # intercept idx=0 no penalty\n        for i in range(1, 5):\n            A[i, i] += ridge_lin\n        for i in range(5, 9):\n            A[i, i] += ridge_quad\n        A[9, 9] += ridge_cross\n\n        # solve for polynomial coefficients\n        p = np.linalg.solve(A, b)\n\n        # update floor as weighted mean of residuals\n        term = np.exp(Phi.dot(p))\n        resid = y - term\n        y_inf = np.maximum(0.0, np.dot(w, resid) / np.sum(w))\n\n    # pack parameters\n    params = np.empty(11, dtype=float)\n    params[0]  = y_inf\n    params[1:] = p\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (1.039), Alternative r2 approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss from hyperparameters via a 5-parameter\n    power-law scaling plus asymptotic floor:\n\n      y_pred = y_inf + A * P^\u03b1_P * D^\u03b1_D * (lr * bsz)^\u03b1_E\n\n    where:\n      P   = non-embedding parameter count\n      D   = data_size (tokens)\n      lr  = learning rate\n      bsz = batch size\n\n    params = [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf]\n\n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 5: [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf]\n\n    Returns:\n      y_pred:      numpy array of shape (N,) of predicted LM losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features per point, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"scaling_law_func: expected 5 parameters, got {p.size}\")\n\n    # unpack features\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n\n    # compute combined term E = lr * bsz\n    E = lr * bsz\n\n    # ensure positivity\n    eps = 1e-20\n    logP = np.log(np.maximum(Psize, eps))\n    logD = np.log(np.maximum(D, eps))\n    logE = np.log(np.maximum(E, eps))\n\n    # unpack params\n    logA, alpha_P, alpha_D, alpha_E, log_yinf = p\n\n    # compute power-law term in log-space\n    #   log_term = logA + \u03b1_P logP + \u03b1_D logD + \u03b1_E logE\n    log_term = logA + alpha_P * logP + alpha_D * logD + alpha_E * logE\n\n    # exponentiate\n    term = np.exp(log_term)\n\n    # add floor\n    y_inf = np.exp(log_yinf)\n    y_pred = y_inf + term\n\n    return y_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing the mean squared error\n    in log-loss space:\n\n      MSE( log(y_pred) - log(y_true) )\n\n    with box constraints to keep the asymptotic floor reasonable.\n\n    Returns params = [logA, \u03b1_P, \u03b1_D, \u03b1_E, log_y_inf].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features per point, got {F}\")\n    if y.size != N:\n        raise ValueError(\"fit_scaling_law: number of data points and loss values must match\")\n\n    # ensure positivity\n    eps = 1e-20\n    y_safe = np.maximum(y, eps)\n    lr    = X[:, 0]\n    bsz   = X[:, 1]\n    D     = X[:, 2]\n    Psize = X[:, 3]\n    E     = lr * bsz\n\n    logP = np.log(np.maximum(Psize, eps))\n    logD = np.log(np.maximum(D, eps))\n    logE = np.log(np.maximum(E, eps))\n    logy = np.log(y_safe)\n\n    # initial guess based on simple power-law and small floor\n    min_y = np.min(y_safe)\n    p0 = np.array([\n        0.0,            # logA\n       -0.5,            # \u03b1_P\n       -0.3,            # \u03b1_D\n       -0.2,            # \u03b1_E\n        np.log(min_y * 0.05 + eps)  # log_y_inf (5% of minimum observed)\n    ], dtype=float)\n\n    # bounds: exponents in reasonable range, floor below half the minimum observed\n    bounds = [\n        (None, None),                   # logA free\n        (-5.0, 5.0),                    # \u03b1_P\n        (-5.0, 5.0),                    # \u03b1_D\n        (-5.0, 5.0),                    # \u03b1_E\n        (None, np.log(min_y * 0.5 + eps))  # log_y_inf \u2264 log(0.5 * min_y)\n    ]\n\n    def objective(p):\n        logA, aP, aD, aE, log_yinf = p\n        # compute log_term\n        lt = logA + aP * logP + aD * logD + aE * logE\n        # stable log-sum-exp: log(y_inf + exp(lt))\n        M = np.maximum(log_yinf, lt)\n        logy_pred = M + np.log(np.exp(log_yinf - M) + np.exp(lt - M))\n        return np.mean((logy_pred - logy) ** 2)\n\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 2000, 'ftol': 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0.copy()\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict LM loss using a 10-parameter 2nd-order log-polynomial scaling law:\n    \n      log(y_pred) = p0\n                   + p1*L_lr    + p2*L_bsz    + p3*L_data    + p4*L_param\n                   + p5*(L_lr)^2 + p6*(L_bsz)^2 + p7*(L_data)^2 + p8*(L_param)^2\n                   + p9*(L_data * L_param)\n    \n    where L_x = log(x), for x = [lr, bsz, data_size, non_embedding_param_size].\n    y_pred is exp(log(y_pred)).\n    \n    Args:\n      data_points: array-like of shape (N,4): [lr, bsz, data_size, non_embedding_param_size]\n      params:      array-like of length 10: coefficients [p0\u2026p9]\n    \n    Returns:\n      y_pred: np.ndarray of shape (N,) of predicted LM losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"scaling_law_func: expected 4 features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 10:\n        raise ValueError(f\"scaling_law_func: expected 10 parameters, got {p.size}\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    logX = np.log(X_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # build design matrix \u03a6 (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),        # intercept\n        L_lr,              # linear lr\n        L_bsz,             # linear bsz\n        L_data,            # linear data_size\n        L_param,           # linear non_embedding_param_size\n        L_lr**2,           # quadratic lr\n        L_bsz**2,          # quadratic bsz\n        L_data**2,         # quadratic data_size\n        L_param**2,        # quadratic non_embedding_param_size\n        L_data * L_param   # interaction: data \u00d7 model size\n    ])\n\n    log_pred = Phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 10-parameter log-polynomial scaling law via closed-form\n    ridge-regularized regression in the log-domain:\n    \n      minimize ||\u03a6 p - log(y)||^2 + \u03bb||p_{1:}||^2\n    \n    where \u03a6 is the design matrix built from log-features.\n    \n    Args:\n      data_points: array-like of shape (N,4)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: np.ndarray of length 10 of fitted coefficients [p0\u2026p9].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    if F != 4:\n        raise ValueError(f\"fit_scaling_law: expected 4 features, got {F}\")\n    if y.shape[0] != N:\n        raise ValueError(\"fit_scaling_law: data_points and loss_values must have same length\")\n\n    # floor inputs to avoid log(0)\n    X_safe = np.maximum(X, 1e-12)\n    y_safe = np.maximum(y, 1e-12)\n\n    logX = np.log(X_safe)\n    logy = np.log(y_safe)\n    L_lr, L_bsz, L_data, L_param = logX.T\n\n    # design matrix (N\u00d710)\n    Phi = np.column_stack([\n        np.ones(N),\n        L_lr,\n        L_bsz,\n        L_data,\n        L_param,\n        L_lr**2,\n        L_bsz**2,\n        L_data**2,\n        L_param**2,\n        L_data * L_param\n    ])\n\n    # ridge penalty (do not regularize intercept)\n    ridge = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi)\n    A[1:, 1:] += ridge * np.eye(P - 1)\n    b = Phi.T.dot(logy)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}