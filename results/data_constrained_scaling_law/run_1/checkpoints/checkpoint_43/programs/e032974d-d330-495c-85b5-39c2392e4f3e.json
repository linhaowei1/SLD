{"id": "e032974d-d330-495c-85b5-39c2392e4f3e", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended power\u2010law scaling with dataset\u2010diversity factor and additive floor:\n      loss \u2248 exp(a) * tokens^b * params^c * (unique_tokens / tokens)^d + f\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      sequence of length 5 [a, b, c, d, f]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"params must have length 5 [a,b,c,d,f], got {p.size}\")\n\n    a, b, c, d, f = p\n    eps = 1e-12\n    tokens = X[:, 0] + eps\n    model_params = X[:, 1] + eps\n    unique_tokens = X[:, 2] + eps\n\n    # dataset diversity ratio\n    ratio = unique_tokens / tokens\n\n    # primary power\u2010law term\n    main_term = np.exp(a) * (tokens ** b) * (model_params ** c) * (ratio ** d)\n    return main_term + f\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter model by minimizing MSE in log\u2010space:\n      loss_pred = exp(a)*tokens^b*params^c*(unique/tokens)^d + f\n\n    Returns:\n      params_opt: numpy array [a, b, c, d, f]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # keep only finite, positive losses for log\u2010space fitting\n    mask = np.isfinite(y) & (y > 0)\n    Xp = X[mask]\n    yp = y[mask]\n    if yp.size == 0:\n        # no valid data to fit; return defaults\n        return np.zeros(5, dtype=float)\n\n    eps = 1e-12\n    tokens = Xp[:, 0] + eps\n    model_params = Xp[:, 1] + eps\n    unique_tokens = Xp[:, 2] + eps\n    ratio = unique_tokens / tokens\n\n    # initial floor f0 as small fraction of min loss\n    f0 = max(0.0, np.min(yp) * 1e-3)\n\n    # prepare for linear regression in log\u2010domain: log(yp - f0)\n    y_adjusted = yp - f0\n    # ensure positivity\n    y_adjusted = np.maximum(y_adjusted, eps)\n    log_tokens = np.log(tokens)\n    log_params = np.log(model_params)\n    log_ratio = np.log(ratio)\n    y_log    = np.log(y_adjusted)\n\n    # design matrix [1, log(tokens), log(params), log(ratio)]\n    N = yp.size\n    D = np.column_stack([np.ones(N), log_tokens, log_params, log_ratio])\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_init\n\n    # initial parameter vector\n    p0 = np.array([a0, b0, c0, d0, f0], dtype=float)\n    # bounds: a,b,c,d unbounded; f >= 0\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, None)]\n\n    # objective: MSE in log\u2010space to balance relative errors\n    def objective(p):\n        pred = scaling_law_func(Xp, p)\n        # ensure positive\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(yp)) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 1000})\n    if res.success and res.x.size == 5:\n        return res.x\n    else:\n        return p0", "language": "python", "parent_id": "999e9e8a-b3ac-43d9-9f0d-4a1194c38c4a", "generation": 3, "timestamp": 1754714765.9131572, "iteration_found": 43, "metrics": {"nmse": 0.3269346633404343, "nmae": 0.7276337890750054, "r2": 0.6730653366595657, "combined_score": 0.7536166079817324}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: Evaluation failed or timed out.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3529, nmae: 0.7787, r2: 0.6471, combined_score: 0.7391\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with nonnegative offsets:\n      log(loss) = a\n                + b\u00b7log(tokens + t0)\n                + c\u00b7log(params + p0)\n                + d\u00b7log(unique_tokens + u0)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent fits):\n                   [a, b, c, d, t0, p0, u0]\n                   If you pass only 4 parameters [a,b,c,d], the offsets\n                   t0,p0,u0 default to zero.\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    tokens = X[:, 0]\n    model_params = X[:, 1]\n    unique_toks = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    # ensure two-dimensional parameter array\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n\n    # allow backward\u2010compatibility if only 4 params given\n    if P == 4:\n        # pad with zero\u2010offsets\n        pad = np.zeros((M, 3), dtype=float)\n        p = np.hstack([p, pad])\n        P = 7\n\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,t0,p0,u0], got {P}\")\n\n    # unpack\n    a, b, c, d, t0, p0, u0 = p.T\n    # all offsets t0,p0,u0 are assumed \u2265 0\n\n    # broadcast shapes: (N,1) vs (M,) \u21d2 (N,M)\n    tokens_adj = tokens[:, None] + t0[None, :]\n    params_adj = model_params[:, None] + p0[None, :]\n    uniq_adj   = unique_toks[:, None] + u0[None, :]\n\n    # small eps to guard log(0) in edge cases\n    eps = 1e-12\n    log_pred = (\n        a[None, :]\n        + b[None, :] * np.log(tokens_adj + eps)\n        + c[None, :] * np.log(params_adj + eps)\n        + d[None, :] * np.log(uniq_adj   + eps)\n    )\n\n    preds = np.exp(log_pred)\n    # if single fit, return shape (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n    Learns 7 parameters [a,b,c,d,t0,p0,u0] with t0,p0,u0 constrained \u22650.\n\n    Returns:\n      np.ndarray of shape (7,)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only positive losses for log\u2010transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    eps = 1e-12\n    # preliminary log\u2010space regression to get [a,b,c,d]\n    X_log = np.log(X + eps)  # (N,3)\n    y_log = np.log(y + eps)  # (N,)\n\n    N = X_log.shape[0]\n    D = np.hstack([np.ones((N, 1)), X_log])  # (N,4)\n    # ordinary least squares init\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # initialize offsets small\n    init_offsets = np.array([1e-6, 1e-6, 1e-6])\n    p0 = np.concatenate([beta_init, init_offsets])  # shape (7,)\n\n    # bounds: (a,b,c,d) unbounded, (t0,p0,u0) \u2265 0\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, None)] * 3\n\n    # objective: MSE in log\u2010space\n    def obj(p):\n        a, b, c, d, t0, p0_off, u0 = p\n        tokens_adj = X[:, 0] + t0 + eps\n        params_adj = X[:, 1] + p0_off + eps\n        uniq_adj   = X[:, 2] + u0 + eps\n        pred_log = (\n            a\n            + b * np.log(tokens_adj)\n            + c * np.log(params_adj)\n            + d * np.log(uniq_adj)\n        )\n        return np.mean((pred_log - y_log) ** 2)\n\n    res = minimize(obj,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds)\n\n    p_opt = res.x if res.success else p0\n    return p_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.6294)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-linear scaling law with pairwise interactions.\n    Predict loss from [tokens, params, unique_tokens]:\n      log(loss) = w0\n                + w_t*log(tokens)\n                + w_p*log(params)\n                + w_u*log(unique_tokens)\n                + w_tp*log(tokens)*log(params)\n                + w_tu*log(tokens)*log(unique_tokens)\n                + w_pu*log(params)*log(unique_tokens)\n    Returns: loss = exp(log(loss)), clipped to avoid overflow.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must have length 7\")\n    # safe log transform\n    eps = 1e-12\n    logs = np.log(np.maximum(X, eps))\n    lt, lp, lu = logs[:,0], logs[:,1], logs[:,2]\n    # design matrix in log-domain\n    phi = np.stack([\n        np.ones_like(lt),\n        lt,\n        lp,\n        lu,\n        lt * lp,\n        lt * lu,\n        lp * lu\n    ], axis=1)  # shape (N,7)\n    log_pred = phi.dot(p)\n    # clip to avoid overflow/underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law using a two-step\n    ridge-regularized robust regression in log-space (Huber-style).\n    Returns params = [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # keep only positive targets for log\n    mask = y > 0\n    Xm = X[mask]\n    ym = y[mask]\n    if len(ym) == 0:\n        return np.zeros(7, dtype=float)\n    # log transform\n    eps = 1e-12\n    logs = np.log(np.maximum(Xm, eps))\n    lt, lp, lu = logs[:,0], logs[:,1], logs[:,2]\n    y_log = np.log(np.maximum(ym, eps))\n    # build design matrix phi\n    phi = np.stack([\n        np.ones_like(lt),\n        lt,\n        lp,\n        lu,\n        lt * lp,\n        lt * lu,\n        lp * lu\n    ], axis=1)  # shape (M,7)\n    M, P = phi.shape\n    # ridge regularization parameter\n    lam = 1e-6 * np.trace(phi.T.dot(phi)) / float(M)\n    # initial fit (unweighted)\n    A0 = phi.T.dot(phi) + lam * np.eye(P)\n    b0 = phi.T.dot(y_log)\n    try:\n        p0 = np.linalg.solve(A0, b0)\n    except np.linalg.LinAlgError:\n        p0 = np.linalg.lstsq(A0, b0, rcond=None)[0]\n    # compute residuals in log-space\n    r = phi.dot(p0) - y_log\n    # Huber-style robust weights\n    mad = np.median(np.abs(r))\n    if mad <= 0:\n        weights = np.ones_like(r)\n    else:\n        c = 1.345 * mad\n        abs_r = np.abs(r)\n        weights = np.where(abs_r <= c, 1.0, c / abs_r)\n    # apply weights\n    sw = np.sqrt(weights)\n    phi_w = phi * sw[:, None]\n    y_w = y_log * sw\n    # weighted ridge solve\n    A1 = phi_w.T.dot(phi_w) + lam * np.eye(P)\n    b1 = phi_w.T.dot(y_w)\n    try:\n        p_opt = np.linalg.solve(A1, b1)\n    except np.linalg.LinAlgError:\n        p_opt = np.linalg.lstsq(A1, b1, rcond=None)[0]\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3529), Performs well on nmae (0.7787), Performs well on r2 (0.6471), Performs well on combined_score (0.7391)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6241)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log-linear scaling law with additive floor:\n      loss \u2248 exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens))\n             + exp(c)\n    We parameterize floor = exp(c) so it stays non-negative without hard bounds.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,3) columns = [tokens, params, unique_tokens]\n      params:      length\u20105 array [a, b1, b2, b3, c]\n    Returns:\n      preds:       shape (N,) predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # if someone passed a flat list of length 3\n    if X.ndim == 1 and X.size == 3:\n        X = X.reshape(1, 3)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b1,b2,b3,c], got {p.size}\")\n\n    a, b1, b2, b3, c = p\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n    log_part = a \\\n               + b1 * X_log[:, 0] \\\n               + b2 * X_log[:, 1] \\\n               + b3 * X_log[:, 2]\n    # the main power\u2010law piece plus a floor = exp(c)\n    preds = np.exp(log_part) + np.exp(c)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in the original loss space:\n      loss_pred = exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens)) + exp(c)\n\n    Returns:\n      params: array([a, b1, b2, b3, c])\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # We'll initialize [a,b1,b2,b3] via a quick linear least squares\n    # in log-space (ignoring the floor), and start c = log(1e-3).\n    # Restrict to strictly positive losses for the log fit.\n    mask = (y > 0)\n    Xm = X[mask]\n    ym = y[mask]\n    X_log = np.log(Xm + 1e-12)           # (N_pos,3)\n    Y_log = np.log(ym + 1e-12)           # (N_pos,)\n    # design: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((X_log.shape[0],1)), X_log])  # (N_pos,4)\n    beta, *_ = np.linalg.lstsq(D, Y_log, rcond=None)\n\n    # initial guess:  [a,b1,b2,b3] from beta, c = log(1e-3)\n    init = np.zeros(5, dtype=float)\n    init[:4] = beta\n    init[4]   = np.log(1e-3)\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.1263)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM fine-tuning under data constraints.\n\nWe model loss as an additive floor plus a multiplicative monomial of data features:\n  loss \u2248 E + A \u00b7 tokens^(\u2212b) \u00b7 params^(\u2212c) \u00b7 unique_tokens^(\u2212d)\n\nParameters (5 total):\n  A: scaling amplitude for the multiplicative term\n  b: exponent on tokens\n  c: exponent on params\n  d: exponent on unique_tokens\n  E: irreducible loss floor\n\nThis form is simple (5 parameters \u2264 7), numerically stable with small offsets,\nand generalizes across data-constrained regimes.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data characteristics and scaling-law parameters.\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E]\n                   A \u2265 0, b,c,d \u2265 0, E \u2265 0\n\n    Returns:\n      preds: shape (N,) if params is length-5, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    # avoid zeros for power operations\n    X = np.maximum(X, 1e-12)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {P}\")\n    # unpack\n    A = p[:, 0]  # (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n    # compute each factor with broadcasting over N\u00d7T\n    t_pow = np.power(X[:, [0]], -b[None, :])  # tokens^(-b)\n    p_pow = np.power(X[:, [1]], -c[None, :])  # params^(-c)\n    u_pow = np.power(X[:, [2]], -d[None, :])  # unique_tokens^(-d)\n    # combine multiplicative term and add floor\n    pred = E[None, :] + A[None, :] * t_pow * p_pow * u_pow  # (N,T)\n    # if single param set, return (N,) vector\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing mean squared error\n    in the original loss domain using L-BFGS-B with positivity constraints.\n\n    Returns:\n      params_opt: array of length 5: [A, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positive features\n    X = np.maximum(X, 1e-12)\n    # mask out non-finite or negative losses if any\n    mask = np.isfinite(y)\n    X = X[mask]\n    y = y[mask]\n    # initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    A0 = max(y_max - y_min, 1e-3)\n    E0 = max(y_min * 0.5, 1e-6)\n    b0, c0, d0 = 0.5, 0.5, 0.5\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n    # bounds: A \u2265 0, b,c,d \u2265 0, E \u2265 0\n    bounds = [(1e-12, None), (0.0, None), (0.0, None),\n              (0.0, None), (0.0, None)]\n\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # mean squared error in original loss space\n        return np.mean((preds - y) ** 2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 10000})\n    p_opt = res.x if res.success else x0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with nonnegative offsets:\n      log(loss) = a\n                + b\u00b7log(tokens + t0)\n                + c\u00b7log(params + p0)\n                + d\u00b7log(unique_tokens + u0)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent fits):\n                   [a, b, c, d, t0, p0, u0]\n                   If you pass only 4 parameters [a,b,c,d], the offsets\n                   t0,p0,u0 default to zero.\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    tokens = X[:, 0]\n    model_params = X[:, 1]\n    unique_toks = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    # ensure two-dimensional parameter array\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n\n    # allow backward\u2010compatibility if only 4 params given\n    if P == 4:\n        # pad with zero\u2010offsets\n        pad = np.zeros((M, 3), dtype=float)\n        p = np.hstack([p, pad])\n        P = 7\n\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,t0,p0,u0], got {P}\")\n\n    # unpack\n    a, b, c, d, t0, p0, u0 = p.T\n    # all offsets t0,p0,u0 are assumed \u2265 0\n\n    # broadcast shapes: (N,1) vs (M,) \u21d2 (N,M)\n    tokens_adj = tokens[:, None] + t0[None, :]\n    params_adj = model_params[:, None] + p0[None, :]\n    uniq_adj   = unique_toks[:, None] + u0[None, :]\n\n    # small eps to guard log(0) in edge cases\n    eps = 1e-12\n    log_pred = (\n        a[None, :]\n        + b[None, :] * np.log(tokens_adj + eps)\n        + c[None, :] * np.log(params_adj + eps)\n        + d[None, :] * np.log(uniq_adj   + eps)\n    )\n\n    preds = np.exp(log_pred)\n    # if single fit, return shape (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n    Learns 7 parameters [a,b,c,d,t0,p0,u0] with t0,p0,u0 constrained \u22650.\n\n    Returns:\n      np.ndarray of shape (7,)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only positive losses for log\u2010transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    eps = 1e-12\n    # preliminary log\u2010space regression to get [a,b,c,d]\n    X_log = np.log(X + eps)  # (N,3)\n    y_log = np.log(y + eps)  # (N,)\n\n    N = X_log.shape[0]\n    D = np.hstack([np.ones((N, 1)), X_log])  # (N,4)\n    # ordinary least squares init\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # initialize offsets small\n    init_offsets = np.array([1e-6, 1e-6, 1e-6])\n    p0 = np.concatenate([beta_init, init_offsets])  # shape (7,)\n\n    # bounds: (a,b,c,d) unbounded, (t0,p0,u0) \u2265 0\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, None)] * 3\n\n    # objective: MSE in log\u2010space\n    def obj(p):\n        a, b, c, d, t0, p0_off, u0 = p\n        tokens_adj = X[:, 0] + t0 + eps\n        params_adj = X[:, 1] + p0_off + eps\n        uniq_adj   = X[:, 2] + u0 + eps\n        pred_log = (\n            a\n            + b * np.log(tokens_adj)\n            + c * np.log(params_adj)\n            + d * np.log(uniq_adj)\n        )\n        return np.mean((pred_log - y_log) ** 2)\n\n    res = minimize(obj,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds)\n\n    p_opt = res.x if res.success else p0\n    return p_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.6241, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log-linear scaling law with additive floor:\n      loss \u2248 exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens))\n             + exp(c)\n    We parameterize floor = exp(c) so it stays non-negative without hard bounds.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,3) columns = [tokens, params, unique_tokens]\n      params:      length\u20105 array [a, b1, b2, b3, c]\n    Returns:\n      preds:       shape (N,) predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # if someone passed a flat list of length 3\n    if X.ndim == 1 and X.size == 3:\n        X = X.reshape(1, 3)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b1,b2,b3,c], got {p.size}\")\n\n    a, b1, b2, b3, c = p\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n    log_part = a \\\n               + b1 * X_log[:, 0] \\\n               + b2 * X_log[:, 1] \\\n               + b3 * X_log[:, 2]\n    # the main power\u2010law piece plus a floor = exp(c)\n    preds = np.exp(log_part) + np.exp(c)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in the original loss space:\n      loss_pred = exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens)) + exp(c)\n\n    Returns:\n      params: array([a, b1, b2, b3, c])\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # We'll initialize [a,b1,b2,b3] via a quick linear least squares\n    # in log-space (ignoring the floor), and start c = log(1e-3).\n    # Restrict to strictly positive losses for the log fit.\n    mask = (y > 0)\n    Xm = X[mask]\n    ym = y[mask]\n    X_log = np.log(Xm + 1e-12)           # (N_pos,3)\n    Y_log = np.log(ym + 1e-12)           # (N_pos,)\n    # design: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((X_log.shape[0],1)), X_log])  # (N_pos,4)\n    beta, *_ = np.linalg.lstsq(D, Y_log, rcond=None)\n\n    # initial guess:  [a,b1,b2,b3] from beta, c = log(1e-3)\n    init = np.zeros(5, dtype=float)\n    init[:4] = beta\n    init[4]   = np.log(1e-3)\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 1.1263, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM fine-tuning under data constraints.\n\nWe model loss as an additive floor plus a multiplicative monomial of data features:\n  loss \u2248 E + A \u00b7 tokens^(\u2212b) \u00b7 params^(\u2212c) \u00b7 unique_tokens^(\u2212d)\n\nParameters (5 total):\n  A: scaling amplitude for the multiplicative term\n  b: exponent on tokens\n  c: exponent on params\n  d: exponent on unique_tokens\n  E: irreducible loss floor\n\nThis form is simple (5 parameters \u2264 7), numerically stable with small offsets,\nand generalizes across data-constrained regimes.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data characteristics and scaling-law parameters.\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E]\n                   A \u2265 0, b,c,d \u2265 0, E \u2265 0\n\n    Returns:\n      preds: shape (N,) if params is length-5, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    # avoid zeros for power operations\n    X = np.maximum(X, 1e-12)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {P}\")\n    # unpack\n    A = p[:, 0]  # (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n    # compute each factor with broadcasting over N\u00d7T\n    t_pow = np.power(X[:, [0]], -b[None, :])  # tokens^(-b)\n    p_pow = np.power(X[:, [1]], -c[None, :])  # params^(-c)\n    u_pow = np.power(X[:, [2]], -d[None, :])  # unique_tokens^(-d)\n    # combine multiplicative term and add floor\n    pred = E[None, :] + A[None, :] * t_pow * p_pow * u_pow  # (N,T)\n    # if single param set, return (N,) vector\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing mean squared error\n    in the original loss domain using L-BFGS-B with positivity constraints.\n\n    Returns:\n      params_opt: array of length 5: [A, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positive features\n    X = np.maximum(X, 1e-12)\n    # mask out non-finite or negative losses if any\n    mask = np.isfinite(y)\n    X = X[mask]\n    y = y[mask]\n    # initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    A0 = max(y_max - y_min, 1e-3)\n    E0 = max(y_min * 0.5, 1e-6)\n    b0, c0, d0 = 0.5, 0.5, 0.5\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n    # bounds: A \u2265 0, b,c,d \u2265 0, E \u2265 0\n    bounds = [(1e-12, None), (0.0, None), (0.0, None),\n              (0.0, None), (0.0, None)]\n\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # mean squared error in original loss space\n        return np.mean((preds - y) ** 2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 10000})\n    p_opt = res.x if res.success else x0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n### Inspiration 5 (Score: 0.6294, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-linear scaling law with pairwise interactions.\n    Predict loss from [tokens, params, unique_tokens]:\n      log(loss) = w0\n                + w_t*log(tokens)\n                + w_p*log(params)\n                + w_u*log(unique_tokens)\n                + w_tp*log(tokens)*log(params)\n                + w_tu*log(tokens)*log(unique_tokens)\n                + w_pu*log(params)*log(unique_tokens)\n    Returns: loss = exp(log(loss)), clipped to avoid overflow.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must have length 7\")\n    # safe log transform\n    eps = 1e-12\n    logs = np.log(np.maximum(X, eps))\n    lt, lp, lu = logs[:,0], logs[:,1], logs[:,2]\n    # design matrix in log-domain\n    phi = np.stack([\n        np.ones_like(lt),\n        lt,\n        lp,\n        lu,\n        lt * lp,\n        lt * lu,\n        lp * lu\n    ], axis=1)  # shape (N,7)\n    log_pred = phi.dot(p)\n    # clip to avoid overflow/underflow\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law using a two-step\n    ridge-regularized robust regression in log-space (Huber-style).\n    Returns params = [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # keep only positive targets for log\n    mask = y > 0\n    Xm = X[mask]\n    ym = y[mask]\n    if len(ym) == 0:\n        return np.zeros(7, dtype=float)\n    # log transform\n    eps = 1e-12\n    logs = np.log(np.maximum(Xm, eps))\n    lt, lp, lu = logs[:,0], logs[:,1], logs[:,2]\n    y_log = np.log(np.maximum(ym, eps))\n    # build design matrix phi\n    phi = np.stack([\n        np.ones_like(lt),\n        lt,\n        lp,\n        lu,\n        lt * lp,\n        lt * lu,\n        lp * lu\n    ], axis=1)  # shape (M,7)\n    M, P = phi.shape\n    # ridge regularization parameter\n    lam = 1e-6 * np.trace(phi.T.dot(phi)) / float(M)\n    # initial fit (unweighted)\n    A0 = phi.T.dot(phi) + lam * np.eye(P)\n    b0 = phi.T.dot(y_log)\n    try:\n        p0 = np.linalg.solve(A0, b0)\n    except np.linalg.LinAlgError:\n        p0 = np.linalg.lstsq(A0, b0, rcond=None)[0]\n    # compute residuals in log-space\n    r = phi.dot(p0) - y_log\n    # Huber-style robust weights\n    mad = np.median(np.abs(r))\n    if mad <= 0:\n        weights = np.ones_like(r)\n    else:\n        c = 1.345 * mad\n        abs_r = np.abs(r)\n        weights = np.where(abs_r <= c, 1.0, c / abs_r)\n    # apply weights\n    sw = np.sqrt(weights)\n    phi_w = phi * sw[:, None]\n    y_w = y_log * sw\n    # weighted ridge solve\n    A1 = phi_w.T.dot(phi_w) + lam * np.eye(P)\n    b1 = phi_w.T.dot(y_w)\n    try:\n        p_opt = np.linalg.solve(A1, b1)\n    except np.linalg.LinAlgError:\n        p_opt = np.linalg.lstsq(A1, b1, rcond=None)[0]\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended power\u2010law scaling with dataset\u2010diversity factor and additive floor:\n      loss \u2248 exp(a) * tokens^b * params^c * (unique_tokens / tokens)^d + f\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3)\n                   columns [tokens, params, unique_tokens]\n      params:      array of length 5 [a, b, c, d, f]\n\n    Returns:\n      preds: shape (N,) predicted loss values\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    if len(params) != 5:\n        raise ValueError(\"params must have length 5: [a, b, c, d, f]\")\n\n    a, b, c, d, f = params\n    # unpack features and add small eps for numerical stability\n    eps = 1e-12\n    tokens = X[:, 0] + eps\n    model_params = X[:, 1] + eps\n    unique_tokens = X[:, 2] + eps\n\n    # dataset\u2010diversity ratio\n    ratio = unique_tokens / tokens\n\n    # compute the extended power\u2010law prediction plus additive floor\n    pred = np.exp(a) * (tokens ** b) * (model_params ** c) * (ratio ** d) + f\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model:\n      loss \u2248 exp(a)*tokens^b*params^c*(unique/tokens)^d + f\n\n    Returns:\n      params_opt: array [a, b, c, d, f]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only keep strictly positive losses for log\u2010space initialization\n    mask = y > 0\n    Xp = X[mask]\n    yp = y[mask]\n\n    if yp.size == 0:\n        # fallback to default parameters if no positive losses\n        return np.array([0, 0, 0, 0, 0], dtype=float)\n\n    # prepare for linear initialization in log\u2010domain\n    eps = 1e-12\n    tokens = Xp[:, 0] + eps\n    model_params = Xp[:, 1] + eps\n    unique_tokens = Xp[:, 2] + eps\n    ratio = unique_tokens / tokens\n\n    # log\u2010features for initial linear regression\n    log_tokens = np.log(tokens)\n    log_params = np.log(model_params)\n    log_ratio = np.log(ratio)\n    y_log = np.log(yp + eps)\n\n    # design matrix: [1, log(tokens), log(params), log(ratio)]\n    N = len(yp)\n    D = np.column_stack([np.ones(N), log_tokens, log_params, log_ratio])\n\n    # solve for [a, b, c, d] in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_init\n\n    # initial additive floor as small fraction of minimum observed loss\n    f0 = max(0.0, np.min(yp) * 0.1)\n\n    p0 = np.array([a0, b0, c0, d0, f0], dtype=float)\n\n    # objective: mean squared error on original loss scale\n    def obj(p):\n        pred = scaling_law_func(Xp, p)\n        return np.mean((pred - yp) ** 2)\n\n    # enforce f >= 0\n    bounds = [(None, None),  # a\n              (None, None),  # b\n              (None, None),  # c\n              (None, None),  # d\n              (0.0, None)]   # f\n\n    res = minimize(obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    if res.success and len(res.x) == 5:\n        return res.x\n    else:\n        return p0\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended power\u2010law scaling with dataset\u2010diversity factor and additive floor:\n      loss \u2248 exp(a) * tokens^b * params^c * (unique_tokens / tokens)^d + f\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      sequence of length 5 [a, b, c, d, f]\n\n    Returns:\n      preds: numpy array of shape (N,) of predicted loss values\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"params must have length 5 [a,b,c,d,f], got {p.size}\")\n\n    a, b, c, d, f = p\n    eps = 1e-12\n    tokens = X[:, 0] + eps\n    model_params = X[:, 1] + eps\n    unique_tokens = X[:, 2] + eps\n\n    # dataset diversity ratio\n    ratio = unique_tokens / tokens\n\n    # primary power\u2010law term\n    main_term = np.exp(a) * (tokens ** b) * (model_params ** c) * (ratio ** d)\n    return main_term + f\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter model by minimizing MSE in log\u2010space:\n      loss_pred = exp(a)*tokens^b*params^c*(unique/tokens)^d + f\n\n    Returns:\n      params_opt: numpy array [a, b, c, d, f]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # keep only finite, positive losses for log\u2010space fitting\n    mask = np.isfinite(y) & (y > 0)\n    Xp = X[mask]\n    yp = y[mask]\n    if yp.size == 0:\n        # no valid data to fit; return defaults\n        return np.zeros(5, dtype=float)\n\n    eps = 1e-12\n    tokens = Xp[:, 0] + eps\n    model_params = Xp[:, 1] + eps\n    unique_tokens = Xp[:, 2] + eps\n    ratio = unique_tokens / tokens\n\n    # initial floor f0 as small fraction of min loss\n    f0 = max(0.0, np.min(yp) * 1e-3)\n\n    # prepare for linear regression in log\u2010domain: log(yp - f0)\n    y_adjusted = yp - f0\n    # ensure positivity\n    y_adjusted = np.maximum(y_adjusted, eps)\n    log_tokens = np.log(tokens)\n    log_params = np.log(model_params)\n    log_ratio = np.log(ratio)\n    y_log    = np.log(y_adjusted)\n\n    # design matrix [1, log(tokens), log(params), log(ratio)]\n    N = yp.size\n    D = np.column_stack([np.ones(N), log_tokens, log_params, log_ratio])\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_init\n\n    # initial parameter vector\n    p0 = np.array([a0, b0, c0, d0, f0], dtype=float)\n    # bounds: a,b,c,d unbounded; f >= 0\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, None)]\n\n    # objective: MSE in log\u2010space to balance relative errors\n    def objective(p):\n        pred = scaling_law_func(Xp, p)\n        # ensure positive\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(yp)) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 1000})\n    if res.success and res.x.size == 5:\n        return res.x\n    else:\n        return p0\n```"]}}}