{"id": "b8cc75cd-55b6-4f77-8649-9a344d2452ae", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7\u2010parameter log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) = w0\n                + w_t  * log(tokens)\n                + w_p  * log(params)\n                + w_u  * log(unique_tokens)\n                + w_tp * log(tokens)*log(params)\n                + w_tu * log(tokens)*log(unique_tokens)\n                + w_pu * log(params)*log(unique_tokens)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"params must have length 7, got {p.size}\")\n\n    # Numerical stability\n    eps = 1e-12\n    logs = np.log(np.maximum(X, eps))  # shape (N,3)\n    xt, xp, xu = logs[:, 0], logs[:, 1], logs[:, 2]\n\n    # Design matrix in log-space with pairwise interactions\n    phi = np.column_stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ])  # shape (N,7)\n\n    log_pred = phi.dot(p)\n    # Prevent overflow in exponential\n    log_pred = np.clip(log_pred, -50, 50)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law.\n    - First: ridge\u2010regularized least squares in log\u2010space for a closed\u2010form init.\n    - Second: refine by minimizing MSE in the original loss domain via L-BFGS-B.\n\n    Returns:\n      params: np.ndarray of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # Only positive losses for log\u2010space fit\n    mask = y > 0\n    X_pos, y_pos = X[mask], y[mask]\n    if X_pos.shape[0] == 0:\n        # Fallback to zeros if no valid data\n        return np.zeros(7, dtype=float)\n\n    # Closed\u2010form ridge in log\u2010space\n    eps = 1e-12\n    logs = np.log(np.maximum(X_pos, eps))\n    xt, xp, xu = logs[:, 0], logs[:, 1], logs[:, 2]\n    phi = np.column_stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ])  # (N,7)\n    y_log = np.log(y_pos + eps)\n\n    # Automatic small ridge \u03bb\n    lam = 1e-6 * np.trace(phi.T.dot(phi)) / phi.shape[0]\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y_log)\n    p0 = np.linalg.solve(A, b)\n\n    # Refinement: minimize MSE in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            p0,\n            method=\"L-BFGS-B\",\n            options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000}\n        )\n        if res.success:\n            return res.x\n    except Exception:\n        pass\n\n    # If refinement fails, return closed\u2010form solution\n    return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "81bb3501-3099-407b-a94c-2d540630ee73", "generation": 2, "timestamp": 1754714639.389497, "iteration_found": 29, "metrics": {"nmse": 0.4529758341821662, "nmae": 0.8743526938659776, "r2": 0.5470241658178339, "combined_score": 0.6882426923245204}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.5779324208027266, "nmae": 0.5471440168088242, "r2": 0.42206757919727345, "combined_score": 0.6337407019568554}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.5779\n- nmae: 0.5471\n- r2: 0.4221\n- combined_score: 0.6337\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.5779, nmae: 0.5471, r2: 0.4221, combined_score: 0.6337\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.5400, nmae: 0.9676, r2: 0.4600, combined_score: 0.6493\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4530, nmae: 0.8744, r2: 0.5470, combined_score: 0.6882\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6406)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) = w0\n                + w_t  * log(tokens)\n                + w_p  * log(params)\n                + w_u  * log(unique_tokens)\n                + w_tp * log(tokens)*log(params)\n                + w_tu * log(tokens)*log(unique_tokens)\n                + w_pu * log(params)*log(unique_tokens)\n      => loss = exp(log(loss))\n\n    data_points: (N,3) array [tokens, params, unique_tokens]\n    params:      length\u20107 vector [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu]\n\n    Returns:\n      preds: (N,) array of predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape is (N,3)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,3)\n    xt = logs[:, 0]\n    xp = logs[:, 1]\n    xu = logs[:, 2]\n\n    # build feature matrix in log\u2010space\n    # [1, xt, xp, xu, xt*xp, xt*xu, xp*xu]\n    phi = np.stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ], axis=1)  # shape (N,7)\n\n    # compute log\u2010predictions and exponentiate\n    log_pred = phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law by ridge\u2010regularized least squares\n    in log\u2010space. Returns params = [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure X is (N,3)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    # only keep strictly positive losses for log\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n    if X.size == 0:\n        # fallback to zeros if no valid data\n        return np.zeros(7, dtype=float)\n\n    # compute log\u2010features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    xt = logs[:, 0]\n    xp = logs[:, 1]\n    xu = logs[:, 2]\n\n    # design matrix phi: [1, xt, xp, xu, xt*xp, xt*xu, xp*xu]\n    phi = np.stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ], axis=1)  # shape (N,7)\n\n    y_log = np.log(y + eps)\n\n    # ridge regularization \u03bb scaled to data\n    # small \u03bb stabilizes normal equations\n    lam = 1e-6 * np.trace(phi.T.dot(phi)) / phi.shape[0]\n    A = phi.T.dot(phi) + lam * np.eye(phi.shape[1])\n    b = phi.T.dot(y_log)\n\n    # solve (A) p = b\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4530), Performs well on nmae (0.8744), Performs well on r2 (0.5470), Performs well on combined_score (0.6882)\n\n\n### Program 2 (Score: 0.6542)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nKey features: Performs well on nmse (0.5400), Performs well on nmae (0.9676), Performs well on r2 (0.4600), Performs well on combined_score (0.6493)\n\n\n### Program 3 (Score: 0.5452)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nKey features: Performs well on nmse (0.5779), Performs well on nmae (0.5471), Performs well on r2 (0.4221), Performs well on combined_score (0.6337)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6406, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) = w0\n                + w_t  * log(tokens)\n                + w_p  * log(params)\n                + w_u  * log(unique_tokens)\n                + w_tp * log(tokens)*log(params)\n                + w_tu * log(tokens)*log(unique_tokens)\n                + w_pu * log(params)*log(unique_tokens)\n      => loss = exp(log(loss))\n\n    data_points: (N,3) array [tokens, params, unique_tokens]\n    params:      length\u20107 vector [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu]\n\n    Returns:\n      preds: (N,) array of predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape is (N,3)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    logs = np.log(X + eps)   # shape (N,3)\n    xt = logs[:, 0]\n    xp = logs[:, 1]\n    xu = logs[:, 2]\n\n    # build feature matrix in log\u2010space\n    # [1, xt, xp, xu, xt*xp, xt*xu, xp*xu]\n    phi = np.stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ], axis=1)  # shape (N,7)\n\n    # compute log\u2010predictions and exponentiate\n    log_pred = phi.dot(p)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law by ridge\u2010regularized least squares\n    in log\u2010space. Returns params = [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure X is (N,3)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    # only keep strictly positive losses for log\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n    if X.size == 0:\n        # fallback to zeros if no valid data\n        return np.zeros(7, dtype=float)\n\n    # compute log\u2010features\n    eps = 1e-12\n    logs = np.log(X + eps)\n    xt = logs[:, 0]\n    xp = logs[:, 1]\n    xu = logs[:, 2]\n\n    # design matrix phi: [1, xt, xp, xu, xt*xp, xt*xu, xp*xu]\n    phi = np.stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ], axis=1)  # shape (N,7)\n\n    y_log = np.log(y + eps)\n\n    # ridge regularization \u03bb scaled to data\n    # small \u03bb stabilizes normal equations\n    lam = 1e-6 * np.trace(phi.T.dot(phi)) / phi.shape[0]\n    A = phi.T.dot(phi) + lam * np.eye(phi.shape[1])\n    b = phi.T.dot(y_log)\n\n    # solve (A) p = b\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 2 (Score: 0.6542, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.968), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7\u2010parameter log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) = w0\n                + w_t  * log(tokens)\n                + w_p  * log(params)\n                + w_u  * log(unique_tokens)\n                + w_tp * log(tokens)*log(params)\n                + w_tu * log(tokens)*log(unique_tokens)\n                + w_pu * log(params)*log(unique_tokens)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [w0, w_t, w_p, w_u, w_tp, w_tu, w_pu]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"params must have length 7, got {p.size}\")\n\n    # Numerical stability\n    eps = 1e-12\n    logs = np.log(np.maximum(X, eps))  # shape (N,3)\n    xt, xp, xu = logs[:, 0], logs[:, 1], logs[:, 2]\n\n    # Design matrix in log-space with pairwise interactions\n    phi = np.column_stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ])  # shape (N,7)\n\n    log_pred = phi.dot(p)\n    # Prevent overflow in exponential\n    log_pred = np.clip(log_pred, -50, 50)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law.\n    - First: ridge\u2010regularized least squares in log\u2010space for a closed\u2010form init.\n    - Second: refine by minimizing MSE in the original loss domain via L-BFGS-B.\n\n    Returns:\n      params: np.ndarray of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # Only positive losses for log\u2010space fit\n    mask = y > 0\n    X_pos, y_pos = X[mask], y[mask]\n    if X_pos.shape[0] == 0:\n        # Fallback to zeros if no valid data\n        return np.zeros(7, dtype=float)\n\n    # Closed\u2010form ridge in log\u2010space\n    eps = 1e-12\n    logs = np.log(np.maximum(X_pos, eps))\n    xt, xp, xu = logs[:, 0], logs[:, 1], logs[:, 2]\n    phi = np.column_stack([\n        np.ones_like(xt),\n        xt,\n        xp,\n        xu,\n        xt * xp,\n        xt * xu,\n        xp * xu\n    ])  # (N,7)\n    y_log = np.log(y_pos + eps)\n\n    # Automatic small ridge \u03bb\n    lam = 1e-6 * np.trace(phi.T.dot(phi)) / phi.shape[0]\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y_log)\n    p0 = np.linalg.solve(A, b)\n\n    # Refinement: minimize MSE in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    try:\n        res = minimize(\n            objective,\n            p0,\n            method=\"L-BFGS-B\",\n            options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000}\n        )\n        if res.success:\n            return res.x\n    except Exception:\n        pass\n\n    # If refinement fails, return closed\u2010form solution\n    return p0\n# EVOLVE-BLOCK-END\n```"]}}}