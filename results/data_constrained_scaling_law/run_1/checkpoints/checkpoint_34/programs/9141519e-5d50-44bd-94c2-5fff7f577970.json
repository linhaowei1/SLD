{"id": "9141519e-5d50-44bd-94c2-5fff7f577970", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as:\n      loss \u2248 E + A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E], all non-negative.\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # avoid zero\u2010division / zero^exponent issues\n    X = np.maximum(X, 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # Promote to 2D: (T,5)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {p.shape[1]}\")\n\n    A = p[:, 0]  # shape (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n\n    # Compute term = A * tokens^(-b) * params^(-c) * unique_tokens^(-d)\n    # We'll broadcast over N\u00d7T\n    t_pow = X[:, [0]] ** (-b[np.newaxis, :])\n    p_pow = X[:, [1]] ** (-c[np.newaxis, :])\n    u_pow = X[:, [2]] ** (-d[np.newaxis, :])\n    term = A[np.newaxis, :] * t_pow * p_pow * u_pow\n\n    pred = E[np.newaxis, :] + term  # shape (N,T)\n    # If only one parameter set, return shape (N,)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n    by minimizing relative\u2010squared error in the loss domain:\n      objective = mean(((pred - y) / (y + eps))^2)\n\n    Returns:\n      params_opt: array of length 5 [A, b, c, d, E], all non\u2010negative.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Filter to finite, positive targets\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = y.shape[0]\n    if N == 0:\n        # fallback to trivial parameters\n        return np.array([1.0, 0.0, 0.0, 0.0, np.mean(loss_values)], dtype=float)\n\n    # Prepare logs for initial regression\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y + 1e-12)\n\n    # Linear regression: y_log \u2248 alpha + beta1\u00b7log(tokens) + beta2\u00b7log(params) + beta3\u00b7log(unique)\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    alpha, b_lin, c_lin, d_lin = beta\n    # Convert slopes to exponents b,c,d (we want loss \u223c A\u00b7tokens^(\u2212b) ...):\n    A0 = np.exp(alpha)\n    b0 = max(-b_lin, 0.0)\n    c0 = max(-c_lin, 0.0)\n    d0 = max(-d_lin, 0.0)\n    # Floor initial guess at fraction of minimum loss\n    y_min = y.min()\n    E0 = max(0.1 * y_min, 1e-6)\n\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # Enforce non-negativity\n    bounds = [(1e-12, None),  # A \u2265 0\n              (0.0, None),    # b \u2265 0\n              (0.0, None),    # c \u2265 0\n              (0.0, None),    # d \u2265 0\n              (0.0, None)]    # E \u2265 0\n\n    eps = 1e-12\n\n    def objective(p_flat):\n        pred = scaling_law_func(X, p_flat)\n        # relative squared error\n        rel_err2 = ((pred - y) / (y + eps))**2\n        return np.mean(rel_err2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-12, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        return x0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "f3c892da-00d4-4bc7-8edc-c05adf714a0a", "generation": 2, "timestamp": 1754714643.4525504, "iteration_found": 28, "metrics": {"nmse": 0.16570190718044653, "nmae": 0.37237864440523466, "r2": 0.8342980928195535, "combined_score": 0.8578522466509129}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 4.7847, nmae: 3.3323, r2: -3.7847, combined_score: 0.1729\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3833, nmae: 0.7736, r2: 0.6167, combined_score: 0.7229\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.6241)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log-linear scaling law with additive floor:\n      loss \u2248 exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens))\n             + exp(c)\n    We parameterize floor = exp(c) so it stays non-negative without hard bounds.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,3) columns = [tokens, params, unique_tokens]\n      params:      length\u20105 array [a, b1, b2, b3, c]\n    Returns:\n      preds:       shape (N,) predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # if someone passed a flat list of length 3\n    if X.ndim == 1 and X.size == 3:\n        X = X.reshape(1, 3)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b1,b2,b3,c], got {p.size}\")\n\n    a, b1, b2, b3, c = p\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n    log_part = a \\\n               + b1 * X_log[:, 0] \\\n               + b2 * X_log[:, 1] \\\n               + b3 * X_log[:, 2]\n    # the main power\u2010law piece plus a floor = exp(c)\n    preds = np.exp(log_part) + np.exp(c)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in the original loss space:\n      loss_pred = exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens)) + exp(c)\n\n    Returns:\n      params: array([a, b1, b2, b3, c])\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # We'll initialize [a,b1,b2,b3] via a quick linear least squares\n    # in log-space (ignoring the floor), and start c = log(1e-3).\n    # Restrict to strictly positive losses for the log fit.\n    mask = (y > 0)\n    Xm = X[mask]\n    ym = y[mask]\n    X_log = np.log(Xm + 1e-12)           # (N_pos,3)\n    Y_log = np.log(ym + 1e-12)           # (N_pos,)\n    # design: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((X_log.shape[0],1)), X_log])  # (N_pos,4)\n    beta, *_ = np.linalg.lstsq(D, Y_log, rcond=None)\n\n    # initial guess:  [a,b1,b2,b3] from beta, c = log(1e-3)\n    init = np.zeros(5, dtype=float)\n    init[:4] = beta\n    init[4]   = np.log(1e-3)\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3833), Performs well on nmae (0.7736), Performs well on r2 (0.6167), Performs well on combined_score (0.7229)\n\n\n### Program 3 (Score: 1.1263)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM fine-tuning under data constraints.\n\nWe model loss as an additive floor plus a multiplicative monomial of data features:\n  loss \u2248 E + A \u00b7 tokens^(\u2212b) \u00b7 params^(\u2212c) \u00b7 unique_tokens^(\u2212d)\n\nParameters (5 total):\n  A: scaling amplitude for the multiplicative term\n  b: exponent on tokens\n  c: exponent on params\n  d: exponent on unique_tokens\n  E: irreducible loss floor\n\nThis form is simple (5 parameters \u2264 7), numerically stable with small offsets,\nand generalizes across data-constrained regimes.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data characteristics and scaling-law parameters.\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E]\n                   A \u2265 0, b,c,d \u2265 0, E \u2265 0\n\n    Returns:\n      preds: shape (N,) if params is length-5, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    # avoid zeros for power operations\n    X = np.maximum(X, 1e-12)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {P}\")\n    # unpack\n    A = p[:, 0]  # (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n    # compute each factor with broadcasting over N\u00d7T\n    t_pow = np.power(X[:, [0]], -b[None, :])  # tokens^(-b)\n    p_pow = np.power(X[:, [1]], -c[None, :])  # params^(-c)\n    u_pow = np.power(X[:, [2]], -d[None, :])  # unique_tokens^(-d)\n    # combine multiplicative term and add floor\n    pred = E[None, :] + A[None, :] * t_pow * p_pow * u_pow  # (N,T)\n    # if single param set, return (N,) vector\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing mean squared error\n    in the original loss domain using L-BFGS-B with positivity constraints.\n\n    Returns:\n      params_opt: array of length 5: [A, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positive features\n    X = np.maximum(X, 1e-12)\n    # mask out non-finite or negative losses if any\n    mask = np.isfinite(y)\n    X = X[mask]\n    y = y[mask]\n    # initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    A0 = max(y_max - y_min, 1e-3)\n    E0 = max(y_min * 0.5, 1e-6)\n    b0, c0, d0 = 0.5, 0.5, 0.5\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n    # bounds: A \u2265 0, b,c,d \u2265 0, E \u2265 0\n    bounds = [(1e-12, None), (0.0, None), (0.0, None),\n              (0.0, None), (0.0, None)]\n\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # mean squared error in original loss space\n        return np.mean((preds - y) ** 2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 10000})\n    p_opt = res.x if res.success else x0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.7847), Performs well on nmae (3.3323), Performs well on r2 (-3.7847), Performs well on combined_score (0.1729)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.1263, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery for LLM fine-tuning under data constraints.\n\nWe model loss as an additive floor plus a multiplicative monomial of data features:\n  loss \u2248 E + A \u00b7 tokens^(\u2212b) \u00b7 params^(\u2212c) \u00b7 unique_tokens^(\u2212d)\n\nParameters (5 total):\n  A: scaling amplitude for the multiplicative term\n  b: exponent on tokens\n  c: exponent on params\n  d: exponent on unique_tokens\n  E: irreducible loss floor\n\nThis form is simple (5 parameters \u2264 7), numerically stable with small offsets,\nand generalizes across data-constrained regimes.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data characteristics and scaling-law parameters.\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E]\n                   A \u2265 0, b,c,d \u2265 0, E \u2265 0\n\n    Returns:\n      preds: shape (N,) if params is length-5, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    # avoid zeros for power operations\n    X = np.maximum(X, 1e-12)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {P}\")\n    # unpack\n    A = p[:, 0]  # (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n    # compute each factor with broadcasting over N\u00d7T\n    t_pow = np.power(X[:, [0]], -b[None, :])  # tokens^(-b)\n    p_pow = np.power(X[:, [1]], -c[None, :])  # params^(-c)\n    u_pow = np.power(X[:, [2]], -d[None, :])  # unique_tokens^(-d)\n    # combine multiplicative term and add floor\n    pred = E[None, :] + A[None, :] * t_pow * p_pow * u_pow  # (N,T)\n    # if single param set, return (N,) vector\n    return pred[:, 0] if T == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing mean squared error\n    in the original loss domain using L-BFGS-B with positivity constraints.\n\n    Returns:\n      params_opt: array of length 5: [A, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positive features\n    X = np.maximum(X, 1e-12)\n    # mask out non-finite or negative losses if any\n    mask = np.isfinite(y)\n    X = X[mask]\n    y = y[mask]\n    # initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    A0 = max(y_max - y_min, 1e-3)\n    E0 = max(y_min * 0.5, 1e-6)\n    b0, c0, d0 = 0.5, 0.5, 0.5\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n    # bounds: A \u2265 0, b,c,d \u2265 0, E \u2265 0\n    bounds = [(1e-12, None), (0.0, None), (0.0, None),\n              (0.0, None), (0.0, None)]\n\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # mean squared error in original loss space\n        return np.mean((preds - y) ** 2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 10000})\n    p_opt = res.x if res.success else x0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as:\n      loss \u2248 E + A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E], all non-negative.\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # avoid zero\u2010division / zero^exponent issues\n    X = np.maximum(X, 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # Promote to 2D: (T,5)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {p.shape[1]}\")\n\n    A = p[:, 0]  # shape (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n\n    # Compute term = A * tokens^(-b) * params^(-c) * unique_tokens^(-d)\n    # We'll broadcast over N\u00d7T\n    t_pow = X[:, [0]] ** (-b[np.newaxis, :])\n    p_pow = X[:, [1]] ** (-c[np.newaxis, :])\n    u_pow = X[:, [2]] ** (-d[np.newaxis, :])\n    term = A[np.newaxis, :] * t_pow * p_pow * u_pow\n\n    pred = E[np.newaxis, :] + term  # shape (N,T)\n    # If only one parameter set, return shape (N,)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n    by minimizing relative\u2010squared error in the loss domain:\n      objective = mean(((pred - y) / (y + eps))^2)\n\n    Returns:\n      params_opt: array of length 5 [A, b, c, d, E], all non\u2010negative.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Filter to finite, positive targets\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = y.shape[0]\n    if N == 0:\n        # fallback to trivial parameters\n        return np.array([1.0, 0.0, 0.0, 0.0, np.mean(loss_values)], dtype=float)\n\n    # Prepare logs for initial regression\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y + 1e-12)\n\n    # Linear regression: y_log \u2248 alpha + beta1\u00b7log(tokens) + beta2\u00b7log(params) + beta3\u00b7log(unique)\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    alpha, b_lin, c_lin, d_lin = beta\n    # Convert slopes to exponents b,c,d (we want loss \u223c A\u00b7tokens^(\u2212b) ...):\n    A0 = np.exp(alpha)\n    b0 = max(-b_lin, 0.0)\n    c0 = max(-c_lin, 0.0)\n    d0 = max(-d_lin, 0.0)\n    # Floor initial guess at fraction of minimum loss\n    y_min = y.min()\n    E0 = max(0.1 * y_min, 1e-6)\n\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # Enforce non-negativity\n    bounds = [(1e-12, None),  # A \u2265 0\n              (0.0, None),    # b \u2265 0\n              (0.0, None),    # c \u2265 0\n              (0.0, None),    # d \u2265 0\n              (0.0, None)]    # E \u2265 0\n\n    eps = 1e-12\n\n    def objective(p_flat):\n        pred = scaling_law_func(X, p_flat)\n        # relative squared error\n        rel_err2 = ((pred - y) / (y + eps))**2\n        return np.mean(rel_err2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-12, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        return x0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Switched from a purely log\u2010linear to a 5\u2010parameter form \n    loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n  which better captures an irreducible loss floor (E) plus power\u2010law decay.\n- Used a quick linear regression in log\u2010space (ignoring E) to seed A, b, c, d.\n- Added a robust relative\u2010squared\u2010error objective to improve both NMSE and NMAE.\n- Enforced non\u2010negativity constraints via L-BFGS-B bounds for numerical stability.\n- Kept the interface identical: inputs `(data_points, loss_values)` \u2192 output optimized parameters."]}}}