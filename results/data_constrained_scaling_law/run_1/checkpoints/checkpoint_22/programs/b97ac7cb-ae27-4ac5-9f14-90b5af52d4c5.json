{"id": "b97ac7cb-ae27-4ac5-9f14-90b5af52d4c5", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with nonnegative offsets:\n      log(loss) = a\n                + b\u00b7log(tokens + t0)\n                + c\u00b7log(params + p0)\n                + d\u00b7log(unique_tokens + u0)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent fits):\n                   [a, b, c, d, t0, p0, u0]\n                   If you pass only 4 parameters [a,b,c,d], the offsets\n                   t0,p0,u0 default to zero.\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    tokens = X[:, 0]\n    model_params = X[:, 1]\n    unique_toks = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    # ensure two-dimensional parameter array\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n\n    # allow backward\u2010compatibility if only 4 params given\n    if P == 4:\n        # pad with zero\u2010offsets\n        pad = np.zeros((M, 3), dtype=float)\n        p = np.hstack([p, pad])\n        P = 7\n\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,t0,p0,u0], got {P}\")\n\n    # unpack\n    a, b, c, d, t0, p0, u0 = p.T\n    # all offsets t0,p0,u0 are assumed \u2265 0\n\n    # broadcast shapes: (N,1) vs (M,) \u21d2 (N,M)\n    tokens_adj = tokens[:, None] + t0[None, :]\n    params_adj = model_params[:, None] + p0[None, :]\n    uniq_adj   = unique_toks[:, None] + u0[None, :]\n\n    # small eps to guard log(0) in edge cases\n    eps = 1e-12\n    log_pred = (\n        a[None, :]\n        + b[None, :] * np.log(tokens_adj + eps)\n        + c[None, :] * np.log(params_adj + eps)\n        + d[None, :] * np.log(uniq_adj   + eps)\n    )\n\n    preds = np.exp(log_pred)\n    # if single fit, return shape (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n    Learns 7 parameters [a,b,c,d,t0,p0,u0] with t0,p0,u0 constrained \u22650.\n\n    Returns:\n      np.ndarray of shape (7,)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only positive losses for log\u2010transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    eps = 1e-12\n    # preliminary log\u2010space regression to get [a,b,c,d]\n    X_log = np.log(X + eps)  # (N,3)\n    y_log = np.log(y + eps)  # (N,)\n\n    N = X_log.shape[0]\n    D = np.hstack([np.ones((N, 1)), X_log])  # (N,4)\n    # ordinary least squares init\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # initialize offsets small\n    init_offsets = np.array([1e-6, 1e-6, 1e-6])\n    p0 = np.concatenate([beta_init, init_offsets])  # shape (7,)\n\n    # bounds: (a,b,c,d) unbounded, (t0,p0,u0) \u2265 0\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, None)] * 3\n\n    # objective: MSE in log\u2010space\n    def obj(p):\n        a, b, c, d, t0, p0_off, u0 = p\n        tokens_adj = X[:, 0] + t0 + eps\n        params_adj = X[:, 1] + p0_off + eps\n        uniq_adj   = X[:, 2] + u0 + eps\n        pred_log = (\n            a\n            + b * np.log(tokens_adj)\n            + c * np.log(params_adj)\n            + d * np.log(uniq_adj)\n        )\n        return np.mean((pred_log - y_log) ** 2)\n\n    res = minimize(obj,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds)\n\n    p_opt = res.x if res.success else p0\n    return p_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "aba1a19f-b1bb-4f40-a204-1cc290188948", "generation": 2, "timestamp": 1754714562.0180898, "iteration_found": 21, "metrics": {"nmse": 0.19535599982573304, "nmae": 0.4842164552713444, "r2": 0.804644000174267, "combined_score": 0.8365708626934458}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent fits)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n\n    p = np.asarray(params, dtype=float)\n    # ensure we have shape (M,4)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters [a,b,c,d], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # shape (M,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n\n    # compute log-predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n\n    preds = np.exp(log_pred)  # shape (N, M)\n    # if only one parameter\u2010set, return (N,) instead of (N,1)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only keep strictly positive losses for the log-transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n    y_log = np.log(y + eps)  # shape (N,)\n\n    N = X_log.shape[0]\n    # design matrix in log-space: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n\n    # initial guess from ordinary least squares in log-space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # objective: mean squared error in log-space\n    def _mse_log(beta):\n        resid = D.dot(beta) - y_log\n        return np.mean(resid * resid)\n\n    # refine with L-BFGS-B\n    res = minimize(_mse_log, beta_init, method='L-BFGS-B')\n    beta_opt = res.x if res.success else beta_init\n\n    return beta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent fits)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n\n    p = np.asarray(params, dtype=float)\n    # ensure we have shape (M,4)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters [a,b,c,d], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # shape (M,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n\n    # compute log-predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n\n    preds = np.exp(log_pred)  # shape (N, M)\n    # if only one parameter\u2010set, return (N,) instead of (N,1)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only keep strictly positive losses for the log-transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n    y_log = np.log(y + eps)  # shape (N,)\n\n    N = X_log.shape[0]\n    # design matrix in log-space: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n\n    # initial guess from ordinary least squares in log-space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # objective: mean squared error in log-space\n    def _mse_log(beta):\n        resid = D.dot(beta) - y_log\n        return np.mean(resid * resid)\n\n    # refine with L-BFGS-B\n    res = minimize(_mse_log, beta_init, method='L-BFGS-B')\n    beta_opt = res.x if res.success else beta_init\n\n    return beta_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a drop-in replacement that keeps the same API but augments the power\u2010law with small nonnegative \u201coffsets\u201d on each axis.  We still stay under 7 learnable parameters per fit (we now learn 7: a,b,c,d,t\u2080,p\u2080,u\u2080).  Offsets are constrained \u22650 to keep log arguments positive, and we initialize them small.  This often helps capture the curvature you observe when data is scarce.\n\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with nonnegative offsets:\n      log(loss) = a\n                + b\u00b7log(tokens + t0)\n                + c\u00b7log(params + p0)\n                + d\u00b7log(unique_tokens + u0)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent fits):\n                   [a, b, c, d, t0, p0, u0]\n                   If you pass only 4 parameters [a,b,c,d], the offsets\n                   t0,p0,u0 default to zero.\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    tokens = X[:, 0]\n    model_params = X[:, 1]\n    unique_toks = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    # ensure two-dimensional parameter array\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n\n    # allow backward\u2010compatibility if only 4 params given\n    if P == 4:\n        # pad with zero\u2010offsets\n        pad = np.zeros((M, 3), dtype=float)\n        p = np.hstack([p, pad])\n        P = 7\n\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,t0,p0,u0], got {P}\")\n\n    # unpack\n    a, b, c, d, t0, p0, u0 = p.T\n    # all offsets t0,p0,u0 are assumed \u2265 0\n\n    # broadcast shapes: (N,1) vs (M,) \u21d2 (N,M)\n    tokens_adj = tokens[:, None] + t0[None, :]\n    params_adj = model_params[:, None] + p0[None, :]\n    uniq_adj   = unique_toks[:, None] + u0[None, :]\n\n    # small eps to guard log(0) in edge cases\n    eps = 1e-12\n    log_pred = (\n        a[None, :]\n        + b[None, :] * np.log(tokens_adj + eps)\n        + c[None, :] * np.log(params_adj + eps)\n        + d[None, :] * np.log(uniq_adj   + eps)\n    )\n\n    preds = np.exp(log_pred)\n    # if single fit, return shape (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n    Learns 7 parameters [a,b,c,d,t0,p0,u0] with t0,p0,u0 constrained \u22650.\n\n    Returns:\n      np.ndarray of shape (7,)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only positive losses for log\u2010transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    eps = 1e-12\n    # preliminary log\u2010space regression to get [a,b,c,d]\n    X_log = np.log(X + eps)  # (N,3)\n    y_log = np.log(y + eps)  # (N,)\n\n    N = X_log.shape[0]\n    D = np.hstack([np.ones((N, 1)), X_log])  # (N,4)\n    # ordinary least squares init\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # initialize offsets small\n    init_offsets = np.array([1e-6, 1e-6, 1e-6])\n    p0 = np.concatenate([beta_init, init_offsets])  # shape (7,)\n\n    # bounds: (a,b,c,d) unbounded, (t0,p0,u0) \u2265 0\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, None)] * 3\n\n    # objective: MSE in log\u2010space\n    def obj(p):\n        a, b, c, d, t0, p0_off, u0 = p\n        tokens_adj = X[:, 0] + t0 + eps\n        params_adj = X[:, 1] + p0_off + eps\n        uniq_adj   = X[:, 2] + u0 + eps\n        pred_log = (\n            a\n            + b * np.log(tokens_adj)\n            + c * np.log(params_adj)\n            + d * np.log(uniq_adj)\n        )\n        return np.mean((pred_log - y_log) ** 2)\n\n    res = minimize(obj,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds)\n\n    p_opt = res.x if res.success else p0\n    return p_opt\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of the key changes:\n- We now learn three extra nonnegative offsets t0, p0, u0 to shift each axis before taking logs.  This often improves fit in data\u2010scarce regimes (preventing the pure power\u2010law from blowing up at small token/unique counts).\n- We constrain those offsets to be \u22650 via L-BFGS-B bounds.\n- We initialize offsets tiny (1e-6) and still initialize a\u2013d via the usual linear regression in log\u2010space.\n- If a user passes only 4 parameters into `scaling_law_func` we pad offsets to zero for backward compatibility.\n\nThese slight generalizations typically lower NMSE and NMAE when data are constrained, without sacrificing interpretability or numerical stability."]}}}