{"id": "0a244c64-85db-4170-b048-eec58be91207", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced 7-parameter scaling law:\n      Let f1 = log(tokens + eps), f2 = log(params + eps), f3 = log(unique_tokens + eps).\n      Then\n        log_loss_adj = a0\n                     + a1*f1 + a2*f2 + a3*f3\n                     + a4*(f1*f2) + a5*(f1*f3)\n      and\n        loss = C0 + exp(log_loss_adj)\n    where params = [C0, a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [C0,a0..a5], got {p.size}\")\n\n    C0, a0, a1, a2, a3, a4, a5 = p\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    # build log-adjusted prediction\n    log_loss_adj = (\n        a0\n        + a1 * f1\n        + a2 * f2\n        + a3 * f3\n        + a4 * (f1 * f2)\n        + a5 * (f1 * f3)\n    )\n    # clamp for numerical stability\n    log_loss_adj = np.clip(log_loss_adj, -50.0, 50.0)\n    return C0 + np.exp(log_loss_adj)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter cross-interaction scaling law:\n      params = [C0, a0, a1, a2, a3, a4, a5]\n    by minimizing MSE in the log-domain (after subtracting floor).\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N = y.shape[0]\n    if N == 0:\n        return np.zeros(7, dtype=float)\n\n    # initialize C0 as small fraction of min(loss)\n    y_min = np.min(y)\n    C0_init = max(0.0, 0.1 * y_min)\n\n    # Construct features for initial linear fit in log-domain\n    eps = 1e-8\n    mask = (y > C0_init + eps)\n    if mask.sum() < 3:\n        # fallback to simple power-law fit if too few points\n        C0_init = 0.0\n        mask = (y > eps)\n    Xf = X[mask]\n    yf = y[mask] - C0_init\n\n    f1 = np.log(Xf[:, 0] + eps)\n    f2 = np.log(Xf[:, 1] + eps)\n    f3 = np.log(Xf[:, 2] + eps)\n    y_log = np.log(yf + eps)\n\n    # design matrix: [1, f1, f2, f3, f1*f2, f1*f3]\n    D = np.column_stack([\n        np.ones_like(f1),\n        f1, f2, f3,\n        f1 * f2, f1 * f3\n    ])\n    # ridge-regression initialization\n    reg = 1e-6\n    G = D.T.dot(D) + reg * np.eye(D.shape[1])\n    rhs = D.T.dot(y_log)\n    try:\n        a_init = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        a_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # initial parameter vector\n    p0 = np.concatenate([[C0_init], a_init])\n\n    # bounds: C0 \u2265 0, others unbounded\n    bounds = [(0.0, None)] + [(-np.inf, np.inf)] * 6\n\n    def obj(p):\n        # MSE in log-domain after subtracting floor\n        C0 = p[0]\n        y_pred = scaling_law_func(X, p)\n        # ensure positivity\n        y_adj = np.maximum(y - C0, eps)\n        y_pred_adj = np.maximum(y_pred - C0, eps)\n        resid = np.log(y_pred_adj) - np.log(y_adj)\n        return np.mean(resid * resid)\n\n    res = minimize(\n        obj,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000}\n    )\n    return res.x if res.success else p0\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4f9e06e4-2758-46da-9837-f9f2aae47d9c", "generation": 3, "timestamp": 1754714780.3760214, "iteration_found": 45, "metrics": {"nmse": 0.16123951361916272, "nmae": 0.2854803560865638, "r2": 0.8387604863808373, "combined_score": 0.861148788231777}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.5400130552578459, "nmae": 0.9675787345451223, "r2": 0.45998694474215407, "combined_score": 0.6493451445660433}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.5400\n- nmae: 0.9676\n- r2: 0.4600\n- combined_score: 0.6493\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5490)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law with cross-interactions in log-space:\n\n      f1 = log(tokens + eps)\n      f2 = log(params + eps)\n      f3 = log(unique_tokens + eps)\n\n      log(loss) = \u03b80\n                + \u03b81*f1 + \u03b82*f2 + \u03b83*f3\n                + \u03b84*(f1*f2) + \u03b85*(f1*f3) + \u03b86*(f2*f3)\n\n    Loss = exp(clamp(log(loss), -50, 50))\n\n    params: array of length 7 [\u03b80..\u03b86]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 7:\n        raise ValueError(f\"Expect 7 parameters but got {\u03b8.size}\")\n\n    # compute stabilized log-features\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    # design matrix for prediction\n    D = np.column_stack([\n        np.ones_like(f1),  # intercept\n        f1, f2, f3,\n        f1 * f2, f1 * f3, f2 * f3\n    ])\n\n    # raw log-predictions\n    y_log = D.dot(\u03b8)\n\n    # clamp to avoid overflow in exp\n    y_log = np.clip(y_log, -50.0, 50.0)\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter cross-interaction scaling law by:\n      1) closed-form ridge regression for initialization\n      2) refined L-BFGS-B optimization minimizing MSE in log-space\n\n    Returns theta: array [\u03b80..\u03b86]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # only positive losses for log-fit\n    mask = y > 0\n    if not np.any(mask):\n        return np.zeros(7, dtype=float)\n\n    X = X[mask]\n    y = y[mask]\n\n    # stabilized log-features\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n    y_log = np.log(y + eps)\n\n    # build design matrix\n    D = np.column_stack([\n        np.ones_like(f1),\n        f1, f2, f3,\n        f1 * f2, f1 * f3, f2 * f3\n    ])\n\n    # ridge-regularized normal equations for initialization\n    reg = 1e-6\n    G = D.T.dot(D) + reg * np.eye(7)\n    rhs = D.T.dot(y_log)\n    try:\n        theta_init = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        theta_init = np.linalg.lstsq(D, y_log, rcond=None)[0]\n\n    # refine with L-BFGS-B minimizing MSE in log-space\n    def mse_log(theta):\n        r = D.dot(theta) - y_log\n        return np.mean(r * r)\n\n    res = minimize(\n        mse_log,\n        theta_init,\n        method=\"L-BFGS-B\",\n        options={\"maxiter\": 500, \"ftol\": 1e-9}\n    )\n\n    return res.x if res.success else theta_init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5590)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Coupled power\u2010law scaling with asymptotic floor:\n      loss \u2248 L_inf\n             + M * tokens^(\u2013alpha) * params_count^(\u2013beta) * unique_tokens^(\u2013gamma)\n\n    params: [L_inf, M, alpha, beta, gamma] (5 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if len(params) != 5:\n        raise ValueError(\n            f\"Expected 5 parameters [L_inf, M, alpha, beta, gamma], got {len(params)}\"\n        )\n    L_inf, M, alpha, beta, gamma = params\n\n    # avoid zero\u2010division\n    tokens       = X[:, 0] + 1e-12\n    params_count = X[:, 1] + 1e-12\n    unique_toks  = X[:, 2] + 1e-12\n\n    # coupled power\u2010law form\n    pred = (\n        L_inf\n        + M\n          * np.power(tokens,       -alpha)\n          * np.power(params_count, -beta)\n          * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter coupled power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, M, alpha, beta, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # shape (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # shape (N,)\n    N = y.shape[0]\n\n    # 1) Initialize L_inf as a small fraction of minimum observed loss\n    y_min = np.min(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n\n    # 2) Prepare adjusted targets for linearization\n    eps = 1e-12\n    y_adj = y - L_inf_init\n    mask = y_adj > eps\n    if mask.sum() >= 3:\n        X2 = X[mask]\n        y2 = y_adj[mask] + eps\n        # logs of features\n        log_t = np.log(X2[:, 0] + eps)\n        log_p = np.log(X2[:, 1] + eps)\n        log_u = np.log(X2[:, 2] + eps)\n        log_y = np.log(y2)\n        # design matrix for: log_y = log M - alpha\u00b7log_t - beta\u00b7log_p - gamma\u00b7log_u\n        D = np.column_stack([np.ones_like(log_y), -log_t, -log_p, -log_u])\n        theta, *_ = np.linalg.lstsq(D, log_y, rcond=None)\n        logM_init = theta[0]\n        alpha_init = max(0.0, theta[1])\n        beta_init  = max(0.0, theta[2])\n        gamma_init = max(0.0, theta[3])\n        M_init = max(eps, np.exp(logM_init))\n    else:\n        # fallback defaults if too few positive residuals\n        alpha_init = beta_init = gamma_init = 0.5\n        M_init = max(eps, np.mean(y))\n\n    init_params = np.array([\n        L_inf_init,\n        M_init,\n        alpha_init,\n        beta_init,\n        gamma_init\n    ], dtype=float)\n\n    # enforce non\u2010negative parameters\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # M\n        (0.0, None),  # alpha\n        (0.0, None),  # beta\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 182799832890.8077, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (381562595631808630489088.000), Excellent nmae (731199331563.231), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5452, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5590, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Coupled power\u2010law scaling with asymptotic floor:\n      loss \u2248 L_inf\n             + M * tokens^(\u2013alpha) * params_count^(\u2013beta) * unique_tokens^(\u2013gamma)\n\n    params: [L_inf, M, alpha, beta, gamma] (5 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if len(params) != 5:\n        raise ValueError(\n            f\"Expected 5 parameters [L_inf, M, alpha, beta, gamma], got {len(params)}\"\n        )\n    L_inf, M, alpha, beta, gamma = params\n\n    # avoid zero\u2010division\n    tokens       = X[:, 0] + 1e-12\n    params_count = X[:, 1] + 1e-12\n    unique_toks  = X[:, 2] + 1e-12\n\n    # coupled power\u2010law form\n    pred = (\n        L_inf\n        + M\n          * np.power(tokens,       -alpha)\n          * np.power(params_count, -beta)\n          * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter coupled power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, M, alpha, beta, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # shape (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # shape (N,)\n    N = y.shape[0]\n\n    # 1) Initialize L_inf as a small fraction of minimum observed loss\n    y_min = np.min(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n\n    # 2) Prepare adjusted targets for linearization\n    eps = 1e-12\n    y_adj = y - L_inf_init\n    mask = y_adj > eps\n    if mask.sum() >= 3:\n        X2 = X[mask]\n        y2 = y_adj[mask] + eps\n        # logs of features\n        log_t = np.log(X2[:, 0] + eps)\n        log_p = np.log(X2[:, 1] + eps)\n        log_u = np.log(X2[:, 2] + eps)\n        log_y = np.log(y2)\n        # design matrix for: log_y = log M - alpha\u00b7log_t - beta\u00b7log_p - gamma\u00b7log_u\n        D = np.column_stack([np.ones_like(log_y), -log_t, -log_p, -log_u])\n        theta, *_ = np.linalg.lstsq(D, log_y, rcond=None)\n        logM_init = theta[0]\n        alpha_init = max(0.0, theta[1])\n        beta_init  = max(0.0, theta[2])\n        gamma_init = max(0.0, theta[3])\n        M_init = max(eps, np.exp(logM_init))\n    else:\n        # fallback defaults if too few positive residuals\n        alpha_init = beta_init = gamma_init = 0.5\n        M_init = max(eps, np.mean(y))\n\n    init_params = np.array([\n        L_inf_init,\n        M_init,\n        alpha_init,\n        beta_init,\n        gamma_init\n    ], dtype=float)\n\n    # enforce non\u2010negative parameters\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # M\n        (0.0, None),  # alpha\n        (0.0, None),  # beta\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced 7-parameter scaling law:\n      Let f1 = log(tokens + eps), f2 = log(params + eps), f3 = log(unique_tokens + eps).\n      Then\n        log_loss_adj = a0\n                     + a1*f1 + a2*f2 + a3*f3\n                     + a4*(f1*f2) + a5*(f1*f3)\n      and\n        loss = C0 + exp(log_loss_adj)\n    where params = [C0, a0, a1, a2, a3, a4, a5].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [C0,a0..a5], got {p.size}\")\n\n    C0, a0, a1, a2, a3, a4, a5 = p\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    # build log-adjusted prediction\n    log_loss_adj = (\n        a0\n        + a1 * f1\n        + a2 * f2\n        + a3 * f3\n        + a4 * (f1 * f2)\n        + a5 * (f1 * f3)\n    )\n    # clamp for numerical stability\n    log_loss_adj = np.clip(log_loss_adj, -50.0, 50.0)\n    return C0 + np.exp(log_loss_adj)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter cross-interaction scaling law:\n      params = [C0, a0, a1, a2, a3, a4, a5]\n    by minimizing MSE in the log-domain (after subtracting floor).\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N = y.shape[0]\n    if N == 0:\n        return np.zeros(7, dtype=float)\n\n    # initialize C0 as small fraction of min(loss)\n    y_min = np.min(y)\n    C0_init = max(0.0, 0.1 * y_min)\n\n    # Construct features for initial linear fit in log-domain\n    eps = 1e-8\n    mask = (y > C0_init + eps)\n    if mask.sum() < 3:\n        # fallback to simple power-law fit if too few points\n        C0_init = 0.0\n        mask = (y > eps)\n    Xf = X[mask]\n    yf = y[mask] - C0_init\n\n    f1 = np.log(Xf[:, 0] + eps)\n    f2 = np.log(Xf[:, 1] + eps)\n    f3 = np.log(Xf[:, 2] + eps)\n    y_log = np.log(yf + eps)\n\n    # design matrix: [1, f1, f2, f3, f1*f2, f1*f3]\n    D = np.column_stack([\n        np.ones_like(f1),\n        f1, f2, f3,\n        f1 * f2, f1 * f3\n    ])\n    # ridge-regression initialization\n    reg = 1e-6\n    G = D.T.dot(D) + reg * np.eye(D.shape[1])\n    rhs = D.T.dot(y_log)\n    try:\n        a_init = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        a_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # initial parameter vector\n    p0 = np.concatenate([[C0_init], a_init])\n\n    # bounds: C0 \u2265 0, others unbounded\n    bounds = [(0.0, None)] + [(-np.inf, np.inf)] * 6\n\n    def obj(p):\n        # MSE in log-domain after subtracting floor\n        C0 = p[0]\n        y_pred = scaling_law_func(X, p)\n        # ensure positivity\n        y_adj = np.maximum(y - C0, eps)\n        y_pred_adj = np.maximum(y_pred - C0, eps)\n        resid = np.log(y_pred_adj) - np.log(y_adj)\n        return np.mean(resid * resid)\n\n    res = minimize(\n        obj,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000}\n    )\n    return res.x if res.success else p0\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Introduced pairwise cross\u2010interaction terms (f1\u00b7f2 and f1\u00b7f3) in log\u2010domain to capture coupling between data size and model capacity.\n- Added an explicit loss floor C0 to model irreducible error.\n- Used ridge\u2010regularized closed\u2010form solution for initialization of the log\u2010domain coefficients.\n- Optimized all 7 parameters via L-BFGS-B with a log-domain MSE objective, improving relative\u2010error fit (nmae) while maintaining numerical stability.\n"]}}}