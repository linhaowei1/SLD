{"id": "5dba0043-5ef9-48ef-a2b8-02d8fd183990", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss via a 5\u2010parameter inverse\u2010power scaling law:\n      loss \u2248 E + A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5 (or shape (T,5)) [A, b, c, d, E]\n    Returns:\n      preds: ndarray of shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # Avoid zero\u2010division / zero^exponent issues\n    X = np.maximum(X, 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # Promote to shape (T,5)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {p.shape[1]}\")\n\n    A = p[:, 0]  # shape (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n\n    # Compute A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n    t_pow = X[:, [0]] ** (-b[np.newaxis, :])\n    p_pow = X[:, [1]] ** (-c[np.newaxis, :])\n    u_pow = X[:, [2]] ** (-d[np.newaxis, :])\n    term = A[np.newaxis, :] * t_pow * p_pow * u_pow\n\n    preds = E[np.newaxis, :] + term  # shape (N,T)\n    # If only one parameter set, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter inverse\u2010power scaling law\n      loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n    by minimizing the mean relative\u2010squared error:\n      mean(((pred - y)/(y + eps))^2)\n\n    Returns:\n      params_opt: ndarray of length 5 [A, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Keep only positive, finite targets\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = y.shape[0]\n    if N == 0:\n        # Fallback if no valid data\n        return np.array([1.0, 0.0, 0.0, 0.0, np.mean(loss_values)], dtype=float)\n\n    # Initial linear regression in log\u2010space to get A, b, c, d\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y + 1e-12)\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    alpha, b_lin, c_lin, d_lin = beta\n\n    # Convert to our parameterization\n    A0 = np.exp(alpha)\n    b0 = max(-b_lin, 0.0)\n    c0 = max(-c_lin, 0.0)\n    d0 = max(-d_lin, 0.0)\n    y_min = y.min()\n    E0 = max(0.1 * y_min, 1e-6)\n\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # Bounds: A \u2265 1e-12, exponents \u2265 0, floor E \u2265 0\n    bounds = [\n        (1e-12, None),  # A\n        (0.0, None),    # b\n        (0.0, None),    # c\n        (0.0, None),    # d\n        (0.0, None)     # E\n    ]\n    eps = 1e-12\n\n    def objective(p_flat):\n        pred = scaling_law_func(X, p_flat)\n        rel_err2 = ((pred - y) / (y + eps)) ** 2\n        return np.mean(rel_err2)\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n    return res.x if res.success else x0", "language": "python", "parent_id": "ac604839-9476-4331-ab7b-9d5b266e119a", "generation": 3, "timestamp": 1754714796.8851817, "iteration_found": 47, "metrics": {"nmse": 0.16570190718044653, "nmae": 0.37237864440523466, "r2": 0.8342980928195535, "combined_score": 0.8578522466509129}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.5397900008732617, "nmae": 0.9672760282970895, "r2": 0.4602099991267383, "combined_score": 0.6494392088745021}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.5398\n- nmae: 0.9673\n- r2: 0.4602\n- combined_score: 0.6494\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3218, nmae: 0.7155, r2: 0.6782, combined_score: 0.7566\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1657, nmae: 0.3724, r2: 0.8343, combined_score: 0.8579\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5576)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as:\n      loss \u2248 E + A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E], all non-negative.\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # avoid zero\u2010division / zero^exponent issues\n    X = np.maximum(X, 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # Promote to 2D: (T,5)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {p.shape[1]}\")\n\n    A = p[:, 0]  # shape (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n\n    # Compute term = A * tokens^(-b) * params^(-c) * unique_tokens^(-d)\n    # We'll broadcast over N\u00d7T\n    t_pow = X[:, [0]] ** (-b[np.newaxis, :])\n    p_pow = X[:, [1]] ** (-c[np.newaxis, :])\n    u_pow = X[:, [2]] ** (-d[np.newaxis, :])\n    term = A[np.newaxis, :] * t_pow * p_pow * u_pow\n\n    pred = E[np.newaxis, :] + term  # shape (N,T)\n    # If only one parameter set, return shape (N,)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n    by minimizing relative\u2010squared error in the loss domain:\n      objective = mean(((pred - y) / (y + eps))^2)\n\n    Returns:\n      params_opt: array of length 5 [A, b, c, d, E], all non\u2010negative.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Filter to finite, positive targets\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = y.shape[0]\n    if N == 0:\n        # fallback to trivial parameters\n        return np.array([1.0, 0.0, 0.0, 0.0, np.mean(loss_values)], dtype=float)\n\n    # Prepare logs for initial regression\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y + 1e-12)\n\n    # Linear regression: y_log \u2248 alpha + beta1\u00b7log(tokens) + beta2\u00b7log(params) + beta3\u00b7log(unique)\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    alpha, b_lin, c_lin, d_lin = beta\n    # Convert slopes to exponents b,c,d (we want loss \u223c A\u00b7tokens^(\u2212b) ...):\n    A0 = np.exp(alpha)\n    b0 = max(-b_lin, 0.0)\n    c0 = max(-c_lin, 0.0)\n    d0 = max(-d_lin, 0.0)\n    # Floor initial guess at fraction of minimum loss\n    y_min = y.min()\n    E0 = max(0.1 * y_min, 1e-6)\n\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # Enforce non-negativity\n    bounds = [(1e-12, None),  # A \u2265 0\n              (0.0, None),    # b \u2265 0\n              (0.0, None),    # c \u2265 0\n              (0.0, None),    # d \u2265 0\n              (0.0, None)]    # E \u2265 0\n\n    eps = 1e-12\n\n    def objective(p_flat):\n        pred = scaling_law_func(X, p_flat)\n        # relative squared error\n        rel_err2 = ((pred - y) / (y + eps))**2\n        return np.mean(rel_err2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-12, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        return x0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1657), Performs well on nmae (0.3724), Performs well on r2 (0.8343), Performs well on combined_score (0.8579)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.6180)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss via a 5-parameter scaling law:\n      loss = E + exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5): [a, b, c, d, E]\n\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) otherwise\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b,c,d,E], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # log-amplitude\n    b = p[:, 1]  # exponent on tokens\n    c = p[:, 2]  # exponent on params\n    d = p[:, 3]  # exponent on unique_tokens\n    E = p[:, 4]  # irreducible floor\n\n    # avoid zeros\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    t = X_safe[:, [0]]\n    pr = X_safe[:, [1]]\n    u = X_safe[:, [2]]\n\n    # compute the multiplicative term: exp(a) * t^b * pr^c * u^d\n    mono = np.exp(a[np.newaxis, :]) * (t ** b[np.newaxis, :]) \\\n           * (pr ** c[np.newaxis, :]) * (u ** d[np.newaxis, :])\n\n    # add floor E\n    preds = E[np.newaxis, :] + mono\n\n    # return shape (N,) if single param-vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing a combined error:\n      loss \u2248 E + exp(a)*tokens^b*params^c*unique_tokens^d\n\n    Returns:\n      params_opt: array of length 5: [a, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # filter valid data\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    if len(y) == 0:\n        # fallback to zeros if no valid data\n        return np.zeros(5, dtype=float)\n\n    # initial estimate of floor E: small fraction of min loss\n    y_min = np.min(y)\n    E0 = max(0.0, y_min * 0.1)\n\n    # prepare log-features\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    f = np.log(X_safe)  # shape (M,3)\n    t, pr, u = f[:, 0], f[:, 1], f[:, 2]\n\n    # initial linear fit in log-space ignoring floor:\n    # log(y - E0) \u2248 a + b*t + c*pr + d*u\n    y_adj = y - E0\n    # ensure positivity\n    y_adj = np.maximum(y_adj, eps)\n    y_log = np.log(y_adj)\n    M = len(y_log)\n    D = np.column_stack([np.ones(M), t, pr, u])  # (M,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # initial parameter vector [a,b,c,d,E]\n    x0 = np.concatenate([beta_init, [E0]])\n\n    # bounds: allow a,b,c,d unbounded, E in [0, y_min]\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, y_min)]\n\n    # precompute log(y) for objective\n    y_log_true = np.log(y)\n\n    # combined objective: MSE in log-space + relative MSE in original space\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # clamp preds for stability\n        preds = np.maximum(preds, eps)\n        # log-space MSE\n        mse_log = np.mean((np.log(preds) - y_log_true) ** 2)\n        # relative MSE in original space\n        rel = (preds - y) / (y + eps)\n        mse_rel = np.mean(rel ** 2)\n        return mse_log + mse_rel\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n\n    return res.x if res.success else x0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3218), Performs well on nmae (0.7155), Performs well on r2 (0.6782), Performs well on combined_score (0.7566)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5490)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced log\u2010bilinear scaling law with interaction terms:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)*log(params)]\n                 + f\u00b7[log(tokens)*log(unique_tokens)]\n                 + g\u00b7[log(params)*log(unique_tokens)]\n    => loss = exp(a + b t + c p + d u + e t\u00b7p + f t\u00b7u + g p\u00b7u)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent fits)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix D: [1, t, p, u, t*p, t*u, p*u]\n    N = X.shape[0]\n    D = np.column_stack([\n        np.ones(N),\n        t,\n        p,\n        u,\n        t * p,\n        t * u,\n        p * u\n    ])  # shape (N,7)\n\n    # Prepare parameter array\n    P_arr = np.asarray(params, dtype=float)\n    if P_arr.ndim == 1:\n        P_arr = P_arr[np.newaxis, :]\n    M, P = P_arr.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute log\u2010predictions and exponentiate\n    log_pred = D.dot(P_arr.T)   # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced log\u2010bilinear scaling law by regularized least squares in log\u2010space.\n    Returns 7 parameters [a, b, c, d, e, f, g] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)*log(params)]\n                 + f\u00b7[log(tokens)*log(unique_tokens)]\n                 + g\u00b7[log(params)*log(unique_tokens)]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)      # (N,)\n\n    # keep only strictly positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # compute logs with small offset\n    eps = 1e-12\n    X_log = np.log(X + eps)  # (n,3)\n    y_log = np.log(y + eps)  # (n,)\n\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # design matrix: [1, t, p, u, t*p, t*u, p*u]\n    D = np.column_stack([\n        np.ones_like(t),\n        t,\n        p,\n        u,\n        t * p,\n        t * u,\n        p * u\n    ])  # shape (n,7)\n\n    # regularization for numerical stability\n    lambda_reg = 1e-6\n    G = D.T.dot(D) + lambda_reg * np.eye(7)\n    rhs = D.T.dot(y_log)\n\n    try:\n        theta = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        theta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    return theta\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6241)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log-linear scaling law with additive floor:\n      loss \u2248 exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens))\n             + exp(c)\n    We parameterize floor = exp(c) so it stays non-negative without hard bounds.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,3) columns = [tokens, params, unique_tokens]\n      params:      length\u20105 array [a, b1, b2, b3, c]\n    Returns:\n      preds:       shape (N,) predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # if someone passed a flat list of length 3\n    if X.ndim == 1 and X.size == 3:\n        X = X.reshape(1, 3)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b1,b2,b3,c], got {p.size}\")\n\n    a, b1, b2, b3, c = p\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n    log_part = a \\\n               + b1 * X_log[:, 0] \\\n               + b2 * X_log[:, 1] \\\n               + b3 * X_log[:, 2]\n    # the main power\u2010law piece plus a floor = exp(c)\n    preds = np.exp(log_part) + np.exp(c)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in the original loss space:\n      loss_pred = exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens)) + exp(c)\n\n    Returns:\n      params: array([a, b1, b2, b3, c])\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # We'll initialize [a,b1,b2,b3] via a quick linear least squares\n    # in log-space (ignoring the floor), and start c = log(1e-3).\n    # Restrict to strictly positive losses for the log fit.\n    mask = (y > 0)\n    Xm = X[mask]\n    ym = y[mask]\n    X_log = np.log(Xm + 1e-12)           # (N_pos,3)\n    Y_log = np.log(ym + 1e-12)           # (N_pos,)\n    # design: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((X_log.shape[0],1)), X_log])  # (N_pos,4)\n    beta, *_ = np.linalg.lstsq(D, Y_log, rcond=None)\n\n    # initial guess:  [a,b1,b2,b3] from beta, c = log(1e-3)\n    init = np.zeros(5, dtype=float)\n    init[:4] = beta\n    init[4]   = np.log(1e-3)\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5576, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as:\n      loss \u2248 E + A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5):\n                   [A, b, c, d, E], all non-negative.\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) if multiple parameter sets.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # avoid zero\u2010division / zero^exponent issues\n    X = np.maximum(X, 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # Promote to 2D: (T,5)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {p.shape[1]}\")\n\n    A = p[:, 0]  # shape (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n\n    # Compute term = A * tokens^(-b) * params^(-c) * unique_tokens^(-d)\n    # We'll broadcast over N\u00d7T\n    t_pow = X[:, [0]] ** (-b[np.newaxis, :])\n    p_pow = X[:, [1]] ** (-c[np.newaxis, :])\n    u_pow = X[:, [2]] ** (-d[np.newaxis, :])\n    term = A[np.newaxis, :] * t_pow * p_pow * u_pow\n\n    pred = E[np.newaxis, :] + term  # shape (N,T)\n    # If only one parameter set, return shape (N,)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n    by minimizing relative\u2010squared error in the loss domain:\n      objective = mean(((pred - y) / (y + eps))^2)\n\n    Returns:\n      params_opt: array of length 5 [A, b, c, d, E], all non\u2010negative.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Filter to finite, positive targets\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = y.shape[0]\n    if N == 0:\n        # fallback to trivial parameters\n        return np.array([1.0, 0.0, 0.0, 0.0, np.mean(loss_values)], dtype=float)\n\n    # Prepare logs for initial regression\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y + 1e-12)\n\n    # Linear regression: y_log \u2248 alpha + beta1\u00b7log(tokens) + beta2\u00b7log(params) + beta3\u00b7log(unique)\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    alpha, b_lin, c_lin, d_lin = beta\n    # Convert slopes to exponents b,c,d (we want loss \u223c A\u00b7tokens^(\u2212b) ...):\n    A0 = np.exp(alpha)\n    b0 = max(-b_lin, 0.0)\n    c0 = max(-c_lin, 0.0)\n    d0 = max(-d_lin, 0.0)\n    # Floor initial guess at fraction of minimum loss\n    y_min = y.min()\n    E0 = max(0.1 * y_min, 1e-6)\n\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # Enforce non-negativity\n    bounds = [(1e-12, None),  # A \u2265 0\n              (0.0, None),    # b \u2265 0\n              (0.0, None),    # c \u2265 0\n              (0.0, None),    # d \u2265 0\n              (0.0, None)]    # E \u2265 0\n\n    eps = 1e-12\n\n    def objective(p_flat):\n        pred = scaling_law_func(X, p_flat)\n        # relative squared error\n        rel_err2 = ((pred - y) / (y + eps))**2\n        return np.mean(rel_err2)\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol':1e-12, 'maxiter':5000})\n    if res.success:\n        return res.x\n    else:\n        return x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6621, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^(\u2010alpha)\n             + B * params_count^(\u2010beta)\n             + C * unique_tokens^(\u2010gamma)\n\n    params: [L_inf, A, alpha, B, beta, C, gamma] (7 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N, 3)\n    if len(params) != 7:\n        raise ValueError(f\"Expected 7 parameters [L_inf, A, alpha, B, beta, C, gamma], got {len(params)}\")\n    L_inf, A, alpha, B, beta, C, gamma = params\n\n    tokens        = X[:, 0]\n    params_count  = X[:, 1]\n    unique_toks   = X[:, 2]\n\n    # Compute the predicted loss as the sum of three decaying power\u2010laws plus an asymptotic floor\n    pred = (\n        L_inf\n        + A * np.power(tokens,       -alpha)\n        + B * np.power(params_count, -beta)\n        + C * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter asymptotic power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, A, alpha, B, beta, C, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # (N,)\n\n    # Initialize parameters based on observed range of y\n    y_min, y_max = np.min(y), np.max(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n    span = y_max - y_min\n    A_init = span / 3.0\n    B_init = span / 3.0\n    C_init = span / 3.0\n    alpha_init = beta_init = gamma_init = 0.5\n\n    init_params = np.array([\n        L_inf_init,\n        A_init,   alpha_init,\n        B_init,   beta_init,\n        C_init,   gamma_init,\n    ], dtype=float)\n\n    # Bounds: ensure non\u2010negativity of floor, amplitudes, and exponents\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # A\n        (0.0, None),  # alpha\n        (0.0, None),  # B\n        (0.0, None),  # beta\n        (0.0, None),  # C\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.967), NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.6241, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log-linear scaling law with additive floor:\n      loss \u2248 exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens))\n             + exp(c)\n    We parameterize floor = exp(c) so it stays non-negative without hard bounds.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,3) columns = [tokens, params, unique_tokens]\n      params:      length\u20105 array [a, b1, b2, b3, c]\n    Returns:\n      preds:       shape (N,) predicted loss\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # if someone passed a flat list of length 3\n    if X.ndim == 1 and X.size == 3:\n        X = X.reshape(1, 3)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b1,b2,b3,c], got {p.size}\")\n\n    a, b1, b2, b3, c = p\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n    log_part = a \\\n               + b1 * X_log[:, 0] \\\n               + b2 * X_log[:, 1] \\\n               + b3 * X_log[:, 2]\n    # the main power\u2010law piece plus a floor = exp(c)\n    preds = np.exp(log_part) + np.exp(c)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in the original loss space:\n      loss_pred = exp(a + b1\u00b7log(tokens) + b2\u00b7log(params) + b3\u00b7log(unique_tokens)) + exp(c)\n\n    Returns:\n      params: array([a, b1, b2, b3, c])\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # We'll initialize [a,b1,b2,b3] via a quick linear least squares\n    # in log-space (ignoring the floor), and start c = log(1e-3).\n    # Restrict to strictly positive losses for the log fit.\n    mask = (y > 0)\n    Xm = X[mask]\n    ym = y[mask]\n    X_log = np.log(Xm + 1e-12)           # (N_pos,3)\n    Y_log = np.log(ym + 1e-12)           # (N_pos,)\n    # design: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((X_log.shape[0],1)), X_log])  # (N_pos,4)\n    beta, *_ = np.linalg.lstsq(D, Y_log, rcond=None)\n\n    # initial guess:  [a,b1,b2,b3] from beta, c = log(1e-3)\n    init = np.zeros(5, dtype=float)\n    init[:4] = beta\n    init[4]   = np.log(1e-3)\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.6180, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss via a 5-parameter scaling law:\n      loss = E + exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5): [a, b, c, d, E]\n\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) otherwise\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b,c,d,E], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # log-amplitude\n    b = p[:, 1]  # exponent on tokens\n    c = p[:, 2]  # exponent on params\n    d = p[:, 3]  # exponent on unique_tokens\n    E = p[:, 4]  # irreducible floor\n\n    # avoid zeros\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    t = X_safe[:, [0]]\n    pr = X_safe[:, [1]]\n    u = X_safe[:, [2]]\n\n    # compute the multiplicative term: exp(a) * t^b * pr^c * u^d\n    mono = np.exp(a[np.newaxis, :]) * (t ** b[np.newaxis, :]) \\\n           * (pr ** c[np.newaxis, :]) * (u ** d[np.newaxis, :])\n\n    # add floor E\n    preds = E[np.newaxis, :] + mono\n\n    # return shape (N,) if single param-vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing a combined error:\n      loss \u2248 E + exp(a)*tokens^b*params^c*unique_tokens^d\n\n    Returns:\n      params_opt: array of length 5: [a, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # filter valid data\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    if len(y) == 0:\n        # fallback to zeros if no valid data\n        return np.zeros(5, dtype=float)\n\n    # initial estimate of floor E: small fraction of min loss\n    y_min = np.min(y)\n    E0 = max(0.0, y_min * 0.1)\n\n    # prepare log-features\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    f = np.log(X_safe)  # shape (M,3)\n    t, pr, u = f[:, 0], f[:, 1], f[:, 2]\n\n    # initial linear fit in log-space ignoring floor:\n    # log(y - E0) \u2248 a + b*t + c*pr + d*u\n    y_adj = y - E0\n    # ensure positivity\n    y_adj = np.maximum(y_adj, eps)\n    y_log = np.log(y_adj)\n    M = len(y_log)\n    D = np.column_stack([np.ones(M), t, pr, u])  # (M,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # initial parameter vector [a,b,c,d,E]\n    x0 = np.concatenate([beta_init, [E0]])\n\n    # bounds: allow a,b,c,d unbounded, E in [0, y_min]\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, y_min)]\n\n    # precompute log(y) for objective\n    y_log_true = np.log(y)\n\n    # combined objective: MSE in log-space + relative MSE in original space\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # clamp preds for stability\n        preds = np.maximum(preds, eps)\n        # log-space MSE\n        mse_log = np.mean((np.log(preds) - y_log_true) ** 2)\n        # relative MSE in original space\n        rel = (preds - y) / (y + eps)\n        mse_rel = np.mean(rel ** 2)\n        return mse_log + mse_rel\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n\n    return res.x if res.success else x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as an additive floor plus inverse\u2010power scaling:\n      loss \u2248 E + A * tokens^(\u2013b) * params^(\u2013c) * unique_tokens^(\u2013d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [A, b, c, d, E]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # unpack features\n    t, p, u = X.T\n    # unpack and enforce non\u2010negativity of parameters\n    A, b, c, d, E = params\n    A = max(A, 0.0)\n    b = max(b, 0.0)\n    c = max(c, 0.0)\n    d = max(d, 0.0)\n    E = max(E, 0.0)\n    # avoid zero\u2010division / zero\u2010power issues\n    t = np.maximum(t, 1e-12)\n    p = np.maximum(p, 1e-12)\n    u = np.maximum(u, 1e-12)\n    # compute prediction\n    return E + A * (t ** (-b)) * (p ** (-c)) * (u ** (-d))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter inverse\u2010power scaling law:\n      loss \u2248 E + A * tokens^(\u2013b) * params^(\u2013c) * unique_tokens^(\u2013d)\n    by minimizing mean squared error in the original loss domain.\n\n    Returns:\n      params_opt: ndarray of length 5 [A, b, c, d, E]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # filter out invalid entries\n    mask = np.isfinite(y)\n    X = X[mask]\n    y = y[mask]\n    # ensure losses are positive\n    y = np.maximum(y, 1e-12)\n\n    # initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    E0 = max(0.1 * y_min, 1e-12)\n    A0 = max(y_max - E0, 1e-6)\n    # modest starting exponents\n    b0, c0, d0 = 0.3, 0.3, 0.3\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # bounds: A,E \u2265 0; exponents between 0 and 5; E \u2264 y_min to keep floor below data\n    bounds = [\n        (1e-12, None),      # A\n        (0.0, 5.0),         # b\n        (0.0, 5.0),         # c\n        (0.0, 5.0),         # d\n        (0.0, y_min)        # E\n    ]\n\n    def objective(params_flat):\n        preds = scaling_law_func(X, params_flat)\n        return np.mean((preds - y) ** 2)\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n    return res.x if res.success else x0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss via a 5\u2010parameter inverse\u2010power scaling law:\n      loss \u2248 E + A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5 (or shape (T,5)) [A, b, c, d, E]\n    Returns:\n      preds: ndarray of shape (N,) if params is (5,), or (N,T) if params is (T,5)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # Avoid zero\u2010division / zero^exponent issues\n    X = np.maximum(X, 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # Promote to shape (T,5)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(f\"Expected 5 parameters [A,b,c,d,E], got {p.shape[1]}\")\n\n    A = p[:, 0]  # shape (T,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n    E = p[:, 4]\n\n    # Compute A * tokens^(\u2212b) * params^(\u2212c) * unique_tokens^(\u2212d)\n    t_pow = X[:, [0]] ** (-b[np.newaxis, :])\n    p_pow = X[:, [1]] ** (-c[np.newaxis, :])\n    u_pow = X[:, [2]] ** (-d[np.newaxis, :])\n    term = A[np.newaxis, :] * t_pow * p_pow * u_pow\n\n    preds = E[np.newaxis, :] + term  # shape (N,T)\n    # If only one parameter set, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter inverse\u2010power scaling law\n      loss \u2248 E + A\u00b7tokens^(\u2212b)\u00b7params^(\u2212c)\u00b7unique_tokens^(\u2212d)\n    by minimizing the mean relative\u2010squared error:\n      mean(((pred - y)/(y + eps))^2)\n\n    Returns:\n      params_opt: ndarray of length 5 [A, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Keep only positive, finite targets\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = y.shape[0]\n    if N == 0:\n        # Fallback if no valid data\n        return np.array([1.0, 0.0, 0.0, 0.0, np.mean(loss_values)], dtype=float)\n\n    # Initial linear regression in log\u2010space to get A, b, c, d\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y + 1e-12)\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    alpha, b_lin, c_lin, d_lin = beta\n\n    # Convert to our parameterization\n    A0 = np.exp(alpha)\n    b0 = max(-b_lin, 0.0)\n    c0 = max(-c_lin, 0.0)\n    d0 = max(-d_lin, 0.0)\n    y_min = y.min()\n    E0 = max(0.1 * y_min, 1e-6)\n\n    x0 = np.array([A0, b0, c0, d0, E0], dtype=float)\n\n    # Bounds: A \u2265 1e-12, exponents \u2265 0, floor E \u2265 0\n    bounds = [\n        (1e-12, None),  # A\n        (0.0, None),    # b\n        (0.0, None),    # c\n        (0.0, None),    # d\n        (0.0, None)     # E\n    ]\n    eps = 1e-12\n\n    def objective(p_flat):\n        pred = scaling_law_func(X, p_flat)\n        rel_err2 = ((pred - y) / (y + eps)) ** 2\n        return np.mean(rel_err2)\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n    return res.x if res.success else x0\n```\n\nExplanation of improvements:\n\n- Uses a log\u2010space linear regression to initialize amplitude and exponents, ensuring a strong starting point.\n- Optimizes relative squared error instead of raw MSE to stabilize fitting across scales of loss.\n- Enforces positivity bounds on all parameters for theoretical stability.\n- Avoids zero\u2010division and log\u2010domain errors with small epsilons.\n- Vectorized implementation handles single or multiple parameter\u2010set evaluations."]}}}