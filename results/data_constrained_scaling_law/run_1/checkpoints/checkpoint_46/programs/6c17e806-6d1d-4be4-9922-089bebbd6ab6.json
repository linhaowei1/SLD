{"id": "6c17e806-6d1d-4be4-9922-089bebbd6ab6", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss via a 5-parameter scaling law:\n      loss = E + exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5): [a, b, c, d, E]\n\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) otherwise\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b,c,d,E], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # log-amplitude\n    b = p[:, 1]  # exponent on tokens\n    c = p[:, 2]  # exponent on params\n    d = p[:, 3]  # exponent on unique_tokens\n    E = p[:, 4]  # irreducible floor\n\n    # avoid zeros\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    t = X_safe[:, [0]]\n    pr = X_safe[:, [1]]\n    u = X_safe[:, [2]]\n\n    # compute the multiplicative term: exp(a) * t^b * pr^c * u^d\n    mono = np.exp(a[np.newaxis, :]) * (t ** b[np.newaxis, :]) \\\n           * (pr ** c[np.newaxis, :]) * (u ** d[np.newaxis, :])\n\n    # add floor E\n    preds = E[np.newaxis, :] + mono\n\n    # return shape (N,) if single param-vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing a combined error:\n      loss \u2248 E + exp(a)*tokens^b*params^c*unique_tokens^d\n\n    Returns:\n      params_opt: array of length 5: [a, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # filter valid data\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    if len(y) == 0:\n        # fallback to zeros if no valid data\n        return np.zeros(5, dtype=float)\n\n    # initial estimate of floor E: small fraction of min loss\n    y_min = np.min(y)\n    E0 = max(0.0, y_min * 0.1)\n\n    # prepare log-features\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    f = np.log(X_safe)  # shape (M,3)\n    t, pr, u = f[:, 0], f[:, 1], f[:, 2]\n\n    # initial linear fit in log-space ignoring floor:\n    # log(y - E0) \u2248 a + b*t + c*pr + d*u\n    y_adj = y - E0\n    # ensure positivity\n    y_adj = np.maximum(y_adj, eps)\n    y_log = np.log(y_adj)\n    M = len(y_log)\n    D = np.column_stack([np.ones(M), t, pr, u])  # (M,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # initial parameter vector [a,b,c,d,E]\n    x0 = np.concatenate([beta_init, [E0]])\n\n    # bounds: allow a,b,c,d unbounded, E in [0, y_min]\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, y_min)]\n\n    # precompute log(y) for objective\n    y_log_true = np.log(y)\n\n    # combined objective: MSE in log-space + relative MSE in original space\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # clamp preds for stability\n        preds = np.maximum(preds, eps)\n        # log-space MSE\n        mse_log = np.mean((np.log(preds) - y_log_true) ** 2)\n        # relative MSE in original space\n        rel = (preds - y) / (y + eps)\n        mse_rel = np.mean(rel ** 2)\n        return mse_log + mse_rel\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n\n    return res.x if res.success else x0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b658f3ad-22d0-4370-b3dc-a17532689f7c", "generation": 3, "timestamp": 1754714699.0717957, "iteration_found": 36, "metrics": {"nmse": 0.3217570936648083, "nmae": 0.7154907277117446, "r2": 0.6782429063351917, "combined_score": 0.7565686651450615}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4078894323513497, "nmae": 0.485650390532621, "r2": 0.5921105676486502, "combined_score": 0.7102830499479467}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4079\n- nmae: 0.4857\n- r2: 0.5921\n- combined_score: 0.7103\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2806, nmae: 0.7775, r2: 0.7194, combined_score: 0.7809\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent fits)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n\n    p = np.asarray(params, dtype=float)\n    # ensure we have shape (M,4)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters [a,b,c,d], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # shape (M,)\n    b = p[:, 1]\n    c = p[:, 2]\n    d = p[:, 3]\n\n    # compute log-predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n\n    preds = np.exp(log_pred)  # shape (N, M)\n    # if only one parameter\u2010set, return (N,) instead of (N,1)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only keep strictly positive losses for the log-transform\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    X_log = np.log(X + eps)  # shape (N,3)\n    y_log = np.log(y + eps)  # shape (N,)\n\n    N = X_log.shape[0]\n    # design matrix in log-space: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((N, 1)), X_log])  # shape (N,4)\n\n    # initial guess from ordinary least squares in log-space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # objective: mean squared error in log-space\n    def _mse_log(beta):\n        resid = D.dot(beta) - y_log\n        return np.mean(resid * resid)\n\n    # refine with L-BFGS-B\n    res = minimize(_mse_log, beta_init, method='L-BFGS-B')\n    beta_opt = res.x if res.success else beta_init\n\n    return beta_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.6396)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced log\u2010quadratic scaling law:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)]^2 + f\u00b7[log(params)]^2 + g\u00b7[log(unique_tokens)]^2\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # Compute logs of features with small offset for stability\n    X_log = np.log(X + 1e-12)\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix of shape (N, 7)\n    # Columns: [1, t, p, u, t^2, p^2, u^2]\n    N = X.shape[0]\n    D = np.column_stack([\n        np.ones(N),\n        t, p, u,\n        t * t,\n        p * p,\n        u * u\n    ])\n\n    # Prepare parameter array\n    P_arr = np.asarray(params, dtype=float)\n    if P_arr.ndim == 1:\n        P_arr = P_arr[np.newaxis, :]\n    M, P = P_arr.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # Compute log\u2010predictions: shape (N, M)\n    # Then exponentiate to get back to loss\u2010space\n    log_pred = D.dot(P_arr.T)   # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010quadratic scaling law by closed\u2010form regularized least squares\n    in log\u2010space. Returns 7 parameters [a, b, c, d, e, f, g] such that\n      log(loss) \u2248 a \n                  + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                  + e\u00b7[log(tokens)]^2 + f\u00b7[log(params)]^2 + g\u00b7[log(unique_tokens)]^2\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only strictly positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # Take logs of inputs and outputs with a small offset\n    X_log = np.log(X + 1e-12)  # (n,3)\n    y_log = np.log(y + 1e-12)  # (n,)\n\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix D of shape (n, 7)\n    D = np.column_stack([\n        np.ones_like(t),\n        t, p, u,\n        t * t,\n        p * p,\n        u * u\n    ])\n\n    # Regularization for numerical stability\n    lambda_reg = 1e-6\n    G = D.T.dot(D) + lambda_reg * np.eye(7)\n    rhs = D.T.dot(y_log)\n\n    # Solve for parameters; fallback to least\u2010squares if singular\n    try:\n        theta = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        theta = np.linalg.lstsq(D, y_log, rcond=None)[0]\n\n    return theta\n```\nKey features: Performs well on nmse (0.2806), Performs well on nmae (0.7775), Performs well on r2 (0.7194), Performs well on combined_score (0.7809)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6180)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined scaling law for LLM loss under data constraints.\n\nWe model:\n  loss \u2248 E + exp(a) \u00b7 tokens^b \u00b7 params^c \u00b7 unique_tokens^d\n\nParameters (5 total):\n  a: log\u2010amplitude of the multiplicative term\n  b, c, d: exponents on tokens, params, unique_tokens\n  E: irreducible loss floor\n\nThis form is compact (\u22647 parameters), numerically stable,\nand we fit by combining log\u2010space and original\u2010space errors\nto balance accuracy across scales.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data characteristics and scaling\u2010law parameters.\n\n    Inputs:\n      data_points: array\u2010like, shape (N,3): [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5): [a, b, c, d, E]\n\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) otherwise.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)          # (N,3)\n    X = np.maximum(X, 1e-12)                              # avoid zeros\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b,c,d,E], got {P}\")\n\n    # unpack parameter vectors\n    a = p[:, 0]  # log\u2010amplitude\n    b = p[:, 1]  # exponent on tokens\n    c = p[:, 2]  # exponent on params\n    d = p[:, 3]  # exponent on unique_tokens\n    E = p[:, 4]  # irreducible floor\n\n    # compute monomial term: exp(a) * t^b * p^c * u^d\n    # result shape: (N, T)\n    t_term = X[:, [0]] ** b[np.newaxis, :]\n    p_term = X[:, [1]] ** c[np.newaxis, :]\n    u_term = X[:, [2]] ** d[np.newaxis, :]\n    mono   = np.exp(a[np.newaxis, :]) * t_term * p_term * u_term\n\n    preds = E[np.newaxis, :] + mono\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter scaling law by minimizing a combined\n    log\u2010space and original\u2010space error using L-BFGS-B.\n\n    Returns:\n      params_opt: array of length 5: [a, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)       # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # Filter out invalid y\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    N = len(y)\n    if N == 0:\n        raise ValueError(\"No valid (finite, positive) loss values to fit.\")\n\n    # logs\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(y)\n\n    # initial linear regression (ignoring floor E):\n    # y_log \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n    beta, *_ = np.linalg.lstsq(D, y_log, rcond=None)       # (4,)\n    a0, b0, c0, d0 = beta\n\n    # initial floor E0: half of the minimum observed loss\n    E0 = max(0.0, np.min(y) * 0.5)\n\n    x0 = np.array([a0, b0, c0, d0, E0], dtype=float)\n\n    # bounds: a,b,c,d free, E in [0, min(y)]\n    bounds = [(-np.inf, np.inf),\n              (-np.inf, np.inf),\n              (-np.inf, np.inf),\n              (-np.inf, np.inf),\n              (0.0, np.min(y))]\n\n    # combined objective: log\u2010space MSE + relative MSE(original)\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # ensure positivity\n        preds = np.maximum(preds, eps)\n        # log\u2010space MSE\n        mse_log = np.mean((np.log(preds) - y_log) ** 2)\n        # relative MSE in original space\n        rel_err = (preds - y) / (np.abs(y) + eps)\n        mse_rel = np.mean(rel_err ** 2)\n        return mse_log + mse_rel\n\n    res = minimize(objective,\n                   x0,\n                   method='L-BFGS-B',\n                   bounds=bounds,\n                   options={'ftol': 1e-12, 'maxiter': 10000})\n\n    p_opt = res.x if res.success else x0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5490)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict model loss from [tokens, params, unique_tokens] via a\n    7-parameter polynomial-in-log scaling law:\n\n      f1 = log(tokens + eps)\n      f2 = log(params + eps)\n      f3 = log(unique_tokens + eps)\n\n      log(loss) = p0\n                + p1*f1 + p2*f2 + p3*f3\n                + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n      loss = exp(clamp(log(loss), -50, 50))\n\n    params: array of length 7 [p0..p6].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"Expect 7 parameters but got %d\" % p.size)\n    p0, p1, p2, p3, p4, p5, p6 = p\n\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    y_log = (\n        p0\n        + p1 * f1\n        + p2 * f2\n        + p3 * f3\n        + p4 * (f1 * f2)\n        + p5 * (f1 * f3)\n        + p6 * (f2 * f3)\n    )\n    # clamp for numerical stability\n    y_log = np.clip(y_log, -50.0, 50.0)\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter polynomial-in-log scaling law by\n    solving a small ridge-regression in log-domain.\n\n    Returns params array [p0..p6].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # filter out non-positive losses\n    mask = y > 0\n    if not np.any(mask):\n        # fallback: return zeros\n        return np.zeros(7, dtype=float)\n    X = X[mask]\n    y = y[mask]\n\n    # build log-features\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    N = X.shape[0]\n    # Design matrix: [1, f1, f2, f3, f1*f2, f1*f3, f2*f3]\n    D = np.column_stack([\n        np.ones(N),\n        f1,\n        f2,\n        f3,\n        f1 * f2,\n        f1 * f3,\n        f2 * f3\n    ])\n\n    # ridge regularization for stability\n    reg = 1e-6\n    A = D.T.dot(D) + reg * np.eye(7)\n    b = D.T.dot(np.log(y + eps))\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6396, Type: Alternative)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced log\u2010quadratic scaling law:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)]^2 + f\u00b7[log(params)]^2 + g\u00b7[log(unique_tokens)]^2\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # Compute logs of features with small offset for stability\n    X_log = np.log(X + 1e-12)\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix of shape (N, 7)\n    # Columns: [1, t, p, u, t^2, p^2, u^2]\n    N = X.shape[0]\n    D = np.column_stack([\n        np.ones(N),\n        t, p, u,\n        t * t,\n        p * p,\n        u * u\n    ])\n\n    # Prepare parameter array\n    P_arr = np.asarray(params, dtype=float)\n    if P_arr.ndim == 1:\n        P_arr = P_arr[np.newaxis, :]\n    M, P = P_arr.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # Compute log\u2010predictions: shape (N, M)\n    # Then exponentiate to get back to loss\u2010space\n    log_pred = D.dot(P_arr.T)   # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010quadratic scaling law by closed\u2010form regularized least squares\n    in log\u2010space. Returns 7 parameters [a, b, c, d, e, f, g] such that\n      log(loss) \u2248 a \n                  + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                  + e\u00b7[log(tokens)]^2 + f\u00b7[log(params)]^2 + g\u00b7[log(unique_tokens)]^2\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only strictly positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # Take logs of inputs and outputs with a small offset\n    X_log = np.log(X + 1e-12)  # (n,3)\n    y_log = np.log(y + 1e-12)  # (n,)\n\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix D of shape (n, 7)\n    D = np.column_stack([\n        np.ones_like(t),\n        t, p, u,\n        t * t,\n        p * p,\n        u * u\n    ])\n\n    # Regularization for numerical stability\n    lambda_reg = 1e-6\n    G = D.T.dot(D) + lambda_reg * np.eye(7)\n    rhs = D.T.dot(y_log)\n\n    # Solve for parameters; fallback to least\u2010squares if singular\n    try:\n        theta = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        theta = np.linalg.lstsq(D, y_log, rcond=None)[0]\n\n    return theta\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict model loss from [tokens, params, unique_tokens] via a\n    7-parameter polynomial-in-log scaling law:\n\n      f1 = log(tokens + eps)\n      f2 = log(params + eps)\n      f3 = log(unique_tokens + eps)\n\n      log(loss) = p0\n                + p1*f1 + p2*f2 + p3*f3\n                + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n      loss = exp(clamp(log(loss), -50, 50))\n\n    params: array of length 7 [p0..p6].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"Expect 7 parameters but got %d\" % p.size)\n    p0, p1, p2, p3, p4, p5, p6 = p\n\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    y_log = (\n        p0\n        + p1 * f1\n        + p2 * f2\n        + p3 * f3\n        + p4 * (f1 * f2)\n        + p5 * (f1 * f3)\n        + p6 * (f2 * f3)\n    )\n    # clamp for numerical stability\n    y_log = np.clip(y_log, -50.0, 50.0)\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter polynomial-in-log scaling law by\n    solving a small ridge-regression in log-domain.\n\n    Returns params array [p0..p6].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # filter out non-positive losses\n    mask = y > 0\n    if not np.any(mask):\n        # fallback: return zeros\n        return np.zeros(7, dtype=float)\n    X = X[mask]\n    y = y[mask]\n\n    # build log-features\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)\n    f2 = np.log(X[:, 1] + eps)\n    f3 = np.log(X[:, 2] + eps)\n\n    N = X.shape[0]\n    # Design matrix: [1, f1, f2, f3, f1*f2, f1*f3, f2*f3]\n    D = np.column_stack([\n        np.ones(N),\n        f1,\n        f2,\n        f3,\n        f1 * f2,\n        f1 * f3,\n        f2 * f3\n    ])\n\n    # ridge regularization for stability\n    reg = 1e-6\n    A = D.T.dot(D) + reg * np.eye(7)\n    b = D.T.dot(np.log(y + eps))\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss via a 5-parameter scaling law:\n      loss = E + exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array of length 5 or shape (T,5): [a, b, c, d, E]\n\n    Returns:\n      preds: shape (N,) if params is length\u20105, or (N,T) otherwise\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    T, P = p.shape\n    if P != 5:\n        raise ValueError(f\"Expected 5 parameters [a,b,c,d,E], got {P}\")\n\n    # unpack parameters\n    a = p[:, 0]  # log-amplitude\n    b = p[:, 1]  # exponent on tokens\n    c = p[:, 2]  # exponent on params\n    d = p[:, 3]  # exponent on unique_tokens\n    E = p[:, 4]  # irreducible floor\n\n    # avoid zeros\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    t = X_safe[:, [0]]\n    pr = X_safe[:, [1]]\n    u = X_safe[:, [2]]\n\n    # compute the multiplicative term: exp(a) * t^b * pr^c * u^d\n    mono = np.exp(a[np.newaxis, :]) * (t ** b[np.newaxis, :]) \\\n           * (pr ** c[np.newaxis, :]) * (u ** d[np.newaxis, :])\n\n    # add floor E\n    preds = E[np.newaxis, :] + mono\n\n    # return shape (N,) if single param-vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing a combined error:\n      loss \u2248 E + exp(a)*tokens^b*params^c*unique_tokens^d\n\n    Returns:\n      params_opt: array of length 5: [a, b, c, d, E]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # filter valid data\n    mask = np.isfinite(y) & (y > 0)\n    X = X[mask]\n    y = y[mask]\n    if len(y) == 0:\n        # fallback to zeros if no valid data\n        return np.zeros(5, dtype=float)\n\n    # initial estimate of floor E: small fraction of min loss\n    y_min = np.min(y)\n    E0 = max(0.0, y_min * 0.1)\n\n    # prepare log-features\n    eps = 1e-12\n    X_safe = np.maximum(X, eps)\n    f = np.log(X_safe)  # shape (M,3)\n    t, pr, u = f[:, 0], f[:, 1], f[:, 2]\n\n    # initial linear fit in log-space ignoring floor:\n    # log(y - E0) \u2248 a + b*t + c*pr + d*u\n    y_adj = y - E0\n    # ensure positivity\n    y_adj = np.maximum(y_adj, eps)\n    y_log = np.log(y_adj)\n    M = len(y_log)\n    D = np.column_stack([np.ones(M), t, pr, u])  # (M,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # initial parameter vector [a,b,c,d,E]\n    x0 = np.concatenate([beta_init, [E0]])\n\n    # bounds: allow a,b,c,d unbounded, E in [0, y_min]\n    bounds = [(-np.inf, np.inf)] * 4 + [(0.0, y_min)]\n\n    # precompute log(y) for objective\n    y_log_true = np.log(y)\n\n    # combined objective: MSE in log-space + relative MSE in original space\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        # clamp preds for stability\n        preds = np.maximum(preds, eps)\n        # log-space MSE\n        mse_log = np.mean((np.log(preds) - y_log_true) ** 2)\n        # relative MSE in original space\n        rel = (preds - y) / (y + eps)\n        mse_rel = np.mean(rel ** 2)\n        return mse_log + mse_rel\n\n    res = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'maxiter': 5000}\n    )\n\n    return res.x if res.success else x0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Switched to a 5-parameter form (a, b, c, d, E) that includes an irreducible loss floor E.\n- Kept model compact (\u22647 parameters) for reliable fitting with limited data.\n- Established a robust initialization via ordinary least-squares in log-space and a heuristic for E.\n- Optimized a combined objective (log-space MSE + relative MSE) to balance accuracy across scales.\n- Enforced numerical stability by clamping and adding small epsilons.\n- Used L-BFGS-B with bounds on E to prevent unphysical negative floors.\n"]}}}