{"id": "c320eda1-8717-4f56-8181-7db44af85895", "code": "import numpy as np\n\n_EPS = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log-quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 [a,b,c,d,e,f,g] or shape (M,7)\n    Returns:\n      preds: np.ndarray of shape (N,) or (N,M)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float)\n    # ensure p is shape (M,7)\n    if p.ndim == 1:\n        p_mat = p[np.newaxis, :]\n    else:\n        p_mat = p.copy()\n    M, P = p_mat.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # log\u2010features\n    Z = np.log(X + _EPS)        # (N,3)\n    z1 = Z[:, 0:1]              # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # design matrix: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([\n        ones,\n        z1,\n        z2,\n        z3,\n        z1 * z2,\n        z1 * z3,\n        z2 * z3\n    ], axis=1)  # (N,7)\n\n    # log\u2010predictions and exponentiate\n    log_pred = F.dot(p_mat.T)   # (N,M)\n    pred = np.exp(log_pred)\n\n    # collapse if single parameter vector\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares in log-space.\n\n    Returns:\n      params_opt: np.ndarray of shape (7,) [a,b,c,d,e,f,g]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # only positive losses\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"No positive loss values to fit\")\n    Xp = X[mask]\n    yp = y[mask]\n\n    # build log\u2010feature design matrix F\n    Z = np.log(Xp + _EPS)      # (n,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([\n        ones,\n        z1,\n        z2,\n        z3,\n        z1 * z2,\n        z1 * z3,\n        z2 * z3\n    ], axis=1)  # (n,7)\n\n    # closed-form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                         # (7,7)\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(yp + _EPS))           # (7,)\n\n    params_opt = np.linalg.solve(A, b)       # (7,)\n    return params_opt", "language": "python", "parent_id": "651def03-9150-4b66-b997-460078e0e5e8", "generation": 3, "timestamp": 1754715668.2916212, "iteration_found": 43, "metrics": {"nmse": 0.2744855632126524, "nmae": 0.7212048295753529, "r2": 0.7255144367873476, "combined_score": 0.7846303079960009}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved scaling law with an additive floor and dataset diversity term:\n      loss \u2248 C0 + exp(a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                   + e\u00b7(unique_tokens/tokens))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6: [C0, a, b, c, d, e]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(\"params must have length 6: [C0, a, b, c, d, e]\")\n\n    C0, a, b, c, d, e = p\n    # unpack features\n    tokens       = X[:, 0]\n    model_params = X[:, 1]\n    unique_tok   = X[:, 2]\n\n    # numerical safety\n    eps = 1e-12\n    tokens_safe       = np.maximum(tokens, eps)\n    model_params_safe = np.maximum(model_params, eps)\n    unique_safe       = np.maximum(unique_tok, eps)\n\n    # dataset diversity ratio\n    ratio = unique_safe / tokens_safe\n\n    # log\u2010linear core + linear ratio term\n    log_part = (\n        a\n        + b * np.log(tokens_safe)\n        + c * np.log(model_params_safe)\n        + d * np.log(unique_safe)\n        + e * ratio\n    )\n\n    pred = C0 + np.exp(log_part)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model by minimizing mean squared error in log\u2010space:\n      loss \u2248 C0 + exp(a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                      + e\u00b7(unique_tokens/tokens))\n\n    Returns:\n      params_opt: array [C0, a, b, c, d, e]\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive targets for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    if X.shape[0] < 5:\n        # Not enough points to fit 6 parameters robustly\n        # Fallback to simple log\u2010linear 4\u2010param model\n        # Design matrix: [1, log(tokens), log(params), log(unique)]\n        eps = 1e-12\n        Xl = np.log(X + eps)\n        yl = np.log(y + eps)\n        D = np.concatenate([np.ones((Xl.shape[0],1)), Xl], axis=1)\n        beta, *_ = np.linalg.lstsq(D, yl, rcond=None)\n        # pad e and C0 to zero\n        return np.array([0.0, beta[0], beta[1], beta[2], beta[3], 0.0])\n\n    # initial guess via log\u2010linear LS ignoring ratio, with zero floor and zero ratio term\n    eps = 1e-12\n    Xl = np.log(X + eps)\n    yl = np.log(y + eps)\n    D = np.concatenate([np.ones((Xl.shape[0],1)), Xl], axis=1)  # (N,4)\n    beta_init, *_ = np.linalg.lstsq(D, yl, rcond=None)\n    a0, b0, c0, d0 = beta_init\n    C0_0 = 0.0\n    e0   = 0.0\n    p0 = np.array([C0_0, a0, b0, c0, d0, e0], dtype=float)\n\n    # objective: MSE in log domain to balance across scale\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # ensure positivity for log\n        eps2 = 1e-12\n        lp = np.log(pred + eps2)\n        ly = np.log(y    + eps2)\n        return np.mean((lp - ly) ** 2)\n\n    # bounds: floor \u22650, others free\n    bounds = [\n        (0.0,   None),  # C0\n        (None,  None),  # a\n        (None,  None),  # b\n        (None,  None),  # c\n        (None,  None),  # d\n        (None,  None),  # e\n    ]\n\n    res = minimize(\n        objective,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess on failure\n        return p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013linear scaling law:\n\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n    Returns:\n      preds: shape (N,) if params is (4,), or (N,M) if params is (M,4)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # take logs safely\n    eps = 1e-12\n    X_log = np.log(X + eps)                          # (N,3)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D array of parameters: shape (M,4)\n    if p.ndim == 1:\n        p_mat = p[np.newaxis, :]\n    else:\n        p_mat = p.copy()\n    M, P = p_mat.shape\n    if P != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {P}\")\n\n    # unpack parameter vectors\n    a = p_mat[:, 0]   # (M,)\n    b = p_mat[:, 1]\n    c = p_mat[:, 2]\n    d = p_mat[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # note X_log[:,0]=log(tokens), X_log[:,1]=log(params), X_log[:,2]=log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :] +\n        b[np.newaxis, :] * X_log[:, 0:1] +\n        c[np.newaxis, :] * X_log[:, 1:2] +\n        d[np.newaxis, :] * X_log[:, 2:3]\n    )\n\n    preds = np.exp(log_pred)  # (N, M)\n    # if only one output, collapse to (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      array of 4 parameters [a, b, c, d] such that\n        log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)   # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # only keep strictly positive losses\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n    if X.shape[0] < 2:\n        # not enough data to fit; fallback to zeros\n        return np.zeros(4, dtype=float)\n\n    # logs with small epsilon\n    eps = 1e-12\n    X_log = np.log(X + eps)   # (N,3)\n    y_log = np.log(y + eps)   # (N,)\n\n    N = X_log.shape[0]\n    # design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # refine via unconstrained L-BFGS-B minimizing MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6265)\n```python\nimport numpy as np\n\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    data_points: array of shape (N,3): [tokens, params, unique_tokens]\n    params:       array of length 7 [a,b,c,d,e,f,g] or shape (M,7)\n    returns:      predictions of shape (N,) or (N,M)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float)\n    # ensure p is (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    # compute log-features\n    Z = np.log(X + _EPS)        # (N,3)\n    z1 = Z[:, 0:1]              # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # build design matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([ones, z1, z2, z3, z1*z2, z1*z3, z2*z3], axis=1)  # (N,7)\n\n    # log-predictions: (N,7) \u00b7 (7,M) => (N,M)\n    log_pred = F.dot(p.T)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013quadratic scaling law by ridge\u2010regularized\n    least squares in log\u2010space.\n\n    data_points: array of shape (N,3)\n    loss_values: array of shape (N,)\n    returns:      array of 7 parameters [a,b,c,d,e,f,g]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    # select positive losses only\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"No positive losses to fit\")\n    Xp = X[mask]\n    yp = y[mask]\n\n    # compute log-features\n    Z = np.log(Xp + _EPS)     # (n,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([ones, z1, z2, z3, z1*z2, z1*z3, z2*z3], axis=1)  # (n,7)\n\n    # closed-form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                     # (7,7)\n    # regularization \u03b1 for stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(yp + _EPS))       # (7,)\n\n    params_opt = np.linalg.solve(A, b)   # (7,)\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6542)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 1.1263, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended power\u2010law scaling with dataset\u2010diversity factor and additive floor:\n      loss \u2248 exp(a) * tokens^b * params^c * (unique_tokens / tokens)^d + f\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3)\n                   columns [tokens, params, unique_tokens]\n      params:      array of length 5 [a, b, c, d, f]\n\n    Returns:\n      preds: shape (N,) predicted loss values\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    a, b, c, d, f = params\n\n    # unpack features\n    tokens       = X[:, 0]\n    model_params = X[:, 1]\n    unique_tok   = X[:, 2]\n\n    # avoid zeros / divide\u2010by\u2010zero\n    eps = 1e-12\n    tokens_safe = tokens + eps\n    model_params_safe = model_params + eps\n    unique_safe = unique_tok + eps\n\n    # diversity ratio\n    ratio = unique_safe / tokens_safe\n\n    # compute the power\u2010law prediction plus floor\n    pred = np.exp(a) * \\\n           np.power(tokens_safe, b) * \\\n           np.power(model_params_safe, c) * \\\n           np.power(ratio, d) + f\n\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model:\n      loss \u2248 exp(a)*tokens^b*params^c*(unique/tokens)^d + f\n\n    Returns:\n      params_opt: array [a, b, c, d, f]\n    \"\"\"\n    # prepare arrays\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive y-values retained\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs for initial guess\n    eps = 1e-12\n    X_log = np.log(X + eps)\n    y_log = np.log(y + eps)\n\n    # linear least squares to get initial a, b, c, d\n    # model: log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    N = X_log.shape[0]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_init\n\n    # initial floor parameter as small fraction of minimum observed loss\n    f0 = np.min(y) * 0.1\n\n    p0 = np.array([a0, b0, c0, d0, f0], dtype=float)\n\n    # objective: minimize MSE on original loss\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        resid = pred - y\n        return np.mean(resid * resid)\n\n    # enforce floor f >= 0\n    bounds = [(None, None),  # a\n              (None, None),  # b\n              (None, None),  # c\n              (None, None),  # d\n              (0.0, None)]   # f\n\n    res = minimize(objective, p0, method=\"L-BFGS-B\", bounds=bounds)\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess if optimization fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n### Inspiration 3 (Score: 0.6265, Type: Alternative)\n```python\nimport numpy as np\n\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    data_points: array of shape (N,3): [tokens, params, unique_tokens]\n    params:       array of length 7 [a,b,c,d,e,f,g] or shape (M,7)\n    returns:      predictions of shape (N,) or (N,M)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float)\n    # ensure p is (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    # compute log-features\n    Z = np.log(X + _EPS)        # (N,3)\n    z1 = Z[:, 0:1]              # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # build design matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([ones, z1, z2, z3, z1*z2, z1*z3, z2*z3], axis=1)  # (N,7)\n\n    # log-predictions: (N,7) \u00b7 (7,M) => (N,M)\n    log_pred = F.dot(p.T)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013quadratic scaling law by ridge\u2010regularized\n    least squares in log\u2010space.\n\n    data_points: array of shape (N,3)\n    loss_values: array of shape (N,)\n    returns:      array of 7 parameters [a,b,c,d,e,f,g]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    # select positive losses only\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"No positive losses to fit\")\n    Xp = X[mask]\n    yp = y[mask]\n\n    # compute log-features\n    Z = np.log(Xp + _EPS)     # (n,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([ones, z1, z2, z3, z1*z2, z1*z3, z2*z3], axis=1)  # (n,7)\n\n    # closed-form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                     # (7,7)\n    # regularization \u03b1 for stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(yp + _EPS))       # (7,)\n\n    params_opt = np.linalg.solve(A, b)   # (7,)\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved scaling law with an additive floor and dataset diversity term:\n      loss \u2248 C0 + exp(a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                   + e\u00b7(unique_tokens/tokens))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6: [C0, a, b, c, d, e]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(\"params must have length 6: [C0, a, b, c, d, e]\")\n\n    C0, a, b, c, d, e = p\n    # unpack features\n    tokens       = X[:, 0]\n    model_params = X[:, 1]\n    unique_tok   = X[:, 2]\n\n    # numerical safety\n    eps = 1e-12\n    tokens_safe       = np.maximum(tokens, eps)\n    model_params_safe = np.maximum(model_params, eps)\n    unique_safe       = np.maximum(unique_tok, eps)\n\n    # dataset diversity ratio\n    ratio = unique_safe / tokens_safe\n\n    # log\u2010linear core + linear ratio term\n    log_part = (\n        a\n        + b * np.log(tokens_safe)\n        + c * np.log(model_params_safe)\n        + d * np.log(unique_safe)\n        + e * ratio\n    )\n\n    pred = C0 + np.exp(log_part)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model by minimizing mean squared error in log\u2010space:\n      loss \u2248 C0 + exp(a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                      + e\u00b7(unique_tokens/tokens))\n\n    Returns:\n      params_opt: array [C0, a, b, c, d, e]\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive targets for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    if X.shape[0] < 5:\n        # Not enough points to fit 6 parameters robustly\n        # Fallback to simple log\u2010linear 4\u2010param model\n        # Design matrix: [1, log(tokens), log(params), log(unique)]\n        eps = 1e-12\n        Xl = np.log(X + eps)\n        yl = np.log(y + eps)\n        D = np.concatenate([np.ones((Xl.shape[0],1)), Xl], axis=1)\n        beta, *_ = np.linalg.lstsq(D, yl, rcond=None)\n        # pad e and C0 to zero\n        return np.array([0.0, beta[0], beta[1], beta[2], beta[3], 0.0])\n\n    # initial guess via log\u2010linear LS ignoring ratio, with zero floor and zero ratio term\n    eps = 1e-12\n    Xl = np.log(X + eps)\n    yl = np.log(y + eps)\n    D = np.concatenate([np.ones((Xl.shape[0],1)), Xl], axis=1)  # (N,4)\n    beta_init, *_ = np.linalg.lstsq(D, yl, rcond=None)\n    a0, b0, c0, d0 = beta_init\n    C0_0 = 0.0\n    e0   = 0.0\n    p0 = np.array([C0_0, a0, b0, c0, d0, e0], dtype=float)\n\n    # objective: MSE in log domain to balance across scale\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # ensure positivity for log\n        eps2 = 1e-12\n        lp = np.log(pred + eps2)\n        ly = np.log(y    + eps2)\n        return np.mean((lp - ly) ** 2)\n\n    # bounds: floor \u22650, others free\n    bounds = [\n        (0.0,   None),  # C0\n        (None,  None),  # a\n        (None,  None),  # b\n        (None,  None),  # c\n        (None,  None),  # d\n        (None,  None),  # e\n    ]\n\n    res = minimize(\n        objective,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback to initial guess on failure\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.6542, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.968), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013linear scaling law:\n\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n    Returns:\n      preds: shape (N,) if params is (4,), or (N,M) if params is (M,4)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # take logs safely\n    eps = 1e-12\n    X_log = np.log(X + eps)                          # (N,3)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D array of parameters: shape (M,4)\n    if p.ndim == 1:\n        p_mat = p[np.newaxis, :]\n    else:\n        p_mat = p.copy()\n    M, P = p_mat.shape\n    if P != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {P}\")\n\n    # unpack parameter vectors\n    a = p_mat[:, 0]   # (M,)\n    b = p_mat[:, 1]\n    c = p_mat[:, 2]\n    d = p_mat[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # note X_log[:,0]=log(tokens), X_log[:,1]=log(params), X_log[:,2]=log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :] +\n        b[np.newaxis, :] * X_log[:, 0:1] +\n        c[np.newaxis, :] * X_log[:, 1:2] +\n        d[np.newaxis, :] * X_log[:, 2:3]\n    )\n\n    preds = np.exp(log_pred)  # (N, M)\n    # if only one output, collapse to (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      array of 4 parameters [a, b, c, d] such that\n        log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)   # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # only keep strictly positive losses\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n    if X.shape[0] < 2:\n        # not enough data to fit; fallback to zeros\n        return np.zeros(4, dtype=float)\n\n    # logs with small epsilon\n    eps = 1e-12\n    X_log = np.log(X + eps)   # (N,3)\n    y_log = np.log(y + eps)   # (N,)\n\n    N = X_log.shape[0]\n    # design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # refine via unconstrained L-BFGS-B minimizing MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n_EPS = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log-quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 [a,b,c,d,e,f,g] or shape (M,7)\n    Returns:\n      preds: np.ndarray of shape (N,) or (N,M)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float)\n    # ensure p is shape (M,7)\n    if p.ndim == 1:\n        p_mat = p[np.newaxis, :]\n    else:\n        p_mat = p.copy()\n    M, P = p_mat.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # log\u2010features\n    Z = np.log(X + _EPS)        # (N,3)\n    z1 = Z[:, 0:1]              # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # design matrix: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([\n        ones,\n        z1,\n        z2,\n        z3,\n        z1 * z2,\n        z1 * z3,\n        z2 * z3\n    ], axis=1)  # (N,7)\n\n    # log\u2010predictions and exponentiate\n    log_pred = F.dot(p_mat.T)   # (N,M)\n    pred = np.exp(log_pred)\n\n    # collapse if single parameter vector\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares in log-space.\n\n    Returns:\n      params_opt: np.ndarray of shape (7,) [a,b,c,d,e,f,g]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # only positive losses\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"No positive loss values to fit\")\n    Xp = X[mask]\n    yp = y[mask]\n\n    # build log\u2010feature design matrix F\n    Z = np.log(Xp + _EPS)      # (n,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n    ones = np.ones_like(z1)\n    F = np.concatenate([\n        ones,\n        z1,\n        z2,\n        z3,\n        z1 * z2,\n        z1 * z3,\n        z2 * z3\n    ], axis=1)  # (n,7)\n\n    # closed-form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                         # (7,7)\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(yp + _EPS))           # (7,)\n\n    params_opt = np.linalg.solve(A, b)       # (7,)\n    return params_opt\n```"]}}}