{"id": "6e2aba5a-f5ce-4195-88a2-40897eee0e2f", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Small epsilon to avoid log(0)\n_EPS = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                 + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                 + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7 [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n\n    # compute logs once\n    Z = np.log(X + _EPS)         # (N,3)\n    z1 = Z[:, 0]\n    z2 = Z[:, 1]\n    z3 = Z[:, 2]\n\n    # unpack parameters\n    a, b, c, d, e, f, g = p\n\n    # compute log-predictions\n    log_pred = (\n        a\n        + b * z1 + c * z2 + d * z3\n        + e * (z1 * z2)\n        + f * (z1 * z3)\n        + g * (z2 * z3)\n    )\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2013quadratic scaling law by ridge\u2010regularized\n    least squares in log\u2010space, followed by a quick L-BFGS-B refinement.\n\n    Returns:\n      params_opt: array of 7 parameters [a, b, c, d, e, f, g]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only strictly positive losses for log\u2010space\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot fit log\u2010scale model.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # compute log features\n    Z = np.log(X + _EPS)       # (N,3)\n    z1 = Z[:, 0:1]             # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # build design matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)               # (N,7)\n\n    # closed\u2010form ridge regression: solve (F^T F + \u03bbI) p = F^T log(y)\n    FtF = F.T.dot(F)         # (7,7)\n    # set ridge \u03bb proportional to average feature scale\n    lambda_reg = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + lambda_reg * np.eye(FtF.shape[0])\n    b_vec = F.T.dot(np.log(y + _EPS))\n\n    # initial solution\n    beta_init = np.linalg.solve(A, b_vec)\n\n    # refine via L-BFGS-B minimizing MSE in log\u2010space\n    def obj(p):\n        resid = F.dot(p) - np.log(y + _EPS)\n        return np.mean(resid * resid)\n\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1897818b-9289-44ee-b4fc-235ce8e578b9", "generation": 2, "timestamp": 1754715523.970736, "iteration_found": 26, "metrics": {"nmse": 0.587415794617955, "nmae": 0.9632925750134995, "r2": 0.412584205382045, "combined_score": 0.6299546743773399}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2745, nmae: 0.7212, r2: 0.7255, combined_score: 0.7846\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.6265)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2745), Performs well on nmae (0.7212), Performs well on r2 (0.7255), Performs well on combined_score (0.7846)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6265, Type: Alternative)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Small epsilon to avoid log(0)\n_EPS = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                 + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                 + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7 [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n\n    # compute logs once\n    Z = np.log(X + _EPS)         # (N,3)\n    z1 = Z[:, 0]\n    z2 = Z[:, 1]\n    z3 = Z[:, 2]\n\n    # unpack parameters\n    a, b, c, d, e, f, g = p\n\n    # compute log-predictions\n    log_pred = (\n        a\n        + b * z1 + c * z2 + d * z3\n        + e * (z1 * z2)\n        + f * (z1 * z3)\n        + g * (z2 * z3)\n    )\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2013quadratic scaling law by ridge\u2010regularized\n    least squares in log\u2010space, followed by a quick L-BFGS-B refinement.\n\n    Returns:\n      params_opt: array of 7 parameters [a, b, c, d, e, f, g]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only strictly positive losses for log\u2010space\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot fit log\u2010scale model.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # compute log features\n    Z = np.log(X + _EPS)       # (N,3)\n    z1 = Z[:, 0:1]             # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # build design matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)               # (N,7)\n\n    # closed\u2010form ridge regression: solve (F^T F + \u03bbI) p = F^T log(y)\n    FtF = F.T.dot(F)         # (7,7)\n    # set ridge \u03bb proportional to average feature scale\n    lambda_reg = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + lambda_reg * np.eye(FtF.shape[0])\n    b_vec = F.T.dot(np.log(y + _EPS))\n\n    # initial solution\n    beta_init = np.linalg.solve(A, b_vec)\n\n    # refine via L-BFGS-B minimizing MSE in log\u2010space\n    def obj(p):\n        resid = F.dot(p) - np.log(y + _EPS)\n        return np.mean(resid * resid)\n\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n# EVOLVE-BLOCK-END\n```"]}}}