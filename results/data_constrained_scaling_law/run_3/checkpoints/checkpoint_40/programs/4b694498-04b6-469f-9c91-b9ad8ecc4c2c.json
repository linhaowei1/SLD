{"id": "4b694498-04b6-469f-9c91-b9ad8ecc4c2c", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling\u2010law in log\u2010space with up to 7 parameters:\n      log(loss) \u2248 p0\n                + p1\u00b7log(tokens)\n                + p2\u00b7log(params)\n                + p3\u00b7log(unique_tokens)\n                + p4\u00b7[log(tokens)\u00b7log(params)]\n                + p5\u00b7[log(tokens)\u00b7log(unique_tokens)]\n                + p6\u00b7[log(params)\u00b7log(unique_tokens)]\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [p0, p1, ..., p6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [p0..p6], got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    p0, p1, p2, p3, p4, p5, p6 = p\n    log_pred = (\n        p0\n        + p1 * t\n        + p2 * m\n        + p3 * u\n        + p4 * (t * m)\n        + p5 * (t * u)\n        + p6 * (m * u)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic scaling law by minimizing\n    mean squared error in log\u2010space with small ridge regularization.\n    Returns optimized parameters [p0..p6].\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # only positive losses\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss values are non\u2010positive; cannot fit log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # log\u2010transform\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(np.maximum(y, eps))\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # design matrix: [1, t, m, u, t*m, t*u, m*u]\n    D = np.stack([np.ones_like(t),\n                  t, m, u,\n                  t * m,\n                  t * u,\n                  m * u], axis=1)  # shape (N,7)\n\n    # initial least\u2010squares solution in log\u2010space\n    p_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    p_init = p_init.ravel()\n\n    # objective: MSE + small ridge on cross\u2010terms\n    ridge = 1e-4\n    def objective(p):\n        resid = D.dot(p) - y_log\n        mse = np.mean(resid**2)\n        # do not penalize bias p0\n        reg = ridge * np.sum(p[1:]**2)\n        return mse + reg\n\n    res = minimize(objective, p_init, method=\"L-BFGS-B\",\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success and res.x.shape == p_init.shape:\n        return res.x\n    else:\n        return p_init\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "191d5ee4-05cc-4b2d-9793-29e982faddeb", "generation": 2, "timestamp": 1754715551.618789, "iteration_found": 29, "metrics": {"nmse": 0.4079526375627287, "nmae": 0.4858175297337083, "r2": 0.5920473624372713, "combined_score": 0.7102511642231623}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1609, nmae: 0.2815, r2: 0.8391, combined_score: 0.8614\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5357)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) \u2248 \u03b1 \n                + \u03b2\u00b7log(tokens) \n                + \u03b3\u00b7log(params) \n                + \u03b4\u00b7log(unique_tokens)\n                + \u03b5\u00b7[log(tokens)\u00b7log(params)]\n                + \u03b6\u00b7[log(tokens)\u00b7log(unique_tokens)]\n\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6: \n                   [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(\"params must have length 6: [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\")\n\n    # avoid log(0)\n    X_log = np.log(np.maximum(X, 1e-12))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    \u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6 = p\n\n    # compute log\u2010prediction with interactions\n    log_pred = (\n        \u03b1\n        + \u03b2 * t\n        + \u03b3 * m\n        + \u03b4 * u\n        + \u03b5 * (t * m)\n        + \u03b6 * (t * u)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the improved scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized parameters [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6].\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs with small offset\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # construct design matrix with interactions: [1, t, m, u, t*m, t*u]\n    D = np.stack([np.ones_like(t), t, m, u, t * m, t * u], axis=1)\n\n    # initial least-squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    beta_init = beta_init.ravel()  # shape (6,)\n\n    # objective: MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # refine via L-BFGS-B\n    res = minimize(\n        objective,\n        beta_init,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12}\n    )\n\n    if res.success and res.x.shape == beta_init.shape:\n        return res.x\n    else:\n        # fallback to linear solution\n        return beta_init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1609), Performs well on nmae (0.2815), Performs well on r2 (0.8391), Performs well on combined_score (0.8614)\n\n\n### Program 2 (Score: 0.5802)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5357, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) \u2248 \u03b1 \n                + \u03b2\u00b7log(tokens) \n                + \u03b3\u00b7log(params) \n                + \u03b4\u00b7log(unique_tokens)\n                + \u03b5\u00b7[log(tokens)\u00b7log(params)]\n                + \u03b6\u00b7[log(tokens)\u00b7log(unique_tokens)]\n\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6: \n                   [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(\"params must have length 6: [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\")\n\n    # avoid log(0)\n    X_log = np.log(np.maximum(X, 1e-12))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    \u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6 = p\n\n    # compute log\u2010prediction with interactions\n    log_pred = (\n        \u03b1\n        + \u03b2 * t\n        + \u03b3 * m\n        + \u03b4 * u\n        + \u03b5 * (t * m)\n        + \u03b6 * (t * u)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the improved scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized parameters [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6].\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs with small offset\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # construct design matrix with interactions: [1, t, m, u, t*m, t*u]\n    D = np.stack([np.ones_like(t), t, m, u, t * m, t * u], axis=1)\n\n    # initial least-squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    beta_init = beta_init.ravel()  # shape (6,)\n\n    # objective: MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # refine via L-BFGS-B\n    res = minimize(\n        objective,\n        beta_init,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12}\n    )\n\n    if res.success and res.x.shape == beta_init.shape:\n        return res.x\n    else:\n        # fallback to linear solution\n        return beta_init\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5802, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling\u2010law in log\u2010space with up to 7 parameters:\n      log(loss) \u2248 p0\n                + p1\u00b7log(tokens)\n                + p2\u00b7log(params)\n                + p3\u00b7log(unique_tokens)\n                + p4\u00b7[log(tokens)\u00b7log(params)]\n                + p5\u00b7[log(tokens)\u00b7log(unique_tokens)]\n                + p6\u00b7[log(params)\u00b7log(unique_tokens)]\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [p0, p1, ..., p6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [p0..p6], got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    p0, p1, p2, p3, p4, p5, p6 = p\n    log_pred = (\n        p0\n        + p1 * t\n        + p2 * m\n        + p3 * u\n        + p4 * (t * m)\n        + p5 * (t * u)\n        + p6 * (m * u)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic scaling law by minimizing\n    mean squared error in log\u2010space with small ridge regularization.\n    Returns optimized parameters [p0..p6].\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # only positive losses\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss values are non\u2010positive; cannot fit log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # log\u2010transform\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(np.maximum(y, eps))\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # design matrix: [1, t, m, u, t*m, t*u, m*u]\n    D = np.stack([np.ones_like(t),\n                  t, m, u,\n                  t * m,\n                  t * u,\n                  m * u], axis=1)  # shape (N,7)\n\n    # initial least\u2010squares solution in log\u2010space\n    p_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    p_init = p_init.ravel()\n\n    # objective: MSE + small ridge on cross\u2010terms\n    ridge = 1e-4\n    def objective(p):\n        resid = D.dot(p) - y_log\n        mse = np.mean(resid**2)\n        # do not penalize bias p0\n        reg = ridge * np.sum(p[1:]**2)\n        return mse + reg\n\n    res = minimize(objective, p_init, method=\"L-BFGS-B\",\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success and res.x.shape == p_init.shape:\n        return res.x\n    else:\n        return p_init\n\n# EVOLVE-BLOCK-END\n```"]}}}