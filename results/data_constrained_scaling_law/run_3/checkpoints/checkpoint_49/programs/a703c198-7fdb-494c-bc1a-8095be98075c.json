{"id": "a703c198-7fdb-494c-bc1a-8095be98075c", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Simple log\u2010linear scaling law with 4 parameters:\n      log(loss) = a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4: [a, b, c, d]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"scaling_law_func expects data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n\n    # avoid log(0)\n    eps = 1e-12\n    Lt = np.log(X[:, 0] + eps)\n    Lp = np.log(X[:, 1] + eps)\n    Lu = np.log(X[:, 2] + eps)\n\n    # linear combination in log-space\n    log_pred = a + b * Lt + c * Lp + d * Lu\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter log\u2010linear scaling law by ridge\u2010regularized\n    least squares in log\u2010space. Closed\u2010form solution for stability.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      loss_values: array\u2010like of shape (N,) with loss > 0\n    Returns:\n      params_opt: np.ndarray of shape (4,) [a, b, c, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X.shape[1]}\")\n\n    # keep only strictly positive losses for log-fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"At least one positive loss value is required for log\u2010fit.\")\n    X = X[mask]\n    y = y[mask]\n\n    # log-transform features and target\n    eps = 1e-12\n    L = np.log(X + eps)              # shape (n,3)\n    y_log = np.log(y + eps)          # shape (n,)\n\n    # design matrix [1, log(tokens), log(params), log(unique_tokens)]\n    n = L.shape[0]\n    D = np.concatenate([np.ones((n,1)), L], axis=1)  # shape (n,4)\n\n    # closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D                                  # shape (4,4)\n    # auto\u2010tune regularization strength\n    lam = 1e-6 * np.trace(G) / G.shape[0]\n    # solve (G + \u03bbI) p = D^T y_log\n    A = G + lam * np.eye(4, dtype=float)\n    b_vec = D.T @ y_log\n    params_opt = np.linalg.solve(A, b_vec)\n\n    return params_opt\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3897a983-ff8e-40c5-9032-5e0dc3619204", "generation": 3, "timestamp": 1754715726.492711, "iteration_found": 50, "metrics": {"nmse": 0.14835349677794338, "nmae": 0.3297158857937629, "r2": 0.8516465032220566, "combined_score": 0.8708119954402591}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4079526348196035, "nmae": 0.4858175403169567, "r2": 0.5920473651803966, "combined_score": 0.7102511656069502}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4080\n- nmae: 0.4858\n- r2: 0.5920\n- combined_score: 0.7103\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1484, nmae: 0.3297, r2: 0.8516, combined_score: 0.8708\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5501)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a, b, c, d], got {p.size}\")\n    a, b, c, d = p\n\n    # Compute log inputs (epsilon to avoid log(0))\n    logs = np.log(X + 1e-12)    # shape (N,3)\n    # Linear model in log\u2010space\n    y_log = a + b * logs[:, 0] + c * logs[:, 1] + d * logs[:, 2]\n    # Back to original scale\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by closed\u2010form ridge regression in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Use only strictly positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss_values non\u2010positive; cannot fit a log\u2010linear model.\")\n    X, y = X[mask], y[mask]\n\n    # Take logs (small epsilon to avoid -inf)\n    logs = np.log(X + 1e-12)    # shape (n_samples,3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    n = logs.shape[0]\n    D = np.empty((n, 4), float)\n    D[:, 0] = 1.0\n    D[:, 1:] = logs\n\n    # Closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D\n    # Auto\u2010tune regularization to data scale\n    \u03bb = 1e-6 * np.trace(G) / G.shape[0]\n    # Solve (G + \u03bbI) p = D^T y_log\n    coef = np.linalg.solve(G + np.eye(4) * \u03bb, D.T @ y_log)\n\n    return coef\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1484), Performs well on nmae (0.3297), Performs well on r2 (0.8516), Performs well on combined_score (0.8708)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5490)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with all pairwise interactions (7 params):\n      log(loss) \u2248 a\n                + b\u00b7log(tokens)\n                + c\u00b7log(params)\n                + d\u00b7log(unique_tokens)\n                + e\u00b7[log(tokens)*log(params)]\n                + f\u00b7[log(tokens)*log(unique_tokens)]\n                + g\u00b7[log(params)*log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [a, b, c, d, e, f, g]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"scaling_law_func expects data_points with 3 columns, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n    a, b, c, d, e, f, g = p\n\n    # avoid log(0)\n    eps = 1e-12\n    Lt = np.log(X[:, 0] + eps)\n    Lp = np.log(X[:, 1] + eps)\n    Lu = np.log(X[:, 2] + eps)\n\n    # log\u2010prediction with all pairwise interactions\n    log_pred = (\n        a\n        + b * Lt\n        + c * Lp\n        + d * Lu\n        + e * (Lt * Lp)\n        + f * (Lt * Lu)\n        + g * (Lp * Lu)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing MSE in log\u2010space.\n    Uses closed\u2010form linear least squares for initialization and then\n    optional L-BFGS-B refinement.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      loss_values: array\u2010like of shape (N,) with positive losses\n    Returns:\n      params_opt: np.ndarray of shape (7,) with fitted [a,b,c,d,e,f,g]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n    if X_raw.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X_raw.shape[1]}\")\n\n    # restrict to strictly positive losses\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"At least one positive loss value is required for log\u2010fit.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs\n    eps = 1e-12\n    Lt = np.log(X[:, 0] + eps)\n    Lp = np.log(X[:, 1] + eps)\n    Lu = np.log(X[:, 2] + eps)\n    y_log = np.log(y + eps)\n\n    # build design matrix with all pairwise interactions\n    # columns: [1, Lt, Lp, Lu, Lt*Lp, Lt*Lu, Lp*Lu]\n    D = np.column_stack([\n        np.ones_like(Lt),\n        Lt,\n        Lp,\n        Lu,\n        Lt * Lp,\n        Lt * Lu,\n        Lp * Lu\n    ])\n\n    # closed\u2010form least squares init in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    beta_init = beta_init.ravel()  # shape (7,)\n\n    # refine via L\u2010BFGS\u2010B, minimizing MSE in log\u2010space\n    def obj(p):\n        r = D.dot(p) - y_log\n        return np.mean(r * r)\n\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\",\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n    if res.success and res.x.shape == beta_init.shape:\n        return res.x\n    else:\n        # fallback to least\u2010squares solution\n        return beta_init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5501, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a, b, c, d], got {p.size}\")\n    a, b, c, d = p\n\n    # Compute log inputs (epsilon to avoid log(0))\n    logs = np.log(X + 1e-12)    # shape (N,3)\n    # Linear model in log\u2010space\n    y_log = a + b * logs[:, 0] + c * logs[:, 1] + d * logs[:, 2]\n    # Back to original scale\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by closed\u2010form ridge regression in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Use only strictly positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss_values non\u2010positive; cannot fit a log\u2010linear model.\")\n    X, y = X[mask], y[mask]\n\n    # Take logs (small epsilon to avoid -inf)\n    logs = np.log(X + 1e-12)    # shape (n_samples,3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    n = logs.shape[0]\n    D = np.empty((n, 4), float)\n    D[:, 0] = 1.0\n    D[:, 1:] = logs\n\n    # Closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D\n    # Auto\u2010tune regularization to data scale\n    \u03bb = 1e-6 * np.trace(G) / G.shape[0]\n    # Solve (G + \u03bbI) p = D^T y_log\n    coef = np.linalg.solve(G + np.eye(4) * \u03bb, D.T @ y_log)\n\n    return coef\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 182799832890.8077, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (381562595631808630489088.000), Excellent nmae (731199331563.231), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 1.1263, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with all pairwise interactions (7 params):\n      log(loss) \u2248 a\n                + b\u00b7log(tokens)\n                + c\u00b7log(params)\n                + d\u00b7log(unique_tokens)\n                + e\u00b7[log(tokens)*log(params)]\n                + f\u00b7[log(tokens)*log(unique_tokens)]\n                + g\u00b7[log(params)*log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [a, b, c, d, e, f, g]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"scaling_law_func expects data_points with 3 columns, got {X.shape[1]}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n    a, b, c, d, e, f, g = p\n\n    # avoid log(0)\n    eps = 1e-12\n    Lt = np.log(X[:, 0] + eps)\n    Lp = np.log(X[:, 1] + eps)\n    Lu = np.log(X[:, 2] + eps)\n\n    # log\u2010prediction with all pairwise interactions\n    log_pred = (\n        a\n        + b * Lt\n        + c * Lp\n        + d * Lu\n        + e * (Lt * Lp)\n        + f * (Lt * Lu)\n        + g * (Lp * Lu)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing MSE in log\u2010space.\n    Uses closed\u2010form linear least squares for initialization and then\n    optional L-BFGS-B refinement.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      loss_values: array\u2010like of shape (N,) with positive losses\n    Returns:\n      params_opt: np.ndarray of shape (7,) with fitted [a,b,c,d,e,f,g]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n    if X_raw.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X_raw.shape[1]}\")\n\n    # restrict to strictly positive losses\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"At least one positive loss value is required for log\u2010fit.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs\n    eps = 1e-12\n    Lt = np.log(X[:, 0] + eps)\n    Lp = np.log(X[:, 1] + eps)\n    Lu = np.log(X[:, 2] + eps)\n    y_log = np.log(y + eps)\n\n    # build design matrix with all pairwise interactions\n    # columns: [1, Lt, Lp, Lu, Lt*Lp, Lt*Lu, Lp*Lu]\n    D = np.column_stack([\n        np.ones_like(Lt),\n        Lt,\n        Lp,\n        Lu,\n        Lt * Lp,\n        Lt * Lu,\n        Lp * Lu\n    ])\n\n    # closed\u2010form least squares init in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    beta_init = beta_init.ravel()  # shape (7,)\n\n    # refine via L\u2010BFGS\u2010B, minimizing MSE in log\u2010space\n    def obj(p):\n        r = D.dot(p) - y_log\n        return np.mean(r * r)\n\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\",\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n    if res.success and res.x.shape == beta_init.shape:\n        return res.x\n    else:\n        # fallback to least\u2010squares solution\n        return beta_init\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Simple log\u2010linear scaling law with 4 parameters:\n      log(loss) = a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4: [a, b, c, d]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"scaling_law_func expects data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n\n    # avoid log(0)\n    eps = 1e-12\n    Lt = np.log(X[:, 0] + eps)\n    Lp = np.log(X[:, 1] + eps)\n    Lu = np.log(X[:, 2] + eps)\n\n    # linear combination in log-space\n    log_pred = a + b * Lt + c * Lp + d * Lu\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter log\u2010linear scaling law by ridge\u2010regularized\n    least squares in log\u2010space. Closed\u2010form solution for stability.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3): [tokens, params, unique_tokens]\n      loss_values: array\u2010like of shape (N,) with loss > 0\n    Returns:\n      params_opt: np.ndarray of shape (4,) [a, b, c, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X.shape[1]}\")\n\n    # keep only strictly positive losses for log-fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"At least one positive loss value is required for log\u2010fit.\")\n    X = X[mask]\n    y = y[mask]\n\n    # log-transform features and target\n    eps = 1e-12\n    L = np.log(X + eps)              # shape (n,3)\n    y_log = np.log(y + eps)          # shape (n,)\n\n    # design matrix [1, log(tokens), log(params), log(unique_tokens)]\n    n = L.shape[0]\n    D = np.concatenate([np.ones((n,1)), L], axis=1)  # shape (n,4)\n\n    # closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D                                  # shape (4,4)\n    # auto\u2010tune regularization strength\n    lam = 1e-6 * np.trace(G) / G.shape[0]\n    # solve (G + \u03bbI) p = D^T y_log\n    A = G + lam * np.eye(4, dtype=float)\n    b_vec = D.T @ y_log\n    params_opt = np.linalg.solve(A, b_vec)\n\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Reduced parameter count to 4 to avoid overfitting under data\u2010constrained regimes.\n- Utilized log\u2010linear form with closed\u2010form ridge regression for numerical stability.\n- Automatic regularization coefficient based on data scale for robustness.\n- Pure NumPy implementation for simplicity and maintainability."]}}}