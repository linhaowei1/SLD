{"id": "14464486-3412-47ce-bae1-273bce17f583", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as an additive combination of three decaying power\u2010law terms\n    plus a floor:\n\n      loss \u2248 C0\n             + A_t * tokens^(\u2212\u03b1_t)\n             + A_p * params^(\u2212\u03b1_p)\n             + A_u * unique_tokens^(\u2212\u03b1_u)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7:\n                   [C0,\n                    A_t, \u03b1_t,\n                    A_p, \u03b1_p,\n                    A_u, \u03b1_u]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [C0, A_t, \u03b1_t, A_p, \u03b1_p, A_u, \u03b1_u], got {p.size}\")\n    C0, A_t, \u03b1_t, A_p, \u03b1_p, A_u, \u03b1_u = p\n\n    # numeric floor to avoid zero or negative bases\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    prms   = np.maximum(X[:, 1], eps)\n    uniqs  = np.maximum(X[:, 2], eps)\n\n    # additive power\u2010law model\n    preds = (\n        C0\n        + A_t * tokens**(-\u03b1_t)\n        + A_p * prms**(-\u03b1_p)\n        + A_u * uniqs**(-\u03b1_u)\n    )\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 parameters of the additive power\u2010law scaling law by minimizing\n    relative error residuals via trust\u2010region least squares.\n\n    Returns:\n      params_opt: np.ndarray of length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure positive losses for relative residual\n    eps_y = 1e-12\n    y = np.maximum(y, eps_y)\n\n    # initialize floor C0 slightly below min observed loss\n    y_min = np.min(y)\n    C0_0  = max(0.0, 0.9 * y_min)\n\n    # distribute remaining mean loss equally as initial amplitudes\n    mean_resid = np.mean(y - C0_0)\n    amp0 = max(mean_resid / 3.0, eps_y)\n\n    # initial decay exponents\n    dec0 = 0.5\n\n    # initial parameter vector: [C0, A_t, \u03b1_t, A_p, \u03b1_p, A_u, \u03b1_u]\n    p0 = np.array([\n        C0_0,\n        amp0, dec0,\n        amp0, dec0,\n        amp0, dec0\n    ], dtype=float)\n\n    # parameter bounds: floor \u2265 0, amplitudes \u2265 tiny positive, decays \u2265 0\n    lower = np.array([0.0, eps_y, 0.0, eps_y, 0.0, eps_y, 0.0], dtype=float)\n    upper = np.full(7, np.inf, dtype=float)\n\n    # residual function (relative)\n    def resid_fn(p):\n        pred = scaling_law_func(X, p)\n        return (pred - y) / y\n\n    sol = least_squares(\n        resid_fn,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=10000\n    )\n\n    # return optimized parameters or fallback to initial\n    return sol.x if sol.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "f8f850ba-0b05-4bd7-a8d0-0a1b703b40a3", "generation": 2, "timestamp": 1754715700.9709845, "iteration_found": 44, "metrics": {"nmse": 0.07020513219083765, "nmae": 0.39988359281558006, "r2": 0.9297948678091623, "combined_score": 0.9344003031950339}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1609, nmae: 0.2815, r2: 0.8391, combined_score: 0.8614\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0859, nmae: 0.4457, r2: 0.9141, combined_score: 0.9209\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0702, nmae: 0.3999, r2: 0.9298, combined_score: 0.9344\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5836)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a 7-parameter\n    additive power\u2010law with a floor:\n      loss \u2248 C0\n             + amp_tkn * tokens^(\u2212dec_tkn)\n             + amp_prm * params^(\u2212dec_prm)\n             + amp_uniq * unique_tokens^(\u2212dec_uniq)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7:\n                   [C0,\n                    amp_tkn, dec_tkn,\n                    amp_prm, dec_prm,\n                    amp_uniq, dec_uniq]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [C0, amp_tkn, dec_tkn, amp_prm, dec_prm, amp_uniq, dec_uniq], got {p.size}\")\n    C0, amp_t, dec_t, amp_p, dec_p, amp_u, dec_u = p\n\n    # Avoid zeros/negatives in power computations\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    uniq = np.maximum(X[:, 2], eps)\n\n    # Compute additive power-law contributions plus floor\n    pred = (\n        C0\n        + amp_t * np.power(tkn, -dec_t)\n        + amp_p * np.power(prm, -dec_p)\n        + amp_u * np.power(uniq, -dec_u)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 parameters of the additive power\u2010law scaling law by minimizing\n    relative error residuals via least squares.\n\n    Returns:\n      params_opt: array of length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Ensure strictly positive for relative residuals\n    y = np.maximum(y, 1e-12)\n\n    # Initial floor guess: 90% of min loss (to allow some headroom)\n    y_min, y_max = np.min(y), np.max(y)\n    C0_0 = max(0.0, 0.9 * y_min)\n\n    # Distribute remaining mean residual equally across three amplitudes\n    mean_resid = np.mean(y - C0_0)\n    amp0 = max(mean_resid / 3.0, 1e-12)\n\n    # Initial decay exponents\n    dec0 = 0.5\n\n    # Initial parameter vector: [C0, amp_tkn, dec_tkn, amp_prm, dec_prm, amp_uniq, dec_uniq]\n    p0 = np.array([C0_0,\n                   amp0, dec0,\n                   amp0, dec0,\n                   amp0, dec0], dtype=float)\n\n    # Bounds: floor \u2265 0, amps \u2265 tiny positive, decays \u2265 0\n    lower = np.array([0.0,\n                      1e-12, 0.0,\n                      1e-12, 0.0,\n                      1e-12, 0.0], dtype=float)\n    upper = np.full(7, np.inf, dtype=float)\n\n    # Residual function: relative error to balance across scales\n    def resid_fn(p):\n        pred = scaling_law_func(X, p)\n        return (pred - y) / (y + 1e-12)\n\n    # Solve with Trust-Region-Reflective least squares\n    sol = least_squares(\n        resid_fn,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=10000\n    )\n\n    # Return optimized params or fallback to initial\n    return sol.x if sol.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0702), Performs well on nmae (0.3999), Performs well on r2 (0.9298), Performs well on combined_score (0.9344)\n\n\n### Program 2 (Score: 0.5916)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as an additive combination of three decaying power\u2010law terms\n    plus a floor:\n\n      loss \u2248 L_inf + A_t\u00b7tokens^(\u2212\u03b1_t) + A_p\u00b7params^(\u2212\u03b1_p) + A_u\u00b7unique_tokens^(\u2212\u03b1_u)\n\n    We parametrize all seven quantities in log\u2010space to enforce positivity:\n      [u0..u6] \u2192 exp(ui) for each.\n\n    Inputs:\n      data_points: array\u2010like (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20107 array or shape (T,7) of raw log\u2010parameters\n                   [u0,u1,u2,u3,u4,u5,u6]\n\n    Returns:\n      preds: shape (N,) if single param\u2010vector or (N,T) if multiple\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    # ensure params is 2D: (T,7)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 (got %d)\" % P)\n\n    # unpack raw parameters\n    u0 = p[:, 0]  # floor\n    u1 = p[:, 1]; u2 = p[:, 2]  # tokens amplitude & decay\n    u3 = p[:, 3]; u4 = p[:, 4]  # params amplitude & decay\n    u5 = p[:, 5]; u6 = p[:, 6]  # unique_tokens amplitude & decay\n\n    # map to positive\n    L_inf   = np.exp(u0)[None, :]      # (1,T)\n    A_t     = np.exp(u1)[None, :]\n    alpha_t = np.exp(u2)[None, :]\n    A_p     = np.exp(u3)[None, :]\n    alpha_p = np.exp(u4)[None, :]\n    A_u     = np.exp(u5)[None, :]\n    alpha_u = np.exp(u6)[None, :]\n\n    # compute predictions (N,T)\n    preds = (\n        L_inf\n        + A_t * (tkn[:, None] ** (-alpha_t))\n        + A_p * (prm[:, None] ** (-alpha_p))\n        + A_u * (ut[:, None] ** (-alpha_u))\n    )\n\n    # return (N,) if single parameter\u2010vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw log\u2010parameters [u0..u6] by minimizing squared error:\n\n      resid(u) = scaling_law_func(X, u) \u2013 y\n\n    We initialize\n      u0 = log(min(y)),           floor\n      u1,u3,u5 = log((mean(y)\u2212floor)/3), amplitudes\n      u2,u4,u6 = log(1.0),         decays\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # ignore non\u2010positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # statistics for initialization\n    eps = 1e-12\n    mean_y = np.mean(y)\n    min_y  = np.min(y)\n    u0 = np.log(min_y + eps)                        # floor\n    resid = max(mean_y - np.exp(u0), eps)\n    amp0 = resid / 3.0\n    u1 = np.log(amp0 + eps); u3 = u1; u5 = u1       # initial amplitudes\n    u2 = np.log(1.0); u4 = np.log(1.0); u6 = np.log(1.0)  # initial decays\n\n    init = np.array([u0, u1, u2, u3, u4, u5, u6], dtype=float)\n\n    def resid_fn(u):\n        return scaling_law_func(X, u) - y\n\n    try:\n        sol = least_squares(\n            resid_fn,\n            init,\n            method='trf',\n            xtol=1e-8,\n            ftol=1e-8,\n            max_nfev=10000\n        )\n        u_opt = sol.x if sol.success else init\n    except Exception:\n        u_opt = init\n\n    return u_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0859), Performs well on nmae (0.4457), Performs well on r2 (0.9141), Performs well on combined_score (0.9209)\n\n\n### Program 3 (Score: 0.5357)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with cross\u2010terms:\n      log(loss) \u2248 a \n                  + b\u00b7log(tokens) \n                  + c\u00b7log(params) \n                  + d\u00b7log(unique_tokens)\n                  + e\u00b7[log(tokens)\u00b7log(params)]\n                  + f\u00b7[log(tokens)\u00b7log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6 [a, b, c, d, e, f]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters [a,b,c,d,e,f], got {p.size}\")\n    a, b, c, d, e, f = p\n\n    # avoid log(0)\n    eps = 1e-12\n    log_toks = np.log(X[:, 0] + eps)\n    log_params = np.log(X[:, 1] + eps)\n    log_uniq = np.log(X[:, 2] + eps)\n\n    # compute log\u2010prediction with cross terms\n    log_pred = (\n        a\n        + b * log_toks\n        + c * log_params\n        + d * log_uniq\n        + e * (log_toks * log_params)\n        + f * (log_toks * log_uniq)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing MSE in log\u2010space.\n    Uses six parameters [a,b,c,d,e,f] as in scaling_law_func above.\n\n    Returns:\n      params_opt: array of 6 parameters [a, b, c, d, e, f]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # only positive losses for log\u2010domain fitting\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"Need some positive loss values to fit model.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs with small epsilon\n    eps = 1e-12\n    log_toks = np.log(X[:, 0] + eps)\n    log_params = np.log(X[:, 1] + eps)\n    log_uniq = np.log(X[:, 2] + eps)\n    y_log = np.log(y + eps)\n\n    # design matrix with cross\u2010terms: [1, Lt, Lp, Lu, Lt*Lp, Lt*Lu]\n    D = np.column_stack([\n        np.ones_like(log_toks),\n        log_toks,\n        log_params,\n        log_uniq,\n        log_toks * log_params,\n        log_toks * log_uniq\n    ])\n\n    # least\u2010squares init in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # objective: mean squared error in log\u2010space\n    def obj(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid**2)\n\n    # refine via L-BFGS-B\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1609), Performs well on nmae (0.2815), Performs well on r2 (0.8391), Performs well on combined_score (0.8614)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5802)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5357)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) \u2248 \u03b1 \n                + \u03b2\u00b7log(tokens) \n                + \u03b3\u00b7log(params) \n                + \u03b4\u00b7log(unique_tokens)\n                + \u03b5\u00b7[log(tokens)\u00b7log(params)]\n                + \u03b6\u00b7[log(tokens)\u00b7log(unique_tokens)]\n\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6: \n                   [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(\"params must have length 6: [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\")\n\n    # avoid log(0)\n    X_log = np.log(np.maximum(X, 1e-12))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    \u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6 = p\n\n    # compute log\u2010prediction with interactions\n    log_pred = (\n        \u03b1\n        + \u03b2 * t\n        + \u03b3 * m\n        + \u03b4 * u\n        + \u03b5 * (t * m)\n        + \u03b6 * (t * u)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the improved scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized parameters [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6].\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs with small offset\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # construct design matrix with interactions: [1, t, m, u, t*m, t*u]\n    D = np.stack([np.ones_like(t), t, m, u, t * m, t * u], axis=1)\n\n    # initial least-squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    beta_init = beta_init.ravel()  # shape (6,)\n\n    # objective: MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # refine via L-BFGS-B\n    res = minimize(\n        objective,\n        beta_init,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12}\n    )\n\n    if res.success and res.x.shape == beta_init.shape:\n        return res.x\n    else:\n        # fallback to linear solution\n        return beta_init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5836, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a 7-parameter\n    additive power\u2010law with a floor:\n      loss \u2248 C0\n             + amp_tkn * tokens^(\u2212dec_tkn)\n             + amp_prm * params^(\u2212dec_prm)\n             + amp_uniq * unique_tokens^(\u2212dec_uniq)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7:\n                   [C0,\n                    amp_tkn, dec_tkn,\n                    amp_prm, dec_prm,\n                    amp_uniq, dec_uniq]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [C0, amp_tkn, dec_tkn, amp_prm, dec_prm, amp_uniq, dec_uniq], got {p.size}\")\n    C0, amp_t, dec_t, amp_p, dec_p, amp_u, dec_u = p\n\n    # Avoid zeros/negatives in power computations\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    uniq = np.maximum(X[:, 2], eps)\n\n    # Compute additive power-law contributions plus floor\n    pred = (\n        C0\n        + amp_t * np.power(tkn, -dec_t)\n        + amp_p * np.power(prm, -dec_p)\n        + amp_u * np.power(uniq, -dec_u)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 parameters of the additive power\u2010law scaling law by minimizing\n    relative error residuals via least squares.\n\n    Returns:\n      params_opt: array of length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Ensure strictly positive for relative residuals\n    y = np.maximum(y, 1e-12)\n\n    # Initial floor guess: 90% of min loss (to allow some headroom)\n    y_min, y_max = np.min(y), np.max(y)\n    C0_0 = max(0.0, 0.9 * y_min)\n\n    # Distribute remaining mean residual equally across three amplitudes\n    mean_resid = np.mean(y - C0_0)\n    amp0 = max(mean_resid / 3.0, 1e-12)\n\n    # Initial decay exponents\n    dec0 = 0.5\n\n    # Initial parameter vector: [C0, amp_tkn, dec_tkn, amp_prm, dec_prm, amp_uniq, dec_uniq]\n    p0 = np.array([C0_0,\n                   amp0, dec0,\n                   amp0, dec0,\n                   amp0, dec0], dtype=float)\n\n    # Bounds: floor \u2265 0, amps \u2265 tiny positive, decays \u2265 0\n    lower = np.array([0.0,\n                      1e-12, 0.0,\n                      1e-12, 0.0,\n                      1e-12, 0.0], dtype=float)\n    upper = np.full(7, np.inf, dtype=float)\n\n    # Residual function: relative error to balance across scales\n    def resid_fn(p):\n        pred = scaling_law_func(X, p)\n        return (pred - y) / (y + 1e-12)\n\n    # Solve with Trust-Region-Reflective least squares\n    sol = least_squares(\n        resid_fn,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=10000\n    )\n\n    # Return optimized params or fallback to initial\n    return sol.x if sol.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.930)\n\n\n### Inspiration 2 (Score: 0.5916, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as an additive combination of three decaying power\u2010law terms\n    plus a floor:\n\n      loss \u2248 L_inf + A_t\u00b7tokens^(\u2212\u03b1_t) + A_p\u00b7params^(\u2212\u03b1_p) + A_u\u00b7unique_tokens^(\u2212\u03b1_u)\n\n    We parametrize all seven quantities in log\u2010space to enforce positivity:\n      [u0..u6] \u2192 exp(ui) for each.\n\n    Inputs:\n      data_points: array\u2010like (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20107 array or shape (T,7) of raw log\u2010parameters\n                   [u0,u1,u2,u3,u4,u5,u6]\n\n    Returns:\n      preds: shape (N,) if single param\u2010vector or (N,T) if multiple\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    # ensure params is 2D: (T,7)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 (got %d)\" % P)\n\n    # unpack raw parameters\n    u0 = p[:, 0]  # floor\n    u1 = p[:, 1]; u2 = p[:, 2]  # tokens amplitude & decay\n    u3 = p[:, 3]; u4 = p[:, 4]  # params amplitude & decay\n    u5 = p[:, 5]; u6 = p[:, 6]  # unique_tokens amplitude & decay\n\n    # map to positive\n    L_inf   = np.exp(u0)[None, :]      # (1,T)\n    A_t     = np.exp(u1)[None, :]\n    alpha_t = np.exp(u2)[None, :]\n    A_p     = np.exp(u3)[None, :]\n    alpha_p = np.exp(u4)[None, :]\n    A_u     = np.exp(u5)[None, :]\n    alpha_u = np.exp(u6)[None, :]\n\n    # compute predictions (N,T)\n    preds = (\n        L_inf\n        + A_t * (tkn[:, None] ** (-alpha_t))\n        + A_p * (prm[:, None] ** (-alpha_p))\n        + A_u * (ut[:, None] ** (-alpha_u))\n    )\n\n    # return (N,) if single parameter\u2010vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw log\u2010parameters [u0..u6] by minimizing squared error:\n\n      resid(u) = scaling_law_func(X, u) \u2013 y\n\n    We initialize\n      u0 = log(min(y)),           floor\n      u1,u3,u5 = log((mean(y)\u2212floor)/3), amplitudes\n      u2,u4,u6 = log(1.0),         decays\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # ignore non\u2010positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # statistics for initialization\n    eps = 1e-12\n    mean_y = np.mean(y)\n    min_y  = np.min(y)\n    u0 = np.log(min_y + eps)                        # floor\n    resid = max(mean_y - np.exp(u0), eps)\n    amp0 = resid / 3.0\n    u1 = np.log(amp0 + eps); u3 = u1; u5 = u1       # initial amplitudes\n    u2 = np.log(1.0); u4 = np.log(1.0); u6 = np.log(1.0)  # initial decays\n\n    init = np.array([u0, u1, u2, u3, u4, u5, u6], dtype=float)\n\n    def resid_fn(u):\n        return scaling_law_func(X, u) - y\n\n    try:\n        sol = least_squares(\n            resid_fn,\n            init,\n            method='trf',\n            xtol=1e-8,\n            ftol=1e-8,\n            max_nfev=10000\n        )\n        u_opt = sol.x if sol.success else init\n    except Exception:\n        u_opt = init\n\n    return u_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.914)\n\n\n### Inspiration 3 (Score: 0.5357, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2010linear scaling law with pairwise interaction terms:\n      log(loss) \u2248 \u03b1 \n                + \u03b2\u00b7log(tokens) \n                + \u03b3\u00b7log(params) \n                + \u03b4\u00b7log(unique_tokens)\n                + \u03b5\u00b7[log(tokens)\u00b7log(params)]\n                + \u03b6\u00b7[log(tokens)\u00b7log(unique_tokens)]\n\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6: \n                   [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(\"params must have length 6: [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6]\")\n\n    # avoid log(0)\n    X_log = np.log(np.maximum(X, 1e-12))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    \u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6 = p\n\n    # compute log\u2010prediction with interactions\n    log_pred = (\n        \u03b1\n        + \u03b2 * t\n        + \u03b3 * m\n        + \u03b4 * u\n        + \u03b5 * (t * m)\n        + \u03b6 * (t * u)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the improved scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized parameters [\u03b1, \u03b2, \u03b3, \u03b4, \u03b5, \u03b6].\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs with small offset\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # construct design matrix with interactions: [1, t, m, u, t*m, t*u]\n    D = np.stack([np.ones_like(t), t, m, u, t * m, t * u], axis=1)\n\n    # initial least-squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    beta_init = beta_init.ravel()  # shape (6,)\n\n    # objective: MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # refine via L-BFGS-B\n    res = minimize(\n        objective,\n        beta_init,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12}\n    )\n\n    if res.success and res.x.shape == beta_init.shape:\n        return res.x\n    else:\n        # fallback to linear solution\n        return beta_init\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5357, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with cross\u2010terms:\n      log(loss) \u2248 a \n                  + b\u00b7log(tokens) \n                  + c\u00b7log(params) \n                  + d\u00b7log(unique_tokens)\n                  + e\u00b7[log(tokens)\u00b7log(params)]\n                  + f\u00b7[log(tokens)\u00b7log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 6 [a, b, c, d, e, f]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 6:\n        raise ValueError(f\"Expected 6 parameters [a,b,c,d,e,f], got {p.size}\")\n    a, b, c, d, e, f = p\n\n    # avoid log(0)\n    eps = 1e-12\n    log_toks = np.log(X[:, 0] + eps)\n    log_params = np.log(X[:, 1] + eps)\n    log_uniq = np.log(X[:, 2] + eps)\n\n    # compute log\u2010prediction with cross terms\n    log_pred = (\n        a\n        + b * log_toks\n        + c * log_params\n        + d * log_uniq\n        + e * (log_toks * log_params)\n        + f * (log_toks * log_uniq)\n    )\n\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing MSE in log\u2010space.\n    Uses six parameters [a,b,c,d,e,f] as in scaling_law_func above.\n\n    Returns:\n      params_opt: array of 6 parameters [a, b, c, d, e, f]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # only positive losses for log\u2010domain fitting\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"Need some positive loss values to fit model.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs with small epsilon\n    eps = 1e-12\n    log_toks = np.log(X[:, 0] + eps)\n    log_params = np.log(X[:, 1] + eps)\n    log_uniq = np.log(X[:, 2] + eps)\n    y_log = np.log(y + eps)\n\n    # design matrix with cross\u2010terms: [1, Lt, Lp, Lu, Lt*Lp, Lt*Lu]\n    D = np.column_stack([\n        np.ones_like(log_toks),\n        log_toks,\n        log_params,\n        log_uniq,\n        log_toks * log_params,\n        log_toks * log_uniq\n    ])\n\n    # least\u2010squares init in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # objective: mean squared error in log\u2010space\n    def obj(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid**2)\n\n    # refine via L-BFGS-B\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as an additive combination of three decaying power\u2010law terms\n    plus a floor:\n\n      loss \u2248 C0\n             + A_t * tokens^(\u2212\u03b1_t)\n             + A_p * params^(\u2212\u03b1_p)\n             + A_u * unique_tokens^(\u2212\u03b1_u)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7:\n                   [C0,\n                    A_t, \u03b1_t,\n                    A_p, \u03b1_p,\n                    A_u, \u03b1_u]\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [C0, A_t, \u03b1_t, A_p, \u03b1_p, A_u, \u03b1_u], got {p.size}\")\n    C0, A_t, \u03b1_t, A_p, \u03b1_p, A_u, \u03b1_u = p\n\n    # numeric floor to avoid zero or negative bases\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    prms   = np.maximum(X[:, 1], eps)\n    uniqs  = np.maximum(X[:, 2], eps)\n\n    # additive power\u2010law model\n    preds = (\n        C0\n        + A_t * tokens**(-\u03b1_t)\n        + A_p * prms**(-\u03b1_p)\n        + A_u * uniqs**(-\u03b1_u)\n    )\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 parameters of the additive power\u2010law scaling law by minimizing\n    relative error residuals via trust\u2010region least squares.\n\n    Returns:\n      params_opt: np.ndarray of length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure positive losses for relative residual\n    eps_y = 1e-12\n    y = np.maximum(y, eps_y)\n\n    # initialize floor C0 slightly below min observed loss\n    y_min = np.min(y)\n    C0_0  = max(0.0, 0.9 * y_min)\n\n    # distribute remaining mean loss equally as initial amplitudes\n    mean_resid = np.mean(y - C0_0)\n    amp0 = max(mean_resid / 3.0, eps_y)\n\n    # initial decay exponents\n    dec0 = 0.5\n\n    # initial parameter vector: [C0, A_t, \u03b1_t, A_p, \u03b1_p, A_u, \u03b1_u]\n    p0 = np.array([\n        C0_0,\n        amp0, dec0,\n        amp0, dec0,\n        amp0, dec0\n    ], dtype=float)\n\n    # parameter bounds: floor \u2265 0, amplitudes \u2265 tiny positive, decays \u2265 0\n    lower = np.array([0.0, eps_y, 0.0, eps_y, 0.0, eps_y, 0.0], dtype=float)\n    upper = np.full(7, np.inf, dtype=float)\n\n    # residual function (relative)\n    def resid_fn(p):\n        pred = scaling_law_func(X, p)\n        return (pred - y) / y\n\n    sol = least_squares(\n        resid_fn,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=10000\n    )\n\n    # return optimized parameters or fallback to initial\n    return sol.x if sol.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}