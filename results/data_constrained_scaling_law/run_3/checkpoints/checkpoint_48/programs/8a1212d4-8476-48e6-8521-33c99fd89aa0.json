{"id": "8a1212d4-8476-48e6-8521-33c99fd89aa0", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with up to 7 parameters:\n      log(loss) \u2248 a\n                 + b\u00b7log(tokens)\n                 + c\u00b7log(params)\n                 + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)*log(params)]\n                 + f\u00b7[log(tokens)*log(unique_tokens)]\n                 + g\u00b7[log(params)*log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7 [a,b,c,d,e,f,g]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n\n    a, b, c, d, e, f, g = p\n    # Avoid log(0)\n    eps = 1e-12\n    logX = np.log(np.maximum(X, eps))  # shape (N,3)\n    t = logX[:, 0]\n    pr = logX[:, 1]\n    u = logX[:, 2]\n\n    # Compute log\u2010prediction with pairwise interaction terms\n    log_pred = (\n        a\n        + b * t\n        + c * pr\n        + d * u\n        + e * (t * pr)\n        + f * (t * u)\n        + g * (pr * u)\n    )\n    # Clip for numerical safety\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter extended model by:\n      1) closed\u2010form ridge regression initialization in log\u2010space\n      2) refinement via Huber\u2010robust loss in log\u2010space\n\n    Returns:\n      params_opt: array of 7 parameters [a,b,c,d,e,f,g]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Keep only positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        # fallback: zero parameters\n        return np.zeros(7, dtype=np.float64)\n    X = X[mask]\n    y = y[mask]\n\n    # Log transform\n    eps = 1e-12\n    logX = np.log(np.maximum(X, eps))  # (n,3)\n    logy = np.log(np.maximum(y, eps))  # (n,)\n\n    t = logX[:, 0]\n    pr = logX[:, 1]\n    u = logX[:, 2]\n    n = logX.shape[0]\n\n    # Design matrix [1, t, pr, u, t*pr, t*u, pr*u]\n    D = np.column_stack([np.ones(n), t, pr, u, t * pr, t * u, pr * u])  # (n,7)\n\n    # Closed\u2010form ridge regression for initialization\n    G = D.T @ D\n    lam = 1e-6 * np.trace(G) / 7.0\n    init_params = np.linalg.solve(G + lam * np.eye(7), D.T @ logy)\n\n    # Huber loss for robust refinement\n    def huber(residuals, delta=1.0):\n        abs_r = np.abs(residuals)\n        mask_small = abs_r <= delta\n        out = np.empty_like(residuals)\n        out[mask_small] = 0.5 * residuals[mask_small] ** 2\n        out[~mask_small] = delta * (abs_r[~mask_small] - 0.5 * delta)\n        return out\n\n    def objective(p):\n        r = D.dot(p) - logy\n        return np.mean(huber(r))\n\n    res = minimize(objective, init_params, method='L-BFGS-B')\n    if res.success:\n        return res.x\n    else:\n        # fallback to ridge solution if refinement fails\n        return init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "34f2c9a6-9192-41ad-a5e4-d31c29401149", "generation": 2, "timestamp": 1754715649.8354475, "iteration_found": 40, "metrics": {"nmse": 0.5857620414023071, "nmae": 0.96181931402525, "r2": 0.41423795859769286, "combined_score": 0.6306116390046067}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1484, nmae: 0.3297, r2: 0.8516, combined_score: 0.8708\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5501)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a, b, c, d], got {p.size}\")\n    a, b, c, d = p\n\n    # Compute log inputs (epsilon to avoid log(0))\n    logs = np.log(X + 1e-12)    # shape (N,3)\n    # Linear model in log\u2010space\n    y_log = a + b * logs[:, 0] + c * logs[:, 1] + d * logs[:, 2]\n    # Back to original scale\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by closed\u2010form ridge regression in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Use only strictly positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss_values non\u2010positive; cannot fit a log\u2010linear model.\")\n    X, y = X[mask], y[mask]\n\n    # Take logs (small epsilon to avoid -inf)\n    logs = np.log(X + 1e-12)    # shape (n_samples,3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    n = logs.shape[0]\n    D = np.empty((n, 4), float)\n    D[:, 0] = 1.0\n    D[:, 1:] = logs\n\n    # Closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D\n    # Auto\u2010tune regularization to data scale\n    \u03bb = 1e-6 * np.trace(G) / G.shape[0]\n    # Solve (G + \u03bbI) p = D^T y_log\n    coef = np.linalg.solve(G + np.eye(4) * \u03bb, D.T @ y_log)\n\n    return coef\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1484), Performs well on nmae (0.3297), Performs well on r2 (0.8516), Performs well on combined_score (0.8708)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6542)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5501, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a, b, c, d], got {p.size}\")\n    a, b, c, d = p\n\n    # Compute log inputs (epsilon to avoid log(0))\n    logs = np.log(X + 1e-12)    # shape (N,3)\n    # Linear model in log\u2010space\n    y_log = a + b * logs[:, 0] + c * logs[:, 1] + d * logs[:, 2]\n    # Back to original scale\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by closed\u2010form ridge regression in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Use only strictly positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss_values non\u2010positive; cannot fit a log\u2010linear model.\")\n    X, y = X[mask], y[mask]\n\n    # Take logs (small epsilon to avoid -inf)\n    logs = np.log(X + 1e-12)    # shape (n_samples,3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    n = logs.shape[0]\n    D = np.empty((n, 4), float)\n    D[:, 0] = 1.0\n    D[:, 1:] = logs\n\n    # Closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D\n    # Auto\u2010tune regularization to data scale\n    \u03bb = 1e-6 * np.trace(G) / G.shape[0]\n    # Solve (G + \u03bbI) p = D^T y_log\n    coef = np.linalg.solve(G + np.eye(4) * \u03bb, D.T @ y_log)\n\n    return coef\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 182799832890.8077, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (381562595631808630489088.000), Excellent nmae (731199331563.231), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.6481, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with cross\u2010terms, up to 7 parameters:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) \n                 + c\u00b7log(params) \n                 + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)\u00b7log(params)]\n                 + f\u00b7[log(tokens)\u00b7log(unique_tokens)]\n                 + g\u00b7[log(params)\u00b7log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    params: array\u2010like of length 7 [a,b,c,d,e,f,g]\n    data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(np.float64)  # (N,3)\n    p = np.asarray(params, dtype=np.float64)\n    # ensure shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n    # unpack parameters\n    a, b, c, d, e, f, g = p.T  # each is shape (M,)\n\n    # compute log\u2010features\n    eps = 1e-12\n    logX = np.log(X + eps)        # (N,3)\n    t = logX[:, 0][:, None]       # (N,1)\n    pr = logX[:, 1][:, None]\n    u = logX[:, 2][:, None]\n\n    # compute log\u2010predictions, shape (N,M)\n    log_pred = (\n        a[None, :]\n        + b[None, :] * t\n        + c[None, :] * pr\n        + d[None, :] * u\n        + e[None, :] * (t * pr)\n        + f[None, :] * (t * u)\n        + g[None, :] * (pr * u)\n    )\n    # numerical stability\n    log_pred = np.clip(log_pred, -50, 50)\n    pred = np.exp(log_pred)\n\n    # return shape (N,) if single parameter\u2010set else (N,M)\n    return pred[:, 0] if M == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter extended log\u2010linear model in log\u2010space with a Huber\u2010robust objective\n    and a small ridge regularization for initialization.\n    Returns optimized parameters [a,b,c,d,e,f,g].\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(np.float64)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=np.float64).ravel()  # (N,)\n\n    # only positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n    if X.shape[0] == 0:\n        return np.zeros(7, dtype=np.float64)\n\n    eps = 1e-12\n    logX = np.log(X + eps)        # (N,3)\n    y_log = np.log(y + eps)       # (N,)\n\n    t = logX[:, 0]\n    pr = logX[:, 1]\n    u = logX[:, 2]\n    N = y_log.shape[0]\n\n    # design matrix with cross\u2010terms\n    D = np.stack([\n        np.ones(N),\n        t,\n        pr,\n        u,\n        t * pr,\n        t * u,\n        pr * u\n    ], axis=1)  # (N,7)\n\n    # ridge\u2010regularized least squares for initialization\n    # \u03bb scaled to data magnitude\n    lam = 1e-6 * np.trace(D.T @ D) / 7.0\n    A = D.T @ D + lam * np.eye(7)\n    beta_init = np.linalg.solve(A, D.T @ y_log)\n\n    # Huber loss in log\u2010space\n    def huber_loss(r, delta=1.0):\n        abs_r = np.abs(r)\n        small = abs_r <= delta\n        loss = np.empty_like(r)\n        loss[small]   = 0.5 * r[small]**2\n        loss[~small]  = delta * (abs_r[~small] - 0.5 * delta)\n        return loss\n\n    # objective: mean Huber loss of residuals\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(huber_loss(resid))\n\n    # refine with L-BFGS-B\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    return res.x if res.success else beta_init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.962), NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 1.1263, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is an evolved version that uses a 7-parameter log\u2010linear model with pairwise interaction terms, initializes via ridge\u2010regularized least squares in log\u2013space for numerical stability, and then refines with a Huber\u2010robust objective.  This stays within 7 parameters and maintains the same I/O signatures.\n\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with up to 7 parameters:\n      log(loss) \u2248 a\n                 + b\u00b7log(tokens)\n                 + c\u00b7log(params)\n                 + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)*log(params)]\n                 + f\u00b7[log(tokens)*log(unique_tokens)]\n                 + g\u00b7[log(params)*log(unique_tokens)]\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7 [a,b,c,d,e,f,g]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=np.float64).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n\n    a, b, c, d, e, f, g = p\n    # Avoid log(0)\n    eps = 1e-12\n    logX = np.log(np.maximum(X, eps))  # shape (N,3)\n    t = logX[:, 0]\n    pr = logX[:, 1]\n    u = logX[:, 2]\n\n    # Compute log\u2010prediction with pairwise interaction terms\n    log_pred = (\n        a\n        + b * t\n        + c * pr\n        + d * u\n        + e * (t * pr)\n        + f * (t * u)\n        + g * (pr * u)\n    )\n    # Clip for numerical safety\n    log_pred = np.clip(log_pred, -50.0, 50.0)\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter extended model by:\n      1) closed\u2010form ridge regression initialization in log\u2010space\n      2) refinement via Huber\u2010robust loss in log\u2010space\n\n    Returns:\n      params_opt: array of 7 parameters [a,b,c,d,e,f,g]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Keep only positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        # fallback: zero parameters\n        return np.zeros(7, dtype=np.float64)\n    X = X[mask]\n    y = y[mask]\n\n    # Log transform\n    eps = 1e-12\n    logX = np.log(np.maximum(X, eps))  # (n,3)\n    logy = np.log(np.maximum(y, eps))  # (n,)\n\n    t = logX[:, 0]\n    pr = logX[:, 1]\n    u = logX[:, 2]\n    n = logX.shape[0]\n\n    # Design matrix [1, t, pr, u, t*pr, t*u, pr*u]\n    D = np.column_stack([np.ones(n), t, pr, u, t * pr, t * u, pr * u])  # (n,7)\n\n    # Closed\u2010form ridge regression for initialization\n    G = D.T @ D\n    lam = 1e-6 * np.trace(G) / 7.0\n    init_params = np.linalg.solve(G + lam * np.eye(7), D.T @ logy)\n\n    # Huber loss for robust refinement\n    def huber(residuals, delta=1.0):\n        abs_r = np.abs(residuals)\n        mask_small = abs_r <= delta\n        out = np.empty_like(residuals)\n        out[mask_small] = 0.5 * residuals[mask_small] ** 2\n        out[~mask_small] = delta * (abs_r[~mask_small] - 0.5 * delta)\n        return out\n\n    def objective(p):\n        r = D.dot(p) - logy\n        return np.mean(huber(r))\n\n    res = minimize(objective, init_params, method='L-BFGS-B')\n    if res.success:\n        return res.x\n    else:\n        # fallback to ridge solution if refinement fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n\n- Uses a richer 7-parameter model with pairwise interactions between the three log\u2010features.\n- Initializes parameters by closed\u2010form ridge\u2010regularized least squares for stability on limited data.\n- Refines the solution using a Huber\u2010robust loss in log\u2010space to lessen sensitivity to outliers.\n- Enforces numerical safety via small epsilons and clipping of the log\u2010predictions.\n- Keeps the interface unchanged: \n    - `scaling_law_func(data_points, params)` \u2192 predicted losses \n    - `fit_scaling_law(data_points, loss_values)` \u2192 optimized parameters (length 7)."]}}}