{"id": "018bf32a-4efd-403e-a9ce-ad5b9580d0f3", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning under data constraints.\nModel: loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\nParameters: [C0, C1, \u03b1, \u03b2, \u03b3]  (5 parameters)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using an additive\u2010floor multiplicative power law:\n      loss = C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3], got {p.size}\")\n\n    # Unpack parameters\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zero\u2010division or negative powers\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    mparams = np.maximum(X[:, 1], eps)\n    unique = np.maximum(X[:, 2], eps)\n\n    # Compute prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                   * np.power(mparams, -beta) \\\n                   * np.power(unique, -gamma)\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing mean squared error in original loss domain.\n\n    Returns:\n      params_opt: array of 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points of shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to positive domain\n    eps = 1e-12\n    y = np.maximum(y, eps)\n\n    # Initial guess via log\u2010linear fit (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique)\n    X_clip = np.maximum(X, eps)\n    logs = np.log(X_clip)\n    y_log = np.log(y)\n    N = logs.shape[0]\n    D = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,4)\n    # Solve least\u2010squares in log\u2010space\n    coef, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a_lin, b_lin, c_lin, d_lin = coef\n\n    # Translate to our parameterization\n    C0_0 = 0.0\n    C1_0 = np.exp(a_lin)\n    alpha0 = max(-b_lin, 0.0)\n    beta0  = max(-c_lin, 0.0)\n    gamma0 = max(-d_lin, 0.0)\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds to ensure stability\n    bounds = [\n        (0.0, None),     # C0 \u2265 0\n        (eps, None),     # C1 > 0\n        (0.0, None),     # \u03b1 \u2265 0\n        (0.0, None),     # \u03b2 \u2265 0\n        (0.0, None),     # \u03b3 \u2265 0\n    ]\n\n    # Objective: MSE in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Optimize with L-BFGS-B\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success:\n        return res.x\n    else:\n        return p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2f552f5c-4aaf-466c-a1dc-ea0a1475296f", "generation": 1, "timestamp": 1754715586.8654666, "iteration_found": 35, "metrics": {"nmse": 0.5400130552578459, "nmae": 0.9675787345451223, "r2": 0.45998694474215407, "combined_score": 0.6493451445660433}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.815625956318086e+23, "nmae": 731199331563.2308, "r2": -3.815625956318086e+23, "combined_score": 2.620801963945535e-24}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 381562595631808630489088.0000\n- nmae: 731199331563.2308\n- r2: -381562595631808630489088.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1484, nmae: 0.3297, r2: 0.8516, combined_score: 0.8708\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5501)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a, b, c, d], got {p.size}\")\n    a, b, c, d = p\n\n    # Compute log inputs (epsilon to avoid log(0))\n    logs = np.log(X + 1e-12)    # shape (N,3)\n    # Linear model in log\u2010space\n    y_log = a + b * logs[:, 0] + c * logs[:, 1] + d * logs[:, 2]\n    # Back to original scale\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by closed\u2010form ridge regression in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Use only strictly positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss_values non\u2010positive; cannot fit a log\u2010linear model.\")\n    X, y = X[mask], y[mask]\n\n    # Take logs (small epsilon to avoid -inf)\n    logs = np.log(X + 1e-12)    # shape (n_samples,3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    n = logs.shape[0]\n    D = np.empty((n, 4), float)\n    D[:, 0] = 1.0\n    D[:, 1:] = logs\n\n    # Closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D\n    # Auto\u2010tune regularization to data scale\n    \u03bb = 1e-6 * np.trace(G) / G.shape[0]\n    # Solve (G + \u03bbI) p = D^T y_log\n    coef = np.linalg.solve(G + np.eye(4) * \u03bb, D.T @ y_log)\n\n    return coef\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1484), Performs well on nmae (0.3297), Performs well on r2 (0.8516), Performs well on combined_score (0.8708)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6542)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5501, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n    p = np.asarray(params, float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a, b, c, d], got {p.size}\")\n    a, b, c, d = p\n\n    # Compute log inputs (epsilon to avoid log(0))\n    logs = np.log(X + 1e-12)    # shape (N,3)\n    # Linear model in log\u2010space\n    y_log = a + b * logs[:, 0] + c * logs[:, 1] + d * logs[:, 2]\n    # Back to original scale\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by closed\u2010form ridge regression in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    y = np.asarray(loss_values, float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points shape (N,3), got {X.shape}\")\n\n    # Use only strictly positive losses for log\u2010fit\n    mask = y > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss_values non\u2010positive; cannot fit a log\u2010linear model.\")\n    X, y = X[mask], y[mask]\n\n    # Take logs (small epsilon to avoid -inf)\n    logs = np.log(X + 1e-12)    # shape (n_samples,3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique_tokens)]\n    n = logs.shape[0]\n    D = np.empty((n, 4), float)\n    D[:, 0] = 1.0\n    D[:, 1:] = logs\n\n    # Closed\u2010form ridge regression: minimize ||D\u00b7p \u2212 y_log||^2 + \u03bb||p||^2\n    G = D.T @ D\n    # Auto\u2010tune regularization to data scale\n    \u03bb = 1e-6 * np.trace(G) / G.shape[0]\n    # Solve (G + \u03bbI) p = D^T y_log\n    coef = np.linalg.solve(G + np.eye(4) * \u03bb, D.T @ y_log)\n\n    return coef\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.6542, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.968), NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning under data constraints.\nModel: loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\nParameters: [C0, C1, \u03b1, \u03b2, \u03b3]  (5 parameters)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using an additive\u2010floor multiplicative power law:\n      loss = C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3], got {p.size}\")\n\n    # Unpack parameters\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zero\u2010division or negative powers\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    mparams = np.maximum(X[:, 1], eps)\n    unique = np.maximum(X[:, 2], eps)\n\n    # Compute prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                   * np.power(mparams, -beta) \\\n                   * np.power(unique, -gamma)\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing mean squared error in original loss domain.\n\n    Returns:\n      params_opt: array of 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points of shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to positive domain\n    eps = 1e-12\n    y = np.maximum(y, eps)\n\n    # Initial guess via log\u2010linear fit (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique)\n    X_clip = np.maximum(X, eps)\n    logs = np.log(X_clip)\n    y_log = np.log(y)\n    N = logs.shape[0]\n    D = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,4)\n    # Solve least\u2010squares in log\u2010space\n    coef, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a_lin, b_lin, c_lin, d_lin = coef\n\n    # Translate to our parameterization\n    C0_0 = 0.0\n    C1_0 = np.exp(a_lin)\n    alpha0 = max(-b_lin, 0.0)\n    beta0  = max(-c_lin, 0.0)\n    gamma0 = max(-d_lin, 0.0)\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds to ensure stability\n    bounds = [\n        (0.0, None),     # C0 \u2265 0\n        (eps, None),     # C1 > 0\n        (0.0, None),     # \u03b1 \u2265 0\n        (0.0, None),     # \u03b2 \u2265 0\n        (0.0, None),     # \u03b3 \u2265 0\n    ]\n\n    # Objective: MSE in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Optimize with L-BFGS-B\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success:\n        return res.x\n    else:\n        return p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Adopts a five\u2010parameter form with an irreducible loss floor (`C0`) and three exponents controlling diminishing returns.\n- Clips inputs and targets to avoid log and power\u2010law singularities.\n- Initializes via a closed\u2010form log\u2010linear regression to provide robust starting values.\n- Uses bounded L-BFGS-B optimization for numerical stability and ensures all exponents remain nonnegative.\n- Total parameters \u2264 7 as required (here 5)."]}}}