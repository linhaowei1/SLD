{"id": "178a5161-e0fd-40cf-b45e-982b157d1979", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# Small constant to avoid log(0) or division by zero\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced power\u2010law with an irreducible floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3], got {p.size}\")\n\n    C0, C1, alpha, beta, gamma = p\n\n    # Clip inputs to avoid numerical issues\n    tokens   = np.maximum(X[:, 0], _EPS)\n    mparams  = np.maximum(X[:, 1], _EPS)\n    unique_t = np.maximum(X[:, 2], _EPS)\n\n    # Compute the power\u2010law prediction with floor\n    return C0 + C1 * tokens**(-alpha) * mparams**(-beta) * unique_t**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law scaling law by minimizing MSE in the\n    original loss domain, using an analytic gradient for efficiency.\n\n    Returns:\n      params_opt: array of 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Clip targets to a small positive value\n    y = np.maximum(y, _EPS)\n\n    # INITIAL GUESS via log\u2010linear regression (no floor term)\n    logs   = np.log(np.maximum(X, _EPS))  # shape (N,3)\n    y_log  = np.log(y)                    # shape (N,)\n\n    N = logs.shape[0]\n    # Design matrix for log\u2010linear: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.concatenate([np.ones((N, 1)), logs], axis=1)  # shape (N,4)\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a_lin, b_lin, c_lin, d_lin = beta_lin.ravel()[:4]\n\n    # Translate linear fit to our 5\u2010parameter form\n    C0_0    = np.min(y) * 0.5\n    C1_0    = np.exp(a_lin)\n    alpha0  = max(-b_lin, _EPS)\n    beta0   = max(-c_lin, _EPS)\n    gamma0  = max(-d_lin, _EPS)\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds to ensure numerical stability and physical plausibility\n    bounds = [\n        (0.0, None),   # C0 \u2265 0\n        (_EPS, None),  # C1 > 0\n        (0.0, None),   # \u03b1 \u2265 0\n        (0.0, None),   # \u03b2 \u2265 0\n        (0.0, None),   # \u03b3 \u2265 0\n    ]\n\n    # Objective: mean squared error in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Analytic gradient (Jacobian) of the MSE w.r.t. [C0, C1, \u03b1, \u03b2, \u03b3]\n    def jac(p):\n        C0, C1, alpha, beta, gamma = p\n\n        tokens   = np.maximum(X[:, 0], _EPS)\n        mparams  = np.maximum(X[:, 1], _EPS)\n        unique_t = np.maximum(X[:, 2], _EPS)\n\n        # Core multiplicative term\n        f = tokens**(-alpha) * mparams**(-beta) * unique_t**(-gamma)\n        pred = C0 + C1 * f\n        resid = pred - y\n        invN  = 2.0 / X.shape[0]\n\n        # Logs for derivative of exponents\n        ln_t = np.log(tokens)\n        ln_m = np.log(mparams)\n        ln_u = np.log(unique_t)\n\n        dC0    = invN * np.sum(resid)\n        dC1    = invN * np.sum(resid * f)\n        dalpha = invN * np.sum(resid * (-C1 * f * ln_t))\n        dbeta  = invN * np.sum(resid * (-C1 * f * ln_m))\n        dgamma = invN * np.sum(resid * (-C1 * f * ln_u))\n\n        return np.array([dC0, dC1, dalpha, dbeta, dgamma], dtype=float)\n\n    # Optimize with L-BFGS-B\n    res = minimize(\n        fun=objective,\n        x0=p0,\n        jac=jac,\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000},\n    )\n\n    if res.success and res.x.size == p0.size:\n        return res.x\n    else:\n        # Fallback to initial guess if optimization fails\n        return p0\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ff440c3a-c7c1-4174-b400-d4e2cbb0a218", "generation": 3, "timestamp": 1754715706.9301147, "iteration_found": 46, "metrics": {"nmse": 0.5446944316062035, "nmae": 0.9739029194408508, "r2": 0.45530556839379654, "combined_score": 0.6473772284918387}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.2744855632126524, "nmae": 0.7212048295753529, "r2": 0.7255144367873476, "combined_score": 0.7846303079960009}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.2745\n- nmae: 0.7212\n- r2: 0.7255\n- combined_score: 0.7846\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1953, nmae: 0.4842, r2: 0.8047, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using a shifted power\u2010law scaling:\n      loss = exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    params: array of length 7 or shape (M,7):\n        [log_a, b, c, d, k0, k1, k2]\n      where t0 = exp(k0), p0 = exp(k1), u0 = exp(k2).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    # Ensure p is 2D: (M,7)\n    if p.ndim == 1:\n        p_arr = p[np.newaxis, :]\n    else:\n        p_arr = p.copy()\n    M, P = p_arr.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    tokens = X[:, 0]\n    param_cnt = X[:, 1]\n    uniq = X[:, 2]\n\n    N = X.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Vectorized over M parameter sets\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p_arr[i]\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n\n        # Compute log\u2010prediction\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(param_cnt + p0)\n            - d * np.log(uniq + u0)\n        )\n        # Avoid numerical under/overflow\n        y_log = np.clip(y_log, -50.0, 50.0)\n        preds[:, i] = np.exp(y_log)\n\n    # Return shape (N,) if single param set\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter shifted\u2010power\u2010law scaling law by minimizing\n    mean squared error in log\u2010loss space.\n    Returns an array of 7 optimized parameters:\n        [log_a, b, c, d, k0, k1, k2]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] == 0:\n        raise ValueError(\"No positive loss values to fit.\")\n\n    # Work in log-loss space\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(loss))\n    #   b,c,d = 0.5\n    #   k0,k1,k2 = 0 => t0=p0=u0=1\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: exponents b,c,d >= 0; others unbounded\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n        (None, None),  # k0\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    # Objective: mean squared error in log\u2010space\n    def mse_obj(p):\n        preds = scaling_law_func(X_fit, p)\n        # work in log\n        eps = 1e-12\n        y_pred_log = np.log(np.clip(preds, eps, None))\n        resid = y_pred_log - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        mse_obj,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-8, \"maxiter\": 1000},\n    )\n    if not res.success:\n        # fallback to initial guess\n        return init\n    return res.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1953), Performs well on nmae (0.4842), Performs well on r2 (0.8047), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6265)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5490)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling\u2010law in log\u2010space with up to 7 parameters:\n      log(loss) \u2248 p0\n                + p1\u00b7log(tokens)\n                + p2\u00b7log(params)\n                + p3\u00b7log(unique_tokens)\n                + p4\u00b7[log(tokens)\u00b7log(params)]\n                + p5\u00b7[log(tokens)\u00b7log(unique_tokens)]\n                + p6\u00b7[log(params)\u00b7log(unique_tokens)]\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [p0, p1, ..., p6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [p0..p6], got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    p0, p1, p2, p3, p4, p5, p6 = p\n    log_pred = (\n        p0\n        + p1 * t\n        + p2 * m\n        + p3 * u\n        + p4 * (t * m)\n        + p5 * (t * u)\n        + p6 * (m * u)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic scaling law by minimizing\n    mean squared error in log\u2010space with small ridge regularization.\n    Returns optimized parameters [p0..p6].\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # only positive losses\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss values are non\u2010positive; cannot fit log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # log\u2010transform\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(np.maximum(y, eps))\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # design matrix: [1, t, m, u, t*m, t*u, m*u]\n    D = np.stack([np.ones_like(t),\n                  t, m, u,\n                  t * m,\n                  t * u,\n                  m * u], axis=1)  # shape (N,7)\n\n    # initial least\u2010squares solution in log\u2010space\n    p_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    p_init = p_init.ravel()\n\n    # objective: MSE + small ridge on cross\u2010terms\n    ridge = 1e-4\n    def objective(p):\n        resid = D.dot(p) - y_log\n        mse = np.mean(resid**2)\n        # do not penalize bias p0\n        reg = ridge * np.sum(p[1:]**2)\n        return mse + reg\n\n    res = minimize(objective, p_init, method=\"L-BFGS-B\",\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success and res.x.shape == p_init.shape:\n        return res.x\n    else:\n        return p_init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using a shifted power\u2010law scaling:\n      loss = exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    params: array of length 7 or shape (M,7):\n        [log_a, b, c, d, k0, k1, k2]\n      where t0 = exp(k0), p0 = exp(k1), u0 = exp(k2).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    # Ensure p is 2D: (M,7)\n    if p.ndim == 1:\n        p_arr = p[np.newaxis, :]\n    else:\n        p_arr = p.copy()\n    M, P = p_arr.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    tokens = X[:, 0]\n    param_cnt = X[:, 1]\n    uniq = X[:, 2]\n\n    N = X.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Vectorized over M parameter sets\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p_arr[i]\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n\n        # Compute log\u2010prediction\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(param_cnt + p0)\n            - d * np.log(uniq + u0)\n        )\n        # Avoid numerical under/overflow\n        y_log = np.clip(y_log, -50.0, 50.0)\n        preds[:, i] = np.exp(y_log)\n\n    # Return shape (N,) if single param set\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter shifted\u2010power\u2010law scaling law by minimizing\n    mean squared error in log\u2010loss space.\n    Returns an array of 7 optimized parameters:\n        [log_a, b, c, d, k0, k1, k2]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] == 0:\n        raise ValueError(\"No positive loss values to fit.\")\n\n    # Work in log-loss space\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(loss))\n    #   b,c,d = 0.5\n    #   k0,k1,k2 = 0 => t0=p0=u0=1\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: exponents b,c,d >= 0; others unbounded\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n        (None, None),  # k0\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    # Objective: mean squared error in log\u2010space\n    def mse_obj(p):\n        preds = scaling_law_func(X_fit, p)\n        # work in log\n        eps = 1e-12\n        y_pred_log = np.log(np.clip(preds, eps, None))\n        resid = y_pred_log - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        mse_obj,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-8, \"maxiter\": 1000},\n    )\n    if not res.success:\n        # fallback to initial guess\n        return init\n    return res.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6558, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced power\u2010law with an irreducible floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n\n    params: [C0, C1, \u03b1, \u03b2, \u03b3]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n    C0, C1, alpha, beta, gamma = p\n\n    # Clip inputs to avoid zero/negative powers\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    return C0 + C1 * tokens**(-alpha) * mparams**(-beta) * unique**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law by minimizing MSE in original loss domain.\n    Returns optimized [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    y = np.maximum(y, 1e-12)  # avoid zero or negative targets\n\n    # 1) Initial log\u2010linear regression to seed C1 and exponents (no floor)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameters\n    C0_0 = np.min(y) * 0.5\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 1e-3)\n    beta0  = max(-c0, 1e-3)\n    gamma0 = max(-d0, 1e-3)\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u2265 0, scale > 0, exponents \u2265 0\n    bounds = [\n        (0.0, np.min(y)),    # C0\n        (1e-12, None),       # C1\n        (1e-12, None),       # \u03b1\n        (1e-12, None),       # \u03b2\n        (1e-12, None),       # \u03b3\n    ]\n\n    # Objective: mean squared error in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Analytical gradient of MSE w.r.t. parameters\n    def jac(p):\n        C0, C1, alpha, beta, gamma = p\n        tokens = np.maximum(X[:, 0], 1e-12)\n        mparams = np.maximum(X[:, 1], 1e-12)\n        unique = np.maximum(X[:, 2], 1e-12)\n\n        f = tokens**(-alpha) * mparams**(-beta) * unique**(-gamma)\n        pred = C0 + C1 * f\n        resid = pred - y\n        N = X.shape[0]\n\n        ln_t = np.log(tokens)\n        ln_m = np.log(mparams)\n        ln_u = np.log(unique)\n\n        # d/dp of MSE = 2/N * \u03a3 resid * d(pred)/dp\n        dC0    = 2.0 * np.sum(resid) / N\n        dC1    = 2.0 * np.sum(resid * f) / N\n        dalpha = 2.0 * np.sum(resid * (-C1 * f * ln_t)) / N\n        dbeta  = 2.0 * np.sum(resid * (-C1 * f * ln_m)) / N\n        dgamma = 2.0 * np.sum(resid * (-C1 * f * ln_u)) / N\n\n        return np.array([dC0, dC1, dalpha, dbeta, dgamma])\n\n    # Optimize with L-BFGS-B\n    res = minimize(\n        objective,\n        p0,\n        jac=jac,\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12},\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.977), NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.5802, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array\u2010like of length 4 [a, b, c, d]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    # take logs (add small epsilon to avoid log(0))\n    X_log = np.log(X + 1e-12)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # predict in log\u2010space and exponentiate\n    y_log = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(y_log)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing MSE in log\u2010space.\n\n    Returns:\n      params_opt: array of 4 parameters [a, b, c, d]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # restrict to strictly positive losses for log\u2010fit\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot take log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # logs\n    X_log = np.log(X + 1e-12)   # shape (n_samples, 3)\n    y_log = np.log(y + 1e-12)   # shape (n_samples,)\n\n    # design matrix for linear regression in log\u2010space\n    n = X_log.shape[0]\n    D = np.concatenate([np.ones((n, 1)), X_log], axis=1)  # shape (n,4)\n\n    # initial solution via least squares\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # refine via L-BFGS-B to minimize MSE in log\u2010space\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    result = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear solution if optimization fails\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5490, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Full quadratic scaling\u2010law in log\u2010space with up to 7 parameters:\n      log(loss) \u2248 p0\n                + p1\u00b7log(tokens)\n                + p2\u00b7log(params)\n                + p3\u00b7log(unique_tokens)\n                + p4\u00b7[log(tokens)\u00b7log(params)]\n                + p5\u00b7[log(tokens)\u00b7log(unique_tokens)]\n                + p6\u00b7[log(params)\u00b7log(unique_tokens)]\n    => loss = exp(log_pred)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7: [p0, p1, ..., p6]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [p0..p6], got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    p0, p1, p2, p3, p4, p5, p6 = p\n    log_pred = (\n        p0\n        + p1 * t\n        + p2 * m\n        + p3 * u\n        + p4 * (t * m)\n        + p5 * (t * u)\n        + p6 * (m * u)\n    )\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic scaling law by minimizing\n    mean squared error in log\u2010space with small ridge regularization.\n    Returns optimized parameters [p0..p6].\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # only positive losses\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All loss values are non\u2010positive; cannot fit log.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # log\u2010transform\n    eps = 1e-12\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(np.maximum(y, eps))\n\n    t = X_log[:, 0]\n    m = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # design matrix: [1, t, m, u, t*m, t*u, m*u]\n    D = np.stack([np.ones_like(t),\n                  t, m, u,\n                  t * m,\n                  t * u,\n                  m * u], axis=1)  # shape (N,7)\n\n    # initial least\u2010squares solution in log\u2010space\n    p_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    p_init = p_init.ravel()\n\n    # objective: MSE + small ridge on cross\u2010terms\n    ridge = 1e-4\n    def objective(p):\n        resid = D.dot(p) - y_log\n        mse = np.mean(resid**2)\n        # do not penalize bias p0\n        reg = ridge * np.sum(p[1:]**2)\n        return mse + reg\n\n    res = minimize(objective, p_init, method=\"L-BFGS-B\",\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success and res.x.shape == p_init.shape:\n        return res.x\n    else:\n        return p_init\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.6542, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning under data constraints.\nModel: loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\nParameters: [C0, C1, \u03b1, \u03b2, \u03b3]  (5 parameters)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using an additive\u2010floor multiplicative power law:\n      loss = C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3], got {p.size}\")\n\n    # Unpack parameters\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zero\u2010division or negative powers\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    mparams = np.maximum(X[:, 1], eps)\n    unique = np.maximum(X[:, 2], eps)\n\n    # Compute prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                   * np.power(mparams, -beta) \\\n                   * np.power(unique, -gamma)\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing mean squared error in original loss domain.\n\n    Returns:\n      params_opt: array of 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points of shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to positive domain\n    eps = 1e-12\n    y = np.maximum(y, eps)\n\n    # Initial guess via log\u2010linear fit (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique)\n    X_clip = np.maximum(X, eps)\n    logs = np.log(X_clip)\n    y_log = np.log(y)\n    N = logs.shape[0]\n    D = np.concatenate([np.ones((N,1)), logs], axis=1)  # shape (N,4)\n    # Solve least\u2010squares in log\u2010space\n    coef, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a_lin, b_lin, c_lin, d_lin = coef\n\n    # Translate to our parameterization\n    C0_0 = 0.0\n    C1_0 = np.exp(a_lin)\n    alpha0 = max(-b_lin, 0.0)\n    beta0  = max(-c_lin, 0.0)\n    gamma0 = max(-d_lin, 0.0)\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds to ensure stability\n    bounds = [\n        (0.0, None),     # C0 \u2265 0\n        (eps, None),     # C1 > 0\n        (0.0, None),     # \u03b1 \u2265 0\n        (0.0, None),     # \u03b2 \u2265 0\n        (0.0, None),     # \u03b3 \u2265 0\n    ]\n\n    # Objective: MSE in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Optimize with L-BFGS-B\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\": 1e-12, \"gtol\": 1e-12})\n    if res.success:\n        return res.x\n    else:\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.968), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Small constant to avoid log(0) or division by zero\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced power\u2010law with an irreducible floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n\n    Returns:\n      preds: np.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3], got {p.size}\")\n\n    C0, C1, alpha, beta, gamma = p\n\n    # Clip inputs to avoid numerical issues\n    tokens   = np.maximum(X[:, 0], _EPS)\n    mparams  = np.maximum(X[:, 1], _EPS)\n    unique_t = np.maximum(X[:, 2], _EPS)\n\n    # Compute the power\u2010law prediction with floor\n    return C0 + C1 * tokens**(-alpha) * mparams**(-beta) * unique_t**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced power\u2010law scaling law by minimizing MSE in the\n    original loss domain, using an analytic gradient for efficiency.\n\n    Returns:\n      params_opt: array of 5 parameters [C0, C1, \u03b1, \u03b2, \u03b3]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Clip targets to a small positive value\n    y = np.maximum(y, _EPS)\n\n    # INITIAL GUESS via log\u2010linear regression (no floor term)\n    logs   = np.log(np.maximum(X, _EPS))  # shape (N,3)\n    y_log  = np.log(y)                    # shape (N,)\n\n    N = logs.shape[0]\n    # Design matrix for log\u2010linear: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.concatenate([np.ones((N, 1)), logs], axis=1)  # shape (N,4)\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a_lin, b_lin, c_lin, d_lin = beta_lin.ravel()[:4]\n\n    # Translate linear fit to our 5\u2010parameter form\n    C0_0    = np.min(y) * 0.5\n    C1_0    = np.exp(a_lin)\n    alpha0  = max(-b_lin, _EPS)\n    beta0   = max(-c_lin, _EPS)\n    gamma0  = max(-d_lin, _EPS)\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds to ensure numerical stability and physical plausibility\n    bounds = [\n        (0.0, None),   # C0 \u2265 0\n        (_EPS, None),  # C1 > 0\n        (0.0, None),   # \u03b1 \u2265 0\n        (0.0, None),   # \u03b2 \u2265 0\n        (0.0, None),   # \u03b3 \u2265 0\n    ]\n\n    # Objective: mean squared error in original loss domain\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Analytic gradient (Jacobian) of the MSE w.r.t. [C0, C1, \u03b1, \u03b2, \u03b3]\n    def jac(p):\n        C0, C1, alpha, beta, gamma = p\n\n        tokens   = np.maximum(X[:, 0], _EPS)\n        mparams  = np.maximum(X[:, 1], _EPS)\n        unique_t = np.maximum(X[:, 2], _EPS)\n\n        # Core multiplicative term\n        f = tokens**(-alpha) * mparams**(-beta) * unique_t**(-gamma)\n        pred = C0 + C1 * f\n        resid = pred - y\n        invN  = 2.0 / X.shape[0]\n\n        # Logs for derivative of exponents\n        ln_t = np.log(tokens)\n        ln_m = np.log(mparams)\n        ln_u = np.log(unique_t)\n\n        dC0    = invN * np.sum(resid)\n        dC1    = invN * np.sum(resid * f)\n        dalpha = invN * np.sum(resid * (-C1 * f * ln_t))\n        dbeta  = invN * np.sum(resid * (-C1 * f * ln_m))\n        dgamma = invN * np.sum(resid * (-C1 * f * ln_u))\n\n        return np.array([dC0, dC1, dalpha, dbeta, dgamma], dtype=float)\n\n    # Optimize with L-BFGS-B\n    res = minimize(\n        fun=objective,\n        x0=p0,\n        jac=jac,\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000},\n    )\n\n    if res.success and res.x.size == p0.size:\n        return res.x\n    else:\n        # Fallback to initial guess if optimization fails\n        return p0\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Switched to a 5-parameter \u201cfloor-plus-power-law\u201d form (`C0 + C1\u00b7tokens^(\u2212\u03b1)\u00b7params^(\u2212\u03b2)\u00b7unique^(\u2212\u03b3)`), which often generalizes better under data constraints than higher-order interactions.\n- Initialize parameters via a simple log-linear least squares estimate, ensuring a robust starting point.\n- Use an analytic gradient for the L-BFGS-B optimizer to speed convergence and improve numerical stability.\n- Enforce physical bounds (e.g., nonnegative exponents and positive scale factors) to prevent pathological fits.\n- All computations guard against zeros/negatives via a small epsilon, avoiding NaNs or Infs."]}}}