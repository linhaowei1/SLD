{"id": "c546c4cc-3a81-4394-8739-b559d04889e1", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^b * params_count^c * unique_tokens^d\n\n    Parameters:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 (or shape (M,5) for M independent outputs)\n                   [logL_inf, logA, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,5))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    p = np.asarray(params, dtype=float)\n    # normalize to shape (M,5)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 5:\n        raise ValueError(f\"scaling_law_func expects 5 parameters [logL_inf, logA, b, c, d], got {P}\")\n\n    # unpack parameters (each of shape (M,))\n    logL_inf = p2[:, 0][None, :]  # (1, M)\n    logA     = p2[:, 1][None, :]\n    b        = p2[:, 2][None, :]\n    c        = p2[:, 3][None, :]\n    d        = p2[:, 4][None, :]\n\n    # safe\u2010guard inputs to avoid zero/negative in exponents\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0][:, None], eps)  # (N,1)\n    prm = np.maximum(X[:, 1][:, None], eps)\n    u   = np.maximum(X[:, 2][:, None], eps)\n\n    # compute floor and amplitude\n    L_inf = np.exp(logL_inf)  # (1,M)\n    A     = np.exp(logA)      # (1,M)\n\n    # predicted loss: floor + decaying power\u2010law\n    pred = L_inf + A * np.power(tkn, b) * np.power(prm, c) * np.power(u, d)  # (N,M)\n\n    # return shape (N,) if single param\u2010set else (N,M)\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter asymptotic power\u2010law model by minimizing MSE \n    in the original loss space. Returns parameters \n      [logL_inf, logA, b, c, d]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)       # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # keep only strictly positive losses\n    mask = y > 0\n    Xp = X[mask]\n    yp = y[mask]\n    if yp.size == 0:\n        # fallback default parameters if no positive losses\n        return np.array([np.log(1e-8), np.log(1e-8), 0.5, 0.5, 0.5], dtype=float)\n\n    # initialize floor from half the minimum observed loss\n    y_min  = np.min(yp)\n    y_mean = np.mean(yp)\n    L_inf_init    = max(y_min * 0.5, 1e-8)\n    logL_inf_init = np.log(L_inf_init)\n\n    # initialize amplitude from excess above floor\n    A_init    = max(y_mean - L_inf_init, 1e-8)\n    logA_init = np.log(A_init)\n\n    # initial exponents\n    init = np.array([logL_inf_init, logA_init, 0.5, 0.5, 0.5], dtype=float)\n\n    # bounds: exponents >= 0, floor and amplitude unconstrained in log\u2010space\n    bounds = [\n        (None, None),  # logL_inf\n        (None, None),  # logA\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n    ]\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(Xp, p)\n        return np.mean((pred - yp) ** 2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "a1d1ae18-f075-446b-a78d-308c6a2c670f", "generation": 2, "timestamp": 1754715685.8091674, "iteration_found": 41, "metrics": {"nmse": 4.784944303510056, "nmae": 3.332360233056022, "r2": -3.7849443035100556, "combined_score": 0.17286251129388452}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4080, nmae: 0.4858, r2: 0.5920, combined_score: 0.7103\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.2806, nmae: 0.7775, r2: 0.7194, combined_score: 0.7809\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.6396)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced log\u2010quadratic scaling law:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                 + e\u00b7[log(tokens)]^2 + f\u00b7[log(params)]^2 + g\u00b7[log(unique_tokens)]^2\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # Compute logs of features with small offset for stability\n    X_log = np.log(X + 1e-12)\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix of shape (N, 7)\n    # Columns: [1, t, p, u, t^2, p^2, u^2]\n    N = X.shape[0]\n    D = np.column_stack([\n        np.ones(N),\n        t, p, u,\n        t * t,\n        p * p,\n        u * u\n    ])\n\n    # Prepare parameter array\n    P_arr = np.asarray(params, dtype=float)\n    if P_arr.ndim == 1:\n        P_arr = P_arr[np.newaxis, :]\n    M, P = P_arr.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # Compute log\u2010predictions: shape (N, M)\n    # Then exponentiate to get back to loss\u2010space\n    log_pred = D.dot(P_arr.T)   # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010quadratic scaling law by closed\u2010form regularized least squares\n    in log\u2010space. Returns 7 parameters [a, b, c, d, e, f, g] such that\n      log(loss) \u2248 a \n                  + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n                  + e\u00b7[log(tokens)]^2 + f\u00b7[log(params)]^2 + g\u00b7[log(unique_tokens)]^2\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only strictly positive losses for log\u2010space fitting\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # Take logs of inputs and outputs with a small offset\n    X_log = np.log(X + 1e-12)  # (n,3)\n    y_log = np.log(y + 1e-12)  # (n,)\n\n    t = X_log[:, 0]\n    p = X_log[:, 1]\n    u = X_log[:, 2]\n\n    # Build design matrix D of shape (n, 7)\n    D = np.column_stack([\n        np.ones_like(t),\n        t, p, u,\n        t * t,\n        p * p,\n        u * u\n    ])\n\n    # Regularization for numerical stability\n    lambda_reg = 1e-6\n    G = D.T.dot(D) + lambda_reg * np.eye(7)\n    rhs = D.T.dot(y_log)\n\n    # Solve for parameters; fallback to least\u2010squares if singular\n    try:\n        theta = np.linalg.solve(G, rhs)\n    except np.linalg.LinAlgError:\n        theta = np.linalg.lstsq(D, y_log, rcond=None)[0]\n\n    return theta\n```\nKey features: Performs well on nmse (0.2806), Performs well on nmae (0.7775), Performs well on r2 (0.7194), Performs well on combined_score (0.7809)\n\n\n### Program 3 (Score: 0.5490)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with cross\u2010terms:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) \n                 + c\u00b7log(params) \n                 + d\u00b7log(unique_tokens)\n                 + e\u00b7log(tokens)\u00b7log(params)\n                 + f\u00b7log(tokens)\u00b7log(unique_tokens)\n                 + g\u00b7log(params)\u00b7log(unique_tokens)\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    eps = 1e-12\n    X_log = np.log(X + eps)                      # (N,3)\n    p = np.asarray(params, dtype=float)\n\n    # normalize parameter array to shape (M,7)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # unpack parameters for M models\n    a = p2[:, 0][np.newaxis, :]  # shape (1,M)\n    b = p2[:, 1][np.newaxis, :]\n    c = p2[:, 2][np.newaxis, :]\n    d = p2[:, 3][np.newaxis, :]\n    e = p2[:, 4][np.newaxis, :]\n    f = p2[:, 5][np.newaxis, :]\n    g = p2[:, 6][np.newaxis, :]\n\n    # prepare log features\n    logT = X_log[:, 0][:, np.newaxis]  # (N,1)\n    logP = X_log[:, 1][:, np.newaxis]\n    logU = X_log[:, 2][:, np.newaxis]\n\n    # compute log\u2010prediction for each model\n    log_pred = (\n        a\n        + b * logT\n        + c * logP\n        + d * logU\n        + e * (logT * logP)\n        + f * (logT * logU)\n        + g * (logP * logU)\n    )  # shape (N,M)\n\n    pred = np.exp(log_pred)  # shape (N,M)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing a Huber\u2010robustified\n    loss in log\u2010space across 7 parameters:\n      [a, b, c, d, e, f, g]\n    such that log(loss) \u2248 design_matrix \u00b7 params.\n\n    Returns:\n      params_opt: array of length 7\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n    if X.shape[0] == 0:\n        # fallback: zero parameters\n        return np.zeros(7, dtype=float)\n\n    # compute logs\n    eps = 1e-12\n    X_log = np.log(X + eps)  # (N,3)\n    y_log = np.log(y + eps)  # (N,)\n\n    # build design matrix with cross\u2010terms: [1, logT, logP, logU, logT\u00b7logP, logT\u00b7logU, logP\u00b7logU]\n    logT = X_log[:, 0]\n    logP = X_log[:, 1]\n    logU = X_log[:, 2]\n    D = np.stack([\n        np.ones_like(logT),\n        logT,\n        logP,\n        logU,\n        logT * logP,\n        logT * logU,\n        logP * logU\n    ], axis=1)  # (N,7)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (7,)\n\n    # Huber loss function\n    def huber(r, delta=1.0):\n        abs_r = np.abs(r)\n        mask_small = abs_r <= delta\n        loss_small = 0.5 * r[mask_small]**2\n        loss_big   = delta * (abs_r[~mask_small] - 0.5 * delta)\n        # combine\n        out = np.empty_like(r)\n        out[mask_small] = loss_small\n        out[~mask_small] = loss_big\n        return out\n\n    # objective: mean Huber loss of residuals in log\u2010domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(huber(resid))\n\n    # optimize with L-BFGS-B (unbounded)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4080), Performs well on nmae (0.4858), Performs well on r2 (0.5920), Performs well on combined_score (0.7103)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5452)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6621)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^(\u2010alpha)\n             + B * params_count^(\u2010beta)\n             + C * unique_tokens^(\u2010gamma)\n\n    params: [L_inf, A, alpha, B, beta, C, gamma] (7 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N, 3)\n    if len(params) != 7:\n        raise ValueError(f\"Expected 7 parameters [L_inf, A, alpha, B, beta, C, gamma], got {len(params)}\")\n    L_inf, A, alpha, B, beta, C, gamma = params\n\n    tokens        = X[:, 0]\n    params_count  = X[:, 1]\n    unique_toks   = X[:, 2]\n\n    # Compute the predicted loss as the sum of three decaying power\u2010laws plus an asymptotic floor\n    pred = (\n        L_inf\n        + A * np.power(tokens,       -alpha)\n        + B * np.power(params_count, -beta)\n        + C * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter asymptotic power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, A, alpha, B, beta, C, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # (N,)\n\n    # Initialize parameters based on observed range of y\n    y_min, y_max = np.min(y), np.max(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n    span = y_max - y_min\n    A_init = span / 3.0\n    B_init = span / 3.0\n    C_init = span / 3.0\n    alpha_init = beta_init = gamma_init = 0.5\n\n    init_params = np.array([\n        L_inf_init,\n        A_init,   alpha_init,\n        B_init,   beta_init,\n        C_init,   gamma_init,\n    ], dtype=float)\n\n    # Bounds: ensure non\u2010negativity of floor, amplitudes, and exponents\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # A\n        (0.0, None),  # alpha\n        (0.0, None),  # B\n        (0.0, None),  # beta\n        (0.0, None),  # C\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 1.1263, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using\n    a sum of three decaying power\u2010law contributions plus a floor.\n    We have 7 raw parameters: r0..r6, which are exponentiated to ensure positivity.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p[i]\n        # enforce positive floor, amplitudes, decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # compute decaying power\u2010law terms\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one parameter vector, return 1D array\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] by minimizing squared error\n    using Levenberg\u2010Marquardt. Initialization uses empirical floor and\n    equal amplitude split above floor.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # We'll fit one target vector at a time\n    def _fit_one(yt):\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # init raw floor from observed minimum\n        r0 = np.log(min_y + 1e-8)\n        # total excess above floor\n        resid = max(mean_y - min_y, 1e-8)\n        amp0 = resid / 3.0\n        # init amplitudes\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # init decays to 1\n        r2 = r4 = r6 = np.log(1.0)\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return (scaling_law_func(X, raw) - yt).ravel()\n\n        sol = least_squares(\n            resid_fn,\n            init,\n            method='lm',\n            xtol=1e-8,\n            ftol=1e-8,\n            gtol=1e-8,\n            max_nfev=2000\n        )\n        return sol.x if sol.success else init\n\n    # fit single-output or multivariate\n    if y.ndim == 1:\n        return _fit_one(y)\n    else:\n        # for completeness if multi\u2010column\n        fitted = [ _fit_one(col) for col in y.T ]\n        return np.vstack(fitted)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n### Inspiration 2 (Score: 0.5490, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Extended log\u2010linear scaling law with cross\u2010terms:\n      log(loss) \u2248 a \n                 + b\u00b7log(tokens) \n                 + c\u00b7log(params) \n                 + d\u00b7log(unique_tokens)\n                 + e\u00b7log(tokens)\u00b7log(params)\n                 + f\u00b7log(tokens)\u00b7log(unique_tokens)\n                 + g\u00b7log(params)\u00b7log(unique_tokens)\n    => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    eps = 1e-12\n    X_log = np.log(X + eps)                      # (N,3)\n    p = np.asarray(params, dtype=float)\n\n    # normalize parameter array to shape (M,7)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # unpack parameters for M models\n    a = p2[:, 0][np.newaxis, :]  # shape (1,M)\n    b = p2[:, 1][np.newaxis, :]\n    c = p2[:, 2][np.newaxis, :]\n    d = p2[:, 3][np.newaxis, :]\n    e = p2[:, 4][np.newaxis, :]\n    f = p2[:, 5][np.newaxis, :]\n    g = p2[:, 6][np.newaxis, :]\n\n    # prepare log features\n    logT = X_log[:, 0][:, np.newaxis]  # (N,1)\n    logP = X_log[:, 1][:, np.newaxis]\n    logU = X_log[:, 2][:, np.newaxis]\n\n    # compute log\u2010prediction for each model\n    log_pred = (\n        a\n        + b * logT\n        + c * logP\n        + d * logU\n        + e * (logT * logP)\n        + f * (logT * logU)\n        + g * (logP * logU)\n    )  # shape (N,M)\n\n    pred = np.exp(log_pred)  # shape (N,M)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the extended log\u2010linear scaling law by minimizing a Huber\u2010robustified\n    loss in log\u2010space across 7 parameters:\n      [a, b, c, d, e, f, g]\n    such that log(loss) \u2248 design_matrix \u00b7 params.\n\n    Returns:\n      params_opt: array of length 7\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n    if X.shape[0] == 0:\n        # fallback: zero parameters\n        return np.zeros(7, dtype=float)\n\n    # compute logs\n    eps = 1e-12\n    X_log = np.log(X + eps)  # (N,3)\n    y_log = np.log(y + eps)  # (N,)\n\n    # build design matrix with cross\u2010terms: [1, logT, logP, logU, logT\u00b7logP, logT\u00b7logU, logP\u00b7logU]\n    logT = X_log[:, 0]\n    logP = X_log[:, 1]\n    logU = X_log[:, 2]\n    D = np.stack([\n        np.ones_like(logT),\n        logT,\n        logP,\n        logU,\n        logT * logP,\n        logT * logU,\n        logP * logU\n    ], axis=1)  # (N,7)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (7,)\n\n    # Huber loss function\n    def huber(r, delta=1.0):\n        abs_r = np.abs(r)\n        mask_small = abs_r <= delta\n        loss_small = 0.5 * r[mask_small]**2\n        loss_big   = delta * (abs_r[~mask_small] - 0.5 * delta)\n        # combine\n        out = np.empty_like(r)\n        out[mask_small] = loss_small\n        out[~mask_small] = loss_big\n        return out\n\n    # objective: mean Huber loss of residuals in log\u2010domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(huber(resid))\n\n    # optimize with L-BFGS-B (unbounded)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.5452, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.6621, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^(\u2010alpha)\n             + B * params_count^(\u2010beta)\n             + C * unique_tokens^(\u2010gamma)\n\n    params: [L_inf, A, alpha, B, beta, C, gamma] (7 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N, 3)\n    if len(params) != 7:\n        raise ValueError(f\"Expected 7 parameters [L_inf, A, alpha, B, beta, C, gamma], got {len(params)}\")\n    L_inf, A, alpha, B, beta, C, gamma = params\n\n    tokens        = X[:, 0]\n    params_count  = X[:, 1]\n    unique_toks   = X[:, 2]\n\n    # Compute the predicted loss as the sum of three decaying power\u2010laws plus an asymptotic floor\n    pred = (\n        L_inf\n        + A * np.power(tokens,       -alpha)\n        + B * np.power(params_count, -beta)\n        + C * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter asymptotic power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, A, alpha, B, beta, C, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # (N,)\n\n    # Initialize parameters based on observed range of y\n    y_min, y_max = np.min(y), np.max(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n    span = y_max - y_min\n    A_init = span / 3.0\n    B_init = span / 3.0\n    C_init = span / 3.0\n    alpha_init = beta_init = gamma_init = 0.5\n\n    init_params = np.array([\n        L_inf_init,\n        A_init,   alpha_init,\n        B_init,   beta_init,\n        C_init,   gamma_init,\n    ], dtype=float)\n\n    # Bounds: ensure non\u2010negativity of floor, amplitudes, and exponents\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # A\n        (0.0, None),  # alpha\n        (0.0, None),  # B\n        (0.0, None),  # beta\n        (0.0, None),  # C\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.967), NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.6483, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Small epsilon to avoid log(0)\n_EPS = 1e-12\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a \n                 + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                 + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns \n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 7 [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {p.size}\")\n\n    # compute logs once\n    Z = np.log(X + _EPS)         # (N,3)\n    z1 = Z[:, 0]\n    z2 = Z[:, 1]\n    z3 = Z[:, 2]\n\n    # unpack parameters\n    a, b, c, d, e, f, g = p\n\n    # compute log-predictions\n    log_pred = (\n        a\n        + b * z1 + c * z2 + d * z3\n        + e * (z1 * z2)\n        + f * (z1 * z3)\n        + g * (z2 * z3)\n    )\n    # back to original scale\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2013quadratic scaling law by ridge\u2010regularized\n    least squares in log\u2010space, followed by a quick L-BFGS-B refinement.\n\n    Returns:\n      params_opt: array of 7 parameters [a, b, c, d, e, f, g]\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y_raw = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only strictly positive losses for log\u2010space\n    mask = y_raw > 0\n    if not np.any(mask):\n        raise ValueError(\"All provided loss values are non\u2010positive; cannot fit log\u2010scale model.\")\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # compute log features\n    Z = np.log(X + _EPS)       # (N,3)\n    z1 = Z[:, 0:1]             # (N,1)\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # build design matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)               # (N,7)\n\n    # closed\u2010form ridge regression: solve (F^T F + \u03bbI) p = F^T log(y)\n    FtF = F.T.dot(F)         # (7,7)\n    # set ridge \u03bb proportional to average feature scale\n    lambda_reg = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + lambda_reg * np.eye(FtF.shape[0])\n    b_vec = F.T.dot(np.log(y + _EPS))\n\n    # initial solution\n    beta_init = np.linalg.solve(A, b_vec)\n\n    # refine via L-BFGS-B minimizing MSE in log\u2010space\n    def obj(p):\n        resid = F.dot(p) - np.log(y + _EPS)\n        return np.mean(resid * resid)\n\n    res = minimize(obj, beta_init, method=\"L-BFGS-B\")\n    if res.success:\n        return res.x\n    else:\n        return beta_init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.963), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^b * params_count^c * unique_tokens^d\n\n    Parameters:\n      data_points: array\u2010like of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 5 (or shape (M,5) for M independent outputs)\n                   [logL_inf, logA, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,5))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    p = np.asarray(params, dtype=float)\n    # normalize to shape (M,5)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 5:\n        raise ValueError(f\"scaling_law_func expects 5 parameters [logL_inf, logA, b, c, d], got {P}\")\n\n    # unpack parameters (each of shape (M,))\n    logL_inf = p2[:, 0][None, :]  # (1, M)\n    logA     = p2[:, 1][None, :]\n    b        = p2[:, 2][None, :]\n    c        = p2[:, 3][None, :]\n    d        = p2[:, 4][None, :]\n\n    # safe\u2010guard inputs to avoid zero/negative in exponents\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0][:, None], eps)  # (N,1)\n    prm = np.maximum(X[:, 1][:, None], eps)\n    u   = np.maximum(X[:, 2][:, None], eps)\n\n    # compute floor and amplitude\n    L_inf = np.exp(logL_inf)  # (1,M)\n    A     = np.exp(logA)      # (1,M)\n\n    # predicted loss: floor + decaying power\u2010law\n    pred = L_inf + A * np.power(tkn, b) * np.power(prm, c) * np.power(u, d)  # (N,M)\n\n    # return shape (N,) if single param\u2010set else (N,M)\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter asymptotic power\u2010law model by minimizing MSE \n    in the original loss space. Returns parameters \n      [logL_inf, logA, b, c, d]\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)       # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()  # (N,)\n\n    # keep only strictly positive losses\n    mask = y > 0\n    Xp = X[mask]\n    yp = y[mask]\n    if yp.size == 0:\n        # fallback default parameters if no positive losses\n        return np.array([np.log(1e-8), np.log(1e-8), 0.5, 0.5, 0.5], dtype=float)\n\n    # initialize floor from half the minimum observed loss\n    y_min  = np.min(yp)\n    y_mean = np.mean(yp)\n    L_inf_init    = max(y_min * 0.5, 1e-8)\n    logL_inf_init = np.log(L_inf_init)\n\n    # initialize amplitude from excess above floor\n    A_init    = max(y_mean - L_inf_init, 1e-8)\n    logA_init = np.log(A_init)\n\n    # initial exponents\n    init = np.array([logL_inf_init, logA_init, 0.5, 0.5, 0.5], dtype=float)\n\n    # bounds: exponents >= 0, floor and amplitude unconstrained in log\u2010space\n    bounds = [\n        (None, None),  # logL_inf\n        (None, None),  # logA\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n    ]\n\n    # objective: mean squared error in original loss space\n    def objective(p):\n        pred = scaling_law_func(Xp, p)\n        return np.mean((pred - yp) ** 2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Introduced an **additive floor** (L_inf) so predicted loss can plateau at large scales.\n- Factored out a **single amplitude** (A) and **three exponents** (b, c, d) for tokens, params, and unique tokens.\n- Parametrized `L_inf` and `A` in log\u2010space for **numerical stability** and to enforce positivity.\n- Kept the total number of parameters to **5**, well under the 7-parameter limit.\n- Used **vectorized** NumPy operations throughout for efficiency.\n- Added **bounds** on the exponents to ensure they remain nonnegative.\n- Employed **L-BFGS-B** to minimize the mean squared error in the original loss domain, which directly targets nmse.\n- Ensured a **robust fallback** if no positive losses are available."]}}}