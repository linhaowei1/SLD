{"id": "9f059e06-8f0f-4d35-b51d-1c3be67a734c", "code": "import numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Vectorized log\u2013quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # Compute logs of each feature\n    Z = np.log(X + _EPS)                      # (N,3)\n    z1, z2, z3 = Z[:, 0:1], Z[:, 1:2], Z[:, 2:3]\n\n    # Design matrix: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)                                # (N,7)\n\n    p = np.asarray(params, dtype=float)\n    # Ensure parameters are (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[1]}\")\n\n    # log\u2010predictions and back to original space\n    log_pred = F.dot(p.T)                     # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013quadratic scaling law by closed\u2010form\n    ridge regression in log\u2010space. Solves:\n      minimize ||F\u00b7\u03b8 \u2212 log(y)||\u00b2 + \u03b1||\u03b8||\u00b2\n    where F = [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n\n    Returns:\n      params_opt: array of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # Compute log\u2010features\n    Z = np.log(X + _EPS)\n    z1, z2, z3 = Z[:, 0:1], Z[:, 1:2], Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)                                # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) \u03b8 = F^T log(y)\n    FtF = F.T.dot(F)                          # (7,7)\n    # Regularization proportional to average variance\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(y + _EPS))\n\n    params_opt = np.linalg.solve(A, b)        # (7,)\n    return params_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "45312176-540e-4f37-9feb-c6ac0bb50bd8", "generation": 2, "timestamp": 1754715053.7839055, "iteration_found": 25, "metrics": {"nmse": 0.2744855632126524, "nmae": 0.7212048295753529, "r2": 0.7255144367873476, "combined_score": 0.7846303079960009}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.5779324208027266, "nmae": 0.5471440168088242, "r2": 0.42206757919727345, "combined_score": 0.6337407019568554}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.5779\n- nmae: 0.5471\n- r2: 0.4221\n- combined_score: 0.6337\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.5779, nmae: 0.5471, r2: 0.4221, combined_score: 0.6337\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4813, nmae: 0.9032, r2: 0.5187, combined_score: 0.6751\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2745, nmae: 0.7212, r2: 0.7255, combined_score: 0.7846\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6265)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2745), Performs well on nmae (0.7212), Performs well on r2 (0.7255), Performs well on combined_score (0.7846)\n\n\n### Program 2 (Score: 0.6446)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible 7-parameter scaling law with saturation:\n      loss = L_inf + K * [ (tokens^b * params^c) / (unique_tokens^d + M) ]^(\u2013alpha)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-7 sequence [L_inf, K, alpha, b, c, d, M]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    x1 = X[:, 0]  # tokens\n    x2 = X[:, 1]  # model params\n    x3 = X[:, 2]  # unique tokens\n\n    L_inf, K, alpha, b, c, d, M = params\n\n    # compute the scaled signal: tokens^b * params^c\n    # use logs for stability, then exponentiate\n    log_scaled_num = b * np.log(x1 + 1e-12) + c * np.log(x2 + 1e-12)\n    scaled_num = np.exp(log_scaled_num)\n\n    # denominator: unique_tokens^d + M\n    denom = np.power(x3 + 1e-12, d) + M\n    denom = np.where(denom <= 0, M + 1e-12, denom)\n\n    # full scaling quantity\n    scaled = scaled_num / denom\n\n    # final loss prediction\n    preds = L_inf + K * np.power(scaled + 1e-12, -alpha)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized params: [L_inf, K, alpha, b, c, d, M]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # initialize parameters based on data heuristics\n    L_inf0 = np.min(y) * 0.5\n    K0      = (np.max(y) - np.min(y)) + 1e-6\n    alpha0  = 0.5\n    b0, c0, d0 = 0.3, 0.3, 0.3\n    M0      = np.mean(X[:, 2]) * 0.1 + 1e-6\n\n    init = np.array([L_inf0, K0, alpha0, b0, c0, d0, M0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0, None),        # L_inf \u2265 0\n        (1e-12, None),    # K > 0\n        (1e-12, None),    # alpha > 0\n        (None, None),     # b free\n        (None, None),     # c free\n        (None, None),     # d free\n        (1e-12, None)     # M > 0\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        preds = np.maximum(preds, 1e-12)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n    params_opt = result.x if result.success else init\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4813), Performs well on nmae (0.9032), Performs well on r2 (0.5187), Performs well on combined_score (0.6751)\n\n\n### Program 3 (Score: 0.5452)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nKey features: Performs well on nmse (0.5779), Performs well on nmae (0.5471), Performs well on r2 (0.4221), Performs well on combined_score (0.6337)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6265, Type: Alternative)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6446, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible 7-parameter scaling law with saturation:\n      loss = L_inf + K * [ (tokens^b * params^c) / (unique_tokens^d + M) ]^(\u2013alpha)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-7 sequence [L_inf, K, alpha, b, c, d, M]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    x1 = X[:, 0]  # tokens\n    x2 = X[:, 1]  # model params\n    x3 = X[:, 2]  # unique tokens\n\n    L_inf, K, alpha, b, c, d, M = params\n\n    # compute the scaled signal: tokens^b * params^c\n    # use logs for stability, then exponentiate\n    log_scaled_num = b * np.log(x1 + 1e-12) + c * np.log(x2 + 1e-12)\n    scaled_num = np.exp(log_scaled_num)\n\n    # denominator: unique_tokens^d + M\n    denom = np.power(x3 + 1e-12, d) + M\n    denom = np.where(denom <= 0, M + 1e-12, denom)\n\n    # full scaling quantity\n    scaled = scaled_num / denom\n\n    # final loss prediction\n    preds = L_inf + K * np.power(scaled + 1e-12, -alpha)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized params: [L_inf, K, alpha, b, c, d, M]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # initialize parameters based on data heuristics\n    L_inf0 = np.min(y) * 0.5\n    K0      = (np.max(y) - np.min(y)) + 1e-6\n    alpha0  = 0.5\n    b0, c0, d0 = 0.3, 0.3, 0.3\n    M0      = np.mean(X[:, 2]) * 0.1 + 1e-6\n\n    init = np.array([L_inf0, K0, alpha0, b0, c0, d0, M0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0, None),        # L_inf \u2265 0\n        (1e-12, None),    # K > 0\n        (1e-12, None),    # alpha > 0\n        (None, None),     # b free\n        (None, None),     # c free\n        (None, None),     # d free\n        (1e-12, None)     # M > 0\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        preds = np.maximum(preds, 1e-12)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n    params_opt = result.x if result.success else init\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.903), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Vectorized log\u2013quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # Compute logs of each feature\n    Z = np.log(X + _EPS)                      # (N,3)\n    z1, z2, z3 = Z[:, 0:1], Z[:, 1:2], Z[:, 2:3]\n\n    # Design matrix: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)                                # (N,7)\n\n    p = np.asarray(params, dtype=float)\n    # Ensure parameters are (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[1]}\")\n\n    # log\u2010predictions and back to original space\n    log_pred = F.dot(p.T)                     # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013quadratic scaling law by closed\u2010form\n    ridge regression in log\u2010space. Solves:\n      minimize ||F\u00b7\u03b8 \u2212 log(y)||\u00b2 + \u03b1||\u03b8||\u00b2\n    where F = [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n\n    Returns:\n      params_opt: array of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # Compute log\u2010features\n    Z = np.log(X + _EPS)\n    z1, z2, z3 = Z[:, 0:1], Z[:, 1:2], Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)                                # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) \u03b8 = F^T log(y)\n    FtF = F.T.dot(F)                          # (7,7)\n    # Regularization proportional to average variance\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(y + _EPS))\n\n    params_opt = np.linalg.solve(A, b)        # (7,)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Switched to a log\u2013quadratic form with explicit pairwise interaction terms for better expressiveness.\n- Entirely vectorized computations in `scaling_law_func` (no Python loops).\n- Closed-form ridge\u2010regularized least squares in `fit_scaling_law` ensures numerical stability and eliminates iterative solver overhead.\n- Consistent use of a small epsilon (`_EPS`) for log/exp safety.\n- Clearer variable naming and concise comments for readability.\n"]}}}