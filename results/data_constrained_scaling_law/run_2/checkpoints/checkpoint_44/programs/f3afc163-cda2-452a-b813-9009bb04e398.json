{"id": "f3afc163-cda2-452a-b813-9009bb04e398", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Saturating\u2010floor power\u2010law scaling:\n      loss = floor + A * tokens^b * params^c / ( unique_tokens^d + m )\n\n    where:\n      A = exp(a),\n      floor = exp(log_floor),\n      b, c can be positive/negative,\n      d \u2265 0,\n      m \u2265 0.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20106 array [a, b, c, d, m, log_floor]\n                   or shape (M,6) for M independent fits\n    Returns:\n      preds: shape (N,) if params is (6,), else (N,M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # ensure 2D params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 6:\n        raise ValueError(\"params must have length 6 or shape (M,6)\")\n    # unpack parameters\n    a       = p[:, 0]   # log A\n    b       = p[:, 1]\n    c       = p[:, 2]\n    d       = p[:, 3]\n    m       = p[:, 4]\n    log_flr = p[:, 5]\n\n    # features with safeguards\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)[:, None]  # shape (N,1)\n    prm = np.maximum(X[:, 1], eps)[:, None]\n    ut  = np.maximum(X[:, 2], eps)[:, None]\n\n    # compute powers and denom\n    A     = np.exp(a)[None, :]            # (1,M)\n    floor = np.exp(log_flr)[None, :]      # (1,M)\n    denom = (ut ** d[None, :]) + m[None, :]\n    # avoid zero denom\n    denom = np.where(denom <= eps, eps, denom)\n\n    # core term\n    core = A * (tkn ** b[None, :]) * (prm ** c[None, :]) / denom\n    preds = floor + core  # shape (N,M)\n\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model [a, b, c, d, m, log_floor] by minimizing\n    squared error in log\u2010space:\n      resid_i = log(pred_i + eps) - log(y_i + eps)\n    \"\"\"\n    X_full = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X_full.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y_full = np.asarray(loss_values, dtype=float).reshape(-1)\n    eps = 1e-12\n\n    # mask positive targets for initialization\n    mask = y_full > eps\n    if not np.any(mask):\n        # fallback to zeros\n        return np.zeros(6, dtype=float)\n    Xp = X_full[mask]\n    yp = y_full[mask]\n\n    # prepare logs\n    logs = np.log(np.maximum(Xp, eps))\n    logy = np.log(yp)\n\n    # linear regression init: logy \u2248 a_lin + b_lin\u00b7log(tokens) + c_lin\u00b7log(params) + d_lin\u00b7log(unique)\n    D = np.concatenate([np.ones((logs.shape[0], 1)), logs], axis=1)  # (N_reg,4)\n    beta_lin, *_ = np.linalg.lstsq(D, logy, rcond=None)\n    a0_lin, b0_lin, c0_lin, d0_lin = beta_lin\n\n    # translate into our parameters:\n    #   a0 = a0_lin,\n    #   b0 = b0_lin,\n    #   c0 = c0_lin,\n    #   d0 = max(-d0_lin, 0),\n    #   m0 = small fraction of avg(unique^d0),\n    #   floor ~ 10% of minimum loss\n    a0 = a0_lin\n    b0 = b0_lin\n    c0 = c0_lin\n    d0 = max(-d0_lin, 0.0)\n    # compute initial m0\n    uniq_p = np.maximum(Xp[:, 2], eps)\n    m0 = (np.mean(uniq_p**d0) if d0 > 0 else 1.0) * 0.1 + eps\n    floor0 = max(np.min(yp) * 0.1, eps)\n    log_floor0 = np.log(floor0)\n\n    p0 = np.array([a0, b0, c0, d0, m0, log_floor0], dtype=float)\n\n    # bounds: A=exp(a) free; b,c in [-10,10]; d in [0,10]; m in [0,inf]; floor in [0,min(y)]\n    lb = [-np.inf,  -10.0, -10.0,   0.0,    0.0,           -np.inf]\n    ub = [ np.inf,   10.0,  10.0,  10.0,    np.inf,  np.log(np.min(yp) + eps)]\n    \n    # residuals in log\u2010space\n    def _resid(p):\n        pred = scaling_law_func(X_full, p)\n        # safe log\n        return np.log(np.maximum(pred, eps)) - np.log(np.maximum(y_full, eps))\n\n    sol = least_squares(\n        _resid,\n        p0,\n        bounds=(lb, ub),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return sol.x if sol.success else p0\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2457907d-5d2e-4542-bf56-8e0971b184ce", "generation": 4, "timestamp": 1754715187.2468822, "iteration_found": 37, "metrics": {"nmse": 0.32692225946849696, "nmae": 0.7276153359856735, "r2": 0.673077740531503, "combined_score": 0.7536236526777034}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.31364428287697427, "nmae": 0.6990266285348704, "r2": 0.6863557171230257, "combined_score": 0.761241085607992}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3136\n- nmae: 0.6990\n- r2: 0.6864\n- combined_score: 0.7612\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3136, nmae: 0.6990, r2: 0.6864, combined_score: 0.7612\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3105, nmae: 0.6989, r2: 0.6895, combined_score: 0.7631\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.6155)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Simplified 6-parameter scaling law:\n      loss = L_inf + K * tokens^(-b) * params^(-c) / (unique_tokens^d + M)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-6 sequence [L_inf, K, b, c, d, M]\n                   (you may also pass length-7, the last element is ignored)\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.size not in (6, 7):\n        raise ValueError(\"params must have length 6 or 7\")\n    # unpack first six params\n    L_inf, K, b, c, d, M = p[:6]\n\n    # numerical safeguards\n    eps = 1e-12\n    tkn_safe  = tkn  + eps\n    mdl_safe  = mdl  + eps\n    uniq_safe = uniq + eps\n\n    # compute scaling\n    num   = (tkn_safe**(-b)) * (mdl_safe**(-c))\n    denom = (uniq_safe**d) + M\n    denom = np.where(denom <= eps, eps, denom)\n\n    preds = L_inf + K * num / denom\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 6-parameter scaling law by minimizing\n    mean squared error in log-space. Returns optimized params:\n      [L_inf, K, b, c, d, M]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter out non-positive losses (can't log-transform)\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n    if y.size == 0:\n        # fallback: zeros\n        return np.zeros(6, dtype=float)\n\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n    N = y.size\n\n    # small constant for stability\n    eps = 1e-12\n\n    # initialize L_inf as slightly below smallest observed loss\n    L_inf0 = max(0.0, np.min(y) * 0.9)\n\n    # shift y to be strictly positive\n    y_shift = y - L_inf0 + eps\n\n    # build linear system in log-space ignoring M:\n    #   log(y_shift) \u2248 log K - b*log(tkn) - c*log(mdl) - d*log(uniq)\n    A = np.vstack([\n        -np.log(tkn + eps),\n        -np.log(mdl + eps),\n        -np.log(uniq + eps),\n        np.ones(N)\n    ]).T\n    bvec, cvec, dvec, logK = np.linalg.lstsq(A, np.log(y_shift), rcond=None)[0]\n    b0, c0, d0 = bvec, cvec, dvec\n    K0 = np.exp(logK)\n\n    # small initial M so denom \u2248 uniq^d when uniq is large\n    M0 = (np.mean(uniq) + eps)**d0 * 0.01\n\n    # initial parameter vector\n    init = np.array([L_inf0, K0, b0, c0, d0, M0], dtype=float)\n\n    # bounds: L_inf \u2265 0, K>0, M\u22650, exponents free\n    bounds = [\n        (0.0, None),      # L_inf\n        (1e-12, None),    # K\n        (None, None),     # b\n        (None, None),     # c\n        (None, None),     # d\n        (0.0, None)       # M\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        # avoid non-positive\n        preds = np.maximum(preds, eps)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3105), Performs well on nmae (0.6989), Performs well on r2 (0.6895), Performs well on combined_score (0.7631)\n\n\n### Program 3 (Score: 0.6151)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    single power\u2010law term with an additive floor:\n      loss = floor + A * tokens^b * params^c * unique_tokens^d\n\n    params is a length\u20105 vector [a, b, c, d, log_floor], where\n      A = exp(a)\n      floor = exp(log_floor)\n    or a (T,5) array for T independent fits.\n\n    Inputs:\n      data_points: array of shape (N,3)\n      params:      array of shape (5,) or (T,5)\n    Returns:\n      preds: shape (N,) if params is (5,), else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # ensure params is 2D: (T,5)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(\"params must have length 5 or shape (T,5)\")\n\n    # unpack features safely\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    N, T = X.shape[0], p.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # compute for each parameter vector\n    for i in range(T):\n        a, b, c, d, log_floor = p[i]\n        A     = np.exp(a)\n        floor = np.exp(log_floor)\n        # power\u2010law core\n        core = A * (tkn ** b) * (prm ** c) * (ut ** d)\n        preds[:, i] = floor + core\n\n    # return (N,) when only one fit\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a 5-parameter model [a, b, c, d, log_floor] by minimizing\n    relative residuals with least_squares.\n\n    Steps:\n      1. Take logs of positive portion of data to get\n         a linear initialization for [a, b, c, d].\n      2. Initialize floor = ~0.5 * min(loss).\n      3. Optimize all five parameters via weighted residuals:\n         (pred - y) / max(y, eps).\n    \"\"\"\n    X_full = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X_full.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y_full = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter strictly positive for initial log\u2010regression\n    eps = 1e-12\n    mask = y_full > eps\n    Xp = X_full[mask]\n    yp = y_full[mask]\n\n    # log\u2010linear regression for initial a,b,c,d\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique)\n    X_log = np.log(Xp + eps)\n    y_log = np.log(yp)\n    Np = X_log.shape[0]\n    D = np.concatenate([np.ones((Np, 1)), X_log], axis=1)  # (Np,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_init\n\n    # init additive floor ~ half the minimum observed loss\n    floor0 = max(np.min(yp) * 0.5, eps)\n    log_floor0 = np.log(floor0)\n\n    # stack into initial parameter vector\n    p0 = np.array([a0, b0, c0, d0, log_floor0], dtype=float)\n\n    # define residuals: relative error on full data\n    def resid(p):\n        # unpack\n        a, b, c, d, log_floor = p\n        floor = np.exp(log_floor)\n        # features\n        tkn = np.maximum(X_full[:, 0], eps)\n        prm = np.maximum(X_full[:, 1], eps)\n        ut  = np.maximum(X_full[:, 2], eps)\n        # model prediction\n        core = np.exp(a) * (tkn ** b) * (prm ** c) * (ut ** d)\n        pred = floor + core\n        # relative residual\n        denom = np.maximum(y_full, eps)\n        return (pred - y_full) / denom\n\n    # optional bounds for exponents for stability\n    lower = [-np.inf, -10.0, -10.0, -10.0, -np.inf]\n    upper = [ np.inf,  10.0,  10.0,  10.0,  np.inf]\n\n    sol = least_squares(\n        resid,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    return sol.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3136), Performs well on nmae (0.6990), Performs well on r2 (0.6864), Performs well on combined_score (0.7612)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6542)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5452)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6542, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.968), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    single power\u2010law term with an additive floor:\n      loss = floor + A * tokens^b * params^c * unique_tokens^d\n\n    params is a length\u20105 vector [a, b, c, d, log_floor], where\n      A = exp(a)\n      floor = exp(log_floor)\n    or a (T,5) array for T independent fits.\n\n    Inputs:\n      data_points: array of shape (N,3)\n      params:      array of shape (5,) or (T,5)\n    Returns:\n      preds: shape (N,) if params is (5,), else (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # ensure params is 2D: (T,5)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 5:\n        raise ValueError(\"params must have length 5 or shape (T,5)\")\n\n    # unpack features safely\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    N, T = X.shape[0], p.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # compute for each parameter vector\n    for i in range(T):\n        a, b, c, d, log_floor = p[i]\n        A     = np.exp(a)\n        floor = np.exp(log_floor)\n        # power\u2010law core\n        core = A * (tkn ** b) * (prm ** c) * (ut ** d)\n        preds[:, i] = floor + core\n\n    # return (N,) when only one fit\n    return preds[:, 0] if T == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a 5-parameter model [a, b, c, d, log_floor] by minimizing\n    relative residuals with least_squares.\n\n    Steps:\n      1. Take logs of positive portion of data to get\n         a linear initialization for [a, b, c, d].\n      2. Initialize floor = ~0.5 * min(loss).\n      3. Optimize all five parameters via weighted residuals:\n         (pred - y) / max(y, eps).\n    \"\"\"\n    X_full = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X_full.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y_full = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter strictly positive for initial log\u2010regression\n    eps = 1e-12\n    mask = y_full > eps\n    Xp = X_full[mask]\n    yp = y_full[mask]\n\n    # log\u2010linear regression for initial a,b,c,d\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique)\n    X_log = np.log(Xp + eps)\n    y_log = np.log(yp)\n    Np = X_log.shape[0]\n    D = np.concatenate([np.ones((Np, 1)), X_log], axis=1)  # (Np,4)\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_init\n\n    # init additive floor ~ half the minimum observed loss\n    floor0 = max(np.min(yp) * 0.5, eps)\n    log_floor0 = np.log(floor0)\n\n    # stack into initial parameter vector\n    p0 = np.array([a0, b0, c0, d0, log_floor0], dtype=float)\n\n    # define residuals: relative error on full data\n    def resid(p):\n        # unpack\n        a, b, c, d, log_floor = p\n        floor = np.exp(log_floor)\n        # features\n        tkn = np.maximum(X_full[:, 0], eps)\n        prm = np.maximum(X_full[:, 1], eps)\n        ut  = np.maximum(X_full[:, 2], eps)\n        # model prediction\n        core = np.exp(a) * (tkn ** b) * (prm ** c) * (ut ** d)\n        pred = floor + core\n        # relative residual\n        denom = np.maximum(y_full, eps)\n        return (pred - y_full) / denom\n\n    # optional bounds for exponents for stability\n    lower = [-np.inf, -10.0, -10.0, -10.0, -np.inf]\n    upper = [ np.inf,  10.0,  10.0,  10.0,  np.inf]\n\n    sol = least_squares(\n        resid,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    return sol.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Saturating\u2010floor power\u2010law scaling:\n      loss = floor + A * tokens^b * params^c / ( unique_tokens^d + m )\n\n    where:\n      A = exp(a),\n      floor = exp(log_floor),\n      b, c can be positive/negative,\n      d \u2265 0,\n      m \u2265 0.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20106 array [a, b, c, d, m, log_floor]\n                   or shape (M,6) for M independent fits\n    Returns:\n      preds: shape (N,) if params is (6,), else (N,M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # ensure 2D params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 6:\n        raise ValueError(\"params must have length 6 or shape (M,6)\")\n    # unpack parameters\n    a       = p[:, 0]   # log A\n    b       = p[:, 1]\n    c       = p[:, 2]\n    d       = p[:, 3]\n    m       = p[:, 4]\n    log_flr = p[:, 5]\n\n    # features with safeguards\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)[:, None]  # shape (N,1)\n    prm = np.maximum(X[:, 1], eps)[:, None]\n    ut  = np.maximum(X[:, 2], eps)[:, None]\n\n    # compute powers and denom\n    A     = np.exp(a)[None, :]            # (1,M)\n    floor = np.exp(log_flr)[None, :]      # (1,M)\n    denom = (ut ** d[None, :]) + m[None, :]\n    # avoid zero denom\n    denom = np.where(denom <= eps, eps, denom)\n\n    # core term\n    core = A * (tkn ** b[None, :]) * (prm ** c[None, :]) / denom\n    preds = floor + core  # shape (N,M)\n\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model [a, b, c, d, m, log_floor] by minimizing\n    squared error in log\u2010space:\n      resid_i = log(pred_i + eps) - log(y_i + eps)\n    \"\"\"\n    X_full = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X_full.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y_full = np.asarray(loss_values, dtype=float).reshape(-1)\n    eps = 1e-12\n\n    # mask positive targets for initialization\n    mask = y_full > eps\n    if not np.any(mask):\n        # fallback to zeros\n        return np.zeros(6, dtype=float)\n    Xp = X_full[mask]\n    yp = y_full[mask]\n\n    # prepare logs\n    logs = np.log(np.maximum(Xp, eps))\n    logy = np.log(yp)\n\n    # linear regression init: logy \u2248 a_lin + b_lin\u00b7log(tokens) + c_lin\u00b7log(params) + d_lin\u00b7log(unique)\n    D = np.concatenate([np.ones((logs.shape[0], 1)), logs], axis=1)  # (N_reg,4)\n    beta_lin, *_ = np.linalg.lstsq(D, logy, rcond=None)\n    a0_lin, b0_lin, c0_lin, d0_lin = beta_lin\n\n    # translate into our parameters:\n    #   a0 = a0_lin,\n    #   b0 = b0_lin,\n    #   c0 = c0_lin,\n    #   d0 = max(-d0_lin, 0),\n    #   m0 = small fraction of avg(unique^d0),\n    #   floor ~ 10% of minimum loss\n    a0 = a0_lin\n    b0 = b0_lin\n    c0 = c0_lin\n    d0 = max(-d0_lin, 0.0)\n    # compute initial m0\n    uniq_p = np.maximum(Xp[:, 2], eps)\n    m0 = (np.mean(uniq_p**d0) if d0 > 0 else 1.0) * 0.1 + eps\n    floor0 = max(np.min(yp) * 0.1, eps)\n    log_floor0 = np.log(floor0)\n\n    p0 = np.array([a0, b0, c0, d0, m0, log_floor0], dtype=float)\n\n    # bounds: A=exp(a) free; b,c in [-10,10]; d in [0,10]; m in [0,inf]; floor in [0,min(y)]\n    lb = [-np.inf,  -10.0, -10.0,   0.0,    0.0,           -np.inf]\n    ub = [ np.inf,   10.0,  10.0,  10.0,    np.inf,  np.log(np.min(yp) + eps)]\n    \n    # residuals in log\u2010space\n    def _resid(p):\n        pred = scaling_law_func(X_full, p)\n        # safe log\n        return np.log(np.maximum(pred, eps)) - np.log(np.maximum(y_full, eps))\n\n    sol = least_squares(\n        _resid,\n        p0,\n        bounds=(lb, ub),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return sol.x if sol.success else p0\n\n# EVOLVE-BLOCK-END\n```"]}}}