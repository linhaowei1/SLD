{"id": "fd728e7b-fc44-4b3e-8c86-c75362ace514", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Simplified 6-parameter scaling law:\n      loss = L_inf + K * tokens^(-b) * params^(-c) / (unique_tokens^d + M)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-6 sequence [L_inf, K, b, c, d, M]\n                   (you may also pass length-7, the last element is ignored)\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.size not in (6, 7):\n        raise ValueError(\"params must have length 6 or 7\")\n    # unpack first six params\n    L_inf, K, b, c, d, M = p[:6]\n\n    # numerical safeguards\n    eps = 1e-12\n    tkn_safe  = tkn  + eps\n    mdl_safe  = mdl  + eps\n    uniq_safe = uniq + eps\n\n    # compute scaling\n    num   = (tkn_safe**(-b)) * (mdl_safe**(-c))\n    denom = (uniq_safe**d) + M\n    denom = np.where(denom <= eps, eps, denom)\n\n    preds = L_inf + K * num / denom\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 6-parameter scaling law by minimizing\n    mean squared error in log-space. Returns optimized params:\n      [L_inf, K, b, c, d, M]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter out non-positive losses (can't log-transform)\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n    if y.size == 0:\n        # fallback: zeros\n        return np.zeros(6, dtype=float)\n\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n    N = y.size\n\n    # small constant for stability\n    eps = 1e-12\n\n    # initialize L_inf as slightly below smallest observed loss\n    L_inf0 = max(0.0, np.min(y) * 0.9)\n\n    # shift y to be strictly positive\n    y_shift = y - L_inf0 + eps\n\n    # build linear system in log-space ignoring M:\n    #   log(y_shift) \u2248 log K - b*log(tkn) - c*log(mdl) - d*log(uniq)\n    A = np.vstack([\n        -np.log(tkn + eps),\n        -np.log(mdl + eps),\n        -np.log(uniq + eps),\n        np.ones(N)\n    ]).T\n    bvec, cvec, dvec, logK = np.linalg.lstsq(A, np.log(y_shift), rcond=None)[0]\n    b0, c0, d0 = bvec, cvec, dvec\n    K0 = np.exp(logK)\n\n    # small initial M so denom \u2248 uniq^d when uniq is large\n    M0 = (np.mean(uniq) + eps)**d0 * 0.01\n\n    # initial parameter vector\n    init = np.array([L_inf0, K0, b0, c0, d0, M0], dtype=float)\n\n    # bounds: L_inf \u2265 0, K>0, M\u22650, exponents free\n    bounds = [\n        (0.0, None),      # L_inf\n        (1e-12, None),    # K\n        (None, None),     # b\n        (None, None),     # c\n        (None, None),     # d\n        (0.0, None)       # M\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        # avoid non-positive\n        preds = np.maximum(preds, eps)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6e41de31-0efb-46ec-8297-b19685d4414a", "generation": 2, "timestamp": 1754715028.5644639, "iteration_found": 20, "metrics": {"nmse": 0.3105004558040971, "nmae": 0.6989338705615883, "r2": 0.6894995441959029, "combined_score": 0.7630672660746385}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4812785442141991, "nmae": 0.9031877407585536, "r2": 0.5187214557858009, "combined_score": 0.6750924759600081}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4813\n- nmae: 0.9032\n- r2: 0.5187\n- combined_score: 0.6751\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.5779, nmae: 0.5471, r2: 0.4221, combined_score: 0.6337\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.4813, nmae: 0.9032, r2: 0.5187, combined_score: 0.6751\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6446)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible 7-parameter scaling law with saturation:\n      loss = L_inf + K * [ (tokens^b * params^c) / (unique_tokens^d + M) ]^(\u2013alpha)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-7 sequence [L_inf, K, alpha, b, c, d, M]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    x1 = X[:, 0]  # tokens\n    x2 = X[:, 1]  # model params\n    x3 = X[:, 2]  # unique tokens\n\n    L_inf, K, alpha, b, c, d, M = params\n\n    # compute the scaled signal: tokens^b * params^c\n    # use logs for stability, then exponentiate\n    log_scaled_num = b * np.log(x1 + 1e-12) + c * np.log(x2 + 1e-12)\n    scaled_num = np.exp(log_scaled_num)\n\n    # denominator: unique_tokens^d + M\n    denom = np.power(x3 + 1e-12, d) + M\n    denom = np.where(denom <= 0, M + 1e-12, denom)\n\n    # full scaling quantity\n    scaled = scaled_num / denom\n\n    # final loss prediction\n    preds = L_inf + K * np.power(scaled + 1e-12, -alpha)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized params: [L_inf, K, alpha, b, c, d, M]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # initialize parameters based on data heuristics\n    L_inf0 = np.min(y) * 0.5\n    K0      = (np.max(y) - np.min(y)) + 1e-6\n    alpha0  = 0.5\n    b0, c0, d0 = 0.3, 0.3, 0.3\n    M0      = np.mean(X[:, 2]) * 0.1 + 1e-6\n\n    init = np.array([L_inf0, K0, alpha0, b0, c0, d0, M0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0, None),        # L_inf \u2265 0\n        (1e-12, None),    # K > 0\n        (1e-12, None),    # alpha > 0\n        (None, None),     # b free\n        (None, None),     # c free\n        (None, None),     # d free\n        (1e-12, None)     # M > 0\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        preds = np.maximum(preds, 1e-12)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n    params_opt = result.x if result.success else init\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4813), Performs well on nmae (0.9032), Performs well on r2 (0.5187), Performs well on combined_score (0.6751)\n\n\n### Program 2 (Score: 0.5452)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nKey features: Performs well on nmse (0.5779), Performs well on nmae (0.5471), Performs well on r2 (0.4221), Performs well on combined_score (0.6337)\n\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible 7-parameter scaling law with saturation:\n      loss = L_inf + K * [ (tokens^b * params^c) / (unique_tokens^d + M) ]^(\u2013alpha)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-7 sequence [L_inf, K, alpha, b, c, d, M]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    x1 = X[:, 0]  # tokens\n    x2 = X[:, 1]  # model params\n    x3 = X[:, 2]  # unique tokens\n\n    L_inf, K, alpha, b, c, d, M = params\n\n    # compute the scaled signal: tokens^b * params^c\n    # use logs for stability, then exponentiate\n    log_scaled_num = b * np.log(x1 + 1e-12) + c * np.log(x2 + 1e-12)\n    scaled_num = np.exp(log_scaled_num)\n\n    # denominator: unique_tokens^d + M\n    denom = np.power(x3 + 1e-12, d) + M\n    denom = np.where(denom <= 0, M + 1e-12, denom)\n\n    # full scaling quantity\n    scaled = scaled_num / denom\n\n    # final loss prediction\n    preds = L_inf + K * np.power(scaled + 1e-12, -alpha)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized params: [L_inf, K, alpha, b, c, d, M]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # initialize parameters based on data heuristics\n    L_inf0 = np.min(y) * 0.5\n    K0      = (np.max(y) - np.min(y)) + 1e-6\n    alpha0  = 0.5\n    b0, c0, d0 = 0.3, 0.3, 0.3\n    M0      = np.mean(X[:, 2]) * 0.1 + 1e-6\n\n    init = np.array([L_inf0, K0, alpha0, b0, c0, d0, M0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0, None),        # L_inf \u2265 0\n        (1e-12, None),    # K > 0\n        (1e-12, None),    # alpha > 0\n        (None, None),     # b free\n        (None, None),     # c free\n        (None, None),     # d free\n        (1e-12, None)     # M > 0\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        preds = np.maximum(preds, 1e-12)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n    params_opt = result.x if result.success else init\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Simplified 6-parameter scaling law:\n      loss = L_inf + K * tokens^(-b) * params^(-c) / (unique_tokens^d + M)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-6 sequence [L_inf, K, b, c, d, M]\n                   (you may also pass length-7, the last element is ignored)\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.size not in (6, 7):\n        raise ValueError(\"params must have length 6 or 7\")\n    # unpack first six params\n    L_inf, K, b, c, d, M = p[:6]\n\n    # numerical safeguards\n    eps = 1e-12\n    tkn_safe  = tkn  + eps\n    mdl_safe  = mdl  + eps\n    uniq_safe = uniq + eps\n\n    # compute scaling\n    num   = (tkn_safe**(-b)) * (mdl_safe**(-c))\n    denom = (uniq_safe**d) + M\n    denom = np.where(denom <= eps, eps, denom)\n\n    preds = L_inf + K * num / denom\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the simplified 6-parameter scaling law by minimizing\n    mean squared error in log-space. Returns optimized params:\n      [L_inf, K, b, c, d, M]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter out non-positive losses (can't log-transform)\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n    if y.size == 0:\n        # fallback: zeros\n        return np.zeros(6, dtype=float)\n\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n    N = y.size\n\n    # small constant for stability\n    eps = 1e-12\n\n    # initialize L_inf as slightly below smallest observed loss\n    L_inf0 = max(0.0, np.min(y) * 0.9)\n\n    # shift y to be strictly positive\n    y_shift = y - L_inf0 + eps\n\n    # build linear system in log-space ignoring M:\n    #   log(y_shift) \u2248 log K - b*log(tkn) - c*log(mdl) - d*log(uniq)\n    A = np.vstack([\n        -np.log(tkn + eps),\n        -np.log(mdl + eps),\n        -np.log(uniq + eps),\n        np.ones(N)\n    ]).T\n    bvec, cvec, dvec, logK = np.linalg.lstsq(A, np.log(y_shift), rcond=None)[0]\n    b0, c0, d0 = bvec, cvec, dvec\n    K0 = np.exp(logK)\n\n    # small initial M so denom \u2248 uniq^d when uniq is large\n    M0 = (np.mean(uniq) + eps)**d0 * 0.01\n\n    # initial parameter vector\n    init = np.array([L_inf0, K0, b0, c0, d0, M0], dtype=float)\n\n    # bounds: L_inf \u2265 0, K>0, M\u22650, exponents free\n    bounds = [\n        (0.0, None),      # L_inf\n        (1e-12, None),    # K\n        (None, None),     # b\n        (None, None),     # c\n        (None, None),     # d\n        (0.0, None)       # M\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        # avoid non-positive\n        preds = np.maximum(preds, eps)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Reduced to a 6-parameter form for clarity and easier fitting.\n- Linearized initial guess via least\u2010squares in log-space (fast, robust).\n- Vectorized operations with safeguards (`eps`) for numerical stability.\n- Bounds enforce positivity on scale parameters.\n- Objective minimizes MSE in the log domain to balance errors across scales.\n"]}}}