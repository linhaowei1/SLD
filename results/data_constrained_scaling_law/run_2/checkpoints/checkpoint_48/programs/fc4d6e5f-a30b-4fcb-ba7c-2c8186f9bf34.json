{"id": "fc4d6e5f-a30b-4fcb-ba7c-2c8186f9bf34", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Shifted power\u2010law scaling law with up to 7 parameters:\n      loss \u2248 exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20107 array [log_a, b, c, d, k0, k1, k2]\n                   or shape (M,7) for M independent fits\n    Returns:\n      preds: shape (N,) if params is (7,), else (N,M)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # Prepare parameter array (M,7)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 7:\n        raise ValueError(\"Expected 7 parameters [log_a,b,c,d,k0,k1,k2], got %d\" % p.shape[1])\n\n    tokens = X[:, 0]\n    param_cnt = X[:, 1]\n    uniq = X[:, 2]\n    N, M = X.shape[0], p.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Numerically safe lower bound for logits\n    LOG_CLAMP = 50.0\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p[i]\n        # positive shifts\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n        # compute log\u2010prediction\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(param_cnt + p0)\n            - d * np.log(uniq + u0)\n        )\n        # clamp to avoid numerical issues\n        y_log = np.clip(y_log, -LOG_CLAMP, LOG_CLAMP)\n        preds[:, i] = np.exp(y_log)\n\n    # if single parameter set, return shape (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter shifted\u2010power\u2010law model by minimizing\n    mean squared error in log\u2010loss space.\n\n    Returns optimized parameters [log_a, b, c, d, k0, k1, k2].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # Only fit on positive loss values\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] < 3:\n        # Too few points: fallback to trivial\n        init = np.zeros(7, dtype=float)\n        init[0] = np.log(np.maximum(y.mean(), 1e-12))\n        init[1:4] = 0.5\n        return init\n\n    # Work in log\u2010space\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(loss))\n    #   b, c, d = 0.5\n    #   k0, k1, k2 = 0  (=> t0=p0=u0=1)\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: enforce non\u2010negative exponents; allow shifts and log_a free\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b \u2265 0\n        (0.0, None),   # c \u2265 0\n        (0.0, None),   # d \u2265 0\n        (None, None),  # k0 (unbounded)\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    # Objective: MSE in log loss space\n    def obj(p):\n        pred = scaling_law_func(X_fit, p)\n        # safe clip\n        eps = 1e-12\n        pred_log = np.log(np.clip(pred, eps, None))\n        resid = pred_log - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        obj,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\":1e-12, \"gtol\":1e-8, \"maxiter\":1000}\n    )\n    if res.success:\n        return res.x\n    # fallback to initial if optimization fails\n    return init\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "f3afc163-cda2-452a-b813-9009bb04e398", "generation": 5, "timestamp": 1754715286.9077158, "iteration_found": 50, "metrics": {"nmse": 0.19534909478737864, "nmae": 0.4841969059938846, "r2": 0.8046509052126214, "combined_score": 0.836575695218035}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.32692225946849696, "nmae": 0.7276153359856735, "r2": 0.673077740531503, "combined_score": 0.7536236526777034}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3269\n- nmae: 0.7276\n- r2: 0.6731\n- combined_score: 0.7536\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2745, nmae: 0.7212, r2: 0.7255, combined_score: 0.7846\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1953, nmae: 0.4842, r2: 0.8047, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using a shifted power\u2010law scaling:\n      loss = exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    params: array of length 7 or shape (M,7):\n        [log_a, b, c, d, k0, k1, k2]\n      where t0 = exp(k0), p0 = exp(k1), u0 = exp(k2).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    # Ensure p is 2D: (M,7)\n    if p.ndim == 1:\n        p_arr = p[np.newaxis, :]\n    else:\n        p_arr = p.copy()\n    M, P = p_arr.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    tokens = X[:, 0]\n    param_cnt = X[:, 1]\n    uniq = X[:, 2]\n\n    N = X.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Vectorized over M parameter sets\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p_arr[i]\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n\n        # Compute log\u2010prediction\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(param_cnt + p0)\n            - d * np.log(uniq + u0)\n        )\n        # Avoid numerical under/overflow\n        y_log = np.clip(y_log, -50.0, 50.0)\n        preds[:, i] = np.exp(y_log)\n\n    # Return shape (N,) if single param set\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter shifted\u2010power\u2010law scaling law by minimizing\n    mean squared error in log\u2010loss space.\n    Returns an array of 7 optimized parameters:\n        [log_a, b, c, d, k0, k1, k2]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] == 0:\n        raise ValueError(\"No positive loss values to fit.\")\n\n    # Work in log-loss space\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(loss))\n    #   b,c,d = 0.5\n    #   k0,k1,k2 = 0 => t0=p0=u0=1\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: exponents b,c,d >= 0; others unbounded\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n        (None, None),  # k0\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    # Objective: mean squared error in log\u2010space\n    def mse_obj(p):\n        preds = scaling_law_func(X_fit, p)\n        # work in log\n        eps = 1e-12\n        y_pred_log = np.log(np.clip(preds, eps, None))\n        resid = y_pred_log - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        mse_obj,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-8, \"maxiter\": 1000},\n    )\n    if not res.success:\n        # fallback to initial guess\n        return init\n    return res.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1953), Performs well on nmae (0.4842), Performs well on r2 (0.8047), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log-linear scaling law:\n      loss \u2248 exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array-like of shape (N,3): [tokens, params, unique_tokens]\n      params:      length-4 array [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    eps = 1e-12\n    # log-features\n    X_log = np.log(X + eps)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters [a,b,c,d], got {p.size}\")\n    a, b, c, d = p\n    # linear combination in log-space\n    log_pred = a + b * X_log[:, 0] + c * X_log[:, 1] + d * X_log[:, 2]\n    return np.exp(log_pred)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter log-linear scaling law by minimizing MSE in log-space.\n    Returns parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # only keep strictly positive losses\n    mask = y > 0\n    Xp = X[mask]\n    yp = y[mask]\n    # fallback if too few valid points\n    if Xp.shape[0] < 3:\n        a0 = np.log(np.mean(y) + 1e-12)\n        return np.array([a0, 0.0, 0.0, 0.0])\n\n    eps = 1e-12\n    X_log = np.log(Xp + eps)\n    y_log = np.log(yp + eps)\n\n    N = X_log.shape[0]\n    # design matrix: [1, log(tokens), log(params), log(unique_tokens)]\n    D = np.hstack([np.ones((N, 1)), X_log])\n\n    # initial least-squares in log-space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n\n    # objective: mean squared error in log-space\n    def objective(p):\n        res = D.dot(p) - y_log\n        return np.mean(res * res)\n\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    beta_opt = res.x if res.success else beta_init\n\n    return beta_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.6265)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2745), Performs well on nmae (0.7212), Performs well on r2 (0.7255), Performs well on combined_score (0.7846)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6446)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Flexible 7-parameter scaling law with saturation:\n      loss = L_inf + K * [ (tokens^b * params^c) / (unique_tokens^d + M) ]^(\u2013alpha)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-7 sequence [L_inf, K, alpha, b, c, d, M]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    x1 = X[:, 0]  # tokens\n    x2 = X[:, 1]  # model params\n    x3 = X[:, 2]  # unique tokens\n\n    L_inf, K, alpha, b, c, d, M = params\n\n    # compute the scaled signal: tokens^b * params^c\n    # use logs for stability, then exponentiate\n    log_scaled_num = b * np.log(x1 + 1e-12) + c * np.log(x2 + 1e-12)\n    scaled_num = np.exp(log_scaled_num)\n\n    # denominator: unique_tokens^d + M\n    denom = np.power(x3 + 1e-12, d) + M\n    denom = np.where(denom <= 0, M + 1e-12, denom)\n\n    # full scaling quantity\n    scaled = scaled_num / denom\n\n    # final loss prediction\n    preds = L_inf + K * np.power(scaled + 1e-12, -alpha)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing mean squared error in log\u2010space.\n    Returns optimized params: [L_inf, K, alpha, b, c, d, M]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # initialize parameters based on data heuristics\n    L_inf0 = np.min(y) * 0.5\n    K0      = (np.max(y) - np.min(y)) + 1e-6\n    alpha0  = 0.5\n    b0, c0, d0 = 0.3, 0.3, 0.3\n    M0      = np.mean(X[:, 2]) * 0.1 + 1e-6\n\n    init = np.array([L_inf0, K0, alpha0, b0, c0, d0, M0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0, None),        # L_inf \u2265 0\n        (1e-12, None),    # K > 0\n        (1e-12, None),    # alpha > 0\n        (None, None),     # b free\n        (None, None),     # c free\n        (None, None),     # d free\n        (1e-12, None)     # M > 0\n    ]\n\n    # objective: MSE in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        preds = np.maximum(preds, 1e-12)\n        return np.mean((np.log(preds) - np.log(y))**2)\n\n    result = minimize(objective, init, method='L-BFGS-B', bounds=bounds)\n    params_opt = result.x if result.success else init\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6203)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Saturating\u2010floor power\u2010law scaling:\n      loss = floor + A * tokens^b * params^c / ( unique_tokens^d + m )\n\n    where:\n      A = exp(a),\n      floor = exp(log_floor),\n      b, c can be positive/negative,\n      d \u2265 0,\n      m \u2265 0.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20106 array [a, b, c, d, m, log_floor]\n                   or shape (M,6) for M independent fits\n    Returns:\n      preds: shape (N,) if params is (6,), else (N,M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # ensure 2D params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 6:\n        raise ValueError(\"params must have length 6 or shape (M,6)\")\n    # unpack parameters\n    a       = p[:, 0]   # log A\n    b       = p[:, 1]\n    c       = p[:, 2]\n    d       = p[:, 3]\n    m       = p[:, 4]\n    log_flr = p[:, 5]\n\n    # features with safeguards\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)[:, None]  # shape (N,1)\n    prm = np.maximum(X[:, 1], eps)[:, None]\n    ut  = np.maximum(X[:, 2], eps)[:, None]\n\n    # compute powers and denom\n    A     = np.exp(a)[None, :]            # (1,M)\n    floor = np.exp(log_flr)[None, :]      # (1,M)\n    denom = (ut ** d[None, :]) + m[None, :]\n    # avoid zero denom\n    denom = np.where(denom <= eps, eps, denom)\n\n    # core term\n    core = A * (tkn ** b[None, :]) * (prm ** c[None, :]) / denom\n    preds = floor + core  # shape (N,M)\n\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model [a, b, c, d, m, log_floor] by minimizing\n    squared error in log\u2010space:\n      resid_i = log(pred_i + eps) - log(y_i + eps)\n    \"\"\"\n    X_full = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X_full.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y_full = np.asarray(loss_values, dtype=float).reshape(-1)\n    eps = 1e-12\n\n    # mask positive targets for initialization\n    mask = y_full > eps\n    if not np.any(mask):\n        # fallback to zeros\n        return np.zeros(6, dtype=float)\n    Xp = X_full[mask]\n    yp = y_full[mask]\n\n    # prepare logs\n    logs = np.log(np.maximum(Xp, eps))\n    logy = np.log(yp)\n\n    # linear regression init: logy \u2248 a_lin + b_lin\u00b7log(tokens) + c_lin\u00b7log(params) + d_lin\u00b7log(unique)\n    D = np.concatenate([np.ones((logs.shape[0], 1)), logs], axis=1)  # (N_reg,4)\n    beta_lin, *_ = np.linalg.lstsq(D, logy, rcond=None)\n    a0_lin, b0_lin, c0_lin, d0_lin = beta_lin\n\n    # translate into our parameters:\n    #   a0 = a0_lin,\n    #   b0 = b0_lin,\n    #   c0 = c0_lin,\n    #   d0 = max(-d0_lin, 0),\n    #   m0 = small fraction of avg(unique^d0),\n    #   floor ~ 10% of minimum loss\n    a0 = a0_lin\n    b0 = b0_lin\n    c0 = c0_lin\n    d0 = max(-d0_lin, 0.0)\n    # compute initial m0\n    uniq_p = np.maximum(Xp[:, 2], eps)\n    m0 = (np.mean(uniq_p**d0) if d0 > 0 else 1.0) * 0.1 + eps\n    floor0 = max(np.min(yp) * 0.1, eps)\n    log_floor0 = np.log(floor0)\n\n    p0 = np.array([a0, b0, c0, d0, m0, log_floor0], dtype=float)\n\n    # bounds: A=exp(a) free; b,c in [-10,10]; d in [0,10]; m in [0,inf]; floor in [0,min(y)]\n    lb = [-np.inf,  -10.0, -10.0,   0.0,    0.0,           -np.inf]\n    ub = [ np.inf,   10.0,  10.0,  10.0,    np.inf,  np.log(np.min(yp) + eps)]\n    \n    # residuals in log\u2010space\n    def _resid(p):\n        pred = scaling_law_func(X_full, p)\n        # safe log\n        return np.log(np.maximum(pred, eps)) - np.log(np.maximum(y_full, eps))\n\n    sol = least_squares(\n        _resid,\n        p0,\n        bounds=(lb, ub),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return sol.x if sol.success else p0\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss using a shifted power\u2010law scaling:\n      loss = exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    params: array of length 7 or shape (M,7):\n        [log_a, b, c, d, k0, k1, k2]\n      where t0 = exp(k0), p0 = exp(k1), u0 = exp(k2).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    # Ensure p is 2D: (M,7)\n    if p.ndim == 1:\n        p_arr = p[np.newaxis, :]\n    else:\n        p_arr = p.copy()\n    M, P = p_arr.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    tokens = X[:, 0]\n    param_cnt = X[:, 1]\n    uniq = X[:, 2]\n\n    N = X.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Vectorized over M parameter sets\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p_arr[i]\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n\n        # Compute log\u2010prediction\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(param_cnt + p0)\n            - d * np.log(uniq + u0)\n        )\n        # Avoid numerical under/overflow\n        y_log = np.clip(y_log, -50.0, 50.0)\n        preds[:, i] = np.exp(y_log)\n\n    # Return shape (N,) if single param set\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter shifted\u2010power\u2010law scaling law by minimizing\n    mean squared error in log\u2010loss space.\n    Returns an array of 7 optimized parameters:\n        [log_a, b, c, d, k0, k1, k2]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] == 0:\n        raise ValueError(\"No positive loss values to fit.\")\n\n    # Work in log-loss space\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(loss))\n    #   b,c,d = 0.5\n    #   k0,k1,k2 = 0 => t0=p0=u0=1\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: exponents b,c,d >= 0; others unbounded\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n        (None, None),  # k0\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    # Objective: mean squared error in log\u2010space\n    def mse_obj(p):\n        preds = scaling_law_func(X_fit, p)\n        # work in log\n        eps = 1e-12\n        y_pred_log = np.log(np.clip(preds, eps, None))\n        resid = y_pred_log - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        mse_obj,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-8, \"maxiter\": 1000},\n    )\n    if not res.success:\n        # fallback to initial guess\n        return init\n    return res.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6552, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a 5-parameter\n    model with an additive floor and multiplicative power-law:\n\n        loss \u2248 C0 + C1 * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, b, c, d]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, b, c, d]\")\n\n    C0, C1, b, c, d = p\n    # Clip inputs to avoid zeros/negatives in power-law\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # compute prediction\n    return C0 + C1 * np.power(tokens, b) \\\n                * np.power(mparams, c) \\\n                * np.power(unique, d)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law by minimizing MSE in the original loss domain.\n\n    Returns parameters [C0, C1, b, c, d].\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # only positive targets can inform the power-law part\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # log\u2010linear initial guess for C0=0\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    N = X_log.shape[0]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # solve least-squares in log-space\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # translate to our parameterization\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    p0 = np.array([C0_0, C1_0, b0, c0, d0], dtype=float)\n\n    # bounds: C0 \u2265 0, C1 \u2265 tiny, exponents unbounded\n    bounds = [\n        (0.0, None),      # C0\n        (1e-12, None),    # C1\n        (None, None),     # b\n        (None, None),     # c\n        (None, None),     # d\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error in original domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(\n        objective,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\":1e-12, \"gtol\":1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        return p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.973), NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.6265, Type: Alternative)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Improved log\u2013quadratic scaling law with pairwise interaction terms:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      => loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M independent outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    p = np.asarray(params, dtype=float)\n    # Ensure params are in shape (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters [a,b,c,d,e,f,g], got {P}\")\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]  # log(tokens)\n    z2 = Z[:, 1:2]  # log(params)\n    z3 = Z[:, 2:3]  # log(unique_tokens)\n\n    # Build feature matrix F: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),  # bias term\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Compute log\u2010predictions: shape (N, M)\n    log_pred = F.dot(p.T)\n\n    # Back to original loss space\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2013quadratic scaling law by closed\u2010form (ridge\u2010regularized)\n    least squares in log\u2010space.\n\n    Returns 7 parameters [a, b, c, d, e, f, g] minimizing\n      ||F\u00b7params \u2013 log(loss)||^2 + \u03b1||params||^2\n    where F are the features:\n      [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)      # (N,3)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # Keep only positive losses\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n\n    # Compute logs\n    Z = np.log(X + _EPS)                              # (N,3)\n    z1 = Z[:, 0:1]\n    z2 = Z[:, 1:2]\n    z3 = Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),  # bias\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)  # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) p = F^T log(y)\n    FtF = F.T.dot(F)                                 # (7,7)\n    # Small ridge for numerical stability\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    regularizer = alpha * np.eye(FtF.shape[0])\n    A = FtF + regularizer\n    b = F.T.dot(np.log(y + _EPS))\n\n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)               # (7,)\n\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5452, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.6542, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    tokens = np.maximum(X[:, 0], 1e-12)\n    mparams = np.maximum(X[:, 1], 1e-12)\n    unique = np.maximum(X[:, 2], 1e-12)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in the original loss domain.\n\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Clip targets to avoid log issues\n    y = np.maximum(y, 1e-12)\n\n    # Initial guess via a pure multiplicative power\u2010law (no floor)\n    # log(y) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    X_log = np.log(np.maximum(X, 1e-12))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)  # design matrix\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    a0, b0, c0, d0 = beta_lin\n\n    # Translate to our parameterization:\n    #   C1 = exp(a), \u03b1 = \u2212b, \u03b2 = \u2212c, \u03b3 = \u2212d, and C0 floor = 0\n    C0_0 = 0.0\n    C1_0 = np.exp(a0)\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # Bounds: floor \u22650, scale>0, exponents \u22650\n    bounds = [\n        (0.0, None),    # C0\n        (1e-12, None),  # C1\n        (0.0, None),    # \u03b1\n        (0.0, None),    # \u03b2\n        (0.0, None),    # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in original loss domain\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective,\n                   p0,\n                   method=\"L-BFGS-B\",\n                   bounds=bounds,\n                   options={\"ftol\":1e-12, \"gtol\":1e-12})\n\n    if res.success:\n        return res.x\n    else:\n        # If optimization fails, fall back to initial guess\n        return p0\n```\nUnique approach: Modification: Full rewrite, Excellent nmae (0.968), NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Saturating\u2010floor power\u2010law scaling:\n      loss = floor + A * tokens^b * params^c / ( unique_tokens^d + m )\n\n    where:\n      A = exp(a),\n      floor = exp(log_floor),\n      b, c can be positive/negative,\n      d \u2265 0,\n      m \u2265 0.\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20106 array [a, b, c, d, m, log_floor]\n                   or shape (M,6) for M independent fits\n    Returns:\n      preds: shape (N,) if params is (6,), else (N,M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # ensure 2D params\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 6:\n        raise ValueError(\"params must have length 6 or shape (M,6)\")\n    # unpack parameters\n    a       = p[:, 0]   # log A\n    b       = p[:, 1]\n    c       = p[:, 2]\n    d       = p[:, 3]\n    m       = p[:, 4]\n    log_flr = p[:, 5]\n\n    # features with safeguards\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)[:, None]  # shape (N,1)\n    prm = np.maximum(X[:, 1], eps)[:, None]\n    ut  = np.maximum(X[:, 2], eps)[:, None]\n\n    # compute powers and denom\n    A     = np.exp(a)[None, :]            # (1,M)\n    floor = np.exp(log_flr)[None, :]      # (1,M)\n    denom = (ut ** d[None, :]) + m[None, :]\n    # avoid zero denom\n    denom = np.where(denom <= eps, eps, denom)\n\n    # core term\n    core = A * (tkn ** b[None, :]) * (prm ** c[None, :]) / denom\n    preds = floor + core  # shape (N,M)\n\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model [a, b, c, d, m, log_floor] by minimizing\n    squared error in log\u2010space:\n      resid_i = log(pred_i + eps) - log(y_i + eps)\n    \"\"\"\n    X_full = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X_full.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y_full = np.asarray(loss_values, dtype=float).reshape(-1)\n    eps = 1e-12\n\n    # mask positive targets for initialization\n    mask = y_full > eps\n    if not np.any(mask):\n        # fallback to zeros\n        return np.zeros(6, dtype=float)\n    Xp = X_full[mask]\n    yp = y_full[mask]\n\n    # prepare logs\n    logs = np.log(np.maximum(Xp, eps))\n    logy = np.log(yp)\n\n    # linear regression init: logy \u2248 a_lin + b_lin\u00b7log(tokens) + c_lin\u00b7log(params) + d_lin\u00b7log(unique)\n    D = np.concatenate([np.ones((logs.shape[0], 1)), logs], axis=1)  # (N_reg,4)\n    beta_lin, *_ = np.linalg.lstsq(D, logy, rcond=None)\n    a0_lin, b0_lin, c0_lin, d0_lin = beta_lin\n\n    # translate into our parameters:\n    #   a0 = a0_lin,\n    #   b0 = b0_lin,\n    #   c0 = c0_lin,\n    #   d0 = max(-d0_lin, 0),\n    #   m0 = small fraction of avg(unique^d0),\n    #   floor ~ 10% of minimum loss\n    a0 = a0_lin\n    b0 = b0_lin\n    c0 = c0_lin\n    d0 = max(-d0_lin, 0.0)\n    # compute initial m0\n    uniq_p = np.maximum(Xp[:, 2], eps)\n    m0 = (np.mean(uniq_p**d0) if d0 > 0 else 1.0) * 0.1 + eps\n    floor0 = max(np.min(yp) * 0.1, eps)\n    log_floor0 = np.log(floor0)\n\n    p0 = np.array([a0, b0, c0, d0, m0, log_floor0], dtype=float)\n\n    # bounds: A=exp(a) free; b,c in [-10,10]; d in [0,10]; m in [0,inf]; floor in [0,min(y)]\n    lb = [-np.inf,  -10.0, -10.0,   0.0,    0.0,           -np.inf]\n    ub = [ np.inf,   10.0,  10.0,  10.0,    np.inf,  np.log(np.min(yp) + eps)]\n    \n    # residuals in log\u2010space\n    def _resid(p):\n        pred = scaling_law_func(X_full, p)\n        # safe log\n        return np.log(np.maximum(pred, eps)) - np.log(np.maximum(y_full, eps))\n\n    sol = least_squares(\n        _resid,\n        p0,\n        bounds=(lb, ub),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return sol.x if sol.success else p0\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Shifted power\u2010law scaling law with up to 7 parameters:\n      loss \u2248 exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) columns [tokens, params, unique_tokens]\n      params:      length\u20107 array [log_a, b, c, d, k0, k1, k2]\n                   or shape (M,7) for M independent fits\n    Returns:\n      preds: shape (N,) if params is (7,), else (N,M)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # Prepare parameter array (M,7)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 7:\n        raise ValueError(\"Expected 7 parameters [log_a,b,c,d,k0,k1,k2], got %d\" % p.shape[1])\n\n    tokens = X[:, 0]\n    param_cnt = X[:, 1]\n    uniq = X[:, 2]\n    N, M = X.shape[0], p.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Numerically safe lower bound for logits\n    LOG_CLAMP = 50.0\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p[i]\n        # positive shifts\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n        # compute log\u2010prediction\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(param_cnt + p0)\n            - d * np.log(uniq + u0)\n        )\n        # clamp to avoid numerical issues\n        y_log = np.clip(y_log, -LOG_CLAMP, LOG_CLAMP)\n        preds[:, i] = np.exp(y_log)\n\n    # if single parameter set, return shape (N,)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter shifted\u2010power\u2010law model by minimizing\n    mean squared error in log\u2010loss space.\n\n    Returns optimized parameters [log_a, b, c, d, k0, k1, k2].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # Only fit on positive loss values\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] < 3:\n        # Too few points: fallback to trivial\n        init = np.zeros(7, dtype=float)\n        init[0] = np.log(np.maximum(y.mean(), 1e-12))\n        init[1:4] = 0.5\n        return init\n\n    # Work in log\u2010space\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(loss))\n    #   b, c, d = 0.5\n    #   k0, k1, k2 = 0  (=> t0=p0=u0=1)\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: enforce non\u2010negative exponents; allow shifts and log_a free\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b \u2265 0\n        (0.0, None),   # c \u2265 0\n        (0.0, None),   # d \u2265 0\n        (None, None),  # k0 (unbounded)\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    # Objective: MSE in log loss space\n    def obj(p):\n        pred = scaling_law_func(X_fit, p)\n        # safe clip\n        eps = 1e-12\n        pred_log = np.log(np.clip(pred, eps, None))\n        resid = pred_log - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        obj,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\":1e-12, \"gtol\":1e-8, \"maxiter\":1000}\n    )\n    if res.success:\n        return res.x\n    # fallback to initial if optimization fails\n    return init\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n1. Adopted a 7-parameter shifted power\u2010law form shown to generalize well across data scales.\n2. Vectorized implementation for clarity and speed.\n3. Bounds ensure exponents remain non-negative for interpretability and stability.\n4. Loss fitting is performed in log-loss space (MSE), improving robustness to scale.\n5. Fallback initialization guards against ill-posed or too-small datasets.\n"]}}}