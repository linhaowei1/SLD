{"id": "63dc2313-5220-4f4a-8c1e-6380e56def1a", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law with small offset saturation:\n      loss = C0\n           + K * (tokens + A)^(-alpha)\n                 * (params) ^(-beta)\n                 * (unique_tokens + B)^(-gamma)\n\n    params: length-7 array [C0, K, alpha, beta, gamma, A, B]\n      C0    : asymptotic floor \u2265 0\n      K     : amplitude > 0\n      alpha : token exponent \u2265 0\n      beta  : model-size exponent \u2265 0\n      gamma : uniq-token exponent \u2265 0\n      A     : token offset \u2265 0\n      B     : unique-token offset \u2265 0\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must have length 7: [C0,K,alpha,beta,gamma,A,B]\")\n    C0, K, alpha, beta, gamma, A, B = p\n\n    # ensure valid domains\n    eps = 1e-12\n    tkn = X[:, 0] + max(A, 0.0) + eps\n    mdl = np.maximum(X[:, 1], eps)\n    uniq = X[:, 2] + max(B, 0.0) + eps\n\n    # compute prediction\n    return C0 + K * (tkn ** (-alpha)) * (mdl ** (-beta)) * (uniq ** (-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law by minimizing MSE in log-space:\n      minimize mean[(log(pred) - log(actual))^2]\n    Returns optimized params [C0, K, alpha, beta, gamma, A, B].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # keep only positive losses for log fitting\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback default\n        return np.array([0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0], dtype=float)\n\n    # initial C0: just below minimal observed loss\n    C0_0 = max(0.0, np.min(y_fit) * 0.9)\n    # shift targets\n    y_shift = y_fit - C0_0 + 1e-12\n\n    # linearize: log(y_shift) \u2248 log(K) - alpha\u00b7log(tkn+A) - beta\u00b7log(mdl) - gamma\u00b7log(uniq+B)\n    tkn = X_fit[:, 0]\n    mdl = X_fit[:, 1]\n    uniq = X_fit[:, 2]\n    eps = 1e-12\n\n    # build regression matrix\n    F = np.vstack([\n        -np.log(tkn + np.mean(tkn)*0.01 + eps),\n        -np.log(mdl + eps),\n        -np.log(uniq + np.mean(uniq)*0.01 + eps),\n        np.ones_like(y_shift)\n    ]).T  # shape (N,4)\n\n    # solve least squares for [alpha, beta, gamma, logK]\n    sol_coef, *_ = np.linalg.lstsq(F, np.log(y_shift), rcond=None)\n    alpha0, beta0, gamma0, logK0 = sol_coef\n    K0 = np.exp(logK0)\n\n    # offsets init small fraction of mean scales\n    A0 = np.mean(tkn) * 0.01\n    B0 = np.mean(uniq) * 0.01\n\n    init = np.array([C0_0, K0, alpha0, beta0, gamma0, A0, B0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0.0, None),      # C0 \u2265 0\n        (1e-12, None),    # K  > 0\n        (0.0, None),      # alpha \u2265 0\n        (0.0, None),      # beta \u2265 0\n        (0.0, None),      # gamma \u2265 0\n        (0.0, None),      # A \u2265 0\n        (0.0, None),      # B \u2265 0\n    ]\n\n    def obj(p):\n        pred = scaling_law_func(X_fit, p)\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(y_fit + eps))**2)\n\n    res = minimize(obj, init, method=\"L-BFGS-B\", bounds=bounds,\n                   options={'ftol':1e-9, 'gtol':1e-9})\n    return res.x if res.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ac048e83-ec2a-4335-9ec9-56164dcbfde3", "generation": 4, "timestamp": 1754715275.3727808, "iteration_found": 49, "metrics": {"nmse": 0.27549289461504356, "nmae": 0.640946086558569, "r2": 0.7245071053849564, "combined_score": 0.7840106395118805}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.032986465900227, "nmae": 0.8376040430309614, "r2": -0.032986465900227024, "combined_score": 0.491887189990313}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.0330\n- nmae: 0.8376\n- r2: -0.0330\n- combined_score: 0.4919\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0682, nmae: 0.3949, r2: 0.9318, combined_score: 0.9361\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5828)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      loss \u2248 floor\n             + B * tokens^(\u2212alpha)\n             + C * params^(\u2212beta)\n             + D * unique_tokens^(\u2212gamma)\n\n    To guarantee positivity of floor, amplitudes and exponents,\n    we internally represent all seven as raw logs:\n      [r0..r6] \u2192 floor = exp(r0), B = exp(r1), alpha = exp(r2), etc.\n\n    Inputs:\n      data_points: array-like of shape (N,3) containing\n                   [tokens,    params,    unique_tokens]\n      params:      array of length 7 (or shape (T,7) for T sets)\n\n    Returns:\n      preds: shape (N,) if params is (7,), or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N, T = X.shape[0], p_arr.shape[0]\n\n    # unpack raw logs\n    r0, r1, r2, r3, r4, r5, r6 = [p_arr[:, i] for i in range(7)]\n    floor = np.exp(r0)[None, :]   # (1,T)\n    B     = np.exp(r1)[None, :]   # (1,T)\n    alpha = np.exp(r2)[None, :]\n    C     = np.exp(r3)[None, :]\n    beta  = np.exp(r4)[None, :]\n    D     = np.exp(r5)[None, :]\n    gamma = np.exp(r6)[None, :]\n\n    # shape (N,T)\n    pred = (\n        floor\n        + B * (tkn[:, None] ** (-alpha))\n        + C * (prm[:, None] ** (-beta))\n        + D * (ut[:, None]  ** (-gamma))\n    )\n\n    # if only one parameter\u2010set, collapse to (N,)\n    if T == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error in original loss space, but using a\n    robust 'soft_l1' loss to reduce sensitivity to outliers.\n\n    Initialization strategy:\n      - floor \u2248 log(min positive loss)\n      - split (max-min) equally into 3 amplitudes\n      - start all exponents at 1.0\n    Returns:\n      array of 7 optimized raw log-parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for fit\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback to trivial initialization\n        base = np.mean(y) if y.size else 1.0\n        return np.array([\n            np.log(base),   # floor\n            0.,  np.log(1.),  # B, alpha\n            0.,  np.log(1.),  # C, beta\n            0.,  np.log(1.)   # D, gamma\n        ])\n\n    min_y = np.min(y_fit)\n    max_y = np.max(y_fit)\n    total_amp = max(max_y - min_y, 1e-8)\n\n    # raw\u2010log initial guesses\n    r0 = np.log(min_y + 1e-8)            # floor\n    amp_init = total_amp / 3.0\n    r1 = np.log(amp_init); r3 = np.log(amp_init); r5 = np.log(amp_init)\n    r2 = np.log(1.0);       r4 = np.log(1.0);       r6 = np.log(1.0)\n\n    init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n    def residuals(raw):\n        return scaling_law_func(X_fit, raw) - y_fit\n\n    sol = least_squares(\n        residuals,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=10000\n    )\n    return sol.x if sol.success else init\n```\nKey features: Performs well on nmse (0.0682), Performs well on nmae (0.3949), Performs well on r2 (0.9318), Performs well on combined_score (0.9361)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5931)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law with saturation offsets:\n      loss = C0\n           + K * (tokens + A)^(-alpha)\n                 * (params)^(-beta)\n                 * (unique_tokens + B)^(-gamma)\n\n    Inputs:\n      data_points: (N,3) array with columns [tokens, params, unique_tokens]\n      params:      length-7 array [C0, K, alpha, beta, gamma, A, B]\n\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must have length 7: [C0,K,alpha,beta,gamma,A,B]\")\n    C0, K, alpha, beta, gamma, A, B = p\n\n    # Numerical safeguards\n    eps = 1e-12\n    # Saturated inputs\n    tkn = X[:, 0] + max(A, 0.0) + eps\n    mdl = X[:, 1] + eps\n    uniq = X[:, 2] + max(B, 0.0) + eps\n\n    # Compute prediction\n    preds = C0 + K * (tkn ** (-alpha)) * (mdl ** (-beta)) * (uniq ** (-gamma))\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law by minimizing MSE in log-space.\n    Returns optimized params: [C0, K, alpha, beta, gamma, A, B]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n\n    # Keep only positive losses for log-domain fitting\n    mask = y > 0\n    X = X[mask]\n    y = y[mask]\n    if y.size == 0:\n        # Fallback to a trivial default if no valid data\n        return np.array([0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0], dtype=float)\n\n    tkn = X[:, 0]\n    mdl = X[:, 1]\n    uniq = X[:, 2]\n    eps = 1e-12\n\n    # 1) Initialize C0 as a fraction of the minimal observed loss\n    C0_0 = max(0.0, np.min(y) * 0.9)\n    # 2) Shift targets to fit log-domain\n    y_shift = y - C0_0 + eps\n\n    # 3) Linear regression in log-space ignoring A, B offsets:\n    #    log(y_shift) \u2248 log(K) - alpha*log(tkn) - beta*log(mdl) - gamma*log(uniq)\n    F = np.vstack([\n        -np.log(tkn + eps),\n        -np.log(mdl + eps),\n        -np.log(uniq + eps),\n        np.ones_like(y_shift)\n    ]).T\n    coef, *_ = np.linalg.lstsq(F, np.log(y_shift), rcond=None)\n    alpha0, beta0, gamma0, logK0 = coef\n    K0 = np.exp(logK0)\n\n    # 4) Initialize offsets A, B to small fractions of mean values\n    A0 = np.mean(tkn) * 0.01\n    B0 = np.mean(uniq) * 0.01\n\n    # 5) Pack initial guess\n    p0 = np.array([C0_0, K0, alpha0, beta0, gamma0, A0, B0], dtype=float)\n\n    # 6) Bound definitions: enforce non-negativity where appropriate\n    bounds = [\n        (0.0, None),      # C0 \u2265 0\n        (1e-12, None),    # K  > 0\n        (0.0, None),      # alpha \u2265 0\n        (0.0, None),      # beta  \u2265 0\n        (0.0, None),      # gamma \u2265 0\n        (0.0, None),      # A \u2265 0\n        (0.0, None),      # B \u2265 0\n    ]\n\n    # 7) Objective: mean squared error in log-space\n    def objective(p):\n        preds = scaling_law_func(X, p)\n        # ensure positivity\n        preds = np.maximum(preds, eps)\n        return np.mean((np.log(preds) - np.log(y + eps)) ** 2)\n\n    # 8) Optimize with L-BFGS-B\n    res = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5828, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      loss \u2248 floor\n             + B * tokens^(\u2212alpha)\n             + C * params^(\u2212beta)\n             + D * unique_tokens^(\u2212gamma)\n\n    To guarantee positivity of floor, amplitudes and exponents,\n    we internally represent all seven as raw logs:\n      [r0..r6] \u2192 floor = exp(r0), B = exp(r1), alpha = exp(r2), etc.\n\n    Inputs:\n      data_points: array-like of shape (N,3) containing\n                   [tokens,    params,    unique_tokens]\n      params:      array of length 7 (or shape (T,7) for T sets)\n\n    Returns:\n      preds: shape (N,) if params is (7,), or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N, T = X.shape[0], p_arr.shape[0]\n\n    # unpack raw logs\n    r0, r1, r2, r3, r4, r5, r6 = [p_arr[:, i] for i in range(7)]\n    floor = np.exp(r0)[None, :]   # (1,T)\n    B     = np.exp(r1)[None, :]   # (1,T)\n    alpha = np.exp(r2)[None, :]\n    C     = np.exp(r3)[None, :]\n    beta  = np.exp(r4)[None, :]\n    D     = np.exp(r5)[None, :]\n    gamma = np.exp(r6)[None, :]\n\n    # shape (N,T)\n    pred = (\n        floor\n        + B * (tkn[:, None] ** (-alpha))\n        + C * (prm[:, None] ** (-beta))\n        + D * (ut[:, None]  ** (-gamma))\n    )\n\n    # if only one parameter\u2010set, collapse to (N,)\n    if T == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error in original loss space, but using a\n    robust 'soft_l1' loss to reduce sensitivity to outliers.\n\n    Initialization strategy:\n      - floor \u2248 log(min positive loss)\n      - split (max-min) equally into 3 amplitudes\n      - start all exponents at 1.0\n    Returns:\n      array of 7 optimized raw log-parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for fit\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback to trivial initialization\n        base = np.mean(y) if y.size else 1.0\n        return np.array([\n            np.log(base),   # floor\n            0.,  np.log(1.),  # B, alpha\n            0.,  np.log(1.),  # C, beta\n            0.,  np.log(1.)   # D, gamma\n        ])\n\n    min_y = np.min(y_fit)\n    max_y = np.max(y_fit)\n    total_amp = max(max_y - min_y, 1e-8)\n\n    # raw\u2010log initial guesses\n    r0 = np.log(min_y + 1e-8)            # floor\n    amp_init = total_amp / 3.0\n    r1 = np.log(amp_init); r3 = np.log(amp_init); r5 = np.log(amp_init)\n    r2 = np.log(1.0);       r4 = np.log(1.0);       r6 = np.log(1.0)\n\n    init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n    def residuals(raw):\n        return scaling_law_func(X_fit, raw) - y_fit\n\n    sol = least_squares(\n        residuals,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=10000\n    )\n    return sol.x if sol.success else init\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.932)\n\n\n### Inspiration 2 (Score: 182799832890.8077, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (381562595631808630489088.000), Excellent nmae (731199331563.231), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.6265, Type: Alternative)\n```python\nimport numpy as np\n\n# Small constant to avoid log(0)\n_EPS = 1e-12\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Vectorized log\u2013quadratic scaling law with pairwise interactions:\n      z1 = log(tokens), z2 = log(params), z3 = log(unique_tokens)\n      log(loss) = a\n                + b\u00b7z1 + c\u00b7z2 + d\u00b7z3\n                + e\u00b7(z1*z2) + f\u00b7(z1*z3) + g\u00b7(z2*z3)\n      loss = exp(log(loss))\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M outputs)\n                   [a, b, c, d, e, f, g]\n\n    Returns:\n      preds: shape (N,) or (N, M)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # Compute logs of each feature\n    Z = np.log(X + _EPS)                      # (N,3)\n    z1, z2, z3 = Z[:, 0:1], Z[:, 1:2], Z[:, 2:3]\n\n    # Design matrix: [1, z1, z2, z3, z1*z2, z1*z3, z2*z3]\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)                                # (N,7)\n\n    p = np.asarray(params, dtype=float)\n    # Ensure parameters are (M,7)\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.shape[1]}\")\n\n    # log\u2010predictions and back to original space\n    log_pred = F.dot(p.T)                     # (N, M)\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013quadratic scaling law by closed\u2010form\n    ridge regression in log\u2010space. Solves:\n      minimize ||F\u00b7\u03b8 \u2212 log(y)||\u00b2 + \u03b1||\u03b8||\u00b2\n    where F = [1, z1, z2, z3, z1*z2, z1*z3, z2*z3].\n\n    Returns:\n      params_opt: array of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # Keep only strictly positive losses\n    mask = y > 0\n    X, y = X[mask], y[mask]\n\n    # Compute log\u2010features\n    Z = np.log(X + _EPS)\n    z1, z2, z3 = Z[:, 0:1], Z[:, 1:2], Z[:, 2:3]\n\n    # Build design matrix F\n    F = np.concatenate([\n        np.ones_like(z1),\n        z1, z2, z3,\n        z1 * z2, z1 * z3, z2 * z3\n    ], axis=1)                                # (N,7)\n\n    # Closed\u2010form ridge regression: (F^T F + \u03b1I) \u03b8 = F^T log(y)\n    FtF = F.T.dot(F)                          # (7,7)\n    # Regularization proportional to average variance\n    alpha = 1e-6 * np.trace(FtF) / FtF.shape[0]\n    A = FtF + alpha * np.eye(FtF.shape[0])\n    b = F.T.dot(np.log(y + _EPS))\n\n    params_opt = np.linalg.solve(A, b)        # (7,)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative power-law with asymptotic floor:\n      loss \u2248 L_inf + A * tokens^b * params^c * unique^d\n\n    params: [L_inf, logA, b, c, d] (5 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    if len(params) != 5:\n        raise ValueError(f\"Expected 5 parameters [L_inf, logA, b, c, d], got {len(params)}\")\n    L_inf, logA, b, c, d = params\n\n    # avoid zeros in bases\n    tokens       = X[:, 0] + 1e-12\n    params_count = X[:, 1] + 1e-12\n    unique_toks  = X[:, 2] + 1e-12\n\n    A = np.exp(logA)\n    # compute prediction\n    pred = L_inf + A * np.power(tokens, b) * np.power(params_count, c) * np.power(unique_toks, d)\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in log-space:\n      loss_pred = L_inf + A * tokens^b * params^c * unique^d\n    Returns optimized parameters [L_inf, logA, b, c, d].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for log-domain fitting\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback if no positive examples\n        return np.zeros(5, dtype=float)\n\n    # initialize floor between 0 and minimum observed loss\n    y_min, y_max = np.min(y_fit), np.max(y_fit)\n    L_inf_init = max(0.0, 0.5 * y_min)\n\n    # amplitude init via log of difference\n    span = max(y_max - L_inf_init, 1e-3 * y_max)\n    logA_init = np.log(span)\n\n    # small negative exponents as default (decay behavior)\n    b_init, c_init, d_init = -0.3, -0.3, -0.3\n\n    init_params = np.array([L_inf_init, logA_init, b_init, c_init, d_init], dtype=float)\n\n    # bounds to ensure a valid floor and reasonable exponents\n    bounds = [\n        (0.0, y_min),    # L_inf \u2208 [0, min(y)]\n        (None, None),    # logA unconstrained\n        (-5.0, 5.0),     # b\n        (-5.0, 5.0),     # c\n        (-5.0, 5.0),     # d\n    ]\n\n    eps = 1e-12\n    def objective(p):\n        y_pred = scaling_law_func(X_fit, p)\n        # clamp positives for log\n        y_pred = np.maximum(y_pred, eps)\n        return np.mean((np.log(y_pred) - np.log(y_fit + eps))**2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law with small offset saturation:\n      loss = C0\n           + K * (tokens + A)^(-alpha)\n                 * (params) ^(-beta)\n                 * (unique_tokens + B)^(-gamma)\n\n    params: length-7 array [C0, K, alpha, beta, gamma, A, B]\n      C0    : asymptotic floor \u2265 0\n      K     : amplitude > 0\n      alpha : token exponent \u2265 0\n      beta  : model-size exponent \u2265 0\n      gamma : uniq-token exponent \u2265 0\n      A     : token offset \u2265 0\n      B     : unique-token offset \u2265 0\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must have length 7: [C0,K,alpha,beta,gamma,A,B]\")\n    C0, K, alpha, beta, gamma, A, B = p\n\n    # ensure valid domains\n    eps = 1e-12\n    tkn = X[:, 0] + max(A, 0.0) + eps\n    mdl = np.maximum(X[:, 1], eps)\n    uniq = X[:, 2] + max(B, 0.0) + eps\n\n    # compute prediction\n    return C0 + K * (tkn ** (-alpha)) * (mdl ** (-beta)) * (uniq ** (-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law by minimizing MSE in log-space:\n      minimize mean[(log(pred) - log(actual))^2]\n    Returns optimized params [C0, K, alpha, beta, gamma, A, B].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # keep only positive losses for log fitting\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback default\n        return np.array([0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0], dtype=float)\n\n    # initial C0: just below minimal observed loss\n    C0_0 = max(0.0, np.min(y_fit) * 0.9)\n    # shift targets\n    y_shift = y_fit - C0_0 + 1e-12\n\n    # linearize: log(y_shift) \u2248 log(K) - alpha\u00b7log(tkn+A) - beta\u00b7log(mdl) - gamma\u00b7log(uniq+B)\n    tkn = X_fit[:, 0]\n    mdl = X_fit[:, 1]\n    uniq = X_fit[:, 2]\n    eps = 1e-12\n\n    # build regression matrix\n    F = np.vstack([\n        -np.log(tkn + np.mean(tkn)*0.01 + eps),\n        -np.log(mdl + eps),\n        -np.log(uniq + np.mean(uniq)*0.01 + eps),\n        np.ones_like(y_shift)\n    ]).T  # shape (N,4)\n\n    # solve least squares for [alpha, beta, gamma, logK]\n    sol_coef, *_ = np.linalg.lstsq(F, np.log(y_shift), rcond=None)\n    alpha0, beta0, gamma0, logK0 = sol_coef\n    K0 = np.exp(logK0)\n\n    # offsets init small fraction of mean scales\n    A0 = np.mean(tkn) * 0.01\n    B0 = np.mean(uniq) * 0.01\n\n    init = np.array([C0_0, K0, alpha0, beta0, gamma0, A0, B0], dtype=float)\n\n    # bounds to enforce positivity where needed\n    bounds = [\n        (0.0, None),      # C0 \u2265 0\n        (1e-12, None),    # K  > 0\n        (0.0, None),      # alpha \u2265 0\n        (0.0, None),      # beta \u2265 0\n        (0.0, None),      # gamma \u2265 0\n        (0.0, None),      # A \u2265 0\n        (0.0, None),      # B \u2265 0\n    ]\n\n    def obj(p):\n        pred = scaling_law_func(X_fit, p)\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(y_fit + eps))**2)\n\n    res = minimize(obj, init, method=\"L-BFGS-B\", bounds=bounds,\n                   options={'ftol':1e-9, 'gtol':1e-9})\n    return res.x if res.success else init\n# EVOLVE-BLOCK-END\n```"]}}}