{"id": "abc99ee3-e5d9-4edd-bcc8-3d693247fe47", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      loss \u2248 floor\n             + B * tokens^(\u2212alpha)\n             + C * params^(\u2212beta)\n             + D * unique_tokens^(\u2212gamma)\n\n    To guarantee positivity of floor, amplitudes and exponents,\n    we internally represent all seven as raw logs:\n      [r0..r6] \u2192 floor = exp(r0), B = exp(r1), alpha = exp(r2), etc.\n\n    Inputs:\n      data_points: array-like of shape (N,3) containing\n                   [tokens,    params,    unique_tokens]\n      params:      array of length 7 (or shape (T,7) for T sets)\n\n    Returns:\n      preds: shape (N,) if params is (7,), or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N, T = X.shape[0], p_arr.shape[0]\n\n    # unpack raw logs\n    r0, r1, r2, r3, r4, r5, r6 = [p_arr[:, i] for i in range(7)]\n    floor = np.exp(r0)[None, :]   # (1,T)\n    B     = np.exp(r1)[None, :]   # (1,T)\n    alpha = np.exp(r2)[None, :]\n    C     = np.exp(r3)[None, :]\n    beta  = np.exp(r4)[None, :]\n    D     = np.exp(r5)[None, :]\n    gamma = np.exp(r6)[None, :]\n\n    # shape (N,T)\n    pred = (\n        floor\n        + B * (tkn[:, None] ** (-alpha))\n        + C * (prm[:, None] ** (-beta))\n        + D * (ut[:, None]  ** (-gamma))\n    )\n\n    # if only one parameter\u2010set, collapse to (N,)\n    if T == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error in original loss space, but using a\n    robust 'soft_l1' loss to reduce sensitivity to outliers.\n\n    Initialization strategy:\n      - floor \u2248 log(min positive loss)\n      - split (max-min) equally into 3 amplitudes\n      - start all exponents at 1.0\n    Returns:\n      array of 7 optimized raw log-parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for fit\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback to trivial initialization\n        base = np.mean(y) if y.size else 1.0\n        return np.array([\n            np.log(base),   # floor\n            0.,  np.log(1.),  # B, alpha\n            0.,  np.log(1.),  # C, beta\n            0.,  np.log(1.)   # D, gamma\n        ])\n\n    min_y = np.min(y_fit)\n    max_y = np.max(y_fit)\n    total_amp = max(max_y - min_y, 1e-8)\n\n    # raw\u2010log initial guesses\n    r0 = np.log(min_y + 1e-8)            # floor\n    amp_init = total_amp / 3.0\n    r1 = np.log(amp_init); r3 = np.log(amp_init); r5 = np.log(amp_init)\n    r2 = np.log(1.0);       r4 = np.log(1.0);       r6 = np.log(1.0)\n\n    init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n    def residuals(raw):\n        return scaling_law_func(X_fit, raw) - y_fit\n\n    sol = least_squares(\n        residuals,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=10000\n    )\n    return sol.x if sol.success else init", "language": "python", "parent_id": "3afdfec5-f00c-4163-836e-3f3456d80c16", "generation": 2, "timestamp": 1754715186.560381, "iteration_found": 38, "metrics": {"nmse": 0.06821953645291765, "nmae": 0.3949090988961268, "r2": 0.9317804635470823, "combined_score": 0.9361371570871616}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.19535599982572563, "nmae": 0.48421645527133944, "r2": 0.8046440001742744, "combined_score": 0.8365708626934509}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1954\n- nmae: 0.4842\n- r2: 0.8046\n- combined_score: 0.8366\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2671, nmae: 0.4466, r2: 0.7329, combined_score: 0.7892\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0859, nmae: 0.4457, r2: 0.9141, combined_score: 0.9209\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5916)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as:\n      loss = floor + B * tokens^{\u2212alpha} + C * params^{\u2212beta} + D * unique_tokens^{\u2212gamma}\n\n    We pack seven raw parameters [r0..r6], exponentiate for positivity:\n      floor = exp(r0)\n      B     = exp(r1), alpha = exp(r2)\n      C     = exp(r3), beta  = exp(r4)\n      D     = exp(r5), gamma = exp(r6)\n\n    Inputs:\n      data_points: (N,3) array [[tokens, params, unique_tokens], ...]\n      params:      (7,) or (T,7) array of raw log-parameters\n\n    Returns:\n      preds: (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zero\u2010 or negative\u2010power issues\n    tkn = np.maximum(X[:, 0], 1e-12)\n    prm = np.maximum(X[:, 1], 1e-12)\n    ut  = np.maximum(X[:, 2], 1e-12)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N, T = X.shape[0], p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        floor = np.exp(r0)\n        B     = np.exp(r1); alpha = np.exp(r2)\n        C     = np.exp(r3); beta  = np.exp(r4)\n        D     = np.exp(r5); gamma = np.exp(r6)\n\n        preds[:, i] = floor \\\n                      + B * tkn**(-alpha) \\\n                      + C * prm**(-beta) \\\n                      + D * ut**(-gamma)\n\n    # return shape (N,) if single parameter vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] by minimizing squared error:\n      target_loss \u2248 scaling_law_func(data_points, raw_params)\n\n    Initialization:\n      - r0 from log(min_loss)\n      - split (max_loss-min_loss) equally into B,C,D amps\n      - decay exponents alpha,beta,gamma start at 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # keep only positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n\n    min_y = np.min(y_fit)\n    max_y = np.max(y_fit)\n    total_amp = max(max_y - min_y, 1e-8)\n\n    # initialize raw parameters\n    r0 = np.log(min_y + 1e-8)\n    amp0 = total_amp / 3.0\n    init = np.array([\n        r0,            # floor\n        np.log(amp0),  # B\n        np.log(1.0),   # alpha\n        np.log(amp0),  # C\n        np.log(1.0),   # beta\n        np.log(amp0),  # D\n        np.log(1.0)    # gamma\n    ], dtype=float)\n\n    def residuals(raw):\n        return scaling_law_func(X_fit, raw) - y_fit\n\n    sol = least_squares(\n        residuals,\n        init,\n        method='lm',\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=10000\n    )\n    return sol.x if sol.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0859), Performs well on nmae (0.4457), Performs well on r2 (0.9141), Performs well on combined_score (0.9209)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5590)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Coupled power\u2010law scaling with asymptotic floor:\n      loss \u2248 L_inf\n             + M * tokens^(\u2013alpha) * params_count^(\u2013beta) * unique_tokens^(\u2013gamma)\n\n    params: [L_inf, M, alpha, beta, gamma] (5 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if len(params) != 5:\n        raise ValueError(\n            f\"Expected 5 parameters [L_inf, M, alpha, beta, gamma], got {len(params)}\"\n        )\n    L_inf, M, alpha, beta, gamma = params\n\n    # avoid zero\u2010division\n    tokens       = X[:, 0] + 1e-12\n    params_count = X[:, 1] + 1e-12\n    unique_toks  = X[:, 2] + 1e-12\n\n    # coupled power\u2010law form\n    pred = (\n        L_inf\n        + M\n          * np.power(tokens,       -alpha)\n          * np.power(params_count, -beta)\n          * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5\u2010parameter coupled power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, M, alpha, beta, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # shape (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # shape (N,)\n    N = y.shape[0]\n\n    # 1) Initialize L_inf as a small fraction of minimum observed loss\n    y_min = np.min(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n\n    # 2) Prepare adjusted targets for linearization\n    eps = 1e-12\n    y_adj = y - L_inf_init\n    mask = y_adj > eps\n    if mask.sum() >= 3:\n        X2 = X[mask]\n        y2 = y_adj[mask] + eps\n        # logs of features\n        log_t = np.log(X2[:, 0] + eps)\n        log_p = np.log(X2[:, 1] + eps)\n        log_u = np.log(X2[:, 2] + eps)\n        log_y = np.log(y2)\n        # design matrix for: log_y = log M - alpha\u00b7log_t - beta\u00b7log_p - gamma\u00b7log_u\n        D = np.column_stack([np.ones_like(log_y), -log_t, -log_p, -log_u])\n        theta, *_ = np.linalg.lstsq(D, log_y, rcond=None)\n        logM_init = theta[0]\n        alpha_init = max(0.0, theta[1])\n        beta_init  = max(0.0, theta[2])\n        gamma_init = max(0.0, theta[3])\n        M_init = max(eps, np.exp(logM_init))\n    else:\n        # fallback defaults if too few positive residuals\n        alpha_init = beta_init = gamma_init = 0.5\n        M_init = max(eps, np.mean(y))\n\n    init_params = np.array([\n        L_inf_init,\n        M_init,\n        alpha_init,\n        beta_init,\n        gamma_init\n    ], dtype=float)\n\n    # enforce non\u2010negative parameters\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # M\n        (0.0, None),  # alpha\n        (0.0, None),  # beta\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2671), Performs well on nmae (0.4466), Performs well on r2 (0.7329), Performs well on combined_score (0.7892)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.1263)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.1263)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5916, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as:\n      loss = floor + B * tokens^{\u2212alpha} + C * params^{\u2212beta} + D * unique_tokens^{\u2212gamma}\n\n    We pack seven raw parameters [r0..r6], exponentiate for positivity:\n      floor = exp(r0)\n      B     = exp(r1), alpha = exp(r2)\n      C     = exp(r3), beta  = exp(r4)\n      D     = exp(r5), gamma = exp(r6)\n\n    Inputs:\n      data_points: (N,3) array [[tokens, params, unique_tokens], ...]\n      params:      (7,) or (T,7) array of raw log-parameters\n\n    Returns:\n      preds: (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zero\u2010 or negative\u2010power issues\n    tkn = np.maximum(X[:, 0], 1e-12)\n    prm = np.maximum(X[:, 1], 1e-12)\n    ut  = np.maximum(X[:, 2], 1e-12)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N, T = X.shape[0], p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        floor = np.exp(r0)\n        B     = np.exp(r1); alpha = np.exp(r2)\n        C     = np.exp(r3); beta  = np.exp(r4)\n        D     = np.exp(r5); gamma = np.exp(r6)\n\n        preds[:, i] = floor \\\n                      + B * tkn**(-alpha) \\\n                      + C * prm**(-beta) \\\n                      + D * ut**(-gamma)\n\n    # return shape (N,) if single parameter vector\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] by minimizing squared error:\n      target_loss \u2248 scaling_law_func(data_points, raw_params)\n\n    Initialization:\n      - r0 from log(min_loss)\n      - split (max_loss-min_loss) equally into B,C,D amps\n      - decay exponents alpha,beta,gamma start at 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # keep only positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n\n    min_y = np.min(y_fit)\n    max_y = np.max(y_fit)\n    total_amp = max(max_y - min_y, 1e-8)\n\n    # initialize raw parameters\n    r0 = np.log(min_y + 1e-8)\n    amp0 = total_amp / 3.0\n    init = np.array([\n        r0,            # floor\n        np.log(amp0),  # B\n        np.log(1.0),   # alpha\n        np.log(amp0),  # C\n        np.log(1.0),   # beta\n        np.log(amp0),  # D\n        np.log(1.0)    # gamma\n    ], dtype=float)\n\n    def residuals(raw):\n        return scaling_law_func(X_fit, raw) - y_fit\n\n    sol = least_squares(\n        residuals,\n        init,\n        method='lm',\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=10000\n    )\n    return sol.x if sol.success else init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent r2 (0.914)\n\n\n### Inspiration 2 (Score: 1.1263, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a revised version of the two functions.  We switch to a 7-parameter \u201casymptotic floor + three independent power\u2010law decays\u201d form, fit all seven raw parameters in log\u2010space via a robust Levenberg\u2013Marquardt/Trust\u2010Region\u2010Reflective solver, and ensure numerical stability via small epsilons.  This form typically gives better fit across a wide range of data scales while remaining parameter\u2010efficient.\n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      loss \u2248 floor\n             + B * tokens^(\u2212alpha)\n             + C * params^(\u2212beta)\n             + D * unique_tokens^(\u2212gamma)\n\n    To guarantee positivity of floor, amplitudes and exponents,\n    we internally represent all seven as raw logs:\n      [r0..r6] \u2192 floor = exp(r0), B = exp(r1), alpha = exp(r2), etc.\n\n    Inputs:\n      data_points: array-like of shape (N,3) containing\n                   [tokens,    params,    unique_tokens]\n      params:      array of length 7 (or shape (T,7) for T sets)\n\n    Returns:\n      preds: shape (N,) if params is (7,), or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N, T = X.shape[0], p_arr.shape[0]\n\n    # unpack raw logs\n    r0, r1, r2, r3, r4, r5, r6 = [p_arr[:, i] for i in range(7)]\n    floor = np.exp(r0)[None, :]   # (1,T)\n    B     = np.exp(r1)[None, :]   # (1,T)\n    alpha = np.exp(r2)[None, :]\n    C     = np.exp(r3)[None, :]\n    beta  = np.exp(r4)[None, :]\n    D     = np.exp(r5)[None, :]\n    gamma = np.exp(r6)[None, :]\n\n    # shape (N,T)\n    pred = (\n        floor\n        + B * (tkn[:, None] ** (-alpha))\n        + C * (prm[:, None] ** (-beta))\n        + D * (ut[:, None]  ** (-gamma))\n    )\n\n    # if only one parameter\u2010set, collapse to (N,)\n    if T == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error in original loss space, but using a\n    robust 'soft_l1' loss to reduce sensitivity to outliers.\n\n    Initialization strategy:\n      - floor \u2248 log(min positive loss)\n      - split (max-min) equally into 3 amplitudes\n      - start all exponents at 1.0\n    Returns:\n      array of 7 optimized raw log-parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for fit\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback to trivial initialization\n        base = np.mean(y) if y.size else 1.0\n        return np.array([\n            np.log(base),   # floor\n            0.,  np.log(1.),  # B, alpha\n            0.,  np.log(1.),  # C, beta\n            0.,  np.log(1.)   # D, gamma\n        ])\n\n    min_y = np.min(y_fit)\n    max_y = np.max(y_fit)\n    total_amp = max(max_y - min_y, 1e-8)\n\n    # raw\u2010log initial guesses\n    r0 = np.log(min_y + 1e-8)            # floor\n    amp_init = total_amp / 3.0\n    r1 = np.log(amp_init); r3 = np.log(amp_init); r5 = np.log(amp_init)\n    r2 = np.log(1.0);       r4 = np.log(1.0);       r6 = np.log(1.0)\n\n    init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n    def residuals(raw):\n        return scaling_law_func(X_fit, raw) - y_fit\n\n    sol = least_squares(\n        residuals,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=10000\n    )\n    return sol.x if sol.success else init\n```\n\nExplanation of key changes:\n- We moved from a simple 4-parameter log-linear law to a 7-parameter \u201cfloor + three independent power laws\u201d law, which is significantly more flexible across wide data/model scales.\n- All seven parameters are stored internally in log-space to enforce strict positivity (for floor, amplitudes and exponents) without bounds.\n- We use `scipy.optimize.least_squares` with the \u201csoft_l1\u201d loss for robustness against outliers, and the \u201ctrf\u201d solver for good numerical stability.\n- Initialization is based on the observed min/max of the positive losses, splitting the dynamic range evenly among the three decay amplitudes and starting exponents at 1.\n- We guard against zero tokens/parameters/unique_tokens and zero losses via small epsilons for full numerical safety."]}}}