{"id": "69bb4790-fc16-40ac-9b5e-d59ce57aea8d", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict scalar loss from features [tokens, params, unique_tokens]\n    using an additive floor plus three decaying power\u2010law terms.\n\n    data_points: array-like, shape (N,3)\n    params:      array-like, shape (7,) or (M,7)\n                 raw parameters [r0, r1, r2, r3, r4, r5, r6] where\n                   r0: log floor\n                   r1: log amp_tokens\n                   r2: log decay_tokens\n                   r3: log amp_params\n                   r4: log decay_params\n                   r5: log amp_unique\n                   r6: log decay_unique\n    Returns:\n      preds: array, shape (N,) if params is (7,), or (N,M) if params is (M,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # avoid zeros in power-law\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    # unpack raw parameters\n    r0 = p[:, 0]  # log floor\n    r1 = p[:, 1]; r2 = p[:, 2]  # amp_t, decay_t\n    r3 = p[:, 3]; r4 = p[:, 4]  # amp_p, decay_p\n    r5 = p[:, 5]; r6 = p[:, 6]  # amp_u, decay_u\n\n    # transform to positive domain\n    floor    = np.exp(r0)[None, :]          # shape (1,M)\n    amp_t    = np.exp(r1)[None, :]; decay_t = np.exp(r2)[None, :]\n    amp_p    = np.exp(r3)[None, :]; decay_p = np.exp(r4)[None, :]\n    amp_u    = np.exp(r5)[None, :]; decay_u = np.exp(r6)[None, :]\n\n    # compute decaying power-law contributions\n    # shape (N,M)\n    ct = amp_t * np.power(tkn[:, None], -decay_t)\n    cp = amp_p * np.power(prm[:, None], -decay_p)\n    cu = amp_u * np.power( ut[:, None], -decay_u)\n\n    preds = floor + ct + cp + cu  # (N, M)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing robust squared error in log-space:\n      minimize || log(pred + eps) - log(y + eps) ||\u2082\n    Returns optimized raw parameters of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # separate positive losses for log-domain fitting\n    eps = 1e-12\n    mask = y > eps\n    if np.any(mask):\n        X_fit = X[mask]\n        y_fit = y[mask]\n    else:\n        # fallback if no strictly positive losses\n        X_fit = X\n        y_fit = y + eps\n\n    # initialize raw parameters\n    y_min  = np.min(y_fit)\n    y_mean = np.mean(y_fit)\n    # floor slightly below min observed\n    init_r0 = np.log(max(y_min * 0.9, eps))\n    resid    = max(y_mean - np.exp(init_r0), eps)\n    amp0     = resid / 3.0\n    init_r1  = np.log(max(amp0, eps))\n    init_r3  = np.log(max(amp0, eps))\n    init_r5  = np.log(max(amp0, eps))\n    # moderate initial decays\n    init_r2 = np.log(0.5)\n    init_r4 = np.log(0.5)\n    init_r6 = np.log(0.5)\n\n    init = np.array([\n        init_r0, init_r1, init_r2,\n        init_r3, init_r4, init_r5, init_r6\n    ], dtype=float)\n\n    # residual in log-space\n    def resid_fn(raw):\n        pred = scaling_law_func(X_fit, raw)\n        return np.log(pred + eps) - np.log(y_fit + eps)\n\n    # robust non-linear least squares\n    sol = least_squares(\n        resid_fn,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n    return sol.x if sol.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "204adc4e-4681-404f-8cd6-75a26b5d22cf", "generation": 3, "timestamp": 1754715259.21638, "iteration_found": 46, "metrics": {"nmse": 0.06179341584501227, "nmae": 0.37449261501588815, "r2": 0.9382065841549877, "combined_score": 0.9418027886377174}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 4.784721030193139, "nmae": 3.3322880520845652, "r2": -3.784721030193139, "combined_score": 0.1728691832813608}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 4.7847\n- nmae: 3.3323\n- r2: -3.7847\n- combined_score: 0.1729\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.1953, nmae: 0.4842, r2: 0.8047, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0405, nmae: 0.2982, r2: 0.9595, combined_score: 0.9610\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5648)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict scalar loss from features [tokens, params, unique_tokens]\n    using a sum of three decaying power\u2010law terms plus an asymptotic floor.\n\n    data_points: array\u2010like of shape (N,3)\n    params:      array\u2010like of shape (7,) or (T,7) containing raw parameters\n                 r0: log(floor)\n                 r1: log(amp_tokens), r2: log(decay_tokens)\n                 r3: log(amp_params), r4: log(decay_params)\n                 r5: log(amp_unique), r6: log(decay_unique)\n    returns:     predicted loss of shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # clamp inputs to avoid zero/div\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]    # (1,7)\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(\"Expected params of length 7, got shape %s\" % (p.shape,))\n\n    # unpack raw parameters\n    r0 = p[:, 0]   # floor log\n    r1 = p[:, 1]; r2 = p[:, 2]\n    r3 = p[:, 3]; r4 = p[:, 4]\n    r5 = p[:, 5]; r6 = p[:, 6]\n\n    # transform to positive\n    floor = np.exp(r0)              # (T,)\n    amp_t = np.exp(r1); decay_t = np.exp(r2)\n    amp_p = np.exp(r3); decay_p = np.exp(r4)\n    amp_u = np.exp(r5); decay_u = np.exp(r6)\n\n    # compute power\u2010law decays\n    # shape (N,T)\n    ct = amp_t[None, :] * tkn[:, None] ** (-decay_t[None, :])\n    cp = amp_p[None, :] * prm[:, None] ** (-decay_p[None, :])\n    cu = amp_u[None, :] * ut[:, None]  ** (-decay_u[None, :])\n\n    preds = floor[None, :] + ct + cp + cu\n\n    # return (N,) if single param\u2010vector\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing robust squared error.\n\n    data_points: (N,3), loss_values: (N,)\n    returns:      array of length 7 (optimized raw parameters)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N = X.shape[0]\n    if y.shape[0] != N:\n        raise ValueError(\"Mismatched data_points and loss_values lengths\")\n\n    # initial raw parameters\n    y_min, y_mean = np.min(y), np.mean(y)\n    # floor below min to allow slight below\n    init_r0 = np.log(max(y_min * 0.9, 1e-8))\n    # split residual equally across three amplitudes\n    resid = max(y_mean - np.exp(init_r0), 1e-8)\n    amp0 = resid / 3.0\n    init_r1 = np.log(max(amp0, 1e-8))\n    init_r3 = np.log(max(amp0, 1e-8))\n    init_r5 = np.log(max(amp0, 1e-8))\n    # initial decays moderate (power -0.5)\n    init_r2 = np.log(0.5)\n    init_r4 = np.log(0.5)\n    init_r6 = np.log(0.5)\n\n    init = np.array([init_r0, init_r1, init_r2,\n                     init_r3, init_r4, init_r5, init_r6], dtype=float)\n\n    # define residuals function\n    def resid_fn(raw):\n        pred = scaling_law_func(X, raw)\n        return pred - y\n\n    # robust non\u2010linear least squares\n    sol = least_squares(\n        resid_fn,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n\n    raw_opt = sol.x if sol.success else init\n    return raw_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0405), Performs well on nmae (0.2982), Performs well on r2 (0.9595), Performs well on combined_score (0.9610)\n\n\n### Program 2 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Shifted power-law scaling with 7 parameters:\n      loss = exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    Parameters (length-7):\n      [log_a, b, c, d, k0, k1, k2]\n      where t0 = exp(k0), p0 = exp(k1), u0 = exp(k2).\n\n    Inputs:\n      data_points: array of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M sets of params)\n    Returns:\n      preds: array of shape (N,) if single param set, or (N,M) otherwise.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    # allow batch of parameter sets\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    tokens      = X[:, 0]\n    model_params = X[:, 1]\n    uniq        = X[:, 2]\n    N = X.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Vectorized over parameter sets\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p[i]\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n\n        # compute in log\u2010space for stability\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(model_params + p0)\n            - d * np.log(uniq + u0)\n        )\n        # clip to avoid overflow/underflow\n        y_log = np.clip(y_log, -50.0, 50.0)\n        preds[:, i] = np.exp(y_log)\n\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter shifted-power-law by minimizing\n    mean squared error in log-loss space:\n      minimize mean((log(pred) - log(y))^2)\n\n    Returns optimized params [log_a, b, c, d, k0, k1, k2].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] == 0:\n        raise ValueError(\"No positive loss values to fit.\")\n\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(y))\n    #   b, c, d = 0.5\n    #   k0, k1, k2 = 0 (=> t0=p0=u0=1)\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: enforce non-negative exponents b,c,d; shifts & log_a unconstrained\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n        (None, None),  # k0\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X_fit, p)\n        # ensure positivity\n        eps = 1e-12\n        log_pred = np.log(np.clip(pred, eps, None))\n        resid = log_pred - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        objective,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-8, \"maxiter\": 1000},\n    )\n    return res.x if res.success else init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1953), Performs well on nmae (0.4842), Performs well on r2 (0.8047), Performs well on combined_score (0.8366)\n\n\n### Program 3 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6621)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^(\u2010alpha)\n             + B * params_count^(\u2010beta)\n             + C * unique_tokens^(\u2010gamma)\n\n    params: [L_inf, A, alpha, B, beta, C, gamma] (7 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N, 3)\n    if len(params) != 7:\n        raise ValueError(f\"Expected 7 parameters [L_inf, A, alpha, B, beta, C, gamma], got {len(params)}\")\n    L_inf, A, alpha, B, beta, C, gamma = params\n\n    tokens        = X[:, 0]\n    params_count  = X[:, 1]\n    unique_toks   = X[:, 2]\n\n    # Compute the predicted loss as the sum of three decaying power\u2010laws plus an asymptotic floor\n    pred = (\n        L_inf\n        + A * np.power(tokens,       -alpha)\n        + B * np.power(params_count, -beta)\n        + C * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter asymptotic power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, A, alpha, B, beta, C, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # (N,)\n\n    # Initialize parameters based on observed range of y\n    y_min, y_max = np.min(y), np.max(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n    span = y_max - y_min\n    A_init = span / 3.0\n    B_init = span / 3.0\n    C_init = span / 3.0\n    alpha_init = beta_init = gamma_init = 0.5\n\n    init_params = np.array([\n        L_inf_init,\n        A_init,   alpha_init,\n        B_init,   beta_init,\n        C_init,   gamma_init,\n    ], dtype=float)\n\n    # Bounds: ensure non\u2010negativity of floor, amplitudes, and exponents\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # A\n        (0.0, None),  # alpha\n        (0.0, None),  # B\n        (0.0, None),  # beta\n        (0.0, None),  # C\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6203)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    mparams = np.maximum(X[:, 1], eps)\n    unique = np.maximum(X[:, 2], eps)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in log-space of predictions vs targets.\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positivity\n    eps = 1e-12\n    y = np.maximum(y, eps)\n\n    # initial floor guess: a fraction of minimum observed loss\n    min_y = np.min(y)\n    mean_y = np.mean(y)\n    C0_0 = max(min_y * 0.5, 0.0)\n    # initial scale from residual above floor\n    C1_0 = max(mean_y - C0_0, eps)\n\n    # initial exponents via log-linear regression (without floor)\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    # translate linear fit: log(y) \u2248 a + b\u00b7log(tokens)+c\u00b7log(params)+d\u00b7log(unique)\n    # we want C1*tokens^{-\u03b1}... so \u03b1 = -b etc.\n    _, b0, c0, d0 = beta_lin\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # bounds to keep floor \u2264 min_y and all non-negative\n    bounds = [\n        (0.0, min_y),    # C0\n        (eps, None),     # C1\n        (0.0, None),     # \u03b1\n        (0.0, None),     # \u03b2\n        (0.0, None),     # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in log-domain to balance relative errors\n        return np.mean((np.log(pred + eps) - np.log(y + eps))**2)\n\n    res = minimize(\n        objective,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\":1e-12, \"gtol\":1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback if optimization fails\n        return p0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5648, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict scalar loss from features [tokens, params, unique_tokens]\n    using a sum of three decaying power\u2010law terms plus an asymptotic floor.\n\n    data_points: array\u2010like of shape (N,3)\n    params:      array\u2010like of shape (7,) or (T,7) containing raw parameters\n                 r0: log(floor)\n                 r1: log(amp_tokens), r2: log(decay_tokens)\n                 r3: log(amp_params), r4: log(decay_params)\n                 r5: log(amp_unique), r6: log(decay_unique)\n    returns:     predicted loss of shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # clamp inputs to avoid zero/div\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]    # (1,7)\n    T, P = p.shape\n    if P != 7:\n        raise ValueError(\"Expected params of length 7, got shape %s\" % (p.shape,))\n\n    # unpack raw parameters\n    r0 = p[:, 0]   # floor log\n    r1 = p[:, 1]; r2 = p[:, 2]\n    r3 = p[:, 3]; r4 = p[:, 4]\n    r5 = p[:, 5]; r6 = p[:, 6]\n\n    # transform to positive\n    floor = np.exp(r0)              # (T,)\n    amp_t = np.exp(r1); decay_t = np.exp(r2)\n    amp_p = np.exp(r3); decay_p = np.exp(r4)\n    amp_u = np.exp(r5); decay_u = np.exp(r6)\n\n    # compute power\u2010law decays\n    # shape (N,T)\n    ct = amp_t[None, :] * tkn[:, None] ** (-decay_t[None, :])\n    cp = amp_p[None, :] * prm[:, None] ** (-decay_p[None, :])\n    cu = amp_u[None, :] * ut[:, None]  ** (-decay_u[None, :])\n\n    preds = floor[None, :] + ct + cp + cu\n\n    # return (N,) if single param\u2010vector\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing robust squared error.\n\n    data_points: (N,3), loss_values: (N,)\n    returns:      array of length 7 (optimized raw parameters)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N = X.shape[0]\n    if y.shape[0] != N:\n        raise ValueError(\"Mismatched data_points and loss_values lengths\")\n\n    # initial raw parameters\n    y_min, y_mean = np.min(y), np.mean(y)\n    # floor below min to allow slight below\n    init_r0 = np.log(max(y_min * 0.9, 1e-8))\n    # split residual equally across three amplitudes\n    resid = max(y_mean - np.exp(init_r0), 1e-8)\n    amp0 = resid / 3.0\n    init_r1 = np.log(max(amp0, 1e-8))\n    init_r3 = np.log(max(amp0, 1e-8))\n    init_r5 = np.log(max(amp0, 1e-8))\n    # initial decays moderate (power -0.5)\n    init_r2 = np.log(0.5)\n    init_r4 = np.log(0.5)\n    init_r6 = np.log(0.5)\n\n    init = np.array([init_r0, init_r1, init_r2,\n                     init_r3, init_r4, init_r5, init_r6], dtype=float)\n\n    # define residuals function\n    def resid_fn(raw):\n        pred = scaling_law_func(X, raw)\n        return pred - y\n\n    # robust non\u2010linear least squares\n    sol = least_squares(\n        resid_fn,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n\n    raw_opt = sol.x if sol.success else init\n    return raw_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 1.0695, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using\n    an additive floor plus three decaying power\u2010law terms.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters [r0..r6]\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have shape (7,) or (T,7)\")\n    # unpack raw\n    r0 = p_arr[:, 0]  # floor\n    r1, r2 = p_arr[:, 1], p_arr[:, 2]  # amp_t, decay_t\n    r3, r4 = p_arr[:, 3], p_arr[:, 4]  # amp_p, decay_p\n    r5, r6 = p_arr[:, 5], p_arr[:, 6]  # amp_u, decay_u\n\n    # exponentiate to ensure positivity\n    floor    = np.exp(r0)[None, :]          # shape (1,T)\n    amp_t    = np.exp(r1)[None, :]; decay_t = np.exp(r2)[None, :]\n    amp_p    = np.exp(r3)[None, :]; decay_p = np.exp(r4)[None, :]\n    amp_u    = np.exp(r5)[None, :]; decay_u = np.exp(r6)[None, :]\n\n    # compute decaying power\u2010law terms\n    # ct[i,k] = amp_t[k] * tkn[i]^(-decay_t[k])\n    log_tkn = np.log(tkn)[:, None]\n    log_prm = np.log(prm)[:, None]\n    log_ut  = np.log(ut)[:, None]\n\n    ct = amp_t * np.exp(-decay_t * log_tkn)\n    cp = amp_p * np.exp(-decay_p * log_prm)\n    cu = amp_u * np.exp(-decay_u * log_ut)\n\n    preds = floor + ct + cp + cu  # shape (N,T)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] by minimizing squared error\n    in log\u2010space: minimize ||log(pred) - log(y)||\u00b2.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    # keep only positive losses\n    eps = 1e-12\n    mask = y > eps\n    X_fit = X[mask]\n    y_fit = y[mask]\n\n    # initial guesses based on simple floor+residual split\n    mean_y = np.mean(y_fit)\n    min_y  = np.min(y_fit)\n    r0 = np.log(min_y + eps)  # floor\n    resid = max(mean_y - min_y, eps)\n    # split equally among three amplitudes\n    amp0 = resid / 3.0\n    r1 = np.log(amp0 + eps); r3 = np.log(amp0 + eps); r5 = np.log(amp0 + eps)\n    # init decays to 1\n    r2 = np.log(1.0); r4 = np.log(1.0); r6 = np.log(1.0)\n    init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n    # residual in log\u2010space\n    def resid_fn(raw):\n        pred = scaling_law_func(X_fit, raw)\n        return np.log(pred + eps) - np.log(y_fit + eps)\n\n    sol = least_squares(\n        resid_fn,\n        init,\n        method='lm',\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n    return sol.x if sol.success else init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.045), Excellent nmae (3.080)\n\n\n### Inspiration 3 (Score: 0.6203, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Enhanced scaling law with an additive floor:\n      loss \u2248 C0 + C1 * tokens^(\u2212\u03b1) * params^(\u2212\u03b2) * unique_tokens^(\u2212\u03b3)\n    where\n      C0 \u2265 0  is an irreducible loss floor,\n      C1 \u2265 0  is an overall scale,\n      \u03b1, \u03b2, \u03b3 \u2265 0 are exponents on tokens, model\u2010params, and unique tokens.\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns\n                   [tokens, params, unique_tokens]\n      params:      array\u2010like of length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\n    Returns:\n      preds:       np.ndarray of shape (N,) with predicted loss\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 5:\n        raise ValueError(\"params must have length 5: [C0, C1, \u03b1, \u03b2, \u03b3]\")\n\n    C0, C1, alpha, beta, gamma = p\n    # Clip inputs to avoid zeros or negatives in power\n    eps = 1e-12\n    tokens = np.maximum(X[:, 0], eps)\n    mparams = np.maximum(X[:, 1], eps)\n    unique = np.maximum(X[:, 2], eps)\n\n    # Compute the scaling\u2010law prediction\n    pred = C0 + C1 * np.power(tokens, -alpha) \\\n                 * np.power(mparams, -beta) \\\n                 * np.power(unique, -gamma)\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law by minimizing the mean squared error\n    in log-space of predictions vs targets.\n    Returns parameters [C0, C1, \u03b1, \u03b2, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positivity\n    eps = 1e-12\n    y = np.maximum(y, eps)\n\n    # initial floor guess: a fraction of minimum observed loss\n    min_y = np.min(y)\n    mean_y = np.mean(y)\n    C0_0 = max(min_y * 0.5, 0.0)\n    # initial scale from residual above floor\n    C1_0 = max(mean_y - C0_0, eps)\n\n    # initial exponents via log-linear regression (without floor)\n    X_log = np.log(np.maximum(X, eps))\n    y_log = np.log(y)\n    D = np.concatenate([np.ones((X_log.shape[0], 1)), X_log], axis=1)\n    beta_lin, *_ = np.linalg.lstsq(D, y_log, rcond=None)\n    # translate linear fit: log(y) \u2248 a + b\u00b7log(tokens)+c\u00b7log(params)+d\u00b7log(unique)\n    # we want C1*tokens^{-\u03b1}... so \u03b1 = -b etc.\n    _, b0, c0, d0 = beta_lin\n    alpha0 = max(-b0, 0.0)\n    beta0  = max(-c0, 0.0)\n    gamma0 = max(-d0, 0.0)\n\n    p0 = np.array([C0_0, C1_0, alpha0, beta0, gamma0], dtype=float)\n\n    # bounds to keep floor \u2264 min_y and all non-negative\n    bounds = [\n        (0.0, min_y),    # C0\n        (eps, None),     # C1\n        (0.0, None),     # \u03b1\n        (0.0, None),     # \u03b2\n        (0.0, None),     # \u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # MSE in log-domain to balance relative errors\n        return np.mean((np.log(pred + eps) - np.log(y + eps))**2)\n\n    res = minimize(\n        objective,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\":1e-12, \"gtol\":1e-12}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # fallback if optimization fails\n        return p0\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Shifted power-law scaling with 7 parameters:\n      loss = exp(log_a)\n             * (tokens + t0)^(-b)\n             * (params + p0)^(-c)\n             * (unique_tokens + u0)^(-d)\n\n    Parameters (length-7):\n      [log_a, b, c, d, k0, k1, k2]\n      where t0 = exp(k0), p0 = exp(k1), u0 = exp(k2).\n\n    Inputs:\n      data_points: array of shape (N,3) with columns [tokens, params, unique_tokens]\n      params:      array of length 7 (or shape (M,7) for M sets of params)\n    Returns:\n      preds: array of shape (N,) if single param set, or (N,M) otherwise.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    p = np.asarray(params, dtype=float)\n    # allow batch of parameter sets\n    if p.ndim == 1:\n        p = p[np.newaxis, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    tokens      = X[:, 0]\n    model_params = X[:, 1]\n    uniq        = X[:, 2]\n    N = X.shape[0]\n    preds = np.zeros((N, M), dtype=float)\n\n    # Vectorized over parameter sets\n    for i in range(M):\n        log_a, b, c, d, k0, k1, k2 = p[i]\n        t0 = np.exp(k0)\n        p0 = np.exp(k1)\n        u0 = np.exp(k2)\n\n        # compute in log\u2010space for stability\n        y_log = (\n            log_a\n            - b * np.log(tokens + t0)\n            - c * np.log(model_params + p0)\n            - d * np.log(uniq + u0)\n        )\n        # clip to avoid overflow/underflow\n        y_log = np.clip(y_log, -50.0, 50.0)\n        preds[:, i] = np.exp(y_log)\n\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter shifted-power-law by minimizing\n    mean squared error in log-loss space:\n      minimize mean((log(pred) - log(y))^2)\n\n    Returns optimized params [log_a, b, c, d, k0, k1, k2].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n    # only positive losses can be log\u2010transformed\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if X_fit.shape[0] == 0:\n        raise ValueError(\"No positive loss values to fit.\")\n\n    y_log = np.log(y_fit)\n\n    # Initial guess:\n    #   log_a = log(mean(y))\n    #   b, c, d = 0.5\n    #   k0, k1, k2 = 0 (=> t0=p0=u0=1)\n    init = np.zeros(7, dtype=float)\n    init[0] = np.log(np.mean(y_fit))\n    init[1:4] = 0.5\n    init[4:7] = 0.0\n\n    # Bounds: enforce non-negative exponents b,c,d; shifts & log_a unconstrained\n    bounds = [\n        (None, None),  # log_a\n        (0.0, None),   # b\n        (0.0, None),   # c\n        (0.0, None),   # d\n        (None, None),  # k0\n        (None, None),  # k1\n        (None, None),  # k2\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X_fit, p)\n        # ensure positivity\n        eps = 1e-12\n        log_pred = np.log(np.clip(pred, eps, None))\n        resid = log_pred - y_log\n        return np.mean(resid * resid)\n\n    res = minimize(\n        objective,\n        init,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-8, \"maxiter\": 1000},\n    )\n    return res.x if res.success else init\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Sum\u2010of\u2010power\u2010decay scaling law with a floor term:\n      loss \u2248 exp(g0)\n           + exp(a0 - exp(b0)\u00b7log(tokens))\n           + exp(c0 - exp(d0)\u00b7log(params))\n           + exp(e0 - exp(f0)\u00b7log(unique_tokens))\n\n    Parameters (7):\n      a0, b0 \u2192 tokens contribution\n      c0, d0 \u2192 params contribution\n      e0, f0 \u2192 unique_tokens contribution\n      g0      \u2192 floor (minimum loss)\n\n    Inputs:\n      data_points: array of shape (N,3) [tokens, params, unique_tokens]\n      params:      array of length 7 or shape (M,7) for M independent outputs\n\n    Returns:\n      preds: array of shape (N,) (or (N,M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    tokens = X[:, 0] + 1e-12\n    model_params = X[:, 1] + 1e-12\n    unique_toks = X[:, 2] + 1e-12\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # unpack parameters\n    a0 = p[:, 0][None, :]   # (1,M)\n    b0 = p[:, 1][None, :]\n    c0 = p[:, 2][None, :]\n    d0 = p[:, 3][None, :]\n    e0 = p[:, 4][None, :]\n    f0 = p[:, 5][None, :]\n    g0 = p[:, 6][None, :]\n\n    # log\u2010transform inputs\n    lt = np.log(tokens)[:, None]       # (N,1)\n    lp = np.log(model_params)[:, None]\n    lu = np.log(unique_toks)[:, None]\n\n    # compute each decay term\n    term_tokens  = np.exp(a0 - np.exp(b0) * lt)\n    term_params  = np.exp(c0 - np.exp(d0) * lp)\n    term_unique  = np.exp(e0 - np.exp(f0) * lu)\n    floor        = np.exp(g0)           # (1,M)\n\n    pred = term_tokens + term_params + term_unique + floor  # (N,M)\n    return pred[:, 0] if M == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the sum\u2010of\u2010power\u2010decay scaling law by minimizing MSE in loss space.\n    Returns 7 parameters [a0,b0,c0,d0,e0,f0,g0].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter out non\u2010positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n\n    # initialize: zeros for exponents/shifts, floor \u2248 log(mean loss)\n    init = np.zeros(7)\n    if y_fit.size > 0:\n        init[6] = np.log(np.mean(y_fit))\n\n    def objective(p):\n        y_pred = scaling_law_func(X_fit, p)\n        return np.mean((y_pred - y_fit) ** 2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success and res.x.shape == (7,):\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict scalar loss from features [tokens, params, unique_tokens]\n    using an additive floor plus three decaying power\u2010law terms.\n\n    data_points: array-like, shape (N,3)\n    params:      array-like, shape (7,) or (M,7)\n                 raw parameters [r0, r1, r2, r3, r4, r5, r6] where\n                   r0: log floor\n                   r1: log amp_tokens\n                   r2: log decay_tokens\n                   r3: log amp_params\n                   r4: log decay_params\n                   r5: log amp_unique\n                   r6: log decay_unique\n    Returns:\n      preds: array, shape (N,) if params is (7,), or (N,M) if params is (M,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # avoid zeros in power-law\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"Expected 7 parameters, got {P}\")\n\n    # unpack raw parameters\n    r0 = p[:, 0]  # log floor\n    r1 = p[:, 1]; r2 = p[:, 2]  # amp_t, decay_t\n    r3 = p[:, 3]; r4 = p[:, 4]  # amp_p, decay_p\n    r5 = p[:, 5]; r6 = p[:, 6]  # amp_u, decay_u\n\n    # transform to positive domain\n    floor    = np.exp(r0)[None, :]          # shape (1,M)\n    amp_t    = np.exp(r1)[None, :]; decay_t = np.exp(r2)[None, :]\n    amp_p    = np.exp(r3)[None, :]; decay_p = np.exp(r4)[None, :]\n    amp_u    = np.exp(r5)[None, :]; decay_u = np.exp(r6)[None, :]\n\n    # compute decaying power-law contributions\n    # shape (N,M)\n    ct = amp_t * np.power(tkn[:, None], -decay_t)\n    cp = amp_p * np.power(prm[:, None], -decay_p)\n    cu = amp_u * np.power( ut[:, None], -decay_u)\n\n    preds = floor + ct + cp + cu  # (N, M)\n    return preds[:, 0] if M == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing robust squared error in log-space:\n      minimize || log(pred + eps) - log(y + eps) ||\u2082\n    Returns optimized raw parameters of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # separate positive losses for log-domain fitting\n    eps = 1e-12\n    mask = y > eps\n    if np.any(mask):\n        X_fit = X[mask]\n        y_fit = y[mask]\n    else:\n        # fallback if no strictly positive losses\n        X_fit = X\n        y_fit = y + eps\n\n    # initialize raw parameters\n    y_min  = np.min(y_fit)\n    y_mean = np.mean(y_fit)\n    # floor slightly below min observed\n    init_r0 = np.log(max(y_min * 0.9, eps))\n    resid    = max(y_mean - np.exp(init_r0), eps)\n    amp0     = resid / 3.0\n    init_r1  = np.log(max(amp0, eps))\n    init_r3  = np.log(max(amp0, eps))\n    init_r5  = np.log(max(amp0, eps))\n    # moderate initial decays\n    init_r2 = np.log(0.5)\n    init_r4 = np.log(0.5)\n    init_r6 = np.log(0.5)\n\n    init = np.array([\n        init_r0, init_r1, init_r2,\n        init_r3, init_r4, init_r5, init_r6\n    ], dtype=float)\n\n    # residual in log-space\n    def resid_fn(raw):\n        pred = scaling_law_func(X_fit, raw)\n        return np.log(pred + eps) - np.log(y_fit + eps)\n\n    # robust non-linear least squares\n    sol = least_squares(\n        resid_fn,\n        init,\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n    return sol.x if sol.success else init\n# EVOLVE-BLOCK-END\n```"]}}}