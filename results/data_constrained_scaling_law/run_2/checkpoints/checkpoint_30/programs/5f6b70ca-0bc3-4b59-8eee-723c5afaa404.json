{"id": "5f6b70ca-0bc3-4b59-8eee-723c5afaa404", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "45312176-540e-4f37-9feb-c6ac0bb50bd8", "generation": 2, "timestamp": 1754714958.891938, "iteration_found": 12, "metrics": {"nmse": 4.784745606579264, "nmae": 3.3322960292145467, "r2": -3.784745606579264, "combined_score": 0.17286844884979088}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.5779324208027266, "nmae": 0.5471440168088242, "r2": 0.42206757919727345, "combined_score": 0.6337407019568554}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.5779\n- nmae: 0.5471\n- r2: 0.4221\n- combined_score: 0.6337\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.5779, nmae: 0.5471, r2: 0.4221, combined_score: 0.6337\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5452)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\nKey features: Performs well on nmse (0.5779), Performs well on nmae (0.5471), Performs well on r2 (0.4221), Performs well on combined_score (0.6337)\n\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a\n    polynomial-in-log-domain model with up to 7 parameters.\n\n    data_points: (N,3) array\n    params:    either (7,) or (T,7) array of parameters\n    Returns:   (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log\u2010transform each feature for numerical stability\n    eps = 1e-8\n    f1 = np.log(X[:, 0] + eps)   # log tokens\n    f2 = np.log(X[:, 1] + eps)   # log params\n    f3 = np.log(X[:, 2] + eps)   # log unique_tokens\n\n    p_arr = np.asarray(params)\n    if p_arr.ndim == 1:\n        p_arr = p_arr[None, :]  # make it (1,7) if single vector\n    T, P = p_arr.shape\n    if P != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    # model in log-domain:\n    #   y_log = p0\n    #         + p1*f1 + p2*f2 + p3*f3\n    #         + p4*(f1*f2) + p5*(f1*f3) + p6*(f2*f3)\n    # then loss = exp(y_log)\n    for t in range(T):\n        p0, p1, p2, p3, p4, p5, p6 = p_arr[t]\n        y_log = (\n            p0\n            + p1 * f1\n            + p2 * f2\n            + p3 * f3\n            + p4 * (f1 * f2)\n            + p5 * (f1 * f3)\n            + p6 * (f2 * f3)\n        )\n        # clamp to avoid overflow\n        y_log = np.clip(y_log, -50, 50)\n        preds[:, t] = np.exp(y_log)\n\n    return preds[:, 0] if T == 1 else preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit up to 7 parameters of the scaling_law_func using\n    Levenberg\u2013Marquardt least squares. Supports single- or\n    multi-dimensional loss_values (N,) or (N,T).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        y_t = y2[:, t]\n        # initialize intercept to log(mean(y)), others to zero\n        p0 = np.log(np.mean(y_t) + 1e-8)\n        init = np.array([p0, 0, 0, 0, 0, 0, 0], dtype=float)\n\n        def residuals(p):\n            pred = scaling_law_func(X, p)\n            # pred is (N,) when p is 1d\n            return pred - y_t\n\n        try:\n            res = least_squares(\n                residuals,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=2000\n            )\n            p_opt = res.x\n        except Exception:\n            # fallback to initial guess if solver fails\n            p_opt = init\n\n        fitted.append(p_opt)\n\n    fitted = np.vstack(fitted)  # shape (T,7)\n    return fitted[0] if T == 1 else fitted\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Below is a revised implementation that replaces the naive polynomial\u2010in\u2010log model with a more interpretable \u201csum of decaying power\u2010law contributions plus a floor.\u201d  We use 7 raw parameters `r0\u2026r6`, each unconstrained, and exponentiate them inside the model to guarantee positive floor, amplitudes, and decay rates:\n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss from [tokens, params, unique_tokens] using a sum of\n    decaying power-law contributions plus a floor.  We have 7 raw\n    parameters: r0..r6, which are exponentiated to ensure positivity\n    where needed.\n\n    data_points: (N,3) array of [tokens, params, unique_tokens]\n    params:     (7,) or (T,7) array of raw parameters\n    Returns:    (N,) or (N,T) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # avoid zeros in log/exponent\n    eps = 1e-12\n    tkn = np.maximum(X[:, 0], eps)\n    prm = np.maximum(X[:, 1], eps)\n    ut  = np.maximum(X[:, 2], eps)\n\n    p_arr = np.atleast_2d(np.asarray(params, dtype=float))\n    if p_arr.shape[1] != 7:\n        raise ValueError(\"params must have length 7 or shape (T,7)\")\n\n    N = X.shape[0]\n    T = p_arr.shape[0]\n    preds = np.zeros((N, T), dtype=float)\n\n    for i in range(T):\n        r0, r1, r2, r3, r4, r5, r6 = p_arr[i]\n        # raw \u2192 positive floor and amplitudes/decays\n        floor    = np.exp(r0)\n        amp_t    = np.exp(r1); decay_t = np.exp(r2)\n        amp_p    = np.exp(r3); decay_p = np.exp(r4)\n        amp_u    = np.exp(r5); decay_u = np.exp(r6)\n\n        # each term is amp * (feature)^(-decay)\n        # i.e. amp * exp(-decay * log(feature))\n        ct = amp_t * np.exp(-decay_t * np.log(tkn))\n        cp = amp_p * np.exp(-decay_p * np.log(prm))\n        cu = amp_u * np.exp(-decay_u * np.log(ut))\n\n        preds[:, i] = floor + ct + cp + cu\n\n    # if only one param vector, return shape (N,)\n    return preds[:, 0] if preds.shape[1] == 1 else preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7 raw parameters [r0..r6] of scaling_law_func by\n    minimizing squared error.  We initialize:\n      - r0 from the minimum loss (as a floor)\n      - three equal amplitudes summing to (mean-loss_floor)\n      - three decay rates initialized to 1\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float)\n    # support single- or multi-output\n    if y.ndim == 1:\n        y2 = y[:, None]\n    else:\n        y2 = y\n    N, T = y2.shape\n\n    fitted = []\n    for t in range(T):\n        yt = y2[:, t]\n        mean_y = np.mean(yt)\n        min_y  = np.min(yt)\n        # raw floor\n        r0 = np.log(min_y + 1e-8)\n        # total residual above floor\n        resid = max(mean_y - min_y, 1e-8)\n        # split equally among three amplitudes\n        amp0 = resid / 3.0\n        r1 = np.log(amp0)\n        r3 = np.log(amp0)\n        r5 = np.log(amp0)\n        # decay rates init to 1\n        r2 = np.log(1.0)\n        r4 = np.log(1.0)\n        r6 = np.log(1.0)\n\n        init = np.array([r0, r1, r2, r3, r4, r5, r6], dtype=float)\n\n        def resid_fn(raw):\n            return scaling_law_func(X, raw) - yt\n\n        try:\n            sol = least_squares(\n                resid_fn,\n                init,\n                method='lm',\n                xtol=1e-8,\n                ftol=1e-8,\n                max_nfev=5000\n            )\n            fitted.append(sol.x)\n        except Exception:\n            # fallback to initialization on failure\n            fitted.append(init)\n\n    fitted = np.vstack(fitted)\n    return fitted[0] if T == 1 else fitted\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- We moved from a 2nd\u2010order polynomial in log\u2010space to a sum of three power\u2010law terms plus a learnable floor.\n- All amplitudes and decay exponents are parameterized as `exp(raw)` to enforce positivity and improve numerical stability.\n- This model captures typical \u201cdiminishing\u2010returns\u201d scaling (L \u221d N^(-\u03b1), P^(-\u03b2), unique_tokens^(-\u03b3)) with just 7 parameters, and naturally introduces an irreducible loss floor.\n- Initialization heuristics split the mean\u2010to\u2010min range equally among the three contributions and set decay rates to 1, providing a reasonable starting point for optimization."]}}}