{"id": "ac048e83-ec2a-4335-9ec9-56164dcbfde3", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative power-law with asymptotic floor:\n      loss \u2248 L_inf + A * tokens^b * params^c * unique^d\n\n    params: [L_inf, logA, b, c, d] (5 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    if len(params) != 5:\n        raise ValueError(f\"Expected 5 parameters [L_inf, logA, b, c, d], got {len(params)}\")\n    L_inf, logA, b, c, d = params\n\n    # avoid zeros in bases\n    tokens       = X[:, 0] + 1e-12\n    params_count = X[:, 1] + 1e-12\n    unique_toks  = X[:, 2] + 1e-12\n\n    A = np.exp(logA)\n    # compute prediction\n    pred = L_inf + A * np.power(tokens, b) * np.power(params_count, c) * np.power(unique_toks, d)\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in log-space:\n      loss_pred = L_inf + A * tokens^b * params^c * unique^d\n    Returns optimized parameters [L_inf, logA, b, c, d].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for log-domain fitting\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback if no positive examples\n        return np.zeros(5, dtype=float)\n\n    # initialize floor between 0 and minimum observed loss\n    y_min, y_max = np.min(y_fit), np.max(y_fit)\n    L_inf_init = max(0.0, 0.5 * y_min)\n\n    # amplitude init via log of difference\n    span = max(y_max - L_inf_init, 1e-3 * y_max)\n    logA_init = np.log(span)\n\n    # small negative exponents as default (decay behavior)\n    b_init, c_init, d_init = -0.3, -0.3, -0.3\n\n    init_params = np.array([L_inf_init, logA_init, b_init, c_init, d_init], dtype=float)\n\n    # bounds to ensure a valid floor and reasonable exponents\n    bounds = [\n        (0.0, y_min),    # L_inf \u2208 [0, min(y)]\n        (None, None),    # logA unconstrained\n        (-5.0, 5.0),     # b\n        (-5.0, 5.0),     # c\n        (-5.0, 5.0),     # d\n    ]\n\n    eps = 1e-12\n    def objective(p):\n        y_pred = scaling_law_func(X_fit, p)\n        # clamp positives for log\n        y_pred = np.maximum(y_pred, eps)\n        return np.mean((np.log(y_pred) - np.log(y_fit + eps))**2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d198a46f-0576-4883-9486-8ac93701ff0f", "generation": 3, "timestamp": 1754715099.52564, "iteration_found": 26, "metrics": {"nmse": 1.032986465900227, "nmae": 0.8376040430309614, "r2": -0.032986465900227024, "combined_score": 0.491887189990313}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4680214486967954, "nmae": 0.9671687108084207, "r2": 0.5319785513032046, "combined_score": 0.6811889573464532}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between training data characteristics and model loss under data-constrained conditions.\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different data scales, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [tokens, params, unique_tokens] - 3D input\n- Labels: loss - scalar output\n- Tokens: training data size (number of tokens processed)\n- Params: model parameter count\n- Unique_tokens: number of unique tokens in training data\n- Loss: model performance metric\n- Data explores the relationship between data constraints and model quality\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # tokens: Array of token counts\n    # params: Array of parameter counts\n    # unique_tokens: Array of unique token counts\n    # params: Array of up to 7 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [tokens, params, unique_tokens]\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4680\n- nmae: 0.9672\n- r2: 0.5320\n- combined_score: 0.6812\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 4.7847, nmae: 3.3323, r2: -3.7847, combined_score: 0.1729\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4680, nmae: 0.9672, r2: 0.5320, combined_score: 0.6812\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1954, nmae: 0.4842, r2: 0.8046, combined_score: 0.8366\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5802)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nKey features: Performs well on nmse (0.1954), Performs well on nmae (0.4842), Performs well on r2 (0.8046), Performs well on combined_score (0.8366)\n\n\n### Program 2 (Score: 0.6621)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^(\u2010alpha)\n             + B * params_count^(\u2010beta)\n             + C * unique_tokens^(\u2010gamma)\n\n    params: [L_inf, A, alpha, B, beta, C, gamma] (7 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N, 3)\n    if len(params) != 7:\n        raise ValueError(f\"Expected 7 parameters [L_inf, A, alpha, B, beta, C, gamma], got {len(params)}\")\n    L_inf, A, alpha, B, beta, C, gamma = params\n\n    tokens        = X[:, 0]\n    params_count  = X[:, 1]\n    unique_toks   = X[:, 2]\n\n    # Compute the predicted loss as the sum of three decaying power\u2010laws plus an asymptotic floor\n    pred = (\n        L_inf\n        + A * np.power(tokens,       -alpha)\n        + B * np.power(params_count, -beta)\n        + C * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter asymptotic power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, A, alpha, B, beta, C, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # (N,)\n\n    # Initialize parameters based on observed range of y\n    y_min, y_max = np.min(y), np.max(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n    span = y_max - y_min\n    A_init = span / 3.0\n    B_init = span / 3.0\n    C_init = span / 3.0\n    alpha_init = beta_init = gamma_init = 0.5\n\n    init_params = np.array([\n        L_inf_init,\n        A_init,   alpha_init,\n        B_init,   beta_init,\n        C_init,   gamma_init,\n    ], dtype=float)\n\n    # Bounds: ensure non\u2010negativity of floor, amplitudes, and exponents\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # A\n        (0.0, None),  # alpha\n        (0.0, None),  # B\n        (0.0, None),  # beta\n        (0.0, None),  # C\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4680), Performs well on nmae (0.9672), Performs well on r2 (0.5320), Performs well on combined_score (0.6812)\n\n\n### Program 3 (Score: 1.1263)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Sum\u2010of\u2010power\u2010decay scaling law with a floor term:\n      loss \u2248 exp(g0)\n           + exp(a0 - exp(b0)\u00b7log(tokens))\n           + exp(c0 - exp(d0)\u00b7log(params))\n           + exp(e0 - exp(f0)\u00b7log(unique_tokens))\n\n    Parameters (7):\n      a0, b0 \u2192 tokens contribution\n      c0, d0 \u2192 params contribution\n      e0, f0 \u2192 unique_tokens contribution\n      g0      \u2192 floor (minimum loss)\n\n    Inputs:\n      data_points: array of shape (N,3) [tokens, params, unique_tokens]\n      params:      array of length 7 or shape (M,7) for M independent outputs\n\n    Returns:\n      preds: array of shape (N,) (or (N,M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    tokens = X[:, 0] + 1e-12\n    model_params = X[:, 1] + 1e-12\n    unique_toks = X[:, 2] + 1e-12\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # unpack parameters\n    a0 = p[:, 0][None, :]   # (1,M)\n    b0 = p[:, 1][None, :]\n    c0 = p[:, 2][None, :]\n    d0 = p[:, 3][None, :]\n    e0 = p[:, 4][None, :]\n    f0 = p[:, 5][None, :]\n    g0 = p[:, 6][None, :]\n\n    # log\u2010transform inputs\n    lt = np.log(tokens)[:, None]       # (N,1)\n    lp = np.log(model_params)[:, None]\n    lu = np.log(unique_toks)[:, None]\n\n    # compute each decay term\n    term_tokens  = np.exp(a0 - np.exp(b0) * lt)\n    term_params  = np.exp(c0 - np.exp(d0) * lp)\n    term_unique  = np.exp(e0 - np.exp(f0) * lu)\n    floor        = np.exp(g0)           # (1,M)\n\n    pred = term_tokens + term_params + term_unique + floor  # (N,M)\n    return pred[:, 0] if M == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the sum\u2010of\u2010power\u2010decay scaling law by minimizing MSE in loss space.\n    Returns 7 parameters [a0,b0,c0,d0,e0,f0,g0].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter out non\u2010positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n\n    # initialize: zeros for exponents/shifts, floor \u2248 log(mean loss)\n    init = np.zeros(7)\n    if y_fit.size > 0:\n        init[6] = np.log(np.mean(y_fit))\n\n    def objective(p):\n        y_pred = scaling_law_func(X_fit, p)\n        return np.mean((y_pred - y_fit) ** 2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success and res.x.shape == (7,):\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.7847), Performs well on nmae (3.3323), Performs well on r2 (-3.7847), Performs well on combined_score (0.1729)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5802, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Log\u2010linear scaling law:\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    => loss = exp(a) * tokens^b * params^c * unique_tokens^d\n\n    Inputs:\n      data_points: array\u2010like of shape (N, 3) with columns [tokens, params, unique_tokens]\n      params:      array of length 4 (or shape (M,4) for M independent outputs)\n                   [a, b, c, d]\n\n    Returns:\n      preds: shape (N,) (or (N, M) if params is (M,4))\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    # avoid log(0)\n    X_log = np.log(X + 1e-12)\n\n    p = np.asarray(params, dtype=float)\n    # ensure 2D: (M,4)\n    if p.ndim == 1:\n        p2 = p[np.newaxis, :]\n    else:\n        p2 = p.copy()\n    M, P = p2.shape\n    if P != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters (a,b,c,d), got {P}\")\n\n    # unpack\n    a = p2[:, 0]    # shape (M,)\n    b = p2[:, 1]\n    c = p2[:, 2]\n    d = p2[:, 3]\n\n    # compute log\u2010predictions: shape (N, M)\n    # X_log[:,0] = log(tokens), X_log[:,1] = log(params), X_log[:,2] = log(unique_tokens)\n    log_pred = (\n        a[np.newaxis, :]\n        + b[np.newaxis, :] * X_log[:, 0:1]\n        + c[np.newaxis, :] * X_log[:, 1:2]\n        + d[np.newaxis, :] * X_log[:, 2:3]\n    )\n    pred = np.exp(log_pred)\n\n    return pred[:, 0] if M == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010linear scaling law by minimizing mean squared error in log\u2010space.\n\n    Returns 4 parameters [a, b, c, d] such that\n      log(loss) \u2248 a + b\u00b7log(tokens) + c\u00b7log(params) + d\u00b7log(unique_tokens)\n    \"\"\"\n    X_raw = np.atleast_2d(data_points).astype(float)  # (N,3)\n    y_raw = np.asarray(loss_values, dtype=float).reshape(-1)  # (N,)\n\n    # keep only strictly positive losses for log\n    mask = y_raw > 0\n    X = X_raw[mask]\n    y = y_raw[mask]\n\n    # take logs with small offset\n    X_log = np.log(X + 1e-12)  # (N,3)\n    y_log = np.log(y + 1e-12)  # (N,)\n\n    N = X_log.shape[0]\n    # Design matrix for linear regression in log\u2010space: [1, log(tokens), log(params), log(unique)]\n    D = np.concatenate([np.ones((N, 1)), X_log], axis=1)  # (N,4)\n\n    # initial least\u2010squares solution in log\u2010space\n    beta_init, *_ = np.linalg.lstsq(D, y_log, rcond=None)  # shape (4,)\n\n    # objective: MSE in log domain\n    def objective(p):\n        resid = D.dot(p) - y_log\n        return np.mean(resid * resid)\n\n    # boundless optimization (L-BFGS-B)\n    res = minimize(objective, beta_init, method=\"L-BFGS-B\")\n    params_opt = res.x if res.success else beta_init\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 1.1263, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Sum\u2010of\u2010power\u2010decay scaling law with a floor term:\n      loss \u2248 exp(g0)\n           + exp(a0 - exp(b0)\u00b7log(tokens))\n           + exp(c0 - exp(d0)\u00b7log(params))\n           + exp(e0 - exp(f0)\u00b7log(unique_tokens))\n\n    Parameters (7):\n      a0, b0 \u2192 tokens contribution\n      c0, d0 \u2192 params contribution\n      e0, f0 \u2192 unique_tokens contribution\n      g0      \u2192 floor (minimum loss)\n\n    Inputs:\n      data_points: array of shape (N,3) [tokens, params, unique_tokens]\n      params:      array of length 7 or shape (M,7) for M independent outputs\n\n    Returns:\n      preds: array of shape (N,) (or (N,M) if params is (M,7))\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # avoid log(0)\n    tokens = X[:, 0] + 1e-12\n    model_params = X[:, 1] + 1e-12\n    unique_toks = X[:, 2] + 1e-12\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    M, P = p.shape\n    if P != 7:\n        raise ValueError(f\"scaling_law_func expects 7 parameters, got {P}\")\n\n    # unpack parameters\n    a0 = p[:, 0][None, :]   # (1,M)\n    b0 = p[:, 1][None, :]\n    c0 = p[:, 2][None, :]\n    d0 = p[:, 3][None, :]\n    e0 = p[:, 4][None, :]\n    f0 = p[:, 5][None, :]\n    g0 = p[:, 6][None, :]\n\n    # log\u2010transform inputs\n    lt = np.log(tokens)[:, None]       # (N,1)\n    lp = np.log(model_params)[:, None]\n    lu = np.log(unique_toks)[:, None]\n\n    # compute each decay term\n    term_tokens  = np.exp(a0 - np.exp(b0) * lt)\n    term_params  = np.exp(c0 - np.exp(d0) * lp)\n    term_unique  = np.exp(e0 - np.exp(f0) * lu)\n    floor        = np.exp(g0)           # (1,M)\n\n    pred = term_tokens + term_params + term_unique + floor  # (N,M)\n    return pred[:, 0] if M == 1 else pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the sum\u2010of\u2010power\u2010decay scaling law by minimizing MSE in loss space.\n    Returns 7 parameters [a0,b0,c0,d0,e0,f0,g0].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).reshape(-1)\n\n    # filter out non\u2010positive losses\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n\n    # initialize: zeros for exponents/shifts, floor \u2248 log(mean loss)\n    init = np.zeros(7)\n    if y_fit.size > 0:\n        init[6] = np.log(np.mean(y_fit))\n\n    def objective(p):\n        y_pred = scaling_law_func(X_fit, p)\n        return np.mean((y_pred - y_fit) ** 2)\n\n    res = minimize(objective, init, method=\"L-BFGS-B\")\n    if res.success and res.x.shape == (7,):\n        return res.x\n    else:\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.785), Excellent nmae (3.332)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Asymptotic power\u2010law scaling with additive floor:\n      loss \u2248 L_inf\n             + A * tokens^(\u2010alpha)\n             + B * params_count^(\u2010beta)\n             + C * unique_tokens^(\u2010gamma)\n\n    params: [L_inf, A, alpha, B, beta, C, gamma] (7 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N, 3)\n    if len(params) != 7:\n        raise ValueError(f\"Expected 7 parameters [L_inf, A, alpha, B, beta, C, gamma], got {len(params)}\")\n    L_inf, A, alpha, B, beta, C, gamma = params\n\n    tokens        = X[:, 0]\n    params_count  = X[:, 1]\n    unique_toks   = X[:, 2]\n\n    # Compute the predicted loss as the sum of three decaying power\u2010laws plus an asymptotic floor\n    pred = (\n        L_inf\n        + A * np.power(tokens,       -alpha)\n        + B * np.power(params_count, -beta)\n        + C * np.power(unique_toks,  -gamma)\n    )\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter asymptotic power\u2010law by minimizing MSE in original loss space.\n    Returns optimized parameters [L_inf, A, alpha, B, beta, C, gamma].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)        # (N,3)\n    y = np.asarray(loss_values, dtype=float).ravel()   # (N,)\n\n    # Initialize parameters based on observed range of y\n    y_min, y_max = np.min(y), np.max(y)\n    L_inf_init = max(0.0, 0.1 * y_min)\n    span = y_max - y_min\n    A_init = span / 3.0\n    B_init = span / 3.0\n    C_init = span / 3.0\n    alpha_init = beta_init = gamma_init = 0.5\n\n    init_params = np.array([\n        L_inf_init,\n        A_init,   alpha_init,\n        B_init,   beta_init,\n        C_init,   gamma_init,\n    ], dtype=float)\n\n    # Bounds: ensure non\u2010negativity of floor, amplitudes, and exponents\n    bounds = [\n        (0.0, None),  # L_inf\n        (0.0, None),  # A\n        (0.0, None),  # alpha\n        (0.0, None),  # B\n        (0.0, None),  # beta\n        (0.0, None),  # C\n        (0.0, None),  # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative power-law with asymptotic floor:\n      loss \u2248 L_inf + A * tokens^b * params^c * unique^d\n\n    params: [L_inf, logA, b, c, d] (5 parameters)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)  # (N,3)\n    if len(params) != 5:\n        raise ValueError(f\"Expected 5 parameters [L_inf, logA, b, c, d], got {len(params)}\")\n    L_inf, logA, b, c, d = params\n\n    # avoid zeros in bases\n    tokens       = X[:, 0] + 1e-12\n    params_count = X[:, 1] + 1e-12\n    unique_toks  = X[:, 2] + 1e-12\n\n    A = np.exp(logA)\n    # compute prediction\n    pred = L_inf + A * np.power(tokens, b) * np.power(params_count, c) * np.power(unique_toks, d)\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter model by minimizing MSE in log-space:\n      loss_pred = L_inf + A * tokens^b * params^c * unique^d\n    Returns optimized parameters [L_inf, logA, b, c, d].\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # keep only positive losses for log-domain fitting\n    mask = y > 0\n    X_fit = X[mask]\n    y_fit = y[mask]\n    if y_fit.size == 0:\n        # fallback if no positive examples\n        return np.zeros(5, dtype=float)\n\n    # initialize floor between 0 and minimum observed loss\n    y_min, y_max = np.min(y_fit), np.max(y_fit)\n    L_inf_init = max(0.0, 0.5 * y_min)\n\n    # amplitude init via log of difference\n    span = max(y_max - L_inf_init, 1e-3 * y_max)\n    logA_init = np.log(span)\n\n    # small negative exponents as default (decay behavior)\n    b_init, c_init, d_init = -0.3, -0.3, -0.3\n\n    init_params = np.array([L_inf_init, logA_init, b_init, c_init, d_init], dtype=float)\n\n    # bounds to ensure a valid floor and reasonable exponents\n    bounds = [\n        (0.0, y_min),    # L_inf \u2208 [0, min(y)]\n        (None, None),    # logA unconstrained\n        (-5.0, 5.0),     # b\n        (-5.0, 5.0),     # c\n        (-5.0, 5.0),     # d\n    ]\n\n    eps = 1e-12\n    def objective(p):\n        y_pred = scaling_law_func(X_fit, p)\n        # clamp positives for log\n        y_pred = np.maximum(y_pred, eps)\n        return np.mean((np.log(y_pred) - np.log(y_fit + eps))**2)\n\n    res = minimize(objective, init_params, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else init_params\n# EVOLVE-BLOCK-END\n```"]}}}