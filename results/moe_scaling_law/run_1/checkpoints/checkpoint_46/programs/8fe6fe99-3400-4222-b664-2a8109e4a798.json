{"id": "8fe6fe99-3400-4222-b664-2a8109e4a798", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter combined power\u2010law scaling for MoE validation loss:\n      L = (a * Ne^alpha + b * D^beta)^(-p) + c\n    where:\n      Ne = num_experts\n      D  = dense_parameter_count\n    params = [a, alpha, b, beta, p, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Split features and enforce positivity\n    Ne = np.maximum(X[:, 0], 1.0)\n    D  = np.maximum(X[:, 1], 1.0)\n\n    a, alpha, b, beta, p, c = params\n    # Combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    # Numerical stability floor\n    cap = np.maximum(cap, 1e-12)\n    # Inverted power\u2010law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model by bounded non\u2010linear least squares.\n    Returns optimized params = [a, alpha, b, beta, p, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Robust initial guesses based on medians\n    Ne = X[:, 0]; D = X[:, 1]\n    # avoid zero in median\n    Ne_med = np.median(Ne[Ne > 0]) if np.any(Ne > 0) else 1.0\n    D_med  = np.median(D[D   > 0]) if np.any(D > 0) else 1.0\n    y_min  = np.min(y)\n\n    a0     = 1.0 / max(Ne_med, 1e-6)\n    b0     = 1.0 / max(D_med,  1e-6)\n    alpha0 = 0.5\n    beta0  = 0.5\n    p0     = 0.5\n    c0     = max(0.0, y_min * 0.1)\n\n    init_params  = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n    lower_bounds = [0.0,   0.0,   0.0,   0.0,   0.0,   0.0]\n    upper_bounds = [np.inf, 5.0,  np.inf, 5.0,  5.0,   np.inf]\n\n    # residual function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve via Trust\u2010Region Reflective algorithm\n    result = least_squares(\n        resid,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b5abcaf1-f051-426d-9c04-6555b09b74e2", "generation": 1, "timestamp": 1754718234.9807734, "iteration_found": 39, "metrics": {"nmse": 0.14440589928789063, "nmae": 0.3401006112036728, "r2": 0.8555941007121094, "combined_score": 0.8738158380887868}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 40.10644815998779, "nmae": 7.187667063602175, "r2": -39.10644815998779, "combined_score": 0.024327083578419707}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between MoE architecture parameters and validation loss.\n\n**IMPORTANT: The scaling law function must use no more than 6 parameters.**\n\nFocus on mathematical accuracy across different MoE configurations, generalization across expert counts and model sizes, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [num_experts, dense_parameter_count] - 2D input\n- Labels: loss_validation - scalar output\n- Number of experts: ranges from 1 to multiple values\n- Dense parameter count: ranges across different model architectures\n- Validation loss: continuous values representing model performance\n- All data filtered to step 249000 for consistency\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # num_experts: Array of expert counts\n    # dense_parameter_count: Array of dense parameter counts\n    # params: Array of up to 6 parameters\n    # Returns: Predicted validation loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # loss_values: Array of corresponding validation loss values\n    # Returns: Optimized parameters (up to 6 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 40.1064\n- nmae: 7.1877\n- r2: -39.1064\n- combined_score: 0.0243\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3675, nmae: 0.5937, r2: 0.6325, combined_score: 0.7313\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3361, nmae: 0.5750, r2: 0.6639, combined_score: 0.7484\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1444, nmae: 0.3401, r2: 0.8556, combined_score: 0.8738\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5535)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss using a combined power-law:\n        L = (a * Ne^alpha + b * D^beta)^(-p) + c\n    where:\n        Ne = num_experts\n        D  = dense_parameter_count\n    params = [a, alpha, b, beta, p, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Ne = np.maximum(X[:, 0], 1.0)    # ensure positivity\n    D  = np.maximum(X[:, 1], 1.0)\n    \n    a, alpha, b, beta, p, c = params\n    # combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    cap = np.maximum(cap, 1e-12)\n    # inverted power-law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by non-linear least squares.\n    Returns params = [a, alpha, b, beta, p, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # derive robust initial guesses\n    Ne = X[:, 0]; D = X[:, 1]\n    Ne_med = np.median(Ne[Ne > 0])\n    D_med  = np.median(D[D   > 0])\n    y_min  = np.min(y)\n    \n    a0     = 1.0 / max(Ne_med, 1e-6)\n    b0     = 1.0 / max(D_med, 1e-6)\n    alpha0 = 0.5\n    beta0  = 0.5\n    p0     = 0.5\n    c0     = max(0.0, y_min * 0.1)\n    \n    init_params = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n    \n    # bounds to keep exponents and scales in a reasonable range\n    lower_bounds = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, 5.0, np.inf]\n    \n    def residuals(params):\n        return scaling_law_func(X, params) - y\n    \n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n    \n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1444), Performs well on nmae (0.3401), Performs well on r2 (0.8556), Performs well on combined_score (0.8738)\n\n\n### Program 2 (Score: 0.5809)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust log\u2013quadratic scaling law for MoE architectures.\nWe model:\n    L = exp(\u03b80\n            + \u03b81\u00b7lnP\n            + \u03b82\u00b7lnE\n            + \u03b83\u00b7(lnP\u00b7lnE)\n            + \u03b84\u00b7(lnP)^2\n            + \u03b85\u00b7(lnE)^2 )\nand fit \u03b8 via Iteratively Reweighted Least Squares (Huber loss) in log\u2010space.\nThis guards against outliers while retaining a closed\u2010form update.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss:\n      data_points: (N,2) array [num_experts, dense_param_count]\n      params: array-like of length 6\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # split and clip to positive\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    # log\u2010features\n    lnE = np.log(E)\n    lnP = np.log(P)\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010quadratic with interaction\n    u = (\n        \u03b80\n        + \u03b81 * lnP\n        + \u03b82 * lnE\n        + \u03b83 * (lnP * lnE)\n        + \u03b84 * (lnP ** 2)\n        + \u03b85 * (lnE ** 2)\n    )\n    return np.exp(u)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter log\u2010quadratic model by Huber\u2010IRLS on log(loss).\n    Returns optimized \u03b8 of length 6.\n    \"\"\"\n    # Prepare arrays\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # features clipped for log\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # target in log\u2010space\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Design matrix: [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP ** 2,\n        lnE ** 2\n    ]).T  # shape (N,6)\n\n    # Initial least\u2010squares estimate\n    \u03b8 = np.linalg.lstsq(M, ln_y, rcond=None)[0]\n\n    # IRLS parameters\n    lambda_reg = 1e-6  # small Tikhonov regularization\n    max_iters = 8\n\n    for _ in range(max_iters):\n        # residuals in log\u2010space\n        r = ln_y - M.dot(\u03b8)\n        # Huber threshold c = 1.345 * robust scale\n        mad = np.median(np.abs(r))\n        scale = mad if mad > 1e-8 else np.std(r)\n        c = 1.345 * max(scale, 1e-8)\n        # Huber weights\n        abs_r = np.abs(r)\n        w = np.where(abs_r <= c, 1.0, c / abs_r)\n        # weighted normal equations: (M^T W M + \u03bbI) \u03b8 = M^T W ln_y\n        Wm = M * w[:, None]\n        A = Wm.T.dot(M) + lambda_reg * np.eye(6)\n        b = Wm.T.dot(ln_y)\n        \u03b8_new = np.linalg.solve(A, b)\n        # convergence check\n        if np.allclose(\u03b8, \u03b8_new, atol=1e-8, rtol=1e-6):\n            \u03b8 = \u03b8_new\n            break\n        \u03b8 = \u03b8_new\n\n    return \u03b8\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3361), Performs well on nmae (0.5750), Performs well on r2 (0.6639), Performs well on combined_score (0.7484)\n\n\n### Program 3 (Score: 0.5812)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013quadratic interaction model.\nModel: L = exp(\u03b80 + \u03b81\u00b7lnP + \u03b82\u00b7lnE + \u03b83\u00b7(lnP\u00b7lnE) + \u03b84\u00b7(lnP)^2 + \u03b85\u00b7(lnE)^2)\nwhere P = dense parameter count, E = num_experts.\nThis 6-parameter form captures multiplicative interactions and curvature in log-space.\nFitting is done via least squares on log(loss), avoiding expensive iterative minimization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array [num_experts, dense_param_count]\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # split features\n    E = X[:, 0]\n    P = X[:, 1]\n    # numerical stability: clip to positive\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    # log features\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # unpack up to 6 parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010quadratic model with interaction\n    u = \u03b80 \\\n        + \u03b81 * lnP \\\n        + \u03b82 * lnE \\\n        + \u03b83 * (lnP * lnE) \\\n        + \u03b84 * (lnP ** 2) \\\n        + \u03b85 * (lnE ** 2)\n    # back to original scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Ensure strictly positive target for log\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Features\n    E = X[:, 0]\n    P = X[:, 1]\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Design matrix: [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP**2,\n        lnE**2\n    ]).T  # shape (N,6)\n    # Solve linear least squares: minimize ||M\u00b7\u03b8 - ln_y||^2\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    # Return fitted parameters \u03b80\u2026\u03b85\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3675), Performs well on nmae (0.5937), Performs well on r2 (0.6325), Performs well on combined_score (0.7313)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5812)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013quadratic interaction model.\nModel: L = exp(\u03b80 + \u03b81\u00b7lnP + \u03b82\u00b7lnE + \u03b83\u00b7(lnP\u00b7lnE) + \u03b84\u00b7(lnP)^2 + \u03b85\u00b7(lnE)^2)\nwhere P = dense parameter count, E = num_experts.\nThis 6-parameter form captures multiplicative interactions and curvature in log-space.\nFitting is done via least squares on log(loss), avoiding expensive iterative minimization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array [num_experts, dense_param_count]\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # split features\n    E = X[:, 0]\n    P = X[:, 1]\n    # numerical stability: clip to positive\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    # log features\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # unpack up to 6 parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010quadratic model with interaction\n    u = \u03b80 \\\n        + \u03b81 * lnP \\\n        + \u03b82 * lnE \\\n        + \u03b83 * (lnP * lnE) \\\n        + \u03b84 * (lnP ** 2) \\\n        + \u03b85 * (lnE ** 2)\n    # back to original scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Ensure strictly positive target for log\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Features\n    E = X[:, 0]\n    P = X[:, 1]\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Design matrix: [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP**2,\n        lnE**2\n    ]).T  # shape (N,6)\n    # Solve linear least squares: minimize ||M\u00b7\u03b8 - ln_y||^2\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    # Return fitted parameters \u03b80\u2026\u03b85\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5807)\n```python\n\"\"\"\nScaling law discovery for MoE LLM finetuning scenarios\nEnhanced 6-parameter power-law model with an interaction term.\nModel form:\n    L(N_e, D) = a * N_e^{-p1}\n               + b * D^{-p2}\n               + c * (N_e * D)^{-p3}\nParameters: [a, p1, b, p2, c, p3]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given:\n      data_points: (N,2) array [num_experts, dense_parameter_count]\n      params: array [a, p1, b, p2, c, p3]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    ne = X[:, 0]\n    D  = X[:, 1]\n    # avoid zero or negative values inside negative powers\n    ne_clip = np.maximum(ne, 1e-8)\n    D_clip  = np.maximum(D,  1e-8)\n    a, p1, b, p2, c, p3 = params\n    term1 = a * ne_clip ** (-p1)\n    term2 = b * D_clip  ** (-p2)\n    term3 = c * (ne_clip * D_clip) ** (-p3)\n    return term1 + term2 + term3\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c, p3].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # Simple initialization based on range of y\n    y_min, y_max = np.min(y), np.max(y)\n    y_range = (y_max - y_min) if (y_max > y_min) else 1.0\n    init_a, init_b, init_c = y_range * 0.5, y_range * 0.3, y_range * 0.2\n    init_p1 = init_p2 = init_p3 = 0.5\n    init_params = np.array([init_a, init_p1, init_b, init_p2, init_c, init_p3])\n\n    # Bounds: all scales >= 0, exponents in [0,5]\n    lower_bounds = [0.0, 0.0,  0.0, 0.0,  0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=20000\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5535, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss using a combined power-law:\n        L = (a * Ne^alpha + b * D^beta)^(-p) + c\n    where:\n        Ne = num_experts\n        D  = dense_parameter_count\n    params = [a, alpha, b, beta, p, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Ne = np.maximum(X[:, 0], 1.0)    # ensure positivity\n    D  = np.maximum(X[:, 1], 1.0)\n    \n    a, alpha, b, beta, p, c = params\n    # combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    cap = np.maximum(cap, 1e-12)\n    # inverted power-law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by non-linear least squares.\n    Returns params = [a, alpha, b, beta, p, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # derive robust initial guesses\n    Ne = X[:, 0]; D = X[:, 1]\n    Ne_med = np.median(Ne[Ne > 0])\n    D_med  = np.median(D[D   > 0])\n    y_min  = np.min(y)\n    \n    a0     = 1.0 / max(Ne_med, 1e-6)\n    b0     = 1.0 / max(D_med, 1e-6)\n    alpha0 = 0.5\n    beta0  = 0.5\n    p0     = 0.5\n    c0     = max(0.0, y_min * 0.1)\n    \n    init_params = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n    \n    # bounds to keep exponents and scales in a reasonable range\n    lower_bounds = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, 5.0, np.inf]\n    \n    def residuals(params):\n        return scaling_law_func(X, params) - y\n    \n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n    \n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.5812, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013quadratic interaction model.\nModel: L = exp(\u03b80 + \u03b81\u00b7lnP + \u03b82\u00b7lnE + \u03b83\u00b7(lnP\u00b7lnE) + \u03b84\u00b7(lnP)^2 + \u03b85\u00b7(lnE)^2)\nwhere P = dense parameter count, E = num_experts.\nThis 6-parameter form captures multiplicative interactions and curvature in log-space.\nFitting is done via least squares on log(loss), avoiding expensive iterative minimization.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array [num_experts, dense_param_count]\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # split features\n    E = X[:, 0]\n    P = X[:, 1]\n    # numerical stability: clip to positive\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    # log features\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # unpack up to 6 parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010quadratic model with interaction\n    u = \u03b80 \\\n        + \u03b81 * lnP \\\n        + \u03b82 * lnE \\\n        + \u03b83 * (lnP * lnE) \\\n        + \u03b84 * (lnP ** 2) \\\n        + \u03b85 * (lnE ** 2)\n    # back to original scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    # Prepare data\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Ensure strictly positive target for log\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Features\n    E = X[:, 0]\n    P = X[:, 1]\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Design matrix: [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP**2,\n        lnE**2\n    ]).T  # shape (N,6)\n    # Solve linear least squares: minimize ||M\u00b7\u03b8 - ln_y||^2\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    # Return fitted parameters \u03b80\u2026\u03b85\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.5807, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for MoE LLM finetuning scenarios\nEnhanced 6-parameter power-law model with an interaction term.\nModel form:\n    L(N_e, D) = a * N_e^{-p1}\n               + b * D^{-p2}\n               + c * (N_e * D)^{-p3}\nParameters: [a, p1, b, p2, c, p3]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given:\n      data_points: (N,2) array [num_experts, dense_parameter_count]\n      params: array [a, p1, b, p2, c, p3]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    ne = X[:, 0]\n    D  = X[:, 1]\n    # avoid zero or negative values inside negative powers\n    ne_clip = np.maximum(ne, 1e-8)\n    D_clip  = np.maximum(D,  1e-8)\n    a, p1, b, p2, c, p3 = params\n    term1 = a * ne_clip ** (-p1)\n    term2 = b * D_clip  ** (-p2)\n    term3 = c * (ne_clip * D_clip) ** (-p3)\n    return term1 + term2 + term3\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c, p3].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # Simple initialization based on range of y\n    y_min, y_max = np.min(y), np.max(y)\n    y_range = (y_max - y_min) if (y_max > y_min) else 1.0\n    init_a, init_b, init_c = y_range * 0.5, y_range * 0.3, y_range * 0.2\n    init_p1 = init_p2 = init_p3 = 0.5\n    init_params = np.array([init_a, init_p1, init_b, init_p2, init_c, init_p3])\n\n    # Bounds: all scales >= 0, exponents in [0,5]\n    lower_bounds = [0.0, 0.0,  0.0, 0.0,  0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=20000\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.7801, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter log\u2013quadratic interaction model:\n      ln L = \u03b80 + \u03b81\u00b7lnP + \u03b82\u00b7lnE + \u03b83\u00b7(lnP\u00b7lnE) + \u03b84\u00b7(lnP)^2 + \u03b85\u00b7(lnE)^2\n    L = exp(ln L)\n    Inputs:\n      data_points: (N,2) array [[E,P],...]\n      params: length-6 vector [\u03b80\u2026\u03b85]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # experts E, dense params P\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    # unpack\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n\n    # log\u2010quadratic with interaction\n    u = (\u03b80\n         + \u03b81 * lnP\n         + \u03b82 * lnE\n         + \u03b83 * (lnP * lnE)\n         + \u03b84 * (lnP ** 2)\n         + \u03b85 * (lnE ** 2))\n    return np.exp(u)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit \u03b80\u2026\u03b85 by solving a small ridge\u2010regularized least squares in log-space:\n      minimize ||M \u03b8 \u2013 ln(y)||^2 + \u03bb||\u03b8||^2\n    where M = [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # clip and log features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    # clip and log target\n    ln_y = np.log(np.clip(y, 1e-8, None))\n\n    # design matrix (N\u00d76)\n    M = np.column_stack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP**2,\n        lnE**2\n    ])\n\n    # small ridge \u03bb based on trace for stability\n    lam = 1e-8 * np.trace(M.T @ M) / M.shape[1]\n    A = M.T @ M + lam * np.eye(M.shape[1])\n    b = M.T @ ln_y\n\n    # solve for \u03b8\n    \u03b8_opt = np.linalg.solve(A, b)\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (2.710), Excellent nmae (1.851)\n\n\n### Inspiration 5 (Score: 0.6308, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.256), Excellent nmae (1.080)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter combined power\u2010law scaling for MoE validation loss:\n      L = (a * Ne^alpha + b * D^beta)^(-p) + c\n    where:\n      Ne = num_experts\n      D  = dense_parameter_count\n    params = [a, alpha, b, beta, p, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Split features and enforce positivity\n    Ne = np.maximum(X[:, 0], 1.0)\n    D  = np.maximum(X[:, 1], 1.0)\n\n    a, alpha, b, beta, p, c = params\n    # Combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    # Numerical stability floor\n    cap = np.maximum(cap, 1e-12)\n    # Inverted power\u2010law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter model by bounded non\u2010linear least squares.\n    Returns optimized params = [a, alpha, b, beta, p, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Robust initial guesses based on medians\n    Ne = X[:, 0]; D = X[:, 1]\n    # avoid zero in median\n    Ne_med = np.median(Ne[Ne > 0]) if np.any(Ne > 0) else 1.0\n    D_med  = np.median(D[D   > 0]) if np.any(D > 0) else 1.0\n    y_min  = np.min(y)\n\n    a0     = 1.0 / max(Ne_med, 1e-6)\n    b0     = 1.0 / max(D_med,  1e-6)\n    alpha0 = 0.5\n    beta0  = 0.5\n    p0     = 0.5\n    c0     = max(0.0, y_min * 0.1)\n\n    init_params  = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n    lower_bounds = [0.0,   0.0,   0.0,   0.0,   0.0,   0.0]\n    upper_bounds = [np.inf, 5.0,  np.inf, 5.0,  5.0,   np.inf]\n\n    # residual function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve via Trust\u2010Region Reflective algorithm\n    result = least_squares(\n        resid,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```"]}}}