{"id": "538282db-e352-484a-8937-51093e91544e", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter log\u2013quadratic interaction model:\n      L(E,P) = exp( \u03b80\n                  + \u03b81\u00b7lnP\n                  + \u03b82\u00b7lnE\n                  + \u03b83\u00b7(lnP\u00b7lnE)\n                  + \u03b84\u00b7(lnP)^2\n                  + \u03b85\u00b7(lnE)^2 )\n    data_points: shape (N,2) [num_experts, dense_param_count]\n    params: array\u2010like of length 6 [\u03b80,\u2026,\u03b85]\n    returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # prevent log(0)\n    E = np.clip(X[:,0], 1e-8, None)\n    P = np.clip(X[:,1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80,\u03b81,\u03b82,\u03b83,\u03b84,\u03b85 = \u03b8\n\n    u = (\u03b80\n         + \u03b81*lnP\n         + \u03b82*lnE\n         + \u03b83*(lnP*lnE)\n         + \u03b84*(lnP**2)\n         + \u03b85*(lnE**2))\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter log\u2013quadratic model by:\n      1)  Closed-form least squares in log-space\n      2)  A short \u2018polish\u2019 with a robust soft\u2010L1 solver on the same log-space residuals\n    Returns optimized \u03b8 of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ---- prepare log-space targets and features ----\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n\n    E = np.clip(X[:,0], 1e-8, None)\n    P = np.clip(X[:,1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    # design matrix: [1, lnP, lnE, lnP*lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP**2,\n        lnE**2\n    ]).T  # shape (N,6)\n\n    # 1) closed-form least squares in log-space\n    \u03b8_init, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n\n    # 2) refine with a short robust least-squares on the same log residuals\n    def _residuals(\u03b8):\n        return M.dot(\u03b8) - ln_y\n\n    result = least_squares(\n        _residuals,\n        x0=\u03b8_init,\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=5000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b2fa42ad-de1a-488c-abe9-ca9d7294da39", "generation": 3, "timestamp": 1754718831.5366597, "iteration_found": 26, "metrics": {"nmse": 0.3572263828022302, "nmae": 0.5849592529507203, "r2": 0.6427736171977698, "combined_score": 0.7367967589425471}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.36751514046727124, "nmae": 0.5937087780384879, "r2": 0.6324848595327288, "combined_score": 0.7312533297863937}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between MoE architecture parameters and validation loss.\n\n**IMPORTANT: The scaling law function must use no more than 6 parameters.**\n\nFocus on mathematical accuracy across different MoE configurations, generalization across expert counts and model sizes, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [num_experts, dense_parameter_count] - 2D input\n- Labels: loss_validation - scalar output\n- Number of experts: ranges from 1 to multiple values\n- Dense parameter count: ranges across different model architectures\n- Validation loss: continuous values representing model performance\n- All data filtered to step 249000 for consistency\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # num_experts: Array of expert counts\n    # dense_parameter_count: Array of dense parameter counts\n    # params: Array of up to 6 parameters\n    # Returns: Predicted validation loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # loss_values: Array of corresponding validation loss values\n    # Returns: Optimized parameters (up to 6 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3675\n- nmae: 0.5937\n- r2: 0.6325\n- combined_score: 0.7313\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 1.2561, nmae: 1.0801, r2: -0.2561, combined_score: 0.4432\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.4179, nmae: 0.6175, r2: 0.5821, combined_score: 0.7053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3675, nmae: 0.5937, r2: 0.6325, combined_score: 0.7313\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5812)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery using a log\u2013quadratic interaction model.\nModel: L(E, P) = exp(\u03b80\n                   + \u03b81\u00b7lnP\n                   + \u03b82\u00b7lnE\n                   + \u03b83\u00b7(lnP\u00b7lnE)\n                   + \u03b84\u00b7(lnP)^2\n                   + \u03b85\u00b7(lnE)^2)\nwhere\n  E = num_experts,\n  P = dense parameter count.\nThis 6-parameter form captures both multiplicative interactions and curvature in log-space.\nFitting is done via a single linear least-squares solve on log(loss), ensuring efficiency\nand numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_param_count] pairs and 6 parameters.\n    data_points: shape (N,2)\n    params: array-like of length 6 [\u03b80\u2026\u03b85]\n    Returns: array of length N\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Split and stabilize inputs\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Unpack parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # Compute the log\u2010quadratic form\n    u = (\n        \u03b80\n        + \u03b81 * lnP\n        + \u03b82 * lnE\n        + \u03b83 * (lnP * lnE)\n        + \u03b84 * (lnP ** 2)\n        + \u03b85 * (lnE ** 2)\n    )\n    # Return to original scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013quadratic interaction scaling law by minimizing\n    squared error in log-space:\n      minimize || M\u00b7\u03b8 \u2212 ln(y) ||^2\n    where M = [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2].\n    Returns optimized \u03b8 of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Ensure strictly positive loss for log\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Prepare features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Build design matrix\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP ** 2,\n        lnE ** 2\n    ]).T  # shape (N, 6)\n    # Solve linear least squares in log-space\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3675), Performs well on nmae (0.5937), Performs well on r2 (0.6325), Performs well on combined_score (0.7313)\n\n\n### Program 2 (Score: 0.5807)\n```python\n\"\"\"\nScaling law discovery for MoE LLM finetuning scenarios\nEnhanced 6-parameter power-law model with an interaction term.\nModel form:\n    L(N_e, D) = a * N_e^{-p1}\n               + b * D^{-p2}\n               + c * (N_e * D)^{-p3}\nParameters: [a, p1, b, p2, c, p3]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given:\n      data_points: (N,2) array [num_experts, dense_parameter_count]\n      params: array [a, p1, b, p2, c, p3]\n    Returns:\n      (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    ne = X[:, 0]\n    D  = X[:, 1]\n    # avoid zero or negative values inside negative powers\n    ne_clip = np.maximum(ne, 1e-8)\n    D_clip  = np.maximum(D,  1e-8)\n    a, p1, b, p2, c, p3 = params\n    term1 = a * ne_clip ** (-p1)\n    term2 = b * D_clip  ** (-p2)\n    term3 = c * (ne_clip * D_clip) ** (-p3)\n    return term1 + term2 + term3\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c, p3].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # Simple initialization based on range of y\n    y_min, y_max = np.min(y), np.max(y)\n    y_range = (y_max - y_min) if (y_max > y_min) else 1.0\n    init_a, init_b, init_c = y_range * 0.5, y_range * 0.3, y_range * 0.2\n    init_p1 = init_p2 = init_p3 = 0.5\n    init_params = np.array([init_a, init_p1, init_b, init_p2, init_c, init_p3])\n\n    # Bounds: all scales >= 0, exponents in [0,5]\n    lower_bounds = [0.0, 0.0,  0.0, 0.0,  0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=20000\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4179), Performs well on nmae (0.6175), Performs well on r2 (0.5821), Performs well on combined_score (0.7053)\n\n\n### Program 3 (Score: 0.6308)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.2561), Performs well on nmae (1.0801), Performs well on r2 (-0.2561), Performs well on combined_score (0.4432)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6308, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.256), Excellent nmae (1.080)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery using a log\u2013quadratic interaction model.\nModel: L(E, P) = exp(\u03b80\n                   + \u03b81\u00b7lnP\n                   + \u03b82\u00b7lnE\n                   + \u03b83\u00b7(lnP\u00b7lnE)\n                   + \u03b84\u00b7(lnP)^2\n                   + \u03b85\u00b7(lnE)^2)\nwhere\n  E = num_experts,\n  P = dense parameter count.\nThis 6-parameter form captures both multiplicative interactions and curvature in log-space.\nFitting is done via a single linear least-squares solve on log(loss), ensuring efficiency\nand numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_param_count] pairs and 6 parameters.\n    data_points: shape (N,2)\n    params: array-like of length 6 [\u03b80\u2026\u03b85]\n    Returns: array of length N\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Split and stabilize inputs\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Unpack parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # Compute the log\u2010quadratic form\n    u = (\n        \u03b80\n        + \u03b81 * lnP\n        + \u03b82 * lnE\n        + \u03b83 * (lnP * lnE)\n        + \u03b84 * (lnP ** 2)\n        + \u03b85 * (lnE ** 2)\n    )\n    # Return to original scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013quadratic interaction scaling law by minimizing\n    squared error in log-space:\n      minimize || M\u00b7\u03b8 \u2212 ln(y) ||^2\n    where M = [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2].\n    Returns optimized \u03b8 of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Ensure strictly positive loss for log\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Prepare features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Build design matrix\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP ** 2,\n        lnE ** 2\n    ]).T  # shape (N, 6)\n    # Solve linear least squares in log-space\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Below is a refinement of the 6-parameter log\u2013quadratic interaction model.  We keep the same functional form as before, but:\n\n1.  First solve for the parameters by ordinary least\u2010squares in log-space (closed form).\n2.  Then \u201cpolish\u201d that solution by running a small, robust least\u2010squares solve (soft L1 loss) again in log-space.  \n    This usually cuts down outlier influence and improves NMSE/NMAE while preserving the good R\u00b2.\n\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6-parameter log\u2013quadratic interaction model:\n      L(E,P) = exp( \u03b80\n                  + \u03b81\u00b7lnP\n                  + \u03b82\u00b7lnE\n                  + \u03b83\u00b7(lnP\u00b7lnE)\n                  + \u03b84\u00b7(lnP)^2\n                  + \u03b85\u00b7(lnE)^2 )\n    data_points: shape (N,2) [num_experts, dense_param_count]\n    params: array\u2010like of length 6 [\u03b80,\u2026,\u03b85]\n    returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # prevent log(0)\n    E = np.clip(X[:,0], 1e-8, None)\n    P = np.clip(X[:,1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80,\u03b81,\u03b82,\u03b83,\u03b84,\u03b85 = \u03b8\n\n    u = (\u03b80\n         + \u03b81*lnP\n         + \u03b82*lnE\n         + \u03b83*(lnP*lnE)\n         + \u03b84*(lnP**2)\n         + \u03b85*(lnE**2))\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter log\u2013quadratic model by:\n      1)  Closed-form least squares in log-space\n      2)  A short \u2018polish\u2019 with a robust soft\u2010L1 solver on the same log-space residuals\n    Returns optimized \u03b8 of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ---- prepare log-space targets and features ----\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n\n    E = np.clip(X[:,0], 1e-8, None)\n    P = np.clip(X[:,1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    # design matrix: [1, lnP, lnE, lnP*lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP**2,\n        lnE**2\n    ]).T  # shape (N,6)\n\n    # 1) closed-form least squares in log-space\n    \u03b8_init, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n\n    # 2) refine with a short robust least-squares on the same log residuals\n    def _residuals(\u03b8):\n        return M.dot(\u03b8) - ln_y\n\n    result = least_squares(\n        _residuals,\n        x0=\u03b8_init,\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=5000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- We still use the same 6-parameter log\u2013quadratic form to capture multiplicative and curvature effects in `(E,P)`-space.\n- Instead of stopping at the closed\u2010form least squares, we \u201cpolish\u201d the solution with a robust, soft L1 solver in log-space.  \n  This extra step often reduces the influence of outliers and yields lower NMSE/NMAE while preserving a high R\u00b2.\n- We keep the parameter count at 6 and only modify the fitting routine internally."]}}}