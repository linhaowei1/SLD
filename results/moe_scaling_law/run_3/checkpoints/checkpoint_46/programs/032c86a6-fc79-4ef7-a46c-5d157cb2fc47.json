{"id": "032c86a6-fc79-4ef7-a46c-5d157cb2fc47", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved 6-parameter power-law + cross-term scaling law for MoE validation loss.\n\nModel:\n  L(E, P) = a * E^(\u2212\u03b1) + b * P^(\u2212\u03b2) + c * (E\u00b7P)^(\u2212\u03b3)\n\nParameters (6):\n  params = [ln a, \u03b1, ln b, \u03b2, ln c, \u03b3]\n\nWe fit via robust non-linear least\u2010squares (Huber loss) on the original scale,\nwith positivity guaranteed by parametrizing a, b, c in log\u2010space.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_parameter_count].\n    data_points: shape (N,2) array\n    params: length-6 array [ln a, \u03b1, ln b, \u03b2, ln c, \u03b3]\n    Returns: length-N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if params is None or len(params) != 6:\n        raise ValueError(f\"Expected 6 parameters, got {None if params is None else len(params)}\")\n    ln_a, alpha, ln_b, beta, ln_c, gamma = params\n    # Exponentiate to ensure positivity of coefficients\n    a = np.exp(ln_a)\n    b = np.exp(ln_b)\n    c = np.exp(ln_c)\n    # Clip features for numerical stability\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    # Compute three power-law contributions\n    ne_term    = a * E**(-alpha)\n    dp_term    = b * P**(-beta)\n    cross_term = c * (E * P)**(-gamma)\n    return ne_term + dp_term + cross_term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power-law + cross-term model by minimizing\n      || L_pred(params; E, P) \u2212 loss_values ||_2\n    using a robust Huber loss.\n    Returns optimized params = [ln a, \u03b1, ln b, \u03b2, ln c, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Pre-clip to avoid zeros or negatives\n    y_pos = np.clip(y, 1e-8, None)\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y_pos\n\n    # Initialization: split mean loss equally among a, b, c; exponents ~ 0.5\n    y_mean = np.mean(y_pos)\n    init = np.array([\n        np.log(y_mean / 3.0),  # ln a\n        0.5,                   # \u03b1\n        np.log(y_mean / 3.0),  # ln b\n        0.5,                   # \u03b2\n        np.log(y_mean / 3.0),  # ln c\n        0.5                    # \u03b3\n    ])\n\n    # Bounds: ln-coeffs unbounded, exponents \u2265 0 up to a reasonable cap\n    lower = np.array([-np.inf, 0.0, -np.inf, 0.0, -np.inf, 0.0])\n    upper = np.array([ np.inf, 5.0,  np.inf, 5.0,  np.inf, 5.0])\n\n    # Estimate a robust scale for Huber loss\n    y_std = np.std(y_pos)\n    f_scale = y_std if y_std > 0 else 1.0\n\n    # Solve via robust least squares\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower, upper),\n        loss='huber',\n        f_scale=f_scale,\n        max_nfev=10000\n    )\n    return result.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "dcd8d2ed-9182-4eb5-bd42-96dd373339fb", "generation": 3, "timestamp": 1754718949.0514524, "iteration_found": 34, "metrics": {"nmse": 0.4267284480303444, "nmae": 0.6232795642309233, "r2": 0.5732715519696556, "combined_score": 0.7009042269960621}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.31365488338578484, "nmae": 0.5469430410805372, "r2": 0.6863451166142152, "combined_score": 0.7612349427900137}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between MoE architecture parameters and validation loss.\n\n**IMPORTANT: The scaling law function must use no more than 6 parameters.**\n\nFocus on mathematical accuracy across different MoE configurations, generalization across expert counts and model sizes, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [num_experts, dense_parameter_count] - 2D input\n- Labels: loss_validation - scalar output\n- Number of experts: ranges from 1 to multiple values\n- Dense parameter count: ranges across different model architectures\n- Validation loss: continuous values representing model performance\n- All data filtered to step 249000 for consistency\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # num_experts: Array of expert counts\n    # dense_parameter_count: Array of dense parameter counts\n    # params: Array of up to 6 parameters\n    # Returns: Predicted validation loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # loss_values: Array of corresponding validation loss values\n    # Returns: Optimized parameters (up to 6 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3137\n- nmae: 0.5469\n- r2: 0.6863\n- combined_score: 0.7612\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.3675, nmae: 0.5937, r2: 0.6325, combined_score: 0.7313\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3137, nmae: 0.5469, r2: 0.6863, combined_score: 0.7612\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.3137, nmae: 0.5469, r2: 0.6863, combined_score: 0.7612\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust log\u2013quadratic interaction scaling law for MoE validation loss:\n  ln L = \u03b80 + \u03b81\u00b7lnE + \u03b82\u00b7lnP + \u03b83\u00b7(lnE\u00b7lnP) + \u03b84\u00b7(lnE)^2 + \u03b85\u00b7(lnP)^2\nWe fit via iteratively reweighted least squares (Huber) in log\u2010space\nfor numerical stability and outlier robustness.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_parameter_count].\n    data_points: (N,2) array\n    params: [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # ensure positivity\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010loss model\n    u = (\n        \u03b80\n        + \u03b81 * lnE\n        + \u03b82 * lnP\n        + \u03b83 * (lnE * lnP)\n        + \u03b84 * (lnE ** 2)\n        + \u03b85 * (lnP ** 2)\n    )\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter log\u2010quadratic model using Huber\u2010IRLS in log\u2010space.\n    Returns optimized params [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # avoid non\u2010positive losses\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n\n    # features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    # design matrix: [1, lnE, lnP, lnE\u00b7lnP, (lnE)^2, (lnP)^2]\n    M = np.vstack([\n        np.ones_like(lnE),\n        lnE,\n        lnP,\n        lnE * lnP,\n        lnE ** 2,\n        lnP ** 2\n    ]).T  # shape (N,6)\n\n    # initial ordinary least\u2010squares in log\u2010space\n    \u03b8, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n\n    # Huber IRLS to reduce sensitivity to outliers\n    for _ in range(3):\n        # residuals in log\u2010space\n        r = M.dot(\u03b8) - ln_y\n        # robust scale via MAD\n        mad = np.median(np.abs(r - np.median(r))) * 1.4826 + 1e-8\n        delta = 1.345 * mad\n        # Huber weights\n        w = np.where(np.abs(r) <= delta, 1.0, delta / np.abs(r))\n        # weighted normal equations: (M^T W M) \u03b8 = M^T W ln_y\n        W = w[:, None]\n        A = M.T.dot(W * M)\n        b = M.T.dot(w * ln_y)\n        \u03b8 = np.linalg.lstsq(A, b, rcond=None)[0]\n\n    return \u03b8\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3137), Performs well on nmae (0.5469), Performs well on r2 (0.6863), Performs well on combined_score (0.7612)\n\n\n### Program 2 (Score: 0.5770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust log\u2013quadratic interaction scaling law for MoE validation loss:\n  ln L = \u03b80 + \u03b81\u00b7lnE + \u03b82\u00b7lnP + \u03b83\u00b7(lnE\u00b7lnP) + \u03b84\u00b7(lnE)^2 + \u03b85\u00b7(lnP)^2\nWe fit via iteratively reweighted least squares (Huber) in log\u2010space\nfor numerical stability and outlier robustness.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_parameter_count].\n    data_points: (N,2) array\n    params: [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # ensure positivity\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010loss model\n    u = (\n        \u03b80\n        + \u03b81 * lnE\n        + \u03b82 * lnP\n        + \u03b83 * (lnE * lnP)\n        + \u03b84 * (lnE ** 2)\n        + \u03b85 * (lnP ** 2)\n    )\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter log\u2010quadratic model using Huber\u2010IRLS in log\u2010space.\n    Returns optimized params [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # avoid non\u2010positive losses\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n\n    # features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    # design matrix: [1, lnE, lnP, lnE\u00b7lnP, (lnE)^2, (lnP)^2]\n    M = np.vstack([\n        np.ones_like(lnE),\n        lnE,\n        lnP,\n        lnE * lnP,\n        lnE ** 2,\n        lnP ** 2\n    ]).T  # shape (N,6)\n\n    # initial ordinary least\u2010squares in log\u2010space\n    \u03b8, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n\n    # Huber IRLS to reduce sensitivity to outliers\n    for _ in range(3):\n        # residuals in log\u2010space\n        r = M.dot(\u03b8) - ln_y\n        # robust scale via MAD\n        mad = np.median(np.abs(r - np.median(r))) * 1.4826 + 1e-8\n        delta = 1.345 * mad\n        # Huber weights\n        w = np.where(np.abs(r) <= delta, 1.0, delta / np.abs(r))\n        # weighted normal equations: (M^T W M) \u03b8 = M^T W ln_y\n        W = w[:, None]\n        A = M.T.dot(W * M)\n        b = M.T.dot(w * ln_y)\n        \u03b8 = np.linalg.lstsq(A, b, rcond=None)[0]\n\n    return \u03b8\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3137), Performs well on nmae (0.5469), Performs well on r2 (0.6863), Performs well on combined_score (0.7612)\n\n\n### Program 3 (Score: 0.5812)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery using a log\u2013quadratic interaction model.\nModel: L(E, P) = exp(\u03b80\n                   + \u03b81\u00b7lnP\n                   + \u03b82\u00b7lnE\n                   + \u03b83\u00b7(lnP\u00b7lnE)\n                   + \u03b84\u00b7(lnP)^2\n                   + \u03b85\u00b7(lnE)^2)\nwhere\n  E = num_experts,\n  P = dense parameter count.\nThis 6-parameter form captures both multiplicative interactions and curvature in log-space.\nFitting is done via a single linear least-squares solve on log(loss), ensuring efficiency\nand numerical stability.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_param_count] pairs and 6 parameters.\n    data_points: shape (N,2)\n    params: array-like of length 6 [\u03b80\u2026\u03b85]\n    Returns: array of length N\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Split and stabilize inputs\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Unpack parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # Compute the log\u2010quadratic form\n    u = (\n        \u03b80\n        + \u03b81 * lnP\n        + \u03b82 * lnE\n        + \u03b83 * (lnP * lnE)\n        + \u03b84 * (lnP ** 2)\n        + \u03b85 * (lnE ** 2)\n    )\n    # Return to original scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013quadratic interaction scaling law by minimizing\n    squared error in log-space:\n      minimize || M\u00b7\u03b8 \u2212 ln(y) ||^2\n    where M = [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2].\n    Returns optimized \u03b8 of length 6.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Ensure strictly positive loss for log\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n    # Prepare features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # Build design matrix\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP ** 2,\n        lnE ** 2\n    ]).T  # shape (N, 6)\n    # Solve linear least squares in log-space\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3675), Performs well on nmae (0.5937), Performs well on r2 (0.6325), Performs well on combined_score (0.7313)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6308)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6308)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6308, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.256), Excellent nmae (1.080)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRobust log\u2013quadratic interaction scaling law for MoE validation loss:\n  ln L = \u03b80 + \u03b81\u00b7lnE + \u03b82\u00b7lnP + \u03b83\u00b7(lnE\u00b7lnP) + \u03b84\u00b7(lnE)^2 + \u03b85\u00b7(lnP)^2\nWe fit via iteratively reweighted least squares (Huber) in log\u2010space\nfor numerical stability and outlier robustness.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_parameter_count].\n    data_points: (N,2) array\n    params: [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # ensure positivity\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # log\u2010loss model\n    u = (\n        \u03b80\n        + \u03b81 * lnE\n        + \u03b82 * lnP\n        + \u03b83 * (lnE * lnP)\n        + \u03b84 * (lnE ** 2)\n        + \u03b85 * (lnP ** 2)\n    )\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter log\u2010quadratic model using Huber\u2010IRLS in log\u2010space.\n    Returns optimized params [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # avoid non\u2010positive losses\n    y_pos = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_pos)\n\n    # features\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n\n    # design matrix: [1, lnE, lnP, lnE\u00b7lnP, (lnE)^2, (lnP)^2]\n    M = np.vstack([\n        np.ones_like(lnE),\n        lnE,\n        lnP,\n        lnE * lnP,\n        lnE ** 2,\n        lnP ** 2\n    ]).T  # shape (N,6)\n\n    # initial ordinary least\u2010squares in log\u2010space\n    \u03b8, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n\n    # Huber IRLS to reduce sensitivity to outliers\n    for _ in range(3):\n        # residuals in log\u2010space\n        r = M.dot(\u03b8) - ln_y\n        # robust scale via MAD\n        mad = np.median(np.abs(r - np.median(r))) * 1.4826 + 1e-8\n        delta = 1.345 * mad\n        # Huber weights\n        w = np.where(np.abs(r) <= delta, 1.0, delta / np.abs(r))\n        # weighted normal equations: (M^T W M) \u03b8 = M^T W ln_y\n        W = w[:, None]\n        A = M.T.dot(W * M)\n        b = M.T.dot(w * ln_y)\n        \u03b8 = np.linalg.lstsq(A, b, rcond=None)[0]\n\n    return \u03b8\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 6-parameter power-law + cross-term scaling law for MoE validation loss.\n\nModel:\n  L(E, P) = a * E^(\u2212\u03b1) + b * P^(\u2212\u03b2) + c * (E\u00b7P)^(\u2212\u03b3)\n\nParameters (6):\n  params = [ln a, \u03b1, ln b, \u03b2, ln c, \u03b3]\n\nWe fit via robust non-linear least\u2010squares (Huber loss) on the original scale,\nwith positivity guaranteed by parametrizing a, b, c in log\u2010space.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given [num_experts, dense_parameter_count].\n    data_points: shape (N,2) array\n    params: length-6 array [ln a, \u03b1, ln b, \u03b2, ln c, \u03b3]\n    Returns: length-N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if params is None or len(params) != 6:\n        raise ValueError(f\"Expected 6 parameters, got {None if params is None else len(params)}\")\n    ln_a, alpha, ln_b, beta, ln_c, gamma = params\n    # Exponentiate to ensure positivity of coefficients\n    a = np.exp(ln_a)\n    b = np.exp(ln_b)\n    c = np.exp(ln_c)\n    # Clip features for numerical stability\n    E = np.clip(X[:, 0], 1e-8, None)\n    P = np.clip(X[:, 1], 1e-8, None)\n    # Compute three power-law contributions\n    ne_term    = a * E**(-alpha)\n    dp_term    = b * P**(-beta)\n    cross_term = c * (E * P)**(-gamma)\n    return ne_term + dp_term + cross_term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter power-law + cross-term model by minimizing\n      || L_pred(params; E, P) \u2212 loss_values ||_2\n    using a robust Huber loss.\n    Returns optimized params = [ln a, \u03b1, ln b, \u03b2, ln c, \u03b3].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Pre-clip to avoid zeros or negatives\n    y_pos = np.clip(y, 1e-8, None)\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y_pos\n\n    # Initialization: split mean loss equally among a, b, c; exponents ~ 0.5\n    y_mean = np.mean(y_pos)\n    init = np.array([\n        np.log(y_mean / 3.0),  # ln a\n        0.5,                   # \u03b1\n        np.log(y_mean / 3.0),  # ln b\n        0.5,                   # \u03b2\n        np.log(y_mean / 3.0),  # ln c\n        0.5                    # \u03b3\n    ])\n\n    # Bounds: ln-coeffs unbounded, exponents \u2265 0 up to a reasonable cap\n    lower = np.array([-np.inf, 0.0, -np.inf, 0.0, -np.inf, 0.0])\n    upper = np.array([ np.inf, 5.0,  np.inf, 5.0,  np.inf, 5.0])\n\n    # Estimate a robust scale for Huber loss\n    y_std = np.std(y_pos)\n    f_scale = y_std if y_std > 0 else 1.0\n\n    # Solve via robust least squares\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower, upper),\n        loss='huber',\n        f_scale=f_scale,\n        max_nfev=10000\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```"]}}}