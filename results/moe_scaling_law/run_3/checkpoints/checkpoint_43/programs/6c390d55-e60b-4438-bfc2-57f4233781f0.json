{"id": "6c390d55-e60b-4438-bfc2-57f4233781f0", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss for MoE architectures via a 6-parameter combined power law:\n        Ne = number of experts\n        D  = dense parameter count\n    Model:\n        capacity = a * Ne**alpha + b * D**beta\n        loss_pred = capacity**(-p) + c\n\n    Inputs:\n      data_points: (N,2) array [[Ne, D], ...]\n      params:      length-6 array [a, alpha, b, beta, p, c]\n    Output:\n      loss_pred: (N,) array of predicted validation losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # split features\n    Ne = X[:, 0]\n    D  = X[:, 1]\n    # ensure strictly positive to avoid invalid powers\n    Ne = np.clip(Ne, 1.0, None)\n    D  = np.clip(D, 1.0, None)\n\n    # unpack parameters\n    a, alpha, b, beta, p, c = params\n\n    # combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    cap = np.clip(cap, 1e-12, None)\n\n    # inverted power law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law parameters [a, alpha, b, beta, p, c]\n    by minimizing the squared error between predicted and actual losses.\n    Uses a bounded Trust Region Reflective solver.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # clamp target to avoid pathological zeros\n    y = np.clip(y, 1e-8, None)\n\n    # extract features for initialization\n    Ne = np.clip(X[:, 0], 1.0, None)\n    D  = np.clip(X[:, 1], 1.0, None)\n\n    # sensible initial guesses\n    # use median scales to balance contributions\n    Ne_med = np.median(Ne)\n    D_med  = np.median(D)\n    y_min  = np.min(y)\n\n    # a and b scale inversely with median feature\n    a0      = 1.0 / max(Ne_med, 1e-6)\n    b0      = 1.0 / max(D_med, 1e-6)\n    alpha0  = 0.5\n    beta0   = 0.5\n    p0      = 0.5\n    c0      = max(0.0, y_min * 0.1)\n\n    init_params = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n\n    # set bounds to enforce positivity and reasonable exponent ranges\n    lower_bounds = [1e-12, 0.0, 1e-12, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, 5.0, np.inf]\n\n    # define residuals for least-squares\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # run the optimizer\n    result = least_squares(\n        fun=residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "973a64ce-3792-4944-91ee-21d36d34b275", "generation": 3, "timestamp": 1754718849.4566894, "iteration_found": 32, "metrics": {"nmse": 0.14440587985980474, "nmae": 0.34010060123921726, "r2": 0.8555941201401953, "combined_score": 0.8738158529231822}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.4267280053786966, "nmae": 0.623279209402356, "r2": 0.5732719946213034, "combined_score": 0.7009044444561596}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between MoE architecture parameters and validation loss.\n\n**IMPORTANT: The scaling law function must use no more than 6 parameters.**\n\nFocus on mathematical accuracy across different MoE configurations, generalization across expert counts and model sizes, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: [num_experts, dense_parameter_count] - 2D input\n- Labels: loss_validation - scalar output\n- Number of experts: ranges from 1 to multiple values\n- Dense parameter count: ranges across different model architectures\n- Validation loss: continuous values representing model performance\n- All data filtered to step 249000 for consistency\n- 80/20 train/test split applied\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # num_experts: Array of expert counts\n    # dense_parameter_count: Array of dense parameter counts\n    # params: Array of up to 6 parameters\n    # Returns: Predicted validation loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,2) array with columns [num_experts, dense_parameter_count]\n    # loss_values: Array of corresponding validation loss values\n    # Returns: Optimized parameters (up to 6 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.4267\n- nmae: 0.6233\n- r2: 0.5733\n- combined_score: 0.7009\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.4267, nmae: 0.6233, r2: 0.5733, combined_score: 0.7009\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3675, nmae: 0.5937, r2: 0.6325, combined_score: 0.7313\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1444, nmae: 0.3401, r2: 0.8556, combined_score: 0.8738\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5535)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss using a combined power-law:\n        L = (a * Ne^alpha + b * D^beta)^(-p) + c\n    where:\n        Ne = num_experts\n        D  = dense_parameter_count\n    params = [a, alpha, b, beta, p, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Ne = np.maximum(X[:, 0], 1.0)    # ensure positivity\n    D  = np.maximum(X[:, 1], 1.0)\n    \n    a, alpha, b, beta, p, c = params\n    # combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    cap = np.maximum(cap, 1e-12)\n    # inverted power-law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by non-linear least squares.\n    Returns params = [a, alpha, b, beta, p, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # derive robust initial guesses\n    Ne = X[:, 0]; D = X[:, 1]\n    Ne_med = np.median(Ne[Ne > 0])\n    D_med  = np.median(D[D   > 0])\n    y_min  = np.min(y)\n    \n    a0     = 1.0 / max(Ne_med, 1e-6)\n    b0     = 1.0 / max(D_med, 1e-6)\n    alpha0 = 0.5\n    beta0  = 0.5\n    p0     = 0.5\n    c0     = max(0.0, y_min * 0.1)\n    \n    init_params = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n    \n    # bounds to keep exponents and scales in a reasonable range\n    lower_bounds = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, 5.0, np.inf]\n    \n    def residuals(params):\n        return scaling_law_func(X, params) - y\n    \n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n    \n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1444), Performs well on nmae (0.3401), Performs well on r2 (0.8556), Performs well on combined_score (0.8738)\n\n\n### Program 2 (Score: 0.5812)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law discovery using a log\u2013quadratic interaction model.\nModel:\n    L(E, P) = exp(\u03b80\n                  + \u03b81\u00b7lnP\n                  + \u03b82\u00b7lnE\n                  + \u03b83\u00b7(lnP\u00b7lnE)\n                  + \u03b84\u00b7(lnP)^2\n                  + \u03b85\u00b7(lnE)^2)\nwhere\n    E = num_experts,\n    P = dense_parameter_count.\nThis 6-parameter form captures multiplicative interactions and curvature in log-space.\nFitting is done via a closed-form linear least squares on ln(loss),\nwhich is fast, numerically stable, and requires no iterative optimizer.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array-like of 6 parameters [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85]\n    Returns: (N,) array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # split features\n    E = X[:, 0]\n    P = X[:, 1]\n    # ensure positivity for logs\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    # compute logs\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # unpack parameters\n    \u03b8 = np.asarray(params, dtype=float).ravel()\n    if \u03b8.size != 6:\n        raise ValueError(f\"Expected 6 parameters, got {\u03b8.size}\")\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85 = \u03b8\n    # compute log\u2010quadratic model with interaction\n    u = (\n        \u03b80\n        + \u03b81 * lnP\n        + \u03b82 * lnE\n        + \u03b83 * (lnP * lnE)\n        + \u03b84 * (lnP ** 2)\n        + \u03b85 * (lnE ** 2)\n    )\n    # exponentiate to return to original loss scale\n    return np.exp(u)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter log\u2013quadratic model to minimize squared error\n    in log-loss space.\n    Returns: array of fitted parameters [\u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # ensure positivity for target log\n    y_clip = np.clip(y, 1e-8, None)\n    ln_y = np.log(y_clip)\n    # extract features\n    E = X[:, 0]\n    P = X[:, 1]\n    E = np.clip(E, 1e-8, None)\n    P = np.clip(P, 1e-8, None)\n    lnE = np.log(E)\n    lnP = np.log(P)\n    # build design matrix with 6 columns\n    # [1, lnP, lnE, lnP\u00b7lnE, (lnP)^2, (lnE)^2]\n    M = np.vstack([\n        np.ones_like(lnP),\n        lnP,\n        lnE,\n        lnP * lnE,\n        lnP ** 2,\n        lnE ** 2\n    ]).T  # shape (N,6)\n    # solve linear least squares: minimize ||M \u03b8 - ln_y||^2\n    \u03b8_opt, *_ = np.linalg.lstsq(M, ln_y, rcond=None)\n    return \u03b8_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3675), Performs well on nmae (0.5937), Performs well on r2 (0.6325), Performs well on combined_score (0.7313)\n\n\n### Program 3 (Score: 0.5810)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for MoE LLM finetuning scenarios.\nEnhanced power\u2010law model with an interaction term.\nModel form:\n    L(N_e, D) = a * N_e^{-p} + b * D^{-p} + c * (N_e * D)^{-q} + d\nParameters: [a, b, c, d, p, q] (6 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: shape (N,2) array [num_experts, dense_parameter_count]\n    params: length\u20106 array [a, b, c, d, p, q]\n      a, b, c, d >= 0  (scale terms and offset)\n      p, q   >= 0      (exponents)\n    Returns: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    ne = X[:, 0]\n    dp = X[:, 1]\n    # unpack parameters\n    a, b, c, d, p, q = params\n\n    # avoid raising zero or negative to negative powers\n    ne_safe = np.maximum(ne, 1e-8)\n    dp_safe = np.maximum(dp, 1e-8)\n    inter_safe = np.maximum(ne_safe * dp_safe, 1e-8)\n\n    # compute each component\n    term_ne   = a * (ne_safe ** (-p))\n    term_dp   = b * (dp_safe ** (-p))\n    term_inter= c * (inter_safe ** (-q))\n\n    return term_ne + term_dp + term_inter + d\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, b, c, d, p, q].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # residuals for least squares\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # initial parameter guesses based on data range\n    y_min, y_max = np.min(y), np.max(y)\n    span = max(y_max - y_min, 1e-2)\n\n    init_a = span * 0.6\n    init_b = span * 0.6\n    init_c = span * 0.3\n    init_d = max(y_min * 0.9, 0.0)\n    init_p = 0.5\n    init_q = 0.5\n\n    init_params = np.array([init_a, init_b, init_c, init_d, init_p, init_q])\n\n    # bounds to ensure positivity and reasonable exponents\n    lower_bounds = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, np.inf, np.inf, np.inf, 5.0, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=5000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.4267), Performs well on nmae (0.6233), Performs well on r2 (0.5733), Performs well on combined_score (0.7009)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6308)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5535, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss using a combined power-law:\n        L = (a * Ne^alpha + b * D^beta)^(-p) + c\n    where:\n        Ne = num_experts\n        D  = dense_parameter_count\n    params = [a, alpha, b, beta, p, c]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Ne = np.maximum(X[:, 0], 1.0)    # ensure positivity\n    D  = np.maximum(X[:, 1], 1.0)\n    \n    a, alpha, b, beta, p, c = params\n    # combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    cap = np.maximum(cap, 1e-12)\n    # inverted power-law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter scaling law by non-linear least squares.\n    Returns params = [a, alpha, b, beta, p, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # derive robust initial guesses\n    Ne = X[:, 0]; D = X[:, 1]\n    Ne_med = np.median(Ne[Ne > 0])\n    D_med  = np.median(D[D   > 0])\n    y_min  = np.min(y)\n    \n    a0     = 1.0 / max(Ne_med, 1e-6)\n    b0     = 1.0 / max(D_med, 1e-6)\n    alpha0 = 0.5\n    beta0  = 0.5\n    p0     = 0.5\n    c0     = max(0.0, y_min * 0.1)\n    \n    init_params = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n    \n    # bounds to keep exponents and scales in a reasonable range\n    lower_bounds = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, 5.0, np.inf]\n    \n    def residuals(params):\n        return scaling_law_func(X, params) - y\n    \n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n    \n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.6308, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved multi-parameter power-law model with efficient bounded fitting.\nModel form:\n    L(N_e, D) = a * N_e^{-p1} + b * D^{-p2} + c\nParameters: [a, p1, b, p2, c] (5 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: (N,2) array [num_experts, dense_parameter_count]\n    params: array [a, p1, b, p2, c]\n    Returns: (N,) predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    # split features\n    num_experts = X[:, 0].astype(np.float64)\n    dense_params = X[:, 1].astype(np.float64)\n    # unpack parameters\n    a, p1, b, p2, c = params\n    # compute power-law contributions\n    # use np.maximum to avoid zero**neg issues\n    ne_term = a * (np.maximum(num_experts, 1e-8) ** (-p1))\n    dp_term = b * (np.maximum(dense_params, 1e-8) ** (-p2))\n    return ne_term + dp_term + c\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, p1, b, p2, c].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    y = np.asarray(loss_values).astype(np.float64).ravel()\n    num_experts = X[:, 0]\n    dense_params = X[:, 1]\n\n    # residual function for least-squares\n    def residuals(params):\n        pred = scaling_law_func(X, params)\n        return pred - y\n\n    # initial guesses:\n    y_min, y_max = np.min(y), np.max(y)\n    init_a = max(y_max - y_min, 1.0)\n    init_b = init_a\n    init_c = y_min if y_min > 0 else 0.1\n    init = np.array([init_a, 0.5, init_b, 0.5, init_c])\n\n    # bounds: all parameters >= 0, exponents reasonably capped\n    lower_bounds = [0.0, 0.0, 0.0, 0.0,    0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, np.inf]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.256), Excellent nmae (1.080)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for MoE LLM finetuning scenarios.\nEnhanced power\u2010law model with an interaction term.\nModel form:\n    L(N_e, D) = a * N_e^{-p} + b * D^{-p} + c * (N_e * D)^{-q} + d\nParameters: [a, b, c, d, p, q] (6 total)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss given expert count and dense parameter count.\n    data_points: shape (N,2) array [num_experts, dense_parameter_count]\n    params: length\u20106 array [a, b, c, d, p, q]\n      a, b, c, d >= 0  (scale terms and offset)\n      p, q   >= 0      (exponents)\n    Returns: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    ne = X[:, 0]\n    dp = X[:, 1]\n    # unpack parameters\n    a, b, c, d, p, q = params\n\n    # avoid raising zero or negative to negative powers\n    ne_safe = np.maximum(ne, 1e-8)\n    dp_safe = np.maximum(dp, 1e-8)\n    inter_safe = np.maximum(ne_safe * dp_safe, 1e-8)\n\n    # compute each component\n    term_ne   = a * (ne_safe ** (-p))\n    term_dp   = b * (dp_safe ** (-p))\n    term_inter= c * (inter_safe ** (-q))\n\n    return term_ne + term_dp + term_inter + d\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law to minimize MSE between predicted and actual loss.\n    Returns optimized params [a, b, c, d, p, q].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=np.float64))\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n\n    # residuals for least squares\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # initial parameter guesses based on data range\n    y_min, y_max = np.min(y), np.max(y)\n    span = max(y_max - y_min, 1e-2)\n\n    init_a = span * 0.6\n    init_b = span * 0.6\n    init_c = span * 0.3\n    init_d = max(y_min * 0.9, 0.0)\n    init_p = 0.5\n    init_q = 0.5\n\n    init_params = np.array([init_a, init_b, init_c, init_d, init_p, init_q])\n\n    # bounds to ensure positivity and reasonable exponents\n    lower_bounds = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, np.inf, np.inf, np.inf, 5.0, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=5000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict validation loss for MoE architectures via a 6-parameter combined power law:\n        Ne = number of experts\n        D  = dense parameter count\n    Model:\n        capacity = a * Ne**alpha + b * D**beta\n        loss_pred = capacity**(-p) + c\n\n    Inputs:\n      data_points: (N,2) array [[Ne, D], ...]\n      params:      length-6 array [a, alpha, b, beta, p, c]\n    Output:\n      loss_pred: (N,) array of predicted validation losses\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # split features\n    Ne = X[:, 0]\n    D  = X[:, 1]\n    # ensure strictly positive to avoid invalid powers\n    Ne = np.clip(Ne, 1.0, None)\n    D  = np.clip(D, 1.0, None)\n\n    # unpack parameters\n    a, alpha, b, beta, p, c = params\n\n    # combined capacity term\n    cap = a * (Ne ** alpha) + b * (D ** beta)\n    cap = np.clip(cap, 1e-12, None)\n\n    # inverted power law plus offset\n    loss_pred = cap ** (-p) + c\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the scaling law parameters [a, alpha, b, beta, p, c]\n    by minimizing the squared error between predicted and actual losses.\n    Uses a bounded Trust Region Reflective solver.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # clamp target to avoid pathological zeros\n    y = np.clip(y, 1e-8, None)\n\n    # extract features for initialization\n    Ne = np.clip(X[:, 0], 1.0, None)\n    D  = np.clip(X[:, 1], 1.0, None)\n\n    # sensible initial guesses\n    # use median scales to balance contributions\n    Ne_med = np.median(Ne)\n    D_med  = np.median(D)\n    y_min  = np.min(y)\n\n    # a and b scale inversely with median feature\n    a0      = 1.0 / max(Ne_med, 1e-6)\n    b0      = 1.0 / max(D_med, 1e-6)\n    alpha0  = 0.5\n    beta0   = 0.5\n    p0      = 0.5\n    c0      = max(0.0, y_min * 0.1)\n\n    init_params = np.array([a0, alpha0, b0, beta0, p0, c0], dtype=float)\n\n    # set bounds to enforce positivity and reasonable exponent ranges\n    lower_bounds = [1e-12, 0.0, 1e-12, 0.0, 0.0, 0.0]\n    upper_bounds = [np.inf, 5.0, np.inf, 5.0, 5.0, np.inf]\n\n    # define residuals for least-squares\n    def residuals(params):\n        return scaling_law_func(X, params) - y\n\n    # run the optimizer\n    result = least_squares(\n        fun=residuals,\n        x0=init_params,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```"]}}}