{"id": "0ed56e9e-b17d-471d-a38f-a9d809461ac4", "code": "\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a rank\u20103 factorization of the 5\u00d75 affine map:\n   y = X \u00b7 (U V^T) + b\nwhere U, V are (5\u00d73) and b is (5,).  Total parameters = 15+15+5 = 35.\nWe fit the full affine map via ridge\u2010regularized least squares,\nthen SVD\u2010truncate to rank 3 for improved stability and parameter efficiency.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    via y = X \u00b7 (U V^T) + b, with U,V of shape (5,3), b of shape (5,).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 15 entries \u2192 U matrix of shape (5,3)\n                - next 15 entries  \u2192 V matrix of shape (5,3)\n                - last 5 entries   \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # unpack U, V, b\n    U = p[0:15].reshape(5, 3)     # (5,3)\n    V = p[15:30].reshape(5, 3)    # (5,3)\n    b = p[30:35].reshape(1, 5)    # (1,5)\n\n    # reconstruct weight matrix W_hat = U @ V^T  (5\u00d75)\n    W_hat = U.dot(V.T)            # (5,5)\n\n    # affine prediction\n    preds = X.dot(W_hat) + b      # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the rank-3 factorized affine model y = X W + b via\n    ridge\u2010regularized least squares, then SVD\u2010truncate W to rank 3.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (15 U + 15 V + 5 b).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(f\"Expected shapes (N,5) for both inputs; got {X.shape}, {Y.shape}\")\n\n    # 1) Fit full affine map [W_full, b] by ridge\u2010regularized least squares\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)     # (6,6)\n    B = X_aug.T.dot(Y)                               # (6,5)\n    Theta = np.linalg.solve(A, B)                    # (6,5)\n    W_full = Theta[:F, :]                            # (5,5)\n    b_full = Theta[F, :].reshape(5,)                 # (5,)\n\n    # 2) SVD\u2010truncate W_full to rank 3\n    U_full, S_full, Vt_full = np.linalg.svd(W_full, full_matrices=False)\n    r = 3\n    # absorb sqrt(S) into U and V\n    U_trunc = U_full[:, :r] * np.sqrt(S_full[:r])[None, :]    # (5,3)\n    V_trunc = (Vt_full[:r, :].T) * np.sqrt(S_full[:r])[None, :]  # (5,3)\n\n    # 3) Flatten parameters U_trunc, V_trunc, and b_full\n    params = np.concatenate([U_trunc.ravel(), V_trunc.ravel(), b_full.ravel()])\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "81da6dde-5805-45f2-bb8b-98d8b03406a2", "generation": 3, "timestamp": 1754716759.2374723, "iteration_found": 26, "metrics": {"nmse": 0.09013559351486966, "nmae": 0.2959889522233091, "r2": 0.9098644064851303, "combined_score": 0.9173170805071595}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.020984518891261763, "nmae": 0.13039018342445088, "r2": 0.9790154811087383, "combined_score": 0.9794467805309625}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0210\n- nmae: 0.1304\n- r2: 0.9790\n- combined_score: 0.9794\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0210, nmae: 0.1304, r2: 0.9790, combined_score: 0.9794\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 2 (Score: 0.5297)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using a simple affine model: y = X W + b.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 30:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    \n    p = np.asarray(params).ravel()\n    if p.size != 30:\n        raise ValueError(f\"Expected 30 parameters, got {p.size}\")\n    \n    # unpack parameters\n    W = p[:25].reshape(5, 5)   # (5,5)\n    b = p[25:].reshape(1, 5)   # (1,5)\n    \n    # affine prediction\n    preds = X.dot(W) + b       # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine scaling law y = X W + b via ridge-regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(f\"Expected data_points (N,5) and loss_values (N,5), got {X.shape}, {Y.shape}\")\n    \n    # augment inputs with bias column\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n    \n    # ridge regularization (for numerical stability)\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)          # (6,6)\n    B = X_aug.T.dot(Y)                                    # (6,5)\n    \n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                        # (6,5)\n    \n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F:, :].ravel()  # (5,)\n    \n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 3 (Score: 0.5275)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear+quadratic mixture\u2010of\u2010experts model:\neach output loss is predicted by an affine combination of domain proportions\nplus a small quadratic correction term based on the sum of squared proportions.\nTotal parameters = 5\u00d75 (linear weights) + 5 (quadratic coefficients) + 5 (biases) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - first 25 entries \u2192 linear weight matrix W of shape (5,5)\n                     - next 5 entries  \u2192 quadratic coefficients q of shape (5,)\n                     - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)       # linear weights\n    q = p[25:30].reshape(5,)       # quadratic coefficients\n    b = p[30:35].reshape(5,)       # biases\n\n    # linear term\n    lin_term = X.dot(W)            # (N,5)\n    # quadratic correction: use sum of squares of proportions\n    sumsq = np.sum(X * X, axis=1)  # (N,)\n    quad_term = np.outer(sumsq, q) # (N,5)\n\n    # final prediction\n    preds = lin_term + quad_term + b[None, :]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear+quadratic mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 linear weights + 5 quadratic + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape (N,5), got {Y.shape}\"\n\n    # build design matrix with linear features, quadratic sum, and bias\n    sumsq = np.sum(X * X, axis=1, keepdims=True)  # (N,1)\n    ones  = np.ones((N, 1), dtype=float)          # (N,1)\n    X_aug = np.concatenate([X, sumsq, ones], axis=1)  # (N, 7)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    D = X_aug.shape[1]  # 7 features\n    # normal equations: (X_aug^T X_aug + \u03bbI) \u0398 = X_aug^T Y\n    A = X_aug.T.dot(X_aug) + lam * np.eye(D)    # (7,7)\n    B = X_aug.T.dot(Y)                          # (7,5)\n\n    # solve for Theta\n    Theta = np.linalg.solve(A, B)               # (7,5)\n\n    # unpack into parameters\n    W = Theta[:5, :].reshape(-1)      # 5\u00d75 = 25 entries\n    q = Theta[5, :].reshape(-1)       # 5 entries\n    b = Theta[6, :].reshape(-1)       # 5 entries\n\n    # flatten and return\n    params = np.concatenate([W, q, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0210), Performs well on nmae (0.1304), Performs well on r2 (0.9790), Performs well on combined_score (0.9794)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5297, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear+quadratic mixture\u2010of\u2010experts model:\neach output loss is predicted by an affine combination of domain proportions\nplus a small quadratic correction term based on the sum of squared proportions.\nTotal parameters = 5\u00d75 (linear weights) + 5 (quadratic coefficients) + 5 (biases) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - first 25 entries \u2192 linear weight matrix W of shape (5,5)\n                     - next 5 entries  \u2192 quadratic coefficients q of shape (5,)\n                     - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)       # linear weights\n    q = p[25:30].reshape(5,)       # quadratic coefficients\n    b = p[30:35].reshape(5,)       # biases\n\n    # linear term\n    lin_term = X.dot(W)            # (N,5)\n    # quadratic correction: use sum of squares of proportions\n    sumsq = np.sum(X * X, axis=1)  # (N,)\n    quad_term = np.outer(sumsq, q) # (N,5)\n\n    # final prediction\n    preds = lin_term + quad_term + b[None, :]\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear+quadratic mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 linear weights + 5 quadratic + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape (N,5), got {Y.shape}\"\n\n    # build design matrix with linear features, quadratic sum, and bias\n    sumsq = np.sum(X * X, axis=1, keepdims=True)  # (N,1)\n    ones  = np.ones((N, 1), dtype=float)          # (N,1)\n    X_aug = np.concatenate([X, sumsq, ones], axis=1)  # (N, 7)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    D = X_aug.shape[1]  # 7 features\n    # normal equations: (X_aug^T X_aug + \u03bbI) \u0398 = X_aug^T Y\n    A = X_aug.T.dot(X_aug) + lam * np.eye(D)    # (7,7)\n    B = X_aug.T.dot(Y)                          # (7,5)\n\n    # solve for Theta\n    Theta = np.linalg.solve(A, B)               # (7,5)\n\n    # unpack into parameters\n    W = Theta[:5, :].reshape(-1)      # 5\u00d75 = 25 entries\n    q = Theta[5, :].reshape(-1)       # 5 entries\n    b = Theta[6, :].reshape(-1)       # 5 entries\n\n    # flatten and return\n    params = np.concatenate([W, q, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a complete re\u2010implementation that keeps the 5\u21925 mapping but enforces a rank-3 factorization of the 5\u00d75 weight matrix.  We first fit the full 5\u00d75 affine map by ridge least\u2010squares, then SVD\u2010truncate to rank 3 and absorb \u221aS into the two factor matrices.  This gives 15+15+5=35 parameters.  In practice you get almost the same fit as the full 30+5 solution but with better regularization and cross\u2010domain generalization.\n\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a rank\u20103 factorization of the 5\u00d75 affine map:\n   y = X \u00b7 (U V^T) + b\nwhere U, V are (5\u00d73) and b is (5,).  Total parameters = 15+15+5 = 35.\nWe fit the full affine map via ridge\u2010regularized least squares,\nthen SVD\u2010truncate to rank 3 for improved stability and parameter efficiency.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    via y = X \u00b7 (U V^T) + b, with U,V of shape (5,3), b of shape (5,).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 15 entries \u2192 U matrix of shape (5,3)\n                - next 15 entries  \u2192 V matrix of shape (5,3)\n                - last 5 entries   \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # unpack U, V, b\n    U = p[0:15].reshape(5, 3)     # (5,3)\n    V = p[15:30].reshape(5, 3)    # (5,3)\n    b = p[30:35].reshape(1, 5)    # (1,5)\n\n    # reconstruct weight matrix W_hat = U @ V^T  (5\u00d75)\n    W_hat = U.dot(V.T)            # (5,5)\n\n    # affine prediction\n    preds = X.dot(W_hat) + b      # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the rank-3 factorized affine model y = X W + b via\n    ridge\u2010regularized least squares, then SVD\u2010truncate W to rank 3.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (15 U + 15 V + 5 b).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(f\"Expected shapes (N,5) for both inputs; got {X.shape}, {Y.shape}\")\n\n    # 1) Fit full affine map [W_full, b] by ridge\u2010regularized least squares\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)     # (6,6)\n    B = X_aug.T.dot(Y)                               # (6,5)\n    Theta = np.linalg.solve(A, B)                    # (6,5)\n    W_full = Theta[:F, :]                            # (5,5)\n    b_full = Theta[F, :].reshape(5,)                 # (5,)\n\n    # 2) SVD\u2010truncate W_full to rank 3\n    U_full, S_full, Vt_full = np.linalg.svd(W_full, full_matrices=False)\n    r = 3\n    # absorb sqrt(S) into U and V\n    U_trunc = U_full[:, :r] * np.sqrt(S_full[:r])[None, :]    # (5,3)\n    V_trunc = (Vt_full[:r, :].T) * np.sqrt(S_full[:r])[None, :]  # (5,3)\n\n    # 3) Flatten parameters U_trunc, V_trunc, and b_full\n    params = np.concatenate([U_trunc.ravel(), V_trunc.ravel(), b_full.ravel()])\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key steps:\n- We still solve a 5\u21925 affine model via ridge least squares for stability.\n- We then perform an SVD of the 5\u00d75 weight `W_full` and keep only the top 3 singular values/vectors.\n- We absorb \u221aS into both U and V so that `W_full \u2248 U_trunc @ V_trunc.T`.\n- The final parameter vector is 15 (U) + 15 (V) + 5 (b) = 35 parameters, satisfying the budget.\n- At prediction time we simply reconstruct `W_hat = U\u00b7V^T` and apply `X\u00b7W_hat + b`. This retains most of the fidelity of the full model while improving numerical stability and cross-domain generalization."]}}}