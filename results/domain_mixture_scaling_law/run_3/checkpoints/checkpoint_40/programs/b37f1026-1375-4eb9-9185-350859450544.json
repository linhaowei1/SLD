{"id": "b37f1026-1375-4eb9-9185-350859450544", "code": "\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter-efficient linear model with self-squared domain features:\n  y_j = sum_i W_{i,j} * x_i  +  a_j * (x_j)^2  +  b_j\nTotal parameters = 5\u00d75 (W) + 5 (a) + 5 (b) = 35 \u2264 35.\nThis version is refactored for clarity and maintainability.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                       - first 25 entries \u2192 weight matrix W of shape (5,5)\n                       - next 5 entries  \u2192 self-squared coefficients a of shape (5,)\n                       - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # Unpack\n    W = p[:25].reshape(F, 5)    # linear weights\n    a = p[25:30].reshape(1, 5)   # self-squared coeffs\n    b = p[30:35].reshape(1, 5)   # biases\n\n    # Compute predictions\n    lin = X.dot(W)               # linear term\n    quad = (X * X) * a           # per-domain squared term\n    preds = lin + quad + b       # add bias\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear-plus-self-squared scaling law via ridge-regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 a + 5 b).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected losses shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6  # small ridge for numerical stability\n    # Will store [W; a; b] in Theta of shape (F+2, 5)\n    Theta = np.zeros((F + 2, 5), dtype=float)\n    ones_col = np.ones((N, 1), dtype=float)\n\n    for j in range(5):\n        # build augmented design: [X | (x_j)^2 | 1]\n        xj_sq = (X[:, j:j+1] ** 2)\n        X_aug = np.hstack((X, xj_sq, ones_col))  # (N, 7)\n\n        # normal equations with ridge:\n        A = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)\n        B = X_aug.T.dot(Y[:, j:j+1])              # (7,1)\n\n        Theta[:, j:j+1] = np.linalg.solve(A, B)\n\n    # unpack parameters\n    W = Theta[:F, :]          # shape (5,5)\n    a = Theta[F, :]           # shape (5,)\n    b = Theta[F + 1, :]       # shape (5,)\n\n    return np.concatenate([W.ravel(), a, b])\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7324caaf-067a-46ff-81f5-0f9dc0b20346", "generation": 3, "timestamp": 1754716829.8566723, "iteration_found": 39, "metrics": {"nmse": 0.004423948501471063, "nmae": 0.06143018790916058, "r2": 0.9955760514985289, "combined_score": 0.9955955366177088}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.004423948501471063, "nmae": 0.06143018790916058, "r2": 0.9955760514985289, "combined_score": 0.9955955366177088}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0044\n- nmae: 0.0614\n- r2: 0.9956\n- combined_score: 0.9956\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0044, nmae: 0.0614, r2: 0.9956, combined_score: 0.9956\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0044, nmae: 0.0614, r2: 0.9956, combined_score: 0.9956\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5143)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter-efficient linear model with self-squared domain features:\n  y_j = sum_i W_{i,j} * x_i  +  a_j * (x_j)^2  +  b_j\nTotal parameters = 5\u00d75 (W) + 5 (a) + 5 (b) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                       - first 25 entries \u2192 weight matrix W of shape (5,5)\n                       - next 5 entries  \u2192 self-squared coefficients a of shape (5,)\n                       - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # Unpack parameters\n    W = p[:25].reshape(F, 5)      # (5,5)\n    a = p[25:30].reshape(1, 5)     # (1,5)\n    b = p[30:35].reshape(1, 5)     # (1,5)\n\n    # Linear term\n    lin = X.dot(W)                 # (N,5)\n    # Self-squared nonlinearity\n    sq = (X**2) * a                # (N,5)\n    # Final prediction\n    preds = lin + sq + b           # (N,5)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear mixture-of-experts scaling law via independent\n    ridge-regularized least squares per output domain.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 weights + 5 self-squared + 5 biases).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6\n    W = np.zeros((F, 5), dtype=float)\n    a = np.zeros(5, dtype=float)\n    b = np.zeros(5, dtype=float)\n\n    # Fit one output domain at a time to enforce that each squared feature\n    # only affects its corresponding output\n    for j in range(5):\n        yj = Y[:, j]                          # (N,)\n        xj_sq = (X[:, j]**2).reshape(N, 1)    # (N,1)\n        # Design matrix: [X, x_j^2, bias]\n        X_aug = np.hstack([X, xj_sq, np.ones((N, 1))])  # (N,7)\n\n        # Normal equations with ridge regularization\n        A = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)     # (7,7)\n        B = X_aug.T.dot(yj)                              # (7,)\n\n        theta = np.linalg.solve(A, B)                    # (7,)\n        W[:, j] = theta[:F]\n        a[j]    = theta[F]\n        b[j]    = theta[F + 1]\n\n    # Flatten parameters\n    params = np.concatenate([W.ravel(), a, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0044), Performs well on nmae (0.0614), Performs well on r2 (0.9956), Performs well on combined_score (0.9956)\n\n\n### Program 2 (Score: 0.5143)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter-efficient linear-plus-quadratic model:\n  y_j = sum_i W_{i,j} * x_i  +  a_j * (x_j)^2  +  b_j\nTotal parameters = 5\u00d75 (W) + 5 (a) + 5 (b) = 35 \u2264 35.\nThis adds a simple self-squared term per domain to capture mild nonlinearity\nwhile staying highly interpretable and numerically stable.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                       - first 25 entries \u2192 weight matrix W of shape (5,5)\n                       - next 5 entries  \u2192 self-squared coeffs a of shape (5,)\n                       - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # shape (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected input feature dimension 5, got {F}\"\n\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # Unpack parameters\n    W = p[:25].reshape(F, 5)       # linear weights\n    a = p[25:30].reshape(1, 5)     # self-squared coefficients\n    b = p[30:35].reshape(1, 5)     # biases\n\n    # Linear contribution\n    lin = X.dot(W)                 # shape (N,5)\n    # Self-squared nonlinearity (only domain-specific squared terms)\n    quad = (X**2) * a              # shape (N,5)\n    # Final prediction\n    preds = lin + quad + b         # shape (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear-plus-self-squared scaling law via ridge-regularized\n    least squares, independently per output domain.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 a + 5 b).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected input feature dimension 5, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6  # small ridge penalty for stability\n    W = np.zeros((F, 5), dtype=float)\n    a = np.zeros(5, dtype=float)\n    b = np.zeros(5, dtype=float)\n\n    # Fit each output domain separately\n    for j in range(5):\n        yj = Y[:, j]                            # (N,)\n        xj_sq = (X[:, j]**2).reshape(N, 1)      # (N,1)\n\n        # Build design: [X  |  x_j^2  |  1]\n        X_aug = np.hstack((X, xj_sq, np.ones((N, 1), dtype=float)))  # (N,7)\n\n        # Solve normal equations with ridge\n        M = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)  # (7,7)\n        v = X_aug.T.dot(yj)                           # (7,)\n\n        theta = np.linalg.solve(M, v)  # (7,)\n        # Unpack\n        W[:, j] = theta[:F]\n        a[j]    = theta[F]\n        b[j]    = theta[F + 1]\n\n    # Flatten all parameters into one vector\n    return np.concatenate([W.ravel(), a, b])\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0044), Performs well on nmae (0.0614), Performs well on r2 (0.9956), Performs well on combined_score (0.9956)\n\n\n### Program 3 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient affine model:\neach output loss is a weighted sum of the five domain proportions plus a bias.\nTotal parameters = 5 outputs \u00d7 (5 weights + 1 bias) = 30 \u2264 35.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 30, interpreted as a (6\u00d75) matrix:\n                - first 5 rows: weight matrix (5 weights per output)\n                - last 1 row:  bias vector (1 bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    # reshape params into theta of shape (6,5)\n    theta = np.asarray(params, dtype=float).ravel()\n    assert theta.size == 30, f\"Expected 30 parameters, got {theta.size}\"\n    theta = theta.reshape(6, 5)  # (5 weights + 1 bias) for each of 5 outputs\n\n    # augment inputs with a bias feature of 1s\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # compute predictions\n    preds = X_aug.dot(theta)  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (6\u00d75 matrix flattened).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    # augment inputs with bias term\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)  # (6,6)\n    B = X_aug.T.dot(Y)                            # (6,5)\n\n    # solve for theta in A @ theta = B\n    theta = np.linalg.solve(A, B)                 # (6,5)\n\n    # return flattened parameters\n    return theta.ravel()\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5297)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using an affine model: y = X\u00b7W + b\n\n    Args:\n        data_points: array, shape (N, F)  -- domain proportions (here F=5)\n        params:       1D array, length = (F+1)*D  -- flattened [W; b] with\n                      W of shape (F, D) and b of shape (D,)\n\n    Returns:\n        preds: array, shape (N, D) -- predicted losses for each of the D domains\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    p = np.asarray(params, dtype=float).ravel()\n    N, F = X.shape\n\n    # determine number of output domains D from parameter length\n    if p.size % (F + 1) != 0:\n        raise ValueError(f\"Parameter length {p.size} is not divisible by (F+1)={F+1}\")\n    D = p.size // (F + 1)\n\n    # unpack parameters\n    W = p[: F * D].reshape(F, D)       # weight matrix\n    b = p[F * D :].reshape(1, D)       # bias row\n\n    # affine prediction\n    return X.dot(W) + b\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine scaling law y = X\u00b7W + b via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array, shape (N, F) -- domain proportions\n        loss_values:  array, shape (N, D) -- observed multi-domain losses\n\n    Returns:\n        params: 1D array, length = (F+1)*D -- flattened [W; b]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    if Y.shape[0] != N:\n        raise ValueError(f\"Number of samples mismatch: data_points has {N}, loss_values has {Y.shape[0]}\")\n    D = Y.shape[1]\n\n    # augment X with bias column of ones\n    X_aug = np.hstack([X, np.ones((N, 1), dtype=float)])   # shape (N, F+1)\n\n    # ridge regularization for stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)\n    B = X_aug.T.dot(Y)\n\n    # solve for Theta = [W; b]  of shape (F+1, D)\n    Theta = np.linalg.solve(A, B)\n\n    # unpack weights and biases\n    W = Theta[:F, :]              # shape (F, D)\n    b = Theta[F, :].reshape(D,)   # shape (D,)\n\n    # return flattened parameter vector\n    return np.concatenate([W.ravel(), b.ravel()])\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5297, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient affine model:\neach output loss is a weighted sum of the five domain proportions plus a bias.\nTotal parameters = 5 outputs \u00d7 (5 weights + 1 bias) = 30 \u2264 35.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 30, interpreted as a (6\u00d75) matrix:\n                - first 5 rows: weight matrix (5 weights per output)\n                - last 1 row:  bias vector (1 bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    # reshape params into theta of shape (6,5)\n    theta = np.asarray(params, dtype=float).ravel()\n    assert theta.size == 30, f\"Expected 30 parameters, got {theta.size}\"\n    theta = theta.reshape(6, 5)  # (5 weights + 1 bias) for each of 5 outputs\n\n    # augment inputs with a bias feature of 1s\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # compute predictions\n    preds = X_aug.dot(theta)  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (6\u00d75 matrix flattened).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    # augment inputs with bias term\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)  # (6,6)\n    B = X_aug.T.dot(Y)                            # (6,5)\n\n    # solve for theta in A @ theta = B\n    theta = np.linalg.solve(A, B)                 # (6,5)\n\n    # return flattened parameters\n    return theta.ravel()\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter-efficient linear model with self-squared domain features:\n  y_j = sum_i W_{i,j} * x_i  +  a_j * (x_j)^2  +  b_j\nTotal parameters = 5\u00d75 (W) + 5 (a) + 5 (b) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                       - first 25 entries \u2192 weight matrix W of shape (5,5)\n                       - next 5 entries  \u2192 self-squared coefficients a of shape (5,)\n                       - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # Unpack parameters\n    W = p[:25].reshape(F, 5)      # (5,5)\n    a = p[25:30].reshape(1, 5)     # (1,5)\n    b = p[30:35].reshape(1, 5)     # (1,5)\n\n    # Linear term\n    lin = X.dot(W)                 # (N,5)\n    # Self-squared nonlinearity\n    sq = (X**2) * a                # (N,5)\n    # Final prediction\n    preds = lin + sq + b           # (N,5)\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear mixture-of-experts scaling law via independent\n    ridge-regularized least squares per output domain.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 weights + 5 self-squared + 5 biases).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6\n    W = np.zeros((F, 5), dtype=float)\n    a = np.zeros(5, dtype=float)\n    b = np.zeros(5, dtype=float)\n\n    # Fit one output domain at a time to enforce that each squared feature\n    # only affects its corresponding output\n    for j in range(5):\n        yj = Y[:, j]                          # (N,)\n        xj_sq = (X[:, j]**2).reshape(N, 1)    # (N,1)\n        # Design matrix: [X, x_j^2, bias]\n        X_aug = np.hstack([X, xj_sq, np.ones((N, 1))])  # (N,7)\n\n        # Normal equations with ridge regularization\n        A = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)     # (7,7)\n        B = X_aug.T.dot(yj)                              # (7,)\n\n        theta = np.linalg.solve(A, B)                    # (7,)\n        W[:, j] = theta[:F]\n        a[j]    = theta[F]\n        b[j]    = theta[F + 1]\n\n    # Flatten parameters\n    params = np.concatenate([W.ravel(), a, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter-efficient linear model with self-squared domain features:\n  y_j = sum_i W_{i,j} * x_i  +  a_j * (x_j)^2  +  b_j\nTotal parameters = 5\u00d75 (W) + 5 (a) + 5 (b) = 35 \u2264 35.\nThis version is refactored for clarity and maintainability.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                       - first 25 entries \u2192 weight matrix W of shape (5,5)\n                       - next 5 entries  \u2192 self-squared coefficients a of shape (5,)\n                       - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # Unpack\n    W = p[:25].reshape(F, 5)    # linear weights\n    a = p[25:30].reshape(1, 5)   # self-squared coeffs\n    b = p[30:35].reshape(1, 5)   # biases\n\n    # Compute predictions\n    lin = X.dot(W)               # linear term\n    quad = (X * X) * a           # per-domain squared term\n    preds = lin + quad + b       # add bias\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear-plus-self-squared scaling law via ridge-regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 a + 5 b).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected losses shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6  # small ridge for numerical stability\n    # Will store [W; a; b] in Theta of shape (F+2, 5)\n    Theta = np.zeros((F + 2, 5), dtype=float)\n    ones_col = np.ones((N, 1), dtype=float)\n\n    for j in range(5):\n        # build augmented design: [X | (x_j)^2 | 1]\n        xj_sq = (X[:, j:j+1] ** 2)\n        X_aug = np.hstack((X, xj_sq, ones_col))  # (N, 7)\n\n        # normal equations with ridge:\n        A = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)\n        B = X_aug.T.dot(Y[:, j:j+1])              # (7,1)\n\n        Theta[:, j:j+1] = np.linalg.solve(A, B)\n\n    # unpack parameters\n    W = Theta[:F, :]          # shape (5,5)\n    a = Theta[F, :]           # shape (5,)\n    b = Theta[F + 1, :]       # shape (5,)\n\n    return np.concatenate([W.ravel(), a, b])\n\n# EVOLVE-BLOCK-END\n```"]}}}