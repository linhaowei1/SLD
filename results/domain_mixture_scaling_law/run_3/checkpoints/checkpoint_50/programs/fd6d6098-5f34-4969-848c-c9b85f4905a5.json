{"id": "fd6d6098-5f34-4969-848c-c9b85f4905a5", "code": "\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nLinear mixture\u2010of\u2010experts augmented with an entropy\u2010based concentration feature:\n    y_j = sum_i W[i,j] * x_i + \u03b1[j] * H(x) + b[j]\nwhere H(x) = -\u2211_i x_i log(x_i + \u03b5) measures the entropy (diversity) of the domain mix.\nTotal parameters = 5\u00d75 (W) + 5 (\u03b1) + 5 (b) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions,\n    using a linear term plus an entropy\u2010based concentration term.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions (each row sums to 1).\n        params: flat array of length 35:\n                - first 25 entries \u2192 W of shape (5,5)   (linear weights)\n                - next 5 entries  \u2192 alpha of shape (5,) (entropy weights)\n                - last 5 entries  \u2192 b of shape (5,)     (bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, D = X.shape\n    if D != 5:\n        raise ValueError(f\"Expected input with 5 features, got {D}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # Unpack parameters\n    W     = p[:25].reshape(5, 5)    # linear weights\n    alpha = p[25:30].reshape(1, 5)  # entropy concentration weights\n    b     = p[30:35].reshape(1, 5)  # biases\n\n    # Compute sample\u2010wise entropy: H = -sum(x_i * log(x_i + eps))\n    eps = 1e-12\n    log_x = np.log(X + eps)\n    H = -np.sum(X * log_x, axis=1, keepdims=True)  # shape (N,1)\n\n    # Predict: linear + entropy term + bias\n    preds = X.dot(W) + H.dot(alpha) + b            # shape (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the entropy\u2010augmented mixture\u2010of\u2010experts scaling law via\n    ridge\u2010regularized linear regression (closed\u2010form).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 alpha + 5 b).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if Y.ndim == 1:\n        Y = Y[np.newaxis, :]\n    N, D = X.shape\n    if D != 5 or Y.shape != (N, 5):\n        raise ValueError(f\"Expected shapes X:(N,5), Y:(N,5); got X:{X.shape}, Y:{Y.shape}\")\n\n    # Compute entropy feature\n    eps = 1e-12\n    log_x = np.log(X + eps)\n    H = -np.sum(X * log_x, axis=1, keepdims=True)  # (N,1)\n\n    # Build design matrix: [X (5 cols), H (1 col), ones (1 col)] \u2192 7 features\n    X_aug = np.hstack([X, H, np.ones((N, 1), dtype=float)])  # shape (N,7)\n\n    # Ridge regularization for numerical stability\n    lam = 1e-6\n    G = X_aug.shape[1]  # 7\n    A = X_aug.T.dot(X_aug) + lam * np.eye(G)   # (7,7)\n    B = X_aug.T.dot(Y)                         # (7,5)\n\n    # Solve normal equations\n    Theta = np.linalg.solve(A, B)             # shape (7,5)\n\n    # Unpack parameters\n    W     = Theta[:5,    :]   # (5,5)\n    alpha = Theta[5:6,   :].ravel()  # (5,)\n    b     = Theta[6:7,   :].ravel()  # (5,)\n\n    # Flatten into single parameter vector of length 35\n    params = np.concatenate([W.ravel(), alpha, b])\n    return params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e3911bcc-9454-4fe4-8c57-d9cbb5deac10", "generation": 3, "timestamp": 1754716913.1239803, "iteration_found": 50, "metrics": {"nmse": 0.018551240470027482, "nmae": 0.1268771793822814, "r2": 0.9814487595299726, "combined_score": 0.9817866399519903}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.020984518891261763, "nmae": 0.13039018342445088, "r2": 0.9790154811087383, "combined_score": 0.9794467805309625}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0210\n- nmae: 0.1304\n- r2: 0.9790\n- combined_score: 0.9794\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse. Consider continuing with similar changes.\n- Metrics showing regression: nmae, r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 2 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 3 (Score: 0.5297)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses from domain mixture proportions via\n    a simple linear mixture\u2010of\u2010experts model:\n        y = X W + b\n    where W is a 5\u00d75 weight matrix and b is a 5\u2010vector bias.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 30:\n                     - first 25 entries \u2192 W of shape (5,5)\n                     - last 5 entries    \u2192 b of shape (1,5)\n\n    Returns:\n        preds: array of shape (N,5), predicted losses.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    N, D = X.shape\n    if D != 5:\n        raise ValueError(f\"Expected input with 5 features, got {D}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 30:\n        raise ValueError(f\"Expected 30 parameters, got {p.size}\")\n    W = p[:25].reshape(5, 5)\n    b = p[25:].reshape(1, 5)\n    return X.dot(W) + b\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture\u2010of\u2010experts scaling law via ridge\u2010regularized\n    least squares. Returns a flat parameter array of length 30.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed losses.\n\n    Returns:\n        params: flat array [W.ravel(), b] of length 30.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if Y.ndim == 1:\n        Y = Y[None, :]\n    N, D = X.shape\n    if D != 5 or Y.shape != (N, 5):\n        raise ValueError(f\"Expected shapes (N,5), got {X.shape} and {Y.shape}\")\n    # add bias column\n    X_aug = np.hstack([X, np.ones((N, 1))])    # shape (N,6)\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(D + 1)\n    B = X_aug.T.dot(Y)\n    Theta = np.linalg.solve(A, B)              # shape (6,5)\n    W = Theta[:D, :]                           # (5,5)\n    b = Theta[D:, :].reshape(5)                # (5,)\n    return np.concatenate([W.ravel(), b])\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5275)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nEnhanced linear\u2010quadratic mixture\u2010of\u2010experts model:\neach output loss y_j is predicted as\n    y_j = b_j + \u2211_{i=1..5} W[i,j] * x_i + q_j * \u2211_{i=1..5} x_i^2\nTotal parameters = 5\u00d75 (linear weights) + 5 (quadratic) + 5 (biases) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using an affine plus single\u2010quadratic term per output.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - first 25 entries \u2192 W of shape (5,5) (linear weights)\n                     - next 5 entries   \u2192 q of shape (5,)  (quadratic coeff per output)\n                     - last 5 entries   \u2192 b of shape (5,)  (bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)      # linear weights\n    q = p[25:30].reshape(1, 5)    # quadratic coefficients\n    b = p[30:35].reshape(1, 5)    # biases\n\n    # compute quadratic feature: sum of squares of proportions per sample\n    X_sq_sum = np.sum(X * X, axis=1, keepdims=True)        # (N,1)\n\n    # affine + quadratic prediction\n    preds = X.dot(W) + X_sq_sum.dot(q) + b                  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear\u2010quadratic mixture\u2010of\u2010experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 linear + 5 quadratic + 5 bias).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points (N,5) and loss_values (N,5)\")\n\n    # build design matrix: [ linear terms (5), quadratic sum (1), bias (1) ] => 7 features\n    X_sq_sum = np.sum(X * X, axis=1, keepdims=True)         # (N,1)\n    X_aug = np.hstack([X, X_sq_sum, np.ones((N, 1))])        # (N,7)\n\n    # ridge\u2010regularization for numerical stability\n    lam = 1e-6\n    G = X_aug.shape[1]\n    A = X_aug.T.dot(X_aug) + lam * np.eye(G)                 # (7,7)\n    B = X_aug.T.dot(Y)                                       # (7,5)\n\n    # solve normal equations A \u0398 = B\n    Theta = np.linalg.solve(A, B)                            # (7,5)\n\n    # unpack into parameter vector\n    W = Theta[:5, :]      # (5,5)\n    q = Theta[5, :].ravel()  # (5,)\n    b = Theta[6, :].ravel()  # (5,)\n\n    # flatten to length\u201035 vector\n    params = np.concatenate([W.ravel(), q, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5297, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nEnhanced linear mixture\u2010of\u2010experts with a squared\u2010proportion concentration feature:\n    y_j = sum_i W[i,j] * p_i  +  alpha[j] * (sum_i p_i^2)  +  b[j]\nTotal parameters = 5\u00d75 (W) + 5 (alpha) + 5 (bias) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions,\n    using a linear term plus a global squared\u2010proportion concentration term.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries  \u2192 alpha vector of shape (5,)\n                - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected input with 5 domain proportions, got {F}\"\n\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    W     = p[:25].reshape(5, 5)    # linear weights\n    alpha = p[25:30].reshape(1, 5)  # squared\u2010proportion weights\n    b     = p[30:35].reshape(1, 5)  # biases\n\n    # compute the global concentration feature per sample\n    sq_sum = np.sum(X * X, axis=1, keepdims=True)  # (N,1)\n\n    # affine + concentration term\n    preds = X.dot(W) + sq_sum * alpha + b          # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law:\n        y = X W + (sum(X^2)) \u03b1 + 1\u00b7b\n    via ridge\u2010regularized linear regression (closed\u2010form).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 weights + 5 alpha + 5 bias).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values), dtype=float)  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected input with 5 domain proportions, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values with shape (N,5), got {Y.shape}\"\n\n    # build concentration feature and design matrix\n    sq_sum = np.sum(X * X, axis=1, keepdims=True)           # (N,1)\n    X_aug = np.concatenate([X, sq_sum, np.ones((N, 1))], axis=1)  # (N,7)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)            # (7,7)\n    B = X_aug.T.dot(Y)                                       # (7,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                           # (7,5)\n\n    # unpack into parameters\n    # Theta rows 0\u20134: linear weights for p1..p5 \u2192 W (5\u00d75)\n    # Theta row 5:  squared\u2010proportion weights \u2192 alpha (5,)\n    # Theta row 6:  bias terms \u2192 b (5,)\n    W     = Theta[:5, :]                                     # (5,5)\n    alpha = Theta[5, :].reshape(5)                           # (5,)\n    b     = Theta[6, :].reshape(5)                           # (5,)\n\n    # flatten into single parameter vector\n    params = np.concatenate([W.ravel(), alpha, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5297, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5793, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (1.206), Alternative r2 approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5275, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nEnhanced linear mixture\u2010of\u2010experts with a squared\u2010proportion concentration feature:\n    y_j = sum_i W[i,j] * p_i  +  alpha[j] * (sum_i p_i^2)  +  b[j]\nTotal parameters = 5\u00d75 (W) + 5 (alpha) + 5 (bias) = 35 \u2264 35.\nThis captures both linear contributions of each domain and a simple nonlinearity\nmeasuring the concentration of the mixture.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions (each row sums to 1).\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries   \u2192 concentration weights alpha of shape (5,)\n                - last 5 entries   \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    assert X.ndim == 2 and X.shape[1] == 5, \\\n        f\"data_points must be shape (N,5), got {X.shape}\"\n    \n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"params must be length 35, got {p.size}\"\n    \n    # Unpack parameters\n    W      = p[:25].reshape(5, 5)    # linear weights\n    alpha  = p[25:30].reshape(1, 5)  # squared\u2010proportion weights\n    b      = p[30:35].reshape(1, 5)  # biases\n\n    # Compute concentration feature: sum of squared proportions per row\n    sq_sum = np.sum(X * X, axis=1, keepdims=True)  # shape (N,1)\n\n    # Affine + concentration term\n    preds = X.dot(W) + sq_sum.dot(alpha) + b        # shape (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law via ridge\u2010regularized linear regression.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 alpha + 5 b).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    assert X.ndim == 2 and X.shape[1] == 5, \\\n        f\"data_points must be shape (N,5), got {X.shape}\"\n    N = X.shape[0]\n    assert Y.shape == (N, 5), \\\n        f\"loss_values must be shape ({N},5), got {Y.shape}\"\n    \n    # Build concentration feature\n    sq_sum = np.sum(X * X, axis=1, keepdims=True)  # shape (N,1)\n    \n    # Design matrix: [p1, p2, p3, p4, p5, concentration, 1]\n    X_aug = np.hstack([X, sq_sum, np.ones((N, 1), dtype=float)])  # shape (N,7)\n\n    # Closed-form ridge regression\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(X_aug.shape[1])  # (7,7)\n    B = X_aug.T.dot(Y)                                     # (7,5)\n    Theta = np.linalg.solve(A, B)                         # (7,5)\n\n    # Unpack parameters\n    W     = Theta[:5,     :]   # (5,5)\n    alpha = Theta[5:6,    :].ravel()  # (5,)\n    b     = Theta[6:7,    :].ravel()  # (5,)\n\n    # Flatten into single parameter vector\n    return np.concatenate([W.ravel(), alpha, b])\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nEnhanced linear\u2010quadratic mixture\u2010of\u2010experts model:\neach output loss is predicted as\n    y_j = b_j + sum_i W[i,j] * x_i + q_j * (sum_i x_i^2)\nTotal parameters = 5\u00d75 (linear weights) + 5 (quadratic weights) + 5 (biases) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using an affine plus quadratic term per output.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 W of shape (5,5) (linear weights)\n                - next 5 entries  \u2192 q of shape (5,)  (quadratic coefficient per output)\n                - last 5 entries  \u2192 b of shape (5,)  (bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))          # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input feature dimension 5, got {F}\")\n\n    p = np.asarray(params).ravel()\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)      # linear weights\n    q = p[25:30].reshape(1, 5)    # quadratic coefficients\n    b = p[30:35].reshape(1, 5)    # biases\n\n    # compute quadratic feature (sum of squares of proportions)\n    X_quad = np.sum(X**2, axis=1, keepdims=True)  # (N,1)\n\n    # affine + quadratic prediction\n    preds = X.dot(W) + X_quad.dot(q) + b           # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear\u2010quadratic mixture\u2010of\u2010experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 linear weights + 5 quadratics + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points (N,5) and loss_values (N,5)\")\n\n    # construct augmented design matrix with linear, quadratic, and bias features\n    X_quad = np.sum(X**2, axis=1, keepdims=True)  # (N,1)\n    X_aug = np.concatenate([\n        X,                        # linear terms (N,5)\n        X_quad,                   # quadratic term (N,1)\n        np.ones((N, 1))           # bias term (N,1)\n    ], axis=1)                    # (N,7)\n\n    # ridge\u2010regularization for stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(X_aug.shape[1])  # (7,7)\n    B = X_aug.T.dot(Y)                                     # (7,5)\n\n    # solve normal equations\n    Theta = np.linalg.solve(A, B)                         # (7,5)\n\n    # unpack into parameter vector\n    W = Theta[:5, :]      # (5,5)\n    q = Theta[5:6, :].ravel()  # (5,)\n    b = Theta[6:7, :].ravel()  # (5,)\n\n    # flatten to 35\u2010length vector\n    params = np.concatenate([W.ravel(), q, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nLinear mixture\u2010of\u2010experts augmented with an entropy\u2010based concentration feature:\n    y_j = sum_i W[i,j] * x_i + \u03b1[j] * H(x) + b[j]\nwhere H(x) = -\u2211_i x_i log(x_i + \u03b5) measures the entropy (diversity) of the domain mix.\nTotal parameters = 5\u00d75 (W) + 5 (\u03b1) + 5 (b) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions,\n    using a linear term plus an entropy\u2010based concentration term.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions (each row sums to 1).\n        params: flat array of length 35:\n                - first 25 entries \u2192 W of shape (5,5)   (linear weights)\n                - next 5 entries  \u2192 alpha of shape (5,) (entropy weights)\n                - last 5 entries  \u2192 b of shape (5,)     (bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    N, D = X.shape\n    if D != 5:\n        raise ValueError(f\"Expected input with 5 features, got {D}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # Unpack parameters\n    W     = p[:25].reshape(5, 5)    # linear weights\n    alpha = p[25:30].reshape(1, 5)  # entropy concentration weights\n    b     = p[30:35].reshape(1, 5)  # biases\n\n    # Compute sample\u2010wise entropy: H = -sum(x_i * log(x_i + eps))\n    eps = 1e-12\n    log_x = np.log(X + eps)\n    H = -np.sum(X * log_x, axis=1, keepdims=True)  # shape (N,1)\n\n    # Predict: linear + entropy term + bias\n    preds = X.dot(W) + H.dot(alpha) + b            # shape (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the entropy\u2010augmented mixture\u2010of\u2010experts scaling law via\n    ridge\u2010regularized linear regression (closed\u2010form).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 alpha + 5 b).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if Y.ndim == 1:\n        Y = Y[np.newaxis, :]\n    N, D = X.shape\n    if D != 5 or Y.shape != (N, 5):\n        raise ValueError(f\"Expected shapes X:(N,5), Y:(N,5); got X:{X.shape}, Y:{Y.shape}\")\n\n    # Compute entropy feature\n    eps = 1e-12\n    log_x = np.log(X + eps)\n    H = -np.sum(X * log_x, axis=1, keepdims=True)  # (N,1)\n\n    # Build design matrix: [X (5 cols), H (1 col), ones (1 col)] \u2192 7 features\n    X_aug = np.hstack([X, H, np.ones((N, 1), dtype=float)])  # shape (N,7)\n\n    # Ridge regularization for numerical stability\n    lam = 1e-6\n    G = X_aug.shape[1]  # 7\n    A = X_aug.T.dot(X_aug) + lam * np.eye(G)   # (7,7)\n    B = X_aug.T.dot(Y)                         # (7,5)\n\n    # Solve normal equations\n    Theta = np.linalg.solve(A, B)             # shape (7,5)\n\n    # Unpack parameters\n    W     = Theta[:5,    :]   # (5,5)\n    alpha = Theta[5:6,   :].ravel()  # (5,)\n    b     = Theta[6:7,   :].ravel()  # (5,)\n\n    # Flatten into single parameter vector of length 35\n    params = np.concatenate([W.ravel(), alpha, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```"]}}}