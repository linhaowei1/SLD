{"id": "b7c742e8-f455-4900-aaed-f0c000d186e6", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    We model each y_j = a_j + b_j * s^p_j, where\n      s = sum_i w_i * x_i\n      w = softmax(u) from params[0:5]\n      a = params[5:10]\n      b = softplus(r)     from params[10:15]\n      p = p_max * sigmoid(v) from params[15:20]\n\n    Args:\n        data_points: array (N,5) of domain proportions\n        params: flat array length 20\n\n    Returns:\n        preds: array (N,5)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input with 5 features, got {F}\")\n\n    p = np.asarray(params).ravel()\n    if p.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {p.size}\")\n\n    # 1) mixture logits \u2192 weights w\n    u = p[0:5]\n    u_max = u.max()\n    exp_u = np.exp(u - u_max)\n    w = exp_u / exp_u.sum()        # shape (5,)\n\n    # 2) biases a_j\n    a = p[5:10]                    # shape (5,)\n\n    # 3) scales b_j = softplus(r_j)\n    r = p[10:15]\n    b = np.log1p(np.exp(r))        # softplus(r) \u2265 0\n\n    # 4) exponents p_j = p_max * sigmoid(v_j)\n    v = p[15:20]\n    sigmoid_v = 1.0 / (1.0 + np.exp(-v))\n    p_max = 3.0\n    exponents = p_max * sigmoid_v  # in (0, p_max)\n\n    # 5) mixture score s for each sample\n    s = X.dot(w)                   # shape (N,)\n\n    # 6) output\n    #    Y[n,j] = a_j + b_j * s[n]^{exponents_j}\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], exponents[None, :])\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE + small \u2113\u2082 on (r,v).\n\n    Args:\n        data_points: array (N,5) of domain proportions\n        loss_values: array (N,5) of observed multi-domain losses\n\n    Returns:\n        params: flat array length 20\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    Y = np.atleast_2d(loss_values).astype(float)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points shape (N,5) and loss_values shape (N,5)\")\n\n    # Initialize:\n    #   u = zeros \u21d2 uniform w\n    #   a \u2248 mean(Y,axis=0)\n    #   r = zeros \u21d2 b\u2248log1p(1)=~0.7\n    #   v = zeros \u21d2 p\u2248p_max/2\n    mean_y = Y.mean(axis=0)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])\n\n    # small \u2113\u2082 regularization weight on r and v\n    lambda_reg = 1e-4\n\n    def objective(theta):\n        Y_pred = scaling_law_func(X, theta)\n        mse = np.mean((Y_pred - Y) ** 2)\n        # penalty on scales/exponents raw params to prevent runaway\n        r_part = theta[10:15]\n        v_part = theta[15:20]\n        reg = lambda_reg * (np.sum(r_part * r_part) + np.sum(v_part * v_part))\n        return mse + reg\n\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to init if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "605743a5-9158-465d-ab02-2679ed49eb80", "generation": 2, "timestamp": 1754715965.3410854, "iteration_found": 21, "metrics": {"nmse": 0.037541877055234076, "nmae": 0.1576859123974733, "r2": 0.962458122944766, "combined_score": 0.9638165187493097}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.018360804339811472, "nmae": 0.13690427617636788, "r2": 0.9816391956601885, "combined_score": 0.9819702366179396}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0184\n- nmae: 0.1369\n- r2: 0.9816\n- combined_score: 0.9820\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0781, nmae: 0.2388, r2: 0.9219, combined_score: 0.9276\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 2 (Score: 0.5416)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0781), Performs well on nmae (0.2388), Performs well on r2 (0.9219), Performs well on combined_score (0.9276)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5416, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is an updated implementation that remains parameter\u2010efficient (20 parameters), enforces positivity and reasonable bounds on scales/exponents, and adds a small ridge penalty for stability.  We still model each output loss as\n\n    y\u2c7c = a\u2c7c + b\u2c7c \u00b7 (\u2211\u1d62 w\u1d62 x\u1d62)\u1d56\u2c7c\n\nbut now\n  \u2013 w = softmax(u)  \n  \u2013 b\u2c7c = softplus(r\u2c7c)  \n  \u2013 p\u2c7c = p_max\u00b7sigmoid(v\u2c7c)  (we use p_max = 3 to keep exponents in [0,3])  \n  \u2013 small \u2113\u2082 penalty on r,v  \n\nThis typically captures nonlinearity in the way proportions affect loss, is numerically stable, and stays under 35 total parameters.\n\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    We model each y_j = a_j + b_j * s^p_j, where\n      s = sum_i w_i * x_i\n      w = softmax(u) from params[0:5]\n      a = params[5:10]\n      b = softplus(r)     from params[10:15]\n      p = p_max * sigmoid(v) from params[15:20]\n\n    Args:\n        data_points: array (N,5) of domain proportions\n        params: flat array length 20\n\n    Returns:\n        preds: array (N,5)\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input with 5 features, got {F}\")\n\n    p = np.asarray(params).ravel()\n    if p.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {p.size}\")\n\n    # 1) mixture logits \u2192 weights w\n    u = p[0:5]\n    u_max = u.max()\n    exp_u = np.exp(u - u_max)\n    w = exp_u / exp_u.sum()        # shape (5,)\n\n    # 2) biases a_j\n    a = p[5:10]                    # shape (5,)\n\n    # 3) scales b_j = softplus(r_j)\n    r = p[10:15]\n    b = np.log1p(np.exp(r))        # softplus(r) \u2265 0\n\n    # 4) exponents p_j = p_max * sigmoid(v_j)\n    v = p[15:20]\n    sigmoid_v = 1.0 / (1.0 + np.exp(-v))\n    p_max = 3.0\n    exponents = p_max * sigmoid_v  # in (0, p_max)\n\n    # 5) mixture score s for each sample\n    s = X.dot(w)                   # shape (N,)\n\n    # 6) output\n    #    Y[n,j] = a_j + b_j * s[n]^{exponents_j}\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], exponents[None, :])\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above scaling law by minimizing MSE + small \u2113\u2082 on (r,v).\n\n    Args:\n        data_points: array (N,5) of domain proportions\n        loss_values: array (N,5) of observed multi-domain losses\n\n    Returns:\n        params: flat array length 20\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    Y = np.atleast_2d(loss_values).astype(float)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points shape (N,5) and loss_values shape (N,5)\")\n\n    # Initialize:\n    #   u = zeros \u21d2 uniform w\n    #   a \u2248 mean(Y,axis=0)\n    #   r = zeros \u21d2 b\u2248log1p(1)=~0.7\n    #   v = zeros \u21d2 p\u2248p_max/2\n    mean_y = Y.mean(axis=0)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])\n\n    # small \u2113\u2082 regularization weight on r and v\n    lambda_reg = 1e-4\n\n    def objective(theta):\n        Y_pred = scaling_law_func(X, theta)\n        mse = np.mean((Y_pred - Y) ** 2)\n        # penalty on scales/exponents raw params to prevent runaway\n        r_part = theta[10:15]\n        v_part = theta[15:20]\n        reg = lambda_reg * (np.sum(r_part * r_part) + np.sum(v_part * v_part))\n        return mse + reg\n\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to init if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END\n```\n\nKey points:\n- Total parameters = 20 &lt;= 35.\n- Positivity of scales via `softplus`, bounded exponents via `sigmoid`.\n- Shared mixture weights (`w`) promote cross-domain generalization.\n- Small \u2113\u2082 penalty on `(r,v)` stabilizes optimization and prevents extreme exponents or scales.\n- All operations are standard NumPy, with no input\u2010dependent features (min/max over data, etc.)."]}}}