{"id": "081b0e46-e7bf-4050-a650-8aa3b8356e9b", "code": "\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a compact non-linear model:\n  y_j = a_j + sign(s_j) * |s_j|^p\nwhere s_j = sum_k W[j,k] * x_k and p is a shared exponent.\nTotal parameters = 5\u00d75 (W) + 5 (a) + 1 (log_p) = 31 \u2264 35.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 31:\n            - first 25 entries \u2192 weight matrix W of shape (5,5)\n            - next 5 entries   \u2192 bias vector a of shape (5,)\n            - last 1 entry     \u2192 log_p (scalar exponent)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input with 5 features, got {F}\")\n\n    p = np.asarray(params).ravel()\n    if p.size != 31:\n        raise ValueError(f\"Expected 31 parameters, got {p.size}\")\n\n    # unpack\n    W = p[:25].reshape(5, 5)   # (5,5)\n    a = p[25:30].reshape(1, 5)  # (1,5)\n    log_p = p[30]\n    exp_p = np.exp(log_p)      # ensure exponent > 0\n\n    # linear score\n    S = X.dot(W.T)             # (N,5)\n\n    # elementwise signed power\n    S_sign = np.sign(S)\n    S_abs = np.abs(S) + 1e-12  # avoid zero**exp issues\n    Y = a + S_sign * (S_abs ** exp_p)\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the non-linear scaling law via L-BFGS optimization.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed losses.\n\n    Returns:\n        params: flat array of length 31 (optimized).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected shapes (N,5) for data_points and loss_values\")\n\n    # Initialize linear part by ridge regression\n    # solve [X_aug] [W^T; a] \u2248 Y\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)\n    B = X_aug.T.dot(Y)\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n    W_init = Theta[:F, :].T                                # (5,5)\n    a_init = Theta[F, :].ravel()                           # (5,)\n\n    # log_p initial = 0 \u2192 p = 1 (linear)\n    log_p_init = 0.0\n\n    init_params = np.concatenate([W_init.ravel(), a_init, [log_p_init]])\n\n    # regularization strength\n    lam_reg = 1e-4\n\n    def objective(params):\n        Y_pred = scaling_law_func(X, params)\n        mse = np.mean((Y_pred - Y) ** 2)\n        # L2 penalty on W to avoid overfitting\n        W = params[:25]\n        reg = lam_reg * np.sum(W * W) / params.size\n        return mse + reg\n\n    # optimize with L-BFGS-B\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        options={'maxiter': 500, 'ftol': 1e-9}\n    )\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear init if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "36570f19-139b-4996-81eb-d02e03f4b515", "generation": 2, "timestamp": 1754715944.6100252, "iteration_found": 22, "metrics": {"nmse": 0.0021534690419032746, "nmae": 0.045029901016592135, "r2": 0.9978465309580967, "combined_score": 0.9978511584219112}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.018360804339811472, "nmae": 0.13690427617636788, "r2": 0.9816391956601885, "combined_score": 0.9819702366179396}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0184\n- nmae: 0.1369\n- r2: 0.9816\n- combined_score: 0.9820\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0383, nmae: 0.1599, r2: 0.9617, combined_score: 0.9631\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 2 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 3 (Score: 0.5307)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using a shared-mixture power law per output.\n\n    Args:\n        data_points: array of shape (N,5) of domain proportions.\n        params:      flat array of length 20:\n                     - [0:5]:   unnormalized logits u for mixture weights w = softmax(u)\n                     - [5:10]:  biases a_j for each domain loss\n                     - [10:15]: log-scales r_j so that b_j = exp(r_j) >= 0\n                     - [15:20]: log-exponents v_j so that p_j = exp(v_j) >= 0\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each of 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    prm = np.asarray(params).ravel()\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture weights w = softmax(u)\n    u = prm[0:5]\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)                 # (5,)\n\n    # 2) Output\u2010specific parameters\n    a = prm[5:10]                             # biases (5,)\n    r = prm[10:15]                            # log\u2010scales (5,)\n    v = prm[15:20]                            # log\u2010exponents (5,)\n    b = np.exp(r)                             # scales >= 0 (5,)\n    p = np.exp(v)                             # exponents >= 0 (5,)\n\n    # 3) Mixture score for each sample\n    s = X.dot(w)                              # (N,)\n\n    # 4) Predict each domain loss: y_j = a_j + b_j * s^p_j\n    # Broadcasting to (N,5)\n    Y = a[None, :] + b[None, :] * (s[:, None] ** p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the shared\u2010mixture power\u2010law scaling function via L-BFGS optimization.\n\n    Args:\n        data_points:  array of shape (N,5) of domain proportions.\n        loss_values:  array of shape (N,5) of observed domain losses.\n\n    Returns:\n        params: flat array of length 20 (optimized).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected inputs of shape (N,5) and losses of shape (N,5)\")\n\n    # Initialize parameters\n    #  u = 0       => uniform mixture\n    #  a = mean(Y) => bias approx\n    #  r = log(std(Y)) => scale approx\n    #  v = 0       => exponent \u2248 1\n    mean_y = np.mean(Y, axis=0)\n    std_y  = np.std(Y, axis=0, ddof=1)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.log(np.maximum(std_y, 1e-2))\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])\n\n    # Regularization strength for scale/exponent terms\n    lam_reg = 1e-2\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        mse = np.mean((pred - Y) ** 2)\n        # L2 penalty on r and v for numerical stability\n        r = params[10:15]\n        v = params[15:20]\n        reg = lam_reg * (np.sum(r**2) + np.sum(v**2)) / params.size\n        return mse + reg\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective,\n                      init_params,\n                      method='L-BFGS-B',\n                      options={'maxiter': 1000, 'ftol': 1e-9})\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0383), Performs well on nmae (0.1599), Performs well on r2 (0.9617), Performs well on combined_score (0.9631)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5307, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using a shared-mixture power law per output.\n\n    Args:\n        data_points: array of shape (N,5) of domain proportions.\n        params:      flat array of length 20:\n                     - [0:5]:   unnormalized logits u for mixture weights w = softmax(u)\n                     - [5:10]:  biases a_j for each domain loss\n                     - [10:15]: log-scales r_j so that b_j = exp(r_j) >= 0\n                     - [15:20]: log-exponents v_j so that p_j = exp(v_j) >= 0\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each of 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    prm = np.asarray(params).ravel()\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture weights w = softmax(u)\n    u = prm[0:5]\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)                 # (5,)\n\n    # 2) Output\u2010specific parameters\n    a = prm[5:10]                             # biases (5,)\n    r = prm[10:15]                            # log\u2010scales (5,)\n    v = prm[15:20]                            # log\u2010exponents (5,)\n    b = np.exp(r)                             # scales >= 0 (5,)\n    p = np.exp(v)                             # exponents >= 0 (5,)\n\n    # 3) Mixture score for each sample\n    s = X.dot(w)                              # (N,)\n\n    # 4) Predict each domain loss: y_j = a_j + b_j * s^p_j\n    # Broadcasting to (N,5)\n    Y = a[None, :] + b[None, :] * (s[:, None] ** p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the shared\u2010mixture power\u2010law scaling function via L-BFGS optimization.\n\n    Args:\n        data_points:  array of shape (N,5) of domain proportions.\n        loss_values:  array of shape (N,5) of observed domain losses.\n\n    Returns:\n        params: flat array of length 20 (optimized).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected inputs of shape (N,5) and losses of shape (N,5)\")\n\n    # Initialize parameters\n    #  u = 0       => uniform mixture\n    #  a = mean(Y) => bias approx\n    #  r = log(std(Y)) => scale approx\n    #  v = 0       => exponent \u2248 1\n    mean_y = np.mean(Y, axis=0)\n    std_y  = np.std(Y, axis=0, ddof=1)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.log(np.maximum(std_y, 1e-2))\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])\n\n    # Regularization strength for scale/exponent terms\n    lam_reg = 1e-2\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        mse = np.mean((pred - Y) ** 2)\n        # L2 penalty on r and v for numerical stability\n        r = params[10:15]\n        v = params[15:20]\n        reg = lam_reg * (np.sum(r**2) + np.sum(v**2)) / params.size\n        return mse + reg\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective,\n                      init_params,\n                      method='L-BFGS-B',\n                      options={'maxiter': 1000, 'ftol': 1e-9})\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a compact non-linear model:\n  y_j = a_j + sign(s_j) * |s_j|^p\nwhere s_j = sum_k W[j,k] * x_k and p is a shared exponent.\nTotal parameters = 5\u00d75 (W) + 5 (a) + 1 (log_p) = 31 \u2264 35.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 31:\n            - first 25 entries \u2192 weight matrix W of shape (5,5)\n            - next 5 entries   \u2192 bias vector a of shape (5,)\n            - last 1 entry     \u2192 log_p (scalar exponent)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input with 5 features, got {F}\")\n\n    p = np.asarray(params).ravel()\n    if p.size != 31:\n        raise ValueError(f\"Expected 31 parameters, got {p.size}\")\n\n    # unpack\n    W = p[:25].reshape(5, 5)   # (5,5)\n    a = p[25:30].reshape(1, 5)  # (1,5)\n    log_p = p[30]\n    exp_p = np.exp(log_p)      # ensure exponent > 0\n\n    # linear score\n    S = X.dot(W.T)             # (N,5)\n\n    # elementwise signed power\n    S_sign = np.sign(S)\n    S_abs = np.abs(S) + 1e-12  # avoid zero**exp issues\n    Y = a + S_sign * (S_abs ** exp_p)\n    return Y\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the non-linear scaling law via L-BFGS optimization.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed losses.\n\n    Returns:\n        params: flat array of length 31 (optimized).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected shapes (N,5) for data_points and loss_values\")\n\n    # Initialize linear part by ridge regression\n    # solve [X_aug] [W^T; a] \u2248 Y\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)\n    B = X_aug.T.dot(Y)\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n    W_init = Theta[:F, :].T                                # (5,5)\n    a_init = Theta[F, :].ravel()                           # (5,)\n\n    # log_p initial = 0 \u2192 p = 1 (linear)\n    log_p_init = 0.0\n\n    init_params = np.concatenate([W_init.ravel(), a_init, [log_p_init]])\n\n    # regularization strength\n    lam_reg = 1e-4\n\n    def objective(params):\n        Y_pred = scaling_law_func(X, params)\n        mse = np.mean((Y_pred - Y) ** 2)\n        # L2 penalty on W to avoid overfitting\n        W = params[:25]\n        reg = lam_reg * np.sum(W * W) / params.size\n        return mse + reg\n\n    # optimize with L-BFGS-B\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        options={'maxiter': 500, 'ftol': 1e-9}\n    )\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear init if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END\n```"]}}}