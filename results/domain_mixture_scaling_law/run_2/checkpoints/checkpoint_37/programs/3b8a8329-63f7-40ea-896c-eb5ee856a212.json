{"id": "3b8a8329-63f7-40ea-896c-eb5ee856a212", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses using a combined mixture-power-law plus\n    low-rank linear coupling model.\n\n    Model:\n        s_n = sum_i w_i * x_{n,i}\n        z_n = sum_i beta_i * x_{n,i}\n        y_{n,j} = a_j + b_j * s_n^{p_j} + alpha_j * z_n\n\n    Parameters (30 total):\n      0\u20134    u_j        : logits for shared mixture weights w = softmax(u)\n      5\u20139    a_j        : output-specific biases\n     10\u201314   r_j        : log-scales so b_j = exp(r_j) \u2265 0\n     15\u201319   v_j        : log-exponents so p_j = exp(v_j) \u2265 0\n     20\u201324   alpha_j    : output-specific linear coupling coeffs\n     25\u201329   beta_i     : shared linear coupling input weights\n\n    Args:\n      data_points: array of shape (N,5) of domain proportions.\n      params     : flat array of length 30.\n\n    Returns:\n      preds      : array of shape (N,5), predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    p = np.asarray(params).ravel()\n    if p.size != 30:\n        raise ValueError(f\"Expected 30 parameters, got {p.size}\")\n\n    # Unpack parameters\n    u     = p[0:5]      # mixture logits\n    a     = p[5:10]     # biases\n    r_log = p[10:15]    # log-scales\n    v_log = p[15:20]    # log-exponents\n    alpha = p[20:25]    # linear coupling coefficients\n    beta  = p[25:30]    # coupling input weights\n\n    # Softmax to get mixture weights w\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)         # shape (5,)\n\n    # Ensure positive scales and exponents\n    b = np.exp(r_log)                 # scales \u2265 0, shape (5,)\n    p_exp = np.exp(v_log)             # exponents \u2265 0, shape (5,)\n\n    # Mixture score s_n and linear coupling z_n\n    s = X.dot(w)                      # shape (N,)\n    z = X.dot(beta)                   # shape (N,)\n\n    # Compute predictions: shape (N,5)\n    # y_{n,j} = a_j + b_j * s_n^{p_j} + alpha_j * z_n\n    Y_power = b[None, :] * (s[:, None] ** p_exp[None, :])\n    Y_lin   = z[:, None] * alpha[None, :]\n    preds   = a[None, :] + Y_power + Y_lin\n\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the combined mixture-power-law plus low-rank linear coupling model\n    by minimizing regularized MSE via L-BFGS-B.\n\n    Args:\n      data_points: array of shape (N,5) of domain proportions.\n      loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n      params: optimized flat array of length 30.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    Y = np.atleast_2d(np.asarray(loss_values))\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points shape (N,5) and loss_values shape (N,5)\")\n\n    # Initialize parameters\n    # u       = 0     \u2192 uniform mixture\n    # a       = mean(Y, axis=0)\n    # r_log   = 0     \u2192 b=1\n    # v_log   = 0     \u2192 p=1\n    # alpha   = 0\n    # beta    = 0\n    mean_Y = np.mean(Y, axis=0)\n    init_u     = np.zeros(5)\n    init_a     = mean_Y.copy()\n    init_r_log = np.zeros(5)\n    init_v_log = np.zeros(5)\n    init_alpha = np.zeros(5)\n    init_beta  = np.zeros(5)\n    init_params = np.concatenate([\n        init_u, init_a, init_r_log, init_v_log, init_alpha, init_beta\n    ])  # total length = 30\n\n    # Regularization strength\n    lam_reg = 1e-2\n\n    # Optional parameter bounds for stability\n    bounds = (\n        [(-3.0, 3.0)] * 5 +         # u\n        [(None, None)] * 5 +        # a\n        [(-5.0, 5.0)] * 5 +         # r_log\n        [(-3.0, 3.0)] * 5 +         # v_log\n        [(None, None)] * 5 +        # alpha\n        [(None, None)] * 5          # beta\n    )\n\n    def objective(params):\n        Y_pred = scaling_law_func(X, params)\n        mse = np.mean((Y_pred - Y) ** 2)\n        # L2 penalty on linear coupling to avoid overfit\n        alpha = params[20:25]\n        beta = params[25:30]\n        reg = lam_reg * (np.sum(alpha**2) + np.sum(beta**2)) / 30.0\n        return mse + reg\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "50b4466a-4da5-4107-8328-e7b2c32eca84", "generation": 2, "timestamp": 1754716360.8524673, "iteration_found": 28, "metrics": {"nmse": 0.1085035032759301, "nmae": 0.30587343493252594, "r2": 0.8914964967240699, "combined_score": 0.9021171309289753}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.07810695144910622, "nmae": 0.23880202179478766, "r2": 0.9218930485508938, "combined_score": 0.9275517597357841}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0781\n- nmae: 0.2388\n- r2: 0.9219\n- combined_score: 0.9276\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0781, nmae: 0.2388, r2: 0.9219, combined_score: 0.9276\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0383, nmae: 0.1599, r2: 0.9617, combined_score: 0.9631\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0010, nmae: 0.0240, r2: 0.9990, combined_score: 0.9990\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5058)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient nonlinear feature\u2010exponent model:\neach input proportion is raised to a learned exponent, then\nlinearly combined into each output loss.\n\nTotal parameters = 5 exponents + 25 linear weights + 5 biases = 35 \u2264 35.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - entries 0\u20134   \u2192 exponent\u2010log vector u (for positive exponents p=exp(u))\n                     - entries 5\u201329  \u2192 weight matrix W of shape (5,5), flattened row\u2010major\n                     - entries 30\u201334 \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    u = p[0:5]                         # (5,) logarithms of exponents\n    W = p[5:30].reshape(5, 5)          # (5,5) weight matrix W[j,i]\n    b = p[30:35].reshape(1, 5)         # (1,5) bias vector\n\n    # positive exponents\n    exponents = np.exp(u)              # p_i \u2265 0, (5,)\n\n    # nonlinear transform of inputs\n    # x_{n,i}^{p_i}\n    X_p = np.power(X, exponents)       # (N,5)\n\n    # affine combination\n    preds = X_p.dot(W.T) + b           # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear exponent + linear weights model by minimizing MSE.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (5 exponents + 25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape {(N,5)}, got {Y.shape}\"\n\n    # Initialization:\n    # - log\u2010exponents u_i = 0 \u2192 exponents p_i = 1 (identity)\n    # - weights W = 0\n    # - biases b = mean of each output\n    mean_Y = np.mean(Y, axis=0)                  # (5,)\n    init_u = np.zeros(5)                         # (5,)\n    init_W = np.zeros(25)                        # flattened (5\u00d75)\n    init_b = mean_Y.copy()                       # (5,)\n    init_params = np.concatenate([init_u, init_W, init_b])  # (35,)\n\n    # Bound the log\u2010exponents to keep p_i in a reasonable range\n    # here u_i \u2208 [\u22123, 3] \u21d2 p_i \u2208 [exp(\u22123), exp(3)] \u2248 [0.05, 20]\n    bounds = [(-3.0, 3.0)] * 5 + [(None, None)] * 25 + [(None, None)] * 5\n\n    def objective(p_flat):\n        Y_pred = scaling_law_func(X, p_flat)\n        # mean squared error\n        return np.mean((Y_pred - Y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 500, \"ftol\": 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial params if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0010), Performs well on nmae (0.0240), Performs well on r2 (0.9990), Performs well on combined_score (0.9990)\n\n\n### Program 2 (Score: 0.5307)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions\n    using a shared-mixture power law per output.\n\n    Args:\n        data_points: array of shape (N,5) of domain proportions.\n        params:      flat array of length 20:\n                     - [0:5]:   unnormalized logits u for mixture weights w = softmax(u)\n                     - [5:10]:  biases a_j for each domain loss\n                     - [10:15]: log-scales r_j so that b_j = exp(r_j) >= 0\n                     - [15:20]: log-exponents v_j so that p_j = exp(v_j) >= 0\n\n    Returns:\n        preds: array of shape (N,5), predicted losses for each of 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    prm = np.asarray(params).ravel()\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture weights w = softmax(u)\n    u = prm[0:5]\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)                 # (5,)\n\n    # 2) Output\u2010specific parameters\n    a = prm[5:10]                             # biases (5,)\n    r = prm[10:15]                            # log\u2010scales (5,)\n    v = prm[15:20]                            # log\u2010exponents (5,)\n    b = np.exp(r)                             # scales >= 0 (5,)\n    p = np.exp(v)                             # exponents >= 0 (5,)\n\n    # 3) Mixture score for each sample\n    s = X.dot(w)                              # (N,)\n\n    # 4) Predict each domain loss: y_j = a_j + b_j * s^p_j\n    # Broadcasting to (N,5)\n    Y = a[None, :] + b[None, :] * (s[:, None] ** p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the shared\u2010mixture power\u2010law scaling function via L-BFGS optimization.\n\n    Args:\n        data_points:  array of shape (N,5) of domain proportions.\n        loss_values:  array of shape (N,5) of observed domain losses.\n\n    Returns:\n        params: flat array of length 20 (optimized).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected inputs of shape (N,5) and losses of shape (N,5)\")\n\n    # Initialize parameters\n    #  u = 0       => uniform mixture\n    #  a = mean(Y) => bias approx\n    #  r = log(std(Y)) => scale approx\n    #  v = 0       => exponent \u2248 1\n    mean_y = np.mean(Y, axis=0)\n    std_y  = np.std(Y, axis=0, ddof=1)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.log(np.maximum(std_y, 1e-2))\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])\n\n    # Regularization strength for scale/exponent terms\n    lam_reg = 1e-2\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        mse = np.mean((pred - Y) ** 2)\n        # L2 penalty on r and v for numerical stability\n        r = params[10:15]\n        v = params[15:20]\n        reg = lam_reg * (np.sum(r**2) + np.sum(v**2)) / params.size\n        return mse + reg\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective,\n                      init_params,\n                      method='L-BFGS-B',\n                      options={'maxiter': 1000, 'ftol': 1e-9})\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0383), Performs well on nmae (0.1599), Performs well on r2 (0.9617), Performs well on combined_score (0.9631)\n\n\n### Program 3 (Score: 0.5416)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0781), Performs well on nmae (0.2388), Performs well on r2 (0.9219), Performs well on combined_score (0.9276)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5058, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient nonlinear feature\u2010exponent model:\neach input proportion is raised to a learned exponent, then\nlinearly combined into each output loss.\n\nTotal parameters = 5 exponents + 25 linear weights + 5 biases = 35 \u2264 35.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - entries 0\u20134   \u2192 exponent\u2010log vector u (for positive exponents p=exp(u))\n                     - entries 5\u201329  \u2192 weight matrix W of shape (5,5), flattened row\u2010major\n                     - entries 30\u201334 \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    u = p[0:5]                         # (5,) logarithms of exponents\n    W = p[5:30].reshape(5, 5)          # (5,5) weight matrix W[j,i]\n    b = p[30:35].reshape(1, 5)         # (1,5) bias vector\n\n    # positive exponents\n    exponents = np.exp(u)              # p_i \u2265 0, (5,)\n\n    # nonlinear transform of inputs\n    # x_{n,i}^{p_i}\n    X_p = np.power(X, exponents)       # (N,5)\n\n    # affine combination\n    preds = X_p.dot(W.T) + b           # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear exponent + linear weights model by minimizing MSE.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (5 exponents + 25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape {(N,5)}, got {Y.shape}\"\n\n    # Initialization:\n    # - log\u2010exponents u_i = 0 \u2192 exponents p_i = 1 (identity)\n    # - weights W = 0\n    # - biases b = mean of each output\n    mean_Y = np.mean(Y, axis=0)                  # (5,)\n    init_u = np.zeros(5)                         # (5,)\n    init_W = np.zeros(25)                        # flattened (5\u00d75)\n    init_b = mean_Y.copy()                       # (5,)\n    init_params = np.concatenate([init_u, init_W, init_b])  # (35,)\n\n    # Bound the log\u2010exponents to keep p_i in a reasonable range\n    # here u_i \u2208 [\u22123, 3] \u21d2 p_i \u2208 [exp(\u22123), exp(3)] \u2248 [0.05, 20]\n    bounds = [(-3.0, 3.0)] * 5 + [(None, None)] * 25 + [(None, None)] * 5\n\n    def objective(p_flat):\n        Y_pred = scaling_law_func(X, p_flat)\n        # mean squared error\n        return np.mean((Y_pred - Y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"maxiter\": 500, \"ftol\": 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial params if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses using a combined mixture-power-law plus\n    low-rank linear coupling model.\n\n    Model:\n        s_n = sum_i w_i * x_{n,i}\n        z_n = sum_i beta_i * x_{n,i}\n        y_{n,j} = a_j + b_j * s_n^{p_j} + alpha_j * z_n\n\n    Parameters (30 total):\n      0\u20134    u_j        : logits for shared mixture weights w = softmax(u)\n      5\u20139    a_j        : output-specific biases\n     10\u201314   r_j        : log-scales so b_j = exp(r_j) \u2265 0\n     15\u201319   v_j        : log-exponents so p_j = exp(v_j) \u2265 0\n     20\u201324   alpha_j    : output-specific linear coupling coeffs\n     25\u201329   beta_i     : shared linear coupling input weights\n\n    Args:\n      data_points: array of shape (N,5) of domain proportions.\n      params     : flat array of length 30.\n\n    Returns:\n      preds      : array of shape (N,5), predicted losses.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n    p = np.asarray(params).ravel()\n    if p.size != 30:\n        raise ValueError(f\"Expected 30 parameters, got {p.size}\")\n\n    # Unpack parameters\n    u     = p[0:5]      # mixture logits\n    a     = p[5:10]     # biases\n    r_log = p[10:15]    # log-scales\n    v_log = p[15:20]    # log-exponents\n    alpha = p[20:25]    # linear coupling coefficients\n    beta  = p[25:30]    # coupling input weights\n\n    # Softmax to get mixture weights w\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)         # shape (5,)\n\n    # Ensure positive scales and exponents\n    b = np.exp(r_log)                 # scales \u2265 0, shape (5,)\n    p_exp = np.exp(v_log)             # exponents \u2265 0, shape (5,)\n\n    # Mixture score s_n and linear coupling z_n\n    s = X.dot(w)                      # shape (N,)\n    z = X.dot(beta)                   # shape (N,)\n\n    # Compute predictions: shape (N,5)\n    # y_{n,j} = a_j + b_j * s_n^{p_j} + alpha_j * z_n\n    Y_power = b[None, :] * (s[:, None] ** p_exp[None, :])\n    Y_lin   = z[:, None] * alpha[None, :]\n    preds   = a[None, :] + Y_power + Y_lin\n\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the combined mixture-power-law plus low-rank linear coupling model\n    by minimizing regularized MSE via L-BFGS-B.\n\n    Args:\n      data_points: array of shape (N,5) of domain proportions.\n      loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n      params: optimized flat array of length 30.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))\n    Y = np.atleast_2d(np.asarray(loss_values))\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points shape (N,5) and loss_values shape (N,5)\")\n\n    # Initialize parameters\n    # u       = 0     \u2192 uniform mixture\n    # a       = mean(Y, axis=0)\n    # r_log   = 0     \u2192 b=1\n    # v_log   = 0     \u2192 p=1\n    # alpha   = 0\n    # beta    = 0\n    mean_Y = np.mean(Y, axis=0)\n    init_u     = np.zeros(5)\n    init_a     = mean_Y.copy()\n    init_r_log = np.zeros(5)\n    init_v_log = np.zeros(5)\n    init_alpha = np.zeros(5)\n    init_beta  = np.zeros(5)\n    init_params = np.concatenate([\n        init_u, init_a, init_r_log, init_v_log, init_alpha, init_beta\n    ])  # total length = 30\n\n    # Regularization strength\n    lam_reg = 1e-2\n\n    # Optional parameter bounds for stability\n    bounds = (\n        [(-3.0, 3.0)] * 5 +         # u\n        [(None, None)] * 5 +        # a\n        [(-5.0, 5.0)] * 5 +         # r_log\n        [(-3.0, 3.0)] * 5 +         # v_log\n        [(None, None)] * 5 +        # alpha\n        [(None, None)] * 5          # beta\n    )\n\n    def objective(params):\n        Y_pred = scaling_law_func(X, params)\n        mse = np.mean((Y_pred - Y) ** 2)\n        # L2 penalty on linear coupling to avoid overfit\n        alpha = params[20:25]\n        beta = params[25:30]\n        reg = lam_reg * (np.sum(alpha**2) + np.sum(beta**2)) / 30.0\n        return mse + reg\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback if optimization fails\n        return init_params\n\n# EVOLVE-BLOCK-END\n```"]}}}