{"id": "a812cb53-2a0d-4a7e-ba39-4e49dcd04733", "code": "\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient nonlinear extension of the affine mixture\u2010of\u2010experts model:\neach domain\u2010loss is an affine combination of all domain proportions plus\na self\u2010quadratic correction on its own proportion.\nTotal parameters = 5\u00d75 (linear W) + 5 (biases b) + 5 (self\u2010quadratic c) = 35.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries   \u2192 bias vector b of shape (5,)\n                - last 5 entries   \u2192 self-quadratic weights c of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    \n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n    \n    # unpack parameters\n    W = p[:25].reshape(5, 5)       # linear weight matrix\n    b = p[25:30].reshape(1, 5)     # bias vector\n    c = p[30:35].reshape(1, 5)     # self-quadratic weights\n\n    # linear term + self-quadratic correction\n    linear_term = X.dot(W) + b           # shape (N,5)\n    quad_term   = (X ** 2) * c           # shape (N,5), elementwise\n    preds       = linear_term + quad_term\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear scaling law via independent ridge\u2010regularized\n    least squares per output domain.\n\n    Each output j has:\n        y_j \u2248 \u2211\u2096 W\u2096\u2c7c \u00b7 x\u2096  +  c\u2c7c \u00b7 (x\u2c7c)\u00b2  +  b\u2c7c\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35:\n                [W.ravel(), b, c], where\n                W is (5,5), b is (5,), c is (5,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    Y = np.asarray(loss_values, dtype=float)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n    \n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    # small ridge penalty for numerical stability\n    lam = 1e-6\n\n    # prepare containers\n    W = np.zeros((5, 5), dtype=float)\n    b = np.zeros(5, dtype=float)\n    c = np.zeros(5, dtype=float)\n\n    # Fit each domain output independently\n    for j in range(5):\n        # target for domain j\n        yj = Y[:, j]                           # shape (N,)\n        # design: [all proportions, (x_j)^2, bias]\n        xj_sq = (X[:, j] ** 2).reshape(N, 1)   # shape (N,1)\n        D = np.hstack([X, xj_sq, np.ones((N, 1), dtype=float)])  # shape (N,7)\n\n        # ridge\u2010regularized normal equations\n        A = D.T.dot(D) + lam * np.eye(D.shape[1])  # (7,7)\n        B = D.T.dot(yj)                            # (7,)\n\n        theta = np.linalg.solve(A, B)              # (7,)\n\n        # unpack parameters for domain j\n        W[:, j] = theta[:5]       # linear weights\n        c[j]    = theta[5]        # self\u2010quadratic weight\n        b[j]    = theta[6]        # bias\n\n    # serialize into flat vector\n    params = np.concatenate([W.ravel(), b, c])\n    return params", "language": "python", "parent_id": "623b52ec-fa5f-44a0-8166-07bc4fae21a3", "generation": 1, "timestamp": 1754716471.0076976, "iteration_found": 39, "metrics": {"nmse": 0.004423948501471058, "nmae": 0.06143018790916051, "r2": 0.9955760514985289, "combined_score": 0.9955955366177088}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.2055838118008626, "nmae": 0.863744839213319, "r2": -0.2055838118008626, "combined_score": 0.45339469515941827}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.2056\n- nmae: 0.8637\n- r2: -0.2056\n- combined_score: 0.4534\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0044, nmae: 0.0614, r2: 0.9956, combined_score: 0.9956\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0044, nmae: 0.0614, r2: 0.9956, combined_score: 0.9956\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5143)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient nonlinear extension of the affine mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions plus\na correction term proportional to the square of its own domain proportion.\nTotal parameters = 5\u00d75 (linear weights) + 5 (biases) + 5 (self-quadratic weights) = 35.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions,\n    with a self-quadratic correction per domain.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries    \u2192 bias vector b of shape (5,)\n                - last 5 entries    \u2192 self-quadratic weights c of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    \n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n    \n    # unpack parameters\n    W = p[:25].reshape(5, 5)       # linear weight matrix\n    b = p[25:30].reshape(1, 5)     # bias vector\n    c = p[30:35].reshape(1, 5)     # self-quadratic weights\n\n    # linear prediction + self-quadratic correction\n    linear_term = X.dot(W) + b             # (N,5)\n    quad_term   = (X**2) * c               # (N,5), elementwise\n    preds       = linear_term + quad_term  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear scaling law via independent ridge\u2010regularized\n    least squares per output domain. Each output j has its own\n    linear weights (5), bias (1), and self-quadratic weight (1).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35:\n                [W.ravel(), b, c], where\n                W is (5,5), b is (5,), c is (5,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))   # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6   # small ridge penalty for stability\n    W = np.zeros((5, 5), dtype=float)\n    b = np.zeros(5, dtype=float)\n    c = np.zeros(5, dtype=float)\n\n    # Fit each output domain separately\n    for j in range(5):\n        # target for domain j\n        yj = Y[:, j]                                   # (N,)\n\n        # build domain-j design matrix: [proportions, (p_j)^2, bias]\n        pj_sq = (X[:, j]**2).reshape(N, 1)             # (N,1)\n        Fmat = np.concatenate([X, pj_sq, np.ones((N, 1), dtype=float)], axis=1)  # (N,7)\n\n        # ridge\u2010regularized normal equations\n        A = Fmat.T.dot(Fmat) + lam * np.eye(F + 2)     # (7,7)\n        B = Fmat.T.dot(yj)                             # (7,)\n\n        theta = np.linalg.solve(A, B)                  # (7,)\n\n        # unpack\n        W[:, j] = theta[:5]    # linear weights for outputs j\n        c[j]    = theta[5]     # self\u2010quadratic weight for domain j\n        b[j]    = theta[6]     # bias for domain j\n\n    # pack parameters\n    params = np.concatenate([W.ravel(), b, c])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0044), Performs well on nmae (0.0614), Performs well on r2 (0.9956), Performs well on combined_score (0.9956)\n\n\n### Program 2 (Score: 0.5143)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient affine + domain\u2010wise quadratic model:\nEach domain\u2010loss is modeled as\n    loss_j = \u2211\u2096 W\u2096\u2c7c \u00b7 x\u2096  +  w_sq\u2c7c \u00b7 (x\u2c7c)\u00b2  +  b\u2c7c\nTotal parameters = 5\u00d75 (W) + 5 (w_sq) + 5 (b) = 35 \u2264 35.\nThis adds a simple nonlinearity per domain while keeping cross\u2010domain\ninteractions linear.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - first 25 entries \u2192 weight matrix W of shape (5,5)\n                     - next 5 entries   \u2192 domain\u2010wise quadratic coeffs w_sq (5,)\n                     - last 5 entries   \u2192 bias vector b (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    W_lin = p[:25].reshape(5, 5)     # linear weights\n    w_sq  = p[25:30].reshape(1, 5)    # quadratic coeff per domain\n    b_vec = p[30:35].reshape(1, 5)    # biases\n\n    # compute predictions:\n    # linear term + domain\u2010wise quadratic term + bias\n    preds = X.dot(W_lin) + (X**2).dot(np.diagflat(w_sq)) + b_vec\n    # note: (X**2).dot(diag(w_sq)) == (X**2) * w_sq\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine + per\u2010domain quadratic model via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 w_sq + 5 b).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape {(N,5)}, got {Y.shape}\"\n\n    # regularization strength\n    lam = 1e-6\n\n    # containers for parameters\n    W_lin = np.zeros((5, 5), dtype=float)\n    w_sq  = np.zeros(5, dtype=float)\n    b_vec = np.zeros(5, dtype=float)\n\n    # Fit each domain\u2010loss independently:\n    # y_j \u2248 X \u00b7 W_lin[:,j]  +  (x_j)**2 * w_sq[j]  +  b_vec[j]\n    for j in range(5):\n        # build design matrix: [ X (5 cols) | x_j^2 (1 col) | 1 (1 col) ] => (N,7)\n        xj_sq = (X[:, j]**2).reshape(N, 1)\n        D = np.hstack([X, xj_sq, np.ones((N, 1), dtype=float)])\n        # normal equations with ridge\n        A = D.T.dot(D) + lam * np.eye(D.shape[1])\n        B = D.T.dot(Y[:, j])\n        theta = np.linalg.solve(A, B)  # shape (7,)\n\n        # unpack\n        W_lin[:, j] = theta[:5]\n        w_sq[j]      = theta[5]\n        b_vec[j]     = theta[6]\n\n    # serialize parameters\n    params = np.concatenate([W_lin.ravel(), w_sq, b_vec])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0044), Performs well on nmae (0.0614), Performs well on r2 (0.9956), Performs well on combined_score (0.9956)\n\n\n### Program 3 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5416)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5416)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5143, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient affine + domain\u2010wise quadratic model:\nEach domain\u2010loss is modeled as\n    loss_j = \u2211\u2096 W\u2096\u2c7c \u00b7 x\u2096  +  w_sq\u2c7c \u00b7 (x\u2c7c)\u00b2  +  b\u2c7c\nTotal parameters = 5\u00d75 (W) + 5 (w_sq) + 5 (b) = 35 \u2264 35.\nThis adds a simple nonlinearity per domain while keeping cross\u2010domain\ninteractions linear.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 35:\n                     - first 25 entries \u2192 weight matrix W of shape (5,5)\n                     - next 5 entries   \u2192 domain\u2010wise quadratic coeffs w_sq (5,)\n                     - last 5 entries   \u2192 bias vector b (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    W_lin = p[:25].reshape(5, 5)     # linear weights\n    w_sq  = p[25:30].reshape(1, 5)    # quadratic coeff per domain\n    b_vec = p[30:35].reshape(1, 5)    # biases\n\n    # compute predictions:\n    # linear term + domain\u2010wise quadratic term + bias\n    preds = X.dot(W_lin) + (X**2).dot(np.diagflat(w_sq)) + b_vec\n    # note: (X**2).dot(diag(w_sq)) == (X**2) * w_sq\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine + per\u2010domain quadratic model via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 W + 5 w_sq + 5 b).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    Y = np.asarray(loss_values, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape {(N,5)}, got {Y.shape}\"\n\n    # regularization strength\n    lam = 1e-6\n\n    # containers for parameters\n    W_lin = np.zeros((5, 5), dtype=float)\n    w_sq  = np.zeros(5, dtype=float)\n    b_vec = np.zeros(5, dtype=float)\n\n    # Fit each domain\u2010loss independently:\n    # y_j \u2248 X \u00b7 W_lin[:,j]  +  (x_j)**2 * w_sq[j]  +  b_vec[j]\n    for j in range(5):\n        # build design matrix: [ X (5 cols) | x_j^2 (1 col) | 1 (1 col) ] => (N,7)\n        xj_sq = (X[:, j]**2).reshape(N, 1)\n        D = np.hstack([X, xj_sq, np.ones((N, 1), dtype=float)])\n        # normal equations with ridge\n        A = D.T.dot(D) + lam * np.eye(D.shape[1])\n        B = D.T.dot(Y[:, j])\n        theta = np.linalg.solve(A, B)  # shape (7,)\n\n        # unpack\n        W_lin[:, j] = theta[:5]\n        w_sq[j]      = theta[5]\n        b_vec[j]     = theta[6]\n\n    # serialize parameters\n    params = np.concatenate([W_lin.ravel(), w_sq, b_vec])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nEnhanced linear mixture\u2010of\u2010experts with a squared\u2010proportion concentration feature:\n    y_j = sum_i W[i,j] * p_i  +  alpha[j] * (sum_i p_i^2)  +  b[j]\nTotal parameters = 5\u00d75 (W) + 5 (alpha) + 5 (bias) = 35 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions,\n    using a linear term plus a global squared\u2010proportion concentration term.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries  \u2192 alpha vector of shape (5,)\n                - last 5 entries  \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected input with 5 domain proportions, got {F}\"\n\n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n\n    # unpack parameters\n    W     = p[:25].reshape(5, 5)    # linear weights\n    alpha = p[25:30].reshape(1, 5)  # squared\u2010proportion weights\n    b     = p[30:35].reshape(1, 5)  # biases\n\n    # compute the global concentration feature per sample\n    sq_sum = np.sum(X * X, axis=1, keepdims=True)  # (N,1)\n\n    # affine + concentration term\n    preds = X.dot(W) + sq_sum * alpha + b          # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the enhanced scaling law:\n        y = X W + (sum(X^2)) \u03b1 + 1\u00b7b\n    via ridge\u2010regularized linear regression (closed\u2010form).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35 (25 weights + 5 alpha + 5 bias).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points), dtype=float)  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values), dtype=float)  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected input with 5 domain proportions, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values with shape (N,5), got {Y.shape}\"\n\n    # build concentration feature and design matrix\n    sq_sum = np.sum(X * X, axis=1, keepdims=True)           # (N,1)\n    X_aug = np.concatenate([X, sq_sum, np.ones((N, 1))], axis=1)  # (N,7)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 2)            # (7,7)\n    B = X_aug.T.dot(Y)                                       # (7,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                           # (7,5)\n\n    # unpack into parameters\n    # Theta rows 0\u20134: linear weights for p1..p5 \u2192 W (5\u00d75)\n    # Theta row 5:  squared\u2010proportion weights \u2192 alpha (5,)\n    # Theta row 6:  bias terms \u2192 b (5,)\n    W     = Theta[:5, :]                                     # (5,5)\n    alpha = Theta[5, :].reshape(5)                           # (5,)\n    b     = Theta[6, :].reshape(5)                           # (5,)\n\n    # flatten into single parameter vector\n    params = np.concatenate([W.ravel(), alpha, b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5416, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5745, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient hybrid linear + power\u2010law model:\n  y_j = a_j + l_j * s + b_j * s^{p_j}, \nwhere s = \u03a3_i w_i x_i is a shared mixture score.\nTotal parameters = 5 (mixture logits) \n                   + 5 (biases a) \n                   + 5 (linear coeffs l) \n                   + 5 (log-scales r \u2192 b = exp(r)) \n                   + 5 (log-exponents v \u2192 p = exp(v)) \n                 = 25 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:      flat array of length 25:\n                     - params[0:5]   \u2192 mixture logits u for w = softmax(u)\n                     - params[5:10]  \u2192 biases a_j for each output j\n                     - params[10:15] \u2192 linear coeffs l_j for each output j\n                     - params[15:20] \u2192 log\u2010scales r_j so that b_j = exp(r_j)\n                     - params[20:25] \u2192 log\u2010exponents v_j so that p_j = exp(v_j)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected 5 input features, got {F}\")\n\n    p = np.asarray(params).ravel()\n    if p.size != 25:\n        raise ValueError(f\"Expected 25 parameters, got {p.size}\")\n\n    # 1) Softmax mixture weights\n    u = p[0:5]\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)                    # (5,)\n\n    # 2) Output\u2010specific parameters\n    a = p[5:10]                                  # biases (5,)\n    l = p[10:15]                                 # linear coeffs (5,)\n    r = p[15:20]                                 # log\u2010scales (5,)\n    v = p[20:25]                                 # log\u2010exponents (5,)\n\n    b = np.exp(r)                                # nonlinear scale \u2265 0\n    p_exp = np.exp(v)                            # exponent \u2265 0\n\n    # 3) Compute mixture score s for each sample\n    s = X.dot(w)                                 # (N,)\n\n    # 4) Predict each output: y_j = a_j + l_j * s + b_j * s^{p_j}\n    # Broadcasting shapes to (N,5)\n    lin_term = l[None, :] * s[:, None]           # (N,5)\n    pow_term = b[None, :] * np.power(s[:, None], p_exp[None, :])  # (N,5)\n    preds = a[None, :] + lin_term + pow_term     # (N,5)\n\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the hybrid scaling law via L-BFGS-B minimizing MSE.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 25.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))   # (N,5)\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points shape (N,5) and loss_values shape (N,5)\")\n\n    # Initialize parameters\n    # mixture logits u = 0 \u2192 uniform w\n    init_u = np.zeros(5)\n    # biases ~ mean of each output\n    init_a = np.mean(Y, axis=0)\n    # linear coeffs = 0\n    init_l = np.zeros(5)\n    # log\u2010scales r = 0 \u2192 b = 1\n    init_r = np.zeros(5)\n    # log\u2010exponents v = 0 \u2192 p = 1\n    init_v = np.zeros(5)\n\n    init_params = np.concatenate([init_u, init_a, init_l, init_r, init_v])  # (25,)\n\n    # objective: mean squared error\n    def objective(p_flat):\n        preds = scaling_law_func(X, p_flat)\n        return np.mean((preds - Y) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initialization on failure\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5143, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient nonlinear extension of the affine mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions plus\na correction term proportional to the square of its own domain proportion.\nTotal parameters = 5\u00d75 (linear weights) + 5 (biases) + 5 (self-quadratic weights) = 35.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions,\n    with a self-quadratic correction per domain.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries    \u2192 bias vector b of shape (5,)\n                - last 5 entries    \u2192 self-quadratic weights c of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    \n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n    \n    # unpack parameters\n    W = p[:25].reshape(5, 5)       # linear weight matrix\n    b = p[25:30].reshape(1, 5)     # bias vector\n    c = p[30:35].reshape(1, 5)     # self-quadratic weights\n\n    # linear prediction + self-quadratic correction\n    linear_term = X.dot(W) + b             # (N,5)\n    quad_term   = (X**2) * c               # (N,5), elementwise\n    preds       = linear_term + quad_term  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear scaling law via independent ridge\u2010regularized\n    least squares per output domain. Each output j has its own\n    linear weights (5), bias (1), and self-quadratic weight (1).\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35:\n                [W.ravel(), b, c], where\n                W is (5,5), b is (5,), c is (5,).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))   # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))   # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    lam = 1e-6   # small ridge penalty for stability\n    W = np.zeros((5, 5), dtype=float)\n    b = np.zeros(5, dtype=float)\n    c = np.zeros(5, dtype=float)\n\n    # Fit each output domain separately\n    for j in range(5):\n        # target for domain j\n        yj = Y[:, j]                                   # (N,)\n\n        # build domain-j design matrix: [proportions, (p_j)^2, bias]\n        pj_sq = (X[:, j]**2).reshape(N, 1)             # (N,1)\n        Fmat = np.concatenate([X, pj_sq, np.ones((N, 1), dtype=float)], axis=1)  # (N,7)\n\n        # ridge\u2010regularized normal equations\n        A = Fmat.T.dot(Fmat) + lam * np.eye(F + 2)     # (7,7)\n        B = Fmat.T.dot(yj)                             # (7,)\n\n        theta = np.linalg.solve(A, B)                  # (7,)\n\n        # unpack\n        W[:, j] = theta[:5]    # linear weights for outputs j\n        c[j]    = theta[5]     # self\u2010quadratic weight for domain j\n        b[j]    = theta[6]     # bias for domain j\n\n    # pack parameters\n    params = np.concatenate([W.ravel(), b, c])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a parameter\u2010efficient nonlinear extension of the affine mixture\u2010of\u2010experts model:\neach domain\u2010loss is an affine combination of all domain proportions plus\na self\u2010quadratic correction on its own proportion.\nTotal parameters = 5\u00d75 (linear W) + 5 (biases b) + 5 (self\u2010quadratic c) = 35.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 35:\n                - first 25 entries \u2192 weight matrix W of shape (5,5)\n                - next 5 entries   \u2192 bias vector b of shape (5,)\n                - last 5 entries   \u2192 self-quadratic weights c of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    \n    p = np.asarray(params, dtype=float).ravel()\n    assert p.size == 35, f\"Expected 35 parameters, got {p.size}\"\n    \n    # unpack parameters\n    W = p[:25].reshape(5, 5)       # linear weight matrix\n    b = p[25:30].reshape(1, 5)     # bias vector\n    c = p[30:35].reshape(1, 5)     # self-quadratic weights\n\n    # linear term + self-quadratic correction\n    linear_term = X.dot(W) + b           # shape (N,5)\n    quad_term   = (X ** 2) * c           # shape (N,5), elementwise\n    preds       = linear_term + quad_term\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the nonlinear scaling law via independent ridge\u2010regularized\n    least squares per output domain.\n\n    Each output j has:\n        y_j \u2248 \u2211\u2096 W\u2096\u2c7c \u00b7 x\u2096  +  c\u2c7c \u00b7 (x\u2c7c)\u00b2  +  b\u2c7c\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 35:\n                [W.ravel(), b, c], where\n                W is (5,5), b is (5,), c is (5,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    Y = np.asarray(loss_values, dtype=float)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n    \n    N, F = X.shape\n    assert F == 5, f\"Expected input features of size 5, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    # small ridge penalty for numerical stability\n    lam = 1e-6\n\n    # prepare containers\n    W = np.zeros((5, 5), dtype=float)\n    b = np.zeros(5, dtype=float)\n    c = np.zeros(5, dtype=float)\n\n    # Fit each domain output independently\n    for j in range(5):\n        # target for domain j\n        yj = Y[:, j]                           # shape (N,)\n        # design: [all proportions, (x_j)^2, bias]\n        xj_sq = (X[:, j] ** 2).reshape(N, 1)   # shape (N,1)\n        D = np.hstack([X, xj_sq, np.ones((N, 1), dtype=float)])  # shape (N,7)\n\n        # ridge\u2010regularized normal equations\n        A = D.T.dot(D) + lam * np.eye(D.shape[1])  # (7,7)\n        B = D.T.dot(yj)                            # (7,)\n\n        theta = np.linalg.solve(A, B)              # (7,)\n\n        # unpack parameters for domain j\n        W[:, j] = theta[:5]       # linear weights\n        c[j]    = theta[5]        # self\u2010quadratic weight\n        b[j]    = theta[6]        # bias\n\n    # serialize into flat vector\n    params = np.concatenate([W.ravel(), b, c])\n    return params\n```\n\nExplanation of key improvements:\n- Reduced total parameters to 35 by using a 5\u00d75 linear weight matrix, 5 biases, and 5 self\u2010quadratic coefficients.\n- Added a small ridge regularization (\u03bb=1e-6) for numerical stability in the closed\u2010form least squares fit.\n- Each domain\u2019s loss is fitted independently, enabling efficient linear algebra (no iterative global solver required).\n- The model captures both cross\u2010domain linear interactions and domain\u2010specific nonlinear (quadratic) corrections."]}}}