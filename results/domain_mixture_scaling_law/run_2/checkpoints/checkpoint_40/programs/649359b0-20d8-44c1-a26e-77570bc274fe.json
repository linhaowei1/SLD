{"id": "649359b0-20d8-44c1-a26e-77570bc274fe", "code": "\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient affine\u2010plus\u2010quadratic model:\neach output loss is an affine function of the five domain proportions\nplus a single shared quadratic feature (sum of squares of proportions).\nTotal parameters = (5 linear + 1 quadratic + 1 bias) \u00d7 5 outputs = 35.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array-like of shape (N,5)\n            Each row contains proportions for the 5 domains (sum to 1).\n        params: array-like of length 35\n            Flattened regression coefficients of shape (7,5):\n               - first 5 rows: linear weights for each input feature\n               - 6th row:    weights for the quadratic feature (sum of squares)\n               - 7th row:    bias terms\n\n    Returns:\n        preds: ndarray of shape (N,5)\n            Predicted losses for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected data_points with 5 features, got {F}\")\n    p = np.ravel(params).astype(float)\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # Compute the shared quadratic feature: sum of squares of proportions\n    sq_feat = np.sum(X * X, axis=1, keepdims=True)  # shape (N,1)\n\n    # Build augmented design matrix: [X | sq_feat | 1]\n    X_aug = np.concatenate([X, sq_feat, np.ones((N, 1), dtype=float)], axis=1)  # (N,7)\n\n    # Reshape parameters into (7,5) and compute predictions\n    Theta = p.reshape(7, 5)  # (7,5)\n    preds = X_aug.dot(Theta)  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine\u2010plus\u2010quadratic scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array-like of shape (N,5)\n            Mixtures of domain proportions.\n        loss_values: array-like of shape (N,5)\n            Observed multi-domain losses for each mixture.\n\n    Returns:\n        params: ndarray of length 35\n            Learned flatten parameters of the (7\u00d75) coefficient matrix.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected data_points with 5 features, got {F}\")\n    if Y.shape != (N, 5):\n        raise ValueError(f\"Expected loss_values shape ({N},5), got {Y.shape}\")\n\n    # Compute the shared quadratic feature\n    sq_feat = np.sum(X * X, axis=1, keepdims=True)  # (N,1)\n\n    # Build augmented design matrix: [X | sq_feat | 1]\n    X_aug = np.concatenate([X, sq_feat, np.ones((N, 1), dtype=float)], axis=1)  # (N,7)\n\n    # Ridge\u2010regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(7)      # (7,7)\n    B = X_aug.T.dot(Y)                            # (7,5)\n\n    # Solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                 # (7,5)\n\n    # Return flattened parameters\n    return Theta.ravel()", "language": "python", "parent_id": "2d9b530a-9064-40fe-ad1e-3a27dbb86bb2", "generation": 3, "timestamp": 1754716340.4685946, "iteration_found": 27, "metrics": {"nmse": 0.020984518891261763, "nmae": 0.13039018342445088, "r2": 0.9790154811087383, "combined_score": 0.9794467805309625}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.018360804339811472, "nmae": 0.13690427617636788, "r2": 0.9816391956601885, "combined_score": 0.9819702366179396}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0184\n- nmae: 0.1369\n- r2: 0.9816\n- combined_score: 0.9820\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0364, nmae: 0.1500, r2: 0.9636, combined_score: 0.9649\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient affine model:\neach output loss is a weighted sum of the five domain proportions plus a bias.\nTotal parameters = 5 outputs \u00d7 (5 weights + 1 bias) = 30 \u2264 35.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 30, interpreted as a (6\u00d75) matrix:\n                - first 5 rows: weight matrix (5 weights per output)\n                - last 1 row:  bias vector (1 bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    # reshape params into theta of shape (6,5)\n    theta = np.asarray(params, dtype=float).ravel()\n    assert theta.size == 30, f\"Expected 30 parameters, got {theta.size}\"\n    theta = theta.reshape(6, 5)  # (5 weights + 1 bias) for each of 5 outputs\n\n    # augment inputs with a bias feature of 1s\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # compute predictions\n    preds = X_aug.dot(theta)  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (6\u00d75 matrix flattened).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    # augment inputs with bias term\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)  # (6,6)\n    B = X_aug.T.dot(Y)                            # (6,5)\n\n    # solve for theta in A @ theta = B\n    theta = np.linalg.solve(A, B)                 # (6,5)\n\n    # return flattened parameters\n    return theta.ravel()\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 2 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 3 (Score: 0.5287)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified mixture-based power law with shared exponent.\n\nModel:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p}\n\nwhere\n    w = softmax(u) \u2208 \u0394^4   (5 logits \u2192 5 mixture weights)\n    b_j = exp(r_j) \u2265 0     (5 scale parameters)\n    p = exp(v) \u2265 0         (single shared exponent)\n    a_j \u2208 \u211d                (5 bias terms)\n\nTotal parameters = 5 (u) + 5 (a) + 5 (r) + 1 (v) = 16 \u2264 35\n\nThis compact form reduces over\u2010parameterization, improves\nnumerical stability via bounding r and v during optimization,\nand maintains strong cross\u2010domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef _softmax(logits):\n    \"\"\"Compute stable softmax over 1D array.\"\"\"\n    shifted = logits - np.max(logits)\n    exps = np.exp(shifted)\n    return exps / np.sum(exps)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses for given domain proportions.\n\n    Args:\n        data_points: array-like, shape (N, 5)\n            Each row is a mixture of 5 domain proportions.\n        params: array-like, shape (16,)\n            [u(5), a(5), r(5), v(1)]\n\n    Returns:\n        Y_pred: ndarray, shape (N, 5)\n            Predicted loss values for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    prm = np.ravel(params).astype(float)\n    if prm.size != 16:\n        raise ValueError(f\"Expected 16 parameters, got {prm.size}\")\n\n    # Unpack parameters\n    u = prm[0:5]       # logits for mixture weights\n    a = prm[5:10]      # biases for each output\n    r = prm[10:15]     # log\u2010scales\n    v = prm[15]        # log\u2010exponent (shared)\n\n    # Transform to valid domains\n    w = _softmax(u)          # mixture weights \u2208 \u0394^4\n    b = np.exp(r)            # scales \u2265 0\n    p = np.exp(v)            # exponent \u2265 0\n\n    # Mixture score per sample\n    s = X.dot(w)             # (N,)\n\n    # Predict: Y[n, j] = a_j + b_j * s[n]^p\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p)\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 16 parameters of the scaling law by minimizing MSE.\n\n    Args:\n        data_points: array-like, shape (N, 5)\n        loss_values: array-like, shape (N, 5)\n\n    Returns:\n        params_opt: ndarray, shape (16,)\n            Optimized parameters [u, a, r, v].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(\"Expected input with 5 domain proportions\")\n    y2d = y if y.ndim == 2 else y[:, None]\n    if y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 loss outputs\")\n\n    # Initialization:\n    #   u = 0     \u2192 uniform mixture\n    #   a = mean  \u2192 bias approx\n    #   r = 0     \u2192 scale b = 1\n    #   v = 0     \u2192 exponent p = 1\n    init = np.zeros(16, dtype=float)\n    init[5:10] = np.mean(y2d, axis=0)\n\n    # Bounds for robustness:\n    #   u[0:5], a[5:10]: unconstrained\n    #   r[10:15] \u2208 [-5, 5]   \u2192 b \u2208 [e\u207b\u2075, e\u2075]\n    #   v[15]    \u2208 [-2, 2]   \u2192 p \u2208 [e\u207b\u00b2, e\u00b2]\n    bounds = [(None, None)] * 16\n    for i in range(10, 15):\n        bounds[i] = (-5.0, 5.0)\n    bounds[15] = (-2.0, 2.0)\n\n    def objective(prm):\n        pred = scaling_law_func(X, prm)\n        return np.mean((pred - y2d) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0364), Performs well on nmae (0.1500), Performs well on r2 (0.9636), Performs well on combined_score (0.9649)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5297, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient affine model:\neach output loss is a weighted sum of the five domain proportions plus a bias.\nTotal parameters = 5 outputs \u00d7 (5 weights + 1 bias) = 30 \u2264 35.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params: flat array of length 30, interpreted as a (6\u00d75) matrix:\n                - first 5 rows: weight matrix (5 weights per output)\n                - last 1 row:  bias vector (1 bias per output)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    # reshape params into theta of shape (6,5)\n    theta = np.asarray(params, dtype=float).ravel()\n    assert theta.size == 30, f\"Expected 30 parameters, got {theta.size}\"\n    theta = theta.reshape(6, 5)  # (5 weights + 1 bias) for each of 5 outputs\n\n    # augment inputs with a bias feature of 1s\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # compute predictions\n    preds = X_aug.dot(theta)  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        loss_values: array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (6\u00d75 matrix flattened).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))  # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape == (N, 5), f\"Expected loss_values shape ({N},5), got {Y.shape}\"\n\n    # augment inputs with bias term\n    X_aug = np.concatenate([X, np.ones((N, 1), dtype=float)], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)  # (6,6)\n    B = X_aug.T.dot(Y)                            # (6,5)\n\n    # solve for theta in A @ theta = B\n    theta = np.linalg.solve(A, B)                 # (6,5)\n\n    # return flattened parameters\n    return theta.ravel()\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient affine\u2010plus\u2010quadratic model:\neach output loss is an affine function of the five domain proportions\nplus a single shared quadratic feature (sum of squares of proportions).\nTotal parameters = (5 linear + 1 quadratic + 1 bias) \u00d7 5 outputs = 35.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array-like of shape (N,5)\n            Each row contains proportions for the 5 domains (sum to 1).\n        params: array-like of length 35\n            Flattened regression coefficients of shape (7,5):\n               - first 5 rows: linear weights for each input feature\n               - 6th row:    weights for the quadratic feature (sum of squares)\n               - 7th row:    bias terms\n\n    Returns:\n        preds: ndarray of shape (N,5)\n            Predicted losses for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected data_points with 5 features, got {F}\")\n    p = np.ravel(params).astype(float)\n    if p.size != 35:\n        raise ValueError(f\"Expected 35 parameters, got {p.size}\")\n\n    # Compute the shared quadratic feature: sum of squares of proportions\n    sq_feat = np.sum(X * X, axis=1, keepdims=True)  # shape (N,1)\n\n    # Build augmented design matrix: [X | sq_feat | 1]\n    X_aug = np.concatenate([X, sq_feat, np.ones((N, 1), dtype=float)], axis=1)  # (N,7)\n\n    # Reshape parameters into (7,5) and compute predictions\n    Theta = p.reshape(7, 5)  # (7,5)\n    preds = X_aug.dot(Theta)  # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the affine\u2010plus\u2010quadratic scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points: array-like of shape (N,5)\n            Mixtures of domain proportions.\n        loss_values: array-like of shape (N,5)\n            Observed multi-domain losses for each mixture.\n\n    Returns:\n        params: ndarray of length 35\n            Learned flatten parameters of the (7\u00d75) coefficient matrix.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected data_points with 5 features, got {F}\")\n    if Y.shape != (N, 5):\n        raise ValueError(f\"Expected loss_values shape ({N},5), got {Y.shape}\")\n\n    # Compute the shared quadratic feature\n    sq_feat = np.sum(X * X, axis=1, keepdims=True)  # (N,1)\n\n    # Build augmented design matrix: [X | sq_feat | 1]\n    X_aug = np.concatenate([X, sq_feat, np.ones((N, 1), dtype=float)], axis=1)  # (N,7)\n\n    # Ridge\u2010regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(7)      # (7,7)\n    B = X_aug.T.dot(Y)                            # (7,5)\n\n    # Solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                 # (7,5)\n\n    # Return flattened parameters\n    return Theta.ravel()\n```\n\nExplanation of improvements:\n- Introduced a single shared quadratic feature (sum of squares of the domain proportions) to capture simple nonlinear curvature without exploding parameter count.\n- Kept total parameters at 35 to honor the budget.\n- Maintained ridge\u2010regularized least squares (closed\u2010form solution) for stability and efficiency.\n- This extended model can flexibly adjust to slight nonlinearities in how mixtures impact each domain's loss, improving predictive accuracy while preserving interpretability and maintainability."]}}}