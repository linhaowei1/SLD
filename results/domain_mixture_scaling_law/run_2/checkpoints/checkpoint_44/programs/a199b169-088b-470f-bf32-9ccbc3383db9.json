{"id": "a199b169-088b-470f-bf32-9ccbc3383db9", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced multi-domain scaling law with combined power-law and linear terms.\n\nModel:\n    y_j = a_j + b_j * s^{p_j} + c_j * s\nwhere\n    s = sum_i w_i * x_i\nand\n    w = softmax(u)  (domain-mixture weights, shared across outputs)\n\nParameters (25 total):\n    u (5): unnormalized logits \u2192 mixture weights w (via softmax)\n    a (5): output biases\n    r (5): log-scales \u2192 b = exp(r) \u2265 0\n    v (5): log-exponents \u2192 p = exp(v) \u2265 0\n    c (5): linear coefficients for s\n\nThis formulation adds a linear term c_j * s to improve\nfit flexibility while staying parameter-efficient.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 5:\n        raise ValueError(f\"Expected input features with shape (*,5), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 25:\n        raise ValueError(f\"Expected 25 parameters, got {p.size}\")\n\n    # Unpack parameters\n    u = p[0:5]       # logits for mixture weights\n    a = p[5:10]      # biases\n    r = p[10:15]     # log-scales\n    v = p[15:20]     # log-exponents\n    c = p[20:25]     # linear coefficients\n\n    # Mixture weights via stable softmax\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # shape (5,)\n\n    # Mixture score per sample\n    s = X.dot(w)                          # shape (N,)\n\n    # Positive scales and exponents\n    b = np.exp(r)                        # shape (5,)\n    pwr = np.exp(v)                      # shape (5,)\n\n    # Compute predictions\n    #   term1 = a_j\n    #   term2 = b_j * (s^p_j)\n    #   term3 = c_j * s\n    s_pow = np.power(s[:, None], pwr[None, :])   # shape (N,5)\n    linear = s[:, None] * c[None, :]             # shape (N,5)\n    Y = a[None, :] + b[None, :] * s_pow + linear\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 5:\n        raise ValueError(f\"Expected data_points shape (N,5), got {X.shape}\")\n    if y.ndim == 1:\n        y = y[:, None]\n    if y.shape != X.shape:\n        if y.ndim == 2 and y.shape[1] == 5:\n            pass\n        else:\n            raise ValueError(f\"Expected loss_values shape (N,5), got {y.shape}\")\n\n    # Initialize parameters\n    #   u = zeros \u2192 uniform mixture\n    #   a = mean loss per output\n    #   r = zeros \u2192 b = 1\n    #   v = zeros \u2192 p = 1\n    #   c = zeros \u2192 no initial linear term\n    mean_y = np.mean(y, axis=0)                  # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_c = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v, init_c])\n\n    # Bounds for stability\n    #   u, a: unbounded\n    #   r in [-5,5] \u2192 b \u2208 [exp(-5),exp(5)]\n    #   v in [-2,2] \u2192 p \u2208 [exp(-2),exp(2)]\n    #   c in [-10,10]\n    bounds = [(None, None)] * 5 + \\\n             [(None, None)] * 5 + \\\n             [(-5, 5)] * 5 + \\\n             [(-2, 2)] * 5 + \\\n             [(-10, 10)] * 5\n\n    # Mean Squared Error objective\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 5000, 'ftol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "50b4466a-4da5-4107-8328-e7b2c32eca84", "generation": 2, "timestamp": 1754716280.748536, "iteration_found": 18, "metrics": {"nmse": 0.04184538949361028, "nmae": 0.16319096171013953, "r2": 0.9581546105063897, "combined_score": 0.9598353172979444}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.07810695144910622, "nmae": 0.23880202179478766, "r2": 0.9218930485508938, "combined_score": 0.9275517597357841}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0781\n- nmae: 0.2388\n- r2: 0.9219\n- combined_score: 0.9276\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0781, nmae: 0.2388, r2: 0.9219, combined_score: 0.9276\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5416)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0781), Performs well on nmae (0.2388), Performs well on r2 (0.9219), Performs well on combined_score (0.9276)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law: mixture-based power law with shared domain mixture weights.\n\nWe model each output loss as:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p_j}\n\nParameters (20 total):\n    u (5):    unnormalized logits for domain-mixture weights w = softmax(u)\n    a (5):    output-specific biases\n    r (5):    log-scales so that b = exp(r) >= 0\n    v (5):    log-exponents so that p = exp(v) >= 0\n\nThis parameterization uses 20 parameters (\u2264 35), enforces positivity\nfor mixture weights, scales, and exponents, and shares the same\nmixture across all outputs for efficiency and cross-domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points))  # shape (N, 5)\n    prm = np.asarray(params).reshape(-1)\n    if prm.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {prm.size}\")\n\n    # 1) Mixture logits -> softmax weights\n    u = prm[0:5]                          # (5,)\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # (5,)\n\n    # 2) Output-specific parameters\n    a = prm[5:10]                         # bias terms, (5,)\n    r = prm[10:15]                        # log-scale terms\n    v = prm[15:20]                        # log-exponent terms\n\n    b = np.exp(r)                         # scale >= 0, (5,)\n    p = np.exp(v)                         # exponent >= 0, (5,)\n\n    # 3) Compute the mixture score for each sample\n    #    s_n = sum_i w_i * x_{n,i}\n    s = X.dot(w)                          # (N,)\n\n    # 4) Predict each output\n    #    y_{n,j} = a_j + b_j * s_n^{p_j}\n    # Broadcasting to (N, 5)\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p[None, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points))  # (N,5)\n    y = np.asarray(loss_values)\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    N, F = X.shape\n    if F != 5 or y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 domain proportions and 5 loss outputs\")\n\n    # Parameter vector length = 20\n    # Initialize:\n    #   u = 0           => uniform mixture weights\n    #   a = mean(y)     => bias approx\n    #   r = 0           => scale b = 1\n    #   v = 0           => exponent p = 1\n    mean_y = np.mean(y2d, axis=0)               # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v])  # (20,)\n\n    # Objective: mean squared error\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y2d) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(objective, init_params, method='L-BFGS-B')\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced multi-domain scaling law with combined power-law and linear terms.\n\nModel:\n    y_j = a_j + b_j * s^{p_j} + c_j * s\nwhere\n    s = sum_i w_i * x_i\nand\n    w = softmax(u)  (domain-mixture weights, shared across outputs)\n\nParameters (25 total):\n    u (5): unnormalized logits \u2192 mixture weights w (via softmax)\n    a (5): output biases\n    r (5): log-scales \u2192 b = exp(r) \u2265 0\n    v (5): log-exponents \u2192 p = exp(v) \u2265 0\n    c (5): linear coefficients for s\n\nThis formulation adds a linear term c_j * s to improve\nfit flexibility while staying parameter-efficient.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 5:\n        raise ValueError(f\"Expected input features with shape (*,5), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 25:\n        raise ValueError(f\"Expected 25 parameters, got {p.size}\")\n\n    # Unpack parameters\n    u = p[0:5]       # logits for mixture weights\n    a = p[5:10]      # biases\n    r = p[10:15]     # log-scales\n    v = p[15:20]     # log-exponents\n    c = p[20:25]     # linear coefficients\n\n    # Mixture weights via stable softmax\n    u_max = np.max(u)\n    exp_u = np.exp(u - u_max)\n    w = exp_u / np.sum(exp_u)             # shape (5,)\n\n    # Mixture score per sample\n    s = X.dot(w)                          # shape (N,)\n\n    # Positive scales and exponents\n    b = np.exp(r)                        # shape (5,)\n    pwr = np.exp(v)                      # shape (5,)\n\n    # Compute predictions\n    #   term1 = a_j\n    #   term2 = b_j * (s^p_j)\n    #   term3 = c_j * s\n    s_pow = np.power(s[:, None], pwr[None, :])   # shape (N,5)\n    linear = s[:, None] * c[None, :]             # shape (N,5)\n    Y = a[None, :] + b[None, :] * s_pow + linear\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 5:\n        raise ValueError(f\"Expected data_points shape (N,5), got {X.shape}\")\n    if y.ndim == 1:\n        y = y[:, None]\n    if y.shape != X.shape:\n        if y.ndim == 2 and y.shape[1] == 5:\n            pass\n        else:\n            raise ValueError(f\"Expected loss_values shape (N,5), got {y.shape}\")\n\n    # Initialize parameters\n    #   u = zeros \u2192 uniform mixture\n    #   a = mean loss per output\n    #   r = zeros \u2192 b = 1\n    #   v = zeros \u2192 p = 1\n    #   c = zeros \u2192 no initial linear term\n    mean_y = np.mean(y, axis=0)                  # (5,)\n    init_u = np.zeros(5)\n    init_a = mean_y.copy()\n    init_r = np.zeros(5)\n    init_v = np.zeros(5)\n    init_c = np.zeros(5)\n    init_params = np.concatenate([init_u, init_a, init_r, init_v, init_c])\n\n    # Bounds for stability\n    #   u, a: unbounded\n    #   r in [-5,5] \u2192 b \u2208 [exp(-5),exp(5)]\n    #   v in [-2,2] \u2192 p \u2208 [exp(-2),exp(2)]\n    #   c in [-10,10]\n    bounds = [(None, None)] * 5 + \\\n             [(None, None)] * 5 + \\\n             [(-5, 5)] * 5 + \\\n             [(-2, 2)] * 5 + \\\n             [(-10, 10)] * 5\n\n    # Mean Squared Error objective\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 5000, 'ftol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n# EVOLVE-BLOCK-END\n```"]}}}