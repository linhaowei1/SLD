{"id": "32feaef4-891a-4628-948e-1620bdb43537", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef _softmax(logits):\n    \"\"\"Stable softmax over 1D array.\"\"\"\n    z = logits - np.max(logits)\n    exp_z = np.exp(z)\n    return exp_z / np.sum(exp_z)\n\ndef _softplus(x):\n    \"\"\"Softplus for positive outputs: log(1 + exp(x)) to ensure positivity.\"\"\"\n    return np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n    \n    Model:\n        Let w = softmax(u) \u2208 \u0394\u2074 (u \u2208 \u211d\u2075),\n            a \u2208 \u211d\u2075 (bias),\n            b = exp(r) \u2208 \u211d\u2075\u208a (scale),\n            p = softplus(v) + \u03b5 \u2208 \u211d\u2075\u208a (exponents).\n        For each sample X[n,:] and each domain j:\n            s[n] = X[n,:] \u00b7 w\n            y_pred[n,j] = a[j] + b[j] * (s[n] + \u03b5)^{p[j]}\n    \n    Args:\n        data_points: array-like, shape (N,5)\n            Each row is a mixture of 5 domain proportions.\n        params: array-like, shape (20,)\n            Flat parameter vector [u(5), a(5), r(5), v(5)].\n    \n    Returns:\n        Y_pred: ndarray, shape (N,5)\n            Predicted loss values for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input with 5 features, got {F}\")\n    \n    p = np.ravel(params).astype(float)\n    if p.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {p.size}\")\n    \n    # unpack\n    u = p[0:5]    # mixture logits\n    a = p[5:10]   # biases\n    r = p[10:15]  # log-scales\n    v = p[15:20]  # log-exponents\n    \n    # transforms\n    w = _softmax(u)                     # mixture weights \u2208 simplex\n    b = np.exp(r)                       # scale \u2265 0\n    eps = 1e-6                          # numerical smoothing\n    p_exp = _softplus(v) + eps         # positive exponents\n    \n    # mixture score\n    s = X.dot(w)                        # (N,)\n    s = np.maximum(s, eps)              # guard against zero\n    \n    # compute predictions\n    # shape (N,1) broadcast with (1,5)\n    Y = a[np.newaxis, :] + b[np.newaxis, :] * np.power(s[:, np.newaxis], p_exp[np.newaxis, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 20 parameters of the scaling law by minimizing MSE.\n    \n    Args:\n        data_points: array-like, shape (N,5)\n        loss_values: array-like, shape (N,5)\n    \n    Returns:\n        params_opt: ndarray, shape (20,)\n            Optimized [u, a, r, v].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points (N,5) and loss_values (N,5)\")\n    \n    # initialize parameters\n    # u = 0 (uniform mixture), a = mean loss per domain, r = 0 (b=1), v = 0 (p\u22480.693 via softplus)\n    init = np.zeros(20, dtype=float)\n    init[5:10] = np.mean(Y, axis=0)\n    \n    # bounds: u,a free; r\u2208[-5,5]; v\u2208[-2,2]\n    bounds = []\n    for i in range(20):\n        if 10 <= i < 15:\n            bounds.append((-5.0, 5.0))\n        elif 15 <= i < 20:\n            bounds.append((-2.0, 2.0))\n        else:\n            bounds.append((None, None))\n    \n    # objective: mean squared error\n    def objective(params):\n        Y_pred = scaling_law_func(X, params)\n        return np.mean((Y_pred - Y) ** 2)\n    \n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    \n    if not result.success:\n        # fallback to initialization if optimization fails\n        return init\n    return result.x\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "036b0be7-196f-4251-8368-e79824b79f3f", "generation": 3, "timestamp": 1754716305.6933825, "iteration_found": 22, "metrics": {"nmse": 0.039739548033591504, "nmae": 0.16367720435506544, "r2": 0.9602604519664085, "combined_score": 0.9617793243425731}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.03641933229667162, "nmae": 0.1500079071206273, "r2": 0.9635806677033284, "combined_score": 0.964860427471989}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between domain mixture proportions and multi-domain loss values across different model sizes.\n\n**IMPORTANT: The scaling law function must use no more than 35 parameters.**\n\nFocus on mathematical accuracy across different model sizes, cross-domain generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Features: Domain proportions (5 domains) - array of shape (n_mixtures, 5)\n- Labels: Multi-domain losses (5 domains) - array of shape (n_mixtures, 5)\n- Model sizes: 70M, 160M, 410M, 1B (each is a separate group)\n- Domain proportions vary across different mixture configurations\n- Loss values vary per domain and mixture configuration\n- This is a multi-output regression problem where both inputs and outputs are multi-dimensional\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # proportions: Array of domain mixture proportions\n    # params: Array of up to 35 parameters\n    # Returns: Predicted multi-domain loss values (N,5)\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,5) array with domain proportions for 5 domains\n    # loss_values: Array of corresponding multi-domain losses (N,5)\n    # Returns: Optimized parameters (up to 35 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0364\n- nmae: 0.1500\n- r2: 0.9636\n- combined_score: 0.9649\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0364, nmae: 0.1500, r2: 0.9636, combined_score: 0.9649\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0184, nmae: 0.1369, r2: 0.9816, combined_score: 0.9820\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5297)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0184), Performs well on nmae (0.1369), Performs well on r2 (0.9816), Performs well on combined_score (0.9820)\n\n\n### Program 2 (Score: 0.5287)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified mixture-based power law with shared exponent.\n\nModel:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p}\n\nwhere\n    w = softmax(u) \u2208 \u0394^4   (5 logits \u2192 5 mixture weights)\n    b_j = exp(r_j) \u2265 0     (5 scale parameters)\n    p = exp(v) \u2265 0         (single shared exponent)\n    a_j \u2208 \u211d                (5 bias terms)\n\nTotal parameters = 5 (u) + 5 (a) + 5 (r) + 1 (v) = 16 \u2264 35\n\nThis compact form reduces over\u2010parameterization, improves\nnumerical stability via bounding r and v during optimization,\nand maintains strong cross\u2010domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef _softmax(logits):\n    \"\"\"Compute stable softmax over 1D array.\"\"\"\n    shifted = logits - np.max(logits)\n    exps = np.exp(shifted)\n    return exps / np.sum(exps)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses for given domain proportions.\n\n    Args:\n        data_points: array-like, shape (N, 5)\n            Each row is a mixture of 5 domain proportions.\n        params: array-like, shape (16,)\n            [u(5), a(5), r(5), v(1)]\n\n    Returns:\n        Y_pred: ndarray, shape (N, 5)\n            Predicted loss values for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    prm = np.ravel(params).astype(float)\n    if prm.size != 16:\n        raise ValueError(f\"Expected 16 parameters, got {prm.size}\")\n\n    # Unpack parameters\n    u = prm[0:5]       # logits for mixture weights\n    a = prm[5:10]      # biases for each output\n    r = prm[10:15]     # log\u2010scales\n    v = prm[15]        # log\u2010exponent (shared)\n\n    # Transform to valid domains\n    w = _softmax(u)          # mixture weights \u2208 \u0394^4\n    b = np.exp(r)            # scales \u2265 0\n    p = np.exp(v)            # exponent \u2265 0\n\n    # Mixture score per sample\n    s = X.dot(w)             # (N,)\n\n    # Predict: Y[n, j] = a_j + b_j * s[n]^p\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p)\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 16 parameters of the scaling law by minimizing MSE.\n\n    Args:\n        data_points: array-like, shape (N, 5)\n        loss_values: array-like, shape (N, 5)\n\n    Returns:\n        params_opt: ndarray, shape (16,)\n            Optimized parameters [u, a, r, v].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(\"Expected input with 5 domain proportions\")\n    y2d = y if y.ndim == 2 else y[:, None]\n    if y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 loss outputs\")\n\n    # Initialization:\n    #   u = 0     \u2192 uniform mixture\n    #   a = mean  \u2192 bias approx\n    #   r = 0     \u2192 scale b = 1\n    #   v = 0     \u2192 exponent p = 1\n    init = np.zeros(16, dtype=float)\n    init[5:10] = np.mean(y2d, axis=0)\n\n    # Bounds for robustness:\n    #   u[0:5], a[5:10]: unconstrained\n    #   r[10:15] \u2208 [-5, 5]   \u2192 b \u2208 [e\u207b\u2075, e\u2075]\n    #   v[15]    \u2208 [-2, 2]   \u2192 p \u2208 [e\u207b\u00b2, e\u00b2]\n    bounds = [(None, None)] * 16\n    for i in range(10, 15):\n        bounds[i] = (-5.0, 5.0)\n    bounds[15] = (-2.0, 2.0)\n\n    def objective(prm):\n        pred = scaling_law_func(X, prm)\n        return np.mean((pred - y2d) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0364), Performs well on nmae (0.1500), Performs well on r2 (0.9636), Performs well on combined_score (0.9649)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5297, Type: Experimental)\n```python\n\"\"\"\nScaling law discovery for LLM multi-domain loss prediction\nUsing a simple, parameter\u2010efficient linear mixture\u2010of\u2010experts model:\neach output loss is an affine combination of the five domain proportions.\nTotal parameters = 5\u00d75 (weights) + 5 (biases) = 30 \u2264 35.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n\n    Args:\n        data_points: array of shape (N,5) with domain proportions.\n        params:   flat array of length 30:\n                  - first 25 entries \u2192 weight matrix W of shape (5,5)\n                  - last 5 entries    \u2192 bias vector b of shape (5,)\n\n    Returns:\n        preds: array of shape (N,5), the predicted losses for each domain.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n\n    p = np.asarray(params).ravel()\n    assert p.size == 30, f\"Expected 30 parameters, got {p.size}\"\n\n    # unpack parameters\n    W = p[:25].reshape(5, 5)    # weight matrix\n    b = p[25:].reshape(1, 5)    # bias vector\n\n    # affine prediction\n    preds = X.dot(W) + b        # (N,5)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the linear mixture-of-experts scaling law via ridge\u2010regularized least squares.\n\n    Args:\n        data_points:  array of shape (N,5) with domain proportions.\n        loss_values:  array of shape (N,5) of observed multi-domain losses.\n\n    Returns:\n        params: flat array of length 30 (25 weights + 5 biases).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points))    # (N,5)\n    Y = np.atleast_2d(np.asarray(loss_values))    # (N,5)\n    N, F = X.shape\n    assert F == 5, f\"Expected 5 input features, got {F}\"\n    assert Y.shape[0] == N and Y.shape[1] == 5, \"Expected loss_values shape (N,5)\"\n\n    # augment inputs with constant bias term\n    X_aug = np.concatenate([X, np.ones((N, 1))], axis=1)  # (N,6)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = X_aug.T.dot(X_aug) + lam * np.eye(F + 1)           # (6,6)\n    B = X_aug.T.dot(Y)                                     # (6,5)\n\n    # solve for Theta in A @ Theta = B\n    Theta = np.linalg.solve(A, B)                         # (6,5)\n\n    # unpack into W and b\n    W = Theta[:F, :]    # (5,5)\n    b = Theta[F, :]     # (5,)\n\n    # flatten parameters\n    params = np.concatenate([W.ravel(), b])\n    return params\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified mixture-based power law with shared exponent.\n\nModel:\n    y_j = a_j + b_j * (sum_i w_i * x_i)^{p}\n\nwhere\n    w = softmax(u) \u2208 \u0394^4   (5 logits \u2192 5 mixture weights)\n    b_j = exp(r_j) \u2265 0     (5 scale parameters)\n    p = exp(v) \u2265 0         (single shared exponent)\n    a_j \u2208 \u211d                (5 bias terms)\n\nTotal parameters = 5 (u) + 5 (a) + 5 (r) + 1 (v) = 16 \u2264 35\n\nThis compact form reduces over\u2010parameterization, improves\nnumerical stability via bounding r and v during optimization,\nand maintains strong cross\u2010domain generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef _softmax(logits):\n    \"\"\"Compute stable softmax over 1D array.\"\"\"\n    shifted = logits - np.max(logits)\n    exps = np.exp(shifted)\n    return exps / np.sum(exps)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses for given domain proportions.\n\n    Args:\n        data_points: array-like, shape (N, 5)\n            Each row is a mixture of 5 domain proportions.\n        params: array-like, shape (16,)\n            [u(5), a(5), r(5), v(1)]\n\n    Returns:\n        Y_pred: ndarray, shape (N, 5)\n            Predicted loss values for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))  # (N,5)\n    prm = np.ravel(params).astype(float)\n    if prm.size != 16:\n        raise ValueError(f\"Expected 16 parameters, got {prm.size}\")\n\n    # Unpack parameters\n    u = prm[0:5]       # logits for mixture weights\n    a = prm[5:10]      # biases for each output\n    r = prm[10:15]     # log\u2010scales\n    v = prm[15]        # log\u2010exponent (shared)\n\n    # Transform to valid domains\n    w = _softmax(u)          # mixture weights \u2208 \u0394^4\n    b = np.exp(r)            # scales \u2265 0\n    p = np.exp(v)            # exponent \u2265 0\n\n    # Mixture score per sample\n    s = X.dot(w)             # (N,)\n\n    # Predict: Y[n, j] = a_j + b_j * s[n]^p\n    Y = a[None, :] + b[None, :] * np.power(s[:, None], p)\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 16 parameters of the scaling law by minimizing MSE.\n\n    Args:\n        data_points: array-like, shape (N, 5)\n        loss_values: array-like, shape (N, 5)\n\n    Returns:\n        params_opt: ndarray, shape (16,)\n            Optimized parameters [u, a, r, v].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float)\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(\"Expected input with 5 domain proportions\")\n    y2d = y if y.ndim == 2 else y[:, None]\n    if y2d.shape[1] != 5:\n        raise ValueError(\"Expected 5 loss outputs\")\n\n    # Initialization:\n    #   u = 0     \u2192 uniform mixture\n    #   a = mean  \u2192 bias approx\n    #   r = 0     \u2192 scale b = 1\n    #   v = 0     \u2192 exponent p = 1\n    init = np.zeros(16, dtype=float)\n    init[5:10] = np.mean(y2d, axis=0)\n\n    # Bounds for robustness:\n    #   u[0:5], a[5:10]: unconstrained\n    #   r[10:15] \u2208 [-5, 5]   \u2192 b \u2208 [e\u207b\u2075, e\u2075]\n    #   v[15]    \u2208 [-2, 2]   \u2192 p \u2208 [e\u207b\u00b2, e\u00b2]\n    bounds = [(None, None)] * 16\n    for i in range(10, 15):\n        bounds[i] = (-5.0, 5.0)\n    bounds[15] = (-2.0, 2.0)\n\n    def objective(prm):\n        pred = scaling_law_func(X, prm)\n        return np.mean((pred - y2d) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\ndef _softmax(logits):\n    \"\"\"Stable softmax over 1D array.\"\"\"\n    z = logits - np.max(logits)\n    exp_z = np.exp(z)\n    return exp_z / np.sum(exp_z)\n\ndef _softplus(x):\n    \"\"\"Softplus for positive outputs: log(1 + exp(x)) to ensure positivity.\"\"\"\n    return np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict multi-domain losses given domain mixture proportions.\n    \n    Model:\n        Let w = softmax(u) \u2208 \u0394\u2074 (u \u2208 \u211d\u2075),\n            a \u2208 \u211d\u2075 (bias),\n            b = exp(r) \u2208 \u211d\u2075\u208a (scale),\n            p = softplus(v) + \u03b5 \u2208 \u211d\u2075\u208a (exponents).\n        For each sample X[n,:] and each domain j:\n            s[n] = X[n,:] \u00b7 w\n            y_pred[n,j] = a[j] + b[j] * (s[n] + \u03b5)^{p[j]}\n    \n    Args:\n        data_points: array-like, shape (N,5)\n            Each row is a mixture of 5 domain proportions.\n        params: array-like, shape (20,)\n            Flat parameter vector [u(5), a(5), r(5), v(5)].\n    \n    Returns:\n        Y_pred: ndarray, shape (N,5)\n            Predicted loss values for each of the 5 domains.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    N, F = X.shape\n    if F != 5:\n        raise ValueError(f\"Expected input with 5 features, got {F}\")\n    \n    p = np.ravel(params).astype(float)\n    if p.size != 20:\n        raise ValueError(f\"Expected 20 parameters, got {p.size}\")\n    \n    # unpack\n    u = p[0:5]    # mixture logits\n    a = p[5:10]   # biases\n    r = p[10:15]  # log-scales\n    v = p[15:20]  # log-exponents\n    \n    # transforms\n    w = _softmax(u)                     # mixture weights \u2208 simplex\n    b = np.exp(r)                       # scale \u2265 0\n    eps = 1e-6                          # numerical smoothing\n    p_exp = _softplus(v) + eps         # positive exponents\n    \n    # mixture score\n    s = X.dot(w)                        # (N,)\n    s = np.maximum(s, eps)              # guard against zero\n    \n    # compute predictions\n    # shape (N,1) broadcast with (1,5)\n    Y = a[np.newaxis, :] + b[np.newaxis, :] * np.power(s[:, np.newaxis], p_exp[np.newaxis, :])\n    return Y\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 20 parameters of the scaling law by minimizing MSE.\n    \n    Args:\n        data_points: array-like, shape (N,5)\n        loss_values: array-like, shape (N,5)\n    \n    Returns:\n        params_opt: ndarray, shape (20,)\n            Optimized [u, a, r, v].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    Y = np.atleast_2d(np.asarray(loss_values, dtype=float))\n    N, F = X.shape\n    if F != 5 or Y.shape != (N, 5):\n        raise ValueError(\"Expected data_points (N,5) and loss_values (N,5)\")\n    \n    # initialize parameters\n    # u = 0 (uniform mixture), a = mean loss per domain, r = 0 (b=1), v = 0 (p\u22480.693 via softplus)\n    init = np.zeros(20, dtype=float)\n    init[5:10] = np.mean(Y, axis=0)\n    \n    # bounds: u,a free; r\u2208[-5,5]; v\u2208[-2,2]\n    bounds = []\n    for i in range(20):\n        if 10 <= i < 15:\n            bounds.append((-5.0, 5.0))\n        elif 15 <= i < 20:\n            bounds.append((-2.0, 2.0))\n        else:\n            bounds.append((None, None))\n    \n    # objective: mean squared error\n    def objective(params):\n        Y_pred = scaling_law_func(X, params)\n        return np.mean((Y_pred - Y) ** 2)\n    \n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 1000, 'ftol': 1e-9}\n    )\n    \n    if not result.success:\n        # fallback to initialization if optimization fails\n        return init\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of the improvements:\n- Introduced domain\u2010specific exponents `p_j` (via softplus) for each output, allowing flexible curvature per domain.\n- Kept parameter count to 20\u2009\u226a\u200935.\n- Added small epsilon and softplus for numerical stability when raising to a power.\n- Utilized an L-BFGS-B optimizer with sensible bounds on scale (`r`) and exponent (`v`) parameters to ensure stability.\n- Initialization leverages observed mean losses for a good starting bias and uniform mixture weights.\n- The form `y_j = a_j + b_j\u00b7(s+\u03b5)^{p_j}` supports non\u2010linear scaling while remaining parameter\u2010efficient."]}}}