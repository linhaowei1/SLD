{"id": "382913b7-1bcc-4640-af32-60dbbe5adf12", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law:\n      L(N) = B + A * (N + C)^(-alpha)\n    params are in log-domain: [ln A, ln alpha, ln C, ln B]\n    Ensures positivity of A, alpha, C, B by exponentiation.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of length 4 (log-domain parameters)\n    Returns:\n      preds: numpy array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Exponentiate to enforce positivity\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power-law\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law L(N) = B + A*(N+C)^(-alpha)\n    to observed (data_points, loss_values).\n    Returns optimized log-domain parameters [ln A, ln alpha, ln C, ln B].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Small floor to avoid zeros\n    eps = 1e-8\n\n    # Heuristic initial guesses in natural domain\n    B0     = max(np.min(y) * 0.9, eps)                  # floor near observed min loss\n    C0     = max(np.min(X) * 0.1, eps)                  # small horizontal shift\n    alpha0 = 0.5                                        # moderate decay exponent\n    # A0 such that at the smallest X, A*(X+C)^(-alpha) \u2248 (max(y)-B0)\n    A0     = max((np.max(y) - B0) * ((np.min(X) + C0) ** alpha0), eps)\n\n    # Pack into log-domain initial param vector\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residual vector\n    def _resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals wrt log-parameters\n    def _jac(p):\n        A     = np.exp(p[0])\n        alpha = np.exp(p[1])\n        C     = np.exp(p[2])\n        # B's derivative is constant\n        B     = np.exp(p[3])\n        Xc    = X + C\n        pow_t = Xc ** (-alpha)\n        log_t = np.log(Xc)\n        # Prepare Jacobian matrix (N\u00d74)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202(ln A) = \u2202L/\u2202A * \u2202A/\u2202(ln A) = pow_t * A\n        J[:, 0] = A * pow_t\n        # \u2202r/\u2202(ln alpha) = \u2202L/\u2202alpha * \u2202alpha/\u2202(ln alpha)\n        #                = A * (X+C)^(-alpha) * (-ln(X+C)) * alpha\n        J[:, 1] = -A * pow_t * log_t * alpha\n        # \u2202r/\u2202(ln C) = \u2202L/\u2202C * \u2202C/\u2202(ln C)\n        #           = A * (-alpha) * (X+C)^(-alpha-1) * C\n        J[:, 2] = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # \u2202r/\u2202(ln B) = \u2202L/\u2202B * \u2202B/\u2202(ln B) = B\n        J[:, 3] = B\n        return J\n\n    # Bound log-parameters for numerical stability\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Robust least\u2010squares fitting with soft L1 loss (smooth Huber)\n    result = least_squares(\n        _resid,\n        p0,\n        jac=_jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    # Return optimized log-parameters, or fallback to initial if failed\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b53a642e-eb28-4e1b-92b5-5b50af3908f2", "generation": 1, "timestamp": 1754719377.1625154, "iteration_found": 40, "metrics": {"nmse": 0.019234347214749824, "nmae": 0.11205416432036774, "r2": 0.9807656527852502, "combined_score": 0.9811286312443146}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 4.662698087872873, "nmae": 2.260332410527566, "r2": -3.662698087872873, "combined_score": 0.17659426380890428}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 4.6627\n- nmae: 2.2603\n- r2: -3.6627\n- combined_score: 0.1766\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5233)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n  L(N) = B + A * (N + C)^(-\u03b1)\nParameters are optimized in the log-domain for positivity.\nWe fit via a robust Huber-loss least-squares solver with\nan informed initialization from a quick log-log linear fit.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n    data_points: array-like of shape (N,) or (N,1)\n    params: array-like of 4 elements [pA, p\u03b1, pC, pB] in log-domain\n      A = exp(pA)    (amplitude)\n      \u03b1 = exp(p\u03b1)    (decay exponent)\n      C = exp(pC)    (horizontal offset)\n      B = exp(pB)    (asymptotic floor)\n    Returns: 1D numpy array of length N with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A = np.exp(p[0])\n    \u03b1 = np.exp(p[1])\n    C = np.exp(p[2])\n    B = np.exp(p[3])\n    # Compute model\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log\u2010domain params [pA, p\u03b1, pC, pB].\n    \"\"\"\n    # Flatten inputs\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    N = X.size\n\n    # 1) Good initial guess for B and C\n    B0 = max(np.min(y) * 0.9, 1e-6)\n    C0 = 1.0\n\n    # 2) Rough linear fit in log-log to get A and \u03b1\n    #    z \u2243 A*(X + C0)^(-\u03b1)  =>  log(z) \u2243 log(A) - \u03b1*log(X+C0)\n    z = y - B0\n    # ensure strictly positive\n    z = np.clip(z, 1e-8, None)\n    lx = np.log(X + C0)\n    ly = np.log(z)\n    # linear regression: ly = b0 + b1*lx\n    # If degenerate, fall back\n    try:\n        b1, b0 = np.polyfit(lx, ly, 1)  # b1*slope, b0*intercept\n    except Exception:\n        b1, b0 = -0.5, np.log(max(np.ptp(y), 1e-3))\n    \u03b10 = max(-b1, 1e-4)\n    A0 = max(np.exp(b0), 1e-6)\n\n    # Pack into log-domain initial\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals: model prediction minus observations\n    def _resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Jacobian of residuals wrt log\u2010params p = [pA,p\u03b1,pC,pB]\n    def _jac(p):\n        # unpack\n        pA, p\u03b1, pC, pB = p\n        A = np.exp(pA)\n        \u03b1 = np.exp(p\u03b1)\n        C = np.exp(pC)\n        # B not needed in jac for A,C,\u03b1 terms\n        Xc = X + C\n        # common factors\n        pow_term = Xc ** (-\u03b1)\n        log_Xc = np.log(Xc)\n        # derivatives\n        # d/dpA: \u2202Pred/\u2202A * dA/dpA = pow_term * A\n        dA = A * pow_term\n        # d/dp\u03b1: \u2202Pred/\u2202\u03b1 * d\u03b1/dp\u03b1 = A * (-log(Xc) * pow_term) * \u03b1\n        d\u03b1 = A * pow_term * (-log_Xc) * \u03b1\n        # d/dpC: \u2202Pred/\u2202C * dC/dpC = A * (-\u03b1 * Xc^(-\u03b1-1)) * C\n        dC = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # d/dpB: \u2202Pred/\u2202B * dB/dpB = B\n        B = np.exp(pB)\n        dB = np.full(N, B, dtype=float)\n        # stack into jacobian matrix N\u00d74\n        return np.vstack((dA, d\u03b1, dC, dB)).T\n\n    # Solve with robust Huber least\u2010squares\n    result = least_squares(\n        _resid,\n        p0,\n        jac=_jac,\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=5000,\n        verbose=0\n    )\n    # return optimized log\u2010params (or fallback to p0)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power-law scaling for LLM fine-tuning loss:\n   L(N) = B + A * (N + C)^(-\u03b1)\nParameters (all in log-domain for positivity):\n   params = [log A, log \u03b1, log C, log B]\nFitting uses a robust soft-L1 loss with analytic Jacobian.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values given data sizes and log-domain parameters.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes N\n      params:      array-like of 4 log-domain params [pA, p\u03b1, pC, pB]\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Exponentiate for positivity\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power-law\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law to (data_points, loss_values).\n    Returns optimized log-domain parameters [log A, log \u03b1, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic natural-domain initial guesses\n    B0     = max(np.min(y) * 0.9, 1e-8)                  # floor near min observed loss\n    C0     = max(np.min(X) * 0.1, 1e-8)                  # small horizontal shift\n    \u03b10     = 0.5                                        # moderate decay exponent\n    # Choose A0 so that at the smallest X: A*(X+C)^(-\u03b1) \u2248 (max(y)-B0)\n    A0     = max((np.max(y) - B0) * ( (np.min(X) + C0) ** \u03b10 ), 1e-8)\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residual function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of the residuals w.r.t. log-domain parameters\n    def jac(p):\n        A     = np.exp(p[0])\n        \u03b1     = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc    = X + C\n        pow_t = Xc ** (-\u03b1)\n        log_t = np.log(Xc)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202pA = A * (X+C)^(-\u03b1)\n        J[:, 0] = A * pow_t\n        # \u2202r/\u2202p\u03b1 = -A * (X+C)^(-\u03b1) * ln(X+C) * \u03b1\n        J[:, 1] = -A * pow_t * log_t * \u03b1\n        # \u2202r/\u2202pC = -A * \u03b1 * (X+C)^(-\u03b1-1) * C\n        J[:, 2] = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # \u2202r/\u2202pB = B\n        J[:, 3] = B\n        return J\n\n    # Bounds in log-domain to ensure stability\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Robust least-squares with soft L1 (= smooth Huber) loss\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=1000,\n        verbose=0\n    )\n\n    # Return optimized log-parameters, or fallback to p0 on failure\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 3 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5233, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n  L(N) = B + A * (N + C)^(-\u03b1)\nParameters are optimized in the log-domain for positivity.\nWe fit via a robust Huber-loss least-squares solver with\nan informed initialization from a quick log-log linear fit.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n    data_points: array-like of shape (N,) or (N,1)\n    params: array-like of 4 elements [pA, p\u03b1, pC, pB] in log-domain\n      A = exp(pA)    (amplitude)\n      \u03b1 = exp(p\u03b1)    (decay exponent)\n      C = exp(pC)    (horizontal offset)\n      B = exp(pB)    (asymptotic floor)\n    Returns: 1D numpy array of length N with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A = np.exp(p[0])\n    \u03b1 = np.exp(p[1])\n    C = np.exp(p[2])\n    B = np.exp(p[3])\n    # Compute model\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log\u2010domain params [pA, p\u03b1, pC, pB].\n    \"\"\"\n    # Flatten inputs\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    N = X.size\n\n    # 1) Good initial guess for B and C\n    B0 = max(np.min(y) * 0.9, 1e-6)\n    C0 = 1.0\n\n    # 2) Rough linear fit in log-log to get A and \u03b1\n    #    z \u2243 A*(X + C0)^(-\u03b1)  =>  log(z) \u2243 log(A) - \u03b1*log(X+C0)\n    z = y - B0\n    # ensure strictly positive\n    z = np.clip(z, 1e-8, None)\n    lx = np.log(X + C0)\n    ly = np.log(z)\n    # linear regression: ly = b0 + b1*lx\n    # If degenerate, fall back\n    try:\n        b1, b0 = np.polyfit(lx, ly, 1)  # b1*slope, b0*intercept\n    except Exception:\n        b1, b0 = -0.5, np.log(max(np.ptp(y), 1e-3))\n    \u03b10 = max(-b1, 1e-4)\n    A0 = max(np.exp(b0), 1e-6)\n\n    # Pack into log-domain initial\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals: model prediction minus observations\n    def _resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Jacobian of residuals wrt log\u2010params p = [pA,p\u03b1,pC,pB]\n    def _jac(p):\n        # unpack\n        pA, p\u03b1, pC, pB = p\n        A = np.exp(pA)\n        \u03b1 = np.exp(p\u03b1)\n        C = np.exp(pC)\n        # B not needed in jac for A,C,\u03b1 terms\n        Xc = X + C\n        # common factors\n        pow_term = Xc ** (-\u03b1)\n        log_Xc = np.log(Xc)\n        # derivatives\n        # d/dpA: \u2202Pred/\u2202A * dA/dpA = pow_term * A\n        dA = A * pow_term\n        # d/dp\u03b1: \u2202Pred/\u2202\u03b1 * d\u03b1/dp\u03b1 = A * (-log(Xc) * pow_term) * \u03b1\n        d\u03b1 = A * pow_term * (-log_Xc) * \u03b1\n        # d/dpC: \u2202Pred/\u2202C * dC/dpC = A * (-\u03b1 * Xc^(-\u03b1-1)) * C\n        dC = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # d/dpB: \u2202Pred/\u2202B * dB/dpB = B\n        B = np.exp(pB)\n        dB = np.full(N, B, dtype=float)\n        # stack into jacobian matrix N\u00d74\n        return np.vstack((dA, d\u03b1, dC, dB)).T\n\n    # Solve with robust Huber least\u2010squares\n    result = least_squares(\n        _resid,\n        p0,\n        jac=_jac,\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=5000,\n        verbose=0\n    )\n    # return optimized log\u2010params (or fallback to p0)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.8367, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.333), Excellent nmae (2.159)\n\n\n### Inspiration 3 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power-law scaling for LLM fine-tuning loss:\n   L(N) = B + A * (N + C)^(-\u03b1)\nParameters (all in log-domain for positivity):\n   params = [log A, log \u03b1, log C, log B]\nFitting uses a robust soft-L1 loss with analytic Jacobian.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values given data sizes and log-domain parameters.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes N\n      params:      array-like of 4 log-domain params [pA, p\u03b1, pC, pB]\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Exponentiate for positivity\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power-law\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law to (data_points, loss_values).\n    Returns optimized log-domain parameters [log A, log \u03b1, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic natural-domain initial guesses\n    B0     = max(np.min(y) * 0.9, 1e-8)                  # floor near min observed loss\n    C0     = max(np.min(X) * 0.1, 1e-8)                  # small horizontal shift\n    \u03b10     = 0.5                                        # moderate decay exponent\n    # Choose A0 so that at the smallest X: A*(X+C)^(-\u03b1) \u2248 (max(y)-B0)\n    A0     = max((np.max(y) - B0) * ( (np.min(X) + C0) ** \u03b10 ), 1e-8)\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residual function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of the residuals w.r.t. log-domain parameters\n    def jac(p):\n        A     = np.exp(p[0])\n        \u03b1     = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc    = X + C\n        pow_t = Xc ** (-\u03b1)\n        log_t = np.log(Xc)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202pA = A * (X+C)^(-\u03b1)\n        J[:, 0] = A * pow_t\n        # \u2202r/\u2202p\u03b1 = -A * (X+C)^(-\u03b1) * ln(X+C) * \u03b1\n        J[:, 1] = -A * pow_t * log_t * \u03b1\n        # \u2202r/\u2202pC = -A * \u03b1 * (X+C)^(-\u03b1-1) * C\n        J[:, 2] = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # \u2202r/\u2202pB = B\n        J[:, 3] = B\n        return J\n\n    # Bounds in log-domain to ensure stability\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Robust least-squares with soft L1 (= smooth Huber) loss\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=1000,\n        verbose=0\n    )\n\n    # Return optimized log-parameters, or fallback to p0 on failure\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss L(D) = c + A * (D + d0)^(-alpha)\n    params: [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # compute shifted power law\n    return c + A * np.power(D + d0, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guesses\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = max(1e-3, np.max(y) - np.min(y))\n    alpha0 = 0.5\n    d0_0   = max(1e-3, np.min(D) * 0.5)\n    p0 = [c0, A0, alpha0, d0_0]\n\n    # 2) Bounds\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [\n        np.max(y) * 2.0,\n        (np.max(y) - np.min(y)) * 10.0 + 1.0,\n        10.0,\n        np.max(D) * 5.0\n    ]\n\n    # 3) Wrapped model for curve_fit\n    def _model(D, c, A, alpha, d0):\n        return c + A * np.power(D + d0, -alpha)\n\n    # 4) Fit with bounded least squares\n    popt, _ = curve_fit(\n        _model,\n        D,\n        y,\n        p0=p0,\n        bounds=(lower, upper),\n        maxfev=2000\n    )\n\n    return popt\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5243, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law:\n      L(N) = B + A * (N + C)^(-alpha)\n    params are in log-domain: [ln A, ln alpha, ln C, ln B]\n    Ensures positivity of A, alpha, C, B by exponentiation.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of length 4 (log-domain parameters)\n    Returns:\n      preds: numpy array of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Exponentiate to enforce positivity\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power-law\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law L(N) = B + A*(N+C)^(-alpha)\n    to observed (data_points, loss_values).\n    Returns optimized log-domain parameters [ln A, ln alpha, ln C, ln B].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Small floor to avoid zeros\n    eps = 1e-8\n\n    # Heuristic initial guesses in natural domain\n    B0     = max(np.min(y) * 0.9, eps)                  # floor near observed min loss\n    C0     = max(np.min(X) * 0.1, eps)                  # small horizontal shift\n    alpha0 = 0.5                                        # moderate decay exponent\n    # A0 such that at the smallest X, A*(X+C)^(-alpha) \u2248 (max(y)-B0)\n    A0     = max((np.max(y) - B0) * ((np.min(X) + C0) ** alpha0), eps)\n\n    # Pack into log-domain initial param vector\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residual vector\n    def _resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals wrt log-parameters\n    def _jac(p):\n        A     = np.exp(p[0])\n        alpha = np.exp(p[1])\n        C     = np.exp(p[2])\n        # B's derivative is constant\n        B     = np.exp(p[3])\n        Xc    = X + C\n        pow_t = Xc ** (-alpha)\n        log_t = np.log(Xc)\n        # Prepare Jacobian matrix (N\u00d74)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202(ln A) = \u2202L/\u2202A * \u2202A/\u2202(ln A) = pow_t * A\n        J[:, 0] = A * pow_t\n        # \u2202r/\u2202(ln alpha) = \u2202L/\u2202alpha * \u2202alpha/\u2202(ln alpha)\n        #                = A * (X+C)^(-alpha) * (-ln(X+C)) * alpha\n        J[:, 1] = -A * pow_t * log_t * alpha\n        # \u2202r/\u2202(ln C) = \u2202L/\u2202C * \u2202C/\u2202(ln C)\n        #           = A * (-alpha) * (X+C)^(-alpha-1) * C\n        J[:, 2] = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # \u2202r/\u2202(ln B) = \u2202L/\u2202B * \u2202B/\u2202(ln B) = B\n        J[:, 3] = B\n        return J\n\n    # Bound log-parameters for numerical stability\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Robust least\u2010squares fitting with soft L1 loss (smooth Huber)\n    result = least_squares(\n        _resid,\n        p0,\n        jac=_jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=1.0,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    # Return optimized log-parameters, or fallback to initial if failed\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}