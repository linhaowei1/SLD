{"id": "b7a70fdb-2576-4537-97a7-c2362a4a3168", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Four-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      array-like [B, A, C, alpha], all \u2265 0\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # ensure numerical stability: shift inside power positive\n    Xc = np.maximum(N + C, 1e-12)\n    return B + A * Xc**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law L(N)=B + A*(N + C)^(-alpha)\n    via weighted least-squares to balance small- and large-N fits.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0 = max(0.0, 0.9 * np.min(y))\n    A0 = max(1e-6, np.max(y) - np.min(y))\n    C0 = max(1e-6, 0.5 * np.median(X))\n    # rough exponent from log-log slope\n    z = np.clip(y - B0, 1e-8, None)\n    lx, ly = np.log(X + C0), np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n        alpha0 = max(1e-3, -slope)\n        A0    = max(1e-6, np.exp(intercept))\n    except Exception:\n        alpha0 = 0.5\n\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: B\u2208[0, max(y)], A,C,alpha \u22650\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.max(y), np.inf, np.inf, np.inf]\n\n    # Weight exponent to emphasize small-N fitting\n    eta = 0.25\n    w = 1.0 / ((X + C0) ** eta)\n\n    def resid(p):\n        B, A, C, alpha = p\n        preds = scaling_law_func(X, p)\n        return (preds - y) * w\n\n    def jac(p):\n        B, A, C, alpha = p\n        Xc = np.maximum(X + C, 1e-12)\n        # \u2202L/\u2202B = 1\n        dB = np.ones_like(X)\n        # \u2202L/\u2202A = Xc^(-alpha)\n        dA = Xc**(-alpha)\n        # \u2202L/\u2202C = -A*alpha*Xc^(-alpha-1)\n        dC = -A * alpha * Xc**(-alpha - 1)\n        # \u2202L/\u2202alpha = -A * Xc^(-alpha) * log(Xc)\n        d\u03b1 = -A * Xc**(-alpha) * np.log(Xc)\n        # apply weights\n        return np.vstack([dB*w, dA*w, dC*w, d\u03b1*w]).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x if result.success else x0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3e0d840c-fcdd-4489-8d66-9f04cf75f2c1", "generation": 3, "timestamp": 1754719327.4809206, "iteration_found": 36, "metrics": {"nmse": 0.05761094371360235, "nmae": 0.19542549535641113, "r2": 0.9423890562863977, "combined_score": 0.945527281032747}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.019225936306023962, "nmae": 0.11205796655829706, "r2": 0.980774063693976, "combined_score": 0.981136727764499}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0192\n- nmae: 0.1121\n- r2: 0.9808\n- combined_score: 0.9811\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0191, nmae: 0.1113, r2: 0.9809, combined_score: 0.9812\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5231)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling-law for LLM fine-tuning:\n    L(N) = B + A * (N + C)^(-\u03b1)\nParameters (A, \u03b1, C, B) are enforced positive via exp\u2010reparameterization\n(p = [log A, log \u03b1, log C, log B]). We use L-BFGS-B with sensible bounds\nand data-driven initial guesses for robustness and stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 entries [pA, p\u03b1, pC, pB] in log-domain\n    Returns:\n      preds:       ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n    # Reconstruct positive-valued parameters\n    A     = np.exp(p[0])    # amplitude\n    alpha = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute prediction\n    return B + A * np.power(X + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    Returns optimized log-domain parameters [log A, log \u03b1, log C, log B].\n    \"\"\"\n    # Prepare 1D float arrays\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    # Sort by X for stable slope estimation\n    idx = np.argsort(X)\n    Xs, ys = X[idx], y[idx]\n    y_min, y_max = ys.min(), ys.max()\n\n    # Initial guess: amplitude ~ range, floor ~ 0.9*min, shift ~ geometric mean\n    A0 = max(y_max - y_min, 1e-2)\n    B0 = max(0.9 * y_min, 1e-3)\n    # geometric mean for shift\n    C0 = np.exp(np.mean(np.log(np.clip(Xs, 1e-8, None))))\n    # estimate exponent \u03b1 from endpoint slope in log\u2013log space\n    if ys[0] > B0 and ys[-1] > B0 and Xs[0] != Xs[-1]:\n        y_adj0 = ys[0] - B0\n        y_adj1 = ys[-1] - B0\n        try:\n            slope = - (np.log(y_adj1) - np.log(y_adj0)) / (np.log(Xs[-1] + C0) - np.log(Xs[0] + C0))\n            alpha0 = float(np.clip(slope, 1e-3, 10.0))\n        except Exception:\n            alpha0 = 0.5\n    else:\n        alpha0 = 0.5\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Objective: mean squared error\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Bounds on log-parameters to avoid extreme values\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log \u03b1\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    # Optimize with L-BFGS-B\n    result = minimize(\n        _mse,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-10, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    # Return optimized or fallback to initial\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0191), Performs well on nmae (0.1113), Performs well on r2 (0.9809), Performs well on combined_score (0.9812)\n\n\n### Program 2 (Score: 0.5233)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Four\u2010parameter shifted power law in log\u2010domain:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    params = [log A, log \u03b1, log C, log B]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A, \u03b1, C, B = np.exp(p)\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 4\u2010parameter model via a robust Huber least\u2010squares.\n    Returns optimized [log A, log \u03b1, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initialize B (floor) and C (shift)\n    B0 = max(np.min(y) * 0.9, 1e-6)\n    C0 = 1.0\n\n    # 2) Rough log\u2010log linear fit for A, \u03b1 on z = y - B0\n    z = np.clip(y - B0, 1e-8, None)\n    lx, ly = np.log(X + C0), np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n    except Exception:\n        slope, intercept = -0.5, np.log(np.ptp(y) or 1e-3)\n    \u03b10 = max(-slope, 1e-3)\n    A0 = max(np.exp(intercept), 1e-3)\n\n    # 3) Pack into log\u2010domain initial guess\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals: model minus observed\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals wrt log\u2010params\n    def jac(p):\n        pA, p\u03b1, pC, pB = p\n        A, \u03b1, C = np.exp(pA), np.exp(p\u03b1), np.exp(pC)\n        Xc = X + C\n        pow_t = Xc ** (-\u03b1)\n        # d/dpA\n        dA = A * pow_t\n        # d/dp\u03b1\n        d\u03b1 = dA * (-np.log(Xc)) * \u03b1\n        # d/dpC\n        dC = -A * \u03b1 * Xc ** (-\u03b1 - 1) * C\n        # d/dpB\n        dB = np.full_like(X, np.exp(pB))\n        return np.vstack((dA, d\u03b1, dC, dB)).T\n\n    # 4) Solve with robust Huber\u2010loss least\u2010squares\n    result = least_squares(\n        resid, p0, jac=jac,\n        loss='huber', f_scale=1.0,\n        xtol=1e-9, ftol=1e-9, max_nfev=2000\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 3 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5249)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRefined 4-parameter shifted power law:\n  L(D) = c + A * (D + d0)^(-alpha)\nParameters:\n  c     : asymptotic minimum loss\n  A     : amplitude\n  alpha : decay exponent (>0)\n  d0    : data-size shift (>=0) for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 scaling-law parameters.\n    data_points: array-like, shape (N,1) or (N,)\n    params:      array-like, length=4 -> [c, A, alpha, d0]\n    returns:     array of length N\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (D, L) via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)  # max(y)-min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, 0.5 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Reasonable bounds for stability\n    lower = [0.0,        0.0,     0.0,     0.0]\n    upper = [2*np.max(y), 10*A0+1, 10.0,  5*np.max(D)]\n\n    # Residuals = model - observed\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytic Jacobian for speed & stability\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift ** (-alpha)\n        logD    = np.log(D_shift)\n        # \u2202L/\u2202c = 1\n        # \u2202L/\u2202A = D_shift^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(D_shift) * D_shift^(-alpha)\n        # \u2202L/\u2202d0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack([\n            np.ones_like(D),\n            denom,\n            -A * logD * denom,\n            -A * alpha * D_shift ** (-alpha - 1)\n        ]).T\n\n    # Solve bounded least-squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5352)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law:\n      L(N) = B + A * (N + C)^(-alpha)\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      iterable of 4 non-negative numbers [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure numerical stability: N + C always \u2265 small positive\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter law L(N)=B + A*(N + C)^(-alpha)\n    via bounded nonlinear least-squares with a simple weighting\n    to balance errors across small and large N.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: optimized array [B, A, C, alpha]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0 = max(0.0, np.min(y) * 0.9)\n    A0 = max(1e-6, np.max(y) - np.min(y))\n    C0 = max(1.0, np.median(X) * 0.5)\n    alpha0 = 0.5\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters \u2265 0; B \u2264 max(y)\n    lower_bounds = [0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.max(y), np.inf, np.inf, np.inf]\n\n    # Residual function with simple weighting:\n    #   weight small-N errors more heavily to avoid under-fitting at low data sizes\n    def residuals(p):\n        pred = scaling_law_func(X, p)\n        # small\u2010N get higher weight: w = 1 / (N + C0)^(0.25)\n        w = 1.0 / np.power(X + C0, 0.25)\n        return (pred - y) * w\n\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower_bounds, upper_bounds),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5231, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling-law for LLM fine-tuning:\n    L(N) = B + A * (N + C)^(-\u03b1)\nParameters (A, \u03b1, C, B) are enforced positive via exp\u2010reparameterization\n(p = [log A, log \u03b1, log C, log B]). We use L-BFGS-B with sensible bounds\nand data-driven initial guesses for robustness and stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 entries [pA, p\u03b1, pC, pB] in log-domain\n    Returns:\n      preds:       ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n    # Reconstruct positive-valued parameters\n    A     = np.exp(p[0])    # amplitude\n    alpha = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute prediction\n    return B + A * np.power(X + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    Returns optimized log-domain parameters [log A, log \u03b1, log C, log B].\n    \"\"\"\n    # Prepare 1D float arrays\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    # Sort by X for stable slope estimation\n    idx = np.argsort(X)\n    Xs, ys = X[idx], y[idx]\n    y_min, y_max = ys.min(), ys.max()\n\n    # Initial guess: amplitude ~ range, floor ~ 0.9*min, shift ~ geometric mean\n    A0 = max(y_max - y_min, 1e-2)\n    B0 = max(0.9 * y_min, 1e-3)\n    # geometric mean for shift\n    C0 = np.exp(np.mean(np.log(np.clip(Xs, 1e-8, None))))\n    # estimate exponent \u03b1 from endpoint slope in log\u2013log space\n    if ys[0] > B0 and ys[-1] > B0 and Xs[0] != Xs[-1]:\n        y_adj0 = ys[0] - B0\n        y_adj1 = ys[-1] - B0\n        try:\n            slope = - (np.log(y_adj1) - np.log(y_adj0)) / (np.log(Xs[-1] + C0) - np.log(Xs[0] + C0))\n            alpha0 = float(np.clip(slope, 1e-3, 10.0))\n        except Exception:\n            alpha0 = 0.5\n    else:\n        alpha0 = 0.5\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Objective: mean squared error\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Bounds on log-parameters to avoid extreme values\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log \u03b1\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    # Optimize with L-BFGS-B\n    result = minimize(\n        _mse,\n        p0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-10, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    # Return optimized or fallback to initial\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5352, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law:\n      L(N) = B + A * (N + C)^(-alpha)\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      iterable of 4 non-negative numbers [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure numerical stability: N + C always \u2265 small positive\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter law L(N)=B + A*(N + C)^(-alpha)\n    via bounded nonlinear least-squares with a simple weighting\n    to balance errors across small and large N.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: optimized array [B, A, C, alpha]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0 = max(0.0, np.min(y) * 0.9)\n    A0 = max(1e-6, np.max(y) - np.min(y))\n    C0 = max(1.0, np.median(X) * 0.5)\n    alpha0 = 0.5\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters \u2265 0; B \u2264 max(y)\n    lower_bounds = [0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.max(y), np.inf, np.inf, np.inf]\n\n    # Residual function with simple weighting:\n    #   weight small-N errors more heavily to avoid under-fitting at low data sizes\n    def residuals(p):\n        pred = scaling_law_func(X, p)\n        # small\u2010N get higher weight: w = 1 / (N + C0)^(0.25)\n        w = 1.0 / np.power(X + C0, 0.25)\n        return (pred - y) * w\n\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower_bounds, upper_bounds),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Four\u2010parameter shifted power law in log\u2010domain:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    params = [log A, log \u03b1, log C, log B]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A, \u03b1, C, B = np.exp(p)\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the above 4\u2010parameter model via a robust Huber least\u2010squares.\n    Returns optimized [log A, log \u03b1, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initialize B (floor) and C (shift)\n    B0 = max(np.min(y) * 0.9, 1e-6)\n    C0 = 1.0\n\n    # 2) Rough log\u2010log linear fit for A, \u03b1 on z = y - B0\n    z = np.clip(y - B0, 1e-8, None)\n    lx, ly = np.log(X + C0), np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n    except Exception:\n        slope, intercept = -0.5, np.log(np.ptp(y) or 1e-3)\n    \u03b10 = max(-slope, 1e-3)\n    A0 = max(np.exp(intercept), 1e-3)\n\n    # 3) Pack into log\u2010domain initial guess\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals: model minus observed\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals wrt log\u2010params\n    def jac(p):\n        pA, p\u03b1, pC, pB = p\n        A, \u03b1, C = np.exp(pA), np.exp(p\u03b1), np.exp(pC)\n        Xc = X + C\n        pow_t = Xc ** (-\u03b1)\n        # d/dpA\n        dA = A * pow_t\n        # d/dp\u03b1\n        d\u03b1 = dA * (-np.log(Xc)) * \u03b1\n        # d/dpC\n        dC = -A * \u03b1 * Xc ** (-\u03b1 - 1) * C\n        # d/dpB\n        dB = np.full_like(X, np.exp(pB))\n        return np.vstack((dA, d\u03b1, dC, dB)).T\n\n    # 4) Solve with robust Huber\u2010loss least\u2010squares\n    result = least_squares(\n        resid, p0, jac=jac,\n        loss='huber', f_scale=1.0,\n        xtol=1e-9, ftol=1e-9, max_nfev=2000\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Four-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      array-like [B, A, C, alpha], all \u2265 0\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # ensure numerical stability: shift inside power positive\n    Xc = np.maximum(N + C, 1e-12)\n    return B + A * Xc**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law L(N)=B + A*(N + C)^(-alpha)\n    via weighted least-squares to balance small- and large-N fits.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0 = max(0.0, 0.9 * np.min(y))\n    A0 = max(1e-6, np.max(y) - np.min(y))\n    C0 = max(1e-6, 0.5 * np.median(X))\n    # rough exponent from log-log slope\n    z = np.clip(y - B0, 1e-8, None)\n    lx, ly = np.log(X + C0), np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n        alpha0 = max(1e-3, -slope)\n        A0    = max(1e-6, np.exp(intercept))\n    except Exception:\n        alpha0 = 0.5\n\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: B\u2208[0, max(y)], A,C,alpha \u22650\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.max(y), np.inf, np.inf, np.inf]\n\n    # Weight exponent to emphasize small-N fitting\n    eta = 0.25\n    w = 1.0 / ((X + C0) ** eta)\n\n    def resid(p):\n        B, A, C, alpha = p\n        preds = scaling_law_func(X, p)\n        return (preds - y) * w\n\n    def jac(p):\n        B, A, C, alpha = p\n        Xc = np.maximum(X + C, 1e-12)\n        # \u2202L/\u2202B = 1\n        dB = np.ones_like(X)\n        # \u2202L/\u2202A = Xc^(-alpha)\n        dA = Xc**(-alpha)\n        # \u2202L/\u2202C = -A*alpha*Xc^(-alpha-1)\n        dC = -A * alpha * Xc**(-alpha - 1)\n        # \u2202L/\u2202alpha = -A * Xc^(-alpha) * log(Xc)\n        d\u03b1 = -A * Xc**(-alpha) * np.log(Xc)\n        # apply weights\n        return np.vstack([dB*w, dA*w, dC*w, d\u03b1*w]).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x if result.success else x0\n# EVOLVE-BLOCK-END\n```"]}}}