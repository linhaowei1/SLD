{"id": "e8de77d8-dbce-4387-92c8-8919aeedaf61", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law in log-domain:\n        L(N) = B + A * (N + C)^(-alpha)\n    params = [logA, log_alpha, logC, logB]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel().astype(float)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct strictly positive values\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law\n    to (data_points, loss_values) by minimizing weighted\n    least squares of the *relative* residuals:\n      r_i = (L_pred(N_i) - y_i) / y_i\n    Returns optimized log-domain params [logA, log_alpha, logC, logB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    if X.shape != y.shape:\n        raise ValueError(\"data_points and loss_values must have the same shape\")\n\n    # Heuristic initial guesses in the natural domain\n    y_min, y_max = y.min(), y.max()\n    N_min = X.min()\n    B0 = max(0.8 * y_min, 1e-8)        # asymptotic floor just below observed min\n    C0 = max(0.1 * N_min, 1e-8)       # small horizontal shift\n    alpha0 = 0.5                      # moderate decay\n    A0 = max((y_max - B0) * ( (N_min + C0) ** alpha0 ), 1e-8)\n\n    # Pack into log-domain for positivity\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def residual(p):\n        # Weighted by 1/y to emphasize relative error\n        return (scaling_law_func(X, p) - y) / y\n\n    def jac(p):\n        # Analytic Jacobian of the residuals w.r.t. log-domain params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        pow_t = Xc ** (-alpha)\n        ln_t = np.log(Xc)\n        # \u2202L/\u2202logA = A * Xc^{-\u03b1}\n        J0 = A * pow_t\n        # \u2202L/\u2202log_alpha = -A * Xc^{-\u03b1} * ln(Xc) * \u03b1\n        J1 = -A * pow_t * ln_t * alpha\n        # \u2202L/\u2202logC = -A * \u03b1 * Xc^{-\u03b1-1} * C\n        J2 = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # \u2202L/\u2202logB = B\n        J3 = B * np.ones_like(X)\n        J = np.vstack([J0, J1, J2, J3]).T\n        # convert dL/dp \u2192 d((L - y)/y)/dp\n        return J / y[:, None]\n\n    # Bounds in log-domain to prevent runaway\n    lower = [-50, -5, -50, -50]\n    upper = [ 50, 10,  50,  50]\n\n    result = least_squares(\n        residual,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "aad40c1d-e109-4665-be52-496c81725ee5", "generation": 2, "timestamp": 1754719424.3003619, "iteration_found": 47, "metrics": {"nmse": 0.011946724334071537, "nmae": 0.09126344276139477, "r2": 0.9880532756659285, "combined_score": 0.9881943149310223}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.01976555918031745, "nmae": 0.11662438240937405, "r2": 0.9802344408196826, "combined_score": 0.9806175458639681}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0198\n- nmae: 0.1166\n- r2: 0.9802\n- combined_score: 0.9806\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0191, nmae: 0.1112, r2: 0.9809, combined_score: 0.9812\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0119, nmae: 0.0913, r2: 0.9881, combined_score: 0.9882\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5199)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4\u2010parameter shifted power law:\n       L(N) = B + A * (N + C)^(-alpha)\n    All parameters are stored in log\u2010domain for positivity:\n       params = [log_A, log_alpha, log_C, log_B]\n    Inputs:\n      data_points: shape (N,) or (N,1) array of dataset sizes\n      params:      length\u20104 array of log\u2010domain parameters\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel().astype(float)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter shifted power law to (data_points, loss_values)\n    by minimizing the weighted least\u2010squares of relative residuals:\n       r_i = (pred_i - y_i) / y_i\n    Returns length\u20104 array of optimized log\u2010domain parameters\n       [log_A, log_alpha, log_C, log_B]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    if X.shape != y.shape:\n        raise ValueError(\"data_points and loss_values must have the same shape\")\n\n    # Heuristic initial guess in natural domain\n    y_min, y_max = y.min(), y.max()\n    N_min = X.min()\n\n    # Floor B0 slightly below min(y)\n    B0 = max(0.8 * y_min, 1e-8)\n    # Horizontal shift C0 = 10% of smallest dataset size\n    C0 = max(0.1 * N_min, 1e-8)\n    # Decay exponent\n    alpha0 = 0.5\n    # Amplitude so that at N_min: A*(N_min+C0)^(-alpha0) \u2248 y_max - B0\n    A0 = max((y_max - B0) * ( (N_min + C0) ** alpha0 ), 1e-8)\n\n    # Pack log\u2010domain initial guess\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residual vector: weighted by 1/y to emphasize relative error\n    def residual(p):\n        pred = scaling_law_func(X, p)\n        return (pred - y) / y\n\n    # Analytic Jacobian of the residuals\n    def jacobian(p):\n        # Unpack positive parameters\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Common terms\n        pow_t = Xc ** (-alpha)\n        ln_t  = np.log(Xc)\n        # dpred/dlogA =     A * Xc^{-alpha}\n        J0 = A * pow_t\n        # dpred/dlog_alpha = d/dalpha[ A Xc^{-alpha} ] * alpha\n        #                   = -A * Xc^{-alpha} * ln(Xc) * alpha\n        J1 = -A * pow_t * ln_t * alpha\n        # dpred/dlogC = d/dC[ A * Xc^{-alpha} ] * C\n        #            = -A * alpha * Xc^{-alpha-1} * C\n        J2 = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # dpred/dlogB =     B\n        J3 = B * np.ones_like(X)\n\n        # Stack into (N,4), then divide each column by y for weighted residual Jacobian\n        # i.e. d((pred - y)/y)/dlogP = (dpred/dlogP) / y\n        J = np.vstack([J0, J1, J2, J3]).T\n        return J / y[:, None]\n\n    # Use bounded least squares in log\u2010domain\n    # Reasonable bounds to keep parameters positive and finite\n    lower = [-50, -5, -50, -50]\n    upper = [ 50,  10,  50,  50]\n\n    result = least_squares(\n        residual,\n        p0,\n        jac=jacobian,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    # Return optimized log parameters, or fallback to p0\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0119), Performs well on nmae (0.0913), Performs well on r2 (0.9881), Performs well on combined_score (0.9882)\n\n\n### Program 2 (Score: 0.5231)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss using a 4-parameter shifted power law in log-domain:\n      L(N) = B + A * (N + C)^(-alpha)\n    where params = [logA, log\u03b1, logC, logB].\n    \"\"\"\n    # Flatten inputs\n    D = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct strictly positive parameters\n    A     = np.exp(p[0])    # amplitude\n    alpha = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute predictions\n    return B + A * (D + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized params in log-domain [logA, log\u03b1, logC, logB].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses in the natural domain\n    y_min, y_max = y.min(), y.max()\n    A0     = max(y_max - y_min, 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(D), 1.0)\n    B0     = max(y_min, 1e-3)\n\n    # Switch to log-domain to enforce positivity\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Mean squared error objective in log-domain\n    def _objective(p):\n        pred = scaling_law_func(D, p)\n        return np.mean((pred - y) ** 2)\n\n    # Optimize with L-BFGS-B for robustness\n    result = minimize(\n        _objective,\n        p0,\n        method='L-BFGS-B',\n        options={\n            'ftol': 1e-10,\n            'gtol': 1e-08,\n            'maxiter': 5000\n        }\n    )\n\n    # Return best log-domain parameters (or initial if convergence failed)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0191), Performs well on nmae (0.1112), Performs well on r2 (0.9809), Performs well on combined_score (0.9812)\n\n\n### Program 3 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A * (N + C)^(-alpha)\n    using 4 log-domain parameters p = [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points (N,) and loss_values (N,).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    y = np.asarray(loss_values).ravel()\n    N = X.size\n\n    # Initial guess in natural domain\n    A0     = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X), 1.0)\n    B0     = max(y.min(), 1e-3)\n    p0      = np.log([A0, alpha0, C0, B0])\n\n    # Pre-allocate to avoid re-alloc inside gradient\n    def obj_and_grad(p):\n        # Unpack params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Predictions and residual\n        pred = B + A * Xc**(-alpha)\n        diff = pred - y\n        # Objective: MSE\n        loss = np.mean(diff**2)\n\n        # Compute Jacobian dpred/dp_i\n        # dpred/dp0 = (Xc^(-alpha)) * A\n        # dpred/dp1 = -A * Xc^(-alpha) * ln(Xc) * alpha\n        # dpred/dp2 = -A * alpha * Xc^(-alpha-1) * C\n        # dpred/dp3 = B\n        j0 = A * Xc**(-alpha)\n        j1 = -A * Xc**(-alpha) * np.log(Xc) * alpha\n        j2 = -A * alpha * Xc**(-alpha - 1) * C\n        j3 = B\n\n        # Gradient of MSE: 2/N * sum(diff * jacobian)\n        grad = np.empty(4, dtype=float)\n        grad[0] = 2.0 * np.mean(diff * j0)\n        grad[1] = 2.0 * np.mean(diff * j1)\n        grad[2] = 2.0 * np.mean(diff * j2)\n        grad[3] = 2.0 * np.mean(diff * j3)\n\n        return loss, grad\n\n    # Reasonable bounds in log-domain to prevent runaway\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log alpha\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                   x0=p0,\n                   jac=lambda p: obj_and_grad(p)[1],\n                   bounds=bounds,\n                   method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial\n        return p0\n    return res.x\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5233)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 4-parameter shifted power-law scaling function for LLM finetuning loss:\n    L(N) = B + A * (N + C)^(\u2212\u03b1)\nParameters are represented in log-domain for positivity and numerical stability:\n    params = [log_A, log_\u03b1, log_C, log_B]\nFitting is done via bounded Levenberg\u2013Marquardt least\u2010squares with analytic Jacobian.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 log-domain parameters [pA, p\u03b1, pC, pB]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Unpack and exponentiate for positivity\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power\u2010law\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law to empirical (data_points, loss_values).\n    Returns optimized log-domain params = [pA, p\u03b1, pC, pB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guess in natural domain\n    B0 = max(np.min(y) * 0.9, 1e-8)                      # near minimum observed loss\n    C0 = max(np.min(X) * 0.5, 1e-8)                     # small horizontal shift\n    \u03b10 = 0.5                                            # moderate decay\n    # Choose A0 so that at smallest X: A*(X+C)^(-\u03b1) \u2248 (max(y)-B0)\n    A0 = max((np.max(y) - B0) * ( (np.min(X) + C0) ** \u03b10 ), 1e-8)\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals w.r.t. log-domain params\n    def jac(p):\n        A     = np.exp(p[0])\n        \u03b1     = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc    = X + C\n        # Precompute common terms\n        pow_term = Xc ** (-\u03b1)\n        log_term = np.log(Xc)\n        # Allocate Jacobian: shape (N,4)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202pA = \u2202(B + A\u00b7Xc^(\u2212\u03b1) \u2212 y)/\u2202pA = A\u00b7Xc^(\u2212\u03b1)\n        J[:, 0] = A * pow_term\n        # \u2202r/\u2202p\u03b1 = \u2202(...)/\u2202\u03b1 \u00b7 \u2202\u03b1/\u2202p\u03b1 = [\u2212A\u00b7Xc^(\u2212\u03b1)\u00b7ln(Xc)]\u00b7\u03b1\n        J[:, 1] = -A * pow_term * log_term * \u03b1\n        # \u2202r/\u2202pC = \u2202(...)/\u2202C \u00b7 \u2202C/\u2202pC = [\u2212A\u00b7\u03b1\u00b7Xc^(\u2212\u03b1\u22121)]\u00b7C\n        J[:, 2] = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # \u2202r/\u2202pB = \u2202(...)/\u2202B \u00b7 \u2202B/\u2202pB = 1\u00b7B\n        J[:, 3] = B\n        return J\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=([-np.inf, -np.inf, -np.inf, -np.inf],\n                [ np.inf,  np.inf,  np.inf,  np.inf]),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=1000,\n        verbose=0\n    )\n\n    # Return optimized log-params (fallback to p0 if failure)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5199, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4\u2010parameter shifted power law:\n       L(N) = B + A * (N + C)^(-alpha)\n    All parameters are stored in log\u2010domain for positivity:\n       params = [log_A, log_alpha, log_C, log_B]\n    Inputs:\n      data_points: shape (N,) or (N,1) array of dataset sizes\n      params:      length\u20104 array of log\u2010domain parameters\n    Returns:\n      preds: length\u2010N array of predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel().astype(float)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter shifted power law to (data_points, loss_values)\n    by minimizing the weighted least\u2010squares of relative residuals:\n       r_i = (pred_i - y_i) / y_i\n    Returns length\u20104 array of optimized log\u2010domain parameters\n       [log_A, log_alpha, log_C, log_B]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    if X.shape != y.shape:\n        raise ValueError(\"data_points and loss_values must have the same shape\")\n\n    # Heuristic initial guess in natural domain\n    y_min, y_max = y.min(), y.max()\n    N_min = X.min()\n\n    # Floor B0 slightly below min(y)\n    B0 = max(0.8 * y_min, 1e-8)\n    # Horizontal shift C0 = 10% of smallest dataset size\n    C0 = max(0.1 * N_min, 1e-8)\n    # Decay exponent\n    alpha0 = 0.5\n    # Amplitude so that at N_min: A*(N_min+C0)^(-alpha0) \u2248 y_max - B0\n    A0 = max((y_max - B0) * ( (N_min + C0) ** alpha0 ), 1e-8)\n\n    # Pack log\u2010domain initial guess\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residual vector: weighted by 1/y to emphasize relative error\n    def residual(p):\n        pred = scaling_law_func(X, p)\n        return (pred - y) / y\n\n    # Analytic Jacobian of the residuals\n    def jacobian(p):\n        # Unpack positive parameters\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Common terms\n        pow_t = Xc ** (-alpha)\n        ln_t  = np.log(Xc)\n        # dpred/dlogA =     A * Xc^{-alpha}\n        J0 = A * pow_t\n        # dpred/dlog_alpha = d/dalpha[ A Xc^{-alpha} ] * alpha\n        #                   = -A * Xc^{-alpha} * ln(Xc) * alpha\n        J1 = -A * pow_t * ln_t * alpha\n        # dpred/dlogC = d/dC[ A * Xc^{-alpha} ] * C\n        #            = -A * alpha * Xc^{-alpha-1} * C\n        J2 = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # dpred/dlogB =     B\n        J3 = B * np.ones_like(X)\n\n        # Stack into (N,4), then divide each column by y for weighted residual Jacobian\n        # i.e. d((pred - y)/y)/dlogP = (dpred/dlogP) / y\n        J = np.vstack([J0, J1, J2, J3]).T\n        return J / y[:, None]\n\n    # Use bounded least squares in log\u2010domain\n    # Reasonable bounds to keep parameters positive and finite\n    lower = [-50, -5, -50, -50]\n    upper = [ 50,  10,  50,  50]\n\n    result = least_squares(\n        residual,\n        p0,\n        jac=jacobian,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    # Return optimized log parameters, or fallback to p0\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5352, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Four-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      array-like [B, A, C, alpha], all \u2265 0\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # ensure numerical stability: shift inside power positive\n    Xc = np.maximum(N + C, 1e-12)\n    return B + A * Xc**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law L(N)=B + A*(N + C)^(-alpha)\n    via weighted least-squares to balance small- and large-N fits.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0 = max(0.0, 0.9 * np.min(y))\n    A0 = max(1e-6, np.max(y) - np.min(y))\n    C0 = max(1e-6, 0.5 * np.median(X))\n    # rough exponent from log-log slope\n    z = np.clip(y - B0, 1e-8, None)\n    lx, ly = np.log(X + C0), np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n        alpha0 = max(1e-3, -slope)\n        A0    = max(1e-6, np.exp(intercept))\n    except Exception:\n        alpha0 = 0.5\n\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: B\u2208[0, max(y)], A,C,alpha \u22650\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.max(y), np.inf, np.inf, np.inf]\n\n    # Weight exponent to emphasize small-N fitting\n    eta = 0.25\n    w = 1.0 / ((X + C0) ** eta)\n\n    def resid(p):\n        B, A, C, alpha = p\n        preds = scaling_law_func(X, p)\n        return (preds - y) * w\n\n    def jac(p):\n        B, A, C, alpha = p\n        Xc = np.maximum(X + C, 1e-12)\n        # \u2202L/\u2202B = 1\n        dB = np.ones_like(X)\n        # \u2202L/\u2202A = Xc^(-alpha)\n        dA = Xc**(-alpha)\n        # \u2202L/\u2202C = -A*alpha*Xc^(-alpha-1)\n        dC = -A * alpha * Xc**(-alpha - 1)\n        # \u2202L/\u2202alpha = -A * Xc^(-alpha) * log(Xc)\n        d\u03b1 = -A * Xc**(-alpha) * np.log(Xc)\n        # apply weights\n        return np.vstack([dB*w, dA*w, dC*w, d\u03b1*w]).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x if result.success else x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.5352, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law:\n      L(N) = B + A * (N + C)^(-alpha)\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      iterable of 4 non-negative numbers [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure numerical stability: N + C always \u2265 small positive\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter law L(N)=B + A*(N + C)^(-alpha)\n    via bounded nonlinear least-squares with a simple weighting\n    to balance errors across small and large N.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: optimized array [B, A, C, alpha]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0 = max(0.0, np.min(y) * 0.9)\n    A0 = max(1e-6, np.max(y) - np.min(y))\n    C0 = max(1.0, np.median(X) * 0.5)\n    alpha0 = 0.5\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters \u2265 0; B \u2264 max(y)\n    lower_bounds = [0.0, 0.0, 0.0, 0.0]\n    upper_bounds = [np.max(y), np.inf, np.inf, np.inf]\n\n    # Residual function with simple weighting:\n    #   weight small-N errors more heavily to avoid under-fitting at low data sizes\n    def residuals(p):\n        pred = scaling_law_func(X, p)\n        # small\u2010N get higher weight: w = 1 / (N + C0)^(0.25)\n        w = 1.0 / np.power(X + C0, 0.25)\n        return (pred - y) * w\n\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower_bounds, upper_bounds),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5233, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 4-parameter shifted power-law scaling function for LLM finetuning loss:\n    L(N) = B + A * (N + C)^(\u2212\u03b1)\nParameters are represented in log-domain for positivity and numerical stability:\n    params = [log_A, log_\u03b1, log_C, log_B]\nFitting is done via bounded Levenberg\u2013Marquardt least\u2010squares with analytic Jacobian.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 log-domain parameters [pA, p\u03b1, pC, pB]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Unpack and exponentiate for positivity\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power\u2010law\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law to empirical (data_points, loss_values).\n    Returns optimized log-domain params = [pA, p\u03b1, pC, pB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guess in natural domain\n    B0 = max(np.min(y) * 0.9, 1e-8)                      # near minimum observed loss\n    C0 = max(np.min(X) * 0.5, 1e-8)                     # small horizontal shift\n    \u03b10 = 0.5                                            # moderate decay\n    # Choose A0 so that at smallest X: A*(X+C)^(-\u03b1) \u2248 (max(y)-B0)\n    A0 = max((np.max(y) - B0) * ( (np.min(X) + C0) ** \u03b10 ), 1e-8)\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals w.r.t. log-domain params\n    def jac(p):\n        A     = np.exp(p[0])\n        \u03b1     = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc    = X + C\n        # Precompute common terms\n        pow_term = Xc ** (-\u03b1)\n        log_term = np.log(Xc)\n        # Allocate Jacobian: shape (N,4)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202pA = \u2202(B + A\u00b7Xc^(\u2212\u03b1) \u2212 y)/\u2202pA = A\u00b7Xc^(\u2212\u03b1)\n        J[:, 0] = A * pow_term\n        # \u2202r/\u2202p\u03b1 = \u2202(...)/\u2202\u03b1 \u00b7 \u2202\u03b1/\u2202p\u03b1 = [\u2212A\u00b7Xc^(\u2212\u03b1)\u00b7ln(Xc)]\u00b7\u03b1\n        J[:, 1] = -A * pow_term * log_term * \u03b1\n        # \u2202r/\u2202pC = \u2202(...)/\u2202C \u00b7 \u2202C/\u2202pC = [\u2212A\u00b7\u03b1\u00b7Xc^(\u2212\u03b1\u22121)]\u00b7C\n        J[:, 2] = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # \u2202r/\u2202pB = \u2202(...)/\u2202B \u00b7 \u2202B/\u2202pB = 1\u00b7B\n        J[:, 3] = B\n        return J\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=([-np.inf, -np.inf, -np.inf, -np.inf],\n                [ np.inf,  np.inf,  np.inf,  np.inf]),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=1000,\n        verbose=0\n    )\n\n    # Return optimized log-params (fallback to p0 if failure)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A * (N + C)^(-alpha)\n    using 4 log-domain parameters p = [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points (N,) and loss_values (N,).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    y = np.asarray(loss_values).ravel()\n    N = X.size\n\n    # Initial guess in natural domain\n    A0     = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X), 1.0)\n    B0     = max(y.min(), 1e-3)\n    p0      = np.log([A0, alpha0, C0, B0])\n\n    # Pre-allocate to avoid re-alloc inside gradient\n    def obj_and_grad(p):\n        # Unpack params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Predictions and residual\n        pred = B + A * Xc**(-alpha)\n        diff = pred - y\n        # Objective: MSE\n        loss = np.mean(diff**2)\n\n        # Compute Jacobian dpred/dp_i\n        # dpred/dp0 = (Xc^(-alpha)) * A\n        # dpred/dp1 = -A * Xc^(-alpha) * ln(Xc) * alpha\n        # dpred/dp2 = -A * alpha * Xc^(-alpha-1) * C\n        # dpred/dp3 = B\n        j0 = A * Xc**(-alpha)\n        j1 = -A * Xc**(-alpha) * np.log(Xc) * alpha\n        j2 = -A * alpha * Xc**(-alpha - 1) * C\n        j3 = B\n\n        # Gradient of MSE: 2/N * sum(diff * jacobian)\n        grad = np.empty(4, dtype=float)\n        grad[0] = 2.0 * np.mean(diff * j0)\n        grad[1] = 2.0 * np.mean(diff * j1)\n        grad[2] = 2.0 * np.mean(diff * j2)\n        grad[3] = 2.0 * np.mean(diff * j3)\n\n        return loss, grad\n\n    # Reasonable bounds in log-domain to prevent runaway\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log alpha\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                   x0=p0,\n                   jac=lambda p: obj_and_grad(p)[1],\n                   bounds=bounds,\n                   method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial\n        return p0\n    return res.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Below is the fully\u2010rewritten program. We have replaced the original naive L-BFGS\u2010B MSE fit with a bounded Levenberg\u2013Marquardt\u2010style least\u2010squares on *relative* residuals, added an analytic Jacobian in the log-domain for stability, and kept the 4 log-domain parameters to ensure positivity. This matches the API of the original (`scaling_law_func` and `fit_scaling_law`) but should yield substantially better nmse/nmae and overall fit metrics across a variety of model\u2013dataset combinations.\n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law in log-domain:\n        L(N) = B + A * (N + C)^(-alpha)\n    params = [logA, log_alpha, logC, logB]\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel().astype(float)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct strictly positive values\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law\n    to (data_points, loss_values) by minimizing weighted\n    least squares of the *relative* residuals:\n      r_i = (L_pred(N_i) - y_i) / y_i\n    Returns optimized log-domain params [logA, log_alpha, logC, logB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    if X.shape != y.shape:\n        raise ValueError(\"data_points and loss_values must have the same shape\")\n\n    # Heuristic initial guesses in the natural domain\n    y_min, y_max = y.min(), y.max()\n    N_min = X.min()\n    B0 = max(0.8 * y_min, 1e-8)        # asymptotic floor just below observed min\n    C0 = max(0.1 * N_min, 1e-8)       # small horizontal shift\n    alpha0 = 0.5                      # moderate decay\n    A0 = max((y_max - B0) * ( (N_min + C0) ** alpha0 ), 1e-8)\n\n    # Pack into log-domain for positivity\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def residual(p):\n        # Weighted by 1/y to emphasize relative error\n        return (scaling_law_func(X, p) - y) / y\n\n    def jac(p):\n        # Analytic Jacobian of the residuals w.r.t. log-domain params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        pow_t = Xc ** (-alpha)\n        ln_t = np.log(Xc)\n        # \u2202L/\u2202logA = A * Xc^{-\u03b1}\n        J0 = A * pow_t\n        # \u2202L/\u2202log_alpha = -A * Xc^{-\u03b1} * ln(Xc) * \u03b1\n        J1 = -A * pow_t * ln_t * alpha\n        # \u2202L/\u2202logC = -A * \u03b1 * Xc^{-\u03b1-1} * C\n        J2 = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # \u2202L/\u2202logB = B\n        J3 = B * np.ones_like(X)\n        J = np.vstack([J0, J1, J2, J3]).T\n        # convert dL/dp \u2192 d((L - y)/y)/dp\n        return J / y[:, None]\n\n    # Bounds in log-domain to prevent runaway\n    lower = [-50, -5, -50, -50]\n    upper = [ 50, 10,  50,  50]\n\n    result = least_squares(\n        residual,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\n\n\nExplanation of key changes:\n\n- We kept exactly **4 parameters** by using the standard `B + A*(N + C)^(-\u03b1)` form.\n- All four parameters (`A, \u03b1, C, B`) are re\u2010parameterized in the **log domain** to enforce positivity and improve numerical conditioning.\n- We **minimize relative residuals** `(pred \u2212 y)/y` instead of raw MSE, which balances fit quality across large and small loss values.\n- An **analytic Jacobian** in the log domain accelerates convergence and improves stability.\n- We use `scipy.optimize.least_squares` with **bounds** in the log domain to avoid pathological solutions.\n- The heuristic initialization ensures reasonable starting values across a wide range of datasets and model sizes."]}}}