{"id": "424184bb-c1d3-4358-8911-cc885cc95717", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter shifted power-law scaling law for LLM fine-tuning:\n  L(N) = B + A * (N + C)^(-\u03b1)\n\nWe optimize a hybrid loss = MSE + \u03bb\u00b7MAE to balance squared and absolute errors,\nusing a log-domain reparameterization for positivity of [A, \u03b1, C, B]:\n  p = [log A, log \u03b1, log C, log B]\n\nAnalytic gradients for both MSE and MAE terms are provided to L-BFGS-B\nfor improved convergence and better trade-off between nmse and nmae.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 log-domain parameters.\n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of length 4 [logA, log\u03b1, logC, logB]\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain parameters [logA, log\u03b1, logC, logB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    y = np.asarray(loss_values).ravel().astype(np.float64)\n    N = X.size\n\n    # Natural-domain initial guesses\n    B0 = max(0.9 * np.min(y), 1e-6)                 # floor ~ 90% of min loss\n    A0 = max(np.ptp(y), 1e-6)                       # amplitude ~ range of y\n    C0 = max(np.median(X) * 0.1, 1e-6)              # small shift for stability\n    # rough exponent from endpoints\n    if N > 1:\n        idx = np.argsort(X)\n        x0, x1 = X[idx[0]], X[idx[-1]]\n        y0, y1 = y[idx[0]], y[idx[-1]]\n        try:\n            slope = - (np.log(y1 - B0) - np.log(y0 - B0)) \\\n                    / (np.log(x1 + C0) - np.log(x0 + C0))\n            \u03b10 = float(np.clip(slope, 1e-3, 10.0))\n        except Exception:\n            \u03b10 = 0.5\n    else:\n        \u03b10 = 0.5\n\n    # Pack into log-domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # weighting factor between MSE and MAE\n    \u03bb = 0.05\n\n    def _obj_and_grad(p):\n        # Predictions\n        pred = scaling_law_func(X, p)\n        diff = pred - y\n\n        # losses\n        mse = np.mean(diff * diff)\n        mae = np.mean(np.abs(diff))\n        loss = mse + \u03bb * mae\n\n        # reconstruct positive params\n        A, \u03b1, C, B = np.exp(p)\n        Xc = X + C\n\n        # Jacobian of pred wrt log-params p\n        # \u2202pred/\u2202logA = A * Xc^(-\u03b1)\n        j0 = A * Xc**(-\u03b1)\n        # \u2202pred/\u2202log\u03b1 = -A * Xc^(-\u03b1) * \u03b1 * ln(Xc)\n        j1 = -j0 * \u03b1 * np.log(Xc)\n        # \u2202pred/\u2202logC = -A * \u03b1 * C * Xc^(-\u03b1-1)\n        j2 = -A * \u03b1 * C * Xc**(-\u03b1 - 1)\n        # \u2202pred/\u2202logB = B\n        j3 = B * np.ones_like(X)\n\n        J = np.vstack((j0, j1, j2, j3)).T  # shape (N,4)\n\n        # gradient of MSE part: 2/N * J^T \u00b7 diff\n        grad_mse = (2.0 / N) * (J.T @ diff)\n        # gradient of MAE part: (1/N) * J^T \u00b7 sign(diff)\n        grad_mae = (1.0 / N) * (J.T @ np.sign(diff))\n        grad = grad_mse + \u03bb * grad_mae\n\n        return loss, grad\n\n    # Bounds in log-domain to keep parameters in reasonable ranges\n    bounds = [\n        (-20, 20),   # logA\n        (-5,  5),    # log\u03b1\n        (-20, 20),   # logC\n        (-20, 20)    # logB\n    ]\n\n    res = minimize(\n        fun=lambda p: _obj_and_grad(p)[0],\n        x0=p0,\n        jac=lambda p: _obj_and_grad(p)[1],\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b44ef413-2b99-42b0-914b-7ddf081046cf", "generation": 3, "timestamp": 1754719346.308223, "iteration_found": 38, "metrics": {"nmse": 0.021748668298366053, "nmae": 0.12548524307642167, "r2": 0.9782513317016339, "combined_score": 0.9787142680258281}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.019090469117843678, "nmae": 0.11056663128123086, "r2": 0.9809095308821563, "combined_score": 0.9812671497807559}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0191\n- nmae: 0.1106\n- r2: 0.9809\n- combined_score: 0.9813\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1117, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0191, nmae: 0.1106, r2: 0.9809, combined_score: 0.9813\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5230)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power-law scaling law for LLM fine-tuning:\n  L(N) = B + A * (N + C)^(-\u03b1)\nParameters are stored in the log-domain for positivity:\n  p = [log A, log \u03b1, log C, log B]\nThis implementation uses L-BFGS-B to minimize MSE with sensible bounds\nand data-driven initial guesses for robust, stable fitting.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 log-domain parameters.\n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of length 4 [logA, log\u03b1, logC, logB]\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain parameters [logA, log\u03b1, logC, logB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    y = np.asarray(loss_values).ravel().astype(np.float64)\n\n    # Natural-domain initial guesses\n    B0 = max(0.9 * np.min(y), 1e-3)              # floor ~ 90% of min loss\n    A0 = max(np.max(y) - B0, 1e-3)               # amplitude ~ range above floor\n    C0 = max(0.5 * np.median(X), 1e-3)           # shift ~ half median dataset size\n    # rough exponent from endpoints in log-log space\n    if X.size > 1:\n        idx = np.argsort(X)\n        x0, x1 = X[idx[0]], X[idx[-1]]\n        y0, y1 = y[idx[0]], y[idx[-1]]\n        try:\n            slope = - (np.log(y1 - B0) - np.log(y0 - B0)) \\\n                    / (np.log(x1 + C0) - np.log(x0 + C0))\n            alpha0 = float(np.clip(slope, 1e-3, 10.0))\n        except Exception:\n            alpha0 = 0.5\n    else:\n        alpha0 = 0.5\n\n    # Pack into log-domain\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Bounds to keep logs in a reasonable range\n    bounds = [\n        (-20, 20),   # logA\n        (-5,  5),    # log\u03b1\n        (-20, 20),   # logC\n        (-20, 20)    # logB\n    ]\n\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={'ftol': 1e-10, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0191), Performs well on nmae (0.1106), Performs well on r2 (0.9809), Performs well on combined_score (0.9813)\n\n\n### Program 2 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A * (N + C)^(-alpha)\n    using 4 log-domain parameters p = [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points (N,) and loss_values (N,).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    y = np.asarray(loss_values).ravel()\n    N = X.size\n\n    # Initial guess in natural domain\n    A0     = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X), 1.0)\n    B0     = max(y.min(), 1e-3)\n    p0      = np.log([A0, alpha0, C0, B0])\n\n    # Pre-allocate to avoid re-alloc inside gradient\n    def obj_and_grad(p):\n        # Unpack params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Predictions and residual\n        pred = B + A * Xc**(-alpha)\n        diff = pred - y\n        # Objective: MSE\n        loss = np.mean(diff**2)\n\n        # Compute Jacobian dpred/dp_i\n        # dpred/dp0 = (Xc^(-alpha)) * A\n        # dpred/dp1 = -A * Xc^(-alpha) * ln(Xc) * alpha\n        # dpred/dp2 = -A * alpha * Xc^(-alpha-1) * C\n        # dpred/dp3 = B\n        j0 = A * Xc**(-alpha)\n        j1 = -A * Xc**(-alpha) * np.log(Xc) * alpha\n        j2 = -A * alpha * Xc**(-alpha - 1) * C\n        j3 = B\n\n        # Gradient of MSE: 2/N * sum(diff * jacobian)\n        grad = np.empty(4, dtype=float)\n        grad[0] = 2.0 * np.mean(diff * j0)\n        grad[1] = 2.0 * np.mean(diff * j1)\n        grad[2] = 2.0 * np.mean(diff * j2)\n        grad[3] = 2.0 * np.mean(diff * j3)\n\n        return loss, grad\n\n    # Reasonable bounds in log-domain to prevent runaway\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log alpha\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                   x0=p0,\n                   jac=lambda p: obj_and_grad(p)[1],\n                   bounds=bounds,\n                   method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial\n        return p0\n    return res.x\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 3 (Score: 0.5232)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where all parameters B, A, C, alpha are constrained >= 0.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Evaluate the shifted power law\n    # (N + C) > 0 since C >= 0 and N > 0 in our setting\n    return B + A * np.power(N + C, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via bounded least-squares.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0     = max(0.0, np.min(y))                   # asymptotic minimum loss\n    A0     = max(1e-6, np.max(y) - np.min(y))       # amplitude of decay\n    C0     = max(0.0, np.min(X) * 0.5)              # horizontal shift\n    alpha0 = 0.5                                     # decay exponent\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters non-negative\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.inf, np.inf, np.inf, np.inf]\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve with bounded least-squares for stability\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1117), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5245)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4\u2010parameter shifted power\u2010law scaling law:\n  L(N) = B + A * (N + C)^(-alpha)\n\nParameters (all >= 0):\n  B     : asymptotic loss floor\n  A     : amplitude of decay\n  alpha : decay exponent\n  C     : horizontal shift for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 scaling-law parameters.\n    \n    data_points: array-like, shape (N,) or (N,1)\n    params:      array-like of length 4 -> [B, A, alpha, C]\n                 all assumed non-negative\n    returns:     numpy array of shape (N,)\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    B, A, alpha, C = params\n    # ensure positive argument inside the power\n    eps = 1e-12\n    X_shift = np.maximum(X + C, eps)\n    return B + A * X_shift ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values)\n    via bounded nonlinear least squares with analytic Jacobian.\n    \n    Returns optimized params = [B, A, alpha, C].\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    y = np.ravel(loss_values).astype(float)\n    # small constant to avoid zeros\n    eps = 1e-8\n\n    # Initial guesses\n    B0 = max(np.min(y) * 0.9, eps)\n    A0 = max(np.ptp(y), eps)\n    alpha0 = 0.5\n    C0 = 1.0\n\n    x0 = np.array([B0, A0, alpha0, C0], dtype=float)\n\n    # Parameter bounds: all non-negative, with loose upper limits\n    lower = [0.0,        0.0,    0.0,      0.0]\n    upper = [np.max(y)*1.5, np.ptp(y)*10 + eps, 10.0, np.max(X)*2 + 1.0]\n\n    # Residual function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian\n    def jac(p):\n        B, A, alpha, C = p\n        X_shift = np.maximum(X + C, eps)\n        inv_pow = X_shift ** (-alpha)\n        log_X = np.log(X_shift)\n        # \u2202L/\u2202B = 1\n        # \u2202L/\u2202A = (X+C)^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(X+C) * (X+C)^(-alpha)\n        # \u2202L/\u2202C = -A * alpha * (X+C)^(-alpha-1)\n        dB = np.ones_like(X)\n        dA = inv_pow\n        dalpha = -A * log_X * inv_pow\n        dC = -A * alpha * X_shift ** (-alpha - 1)\n        return np.vstack((dB, dA, dalpha, dC)).T\n\n    # Solve with Levenberg-Marquardt under bounds (Trust Region Reflective)\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=5000,\n        diff_step=1e-6\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5245, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4\u2010parameter shifted power\u2010law scaling law:\n  L(N) = B + A * (N + C)^(-alpha)\n\nParameters (all >= 0):\n  B     : asymptotic loss floor\n  A     : amplitude of decay\n  alpha : decay exponent\n  C     : horizontal shift for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 scaling-law parameters.\n    \n    data_points: array-like, shape (N,) or (N,1)\n    params:      array-like of length 4 -> [B, A, alpha, C]\n                 all assumed non-negative\n    returns:     numpy array of shape (N,)\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    B, A, alpha, C = params\n    # ensure positive argument inside the power\n    eps = 1e-12\n    X_shift = np.maximum(X + C, eps)\n    return B + A * X_shift ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values)\n    via bounded nonlinear least squares with analytic Jacobian.\n    \n    Returns optimized params = [B, A, alpha, C].\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    y = np.ravel(loss_values).astype(float)\n    # small constant to avoid zeros\n    eps = 1e-8\n\n    # Initial guesses\n    B0 = max(np.min(y) * 0.9, eps)\n    A0 = max(np.ptp(y), eps)\n    alpha0 = 0.5\n    C0 = 1.0\n\n    x0 = np.array([B0, A0, alpha0, C0], dtype=float)\n\n    # Parameter bounds: all non-negative, with loose upper limits\n    lower = [0.0,        0.0,    0.0,      0.0]\n    upper = [np.max(y)*1.5, np.ptp(y)*10 + eps, 10.0, np.max(X)*2 + 1.0]\n\n    # Residual function\n    def resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian\n    def jac(p):\n        B, A, alpha, C = p\n        X_shift = np.maximum(X + C, eps)\n        inv_pow = X_shift ** (-alpha)\n        log_X = np.log(X_shift)\n        # \u2202L/\u2202B = 1\n        # \u2202L/\u2202A = (X+C)^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(X+C) * (X+C)^(-alpha)\n        # \u2202L/\u2202C = -A * alpha * (X+C)^(-alpha-1)\n        dB = np.ones_like(X)\n        dA = inv_pow\n        dalpha = -A * log_X * inv_pow\n        dC = -A * alpha * X_shift ** (-alpha - 1)\n        return np.vstack((dB, dA, dalpha, dC)).T\n\n    # Solve with Levenberg-Marquardt under bounds (Trust Region Reflective)\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=5000,\n        diff_step=1e-6\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power-law scaling law for LLM fine-tuning:\n  L(N) = B + A * (N + C)^(-\u03b1)\nParameters are stored in the log-domain for positivity:\n  p = [log A, log \u03b1, log C, log B]\nThis implementation uses L-BFGS-B to minimize MSE with sensible bounds\nand data-driven initial guesses for robust, stable fitting.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 log-domain parameters.\n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of length 4 [logA, log\u03b1, logC, logB]\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain parameters [logA, log\u03b1, logC, logB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    y = np.asarray(loss_values).ravel().astype(np.float64)\n\n    # Natural-domain initial guesses\n    B0 = max(0.9 * np.min(y), 1e-3)              # floor ~ 90% of min loss\n    A0 = max(np.max(y) - B0, 1e-3)               # amplitude ~ range above floor\n    C0 = max(0.5 * np.median(X), 1e-3)           # shift ~ half median dataset size\n    # rough exponent from endpoints in log-log space\n    if X.size > 1:\n        idx = np.argsort(X)\n        x0, x1 = X[idx[0]], X[idx[-1]]\n        y0, y1 = y[idx[0]], y[idx[-1]]\n        try:\n            slope = - (np.log(y1 - B0) - np.log(y0 - B0)) \\\n                    / (np.log(x1 + C0) - np.log(x0 + C0))\n            alpha0 = float(np.clip(slope, 1e-3, 10.0))\n        except Exception:\n            alpha0 = 0.5\n    else:\n        alpha0 = 0.5\n\n    # Pack into log-domain\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Bounds to keep logs in a reasonable range\n    bounds = [\n        (-20, 20),   # logA\n        (-5,  5),    # log\u03b1\n        (-20, 20),   # logC\n        (-20, 20)    # logB\n    ]\n\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={'ftol': 1e-10, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter shifted power-law scaling law for LLM fine-tuning:\n  L(N) = B + A * (N + C)^(-\u03b1)\n\nWe optimize a hybrid loss = MSE + \u03bb\u00b7MAE to balance squared and absolute errors,\nusing a log-domain reparameterization for positivity of [A, \u03b1, C, B]:\n  p = [log A, log \u03b1, log C, log B]\n\nAnalytic gradients for both MSE and MAE terms are provided to L-BFGS-B\nfor improved convergence and better trade-off between nmse and nmae.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 log-domain parameters.\n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of length 4 [logA, log\u03b1, logC, logB]\n    Returns:\n      preds: ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain parameters [logA, log\u03b1, logC, logB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(np.float64)\n    y = np.asarray(loss_values).ravel().astype(np.float64)\n    N = X.size\n\n    # Natural-domain initial guesses\n    B0 = max(0.9 * np.min(y), 1e-6)                 # floor ~ 90% of min loss\n    A0 = max(np.ptp(y), 1e-6)                       # amplitude ~ range of y\n    C0 = max(np.median(X) * 0.1, 1e-6)              # small shift for stability\n    # rough exponent from endpoints\n    if N > 1:\n        idx = np.argsort(X)\n        x0, x1 = X[idx[0]], X[idx[-1]]\n        y0, y1 = y[idx[0]], y[idx[-1]]\n        try:\n            slope = - (np.log(y1 - B0) - np.log(y0 - B0)) \\\n                    / (np.log(x1 + C0) - np.log(x0 + C0))\n            \u03b10 = float(np.clip(slope, 1e-3, 10.0))\n        except Exception:\n            \u03b10 = 0.5\n    else:\n        \u03b10 = 0.5\n\n    # Pack into log-domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # weighting factor between MSE and MAE\n    \u03bb = 0.05\n\n    def _obj_and_grad(p):\n        # Predictions\n        pred = scaling_law_func(X, p)\n        diff = pred - y\n\n        # losses\n        mse = np.mean(diff * diff)\n        mae = np.mean(np.abs(diff))\n        loss = mse + \u03bb * mae\n\n        # reconstruct positive params\n        A, \u03b1, C, B = np.exp(p)\n        Xc = X + C\n\n        # Jacobian of pred wrt log-params p\n        # \u2202pred/\u2202logA = A * Xc^(-\u03b1)\n        j0 = A * Xc**(-\u03b1)\n        # \u2202pred/\u2202log\u03b1 = -A * Xc^(-\u03b1) * \u03b1 * ln(Xc)\n        j1 = -j0 * \u03b1 * np.log(Xc)\n        # \u2202pred/\u2202logC = -A * \u03b1 * C * Xc^(-\u03b1-1)\n        j2 = -A * \u03b1 * C * Xc**(-\u03b1 - 1)\n        # \u2202pred/\u2202logB = B\n        j3 = B * np.ones_like(X)\n\n        J = np.vstack((j0, j1, j2, j3)).T  # shape (N,4)\n\n        # gradient of MSE part: 2/N * J^T \u00b7 diff\n        grad_mse = (2.0 / N) * (J.T @ diff)\n        # gradient of MAE part: (1/N) * J^T \u00b7 sign(diff)\n        grad_mae = (1.0 / N) * (J.T @ np.sign(diff))\n        grad = grad_mse + \u03bb * grad_mae\n\n        return loss, grad\n\n    # Bounds in log-domain to keep parameters in reasonable ranges\n    bounds = [\n        (-20, 20),   # logA\n        (-5,  5),    # log\u03b1\n        (-20, 20),   # logC\n        (-20, 20)    # logB\n    ]\n\n    res = minimize(\n        fun=lambda p: _obj_and_grad(p)[0],\n        x0=p0,\n        jac=lambda p: _obj_and_grad(p)[1],\n        bounds=bounds,\n        method=\"L-BFGS-B\",\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Introduced a hybrid loss (MSE + \u03bb\u00b7MAE) to actively trade off squared and absolute residuals, targeting simultaneous improvement in nmse and nmae.\n- Provided analytic gradients for both MSE and MAE terms to the L-BFGS-B solver for faster, more accurate convergence.\n- Tuned initial guesses and shift parameter for better numerical conditioning.\n- Tightened solver tolerances for stability and reproducibility."]}}}