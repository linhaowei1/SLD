{"id": "5e975f25-5cde-43b1-bfc7-e034da7c19d5", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where B, A, C, alpha >= 0.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes N\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: numpy.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure positivity inside the power\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via robust, weighted,\n    bounded least-squares in the log-parameter space.\n\n    Returns optimized natural-domain params = [B, A, C, alpha].\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    # Small constants\n    eps = 1e-8\n\n    # === INITIAL GUESS HEURISTICS ===\n    # Asymptotic floor just below minimal observed loss\n    B0 = max(np.min(y) * 0.9, eps)\n    # Horizontal shift as small fraction of minimal data size\n    C0 = max(np.min(X) * 0.1, eps)\n\n    # Shifted target for log\u2013log fitting\n    y_shift = np.clip(y - B0, eps, None)\n    X_shift = X + C0\n\n    # Estimate slope/intercept: log(y_shift) \u2248 intercept + slope * log(X_shift)\n    try:\n        slope, intercept = np.polyfit(np.log(X_shift), np.log(y_shift), 1)\n        alpha0 = max(-slope, 1e-4)\n        A0     = max(np.exp(intercept), eps)\n    except Exception:\n        # Fallback defaults\n        alpha0 = 0.5\n        A0     = max(np.max(y) - B0, eps)\n\n    # Pack natural-domain guess and convert to log-domain\n    p0 = np.log([B0, A0, C0, alpha0])\n\n    # === RESIDUAL AND JACOBIAN IN LOG-PARAM SPACE ===\n    def _residuals(p_log):\n        # Recover positive parameters\n        B, A, C, alpha = np.exp(p_log)\n        Xc = X + C\n        pred = B + A * Xc**(-alpha)\n        # Relative residual: balances scale across losses\n        return (pred - y) / (y + eps)\n\n    def _jacobian(p_log):\n        B, A, C, alpha = np.exp(p_log)\n        Xc = X + C\n        # Derivatives of L wrt natural params\n        dL_dB     = np.ones_like(X)                # \u2202L/\u2202B\n        dL_dA     = Xc ** (-alpha)                 # \u2202L/\u2202A\n        dL_dC     = -A * alpha * Xc**(-alpha - 1)  # \u2202L/\u2202C\n        dL_dalpha = -A * Xc**(-alpha) * np.log(Xc) # \u2202L/\u2202alpha\n        # Chain-rule: dL/d(log-param) = dL/dparam * param\n        dB = dL_dB     * B\n        dA = dL_dA     * A\n        dC = dL_dC     * C\n        da = dL_dalpha * alpha\n        # Stack and apply relative weighting\n        W = 1.0 / (y + eps)\n        J = np.vstack((dB * W, dA * W, dC * W, da * W)).T\n        return J\n\n    # === OPTIMIZATION ===\n    result = least_squares(\n        fun=_residuals,\n        x0=p0,\n        jac=_jacobian,\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=5000\n    )\n\n    # Recover and return natural-domain parameters\n    p_opt = result.x if result.success else p0\n    return np.exp(p_opt)", "language": "python", "parent_id": "205a555b-fa25-426f-9344-57ae0c00013b", "generation": 2, "timestamp": 1754719405.2487204, "iteration_found": 44, "metrics": {"nmse": 0.011946701812481994, "nmae": 0.09126332926218947, "r2": 0.988053298187518, "combined_score": 0.9881943369239858}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.019217212108025416, "nmae": 0.11172905037912405, "r2": 0.9807827878919746, "combined_score": 0.9811451260048103}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0192\n- nmae: 0.1117\n- r2: 0.9808\n- combined_score: 0.9811\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1117, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0191, nmae: 0.1111, r2: 0.9809, combined_score: 0.9813\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0119, nmae: 0.0913, r2: 0.9881, combined_score: 0.9882\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5199)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter shifted power\u2010law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nParameters are kept positive via log-reparameterization.\nFitting minimizes relative squared residuals with analytic Jacobian\nand bound constraints for numerical stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params:      array of 4 log-domain parameters [pA, p\u03b1, pC, pB]\n    Returns:     Predicted loss array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Exponentiate to enforce positivity\n    A, \u03b1, C, B = np.exp(p[0]), np.exp(p[1]), np.exp(p[2]), np.exp(p[3])\n    # Compute shifted power\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power\u2010law to (data_points, loss_values).\n    Returns optimized log-domain params = [pA, p\u03b1, pC, pB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    # Heuristic initial guess in natural domain\n    B0 = max(np.min(y) * 0.95, 1e-6)                     # near lower loss bound\n    C0 = max(np.min(X) * 0.1, 1e-6)                      # small horizontal shift\n    \u03b10 = 0.7                                            # moderate decay\n    A0 = max((np.max(y) - B0) * ((np.min(X) + C0) ** \u03b10), 1e-6)\n    # Pack into log-domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Weighted residuals: relative error to handle wide loss range\n    def resid(p):\n        pred = scaling_law_func(X, p)\n        # avoid division by zero\n        w = np.maximum(y, 1e-8)\n        return (pred - y) / w\n\n    # Analytic Jacobian of the weighted residuals\n    def jac(p):\n        A, \u03b1, C, B = np.exp(p[0]), np.exp(p[1]), np.exp(p[2]), np.exp(p[3])\n        Xc = X + C\n        pow_term = Xc ** (-\u03b1)\n        log_Xc = np.log(Xc)\n        w = np.maximum(y, 1e-8)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202pA =   A * Xc^(-\u03b1) / w\n        J[:, 0] = A * pow_term / w\n        # \u2202r/\u2202p\u03b1 =  -A * Xc^(-\u03b1) * ln(Xc) * \u03b1 / w\n        J[:, 1] = -A * pow_term * log_Xc * \u03b1 / w\n        # \u2202r/\u2202pC =  -A * \u03b1 * Xc^(-\u03b1-1) * C / w\n        J[:, 2] = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C / w\n        # \u2202r/\u2202pB =   B / w\n        J[:, 3] = B / w\n        return J\n\n    # Bound log-parameters to avoid degenerate fits\n    lower = np.log([1e-6, 1e-3, 1e-6, 1e-6])\n    upper = np.log([1e3, 5.0, 1e6, np.max(y) * 1.1])\n\n    result = least_squares(\n        resid, p0, jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9, ftol=1e-9, max_nfev=2000\n    )\n    # return optimized log-params (fallback to p0 if optimization fails)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0119), Performs well on nmae (0.0913), Performs well on r2 (0.9881), Performs well on combined_score (0.9882)\n\n\n### Program 2 (Score: 0.5231)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law in log-domain:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    where A, \u03b1, C, B > 0 via exp-reparameterization.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1), data sizes\n      params:      array-like of 4 real numbers [pA, p\u03b1, pC, pB]\n                   representing log(A), log(\u03b1), log(C), log(B)\n    Returns:\n      preds: numpy.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func requires 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    alpha = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law L(N)=B + A*(N + C)^(-\u03b1) by minimizing MSE\n    in the log-parameter space using L-BFGS-B with analytic gradient.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: numpy.ndarray of 4 real numbers [pA, p\u03b1, pC, pB]\n              representing log(A), log(\u03b1), log(C), log(B)\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = X.size\n\n    # Sort for stable slope estimation\n    idx = np.argsort(X)\n    Xs, ys = X[idx], y[idx]\n\n    # Initial natural-domain guesses\n    y_min, y_max = ys.min(), ys.max()\n    A0 = max(y_max - y_min, 1e-2)\n    B0 = max(0.9 * y_min, 1e-3)\n    C0 = max(np.median(Xs), 1.0)\n\n    # Estimate exponent \u03b1 from endpoints in log-log\n    if ys[0] > B0 and ys[-1] > B0 and Xs[0] != Xs[-1]:\n        num = np.log(ys[-1] - B0) - np.log(ys[0] - B0)\n        den = np.log(Xs[-1] + C0) - np.log(Xs[0] + C0)\n        slope = - num / (den + 1e-12)\n        alpha0 = float(np.clip(slope, 1e-3, 5.0))\n    else:\n        alpha0 = 0.5\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Objective and gradient for MSE\n    def _mse_and_grad(p):\n        A     = np.exp(p[0])\n        alpha = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc = X + C\n        # Model prediction\n        f = B + A * Xc**(-alpha)\n        diff = f - y\n        mse  = np.mean(diff * diff)\n\n        # Derivatives of f w.r.t. log-params p = [p0,p1,p2,p3]\n        # d f / d p0 = A * Xc^(-alpha)\n        # d f / d p1 = -A * alpha * Xc^(-alpha) * log(Xc)\n        # d f / d p2 = -A * alpha * C * Xc^(-alpha-1)\n        # d f / d p3 = B\n        d0 = A * Xc**(-alpha)\n        d1 = -A * alpha * Xc**(-alpha) * np.log(Xc)\n        d2 = -A * alpha * C * Xc**(-alpha - 1)\n        d3 = B * np.ones_like(X)\n        # Gradient of MSE = (2/N) * sum_i diff_i * df_i/dp\n        grad = (2.0 / N) * np.array([\n            np.dot(diff, d0),\n            np.dot(diff, d1),\n            np.dot(diff, d2),\n            np.dot(diff, d3),\n        ])\n        return mse, grad\n\n    # Bounds to keep log-params in a reasonable range\n    bounds = [(-20, 20),  # log A\n              (-5,  5),   # log \u03b1\n              (-20, 20),  # log C\n              (-20, 20)]  # log B\n\n    # Optimize with analytic gradient\n    result = minimize(\n        lambda p: _mse_and_grad(p)[0],\n        p0,\n        method=\"L-BFGS-B\",\n        jac=lambda p: _mse_and_grad(p)[1],\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-12, 'maxiter':10000}\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0191), Performs well on nmae (0.1111), Performs well on r2 (0.9809), Performs well on combined_score (0.9813)\n\n\n### Program 3 (Score: 0.5232)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where all parameters B, A, C, alpha are constrained >= 0.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Evaluate the shifted power law\n    # (N + C) > 0 since C >= 0 and N > 0 in our setting\n    return B + A * np.power(N + C, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via bounded least-squares.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0     = max(0.0, np.min(y))                   # asymptotic minimum loss\n    A0     = max(1e-6, np.max(y) - np.min(y))       # amplitude of decay\n    C0     = max(0.0, np.min(X) * 0.5)              # horizontal shift\n    alpha0 = 0.5                                     # decay exponent\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters non-negative\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.inf, np.inf, np.inf, np.inf]\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve with bounded least-squares for stability\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1117), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5233)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law for LLM fine-tuning:\n  L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters (A, \u03b1, C, B) are kept positive via log-domain optimization.\nFitting uses a robust Huber least-squares solver with analytic Jacobian\nand an informed initialization from a quick log-log linear fit.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n      data_points: array-like, shape (N,) or (N,1)\n      params:      array-like of 4 elements [pA, p\u03b1, pC, pB] in log-domain\n    Returns:\n      preds: numpy array of length N with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A, \u03b1, C, B = np.exp(p)\n    # Compute the scaling law\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [pA, p\u03b1, pC, pB].\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # 1) Initial guess for B and C\n    B0 = np.clip(np.min(y) * 0.9, 1e-8, None)\n    C0 = max(np.median(X) * 0.1, 1e-6)\n\n    # 2) Quick log-log linear fit to estimate A and \u03b1\n    z = y - B0\n    z = np.clip(z, 1e-8, None)\n    lx = np.log(X + C0)\n    ly = np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n    except Exception:\n        slope, intercept = -0.5, np.log(np.max(z))\n    \u03b10 = max(-slope, 1e-4)\n    A0 = max(np.exp(intercept), 1e-6)\n\n    # Pack into log-domain initial parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals for least-squares\n    def _resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals wrt log-params\n    def _jac(p):\n        A, \u03b1, C, B = np.exp(p)\n        Xc = X + C\n        pow_term = Xc ** (-\u03b1)\n        log_Xc = np.log(Xc)\n        # \u2202L/\u2202pA = A * (X+C)^(-\u03b1)\n        dA = A * pow_term\n        # \u2202L/\u2202p\u03b1 = A * (X+C)^(-\u03b1) * (\u2212log(X+C)) * \u03b1\n        d\u03b1 = -A * pow_term * log_Xc * \u03b1\n        # \u2202L/\u2202pC = A * (\u2212\u03b1) * (X+C)^(-\u03b1\u22121) * C\n        dC = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # \u2202L/\u2202pB = B\n        dB = np.full_like(X, B)\n        # Stack into N\u00d74 Jacobian\n        return np.vstack((dA, d\u03b1, dC, dB)).T\n\n    # Robust Huber least-squares fitting\n    result = least_squares(\n        _resid,\n        p0,\n        jac=_jac,\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=5000,\n        verbose=0\n    )\n\n    # Return optimized log-domain parameters\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5199, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter shifted power\u2010law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nParameters are kept positive via log-reparameterization.\nFitting minimizes relative squared residuals with analytic Jacobian\nand bound constraints for numerical stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params:      array of 4 log-domain parameters [pA, p\u03b1, pC, pB]\n    Returns:     Predicted loss array of shape (N,)\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Exponentiate to enforce positivity\n    A, \u03b1, C, B = np.exp(p[0]), np.exp(p[1]), np.exp(p[2]), np.exp(p[3])\n    # Compute shifted power\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power\u2010law to (data_points, loss_values).\n    Returns optimized log-domain params = [pA, p\u03b1, pC, pB].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    # Heuristic initial guess in natural domain\n    B0 = max(np.min(y) * 0.95, 1e-6)                     # near lower loss bound\n    C0 = max(np.min(X) * 0.1, 1e-6)                      # small horizontal shift\n    \u03b10 = 0.7                                            # moderate decay\n    A0 = max((np.max(y) - B0) * ((np.min(X) + C0) ** \u03b10), 1e-6)\n    # Pack into log-domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Weighted residuals: relative error to handle wide loss range\n    def resid(p):\n        pred = scaling_law_func(X, p)\n        # avoid division by zero\n        w = np.maximum(y, 1e-8)\n        return (pred - y) / w\n\n    # Analytic Jacobian of the weighted residuals\n    def jac(p):\n        A, \u03b1, C, B = np.exp(p[0]), np.exp(p[1]), np.exp(p[2]), np.exp(p[3])\n        Xc = X + C\n        pow_term = Xc ** (-\u03b1)\n        log_Xc = np.log(Xc)\n        w = np.maximum(y, 1e-8)\n        J = np.empty((X.size, 4), dtype=float)\n        # \u2202r/\u2202pA =   A * Xc^(-\u03b1) / w\n        J[:, 0] = A * pow_term / w\n        # \u2202r/\u2202p\u03b1 =  -A * Xc^(-\u03b1) * ln(Xc) * \u03b1 / w\n        J[:, 1] = -A * pow_term * log_Xc * \u03b1 / w\n        # \u2202r/\u2202pC =  -A * \u03b1 * Xc^(-\u03b1-1) * C / w\n        J[:, 2] = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C / w\n        # \u2202r/\u2202pB =   B / w\n        J[:, 3] = B / w\n        return J\n\n    # Bound log-parameters to avoid degenerate fits\n    lower = np.log([1e-6, 1e-3, 1e-6, 1e-6])\n    upper = np.log([1e3, 5.0, 1e6, np.max(y) * 1.1])\n\n    result = least_squares(\n        resid, p0, jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9, ftol=1e-9, max_nfev=2000\n    )\n    # return optimized log-params (fallback to p0 if optimization fails)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.8367, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.333), Excellent nmae (2.159)\n\n\n### Inspiration 3 (Score: 0.5233, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law for LLM fine-tuning:\n  L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters (A, \u03b1, C, B) are kept positive via log-domain optimization.\nFitting uses a robust Huber least-squares solver with analytic Jacobian\nand an informed initialization from a quick log-log linear fit.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and log-domain parameters.\n      data_points: array-like, shape (N,) or (N,1)\n      params:      array-like of 4 elements [pA, p\u03b1, pC, pB] in log-domain\n    Returns:\n      preds: numpy array of length N with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A, \u03b1, C, B = np.exp(p)\n    # Compute the scaling law\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [pA, p\u03b1, pC, pB].\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # 1) Initial guess for B and C\n    B0 = np.clip(np.min(y) * 0.9, 1e-8, None)\n    C0 = max(np.median(X) * 0.1, 1e-6)\n\n    # 2) Quick log-log linear fit to estimate A and \u03b1\n    z = y - B0\n    z = np.clip(z, 1e-8, None)\n    lx = np.log(X + C0)\n    ly = np.log(z)\n    try:\n        slope, intercept = np.polyfit(lx, ly, 1)\n    except Exception:\n        slope, intercept = -0.5, np.log(np.max(z))\n    \u03b10 = max(-slope, 1e-4)\n    A0 = max(np.exp(intercept), 1e-6)\n\n    # Pack into log-domain initial parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals for least-squares\n    def _resid(p):\n        return scaling_law_func(X, p) - y\n\n    # Analytic Jacobian of residuals wrt log-params\n    def _jac(p):\n        A, \u03b1, C, B = np.exp(p)\n        Xc = X + C\n        pow_term = Xc ** (-\u03b1)\n        log_Xc = np.log(Xc)\n        # \u2202L/\u2202pA = A * (X+C)^(-\u03b1)\n        dA = A * pow_term\n        # \u2202L/\u2202p\u03b1 = A * (X+C)^(-\u03b1) * (\u2212log(X+C)) * \u03b1\n        d\u03b1 = -A * pow_term * log_Xc * \u03b1\n        # \u2202L/\u2202pC = A * (\u2212\u03b1) * (X+C)^(-\u03b1\u22121) * C\n        dC = -A * \u03b1 * (Xc ** (-\u03b1 - 1)) * C\n        # \u2202L/\u2202pB = B\n        dB = np.full_like(X, B)\n        # Stack into N\u00d74 Jacobian\n        return np.vstack((dA, d\u03b1, dC, dB)).T\n\n    # Robust Huber least-squares fitting\n    result = least_squares(\n        _resid,\n        p0,\n        jac=_jac,\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=5000,\n        verbose=0\n    )\n\n    # Return optimized log-domain parameters\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5231, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law in log-domain:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    where A, \u03b1, C, B > 0 via exp-reparameterization.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1), data sizes\n      params:      array-like of 4 real numbers [pA, p\u03b1, pC, pB]\n                   representing log(A), log(\u03b1), log(C), log(B)\n    Returns:\n      preds: numpy.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func requires 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    alpha = np.exp(p[1])    # decay exponent\n    C     = np.exp(p[2])    # horizontal shift\n    B     = np.exp(p[3])    # asymptotic floor\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law L(N)=B + A*(N + C)^(-\u03b1) by minimizing MSE\n    in the log-parameter space using L-BFGS-B with analytic gradient.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      loss_values: array-like of shape (N,)\n    Returns:\n      params: numpy.ndarray of 4 real numbers [pA, p\u03b1, pC, pB]\n              representing log(A), log(\u03b1), log(C), log(B)\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = X.size\n\n    # Sort for stable slope estimation\n    idx = np.argsort(X)\n    Xs, ys = X[idx], y[idx]\n\n    # Initial natural-domain guesses\n    y_min, y_max = ys.min(), ys.max()\n    A0 = max(y_max - y_min, 1e-2)\n    B0 = max(0.9 * y_min, 1e-3)\n    C0 = max(np.median(Xs), 1.0)\n\n    # Estimate exponent \u03b1 from endpoints in log-log\n    if ys[0] > B0 and ys[-1] > B0 and Xs[0] != Xs[-1]:\n        num = np.log(ys[-1] - B0) - np.log(ys[0] - B0)\n        den = np.log(Xs[-1] + C0) - np.log(Xs[0] + C0)\n        slope = - num / (den + 1e-12)\n        alpha0 = float(np.clip(slope, 1e-3, 5.0))\n    else:\n        alpha0 = 0.5\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Objective and gradient for MSE\n    def _mse_and_grad(p):\n        A     = np.exp(p[0])\n        alpha = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc = X + C\n        # Model prediction\n        f = B + A * Xc**(-alpha)\n        diff = f - y\n        mse  = np.mean(diff * diff)\n\n        # Derivatives of f w.r.t. log-params p = [p0,p1,p2,p3]\n        # d f / d p0 = A * Xc^(-alpha)\n        # d f / d p1 = -A * alpha * Xc^(-alpha) * log(Xc)\n        # d f / d p2 = -A * alpha * C * Xc^(-alpha-1)\n        # d f / d p3 = B\n        d0 = A * Xc**(-alpha)\n        d1 = -A * alpha * Xc**(-alpha) * np.log(Xc)\n        d2 = -A * alpha * C * Xc**(-alpha - 1)\n        d3 = B * np.ones_like(X)\n        # Gradient of MSE = (2/N) * sum_i diff_i * df_i/dp\n        grad = (2.0 / N) * np.array([\n            np.dot(diff, d0),\n            np.dot(diff, d1),\n            np.dot(diff, d2),\n            np.dot(diff, d3),\n        ])\n        return mse, grad\n\n    # Bounds to keep log-params in a reasonable range\n    bounds = [(-20, 20),  # log A\n              (-5,  5),   # log \u03b1\n              (-20, 20),  # log C\n              (-20, 20)]  # log B\n\n    # Optimize with analytic gradient\n    result = minimize(\n        lambda p: _mse_and_grad(p)[0],\n        p0,\n        method=\"L-BFGS-B\",\n        jac=lambda p: _mse_and_grad(p)[1],\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-12, 'maxiter':10000}\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where all parameters B, A, C, alpha are constrained >= 0.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Evaluate the shifted power law\n    # (N + C) > 0 since C >= 0 and N > 0 in our setting\n    return B + A * np.power(N + C, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via bounded least-squares.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0     = max(0.0, np.min(y))                   # asymptotic minimum loss\n    A0     = max(1e-6, np.max(y) - np.min(y))       # amplitude of decay\n    C0     = max(0.0, np.min(X) * 0.5)              # horizontal shift\n    alpha0 = 0.5                                     # decay exponent\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters non-negative\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.inf, np.inf, np.inf, np.inf]\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve with bounded least-squares for stability\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where B, A, C, alpha >= 0.\n\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes N\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: numpy.ndarray of shape (N,) with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure positivity inside the power\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via robust, weighted,\n    bounded least-squares in the log-parameter space.\n\n    Returns optimized natural-domain params = [B, A, C, alpha].\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    # Small constants\n    eps = 1e-8\n\n    # === INITIAL GUESS HEURISTICS ===\n    # Asymptotic floor just below minimal observed loss\n    B0 = max(np.min(y) * 0.9, eps)\n    # Horizontal shift as small fraction of minimal data size\n    C0 = max(np.min(X) * 0.1, eps)\n\n    # Shifted target for log\u2013log fitting\n    y_shift = np.clip(y - B0, eps, None)\n    X_shift = X + C0\n\n    # Estimate slope/intercept: log(y_shift) \u2248 intercept + slope * log(X_shift)\n    try:\n        slope, intercept = np.polyfit(np.log(X_shift), np.log(y_shift), 1)\n        alpha0 = max(-slope, 1e-4)\n        A0     = max(np.exp(intercept), eps)\n    except Exception:\n        # Fallback defaults\n        alpha0 = 0.5\n        A0     = max(np.max(y) - B0, eps)\n\n    # Pack natural-domain guess and convert to log-domain\n    p0 = np.log([B0, A0, C0, alpha0])\n\n    # === RESIDUAL AND JACOBIAN IN LOG-PARAM SPACE ===\n    def _residuals(p_log):\n        # Recover positive parameters\n        B, A, C, alpha = np.exp(p_log)\n        Xc = X + C\n        pred = B + A * Xc**(-alpha)\n        # Relative residual: balances scale across losses\n        return (pred - y) / (y + eps)\n\n    def _jacobian(p_log):\n        B, A, C, alpha = np.exp(p_log)\n        Xc = X + C\n        # Derivatives of L wrt natural params\n        dL_dB     = np.ones_like(X)                # \u2202L/\u2202B\n        dL_dA     = Xc ** (-alpha)                 # \u2202L/\u2202A\n        dL_dC     = -A * alpha * Xc**(-alpha - 1)  # \u2202L/\u2202C\n        dL_dalpha = -A * Xc**(-alpha) * np.log(Xc) # \u2202L/\u2202alpha\n        # Chain-rule: dL/d(log-param) = dL/dparam * param\n        dB = dL_dB     * B\n        dA = dL_dA     * A\n        dC = dL_dC     * C\n        da = dL_dalpha * alpha\n        # Stack and apply relative weighting\n        W = 1.0 / (y + eps)\n        J = np.vstack((dB * W, dA * W, dC * W, da * W)).T\n        return J\n\n    # === OPTIMIZATION ===\n    result = least_squares(\n        fun=_residuals,\n        x0=p0,\n        jac=_jacobian,\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=5000\n    )\n\n    # Recover and return natural-domain parameters\n    p_opt = result.x if result.success else p0\n    return np.exp(p_opt)\n```"]}}}