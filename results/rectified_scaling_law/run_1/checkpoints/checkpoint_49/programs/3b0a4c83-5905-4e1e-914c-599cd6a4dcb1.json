{"id": "3b0a4c83-5905-4e1e-914c-599cd6a4dcb1", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: numpy array of shape (N,) with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure positivity inside the power\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) by minimizing a hybrid\n    objective: absolute MSE + 0.1 * relative (log) MSE, using a log-\n    reparameterization to enforce positivity.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = X.size\n\n    # Small constant to avoid zeros in logs\n    eps = 1e-8\n    rel_weight = 0.1\n\n    # Initial guess for B: just below the minimum observed loss\n    B0 = max(eps, np.min(y) * 0.9)\n    # Shifted losses for power-law regression\n    y_shift = y - B0\n    y_shift[y_shift <= 0] = eps\n\n    # Initial guess for horizontal shift C: small fraction of min data size\n    C0 = max(eps, np.min(X) * 0.1)\n\n    # Fit log\u2013log line to estimate A and alpha\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    # slope m, intercept b: log(y_shift) \u2248 b + m * log(X + C0)\n    m, b = np.polyfit(logX, logY, 1)\n    alpha0 = max(-m, 0.1)\n    A0 = max(np.exp(b), eps)\n\n    # Pack initial guesses in log-domain: [logB, logA, logC, logAlpha]\n    p0 = np.log([B0, A0, C0, alpha0])\n\n    def residuals(p):\n        # Unpack and exponentiate to enforce positivity\n        B, A, C, alpha = np.exp(p)\n        Xc = X + C\n        pred = B + A * Xc**(-alpha)\n\n        # absolute residuals\n        abs_res = pred - y\n        # relative (log) residuals scaled by sqrt(rel_weight)\n        rel_res = np.sqrt(rel_weight) * (np.log(pred + eps) - np.log(y + eps))\n\n        return np.concatenate([abs_res, rel_res])\n\n    def jac(p):\n        B, A, C, alpha = np.exp(p)\n        Xc = X + C\n        inv_Xc = 1.0 / (Xc + eps)  # avoid division by zero\n        pow_term = Xc**(-alpha)\n        log_Xc = np.log(Xc + eps)\n\n        # derivatives of pred wrt log-parameters\n        # d pred / d logB = B\n        dB = B\n        # d pred / d logA = A * Xc^(-alpha)\n        dA = A * pow_term\n        # d pred / d logC = d pred/dC * C = -A*alpha*C*Xc^(-alpha-1)\n        dC = -A * alpha * C * Xc**(-alpha - 1)\n        # d pred / d logAlpha = d pred/d\u03b1 * \u03b1 = -A*alpha*Xc^(-alpha)*log(Xc)\n        dalpha = -A * alpha * pow_term * log_Xc\n\n        # Stack into (N,4)\n        jac_abs = np.vstack([dB, dA, dC, dalpha]).T\n\n        # Jacobian for relative residuals: sqrt(w) * (1/pred) * jac_abs\n        pred = B + A * pow_term\n        inv_pred = 1.0 / (pred + eps)\n        jac_rel = np.sqrt(rel_weight) * (jac_abs * inv_pred[:, None])\n\n        # Combine into (2N,4)\n        return np.vstack([jac_abs, jac_rel])\n\n    # Optimize in log-domain without explicit bounds (positivity via exp)\n    result = least_squares(\n        residuals,\n        p0,\n        jac=jac,\n        method='trf',\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    p_opt = result.x if result.success else p0\n    B_opt, A_opt, C_opt, alpha_opt = np.exp(p_opt)\n\n    return np.array([B_opt, A_opt, C_opt, alpha_opt])", "language": "python", "parent_id": "205a555b-fa25-426f-9344-57ae0c00013b", "generation": 2, "timestamp": 1754719283.403743, "iteration_found": 29, "metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.019217212108025416, "nmae": 0.11172905037912405, "r2": 0.9807827878919746, "combined_score": 0.9811451260048103}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0192\n- nmae: 0.1117\n- r2: 0.9808\n- combined_score: 0.9811\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 4.3329, nmae: 2.1594, r2: -3.3329, combined_score: 0.1875\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1117, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5232)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where all parameters B, A, C, alpha are constrained >= 0.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Evaluate the shifted power law\n    # (N + C) > 0 since C >= 0 and N > 0 in our setting\n    return B + A * np.power(N + C, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via bounded least-squares.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0     = max(0.0, np.min(y))                   # asymptotic minimum loss\n    A0     = max(1e-6, np.max(y) - np.min(y))       # amplitude of decay\n    C0     = max(0.0, np.min(X) * 0.5)              # horizontal shift\n    alpha0 = 0.5                                     # decay exponent\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters non-negative\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.inf, np.inf, np.inf, np.inf]\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve with bounded least-squares for stability\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1117), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n### Program 3 (Score: 0.8367)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.3329), Performs well on nmae (2.1594), Performs well on r2 (-3.3329), Performs well on combined_score (0.1875)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8367, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.333), Excellent nmae (2.159)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    where all parameters B, A, C, alpha are constrained >= 0.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Evaluate the shifted power law\n    # (N + C) > 0 since C >= 0 and N > 0 in our setting\n    return B + A * np.power(N + C, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) via bounded least-squares.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    B0     = max(0.0, np.min(y))                   # asymptotic minimum loss\n    A0     = max(1e-6, np.max(y) - np.min(y))       # amplitude of decay\n    C0     = max(0.0, np.min(X) * 0.5)              # horizontal shift\n    alpha0 = 0.5                                     # decay exponent\n    x0 = np.array([B0, A0, C0, alpha0], dtype=float)\n\n    # Bounds: all parameters non-negative\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [np.inf, np.inf, np.inf, np.inf]\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Solve with bounded least-squares for stability\n    result = least_squares(\n        residuals,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [B, A, C, alpha]\n    Returns:\n      preds: numpy array of shape (N,) with predicted losses\n    \"\"\"\n    N = np.asarray(data_points).ravel().astype(float)\n    B, A, C, alpha = params\n    # Ensure positivity inside the power\n    return B + A * np.power(N + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    to the provided (data_points, loss_values) by minimizing a hybrid\n    objective: absolute MSE + 0.1 * relative (log) MSE, using a log-\n    reparameterization to enforce positivity.\n    Returns optimized params [B, A, C, alpha].\n    \"\"\"\n    X = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = X.size\n\n    # Small constant to avoid zeros in logs\n    eps = 1e-8\n    rel_weight = 0.1\n\n    # Initial guess for B: just below the minimum observed loss\n    B0 = max(eps, np.min(y) * 0.9)\n    # Shifted losses for power-law regression\n    y_shift = y - B0\n    y_shift[y_shift <= 0] = eps\n\n    # Initial guess for horizontal shift C: small fraction of min data size\n    C0 = max(eps, np.min(X) * 0.1)\n\n    # Fit log\u2013log line to estimate A and alpha\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    # slope m, intercept b: log(y_shift) \u2248 b + m * log(X + C0)\n    m, b = np.polyfit(logX, logY, 1)\n    alpha0 = max(-m, 0.1)\n    A0 = max(np.exp(b), eps)\n\n    # Pack initial guesses in log-domain: [logB, logA, logC, logAlpha]\n    p0 = np.log([B0, A0, C0, alpha0])\n\n    def residuals(p):\n        # Unpack and exponentiate to enforce positivity\n        B, A, C, alpha = np.exp(p)\n        Xc = X + C\n        pred = B + A * Xc**(-alpha)\n\n        # absolute residuals\n        abs_res = pred - y\n        # relative (log) residuals scaled by sqrt(rel_weight)\n        rel_res = np.sqrt(rel_weight) * (np.log(pred + eps) - np.log(y + eps))\n\n        return np.concatenate([abs_res, rel_res])\n\n    def jac(p):\n        B, A, C, alpha = np.exp(p)\n        Xc = X + C\n        inv_Xc = 1.0 / (Xc + eps)  # avoid division by zero\n        pow_term = Xc**(-alpha)\n        log_Xc = np.log(Xc + eps)\n\n        # derivatives of pred wrt log-parameters\n        # d pred / d logB = B\n        dB = B\n        # d pred / d logA = A * Xc^(-alpha)\n        dA = A * pow_term\n        # d pred / d logC = d pred/dC * C = -A*alpha*C*Xc^(-alpha-1)\n        dC = -A * alpha * C * Xc**(-alpha - 1)\n        # d pred / d logAlpha = d pred/d\u03b1 * \u03b1 = -A*alpha*Xc^(-alpha)*log(Xc)\n        dalpha = -A * alpha * pow_term * log_Xc\n\n        # Stack into (N,4)\n        jac_abs = np.vstack([dB, dA, dC, dalpha]).T\n\n        # Jacobian for relative residuals: sqrt(w) * (1/pred) * jac_abs\n        pred = B + A * pow_term\n        inv_pred = 1.0 / (pred + eps)\n        jac_rel = np.sqrt(rel_weight) * (jac_abs * inv_pred[:, None])\n\n        # Combine into (2N,4)\n        return np.vstack([jac_abs, jac_rel])\n\n    # Optimize in log-domain without explicit bounds (positivity via exp)\n    result = least_squares(\n        residuals,\n        p0,\n        jac=jac,\n        method='trf',\n        xtol=1e-12,\n        ftol=1e-12,\n        max_nfev=2000\n    )\n\n    p_opt = result.x if result.success else p0\n    B_opt, A_opt, C_opt, alpha_opt = np.exp(p_opt)\n\n    return np.array([B_opt, A_opt, C_opt, alpha_opt])\n```"]}}}