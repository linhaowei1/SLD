{"id": "bbc6c488-de7a-47ae-a663-b948dbff121d", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss L(N) = b + a * (N + c)^(\u2212alpha)\n    with params = [ln(a), ln(alpha), ln(c), ln(b)].\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    a, alpha, c, b = np.exp(params)\n    return b + a * (X + c) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [ln(a), ln(alpha), ln(c), ln(b)].\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    y = np.ravel(loss_values).astype(float)\n    \n    # Natural-domain initial guesses\n    A0 = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0 = max(X.min(), 1e-3)\n    B0 = max(y.min(), 1e-3)\n    \n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, p0, method=\"L-BFGS-B\")\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3c573af5-462e-4ed4-9b06-78642a667dc8", "generation": 2, "timestamp": 1754720007.4520605, "iteration_found": 21, "metrics": {"nmse": 0.021325747742638235, "nmae": 0.12519321216895082, "r2": 0.9786742522573617, "combined_score": 0.9791195436032304}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.01976555918031745, "nmae": 0.11662438240937405, "r2": 0.9802344408196826, "combined_score": 0.9806175458639681}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0198\n- nmae: 0.1166\n- r2: 0.9802\n- combined_score: 0.9806\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 4.3329, nmae: 2.1594, r2: -3.3329, combined_score: 0.1875\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n### Program 2 (Score: 0.8367)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.3329), Performs well on nmae (2.1594), Performs well on r2 (-3.3329), Performs well on combined_score (0.1875)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8367, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.333), Excellent nmae (2.159)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss L(N) = b + a * (N + c)^(\u2212alpha)\n    with params = [ln(a), ln(alpha), ln(c), ln(b)].\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    a, alpha, c, b = np.exp(params)\n    return b + a * (X + c) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [ln(a), ln(alpha), ln(c), ln(b)].\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    y = np.ravel(loss_values).astype(float)\n    \n    # Natural-domain initial guesses\n    A0 = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0 = max(X.min(), 1e-3)\n    B0 = max(y.min(), 1e-3)\n    \n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(objective, p0, method=\"L-BFGS-B\")\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}