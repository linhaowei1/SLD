{"id": "4fd15e66-4305-4ffe-b168-5e07a5e75ffc", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 4-parameter rational-power scaling law:\n    L(N) = B + A / (1 + (N / C)^\u03b1)\n\nParameters (A, B, C, \u03b1) are kept strictly positive via log\u2010reparameterization:\n    params = [logA, logB, logC, log\u03b1]\n\nFitting is performed with bounded Levenberg\u2013Marquardt (scipy.optimize.least_squares)\nand an analytic Jacobian for robustness, speed, and numerical stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values L(N) = B + A / (1 + (N/C)^alpha).\n\n    Args:\n      data_points: array-like of shape (N,) or (N,1), the data sizes.\n      params:      array-like of length 4 [logA, logB, logC, logalpha].\n\n    Returns:\n      np.ndarray of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover strictly positive parameters\n    A     = np.exp(p[0])\n    B     = np.exp(p[1])\n    C     = np.exp(p[2])\n    alpha = np.exp(p[3])\n    # Compute the rational-power form\n    t = (X / C) ** alpha\n    return B + A / (1.0 + t)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N) = B + A / (1 + (N/C)^\u03b1)\n    to the provided (data_points, loss_values).\n\n    Returns:\n      np.ndarray of length 4: optimized log-domain parameters\n      [logA, logB, logC, logalpha].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # ----- Initial natural-domain guesses -----\n    y_min, y_max = y.min(), y.max()\n    # Amplitude roughly covers observed loss range\n    A0 = max(y_max - y_min, 1e-6)\n    # Floor near the minimum observed loss\n    B0 = max(y_min * 0.9, 1e-6)\n    # Scale C at geometric mean of data sizes\n    C0 = np.exp(np.mean(np.log(X + 1e-12)))\n    # Moderate decay exponent\n    alpha0 = 0.5\n\n    # Pack into log-domain\n    p0 = np.log([A0, B0, C0, alpha0])\n\n    # ----- Bounds (log-domain) -----\n    # A: [1e-8, 10*(y_max - y_min)]\n    # B: [1e-8, y_max]\n    # C: [1e-6, 1e3 * max(X)]\n    # alpha: [1e-4, 10]\n    lower = np.log([\n        1e-8,\n        1e-8,\n        1e-6,\n        1e-4\n    ])\n    upper = np.log([\n        max(1e-6, (y_max - y_min) * 10),\n        max(1e-6, y_max),\n        max(1e-6, np.max(X) * 1e3),\n        10.0\n    ])\n\n    # ----- Residual and Jacobian -----\n    def residuals(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        t     = (X / C) ** alpha\n        pred  = B + A / (1.0 + t)\n        return pred - y\n\n    def jac(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        # reuse t = (X/C)^alpha\n        t = (X / C) ** alpha\n        one_pt = 1.0 + t\n\n        # Partial derivatives wrt natural parameters\n        # dL/dA = 1/(1 + t)\n        dA = 1.0 / one_pt\n        # dL/dB = 1\n        dB = np.ones_like(X)\n        # dL/dC = A * \u03b1 * t / (C * (1+t)^2)\n        dC = A * alpha * t / (C * one_pt**2)\n        # dL/d\u03b1 = -A * t * ln(X/C) / ( (1 + t)^2 )\n        dalpha = -A * t * np.log(X / C) / (one_pt**2)\n\n        # Chain rule: d/d(log param) = d/d(param) * param\n        return np.vstack([\n            dA     * A,\n            dB     * B,\n            dC     * C,\n            dalpha * alpha\n        ]).T\n\n    # ----- Solve with bounded Levenberg\u2013Marquardt -----\n    result = least_squares(\n        fun=residuals,\n        x0=p0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "2d1cc9ad-9834-4e75-8508-15f8370e1a94", "generation": 2, "timestamp": 1754720194.8710735, "iteration_found": 43, "metrics": {"nmse": 0.007093510726928545, "nmae": 0.07730486964813243, "r2": 0.9929064892730715, "combined_score": 0.9929564527510376}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.01976555918031745, "nmae": 0.11662438240937405, "r2": 0.9802344408196826, "combined_score": 0.9806175458639681}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0198\n- nmae: 0.1166\n- r2: 0.9802\n- combined_score: 0.9806\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0129, nmae: 0.0975, r2: 0.9871, combined_score: 0.9872\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0071, nmae: 0.0773, r2: 0.9929, combined_score: 0.9930\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0071, nmae: 0.0770, r2: 0.9929, combined_score: 0.9930\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5175)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nHighly accurate 4-parameter rational\u2010power scaling law:\n    L(N) = B + A / (C + N^\u03b1)\nAll parameters {A, \u03b1, C, B} are constrained positive via an exponential\nreparameterization. Fitting is done with a Jacobian\u2010aided bounded\nLevenberg\u2013Marquardt (least_squares) for speed and robustness.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A / (C + N^\u03b1).\n    \n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes.\n      params:      array-like of length 4 in log\u2010domain [lnA, ln\u03b1, lnC, lnB].\n    \n    Returns:\n      np.ndarray of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # exponentiate to enforce positivity\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # rational\u2010power form\n    return B + A / (C + np.power(X, \u03b1))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N)=B + A/(C+N^\u03b1) to data.\n    Uses bounded Levenberg\u2013Marquardt with analytic Jacobian.\n    \n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes.\n      loss_values: array-like of shape (N,) with observed losses.\n    \n    Returns:\n      np.ndarray of length 4: optimized log\u2010domain parameters\n      [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # small constant for numeric stability\n    eps = 1e-12\n\n    # INITIAL GUESS in natural domain\n    # B0 ~ floor ~ min observed loss\n    B0 = max(np.min(y), eps)\n    # C0 ~ small shift\n    C0 = max(1.0, eps)\n    # \u03b10 ~ moderate decay\n    \u03b10 = 0.5\n    # A0 chosen so that peak loss ~ A/(C0 + N_min^\u03b10) + B0\n    A0 = max((np.max(y) - B0) * (C0 + np.min(X)**\u03b10), eps)\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # residuals\n    def _res(p):\n        return scaling_law_func(X, p) - y\n\n    # analytic Jacobian in log\u2010domain\n    def _jac(p):\n        A = np.exp(p[0])\n        \u03b1 = np.exp(p[1])\n        C = np.exp(p[2])\n        B = np.exp(p[3])\n        # t = C + X^\u03b1\n        t = C + np.power(X, \u03b1)\n        # dL/dp0 = dL/dA * dA/dp0 = (1/t) * A\n        d0 = A / t\n        # dL/dp1 = dL/d\u03b1 * d\u03b1/dp1\n        # dL/d\u03b1 = -A * X^\u03b1 * ln(X) / t^2\n        # d\u03b1/dp1 = \u03b1\n        logX = np.log(X + eps)\n        d1 = -A * np.power(X, \u03b1) * logX * \u03b1 / (t * t)\n        # dL/dp2 = dL/dC * dC/dp2 = (-A / t^2) * C\n        d2 = -A * C / (t * t)\n        # dL/dp3 = dL/dB * dB/dp3 = 1 * B\n        d3 = B * np.ones_like(X)\n        return np.vstack((d0, d1, d2, d3)).T\n\n    # bounds in log\u2010domain to keep natural params > 0\n    lower = np.log([1e-8, 1e-4, 1e-8, 1e-8])\n    upper = np.log([1e8,  10.0,  1e8,  1e2])\n\n    # solve with Levenberg\u2013Marquardt (trf) and analytic Jacobian\n    res = least_squares(\n        _res,\n        p0,\n        jac=_jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0071), Performs well on nmae (0.0770), Performs well on r2 (0.9929), Performs well on combined_score (0.9930)\n\n\n### Program 2 (Score: 0.5176)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law: rational\u2010power form\n  L(N) = B + A / (1 + (N / C)^\u03b1)\nwith 4 parameters (A, B, C, \u03b1), all kept positive via an exp\u2013reparameterization.\nFitting is performed via bounded Levenberg\u2013Marquardt (scipy.optimize.least_squares)\nwith an analytic Jacobian for robustness and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss L(N) = B + A / (1 + (N / C)**alpha)\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes.\n      params:      array\u2010like of length 4 [logA, logB, logC, logalpha].\n\n    Returns:\n      np.ndarray of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n\n    # positive reparameterization\n    A     = np.exp(p[0])\n    B     = np.exp(p[1])\n    C     = np.exp(p[2])\n    alpha = np.exp(p[3])\n\n    # compute rational\u2010power prediction\n    t = (X / C) ** alpha\n    return B + A / (1.0 + t)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law L(N) = B + A/(1 + (N/C)^\u03b1)\n    to the provided data. Returns the parameters in log\u2010domain\n    [logA, logB, logC, logalpha].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Initial natural\u2010domain guesses\n    A0      = max(y.max() - y.min(), 1e-3)\n    B0      = max(y.min() * 0.9,   1e-6)\n    # geometric mean of X for scale C0\n    C0      = np.exp(np.mean(np.log(X + 1e-12)))\n    alpha0  = 0.5\n\n    # log\u2010domain starting point\n    p0 = np.log([A0, B0, C0, alpha0])\n\n    # reasonable bounds in log\u2010domain\n    A_min, A_max       = 1e-6, (y.max() - y.min()) * 10 + 1e-6\n    B_min, B_max       = 1e-6, y.max()\n    C_min, C_max       = 1e-3, X.max() * 1e3 + 1e-6\n    alpha_min, alpha_max = 1e-3, 10.0\n\n    lower = np.log([A_min,    B_min,    C_min,     alpha_min])\n    upper = np.log([A_max,    B_max,    C_max,     alpha_max])\n\n    # residual function\n    def resid(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        t     = (X / C) ** alpha\n        pred  = B + A / (1.0 + t)\n        return pred - y\n\n    # analytic Jacobian w.r.t. log\u2010domain parameters\n    def jac(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        t     = (X / C) ** alpha\n        one_pt = 1.0 + t\n\n        # partials w.r.t. natural params\n        dL_dA     = 1.0 / one_pt\n        dL_dB     = np.ones_like(X)\n        dL_dC     = A * alpha * t / (C * one_pt**2)\n        dL_dalpha = -A * t * np.log(X / C) / (one_pt**2)\n\n        # chain\u2010rule: d/d(log param) = natural\u2010derivative * natural\u2010param\n        return np.vstack([\n            dL_dA     * A,\n            dL_dB     * B,\n            dL_dC     * C,\n            dL_dalpha * alpha\n        ]).T\n\n    # run bounded least\u2010squares\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9\n    )\n\n    # return optimized log\u2010domain params (or fallback to p0)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0071), Performs well on nmae (0.0773), Performs well on r2 (0.9929), Performs well on combined_score (0.9930)\n\n\n### Program 3 (Score: 0.5212)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4\u2010parameter scaling law with log\u2010space fitting to emphasize relative error.\nModel:   L(N) = B + A * (N + C)^(-\u03b1)\nParameters are kept strictly positive by reparameterizing in the log\u2010domain:\n    p = [log A, log \u03b1, log C, log B]\n\nWe fit p by minimizing the mean squared error on log-loss:\n    objective(p) = mean( (log L(N; p) \u2212 log y)^2 )\nusing L-BFGS-B with simple lower bounds to ensure numerical stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values via the 4\u2010parameter scaling law.\n    Inputs:\n      data_points: array\u2010like of shape (N,) or (N,1), data sizes.\n      params:      length\u20104 array [pA, p\u03b1, pC, pB] in log\u2010domain.\n    Output:\n      preds:       1D array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute predictions\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010parameter vector p = [log A, log \u03b1, log C, log B].\n    We minimize the MSE in log\u2010loss space for better relative\u2010error handling.\n    Returns:\n      p_opt: length\u20104 array of optimized log\u2010parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial natural\u2010domain guesses\n    y_min, y_max = np.min(y), np.max(y)\n    N_min, N_med = np.min(X), np.median(X)\n    A0     = max((y_max - y_min) * (N_min + 1.0) ** 0.5, 1e-3)\n    alpha0 = 0.5\n    C0     = max(N_med * 0.1, 1.0)\n    B0     = max(y_min * 0.9, 1e-3)\n    # Convert to log\u2010domain\n    p0 = np.log([A0, alpha0, C0, B0])\n    # Lower\u2010bounds on logs to keep parameters positive\n    lb = np.log(1e-8)\n    bounds = [(lb, None)] * 4\n\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # Avoid non\u2010positive preds (shouldn't happen with positive params)\n        pred = np.maximum(pred, 1e-12)\n        # MSE in log\u2010space => emphasizes relative error\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    res = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0129), Performs well on nmae (0.0975), Performs well on r2 (0.9871), Performs well on combined_score (0.9872)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5275)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter scaling law:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    where A, \u03b1, C, B > 0 are recovered via exp of log-params.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute term in a numerically stable way\n    # (X + C)^(-alpha) = exp(-alpha * log(X + C))\n    term = np.exp(-alpha * np.log(X + C))\n    return B + A * term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N)=B + A*(N+C)^(-\u03b1) by minimizing MSE.\n    Uses log-reparameterization and L-BFGS-B with sensible bounds.\n    Returns optimized log-domain params [log A, log \u03b1, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # 1) Initial guess for B (asymptotic floor)\n    B0 = max(np.min(y) * 0.5, 1e-6)\n    # 2) Initial guess for C (horizontal shift)\n    C0 = max(np.min(X) * 0.5, 1.0)\n\n    # Shifted loss must be positive\n    y_shift = y - B0\n    y_shift = np.clip(y_shift, 1e-8, None)\n\n    # Linear fit on log-log to estimate A and \u03b1:\n    #   log(y_shift) \u2248 intercept + slope * log(X + C0)\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logY, 1)\n    alpha0 = max(-slope, 1e-6)\n    A0     = max(np.exp(intercept), 1e-6)\n\n    # Pack initial log-parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Bounds in log-domain to keep parameters well-conditioned\n    bnds = [\n        (-30,             30),                                     # log A\n        (-10,             10),                                     # log \u03b1\n        (np.log(1e-6),    np.log(np.max(X) * 10 + 1e-6)),          # log C\n        (-30,             np.log(np.max(y) * 2 + 1e-6)),           # log B\n    ]\n\n    result = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bnds)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5175, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nHighly accurate 4-parameter rational\u2010power scaling law:\n    L(N) = B + A / (C + N^\u03b1)\nAll parameters {A, \u03b1, C, B} are constrained positive via an exponential\nreparameterization. Fitting is done with a Jacobian\u2010aided bounded\nLevenberg\u2013Marquardt (least_squares) for speed and robustness.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A / (C + N^\u03b1).\n    \n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes.\n      params:      array-like of length 4 in log\u2010domain [lnA, ln\u03b1, lnC, lnB].\n    \n    Returns:\n      np.ndarray of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # exponentiate to enforce positivity\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # rational\u2010power form\n    return B + A / (C + np.power(X, \u03b1))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N)=B + A/(C+N^\u03b1) to data.\n    Uses bounded Levenberg\u2013Marquardt with analytic Jacobian.\n    \n    Args:\n      data_points: array-like of shape (N,) or (N,1) with data sizes.\n      loss_values: array-like of shape (N,) with observed losses.\n    \n    Returns:\n      np.ndarray of length 4: optimized log\u2010domain parameters\n      [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # small constant for numeric stability\n    eps = 1e-12\n\n    # INITIAL GUESS in natural domain\n    # B0 ~ floor ~ min observed loss\n    B0 = max(np.min(y), eps)\n    # C0 ~ small shift\n    C0 = max(1.0, eps)\n    # \u03b10 ~ moderate decay\n    \u03b10 = 0.5\n    # A0 chosen so that peak loss ~ A/(C0 + N_min^\u03b10) + B0\n    A0 = max((np.max(y) - B0) * (C0 + np.min(X)**\u03b10), eps)\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # residuals\n    def _res(p):\n        return scaling_law_func(X, p) - y\n\n    # analytic Jacobian in log\u2010domain\n    def _jac(p):\n        A = np.exp(p[0])\n        \u03b1 = np.exp(p[1])\n        C = np.exp(p[2])\n        B = np.exp(p[3])\n        # t = C + X^\u03b1\n        t = C + np.power(X, \u03b1)\n        # dL/dp0 = dL/dA * dA/dp0 = (1/t) * A\n        d0 = A / t\n        # dL/dp1 = dL/d\u03b1 * d\u03b1/dp1\n        # dL/d\u03b1 = -A * X^\u03b1 * ln(X) / t^2\n        # d\u03b1/dp1 = \u03b1\n        logX = np.log(X + eps)\n        d1 = -A * np.power(X, \u03b1) * logX * \u03b1 / (t * t)\n        # dL/dp2 = dL/dC * dC/dp2 = (-A / t^2) * C\n        d2 = -A * C / (t * t)\n        # dL/dp3 = dL/dB * dB/dp3 = 1 * B\n        d3 = B * np.ones_like(X)\n        return np.vstack((d0, d1, d2, d3)).T\n\n    # bounds in log\u2010domain to keep natural params > 0\n    lower = np.log([1e-8, 1e-4, 1e-8, 1e-8])\n    upper = np.log([1e8,  10.0,  1e8,  1e2])\n\n    # solve with Levenberg\u2013Marquardt (trf) and analytic Jacobian\n    res = least_squares(\n        _res,\n        p0,\n        jac=_jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5341, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 4-parameter scaling law for supervised fine-tuning:\n    L(N) = B + A * (N + C)^(-\u03b1)\nParameters A, \u03b1, C, B are kept positive via log-reparameterization.\nFitting uses a combined normalized MSE+MAE objective and L-BFGS-B with sensible bounds\nfor improved stability and generalization.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes using the 4-parameter scaling law.\n\n    Args:\n        data_points: array-like of shape (N,) or (N,1), data set sizes.\n        params: array-like of 4 reals [pA, p\u03b1, pC, pB] in log-domain.\n\n    Returns:\n        preds: np.ndarray of shape (N,), predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n\n    # Unpack positive parameters via exp\n    A     = np.exp(p[0])   # amplitude\n    \u03b1     = np.exp(p[1])   # exponent\n    C     = np.exp(p[2])   # horizontal shift\n    B     = np.exp(p[3])   # asymptotic floor\n\n    # Compute scaling-law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points \u2192 loss_values.\n\n    Uses a combined normalized MSE+MAE objective to balance both error metrics.\n    Returns optimized parameters in the same log-domain as accepted by scaling_law_func.\n    \n    Args:\n        data_points: array-like of shape (N,) or (N,1), data set sizes.\n        loss_values: array-like of shape (N,), observed losses.\n\n    Returns:\n        p_opt: np.ndarray of shape (4,), optimized log-domain parameters.\n    \"\"\"\n    # Prepare flat arrays\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Precompute normalization constants for objective\n    y_min, y_max = np.min(y), np.max(y)\n    var_y = np.var(y) if np.var(y) > 1e-8 else 1.0\n    range_y = (y_max - y_min) if (y_max - y_min) > 1e-8 else 1.0\n\n    # Initial guess for B: just below min observed loss\n    B0 = max(y_min * 0.9, 1e-6)\n\n    # Shifted loss for linear regression to estimate A and \u03b1\n    y_shift = y - B0\n    y_shift[y_shift <= 0] = 1e-6\n    logX = np.log(X + 1.0)\n    logY = np.log(y_shift)\n    # Linear fit: logY \u2248 intercept + slope * logX\n    A_mat = np.vstack([logX, np.ones_like(logX)]).T\n    slope, intercept = np.linalg.lstsq(A_mat, logY, rcond=None)[0]\n    \u03b10 = max(-slope, 1e-3)\n    A0 = max(np.exp(intercept), 1e-6)\n\n    # Initial horizontal shift\n    C0 = 1.0\n\n    # Pack initial log-parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Combined normalized MSE + MAE objective\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        diff = pred - y\n        mse = np.mean(diff * diff)\n        mae = np.mean(np.abs(diff))\n        return (mse / var_y) + (mae / range_y)\n\n    # Bounds in log-domain for stability\n    b0 = (-20, 20)                            # pA\n    b1 = (-10, 10)                            # p\u03b1\n    b2 = (np.log(1e-3), np.log(np.max(X) * 10 + 1e-8))  # pC\n    b3 = (-20, np.log(y_max * 10 + 1e-8))      # pB\n    bounds = [b0, b1, b2, b3]\n\n    # Optimize with L-BFGS-B\n    result = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    p_opt = result.x if result.success else p0\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.5212, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4\u2010parameter scaling law with log\u2010space fitting to emphasize relative error.\nModel:   L(N) = B + A * (N + C)^(-\u03b1)\nParameters are kept strictly positive by reparameterizing in the log\u2010domain:\n    p = [log A, log \u03b1, log C, log B]\n\nWe fit p by minimizing the mean squared error on log-loss:\n    objective(p) = mean( (log L(N; p) \u2212 log y)^2 )\nusing L-BFGS-B with simple lower bounds to ensure numerical stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values via the 4\u2010parameter scaling law.\n    Inputs:\n      data_points: array\u2010like of shape (N,) or (N,1), data sizes.\n      params:      length\u20104 array [pA, p\u03b1, pC, pB] in log\u2010domain.\n    Output:\n      preds:       1D array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute predictions\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the log\u2010parameter vector p = [log A, log \u03b1, log C, log B].\n    We minimize the MSE in log\u2010loss space for better relative\u2010error handling.\n    Returns:\n      p_opt: length\u20104 array of optimized log\u2010parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial natural\u2010domain guesses\n    y_min, y_max = np.min(y), np.max(y)\n    N_min, N_med = np.min(X), np.median(X)\n    A0     = max((y_max - y_min) * (N_min + 1.0) ** 0.5, 1e-3)\n    alpha0 = 0.5\n    C0     = max(N_med * 0.1, 1.0)\n    B0     = max(y_min * 0.9, 1e-3)\n    # Convert to log\u2010domain\n    p0 = np.log([A0, alpha0, C0, B0])\n    # Lower\u2010bounds on logs to keep parameters positive\n    lb = np.log(1e-8)\n    bounds = [(lb, None)] * 4\n\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # Avoid non\u2010positive preds (shouldn't happen with positive params)\n        pred = np.maximum(pred, 1e-12)\n        # MSE in log\u2010space => emphasizes relative error\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    res = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5275, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter scaling law:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    where A, \u03b1, C, B > 0 are recovered via exp of log-params.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute term in a numerically stable way\n    # (X + C)^(-alpha) = exp(-alpha * log(X + C))\n    term = np.exp(-alpha * np.log(X + C))\n    return B + A * term\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N)=B + A*(N+C)^(-\u03b1) by minimizing MSE.\n    Uses log-reparameterization and L-BFGS-B with sensible bounds.\n    Returns optimized log-domain params [log A, log \u03b1, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # 1) Initial guess for B (asymptotic floor)\n    B0 = max(np.min(y) * 0.5, 1e-6)\n    # 2) Initial guess for C (horizontal shift)\n    C0 = max(np.min(X) * 0.5, 1.0)\n\n    # Shifted loss must be positive\n    y_shift = y - B0\n    y_shift = np.clip(y_shift, 1e-8, None)\n\n    # Linear fit on log-log to estimate A and \u03b1:\n    #   log(y_shift) \u2248 intercept + slope * log(X + C0)\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logY, 1)\n    alpha0 = max(-slope, 1e-6)\n    A0     = max(np.exp(intercept), 1e-6)\n\n    # Pack initial log-parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Bounds in log-domain to keep parameters well-conditioned\n    bnds = [\n        (-30,             30),                                     # log A\n        (-10,             10),                                     # log \u03b1\n        (np.log(1e-6),    np.log(np.max(X) * 10 + 1e-6)),          # log C\n        (-30,             np.log(np.max(y) * 2 + 1e-6)),           # log B\n    ]\n\n    result = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bnds)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5176, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law: rational\u2010power form\n  L(N) = B + A / (1 + (N / C)^\u03b1)\nwith 4 parameters (A, B, C, \u03b1), all kept positive via an exp\u2013reparameterization.\nFitting is performed via bounded Levenberg\u2013Marquardt (scipy.optimize.least_squares)\nwith an analytic Jacobian for robustness and speed.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss L(N) = B + A / (1 + (N / C)**alpha)\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes.\n      params:      array\u2010like of length 4 [logA, logB, logC, logalpha].\n\n    Returns:\n      np.ndarray of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n\n    # positive reparameterization\n    A     = np.exp(p[0])\n    B     = np.exp(p[1])\n    C     = np.exp(p[2])\n    alpha = np.exp(p[3])\n\n    # compute rational\u2010power prediction\n    t = (X / C) ** alpha\n    return B + A / (1.0 + t)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law L(N) = B + A/(1 + (N/C)^\u03b1)\n    to the provided data. Returns the parameters in log\u2010domain\n    [logA, logB, logC, logalpha].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Initial natural\u2010domain guesses\n    A0      = max(y.max() - y.min(), 1e-3)\n    B0      = max(y.min() * 0.9,   1e-6)\n    # geometric mean of X for scale C0\n    C0      = np.exp(np.mean(np.log(X + 1e-12)))\n    alpha0  = 0.5\n\n    # log\u2010domain starting point\n    p0 = np.log([A0, B0, C0, alpha0])\n\n    # reasonable bounds in log\u2010domain\n    A_min, A_max       = 1e-6, (y.max() - y.min()) * 10 + 1e-6\n    B_min, B_max       = 1e-6, y.max()\n    C_min, C_max       = 1e-3, X.max() * 1e3 + 1e-6\n    alpha_min, alpha_max = 1e-3, 10.0\n\n    lower = np.log([A_min,    B_min,    C_min,     alpha_min])\n    upper = np.log([A_max,    B_max,    C_max,     alpha_max])\n\n    # residual function\n    def resid(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        t     = (X / C) ** alpha\n        pred  = B + A / (1.0 + t)\n        return pred - y\n\n    # analytic Jacobian w.r.t. log\u2010domain parameters\n    def jac(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        t     = (X / C) ** alpha\n        one_pt = 1.0 + t\n\n        # partials w.r.t. natural params\n        dL_dA     = 1.0 / one_pt\n        dL_dB     = np.ones_like(X)\n        dL_dC     = A * alpha * t / (C * one_pt**2)\n        dL_dalpha = -A * t * np.log(X / C) / (one_pt**2)\n\n        # chain\u2010rule: d/d(log param) = natural\u2010derivative * natural\u2010param\n        return np.vstack([\n            dL_dA     * A,\n            dL_dB     * B,\n            dL_dC     * C,\n            dL_dalpha * alpha\n        ]).T\n\n    # run bounded least\u2010squares\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9\n    )\n\n    # return optimized log\u2010domain params (or fallback to p0)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced 4-parameter rational-power scaling law:\n    L(N) = B + A / (1 + (N / C)^\u03b1)\n\nParameters (A, B, C, \u03b1) are kept strictly positive via log\u2010reparameterization:\n    params = [logA, logB, logC, log\u03b1]\n\nFitting is performed with bounded Levenberg\u2013Marquardt (scipy.optimize.least_squares)\nand an analytic Jacobian for robustness, speed, and numerical stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values L(N) = B + A / (1 + (N/C)^alpha).\n\n    Args:\n      data_points: array-like of shape (N,) or (N,1), the data sizes.\n      params:      array-like of length 4 [logA, logB, logC, logalpha].\n\n    Returns:\n      np.ndarray of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover strictly positive parameters\n    A     = np.exp(p[0])\n    B     = np.exp(p[1])\n    C     = np.exp(p[2])\n    alpha = np.exp(p[3])\n    # Compute the rational-power form\n    t = (X / C) ** alpha\n    return B + A / (1.0 + t)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N) = B + A / (1 + (N/C)^\u03b1)\n    to the provided (data_points, loss_values).\n\n    Returns:\n      np.ndarray of length 4: optimized log-domain parameters\n      [logA, logB, logC, logalpha].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # ----- Initial natural-domain guesses -----\n    y_min, y_max = y.min(), y.max()\n    # Amplitude roughly covers observed loss range\n    A0 = max(y_max - y_min, 1e-6)\n    # Floor near the minimum observed loss\n    B0 = max(y_min * 0.9, 1e-6)\n    # Scale C at geometric mean of data sizes\n    C0 = np.exp(np.mean(np.log(X + 1e-12)))\n    # Moderate decay exponent\n    alpha0 = 0.5\n\n    # Pack into log-domain\n    p0 = np.log([A0, B0, C0, alpha0])\n\n    # ----- Bounds (log-domain) -----\n    # A: [1e-8, 10*(y_max - y_min)]\n    # B: [1e-8, y_max]\n    # C: [1e-6, 1e3 * max(X)]\n    # alpha: [1e-4, 10]\n    lower = np.log([\n        1e-8,\n        1e-8,\n        1e-6,\n        1e-4\n    ])\n    upper = np.log([\n        max(1e-6, (y_max - y_min) * 10),\n        max(1e-6, y_max),\n        max(1e-6, np.max(X) * 1e3),\n        10.0\n    ])\n\n    # ----- Residual and Jacobian -----\n    def residuals(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        t     = (X / C) ** alpha\n        pred  = B + A / (1.0 + t)\n        return pred - y\n\n    def jac(p):\n        A     = np.exp(p[0])\n        B     = np.exp(p[1])\n        C     = np.exp(p[2])\n        alpha = np.exp(p[3])\n        # reuse t = (X/C)^alpha\n        t = (X / C) ** alpha\n        one_pt = 1.0 + t\n\n        # Partial derivatives wrt natural parameters\n        # dL/dA = 1/(1 + t)\n        dA = 1.0 / one_pt\n        # dL/dB = 1\n        dB = np.ones_like(X)\n        # dL/dC = A * \u03b1 * t / (C * (1+t)^2)\n        dC = A * alpha * t / (C * one_pt**2)\n        # dL/d\u03b1 = -A * t * ln(X/C) / ( (1 + t)^2 )\n        dalpha = -A * t * np.log(X / C) / (one_pt**2)\n\n        # Chain rule: d/d(log param) = d/d(param) * param\n        return np.vstack([\n            dA     * A,\n            dB     * B,\n            dC     * C,\n            dalpha * alpha\n        ]).T\n\n    # ----- Solve with bounded Levenberg\u2013Marquardt -----\n    result = least_squares(\n        fun=residuals,\n        x0=p0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}