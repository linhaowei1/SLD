{"id": "2796d92e-3783-4bc1-a996-2cd978a38917", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4\u2010parameter power\u2010law scaling:\n      L(N) = B + A * (N + C)^(-alpha)\n    All parameters are positive via a log\u2010reparameterization.\n    Inputs:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes N.\n      params:      length\u20104 array [lnA, lnalpha, lnC, lnB] in log\u2010domain.\n    Returns:\n      preds: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters in log\u2010domain, got {p.size}\")\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns optimized log\u2010domain params [lnA, lnalpha, lnC, lnB].\n    Uses L\u2010BFGS\u2010B to minimize mean squared log\u2010error for robustness.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = 1e-8\n\n    # 1) Initial horizontal shift to avoid log(0)\n    C0 = max(np.median(X) * 0.05, eps)\n\n    # 2) Shift losses by floor and do a quick log\u2010log linear fit\n    y_min = np.min(y)\n    y_shift = np.maximum(y - y_min + eps, eps)\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logY, 1)\n    alpha0 = max(-slope, 1e-2)\n    A0     = max(np.exp(intercept), eps)\n\n    # 3) Asymptotic floor guess just below the minimum loss\n    B0 = max(y_min * 0.9, eps)\n\n    # 4) Pack into log\u2010domain and set bounds\n    p0 = np.log([A0, alpha0, C0, B0])\n    lower_bound = np.log(eps)\n    bounds = [(lower_bound, None)] * 4\n\n    # 5) Objective: MSE in log\u2010loss space (emphasizes relative errors)\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    # 6) Optimize\n    result = minimize(\n        _obj,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-9, \"gtol\": 1e-9}\n    )\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "938db670-adca-4ac4-bb8b-f4b8b27dc937", "generation": 2, "timestamp": 1754720203.244714, "iteration_found": 45, "metrics": {"nmse": 3.5788009533991727, "nmae": 1.9421434096831434, "r2": -2.5788009533991727, "combined_score": 0.21839778801863582}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.01976555918031745, "nmae": 0.11662438240937405, "r2": 0.9802344408196826, "combined_score": 0.9806175458639681}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0198\n- nmae: 0.1166\n- r2: 0.9802\n- combined_score: 0.9806\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0129, nmae: 0.0975, r2: 0.9871, combined_score: 0.9872\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0071, nmae: 0.0770, r2: 0.9929, combined_score: 0.9930\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5175)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a function of data size N using a four-parameter\n    rational\u2010power scaling law:\n        L(N) = B + A / (C + N^\u03b1)\n    All parameters {A, \u03b1, C, B} are constrained positive by\n    an exp\u2013reparameterization of the input `params`.\n    \n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes.\n      params: array\u2010like of length 4 (pA, p\u03b1, pC, pB) in log\u2010domain.\n      \n    Returns:\n      losses: np.ndarray of shape (N,), the predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # ensure positivity\n    A     = np.exp(p[0])   # amplitude\n    \u03b1     = np.exp(p[1])   # exponent\n    C     = np.exp(p[2])   # offset in denominator\n    B     = np.exp(p[3])   # asymptotic floor\n    # compute model\n    return B + A / (C + np.power(X, \u03b1))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N) = B + A/(C + N^\u03b1) to data.\n    Uses SciPy's Levenberg\u2013Marquardt (via least_squares) with simple\n    positivity bounds on the natural parameters in log\u2010domain.\n    \n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes.\n      loss_values: array\u2010like of shape (N,), the observed losses.\n      \n    Returns:\n      p_opt: np.ndarray of length 4, optimized parameters\n             in the same log\u2010domain form accepted by scaling_law_func.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    \n    # Initial natural\u2010domain guesses\n    # B0 ~ smallest observed loss (floor)\n    B0 = max(y.min(), 1e-6)\n    # C0 small positive constant\n    C0 = max(1.0, 1e-6)\n    # \u03b10 moderate decay exponent\n    \u03b10 = 0.5\n    # A0 chosen so that L(X.min) ~ A/(C0 + X.min^\u03b10) + B0 \u2248 max(y)\n    A0 = max((y.max() - B0) * (C0 + X.min()**\u03b10), 1e-6)\n    \n    # log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n    \n    # residual function for least_squares\n    def _residual(p):\n        return scaling_law_func(X, p) - y\n    \n    # lower/upper bounds in log\u2010domain to keep natural params > 0\n    lower = np.log([1e-6, 1e-3, 1e-6, 1e-6])\n    upper = np.log([1e6, 10.0, 1e6, 1e6])\n    \n    result = least_squares(\n        _residual,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        verbose=0\n    )\n    \n    # if optimization failed, return initial guess\n    return result.x if result.success else p0\n```\nKey features: Performs well on nmse (0.0071), Performs well on nmae (0.0770), Performs well on r2 (0.9929), Performs well on combined_score (0.9930)\n\n\n### Program 2 (Score: 0.5212)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law with log-domain fitting to emphasize relative errors.\nModel:   L(N) = B + A * (N + C)^(-alpha)\n\nParameters (A, alpha, C, B) are kept strictly positive via log-reparameterization:\n    p = [log A, log alpha, log C, log B]\n\nWe fit p by minimizing the mean squared error in log-loss space:\n    objective(p) = mean((log(pred) \u2212 log(y))^2)\nusing L-BFGS-B with simple lower bounds for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values via the 4-parameter scaling law.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1), data sizes.\n      params:      length-4 array [pA, p\u03b1, pC, pB] in log-domain.\n    Output:\n      preds:       1D array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n\n    # Recover strictly positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n\n    # Compute prediction\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Natural-domain initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    N_min, N_med = np.min(X), np.median(X)\n\n    A0     = max((y_max - y_min) * np.sqrt(N_min + 1.0), 1e-3)\n    alpha0 = 0.5\n    C0     = max(N_med * 0.1, 1.0)\n    B0     = max(y_min * 0.9, 1e-3)\n\n    # Convert to log-domain start point\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Lower-bound to keep all parameters positive\n    lb = np.log(1e-8)\n    bounds = [(lb, None)] * 4\n\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # Guard against non-positive predictions\n        pred = np.maximum(pred, 1e-12)\n        # MSE in log-space emphasizes relative error\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    res = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0129), Performs well on nmae (0.0975), Performs well on r2 (0.9871), Performs well on combined_score (0.9872)\n\n\n### Program 3 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5175, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a function of data size N using a four-parameter\n    rational\u2010power scaling law:\n        L(N) = B + A / (C + N^\u03b1)\n    All parameters {A, \u03b1, C, B} are constrained positive by\n    an exp\u2013reparameterization of the input `params`.\n    \n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes.\n      params: array\u2010like of length 4 (pA, p\u03b1, pC, pB) in log\u2010domain.\n      \n    Returns:\n      losses: np.ndarray of shape (N,), the predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # ensure positivity\n    A     = np.exp(p[0])   # amplitude\n    \u03b1     = np.exp(p[1])   # exponent\n    C     = np.exp(p[2])   # offset in denominator\n    B     = np.exp(p[3])   # asymptotic floor\n    # compute model\n    return B + A / (C + np.power(X, \u03b1))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law L(N) = B + A/(C + N^\u03b1) to data.\n    Uses SciPy's Levenberg\u2013Marquardt (via least_squares) with simple\n    positivity bounds on the natural parameters in log\u2010domain.\n    \n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes.\n      loss_values: array\u2010like of shape (N,), the observed losses.\n      \n    Returns:\n      p_opt: np.ndarray of length 4, optimized parameters\n             in the same log\u2010domain form accepted by scaling_law_func.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    \n    # Initial natural\u2010domain guesses\n    # B0 ~ smallest observed loss (floor)\n    B0 = max(y.min(), 1e-6)\n    # C0 small positive constant\n    C0 = max(1.0, 1e-6)\n    # \u03b10 moderate decay exponent\n    \u03b10 = 0.5\n    # A0 chosen so that L(X.min) ~ A/(C0 + X.min^\u03b10) + B0 \u2248 max(y)\n    A0 = max((y.max() - B0) * (C0 + X.min()**\u03b10), 1e-6)\n    \n    # log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n    \n    # residual function for least_squares\n    def _residual(p):\n        return scaling_law_func(X, p) - y\n    \n    # lower/upper bounds in log\u2010domain to keep natural params > 0\n    lower = np.log([1e-6, 1e-3, 1e-6, 1e-6])\n    upper = np.log([1e6, 10.0, 1e6, 1e6])\n    \n    result = least_squares(\n        _residual,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        verbose=0\n    )\n    \n    # if optimization failed, return initial guess\n    return result.x if result.success else p0\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # Shift data and enforce positivity\n    D_shift = D + d0\n    D_shift = np.where(D_shift > 0, D_shift, np.finfo(float).tiny)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law via bounded non-linear least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c: half the minimal observed loss (floor)\n    c0 = max(0.0, 0.5 * y.min())\n\n    # 2) Estimate A0 and alpha0 via a quick log-log linear fit\n    eps = np.finfo(float).tiny\n    y_shift = np.maximum(y - c0, eps)\n    logD = np.log(D + eps)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-4, -slope)\n    A0     = max(1e-4, np.exp(intercept))\n\n    # 3) Small horizontal shift\n    d0_0 = max(1.0, 0.1 * np.mean(D))\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds to ensure well-posedness\n    lower = [0.0,        1e-8,   1e-8,  0.0]\n    upper = [\n        y.min(),                     # c \u2264 min observed loss\n        (y.max() - y.min()) * 10 + 1e-3,  # A limited by output range\n        10.0,                        # reasonable exponent cap\n        D.min()                      # shift no larger than smallest D\n    ]\n\n    # Residuals for least_squares\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytical Jacobian for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, eps)\n        denom = D_shift**(-alpha)\n        J = np.empty((D.shape[0], 4), dtype=float)\n        J[:, 0] = 1.0                           # \u2202L/\u2202c\n        J[:, 1] = denom                        # \u2202L/\u2202A\n        J[:, 2] = -A * denom * np.log(D_shift)          # \u2202L/\u2202alpha\n        J[:, 3] = -A * alpha * D_shift**(-alpha - 1)    # \u2202L/\u2202d0\n        return J\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000,\n        verbose=0\n    )\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5212, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law with log-domain fitting to emphasize relative errors.\nModel:   L(N) = B + A * (N + C)^(-alpha)\n\nParameters (A, alpha, C, B) are kept strictly positive via log-reparameterization:\n    p = [log A, log alpha, log C, log B]\n\nWe fit p by minimizing the mean squared error in log-loss space:\n    objective(p) = mean((log(pred) \u2212 log(y))^2)\nusing L-BFGS-B with simple lower bounds for numerical stability.\n\"\"\"\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss values via the 4-parameter scaling law.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1), data sizes.\n      params:      length-4 array [pA, p\u03b1, pC, pB] in log-domain.\n    Output:\n      preds:       1D array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n\n    # Recover strictly positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n\n    # Compute prediction\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Natural-domain initial guesses\n    y_min, y_max = np.min(y), np.max(y)\n    N_min, N_med = np.min(X), np.median(X)\n\n    A0     = max((y_max - y_min) * np.sqrt(N_min + 1.0), 1e-3)\n    alpha0 = 0.5\n    C0     = max(N_med * 0.1, 1.0)\n    B0     = max(y_min * 0.9, 1e-3)\n\n    # Convert to log-domain start point\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Lower-bound to keep all parameters positive\n    lb = np.log(1e-8)\n    bounds = [(lb, None)] * 4\n\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # Guard against non-positive predictions\n        pred = np.maximum(pred, 1e-12)\n        # MSE in log-space emphasizes relative error\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    res = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.7497, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter scaling law: L(N) = B + A * (N + C)^(-\u03b1)\n    All parameters are stored in log-domain to enforce positivity.\n    \n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes N.\n      params:      array-like of length 4 [lnA, ln\u03b1, lnC, lnB].\n    Returns:\n      preds:       numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover strictly positive natural-domain parameters\n    A, \u03b1, C, B = np.exp(p)\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    We minimize mean squared error in log-loss space to emphasize\n    relative error, using L-BFGS-B with simple lower bounds.\n    \n    Returns:\n      p_opt: length-4 numpy array [lnA, ln\u03b1, lnC, lnB] of optimized params.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = 1e-8\n\n    # INITIAL GUESS for C: small shift to avoid zero\n    C0 = max(np.median(X) * 0.1, eps)\n\n    # SHIFTED LOSS to anchor A & \u03b1 via log-log regression\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    logX = np.log(X + C0)\n    logy = np.log(y_shift)\n    # Fit line: log y_shift \u2248 intercept + slope * log(X+C0)\n    slope, intercept = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-slope, 1e-2)           # ensure positive exponent\n    A0 = max(np.exp(intercept), eps)\n\n    # INITIAL GUESS for B: just below observed minimum\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Bounds to keep all latent params >= eps\n    lb = np.log(eps)\n    bounds = [(lb, None)] * 4\n\n    # Objective: mean squared error in log-loss space\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # clamp to avoid log of non-positive\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    # Optimize\n    result = minimize(_obj, p0, method=\"L-BFGS-B\", bounds=bounds)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.051), Excellent nmae (1.752)\n\n\n### Inspiration 5 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4\u2010parameter power\u2010law scaling:\n      L(N) = B + A * (N + C)^(-alpha)\n    All parameters are positive via a log\u2010reparameterization.\n    Inputs:\n      data_points: array\u2010like of shape (N,) or (N,1), the data sizes N.\n      params:      length\u20104 array [lnA, lnalpha, lnC, lnB] in log\u2010domain.\n    Returns:\n      preds: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters in log\u2010domain, got {p.size}\")\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns optimized log\u2010domain params [lnA, lnalpha, lnC, lnB].\n    Uses L\u2010BFGS\u2010B to minimize mean squared log\u2010error for robustness.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = 1e-8\n\n    # 1) Initial horizontal shift to avoid log(0)\n    C0 = max(np.median(X) * 0.05, eps)\n\n    # 2) Shift losses by floor and do a quick log\u2010log linear fit\n    y_min = np.min(y)\n    y_shift = np.maximum(y - y_min + eps, eps)\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logY, 1)\n    alpha0 = max(-slope, 1e-2)\n    A0     = max(np.exp(intercept), eps)\n\n    # 3) Asymptotic floor guess just below the minimum loss\n    B0 = max(y_min * 0.9, eps)\n\n    # 4) Pack into log\u2010domain and set bounds\n    p0 = np.log([A0, alpha0, C0, B0])\n    lower_bound = np.log(eps)\n    bounds = [(lower_bound, None)] * 4\n\n    # 5) Objective: MSE in log\u2010loss space (emphasizes relative errors)\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        pred = np.maximum(pred, eps)\n        return np.mean((np.log(pred) - np.log(y)) ** 2)\n\n    # 6) Optimize\n    result = minimize(\n        _obj,\n        p0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-9, \"gtol\": 1e-9}\n    )\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}