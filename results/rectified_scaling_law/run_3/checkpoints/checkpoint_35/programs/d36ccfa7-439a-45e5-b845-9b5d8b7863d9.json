{"id": "d36ccfa7-439a-45e5-b845-9b5d8b7863d9", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law in log\u2010domain:\n        L(N) = B + A * (N + C)^(-alpha)\n    params = [logA, logalpha, logC, logB]\n    \"\"\"\n    # Flatten input\n    N = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n\n    # Exponentiate to enforce positivity\n    logA, logalpha, logC, logB = p\n    A     = np.exp(logA)\n    alpha = np.exp(logalpha)\n    C     = np.exp(logC)\n    B     = np.exp(logB)\n\n    # Compute prediction\n    return B + A * (N + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law to (data_points, loss_values) by\n    minimizing the relative error: resid = (pred - y) / y.\n    Returns the optimized log\u2010domain params [logA, logalpha, logC, logB].\n    \"\"\"\n    # Flatten inputs\n    N = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Natural\u2010domain initial guesses\n    B0     = max(y.min() * 0.9, 1e-6)          # floor near smallest loss\n    A0     = max(y.max() - y.min(), 1e-6)      # amplitude of drop\n    alpha0 = 0.5                               # typical decay exponent\n    C0     = max(np.median(N) * 0.1, 1.0)      # small horizontal shift\n\n    # Pack into log\u2010domain\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residuals = relative errors\n    def resid(p):\n        pred = scaling_law_func(N, p)\n        return (pred - y) / y\n\n    # Analytic Jacobian of residuals w.r.t. log\u2010parameters\n    def jac(p):\n        logA, logalpha, logC, logB = p\n        A     = np.exp(logA)\n        alpha = np.exp(logalpha)\n        C     = np.exp(logC)\n        B     = np.exp(logB)\n\n        Npad = N + C\n        denom = Npad ** (-alpha)\n\n        # dL/d(logA) = A * denom\n        dA     = A * denom\n        # dL/d(logalpha) = -A * alpha * ln(Npad) * denom\n        dalpha = -A * alpha * np.log(Npad) * denom\n        # dL/d(logC) = -A * alpha * C * Npad^(-alpha-1)\n        dC     = -A * alpha * C * Npad ** (-alpha - 1)\n        # dL/d(logB) = B\n        dB     = B\n\n        # dr/dp = 1/y * dL/dp\n        inv_y = 1.0 / y\n        return np.vstack((dA * inv_y,\n                          dalpha * inv_y,\n                          dC * inv_y,\n                          dB * inv_y)).T\n\n    # Bound the log\u2010parameters to keep search stable\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Solve by bounded least\u2010squares\n    result = least_squares(\n        resid, p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-10,\n        ftol=1e-10,\n        max_nfev=2000,\n    )\n\n    # Return optimized log\u2010domain parameters (or fallback to p0)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b9446b0e-03ef-4fef-80bc-46ff627b3046", "generation": 3, "timestamp": 1754720088.257338, "iteration_found": 27, "metrics": {"nmse": 0.011946703725323343, "nmae": 0.0912633434919764, "r2": 0.9880532962746766, "combined_score": 0.9881943350560425}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.019215459816421337, "nmae": 0.11213594392020894, "r2": 0.9807845401835786, "combined_score": 0.9811468128437902}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0192\n- nmae: 0.1121\n- r2: 0.9808\n- combined_score: 0.9811\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1116, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A * (N + C)^(-alpha)\n    using 4 log-domain parameters p = [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points (N,) and loss_values (N,).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    y = np.asarray(loss_values).ravel()\n    N = X.size\n\n    # Initial guess in natural domain\n    A0     = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X), 1.0)\n    B0     = max(y.min(), 1e-3)\n    p0      = np.log([A0, alpha0, C0, B0])\n\n    # Pre-allocate to avoid re-alloc inside gradient\n    def obj_and_grad(p):\n        # Unpack params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Predictions and residual\n        pred = B + A * Xc**(-alpha)\n        diff = pred - y\n        # Objective: MSE\n        loss = np.mean(diff**2)\n\n        # Compute Jacobian dpred/dp_i\n        # dpred/dp0 = (Xc^(-alpha)) * A\n        # dpred/dp1 = -A * Xc^(-alpha) * ln(Xc) * alpha\n        # dpred/dp2 = -A * alpha * Xc^(-alpha-1) * C\n        # dpred/dp3 = B\n        j0 = A * Xc**(-alpha)\n        j1 = -A * Xc**(-alpha) * np.log(Xc) * alpha\n        j2 = -A * alpha * Xc**(-alpha - 1) * C\n        j3 = B\n\n        # Gradient of MSE: 2/N * sum(diff * jacobian)\n        grad = np.empty(4, dtype=float)\n        grad[0] = 2.0 * np.mean(diff * j0)\n        grad[1] = 2.0 * np.mean(diff * j1)\n        grad[2] = 2.0 * np.mean(diff * j2)\n        grad[3] = 2.0 * np.mean(diff * j3)\n\n        return loss, grad\n\n    # Reasonable bounds in log-domain to prevent runaway\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log alpha\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                   x0=p0,\n                   jac=lambda p: obj_and_grad(p)[1],\n                   bounds=bounds,\n                   method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial\n        return p0\n    return res.x\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5232)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved four\u2010parameter scaling law:\n    L(N) = B + A * (N + N0)^(-\u03b1)\nParameters are kept positive by optimizing in the log\u2010domain:\n    params = [logA, log\u03b1, logN0, logB]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L given data_sizes N and log\u2010domain parameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      params: array\u2010like of 4 elements [logA, log\u03b1, logN0, logB].\n\n    Returns:\n      preds: 1D numpy array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(\"Expected 4 parameters: [logA, log\u03b1, logN0, logB]\")\n    logA, log_alpha, log_N0, logB = p\n    A     = np.exp(logA)\n    \u03b1     = np.exp(log_alpha)\n    N0    = np.exp(log_N0)\n    B     = np.exp(logB)\n    # Compute scaling law: plateau B plus decaying term A*(N+N0)^(-\u03b1)\n    return B + A * (X + N0) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      loss_values: array\u2010like of shape (N,) of corresponding losses.\n\n    Returns:\n      p_opt: array of 4 optimized log\u2010domain parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n\n    # Natural\u2010domain initial guesses\n    B0 = max(np.min(y), 1e-6)                           # asymptotic floor \u2248 smallest loss\n    # amplitude \u2248 initial loss drop\n    A0 = max(np.mean(y[:max(1, len(y)//3)]) - B0, 1e-6)\n    \u03b10 = 0.5                                           # typical decay exponent\n    N_median = np.median(X)\n    N0_0 = max(N_median * 0.1, 1.0)                    # horizontal shift\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, N0_0, B0])\n\n    # Mean squared error objective\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bound\u2010aware quasi-Newton\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    # Return optimized params or fallback to initial if fit failed\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1116), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 3 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A * (N + C)^(-alpha)\n    using 4 log-domain parameters p = [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points (N,) and loss_values (N,).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    y = np.asarray(loss_values).ravel()\n    N = X.size\n\n    # Initial guess in natural domain\n    A0     = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X), 1.0)\n    B0     = max(y.min(), 1e-3)\n    p0      = np.log([A0, alpha0, C0, B0])\n\n    # Pre-allocate to avoid re-alloc inside gradient\n    def obj_and_grad(p):\n        # Unpack params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Predictions and residual\n        pred = B + A * Xc**(-alpha)\n        diff = pred - y\n        # Objective: MSE\n        loss = np.mean(diff**2)\n\n        # Compute Jacobian dpred/dp_i\n        # dpred/dp0 = (Xc^(-alpha)) * A\n        # dpred/dp1 = -A * Xc^(-alpha) * ln(Xc) * alpha\n        # dpred/dp2 = -A * alpha * Xc^(-alpha-1) * C\n        # dpred/dp3 = B\n        j0 = A * Xc**(-alpha)\n        j1 = -A * Xc**(-alpha) * np.log(Xc) * alpha\n        j2 = -A * alpha * Xc**(-alpha - 1) * C\n        j3 = B\n\n        # Gradient of MSE: 2/N * sum(diff * jacobian)\n        grad = np.empty(4, dtype=float)\n        grad[0] = 2.0 * np.mean(diff * j0)\n        grad[1] = 2.0 * np.mean(diff * j1)\n        grad[2] = 2.0 * np.mean(diff * j2)\n        grad[3] = 2.0 * np.mean(diff * j3)\n\n        return loss, grad\n\n    # Reasonable bounds in log-domain to prevent runaway\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log alpha\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                   x0=p0,\n                   jac=lambda p: obj_and_grad(p)[1],\n                   bounds=bounds,\n                   method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial\n        return p0\n    return res.x\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a refactored version that (1) keeps the same four\u2010parameter shifted power\u2010law form  \nL(N)=B + A\u00b7(N+C)^(-\u03b1) in log-domain, (2) uses a relative\u2010error least\u2010squares objective to better balance small and large losses,  \n(3) provides analytic Jacobians for speed, and (4) tightens and simplifies the bounds and init\u2013guess logic.  \n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law in log\u2010domain:\n        L(N) = B + A * (N + C)^(-alpha)\n    params = [logA, logalpha, logC, logB]\n    \"\"\"\n    # Flatten input\n    N = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n\n    # Exponentiate to enforce positivity\n    logA, logalpha, logC, logB = p\n    A     = np.exp(logA)\n    alpha = np.exp(logalpha)\n    C     = np.exp(logC)\n    B     = np.exp(logB)\n\n    # Compute prediction\n    return B + A * (N + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law to (data_points, loss_values) by\n    minimizing the relative error: resid = (pred - y) / y.\n    Returns the optimized log\u2010domain params [logA, logalpha, logC, logB].\n    \"\"\"\n    # Flatten inputs\n    N = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Natural\u2010domain initial guesses\n    B0     = max(y.min() * 0.9, 1e-6)          # floor near smallest loss\n    A0     = max(y.max() - y.min(), 1e-6)      # amplitude of drop\n    alpha0 = 0.5                               # typical decay exponent\n    C0     = max(np.median(N) * 0.1, 1.0)      # small horizontal shift\n\n    # Pack into log\u2010domain\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residuals = relative errors\n    def resid(p):\n        pred = scaling_law_func(N, p)\n        return (pred - y) / y\n\n    # Analytic Jacobian of residuals w.r.t. log\u2010parameters\n    def jac(p):\n        logA, logalpha, logC, logB = p\n        A     = np.exp(logA)\n        alpha = np.exp(logalpha)\n        C     = np.exp(logC)\n        B     = np.exp(logB)\n\n        Npad = N + C\n        denom = Npad ** (-alpha)\n\n        # dL/d(logA) = A * denom\n        dA     = A * denom\n        # dL/d(logalpha) = -A * alpha * ln(Npad) * denom\n        dalpha = -A * alpha * np.log(Npad) * denom\n        # dL/d(logC) = -A * alpha * C * Npad^(-alpha-1)\n        dC     = -A * alpha * C * Npad ** (-alpha - 1)\n        # dL/d(logB) = B\n        dB     = B\n\n        # dr/dp = 1/y * dL/dp\n        inv_y = 1.0 / y\n        return np.vstack((dA * inv_y,\n                          dalpha * inv_y,\n                          dC * inv_y,\n                          dB * inv_y)).T\n\n    # Bound the log\u2010parameters to keep search stable\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Solve by bounded least\u2010squares\n    result = least_squares(\n        resid, p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-10,\n        ftol=1e-10,\n        max_nfev=2000,\n    )\n\n    # Return optimized log\u2010domain parameters (or fallback to p0)\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\n\nExplanation of the key changes:\n\n\u2022 We switched from plain MSE to *relative\u2010error* least\u2010squares `(pred - y)/y`, which tends to balance errors across the full loss range and can improve both NMSE and NMAE.  \n\u2022 We kept all four parameters in the **log domain** for positivity and numerical stability, but simplified the bounds and initial\u2010guess logic.  \n\u2022 An **analytic Jacobian** is provided to speed up convergence and ensure consistency between residuals and gradients.  \n\u2022 The code is condensed for readability and maintainability while preserving the original API."]}}}