{"id": "ef140a1e-280b-4d28-9d35-edf44bea5030", "code": "# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law scaling:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    with all parameters A, \u03b1, C, B > 0 via exp-reparameterization.\n\n    Args:\n      data_points: array-like of shape (N,) or (N,1), data sizes.\n      params:      array-like of length 4 [lnA, ln\u03b1, lnC, lnB].\n\n    Returns:\n      1D numpy array of length N with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A, \u03b1, C, B = np.exp(p)   # all positive\n    return B + A * np.power(X + C, -\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law\n      L(N) = B + A*(N + C)^(-\u03b1)\n    to (data_points, loss_values) by bounded least-squares\n    minimizing a hybrid of absolute and relative errors.\n\n    Returns:\n      np.ndarray of length 4 [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    N = X.size\n    eps = 1e-8\n\n    # Initial guesses in natural domain\n    B0 = max(np.min(y) * 0.9, eps)           # asymptotic floor slightly below min loss\n    C0 = max(np.median(X) * 0.5, eps)        # horizontal shift\n    # Fit slope/intercept on log-log of (y - B0) vs (X + C0)\n    y_shift = np.clip(y - B0, eps, None)\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logY, 1)\n    \u03b10 = max(-slope, eps)                    # decay exponent\n    A0 = max(np.exp(intercept), eps)         # amplitude\n\n    # Pack into log-domain initial parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid residual: first absolute, then relative\n    \u03bb = 0.1\n    sqrt\u03bb = np.sqrt(\u03bb)\n\n    def residuals(p):\n        # Unpack positive parameters\n        A, \u03b1, C, B = np.exp(p)\n        # Model prediction\n        pred = B + A * (X + C) ** (-\u03b1)\n        # Absolute residual\n        r_abs = pred - y\n        # Relative residual\n        r_rel = sqrt\u03bb * (pred - y) / (y + eps)\n        return np.concatenate([r_abs, r_rel])\n\n    def jac(p):\n        A, \u03b1, C, B = np.exp(p)\n        Xc = X + C\n        base = Xc ** (-\u03b1)\n        # Derivatives of pred w.r.t log-parameters\n        dA     = base * A\n        d\u03b1     = -A * base * np.log(Xc) * \u03b1\n        dC     = -A * \u03b1 * C * Xc ** (-\u03b1 - 1)\n        dB     = B * np.ones_like(X)\n        # Stack into N\u00d74 Jacobian for pred\n        J_pred = np.vstack([dA, d\u03b1, dC, dB]).T\n        # Build full Jacobian for residuals (2N\u00d74)\n        J_abs = J_pred\n        J_rel = sqrt\u03bb * (J_pred / (y + eps)[:, None])\n        return np.vstack([J_abs, J_rel])\n\n    # Bounds in log-domain to keep parameters in a reasonable range\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  10.0,   20.0,  20.0])\n\n    # Solve bounded least-squares\n    result = least_squares(\n        residuals,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12,\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1f1a8760-0e35-4ec4-9326-4c4c1af6570c", "generation": 2, "timestamp": 1754720244.4123144, "iteration_found": 48, "metrics": {"nmse": 0.01904505179751847, "nmae": 0.11159967175161581, "r2": 0.9809549482024815, "combined_score": 0.9813108833962498}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.007070148609047272, "nmae": 0.0770431873915634, "r2": 0.9929298513909527, "combined_score": 0.9929794874579368}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0071\n- nmae: 0.0770\n- r2: 0.9929\n- combined_score: 0.9930\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1127, r2: 0.9808, combined_score: 0.9812\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0119, nmae: 0.0913, r2: 0.9881, combined_score: 0.9882\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0071, nmae: 0.0770, r2: 0.9929, combined_score: 0.9930\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5175)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Rational\u2010power 4\u2010parameter scaling law:\n      L(N) = B + A / (C + N^\u03b1)\n    with all parameters A, \u03b1, C, B > 0 via exp\u2013reparameterization.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), data sizes.\n      params:      array\u2010like of length 4 [lnA, ln\u03b1, lnC, lnB].\n\n    Returns:\n      Array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])   # amplitude\n    \u03b1     = np.exp(p[1])   # exponent\n    C     = np.exp(p[2])   # denominator offset\n    B     = np.exp(p[3])   # asymptotic floor\n    return B + A / (C + np.power(X, \u03b1))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law L(N)=B + A/(C+N^\u03b1) to data.\n    Uses Levenberg\u2013Marquardt via least_squares in log\u2010domain to\n    enforce positivity and improve numerical stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), data sizes.\n      loss_values: array\u2010like of shape (N,), observed losses.\n\n    Returns:\n      np.ndarray of length 4 [lnA, ln\u03b1, lnC, lnB], optimized log\u2010params.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # small constant to avoid zero issues\n    eps = 1e-8\n\n    # Initial guesses in natural domain\n    B0     = max(np.min(y), eps)                          # floor\n    C0     = max(1.0, eps)                                # denom offset\n    \u03b10     = 0.5                                          # exponent\n    A0     = max((np.max(y) - B0) * (C0 + X.min()**\u03b10), eps)\n\n    # Log\u2010domain parameter vector\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals for least_squares\n    def _res(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds in log domain to keep natural params positive\n    lower = np.log([eps, 1e-3, eps, eps])\n    upper = np.log([1e8,  10.0,    1e8,   1e8])\n\n    # Levenberg\u2013Marquardt style solve\n    res = least_squares(\n        _res,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0071), Performs well on nmae (0.0770), Performs well on r2 (0.9929), Performs well on combined_score (0.9930)\n\n\n### Program 2 (Score: 0.5199)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss via a 4-parameter shifted power law:\n        L(N) = B + A * (N + C)^(-alpha)\n    where params = [logA, logalpha, logC, logB] are log-domain.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with dataset sizes.\n      params:      length-4 array of real values (log-domain).\n    Returns:\n      preds:       1D numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    N = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute prediction\n    return B + A * (N + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    by minimizing relative residuals with a bounded least-squares solver.\n    Returns optimized log-domain parameters [logA, logalpha, logC, logB].\n    \"\"\"\n    # Prepare data\n    N = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = 1e-8  # to avoid zeros\n\n    # Initial guess for B: slightly below observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n    # Initial guess for C: small fraction of median N\n    C0 = max(np.median(N) * 0.1, eps)\n\n    # Shifted responses for log-linear regression: y_corr \u2248 A*(N + C0)^(-alpha)\n    y_corr = np.clip(y - B0, eps, None)\n    logX = np.log(N + C0)\n    logY = np.log(y_corr)\n    # Fit slope/intercept: logY \u2248 logA - alpha * logX\n    slope, intercept = np.polyfit(logX, logY, 1)\n    alpha0 = max(-slope, 0.1)\n    A0     = max(np.exp(intercept), eps)\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Define residuals: (pred - y) / (y + eps)\n    def resid(p):\n        pred = scaling_law_func(N, p)\n        return (pred - y) / (y + eps)\n\n    # Analytic Jacobian of residuals w.r.t. log-parameters\n    def jac(p):\n        logA, logalpha, logC, logB = p\n        A     = np.exp(logA)\n        alpha = np.exp(logalpha)\n        C     = np.exp(logC)\n        B     = np.exp(logB)\n\n        Npad = N + C\n        base = Npad ** (-alpha)\n\n        # Partial derivatives of L w.r.t. each log-parameter\n        dA     = A * base\n        dalpha = -A * alpha * base * np.log(Npad)\n        dC     = -A * alpha * C * Npad ** (-alpha - 1)\n        dB     = B * np.ones_like(N)\n\n        inv = 1.0 / (y + eps)\n        # Stack into Jacobian of residuals\n        return np.vstack((dA * inv,\n                          dalpha * inv,\n                          dC * inv,\n                          dB * inv)).T\n\n    # Bound log-parameters to keep optimization stable\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Solve by bounded least-squares\n    result = least_squares(resid, p0, jac=jac,\n                           bounds=(lower, upper),\n                           xtol=1e-12, ftol=1e-12, max_nfev=2000)\n\n    # Return optimized parameters or fallback to initial guess\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0119), Performs well on nmae (0.0913), Performs well on r2 (0.9881), Performs well on combined_score (0.9882)\n\n\n### Program 3 (Score: 0.5235)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L for given data sizes using a 4-parameter shifted power law:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    where A, \u03b1, C, B = exp(params).\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1)\n      params:      array-like of 4 elements [pA, p\u03b1, pC, pB] (log-domain)\n    Returns:\n      preds: (N,) array of predicted losses\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    p = np.ravel(params)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 params, got {p.size}\")\n    # re-parameterize to ensure positivity\n    A, alpha, C, B = np.exp(p)\n    return B + A * np.power(X + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (data_points, loss_values).\n    We optimize over log-parameters for positivity:\n      params = [log(A), log(\u03b1), log(C), log(B)].\n    Uses L-BFGS-B with analytic gradients for stability.\n    Returns:\n      params_opt: array of 4 log-parameters\n    \"\"\"\n    X = np.ravel(data_points).astype(float)\n    y = np.ravel(loss_values).astype(float)\n    # Natural-domain initial guesses\n    A0     = max(np.max(y) - np.min(y),       1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X),                1.0)\n    B0     = max(np.min(y),                   1e-3)\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    def obj_and_grad(p):\n        # unpack positive parameters\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # model prediction\n        f    = Xc**(-alpha)\n        pred = B + A * f\n        # residuals and loss\n        resid = pred - y\n        loss  = np.mean(resid**2)\n        # analytic gradient in log-space\n        # \u2202pred/\u2202A =      f\n        # \u2202pred/\u2202\u03b1 = -A*f*ln(Xc)\n        # \u2202pred/\u2202C = -A*\u03b1*Xc^(-\u03b1-1)\n        # \u2202pred/\u2202B =      1\n        dA      = 2 * np.mean(resid * f)                   * A\n        dalpha  = 2 * np.mean(resid * (-A * f * np.log(Xc))) * alpha\n        dC      = 2 * np.mean(resid * (-A * alpha * Xc**(-alpha-1))) * C\n        dB      = 2 * np.mean(resid)                        * B\n        grad = np.array([dA, dalpha, dC, dB], dtype=float)\n        return loss, grad\n\n    result = minimize(\n        fun=obj_and_grad,\n        x0=p0,\n        method=\"L-BFGS-B\",\n        jac=True,\n        options={\"ftol\":1e-12, \"gtol\":1e-8, \"maxiter\":500}\n    )\n    if not result.success:\n        # fall back to initial if optimization fails\n        return p0\n    return result.x\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1127), Performs well on r2 (0.9808), Performs well on combined_score (0.9812)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A * (N + C)^(-alpha)\n    using 4 log-domain parameters p = [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A, alpha, C, B = np.exp(p)\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to data_points (N,) and loss_values (N,).\n    Returns optimized log-domain parameters [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).ravel()\n    y = np.asarray(loss_values).ravel()\n    N = X.size\n\n    # Initial guess in natural domain\n    A0     = max(y.max() - y.min(), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(X), 1.0)\n    B0     = max(y.min(), 1e-3)\n    p0      = np.log([A0, alpha0, C0, B0])\n\n    # Pre-allocate to avoid re-alloc inside gradient\n    def obj_and_grad(p):\n        # Unpack params\n        A, alpha, C, B = np.exp(p)\n        Xc = X + C\n        # Predictions and residual\n        pred = B + A * Xc**(-alpha)\n        diff = pred - y\n        # Objective: MSE\n        loss = np.mean(diff**2)\n\n        # Compute Jacobian dpred/dp_i\n        # dpred/dp0 = (Xc^(-alpha)) * A\n        # dpred/dp1 = -A * Xc^(-alpha) * ln(Xc) * alpha\n        # dpred/dp2 = -A * alpha * Xc^(-alpha-1) * C\n        # dpred/dp3 = B\n        j0 = A * Xc**(-alpha)\n        j1 = -A * Xc**(-alpha) * np.log(Xc) * alpha\n        j2 = -A * alpha * Xc**(-alpha - 1) * C\n        j3 = B\n\n        # Gradient of MSE: 2/N * sum(diff * jacobian)\n        grad = np.empty(4, dtype=float)\n        grad[0] = 2.0 * np.mean(diff * j0)\n        grad[1] = 2.0 * np.mean(diff * j1)\n        grad[2] = 2.0 * np.mean(diff * j2)\n        grad[3] = 2.0 * np.mean(diff * j3)\n\n        return loss, grad\n\n    # Reasonable bounds in log-domain to prevent runaway\n    bounds = [(-20, 20),   # log A\n              (-5,  5),    # log alpha\n              (-20, 20),   # log C\n              (-20, 20)]   # log B\n\n    res = minimize(fun=lambda p: obj_and_grad(p)[0],\n                   x0=p0,\n                   jac=lambda p: obj_and_grad(p)[1],\n                   bounds=bounds,\n                   method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial\n        return p0\n    return res.x\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5232)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved four\u2010parameter scaling law:\n    L(N) = B + A * (N + N0)^(-\u03b1)\nParameters are kept positive by optimizing in the log\u2010domain:\n    params = [logA, log\u03b1, logN0, logB]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L given data_sizes N and log\u2010domain parameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      params: array\u2010like of 4 elements [logA, log\u03b1, logN0, logB].\n\n    Returns:\n      preds: 1D numpy array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(\"Expected 4 parameters: [logA, log\u03b1, logN0, logB]\")\n    logA, log_alpha, log_N0, logB = p\n    A     = np.exp(logA)\n    \u03b1     = np.exp(log_alpha)\n    N0    = np.exp(log_N0)\n    B     = np.exp(logB)\n    # Compute scaling law: plateau B plus decaying term A*(N+N0)^(-\u03b1)\n    return B + A * (X + N0) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      loss_values: array\u2010like of shape (N,) of corresponding losses.\n\n    Returns:\n      p_opt: array of 4 optimized log\u2010domain parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n\n    # Natural\u2010domain initial guesses\n    B0 = max(np.min(y), 1e-6)                           # asymptotic floor \u2248 smallest loss\n    # amplitude \u2248 initial loss drop\n    A0 = max(np.mean(y[:max(1, len(y)//3)]) - B0, 1e-6)\n    \u03b10 = 0.5                                           # typical decay exponent\n    N_median = np.median(X)\n    N0_0 = max(N_median * 0.1, 1.0)                    # horizontal shift\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, N0_0, B0])\n\n    # Mean squared error objective\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bound\u2010aware quasi-Newton\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    # Return optimized params or fallback to initial if fit failed\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8368, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters (A, \u03b1, C, B) are kept strictly positive via log-domain reparameterization.\nFitting minimizes a hybrid loss combining absolute and relative errors for robustness.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict losses using L(N) = B + A*(N + C)^(-\u03b1).\n    \n    Args:\n      data_points: array-like of shape (N,) or (N,1) containing data sizes N.\n      params:      length-4 array in log-domain [logA, log\u03b1, logC, logB].\n    \n    Returns:\n      preds: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    # Flatten and cast\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    logA, log_alpha, logC, logB = params\n    A     = np.exp(logA)\n    alpha = np.exp(log_alpha)\n    C     = np.exp(logC)\n    B     = np.exp(logB)\n    # Compute scaling-law prediction\n    return B + A * (X + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    \n    Returns:\n      Optimized params in log-domain [logA, log\u03b1, logC, logB].\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = 1e-8\n\n    # 1) Initial guess for horizontal shift C: near smallest N\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on shifted loss to estimate A and \u03b1\n    y_shift = np.clip(y - np.min(y) + eps, eps, None)\n    logX = np.log(X + C0)\n    logy = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logy, 1)\n    alpha0 = max(-slope, eps)         # ensure positive exponent\n    A0     = max(np.exp(intercept), eps)\n    \n    # 3) Initial guess for asymptote B: just below observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Hybrid objective: absolute MSE + 0.1 * relative (log-space) MSE\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        pred = np.clip(pred, eps, None)\n        mse_abs = np.mean((pred - y) ** 2)\n        mse_rel = np.mean((np.log(pred) - np.log(y + eps)) ** 2)\n        return mse_abs + 0.1 * mse_rel\n\n    # Optimize with L-BFGS-B for stability\n    result = minimize(objective, p0, method=\"L-BFGS-B\")\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.333), Excellent nmae (2.159)\n\n\n### Inspiration 2 (Score: 0.5199, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss via a 4-parameter shifted power law:\n        L(N) = B + A * (N + C)^(-alpha)\n    where params = [logA, logalpha, logC, logB] are log-domain.\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with dataset sizes.\n      params:      length-4 array of real values (log-domain).\n    Returns:\n      preds:       1D numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    N = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"scaling_law_func expects 4 parameters, got {p.size}\")\n    # Recover positive parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute prediction\n    return B + A * (N + C) ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law L(N) = B + A*(N + C)^(-alpha)\n    by minimizing relative residuals with a bounded least-squares solver.\n    Returns optimized log-domain parameters [logA, logalpha, logC, logB].\n    \"\"\"\n    # Prepare data\n    N = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = 1e-8  # to avoid zeros\n\n    # Initial guess for B: slightly below observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n    # Initial guess for C: small fraction of median N\n    C0 = max(np.median(N) * 0.1, eps)\n\n    # Shifted responses for log-linear regression: y_corr \u2248 A*(N + C0)^(-alpha)\n    y_corr = np.clip(y - B0, eps, None)\n    logX = np.log(N + C0)\n    logY = np.log(y_corr)\n    # Fit slope/intercept: logY \u2248 logA - alpha * logX\n    slope, intercept = np.polyfit(logX, logY, 1)\n    alpha0 = max(-slope, 0.1)\n    A0     = max(np.exp(intercept), eps)\n\n    # Pack initial log-domain parameters\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Define residuals: (pred - y) / (y + eps)\n    def resid(p):\n        pred = scaling_law_func(N, p)\n        return (pred - y) / (y + eps)\n\n    # Analytic Jacobian of residuals w.r.t. log-parameters\n    def jac(p):\n        logA, logalpha, logC, logB = p\n        A     = np.exp(logA)\n        alpha = np.exp(logalpha)\n        C     = np.exp(logC)\n        B     = np.exp(logB)\n\n        Npad = N + C\n        base = Npad ** (-alpha)\n\n        # Partial derivatives of L w.r.t. each log-parameter\n        dA     = A * base\n        dalpha = -A * alpha * base * np.log(Npad)\n        dC     = -A * alpha * C * Npad ** (-alpha - 1)\n        dB     = B * np.ones_like(N)\n\n        inv = 1.0 / (y + eps)\n        # Stack into Jacobian of residuals\n        return np.vstack((dA * inv,\n                          dalpha * inv,\n                          dC * inv,\n                          dB * inv)).T\n\n    # Bound log-parameters to keep optimization stable\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    # Solve by bounded least-squares\n    result = least_squares(resid, p0, jac=jac,\n                           bounds=(lower, upper),\n                           xtol=1e-12, ftol=1e-12, max_nfev=2000)\n\n    # Return optimized parameters or fallback to initial guess\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure the shift is positive\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least-squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Estimate c\u2080 as a floor below the minimum observed loss\n    c0 = max(0.0, y.min() * 0.9)\n\n    # 2) Remove floor and do a quick log\u2013log linear fit for A\u2080, \u03b1\u2080\n    y_shift = y - c0\n    y_shift = np.clip(y_shift, 1e-12, None)\n    logslope, logintercept = np.polyfit(np.log(D + 1e-12), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0 = max(1e-4, np.exp(logintercept))\n\n    # 3) Small horizontal shift initial guess\n    d0_0 = max(1e-6, 0.1 * D.min())\n\n    # 4) Pack initial guess\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 5) Bounds for (c, A, alpha, d0)\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [y.min(), np.inf, 5.0, D.max()]\n\n    # 6) Define residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # 7) Solve with automatic finite-difference Jacobian\n    result = least_squares(\n        resid,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=1500,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5232, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved four\u2010parameter scaling law:\n    L(N) = B + A * (N + N0)^(-\u03b1)\nParameters are kept positive by optimizing in the log\u2010domain:\n    params = [logA, log\u03b1, logN0, logB]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L given data_sizes N and log\u2010domain parameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      params: array\u2010like of 4 elements [logA, log\u03b1, logN0, logB].\n\n    Returns:\n      preds: 1D numpy array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(\"Expected 4 parameters: [logA, log\u03b1, logN0, logB]\")\n    logA, log_alpha, log_N0, logB = p\n    A     = np.exp(logA)\n    \u03b1     = np.exp(log_alpha)\n    N0    = np.exp(log_N0)\n    B     = np.exp(logB)\n    # Compute scaling law: plateau B plus decaying term A*(N+N0)^(-\u03b1)\n    return B + A * (X + N0) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      loss_values: array\u2010like of shape (N,) of corresponding losses.\n\n    Returns:\n      p_opt: array of 4 optimized log\u2010domain parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n\n    # Natural\u2010domain initial guesses\n    B0 = max(np.min(y), 1e-6)                           # asymptotic floor \u2248 smallest loss\n    # amplitude \u2248 initial loss drop\n    A0 = max(np.mean(y[:max(1, len(y)//3)]) - B0, 1e-6)\n    \u03b10 = 0.5                                           # typical decay exponent\n    N_median = np.median(X)\n    N0_0 = max(N_median * 0.1, 1.0)                    # horizontal shift\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, N0_0, B0])\n\n    # Mean squared error objective\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bound\u2010aware quasi-Newton\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    # Return optimized params or fallback to initial if fit failed\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Rational\u2010power 4\u2010parameter scaling law:\n      L(N) = B + A / (C + N^\u03b1)\n    with all parameters A, \u03b1, C, B > 0 via exp\u2013reparameterization.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), data sizes.\n      params:      array\u2010like of length 4 [lnA, ln\u03b1, lnC, lnB].\n\n    Returns:\n      Array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])   # amplitude\n    \u03b1     = np.exp(p[1])   # exponent\n    C     = np.exp(p[2])   # denominator offset\n    B     = np.exp(p[3])   # asymptotic floor\n    return B + A / (C + np.power(X, \u03b1))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law L(N)=B + A/(C+N^\u03b1) to data.\n    Uses Levenberg\u2013Marquardt via least_squares in log\u2010domain to\n    enforce positivity and improve numerical stability.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1), data sizes.\n      loss_values: array\u2010like of shape (N,), observed losses.\n\n    Returns:\n      np.ndarray of length 4 [lnA, ln\u03b1, lnC, lnB], optimized log\u2010params.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # small constant to avoid zero issues\n    eps = 1e-8\n\n    # Initial guesses in natural domain\n    B0     = max(np.min(y), eps)                          # floor\n    C0     = max(1.0, eps)                                # denom offset\n    \u03b10     = 0.5                                          # exponent\n    A0     = max((np.max(y) - B0) * (C0 + X.min()**\u03b10), eps)\n\n    # Log\u2010domain parameter vector\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Residuals for least_squares\n    def _res(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds in log domain to keep natural params positive\n    lower = np.log([eps, 1e-3, eps, eps])\n    upper = np.log([1e8,  10.0,    1e8,   1e8])\n\n    # Levenberg\u2013Marquardt style solve\n    res = least_squares(\n        _res,\n        p0,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12\n    )\n\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law scaling:\n      L(N) = B + A * (N + C)^(-\u03b1)\n    with all parameters A, \u03b1, C, B > 0 via exp-reparameterization.\n\n    Args:\n      data_points: array-like of shape (N,) or (N,1), data sizes.\n      params:      array-like of length 4 [lnA, ln\u03b1, lnC, lnB].\n\n    Returns:\n      1D numpy array of length N with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A, \u03b1, C, B = np.exp(p)   # all positive\n    return B + A * np.power(X + C, -\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power-law\n      L(N) = B + A*(N + C)^(-\u03b1)\n    to (data_points, loss_values) by bounded least-squares\n    minimizing a hybrid of absolute and relative errors.\n\n    Returns:\n      np.ndarray of length 4 [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    N = X.size\n    eps = 1e-8\n\n    # Initial guesses in natural domain\n    B0 = max(np.min(y) * 0.9, eps)           # asymptotic floor slightly below min loss\n    C0 = max(np.median(X) * 0.5, eps)        # horizontal shift\n    # Fit slope/intercept on log-log of (y - B0) vs (X + C0)\n    y_shift = np.clip(y - B0, eps, None)\n    logX = np.log(X + C0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logX, logY, 1)\n    \u03b10 = max(-slope, eps)                    # decay exponent\n    A0 = max(np.exp(intercept), eps)         # amplitude\n\n    # Pack into log-domain initial parameters\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid residual: first absolute, then relative\n    \u03bb = 0.1\n    sqrt\u03bb = np.sqrt(\u03bb)\n\n    def residuals(p):\n        # Unpack positive parameters\n        A, \u03b1, C, B = np.exp(p)\n        # Model prediction\n        pred = B + A * (X + C) ** (-\u03b1)\n        # Absolute residual\n        r_abs = pred - y\n        # Relative residual\n        r_rel = sqrt\u03bb * (pred - y) / (y + eps)\n        return np.concatenate([r_abs, r_rel])\n\n    def jac(p):\n        A, \u03b1, C, B = np.exp(p)\n        Xc = X + C\n        base = Xc ** (-\u03b1)\n        # Derivatives of pred w.r.t log-parameters\n        dA     = base * A\n        d\u03b1     = -A * base * np.log(Xc) * \u03b1\n        dC     = -A * \u03b1 * C * Xc ** (-\u03b1 - 1)\n        dB     = B * np.ones_like(X)\n        # Stack into N\u00d74 Jacobian for pred\n        J_pred = np.vstack([dA, d\u03b1, dC, dB]).T\n        # Build full Jacobian for residuals (2N\u00d74)\n        J_abs = J_pred\n        J_rel = sqrt\u03bb * (J_pred / (y + eps)[:, None])\n        return np.vstack([J_abs, J_rel])\n\n    # Bounds in log-domain to keep parameters in a reasonable range\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  10.0,   20.0,  20.0])\n\n    # Solve bounded least-squares\n    result = least_squares(\n        residuals,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-12,\n        xtol=1e-12,\n        gtol=1e-12,\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```"]}}}