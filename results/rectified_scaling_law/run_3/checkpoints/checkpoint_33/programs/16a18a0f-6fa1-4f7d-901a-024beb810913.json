{"id": "16a18a0f-6fa1-4f7d-901a-024beb810913", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent\n      d0    = data-size shift\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law L(D)=c + A*(D+d0)^(-alpha)\n    by optimizing in the log-domain to enforce positivity.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic natural\u2010domain initial guesses\n    c0      = max(0.0, np.min(y) * 0.9)\n    A0      = max(1e-6, np.max(y) - np.min(y))\n    alpha0  = 0.5\n    d0_0    = max(1e-6, np.min(D) * 0.5)\n\n    # Move to log-domain for unconstrained optimization\n    q0 = np.log([c0, A0, alpha0, d0_0])\n\n    # Objective: mean squared error between model and data\n    def _mse(q):\n        p     = np.exp(q)\n        pred  = scaling_law_func(D, p)\n        return np.mean((pred - y)**2)\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(\n        _mse,\n        q0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    q_opt = res.x if res.success else q0\n    # Transform back to natural domain\n    return np.exp(q_opt)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "70e73e56-9814-45f0-a1c8-5e7f1c5f2baf", "generation": 2, "timestamp": 1754720028.0733483, "iteration_found": 22, "metrics": {"nmse": 0.02120125547784563, "nmae": 0.12471212687368775, "r2": 0.9787987445221543, "combined_score": 0.9792389057846145}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.02015918458171027, "nmae": 0.11928476422449608, "r2": 0.9798408154182897, "combined_score": 0.9802391774868194}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1116, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5232)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved four\u2010parameter scaling law:\n    L(N) = B + A * (N + N0)^(-\u03b1)\nParameters are kept positive by optimizing in the log\u2010domain:\n    params = [logA, log\u03b1, logN0, logB]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L given data_sizes N and log\u2010domain parameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      params: array\u2010like of 4 elements [logA, log\u03b1, logN0, logB].\n\n    Returns:\n      preds: 1D numpy array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(\"Expected 4 parameters: [logA, log\u03b1, logN0, logB]\")\n    logA, log_alpha, log_N0, logB = p\n    A     = np.exp(logA)\n    \u03b1     = np.exp(log_alpha)\n    N0    = np.exp(log_N0)\n    B     = np.exp(logB)\n    # Compute scaling law: plateau B plus decaying term A*(N+N0)^(-\u03b1)\n    return B + A * (X + N0) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      loss_values: array\u2010like of shape (N,) of corresponding losses.\n\n    Returns:\n      p_opt: array of 4 optimized log\u2010domain parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n\n    # Natural\u2010domain initial guesses\n    B0 = max(np.min(y), 1e-6)                           # asymptotic floor \u2248 smallest loss\n    # amplitude \u2248 initial loss drop\n    A0 = max(np.mean(y[:max(1, len(y)//3)]) - B0, 1e-6)\n    \u03b10 = 0.5                                           # typical decay exponent\n    N_median = np.median(X)\n    N0_0 = max(N_median * 0.1, 1.0)                    # horizontal shift\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, N0_0, B0])\n\n    # Mean squared error objective\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bound\u2010aware quasi-Newton\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    # Return optimized params or fallback to initial if fit failed\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1116), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n### Program 3 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5232, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nImproved four\u2010parameter scaling law:\n    L(N) = B + A * (N + N0)^(-\u03b1)\nParameters are kept positive by optimizing in the log\u2010domain:\n    params = [logA, log\u03b1, logN0, logB]\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L given data_sizes N and log\u2010domain parameters.\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      params: array\u2010like of 4 elements [logA, log\u03b1, logN0, logB].\n\n    Returns:\n      preds: 1D numpy array of predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(\"Expected 4 parameters: [logA, log\u03b1, logN0, logB]\")\n    logA, log_alpha, log_N0, logB = p\n    A     = np.exp(logA)\n    \u03b1     = np.exp(log_alpha)\n    N0    = np.exp(log_N0)\n    B     = np.exp(logB)\n    # Compute scaling law: plateau B plus decaying term A*(N+N0)^(-\u03b1)\n    return B + A * (X + N0) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4\u2010parameter scaling law to (data_points, loss_values).\n\n    Args:\n      data_points: array\u2010like of shape (N,) or (N,1) of data sizes.\n      loss_values: array\u2010like of shape (N,) of corresponding losses.\n\n    Returns:\n      p_opt: array of 4 optimized log\u2010domain parameters.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n\n    # Natural\u2010domain initial guesses\n    B0 = max(np.min(y), 1e-6)                           # asymptotic floor \u2248 smallest loss\n    # amplitude \u2248 initial loss drop\n    A0 = max(np.mean(y[:max(1, len(y)//3)]) - B0, 1e-6)\n    \u03b10 = 0.5                                           # typical decay exponent\n    N_median = np.median(X)\n    N0_0 = max(N_median * 0.1, 1.0)                    # horizontal shift\n\n    # pack into log\u2010domain\n    p0 = np.log([A0, \u03b10, N0_0, B0])\n\n    # Mean squared error objective\n    def _mse(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bound\u2010aware quasi-Newton\n    res = minimize(\n        _mse,\n        p0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    # Return optimized params or fallback to initial if fit failed\n    return res.x if res.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent\n      d0    = data-size shift\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law L(D)=c + A*(D+d0)^(-alpha)\n    by optimizing in the log-domain to enforce positivity.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic natural\u2010domain initial guesses\n    c0      = max(0.0, np.min(y) * 0.9)\n    A0      = max(1e-6, np.max(y) - np.min(y))\n    alpha0  = 0.5\n    d0_0    = max(1e-6, np.min(D) * 0.5)\n\n    # Move to log-domain for unconstrained optimization\n    q0 = np.log([c0, A0, alpha0, d0_0])\n\n    # Objective: mean squared error between model and data\n    def _mse(q):\n        p     = np.exp(q)\n        pred  = scaling_law_func(D, p)\n        return np.mean((pred - y)**2)\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(\n        _mse,\n        q0,\n        method=\"L-BFGS-B\",\n        options={\"ftol\": 1e-12, \"maxiter\": 5000}\n    )\n\n    q_opt = res.x if res.success else q0\n    # Transform back to natural domain\n    return np.exp(q_opt)\n# EVOLVE-BLOCK-END\n```"]}}}