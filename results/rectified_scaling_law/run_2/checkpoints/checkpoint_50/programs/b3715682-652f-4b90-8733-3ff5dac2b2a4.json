{"id": "b3715682-652f-4b90-8733-3ff5dac2b2a4", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power law with log-domain residuals\nand robust fitting to emphasize relative errors.\n\nModel:\n  L(D) = c + A * (D + d0)^(-alpha)\n\nWe fit parameters p = [c, A, alpha, d0] by minimizing\n  sum_i \u03c1( log(L(D_i; p)) - log(y_i) )\nwith a soft L1 loss \u03c1, to balance absolute and relative errors.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss for data sizes using a shifted power law.\n    Inputs:\n      data_points: array-like, shape (N,1) or (N,)\n      params:      length-4 array [c, A, alpha, d0]\n    Outputs:\n      preds:       array of shape (N,)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # small epsilon for numerical stability\n    eps = 1e-12\n    D_shift = np.maximum(D + d0, eps)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law by robust log-domain least-squares.\n    Returns:\n      params: array [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)                    # max(y) - min(y)\n    alpha0 = 0.5\n    d0_0   = max(0.0, 0.1 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for parameters to ensure stability\n    lower = [0.0,                0.0,   0.0,       0.0]\n    upper = [np.min(y),  10.0 * A0 + 1.0,   5.0,   np.max(D)]\n\n    # Residuals in log-domain: log(model) - log(observed)\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return np.log(pred) - np.log(y)\n\n    # Analytic Jacobian of the log-residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        eps = 1e-12\n        D_shift = np.maximum(D + d0, eps)\n        denom   = D_shift**(-alpha)\n        pred     = c + A * denom\n        # partial derivatives of L wrt p\n        dL_dc     = np.ones_like(D)\n        dL_dA     = denom\n        dL_dalpha = -A * np.log(D_shift) * denom\n        dL_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # Jacobian of log-residual = (1 / pred) * dL/dp\n        inv_pred = 1.0 / pred\n        return np.vstack([\n            dL_dc * inv_pred,\n            dL_dA * inv_pred,\n            dL_dalpha * inv_pred,\n            dL_dd0 * inv_pred\n        ]).T\n\n    # Solve with a soft-L1 robust loss to balance absolute & relative errors\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n    return result.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "9e0c0af5-0448-453f-b80f-fa94a4818343", "generation": 2, "timestamp": 1754719642.6324172, "iteration_found": 22, "metrics": {"nmse": 0.012855380912663349, "nmae": 0.09771477610758063, "r2": 0.9871446190873366, "combined_score": 0.987307782379475}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.02015944935495397, "nmae": 0.11928537827139152, "r2": 0.979840550645046, "combined_score": 0.9802389230745245}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n### Program 2 (Score: 0.5249)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRefined 4-parameter shifted power law:\n  L(D) = c + A * (D + d0)^(-alpha)\nParameters:\n  c     : asymptotic minimum loss\n  A     : amplitude\n  alpha : decay exponent (>0)\n  d0    : data-size shift (>=0) for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 scaling-law parameters.\n    data_points: array-like, shape (N,1) or (N,)\n    params:      array-like, length=4 -> [c, A, alpha, d0]\n    returns:     array of length N\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (D, L) via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)  # max(y)-min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, 0.5 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Reasonable bounds for stability\n    lower = [0.0,        0.0,     0.0,     0.0]\n    upper = [2*np.max(y), 10*A0+1, 10.0,  5*np.max(D)]\n\n    # Residuals = model - observed\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytic Jacobian for speed & stability\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift ** (-alpha)\n        logD    = np.log(D_shift)\n        # \u2202L/\u2202c = 1\n        # \u2202L/\u2202A = D_shift^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(D_shift) * D_shift^(-alpha)\n        # \u2202L/\u2202d0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack([\n            np.ones_like(D),\n            denom,\n            -A * logD * denom,\n            -A * alpha * D_shift ** (-alpha - 1)\n        ]).T\n\n    # Solve bounded least-squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRefined 4-parameter shifted power law:\n  L(D) = c + A * (D + d0)^(-alpha)\nParameters:\n  c     : asymptotic minimum loss\n  A     : amplitude\n  alpha : decay exponent (>0)\n  d0    : data-size shift (>=0) for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 scaling-law parameters.\n    data_points: array-like, shape (N,1) or (N,)\n    params:      array-like, length=4 -> [c, A, alpha, d0]\n    returns:     array of length N\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (D, L) via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)  # max(y)-min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, 0.5 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Reasonable bounds for stability\n    lower = [0.0,        0.0,     0.0,     0.0]\n    upper = [2*np.max(y), 10*A0+1, 10.0,  5*np.max(D)]\n\n    # Residuals = model - observed\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytic Jacobian for speed & stability\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift ** (-alpha)\n        logD    = np.log(D_shift)\n        # \u2202L/\u2202c = 1\n        # \u2202L/\u2202A = D_shift^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(D_shift) * D_shift^(-alpha)\n        # \u2202L/\u2202d0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack([\n            np.ones_like(D),\n            denom,\n            -A * logD * denom,\n            -A * alpha * D_shift ** (-alpha - 1)\n        ]).T\n\n    # Solve bounded least-squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power law with log-domain residuals\nand robust fitting to emphasize relative errors.\n\nModel:\n  L(D) = c + A * (D + d0)^(-alpha)\n\nWe fit parameters p = [c, A, alpha, d0] by minimizing\n  sum_i \u03c1( log(L(D_i; p)) - log(y_i) )\nwith a soft L1 loss \u03c1, to balance absolute and relative errors.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss for data sizes using a shifted power law.\n    Inputs:\n      data_points: array-like, shape (N,1) or (N,)\n      params:      length-4 array [c, A, alpha, d0]\n    Outputs:\n      preds:       array of shape (N,)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # small epsilon for numerical stability\n    eps = 1e-12\n    D_shift = np.maximum(D + d0, eps)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law by robust log-domain least-squares.\n    Returns:\n      params: array [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)                    # max(y) - min(y)\n    alpha0 = 0.5\n    d0_0   = max(0.0, 0.1 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for parameters to ensure stability\n    lower = [0.0,                0.0,   0.0,       0.0]\n    upper = [np.min(y),  10.0 * A0 + 1.0,   5.0,   np.max(D)]\n\n    # Residuals in log-domain: log(model) - log(observed)\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return np.log(pred) - np.log(y)\n\n    # Analytic Jacobian of the log-residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        eps = 1e-12\n        D_shift = np.maximum(D + d0, eps)\n        denom   = D_shift**(-alpha)\n        pred     = c + A * denom\n        # partial derivatives of L wrt p\n        dL_dc     = np.ones_like(D)\n        dL_dA     = denom\n        dL_dalpha = -A * np.log(D_shift) * denom\n        dL_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # Jacobian of log-residual = (1 / pred) * dL/dp\n        inv_pred = 1.0 / pred\n        return np.vstack([\n            dL_dc * inv_pred,\n            dL_dA * inv_pred,\n            dL_dalpha * inv_pred,\n            dL_dd0 * inv_pred\n        ]).T\n\n    # Solve with a soft-L1 robust loss to balance absolute & relative errors\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```"]}}}