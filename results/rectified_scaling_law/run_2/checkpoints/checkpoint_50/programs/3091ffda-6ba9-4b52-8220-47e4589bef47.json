{"id": "3091ffda-6ba9-4b52-8220-47e4589bef47", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside the power\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a hybrid objective:\n      Sum[(pred - y)^2] + 0.1 * Sum[((pred - y)/y)^2]\n    Uses analytic Jacobian for speed and stability.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    eps = 1e-8\n\n    # 1) Heuristic initial floor c0 below smallest observed loss\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Quick log\u2013log fit (after removing c0) for A0 and alpha0\n    y_shift = np.clip(y - c0, eps, None)\n    slope, intercept = np.polyfit(np.log(np.maximum(D, eps)), np.log(y_shift), 1)\n    alpha0 = max(1e-6, -slope)\n    A0 = max(1e-6, np.exp(intercept))\n\n    # 3) Small horizontal shift initial guess\n    d0_0 = max(1e-6, 0.1 * np.min(D))\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds for stability\n    lower = [0.0,        0.0,      1e-6,    0.0]\n    upper = [np.min(y),  np.inf,   10.0,    np.max(D)]\n\n    # 5) Relative\u2010error weight\n    beta = 0.1\n    rel_w = np.sqrt(beta)\n\n    # 6) Define residuals: concatenation of absolute and relative errors\n    def resid(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, eps)\n        pred = c + A * D_shift**(-alpha)\n        r_abs = pred - y\n        r_rel = rel_w * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 7) Analytic Jacobian of the stacked residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, eps)\n        inv_pow = D_shift ** (-alpha)\n        logD = np.log(D_shift)\n        # derivatives of prediction w.r.t parameters\n        d_dc     = np.ones_like(D)\n        d_dA     = inv_pow\n        d_dalpha = -A * inv_pow * logD\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # assemble absolute\u2010error Jacobian\n        J_abs = np.vstack([d_dc, d_dA, d_dalpha, d_dd0]).T\n        # assemble relative\u2010error Jacobian\n        scale = rel_w / np.maximum(y, eps)\n        J_rel = J_abs * scale[:, None]\n        # stack for least_squares\n        return np.vstack([J_abs, J_rel])\n\n    # 8) Solve bounded least\u2010squares with tight tolerances\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "933cd643-e6aa-40e7-b929-6985896530c4", "generation": 4, "timestamp": 1754719845.4256647, "iteration_found": 47, "metrics": {"nmse": 0.019044912253754303, "nmae": 0.11159929415451814, "r2": 0.9809550877462457, "combined_score": 0.9813110177728732}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.019225582979757926, "nmae": 0.11205688879003502, "r2": 0.980774417020242, "combined_score": 0.9811370678868255}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0192\n- nmae: 0.1121\n- r2: 0.9808\n- combined_score: 0.9811\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure the shift is positive\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least-squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Estimate c\u2080 as a floor below the minimum observed loss\n    c0 = max(0.0, y.min() * 0.9)\n\n    # 2) Remove floor and do a quick log\u2013log linear fit for A\u2080, \u03b1\u2080\n    y_shift = y - c0\n    y_shift = np.clip(y_shift, 1e-12, None)\n    logslope, logintercept = np.polyfit(np.log(D + 1e-12), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0 = max(1e-4, np.exp(logintercept))\n\n    # 3) Small horizontal shift initial guess\n    d0_0 = max(1e-6, 0.1 * D.min())\n\n    # 4) Pack initial guess\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 5) Bounds for (c, A, alpha, d0)\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [y.min(), np.inf, 5.0, D.max()]\n\n    # 6) Define residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # 7) Solve with automatic finite-difference Jacobian\n    result = least_squares(\n        resid,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=1500,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n### Program 3 (Score: 0.5249)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nRefined 4-parameter shifted power law:\n  L(D) = c + A * (D + d0)^(-alpha)\nParameters:\n  c     : asymptotic minimum loss\n  A     : amplitude\n  alpha : decay exponent (>0)\n  d0    : data-size shift (>=0) for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes and 4 scaling-law parameters.\n    data_points: array-like, shape (N,1) or (N,)\n    params:      array-like, length=4 -> [c, A, alpha, d0]\n    returns:     array of length N\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (D, L) via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)  # max(y)-min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, 0.5 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Reasonable bounds for stability\n    lower = [0.0,        0.0,     0.0,     0.0]\n    upper = [2*np.max(y), 10*A0+1, 10.0,  5*np.max(D)]\n\n    # Residuals = model - observed\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytic Jacobian for speed & stability\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift ** (-alpha)\n        logD    = np.log(D_shift)\n        # \u2202L/\u2202c = 1\n        # \u2202L/\u2202A = D_shift^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(D_shift) * D_shift^(-alpha)\n        # \u2202L/\u2202d0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack([\n            np.ones_like(D),\n            denom,\n            -A * logD * denom,\n            -A * alpha * D_shift ** (-alpha - 1)\n        ]).T\n\n    # Solve bounded least-squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5623)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + C)^(-alpha)\n    where:\n      c     = asymptotic minimum loss (>= 0)\n      A     = amplitude of decay (>= 0)\n      alpha = decay exponent (> 0)\n      C     = horizontal shift (>= 0)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, C]\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, C = params\n    # Compute and return the shifted power\u2010law prediction\n    return c + A * (D + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter shifted power law to (data_points, loss_values)\n    by minimizing mean squared error under L-BFGS-B with simple bounds.\n    Returns the optimized parameters [c, A, alpha, C].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guess heuristics\n    c0     = max(np.min(y), 0.0)\n    A0     = max(np.max(y) - np.min(y), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(D), 1.0)\n    p0 = np.array([c0, A0, alpha0, C0], dtype=float)\n\n    # Bounds: c >= 0, A >= 0, alpha in (1e-6, 10), C >= 0\n    bounds = [\n        (0.0, None),      # c\n        (0.0, None),      # A\n        (1e-6, 10.0),     # alpha\n        (0.0, None),      # C\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(D, p)\n        return np.mean((pred - y) ** 2)\n\n    # Gradient of the objective for faster convergence\n    def gradient(p):\n        c, A, alpha, C = p\n        pred = scaling_law_func(D, p)\n        res  = pred - y\n\n        D_shift = D + C\n        inv_pow = D_shift ** (-alpha)\n        log_ds  = np.log(D_shift)\n\n        # Derivatives of L wrt parameters\n        dL_dc     = np.ones_like(D)\n        dL_dA     = inv_pow\n        dL_dalpha = A * (-inv_pow * log_ds)\n        dL_dC     = A * (-alpha * D_shift ** (-alpha - 1))\n\n        # Chain rule into MSE gradient: 2 * mean(res * dL_dparam)\n        grad_c     = 2.0 * np.mean(res * dL_dc)\n        grad_A     = 2.0 * np.mean(res * dL_dA)\n        grad_alpha = 2.0 * np.mean(res * dL_dalpha)\n        grad_C     = 2.0 * np.mean(res * dL_dC)\n\n        return np.array([grad_c, grad_A, grad_alpha, grad_C], dtype=float)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        jac=gradient,\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    # Return the fitted parameters [c, A, alpha, C]\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5548)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure numerical stability\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a hybrid objective:\n      MSE + 0.1 * (log-MSE)\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    eps = 1e-8\n\n    # 1) Initial guess for c: just below the minimum observed loss\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Small data\u2010shift to avoid zero\n    d0_0 = max(eps, 0.05 * np.min(D))\n\n    # 3) Quick log\u2013log linear fit on (y - c0) vs (D + d0_0)\n    D_init   = D + d0_0\n    y_shift  = np.maximum(y - c0, eps)\n    slope, intercept = np.polyfit(np.log(D_init), np.log(y_shift), 1)\n    alpha0 = max(eps, -slope)\n    A0     = max(eps, np.exp(intercept))\n\n    # pack initial guess\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # bounds for [c, A, alpha, d0]\n    lower = [0.0,      eps,     eps,    0.0     ]\n    upper = [np.min(y), (np.max(y)-np.min(y))*10 + eps, 10.0, np.max(D)]\n    bounds = tuple(zip(lower, upper))\n\n    # hybrid objective: absolute MSE + 0.1 * log-MSE\n    def objective(p):\n        pred = scaling_law_func(D, p)\n        pred = np.maximum(pred, eps)\n        mse = np.mean((pred - y) ** 2)\n        log_mse = np.mean((np.log(pred) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * log_mse\n\n    # optimize with L-BFGS-B and bounds\n    result = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-9, 'maxiter': 2000}\n    )\n\n    # return the best parameters found (or fallback to initial if failure)\n    if result.success:\n        return result.x\n    else:\n        return x0\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law in log-domain:\n      L(D) = B + A * (D + C)^(-alpha)\n    params = [log A, log alpha, log C, log B]\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # prediction\n    return B + A * (X + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter law by minimizing a combined absolute+relative residual\n    in log-domain using least_squares for robustness.\n    Returns optimized [log A, log alpha, log C, log B].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for B (floor)\n    B0 = max(np.min(y) * 0.9, eps)\n    # 2) Shifted target for log-log fit\n    y_shift = np.maximum(y - B0, eps)\n    # 3) Linear regression in log-log to get A0, alpha0\n    slope, intercept = np.polyfit(np.log(X + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-3, -slope)\n    A0     = max(1e-3, np.exp(intercept))\n    # 4) Horizontal shift C0 (stabilize small-D)\n    C0 = max(1.0, 0.1 * np.min(X))\n\n    # Log-domain initial vector\n    p0 = np.log([A0, alpha0, C0, B0])\n\n    # Residuals: stack absolute and relative errors (weighted)\n    def resid(p):\n        pred = scaling_law_func(X, p)\n        r_abs = pred - y\n        r_rel = np.sqrt(0.1) * (pred - y) / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # Jacobian of the stacked residuals\n    def jac(p):\n        A     = np.exp(p[0])\n        alpha = np.exp(p[1])\n        C     = np.exp(p[2])\n        B     = np.exp(p[3])\n        Xc    = X + C\n        S     = Xc ** (-alpha)\n        logX  = np.log(Xc)\n        # \u2202pred/\u2202logA = A * S\n        dA     = A * S\n        # \u2202pred/\u2202logalpha = -A * S * alpha * log(Xc)\n        dalpha = -A * S * alpha * logX\n        # \u2202pred/\u2202logC = -A * alpha * (Xc^(-alpha-1)) * C\n        dC     = -A * alpha * (Xc ** (-alpha - 1)) * C\n        # \u2202pred/\u2202logB = B\n        dB     = B\n\n        J_abs = np.vstack((dA, dalpha, dC, dB)).T\n        w_rel = np.sqrt(0.1) / np.maximum(y, eps)\n        J_rel = J_abs * w_rel[:, None]\n        return np.vstack((J_abs, J_rel))\n\n    # Bounds in log-domain to keep parameters in a reasonable range\n    lower = np.array([-20.0, -5.0, -20.0, -20.0])\n    upper = np.array([ 20.0,  5.0,  20.0,  20.0])\n\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=5000,\n    )\n\n    return result.x if result.success else p0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 2 (Score: 0.5623, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + C)^(-alpha)\n    where:\n      c     = asymptotic minimum loss (>= 0)\n      A     = amplitude of decay (>= 0)\n      alpha = decay exponent (> 0)\n      C     = horizontal shift (>= 0)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, C]\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, C = params\n    # Compute and return the shifted power\u2010law prediction\n    return c + A * (D + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter shifted power law to (data_points, loss_values)\n    by minimizing mean squared error under L-BFGS-B with simple bounds.\n    Returns the optimized parameters [c, A, alpha, C].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guess heuristics\n    c0     = max(np.min(y), 0.0)\n    A0     = max(np.max(y) - np.min(y), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(D), 1.0)\n    p0 = np.array([c0, A0, alpha0, C0], dtype=float)\n\n    # Bounds: c >= 0, A >= 0, alpha in (1e-6, 10), C >= 0\n    bounds = [\n        (0.0, None),      # c\n        (0.0, None),      # A\n        (1e-6, 10.0),     # alpha\n        (0.0, None),      # C\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(D, p)\n        return np.mean((pred - y) ** 2)\n\n    # Gradient of the objective for faster convergence\n    def gradient(p):\n        c, A, alpha, C = p\n        pred = scaling_law_func(D, p)\n        res  = pred - y\n\n        D_shift = D + C\n        inv_pow = D_shift ** (-alpha)\n        log_ds  = np.log(D_shift)\n\n        # Derivatives of L wrt parameters\n        dL_dc     = np.ones_like(D)\n        dL_dA     = inv_pow\n        dL_dalpha = A * (-inv_pow * log_ds)\n        dL_dC     = A * (-alpha * D_shift ** (-alpha - 1))\n\n        # Chain rule into MSE gradient: 2 * mean(res * dL_dparam)\n        grad_c     = 2.0 * np.mean(res * dL_dc)\n        grad_A     = 2.0 * np.mean(res * dL_dA)\n        grad_alpha = 2.0 * np.mean(res * dL_dalpha)\n        grad_C     = 2.0 * np.mean(res * dL_dC)\n\n        return np.array([grad_c, grad_A, grad_alpha, grad_C], dtype=float)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        jac=gradient,\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    # Return the fitted parameters [c, A, alpha, C]\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.5548, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure numerical stability\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a hybrid objective:\n      MSE + 0.1 * (log-MSE)\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    eps = 1e-8\n\n    # 1) Initial guess for c: just below the minimum observed loss\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Small data\u2010shift to avoid zero\n    d0_0 = max(eps, 0.05 * np.min(D))\n\n    # 3) Quick log\u2013log linear fit on (y - c0) vs (D + d0_0)\n    D_init   = D + d0_0\n    y_shift  = np.maximum(y - c0, eps)\n    slope, intercept = np.polyfit(np.log(D_init), np.log(y_shift), 1)\n    alpha0 = max(eps, -slope)\n    A0     = max(eps, np.exp(intercept))\n\n    # pack initial guess\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # bounds for [c, A, alpha, d0]\n    lower = [0.0,      eps,     eps,    0.0     ]\n    upper = [np.min(y), (np.max(y)-np.min(y))*10 + eps, 10.0, np.max(D)]\n    bounds = tuple(zip(lower, upper))\n\n    # hybrid objective: absolute MSE + 0.1 * log-MSE\n    def objective(p):\n        pred = scaling_law_func(D, p)\n        pred = np.maximum(pred, eps)\n        mse = np.mean((pred - y) ** 2)\n        log_mse = np.mean((np.log(pred) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * log_mse\n\n    # optimize with L-BFGS-B and bounds\n    result = minimize(\n        objective,\n        x0,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-9, 'maxiter': 2000}\n    )\n\n    # return the best parameters found (or fallback to initial if failure)\n    if result.success:\n        return result.x\n    else:\n        return x0\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.8367, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter scaling law:\n    L(N) = B + A * (N + C)^(-\u03b1)\nAll parameters A, \u03b1, C, B are kept strictly positive via an exp-reparameterization.\nFitting uses a hybrid loss (absolute+relative) in the natural domain and\ninitializes parameters via a quick log\u2013linear fit to improve convergence.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss L(N) = B + A*(N + C)^(-\u03b1).\n    data_points: array-like of shape (N,) or (N,1) with data sizes N.\n    params: array-like of length 4 (log-domain) [lnA, ln\u03b1, lnC, lnB].\n    Returns: numpy array of shape (N,) with predicted losses.\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # unpack positive parameters\n    A     = np.exp(p[0])\n    \u03b1     = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    return B + A * (X + C) ** (-\u03b1)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law to (data_points, loss_values).\n    Returns optimized log-domain params [lnA, ln\u03b1, lnC, lnB].\n    \"\"\"\n    X = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n    # Small constant to avoid zero issues\n    eps = 1e-8\n\n    # 1) Initial guess for C: shift ~ minimum data size\n    C0 = max(np.min(X), eps)\n\n    # 2) Log-linear regression on y - min(y) to estimate A and \u03b1\n    y_shift = np.maximum(y - np.min(y) + eps, eps)\n    X0 = X + C0\n    logX = np.log(X0)\n    logy = np.log(y_shift)\n    # Fit slope/intercept: log y_shift \u2248 b + m * log X0\n    m, b = np.polyfit(logX, logy, 1)\n    \u03b10 = max(-m, 0.1)   # ensure positive exponent\n    A0 = max(np.exp(b), eps)\n\n    # 3) Initial guess for B: just below the observed minimum loss\n    B0 = max(np.min(y) * 0.9, eps)\n\n    # Pack into log-domain initial params\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Hybrid objective: absolute + 0.1 * relative (log) error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        # absolute mse\n        mse = np.mean((pred - y) ** 2)\n        # relative mse in log-domain\n        rel = np.mean((np.log(pred + eps) - np.log(y + eps)) ** 2)\n        return mse + 0.1 * rel\n\n    # Optimize with L-BFGS-B (robust quasi-Newton)\n    res = minimize(_obj, p0, method=\"L-BFGS-B\")\n    if not res.success:\n        # fallback to initial guess if optimization failed\n        return p0\n    return res.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.333), Excellent nmae (2.159)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure the shift is positive\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least-squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Estimate c\u2080 as a floor below the minimum observed loss\n    c0 = max(0.0, y.min() * 0.9)\n\n    # 2) Remove floor and do a quick log\u2013log linear fit for A\u2080, \u03b1\u2080\n    y_shift = y - c0\n    y_shift = np.clip(y_shift, 1e-12, None)\n    logslope, logintercept = np.polyfit(np.log(D + 1e-12), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0 = max(1e-4, np.exp(logintercept))\n\n    # 3) Small horizontal shift initial guess\n    d0_0 = max(1e-6, 0.1 * D.min())\n\n    # 4) Pack initial guess\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 5) Bounds for (c, A, alpha, d0)\n    lower = [0.0, 0.0, 0.0, 0.0]\n    upper = [y.min(), np.inf, 5.0, D.max()]\n\n    # 6) Define residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # 7) Solve with automatic finite-difference Jacobian\n    result = least_squares(\n        resid,\n        x0,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=1500,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside the power\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a hybrid objective:\n      Sum[(pred - y)^2] + 0.1 * Sum[((pred - y)/y)^2]\n    Uses analytic Jacobian for speed and stability.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    eps = 1e-8\n\n    # 1) Heuristic initial floor c0 below smallest observed loss\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Quick log\u2013log fit (after removing c0) for A0 and alpha0\n    y_shift = np.clip(y - c0, eps, None)\n    slope, intercept = np.polyfit(np.log(np.maximum(D, eps)), np.log(y_shift), 1)\n    alpha0 = max(1e-6, -slope)\n    A0 = max(1e-6, np.exp(intercept))\n\n    # 3) Small horizontal shift initial guess\n    d0_0 = max(1e-6, 0.1 * np.min(D))\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds for stability\n    lower = [0.0,        0.0,      1e-6,    0.0]\n    upper = [np.min(y),  np.inf,   10.0,    np.max(D)]\n\n    # 5) Relative\u2010error weight\n    beta = 0.1\n    rel_w = np.sqrt(beta)\n\n    # 6) Define residuals: concatenation of absolute and relative errors\n    def resid(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, eps)\n        pred = c + A * D_shift**(-alpha)\n        r_abs = pred - y\n        r_rel = rel_w * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 7) Analytic Jacobian of the stacked residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, eps)\n        inv_pow = D_shift ** (-alpha)\n        logD = np.log(D_shift)\n        # derivatives of prediction w.r.t parameters\n        d_dc     = np.ones_like(D)\n        d_dA     = inv_pow\n        d_dalpha = -A * inv_pow * logD\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # assemble absolute\u2010error Jacobian\n        J_abs = np.vstack([d_dc, d_dA, d_dalpha, d_dd0]).T\n        # assemble relative\u2010error Jacobian\n        scale = rel_w / np.maximum(y, eps)\n        J_rel = J_abs * scale[:, None]\n        # stack for least_squares\n        return np.vstack([J_abs, J_rel])\n\n    # 8) Solve bounded least\u2010squares with tight tolerances\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```"]}}}