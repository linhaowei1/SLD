{"id": "e73a3723-f643-4a0f-9989-605a77265a20", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4\u2010parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n      c     >= 0   : asymptotic minimum loss\n      A     >= 0   : amplitude of decay\n      alpha >  0   : decay exponent\n      d0    >= 0   : horizontal shift (for numerical stability)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity in the base of the power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law L(D)=c + A*(D+d0)^(-alpha)\n    by minimizing a concatenation of:\n      - absolute residuals:   L(D_i) \u2212 y_i\n      - small\u2010weighted relative residuals:  w*(L(D_i)\u2212y_i)/y_i\n\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for c (floor) as 90% of observed minimum\n    c0 = max(0.0, 0.9 * np.min(y))\n    # 2) Small horizontal shift guess (10% of smallest D)\n    d0_0 = max(1e-12, 0.1 * np.min(D))\n\n    # 3) Quick log\u2013log linearization to estimate A and alpha\n    y_shift = np.maximum(y - c0, eps)\n    logD = np.log(D + d0_0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-6, -slope)\n    A0     = max(1e-6, np.exp(intercept))\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds to enforce positivity and reasonable ranges\n    lower = [0.0,            0.0,    1e-6,     0.0]\n    upper = [np.min(y),  np.ptp(y)*10,   10.0,  np.max(D)]\n\n    # weight on relative residual\n    w_rel = 0.1\n\n    # 5) Build concatenated residuals\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        r_abs = pred - y\n        r_rel = w_rel * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 6) Analytic Jacobian for speed\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift**(-alpha)\n        logD_s  = np.log(D_shift)\n\n        # derivatives of L w.r.t. [c, A, alpha, d0]\n        dL_dc     = np.ones_like(D)\n        dL_dA     = denom\n        dL_dalpha = -A * denom * logD_s\n        dL_dd0    = -A * alpha * D_shift**(-alpha - 1)\n\n        J_abs = np.vstack([dL_dc, dL_dA, dL_dalpha, dL_dd0]).T\n        inv_y = 1.0 / np.maximum(y, eps)\n        J_rel = w_rel * (J_abs * inv_y[:, None])\n\n        # stack absolute + relative Jacobians\n        return np.vstack([J_abs, J_rel])\n\n    # 7) Solve with trust-region reflective algorithm\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x if result.success else x0\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "546b87d1-1374-4615-abb9-ada5cd5a10f4", "generation": 2, "timestamp": 1754719875.4067247, "iteration_found": 50, "metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.02015918458171027, "nmae": 0.11928476422449608, "r2": 0.9798408154182897, "combined_score": 0.9802391774868194}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1120, r2: 0.9808, combined_score: 0.9812\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0129, nmae: 0.0977, r2: 0.9871, combined_score: 0.9873\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0119, nmae: 0.0913, r2: 0.9881, combined_score: 0.9882\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5199)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Shifted power law with log\u2010domain parameters:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [pA, p\u03b1, pd0, pc], each log\u2010transformed:\n      A     = exp(pA)\n      \u03b1     = exp(p\u03b1)\n      d0    = exp(pd0)\n      c     = exp(pc)\n    This enforces positivity and numerical stability.\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    pA, p_alpha, p_d0, p_c = p\n    A     = np.exp(pA)\n    alpha = np.exp(p_alpha)\n    d0    = np.exp(p_d0)\n    c     = np.exp(p_c)\n    # shifted data size\n    D_shift = D + d0\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter shifted\u2010power\u2010law to (data_points, loss_values)\n    by weighted nonlinear least squares in the log\u2010domain. Minimizes\n    relative error to balance absolute and relative fit quality.\n    Returns optimized params = [pA, p\u03b1, pd0, pc].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c slightly below the minimum observed loss\n    c0 = max(np.min(y) * 0.9, 1e-4)\n    # 2) Small horizontal shift to avoid singularity\n    d0_0 = max(np.min(D) * 0.1, 1.0)\n\n    # 3) Linearize log\u2010log (for D + d0_0) to estimate A0, alpha0\n    mask = y > c0\n    if mask.sum() >= 2:\n        X_lin = np.log(D[mask] + d0_0)\n        Y_lin = np.log(y[mask] - c0)\n        slope, intercept = np.polyfit(X_lin, Y_lin, 1)\n        alpha0 = max(-slope, 1e-3)\n        A0     = max(np.exp(intercept), 1e-3)\n    else:\n        alpha0 = 0.5\n        A0     = max(np.max(y) - c0, 1e-3)\n\n    # 4) Pack into log\u2010domain initial vector\n    p0 = np.log([A0, alpha0, d0_0, c0])\n\n    # Residual: relative error (predicted - actual) / actual\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return (pred - y) / np.maximum(y, 1e-8)\n\n    # Analytical Jacobian of residuals w.r.t. p = [pA, p\u03b1, pd0, pc]\n    def jac(p):\n        pA, p_alpha, p_d0, p_c = p\n        A     = np.exp(pA)\n        alpha = np.exp(p_alpha)\n        d0    = np.exp(p_d0)\n        c     = np.exp(p_c)\n\n        D_shift = D + d0\n        pow_term = D_shift**(-alpha)\n\n        # \u2202L/\u2202pA = A * D_shift^(\u2212alpha)\n        dL_dA = pow_term * A\n        # \u2202L/\u2202p\u03b1 = \u2212A * D_shift^(\u2212alpha) * ln(D_shift) * alpha\n        dL_dalpha = -A * pow_term * np.log(D_shift) * alpha\n        # \u2202L/\u2202pd0 = \u2212A * alpha * D_shift^(\u2212alpha\u22121) * d0\n        dL_dd0 = -A * alpha * D_shift**(-alpha - 1) * d0\n        # \u2202L/\u2202pc = c\n        dL_dc = c\n\n        denom = np.maximum(y, 1e-8)\n        # Stack into Jacobian matrix of shape (N, 4)\n        return np.vstack([\n            dL_dA    / denom,\n            dL_dalpha/ denom,\n            dL_dd0   / denom,\n            dL_dc    / denom\n        ]).T\n\n    # Bounds in log\u2010domain to keep d0 and c positive but constrained\n    lower = [-np.inf, -np.inf, np.log(1e-8),    np.log(1e-8)]\n    upper = [ np.inf,  np.inf, np.log(D.max()*10), np.log(np.min(y))]\n\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n        method='trf',\n        verbose=0\n    )\n\n    return result.x if result.success else p0\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0119), Performs well on nmae (0.0913), Performs well on r2 (0.9881), Performs well on combined_score (0.9882)\n\n\n### Program 2 (Score: 0.5213)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 4-parameter shifted power law with log-domain residuals\nand robust fitting to emphasize relative errors.\n\nModel:\n  L(D) = c + A * (D + d0)^(-alpha)\n\nWe fit parameters p = [c, A, alpha, d0] by minimizing\n  sum_i \u03c1( log(L(D_i; p)) - log(y_i) )\nwith a soft L1 loss \u03c1, to balance absolute and relative errors.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss for data sizes using a shifted power law.\n    Inputs:\n      data_points: array-like, shape (N,1) or (N,)\n      params:      length-4 array [c, A, alpha, d0]\n    Outputs:\n      preds:       array of shape (N,)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # small epsilon for numerical stability\n    eps = 1e-12\n    D_shift = np.maximum(D + d0, eps)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law by robust log-domain least-squares.\n    Returns:\n      params: array [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))\n    A0     = np.ptp(y)                    # max(y) - min(y)\n    alpha0 = 0.5\n    d0_0   = max(0.0, 0.1 * np.min(D))\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for parameters to ensure stability\n    lower = [0.0,                0.0,   0.0,       0.0]\n    upper = [np.min(y),  10.0 * A0 + 1.0,   5.0,   np.max(D)]\n\n    # Residuals in log-domain: log(model) - log(observed)\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return np.log(pred) - np.log(y)\n\n    # Analytic Jacobian of the log-residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        eps = 1e-12\n        D_shift = np.maximum(D + d0, eps)\n        denom   = D_shift**(-alpha)\n        pred     = c + A * denom\n        # partial derivatives of L wrt p\n        dL_dc     = np.ones_like(D)\n        dL_dA     = denom\n        dL_dalpha = -A * np.log(D_shift) * denom\n        dL_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # Jacobian of log-residual = (1 / pred) * dL/dp\n        inv_pred = 1.0 / pred\n        return np.vstack([\n            dL_dc * inv_pred,\n            dL_dA * inv_pred,\n            dL_dalpha * inv_pred,\n            dL_dd0 * inv_pred\n        ]).T\n\n    # Solve with a soft-L1 robust loss to balance absolute & relative errors\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0129), Performs well on nmae (0.0977), Performs well on r2 (0.9871), Performs well on combined_score (0.9873)\n\n\n### Program 3 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = horizontal shift (>=0)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a combination of\n      - absolute error:   L(D) - y\n      - relative error:   (L(D) - y)/y\n    via scipy.optimize.least_squares, using an analytic Jacobian.\n\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = D.size\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for c via asymptotic floor\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Rough log\u2013log linear fit on y - c0 to get A0, alpha0\n    y_shift = np.clip(y - c0, eps, None)\n    logD = np.log(D + eps)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-4, -slope)\n    A0 = max(1e-4, np.exp(intercept))\n\n    # 3) Horizontal shift guess\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [np.min(y), 10 * A0, 10.0, np.max(D)]\n\n    # 5) Build combined residual (absolute + relative)\n    w_rel = 0.1  # weight on relative error\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        r_abs = pred - y\n        # avoid divide by zero\n        r_rel = w_rel * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 6) Analytic Jacobian for the combined residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD_shift = np.log(D_shift)\n\n        # Jacobian for absolute part: dL/d[c,A,alpha,d0]\n        J_abs = np.vstack([\n            np.ones_like(D),                     # \u2202L/\u2202c\n            denom,                               # \u2202L/\u2202A\n            -A * denom * logD_shift,             # \u2202L/\u2202alpha\n            -A * alpha * D_shift**(-alpha - 1)   # \u2202L/\u2202d0\n        ]).T\n\n        # Jacobian for relative part\n        inv_y = 1.0 / np.maximum(y, eps)\n        J_rel = w_rel * (J_abs * inv_y[:, None])\n\n        # stack to match residuals\n        return np.vstack([J_abs, J_rel])\n\n    # 7) Solve with trust-region reflective algorithm\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1120), Performs well on r2 (0.9808), Performs well on combined_score (0.9812)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic for c0: asymptotic floor near min(y)\n    c0 = max(0.0, y.min() * 0.9)\n\n    # Quick log-log linearization to get A0, alpha0\n    y_shift = y - c0\n    # Avoid non-positive before taking log\n    eps = np.finfo(float).tiny\n    y_shift = np.where(y_shift > eps, y_shift, eps)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # Small shift\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: \n    #   0 \u2264 c \u2264 min(y)\n    #   0 \u2264 A\n    #   0 \u2264 alpha \u2264 5\n    #   0 \u2264 d0 \u2264 max(D)\n    lower = [0.0,        0.0,      0.0,    0.0]\n    upper = [y.min(),   10 * A0,   5.0,    D.max()]\n\n    # Residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        # dL/dc = 1\n        # dL/dA = denom\n        # dL/dalpha = -A * log(D_shift) * denom\n        # dL/dd0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack((\n            np.ones_like(D),\n            denom,\n            -A * np.log(D_shift) * denom,\n            -A * alpha * D_shift**(-alpha - 1),\n        )).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5199, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Shifted power law with log\u2010domain parameters:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [pA, p\u03b1, pd0, pc], each log\u2010transformed:\n      A     = exp(pA)\n      \u03b1     = exp(p\u03b1)\n      d0    = exp(pd0)\n      c     = exp(pc)\n    This enforces positivity and numerical stability.\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    p = np.asarray(params).ravel()\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    pA, p_alpha, p_d0, p_c = p\n    A     = np.exp(pA)\n    alpha = np.exp(p_alpha)\n    d0    = np.exp(p_d0)\n    c     = np.exp(p_c)\n    # shifted data size\n    D_shift = D + d0\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter shifted\u2010power\u2010law to (data_points, loss_values)\n    by weighted nonlinear least squares in the log\u2010domain. Minimizes\n    relative error to balance absolute and relative fit quality.\n    Returns optimized params = [pA, p\u03b1, pd0, pc].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c slightly below the minimum observed loss\n    c0 = max(np.min(y) * 0.9, 1e-4)\n    # 2) Small horizontal shift to avoid singularity\n    d0_0 = max(np.min(D) * 0.1, 1.0)\n\n    # 3) Linearize log\u2010log (for D + d0_0) to estimate A0, alpha0\n    mask = y > c0\n    if mask.sum() >= 2:\n        X_lin = np.log(D[mask] + d0_0)\n        Y_lin = np.log(y[mask] - c0)\n        slope, intercept = np.polyfit(X_lin, Y_lin, 1)\n        alpha0 = max(-slope, 1e-3)\n        A0     = max(np.exp(intercept), 1e-3)\n    else:\n        alpha0 = 0.5\n        A0     = max(np.max(y) - c0, 1e-3)\n\n    # 4) Pack into log\u2010domain initial vector\n    p0 = np.log([A0, alpha0, d0_0, c0])\n\n    # Residual: relative error (predicted - actual) / actual\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return (pred - y) / np.maximum(y, 1e-8)\n\n    # Analytical Jacobian of residuals w.r.t. p = [pA, p\u03b1, pd0, pc]\n    def jac(p):\n        pA, p_alpha, p_d0, p_c = p\n        A     = np.exp(pA)\n        alpha = np.exp(p_alpha)\n        d0    = np.exp(p_d0)\n        c     = np.exp(p_c)\n\n        D_shift = D + d0\n        pow_term = D_shift**(-alpha)\n\n        # \u2202L/\u2202pA = A * D_shift^(\u2212alpha)\n        dL_dA = pow_term * A\n        # \u2202L/\u2202p\u03b1 = \u2212A * D_shift^(\u2212alpha) * ln(D_shift) * alpha\n        dL_dalpha = -A * pow_term * np.log(D_shift) * alpha\n        # \u2202L/\u2202pd0 = \u2212A * alpha * D_shift^(\u2212alpha\u22121) * d0\n        dL_dd0 = -A * alpha * D_shift**(-alpha - 1) * d0\n        # \u2202L/\u2202pc = c\n        dL_dc = c\n\n        denom = np.maximum(y, 1e-8)\n        # Stack into Jacobian matrix of shape (N, 4)\n        return np.vstack([\n            dL_dA    / denom,\n            dL_dalpha/ denom,\n            dL_dd0   / denom,\n            dL_dc    / denom\n        ]).T\n\n    # Bounds in log\u2010domain to keep d0 and c positive but constrained\n    lower = [-np.inf, -np.inf, np.log(1e-8),    np.log(1e-8)]\n    upper = [ np.inf,  np.inf, np.log(D.max()*10), np.log(np.min(y))]\n\n    result = least_squares(\n        resid,\n        p0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n        method='trf',\n        verbose=0\n    )\n\n    return result.x if result.success else p0\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5448, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0] in natural domain\n      c     >= 0   : asymptotic minimum loss\n      A     >  0   : amplitude\n      alpha >  0   : decay exponent\n      d0    >= 0   : horizontal shift for numerical stability\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # shift and floor to avoid singularities\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law L(D)=c + A*(D+d0)^(-alpha)\n    by weighted least-squares (emphasizing relative error at large D)\n    using L-BFGS-B with analytic gradients.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c (floor), using 90% of the minimum y\n    c0 = max(0.0, np.min(y) * 0.9)\n\n    # 2) Initial guess for d0 (horizontal shift), 10% of smallest D\n    d0_0 = max(1e-6, np.min(D) * 0.1)\n\n    # 3) Rough log-log linear fit to estimate A and alpha\n    mask = y > c0 + 1e-8\n    if mask.sum() >= 3:\n        # perform linear regression on log(y-c0) vs log(D + d0_0)\n        logD = np.log(D[mask] + d0_0)\n        logY = np.log(y[mask] - c0)\n        slope, intercept = np.polyfit(logD, logY, 1)\n        alpha0 = max(1e-6, -slope)\n        A0 = max(np.exp(intercept), 1e-6)\n    else:\n        alpha0 = 0.5\n        A0 = max(np.max(y) - c0, 1e-6)\n\n    # Pack initial vector\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Parameter bounds to enforce positivity and numerical stability\n    bounds = [\n        (0.0,       np.max(y) * 2.0),                # c\n        (1e-8,      (np.max(y) - np.min(y)) * 10.0), # A\n        (1e-8,      10.0),                           # alpha\n        (0.0,       np.max(D) * 2.0)                 # d0\n    ]\n\n    # 5) Weight vector: emphasize relative error at large D (small y)\n    #    w_i \u221d 1 / y_i, then normalized to mean=1\n    w = 1.0 / np.maximum(y, np.median(y) * 0.5)\n    w = w / np.mean(w)\n\n    # 6) Define objective and analytic gradient for weighted MSE\n    def obj_grad(params):\n        c, A, alpha, d0 = params\n        D_shift = np.maximum(D + d0, 1e-12)\n        Dpow = D_shift ** (-alpha)\n        pred = c + A * Dpow\n        resid = pred - y\n\n        # Weighted MSE (with \u00bd factor for gradient convenience)\n        obj = 0.5 * np.mean(w * resid * resid)\n\n        # Gradients\n        grad_c     = np.mean(w * resid * 1.0)\n        grad_A     = np.mean(w * resid * Dpow)\n        grad_alpha = np.mean(w * resid * (-A * Dpow * np.log(D_shift)))\n        grad_d0    = np.mean(w * resid * (-A * alpha * D_shift**(-alpha - 1)))\n\n        return obj, np.array([grad_c, grad_A, grad_alpha, grad_d0], dtype=float)\n\n    # 7) Run L-BFGS-B with analytic gradient\n    result = minimize(\n        fun=lambda p: obj_grad(p)[0],\n        x0=x0,\n        jac=lambda p: obj_grad(p)[1],\n        bounds=bounds,\n        method='L-BFGS-B',\n        options={'ftol': 1e-9, 'gtol': 1e-6, 'maxiter': 1000}\n    )\n\n    # Return the optimized natural-domain parameters\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.5283, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power-law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positive argument to the power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law (c, A, alpha, d0) by minimizing\n    the mean squared error via L-BFGS-B with simple bounds.\n    Returns the optimized parameters [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initialize c slightly below the observed floor\n    c0 = max(0.0, np.min(y) * 0.9)\n\n    # 2) Quick log\u2013log linearization for A and alpha\n    y_shift = y - c0\n    eps = np.finfo(float).tiny\n    y_shift = np.clip(y_shift, eps, None)\n    logD = np.log(D + eps)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-6, -slope)\n    A0     = max(1e-6, np.exp(intercept))\n\n    # 3) Small positive shift initial guess\n    d0_0 = max(1e-6, 0.1 * np.min(D))\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: c\u2208[0, min(y)], A\u2208[0, \u221e), alpha\u2208[0, 10], d0\u2208[0, max(D)]\n    bounds = [\n        (0.0, np.min(y)),\n        (0.0, None),\n        (0.0, 10.0),\n        (0.0, np.max(D))\n    ]\n\n    # Objective: mean squared error\n    def _mse(params):\n        pred = scaling_law_func(D, params)\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        _mse,\n        x0,\n        method=\"L-BFGS-B\",\n        bounds=bounds,\n        options={\"ftol\": 1e-12, \"gtol\": 1e-12, \"maxiter\": 1000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimizer fails\n        return x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic for c0: asymptotic floor near min(y)\n    c0 = max(0.0, y.min() * 0.9)\n\n    # Quick log-log linearization to get A0, alpha0\n    y_shift = y - c0\n    # Avoid non-positive before taking log\n    eps = np.finfo(float).tiny\n    y_shift = np.where(y_shift > eps, y_shift, eps)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # Small shift\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: \n    #   0 \u2264 c \u2264 min(y)\n    #   0 \u2264 A\n    #   0 \u2264 alpha \u2264 5\n    #   0 \u2264 d0 \u2264 max(D)\n    lower = [0.0,        0.0,      0.0,    0.0]\n    upper = [y.min(),   10 * A0,   5.0,    D.max()]\n\n    # Residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        # dL/dc = 1\n        # dL/dA = denom\n        # dL/dalpha = -A * log(D_shift) * denom\n        # dL/dd0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack((\n            np.ones_like(D),\n            denom,\n            -A * np.log(D_shift) * denom,\n            -A * alpha * D_shift**(-alpha - 1),\n        )).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = horizontal shift (>=0)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a combination of\n      - absolute error:   L(D) - y\n      - relative error:   (L(D) - y)/y\n    via scipy.optimize.least_squares, using an analytic Jacobian.\n\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = D.size\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for c via asymptotic floor\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Rough log\u2013log linear fit on y - c0 to get A0, alpha0\n    y_shift = np.clip(y - c0, eps, None)\n    logD = np.log(D + eps)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-4, -slope)\n    A0 = max(1e-4, np.exp(intercept))\n\n    # 3) Horizontal shift guess\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [np.min(y), 10 * A0, 10.0, np.max(D)]\n\n    # 5) Build combined residual (absolute + relative)\n    w_rel = 0.1  # weight on relative error\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        r_abs = pred - y\n        # avoid divide by zero\n        r_rel = w_rel * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 6) Analytic Jacobian for the combined residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD_shift = np.log(D_shift)\n\n        # Jacobian for absolute part: dL/d[c,A,alpha,d0]\n        J_abs = np.vstack([\n            np.ones_like(D),                     # \u2202L/\u2202c\n            denom,                               # \u2202L/\u2202A\n            -A * denom * logD_shift,             # \u2202L/\u2202alpha\n            -A * alpha * D_shift**(-alpha - 1)   # \u2202L/\u2202d0\n        ]).T\n\n        # Jacobian for relative part\n        inv_y = 1.0 / np.maximum(y, eps)\n        J_rel = w_rel * (J_abs * inv_y[:, None])\n\n        # stack to match residuals\n        return np.vstack([J_abs, J_rel])\n\n    # 7) Solve with trust-region reflective algorithm\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Below is an updated version that (1) retains the same 4\u2010parameter shifted\u2010power\u2010law form, (2) uses a combined absolute+relative residual to balance both small\u2010 and large\u2010D fitting, (3) initializes parameters via a quick log\u2013log linearization, and (4) provides analytic Jacobians for speed and stability. Overall it is both simpler and more robust across a wide range of curves.\n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4\u2010parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n      c     >= 0   : asymptotic minimum loss\n      A     >= 0   : amplitude of decay\n      alpha >  0   : decay exponent\n      d0    >= 0   : horizontal shift (for numerical stability)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity in the base of the power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law L(D)=c + A*(D+d0)^(-alpha)\n    by minimizing a concatenation of:\n      - absolute residuals:   L(D_i) \u2212 y_i\n      - small\u2010weighted relative residuals:  w*(L(D_i)\u2212y_i)/y_i\n\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for c (floor) as 90% of observed minimum\n    c0 = max(0.0, 0.9 * np.min(y))\n    # 2) Small horizontal shift guess (10% of smallest D)\n    d0_0 = max(1e-12, 0.1 * np.min(D))\n\n    # 3) Quick log\u2013log linearization to estimate A and alpha\n    y_shift = np.maximum(y - c0, eps)\n    logD = np.log(D + d0_0)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-6, -slope)\n    A0     = max(1e-6, np.exp(intercept))\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds to enforce positivity and reasonable ranges\n    lower = [0.0,            0.0,    1e-6,     0.0]\n    upper = [np.min(y),  np.ptp(y)*10,   10.0,  np.max(D)]\n\n    # weight on relative residual\n    w_rel = 0.1\n\n    # 5) Build concatenated residuals\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        r_abs = pred - y\n        r_rel = w_rel * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 6) Analytic Jacobian for speed\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift**(-alpha)\n        logD_s  = np.log(D_shift)\n\n        # derivatives of L w.r.t. [c, A, alpha, d0]\n        dL_dc     = np.ones_like(D)\n        dL_dA     = denom\n        dL_dalpha = -A * denom * logD_s\n        dL_dd0    = -A * alpha * D_shift**(-alpha - 1)\n\n        J_abs = np.vstack([dL_dc, dL_dA, dL_dalpha, dL_dd0]).T\n        inv_y = 1.0 / np.maximum(y, eps)\n        J_rel = w_rel * (J_abs * inv_y[:, None])\n\n        # stack absolute + relative Jacobians\n        return np.vstack([J_abs, J_rel])\n\n    # 7) Solve with trust-region reflective algorithm\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        method='trf',\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x if result.success else x0\n\n# EVOLVE-BLOCK-END\n```\n\nKey improvements:\n- Combines absolute and relative residuals to balance fit quality across both small and large data sizes  \n- Uses a single analytic Jacobian for all residuals, speeding convergence  \n- Initializes parameters via a quick log\u2013log linearization for stability  \n- Enforces simple bounds and non-negative constraints to ensure sensible solutions  \n- Keeps the 4-parameter form unchanged, so the interface remains `scaling_law_func(data_points, params)` and `fit_scaling_law(data_points, loss_values)`."]}}}