{"id": "42b51009-f8c6-449c-9d5f-6aad0e1c9736", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n      c     : asymptotic minimum loss (>=0)\n      A     : amplitude (>0)\n      alpha : decay exponent (>0)\n      d0    : horizontal shift for numerical stability (>=0)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # Ensure positive argument inside power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) data.\n    Uses a robust bounded least-squares (Huber) for stability.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    # Flatten inputs\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c near half the minimum observed loss\n    c0 = max(0.0, 0.5 * np.min(y))\n\n    # 2) Prepare a subset for log\u2013log linearization (exclude smallest 20%)\n    pct = np.percentile(D, 20)\n    mask = D >= pct\n    D_fit = D[mask]\n    y_fit = y[mask] - c0\n    y_fit = np.clip(y_fit, 1e-12, None)\n\n    # 3) Estimate alpha0 and A0 via linear fit to log(y_fit) = log(A) - alpha * log(D_fit)\n    slope, intercept = np.polyfit(np.log(D_fit), np.log(y_fit), 1)\n    alpha0 = max(1e-4, -slope)\n    A0     = max(1e-4, np.exp(intercept))\n\n    # 4) Small positive shift for stability\n    d0_0 = max(1.0, 0.1 * np.min(D))\n\n    # Pack initial parameters\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 5) Bounds for [c, A, alpha, d0]\n    lower = [0.0,        1e-8,    1e-6,    0.0]\n    upper = [\n        np.min(y), \n        (np.max(y) - np.min(y)) * 20.0, \n        10.0, \n        np.max(D) * 2.0\n    ]\n\n    # 6) Define residuals (model \u2212 observed)\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # 7) Analytic Jacobian of the residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        inv_pow = D_shift**(-alpha)\n        logD    = np.log(D_shift)\n        # Derivatives of L w.r.t. parameters\n        d_dc    = np.ones_like(D)\n        d_dA    = inv_pow\n        d_dalpha= -A * inv_pow * logD\n        d_dd0   = -A * alpha * D_shift**(-alpha - 1)\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # 8) Run bounded robust least-squares with Huber loss for outlier resistance\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "56ac2d46-aa35-44df-a463-ea99e75da8cf", "generation": 3, "timestamp": 1754719819.7324884, "iteration_found": 44, "metrics": {"nmse": 0.019453232348868296, "nmae": 0.11453687805984468, "r2": 0.9805467676511317, "combined_score": 0.980917974722541}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Fitting failed: Evaluation failed or timed out.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic for c0: asymptotic floor near min(y)\n    c0 = max(0.0, y.min() * 0.9)\n\n    # Quick log-log linearization to get A0, alpha0\n    y_shift = y - c0\n    # Avoid non-positive before taking log\n    eps = np.finfo(float).tiny\n    y_shift = np.where(y_shift > eps, y_shift, eps)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # Small shift\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: \n    #   0 \u2264 c \u2264 min(y)\n    #   0 \u2264 A\n    #   0 \u2264 alpha \u2264 5\n    #   0 \u2264 d0 \u2264 max(D)\n    lower = [0.0,        0.0,      0.0,    0.0]\n    upper = [y.min(),   10 * A0,   5.0,    D.max()]\n\n    # Residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        # dL/dc = 1\n        # dL/dA = denom\n        # dL/dalpha = -A * log(D_shift) * denom\n        # dL/dd0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack((\n            np.ones_like(D),\n            denom,\n            -A * np.log(D_shift) * denom,\n            -A * alpha * D_shift**(-alpha - 1),\n        )).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5233)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 4-parameter shifted power-law scaling law for LLM fine-tuning:\n    L(D) = c + A * (D + d0)^(\u2212alpha)\nParameters:\n  c     : asymptotic minimum loss (\u22650)\n  A     : amplitude (>0)\n  alpha : decay exponent (>0)\n  d0    : data-size shift (\u22650) for numerical stability\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss given data sizes.\n    Inputs:\n      data_points : array-like of shape (N,) or (N,1)\n      params       : length-4 array [c, A, alpha, d0]\n    Returns:\n      preds        : numpy array of shape (N,) with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positive argument for power\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to observed losses.\n    Uses bounded nonlinear least squares for robust convergence.\n    Inputs:\n      data_points : array-like of shape (N,) or (N,1)\n      loss_values : array-like of shape (N,)\n    Returns:\n      params      : optimized [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c near the floor of observed losses\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Estimate A and alpha via a quick log-log linear fit on y \u2212 c0\n    y_shift = y - c0\n    eps = np.finfo(float).tiny\n    y_shift = np.clip(y_shift, eps, None)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # 3) Small shift on D for stability\n    d0_0 = max(1.0, 0.1 * np.min(D))\n\n    # pack initial parameters\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # parameter bounds\n    lower = [0.0,        1e-8,     1e-6,     0.0]\n    upper = [np.min(y),  10.0*A0,  10.0,     np.max(D)]\n\n    # residuals function\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # analytic Jacobian for speed\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        inv_pow = D_shift**(-alpha)\n        logD    = np.log(D_shift)\n        # derivatives of L w.r.t. [c, A, alpha, d0]\n        d_c     = np.ones_like(D)\n        d_A     = inv_pow\n        d_alpha = -A * inv_pow * logD\n        d_d0    = -A * alpha * D_shift**(-alpha - 1)\n        return np.vstack((d_c, d_A, d_alpha, d_d0)).T\n\n    # solve with bounded least squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    # return the best-fit parameters\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 3 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic for c0: asymptotic floor near min(y)\n    c0 = max(0.0, y.min() * 0.9)\n\n    # Quick log-log linearization to get A0, alpha0\n    y_shift = y - c0\n    # Avoid non-positive before taking log\n    eps = np.finfo(float).tiny\n    y_shift = np.where(y_shift > eps, y_shift, eps)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # Small shift\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: \n    #   0 \u2264 c \u2264 min(y)\n    #   0 \u2264 A\n    #   0 \u2264 alpha \u2264 5\n    #   0 \u2264 d0 \u2264 max(D)\n    lower = [0.0,        0.0,      0.0,    0.0]\n    upper = [y.min(),   10 * A0,   5.0,    D.max()]\n\n    # Residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        # dL/dc = 1\n        # dL/dA = denom\n        # dL/dalpha = -A * log(D_shift) * denom\n        # dL/dd0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack((\n            np.ones_like(D),\n            denom,\n            -A * np.log(D_shift) * denom,\n            -A * alpha * D_shift**(-alpha - 1),\n        )).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.8592, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (4.663), Excellent nmae (2.260), Alternative r2 approach\n\n\n### Inspiration 4 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n      c     >= 0   : asymptotic minimum loss\n      A     >  0   : amplitude\n      alpha >  0   : decay exponent\n      d0    >= 0   : horizontal shift for stability\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure numerical stability\n    D_shift = D + d0\n    return c + A * np.power(D_shift, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law via bounded nonlinear least squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guesses\n    c0     = max(0.0, np.min(y) * 0.95)\n    A0     = max(1e-6, np.max(y) - c0)\n    alpha0 = 0.5\n    d0_0   = max(1e-6, np.min(D) * 0.1)\n    p0 = [c0, A0, alpha0, d0_0]\n\n    # 2) Parameter bounds\n    lower = [0.0,                     1e-8,    0.0,       0.0]\n    upper = [np.max(y) * 2.0,\n             (np.max(y) - np.min(y)) * 10.0 + 1.0,\n             10.0,\n             np.max(D) * 5.0]\n\n    # 3) Define model for curve_fit\n    def _model(D, c, A, alpha, d0):\n        return c + A * np.power(D + d0, -alpha)\n\n    # 4) Fit with bounds, fallback on failure\n    try:\n        popt, _ = curve_fit(\n            _model,\n            D,\n            y,\n            p0=p0,\n            bounds=(lower, upper),\n            max_nfev=10000\n        )\n    except Exception:\n        popt = np.array(p0, dtype=float)\n\n    return popt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5249, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside power\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    # Prepare data\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guess for c: near the lowest observed loss\n    c0 = max(0.0, 0.9 * y.min())\n\n    # Shifted losses for log\u2010space linear fit\n    y_shift = y - c0\n    y_shift = np.clip(y_shift, 1e-8, None)\n\n    # Estimate alpha and A via log\u2010log line fit: log(y_shift) \u2248 -alpha * log(D) + log(A)\n    logs, logi = np.polyfit(np.log(np.maximum(D, 1e-8)), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logs)\n    A0     = max(1e-4, np.exp(logi))\n\n    # Small positive shift on D for stability\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to ensure physical and stable values\n    lower = [0.0,           1e-8,    1e-6,    0.0]\n    upper = [y.min(),     (y.max()-y.min())*10, 5.0,    D.mean()]\n\n    # Residual and Jacobian functions\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        inv_pow = D_shift**(-alpha)\n        logD    = np.log(D_shift)\n        # dL/dc = 1\n        # dL/dA = inv_pow\n        # dL/dalpha = -A * inv_pow * log(D_shift)\n        # dL/dd0 = -A * alpha * D_shift**(-alpha-1)\n        return np.vstack([\n            np.ones_like(D),\n            inv_pow,\n            -A * inv_pow * logD,\n            -A * alpha * D_shift**(-alpha - 1)\n        ]).T\n\n    # Run bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n      c     : asymptotic minimum loss (>=0)\n      A     : amplitude (>0)\n      alpha : decay exponent (>0)\n      d0    : horizontal shift for numerical stability (>=0)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # Ensure positive argument inside power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) data.\n    Uses a robust bounded least-squares (Huber) for stability.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    # Flatten inputs\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c near half the minimum observed loss\n    c0 = max(0.0, 0.5 * np.min(y))\n\n    # 2) Prepare a subset for log\u2013log linearization (exclude smallest 20%)\n    pct = np.percentile(D, 20)\n    mask = D >= pct\n    D_fit = D[mask]\n    y_fit = y[mask] - c0\n    y_fit = np.clip(y_fit, 1e-12, None)\n\n    # 3) Estimate alpha0 and A0 via linear fit to log(y_fit) = log(A) - alpha * log(D_fit)\n    slope, intercept = np.polyfit(np.log(D_fit), np.log(y_fit), 1)\n    alpha0 = max(1e-4, -slope)\n    A0     = max(1e-4, np.exp(intercept))\n\n    # 4) Small positive shift for stability\n    d0_0 = max(1.0, 0.1 * np.min(D))\n\n    # Pack initial parameters\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 5) Bounds for [c, A, alpha, d0]\n    lower = [0.0,        1e-8,    1e-6,    0.0]\n    upper = [\n        np.min(y), \n        (np.max(y) - np.min(y)) * 20.0, \n        10.0, \n        np.max(D) * 2.0\n    ]\n\n    # 6) Define residuals (model \u2212 observed)\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # 7) Analytic Jacobian of the residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        inv_pow = D_shift**(-alpha)\n        logD    = np.log(D_shift)\n        # Derivatives of L w.r.t. parameters\n        d_dc    = np.ones_like(D)\n        d_dA    = inv_pow\n        d_dalpha= -A * inv_pow * logD\n        d_dd0   = -A * alpha * D_shift**(-alpha - 1)\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # 8) Run bounded robust least-squares with Huber loss for outlier resistance\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        loss='huber',\n        f_scale=1.0,\n        xtol=1e-9,\n        ftol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```"]}}}