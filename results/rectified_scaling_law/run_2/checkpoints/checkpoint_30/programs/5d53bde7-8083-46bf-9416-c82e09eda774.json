{"id": "5d53bde7-8083-46bf-9416-c82e09eda774", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + C)^(-alpha)\n    where:\n      c     = asymptotic minimum loss (>= 0)\n      A     = amplitude of decay (>= 0)\n      alpha = decay exponent (> 0)\n      C     = horizontal shift (>= 0)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, C]\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, C = params\n    # Compute and return the shifted power\u2010law prediction\n    return c + A * (D + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter shifted power law to (data_points, loss_values)\n    by minimizing mean squared error under L-BFGS-B with simple bounds.\n    Returns the optimized parameters [c, A, alpha, C].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guess heuristics\n    c0     = max(np.min(y), 0.0)\n    A0     = max(np.max(y) - np.min(y), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(D), 1.0)\n    p0 = np.array([c0, A0, alpha0, C0], dtype=float)\n\n    # Bounds: c >= 0, A >= 0, alpha in (1e-6, 10), C >= 0\n    bounds = [\n        (0.0, None),      # c\n        (0.0, None),      # A\n        (1e-6, 10.0),     # alpha\n        (0.0, None),      # C\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(D, p)\n        return np.mean((pred - y) ** 2)\n\n    # Gradient of the objective for faster convergence\n    def gradient(p):\n        c, A, alpha, C = p\n        pred = scaling_law_func(D, p)\n        res  = pred - y\n\n        D_shift = D + C\n        inv_pow = D_shift ** (-alpha)\n        log_ds  = np.log(D_shift)\n\n        # Derivatives of L wrt parameters\n        dL_dc     = np.ones_like(D)\n        dL_dA     = inv_pow\n        dL_dalpha = A * (-inv_pow * log_ds)\n        dL_dC     = A * (-alpha * D_shift ** (-alpha - 1))\n\n        # Chain rule into MSE gradient: 2 * mean(res * dL_dparam)\n        grad_c     = 2.0 * np.mean(res * dL_dc)\n        grad_A     = 2.0 * np.mean(res * dL_dA)\n        grad_alpha = 2.0 * np.mean(res * dL_dalpha)\n        grad_C     = 2.0 * np.mean(res * dL_dC)\n\n        return np.array([grad_c, grad_A, grad_alpha, grad_C], dtype=float)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        jac=gradient,\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    # Return the fitted parameters [c, A, alpha, C]\n    return result.x\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "546b87d1-1374-4615-abb9-ada5cd5a10f4", "generation": 2, "timestamp": 1754719620.6424215, "iteration_found": 20, "metrics": {"nmse": 0.15734597854435167, "nmae": 0.38501350846933385, "r2": 0.8426540214556484, "combined_score": 0.8640458588344921}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.02015918458171027, "nmae": 0.11928476422449608, "r2": 0.9798408154182897, "combined_score": 0.9802391774868194}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n### Program 2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5243, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + C)^(-alpha)\n    where:\n      c     = asymptotic minimum loss (>= 0)\n      A     = amplitude of decay (>= 0)\n      alpha = decay exponent (> 0)\n      C     = horizontal shift (>= 0)\n    Inputs:\n      data_points: array-like of shape (N,) or (N,1) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, C]\n    Returns:\n      preds: array of shape (N,) with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, C = params\n    # Compute and return the shifted power\u2010law prediction\n    return c + A * (D + C) ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter shifted power law to (data_points, loss_values)\n    by minimizing mean squared error under L-BFGS-B with simple bounds.\n    Returns the optimized parameters [c, A, alpha, C].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guess heuristics\n    c0     = max(np.min(y), 0.0)\n    A0     = max(np.max(y) - np.min(y), 1e-3)\n    alpha0 = 0.5\n    C0     = max(np.median(D), 1.0)\n    p0 = np.array([c0, A0, alpha0, C0], dtype=float)\n\n    # Bounds: c >= 0, A >= 0, alpha in (1e-6, 10), C >= 0\n    bounds = [\n        (0.0, None),      # c\n        (0.0, None),      # A\n        (1e-6, 10.0),     # alpha\n        (0.0, None),      # C\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(D, p)\n        return np.mean((pred - y) ** 2)\n\n    # Gradient of the objective for faster convergence\n    def gradient(p):\n        c, A, alpha, C = p\n        pred = scaling_law_func(D, p)\n        res  = pred - y\n\n        D_shift = D + C\n        inv_pow = D_shift ** (-alpha)\n        log_ds  = np.log(D_shift)\n\n        # Derivatives of L wrt parameters\n        dL_dc     = np.ones_like(D)\n        dL_dA     = inv_pow\n        dL_dalpha = A * (-inv_pow * log_ds)\n        dL_dC     = A * (-alpha * D_shift ** (-alpha - 1))\n\n        # Chain rule into MSE gradient: 2 * mean(res * dL_dparam)\n        grad_c     = 2.0 * np.mean(res * dL_dc)\n        grad_A     = 2.0 * np.mean(res * dL_dA)\n        grad_alpha = 2.0 * np.mean(res * dL_dalpha)\n        grad_C     = 2.0 * np.mean(res * dL_dC)\n\n        return np.array([grad_c, grad_A, grad_alpha, grad_C], dtype=float)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        p0,\n        method='L-BFGS-B',\n        jac=gradient,\n        bounds=bounds,\n        options={'ftol': 1e-9, 'gtol': 1e-9}\n    )\n\n    # Return the fitted parameters [c, A, alpha, C]\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n- Adopted a simple 4-parameter shifted power-law form with clear, nonnegative\u2010only parameters.\n- Used mean squared error as the objective within a standard L-BFGS-B solver for numerical stability and bounded parameters.\n- Supplied an analytic gradient for faster, more reliable convergence.\n- Kept the code compact and easy to read, with straightforward initializations and bounds."]}}}