{"id": "4213fbba-4d1a-48db-955c-6d906093dbe8", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent\n      d0    = horizontal shift (to stabilize small-D behavior)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # floor shift to avoid singularities\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law by weighted least squares\n    (weighting by 1/y to emphasize relative error at large D).\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c\n    c0 = max(0.0, np.min(y) * 0.9)\n\n    # 2) Rough linear regression in log-log to get A0, alpha0\n    mask = y > c0 + 1e-8\n    if mask.sum() >= 2:\n        logD = np.log(D[mask])\n        logY = np.log(y[mask] - c0)\n        M = np.vstack([logD, np.ones_like(logD)]).T\n        slope, intercept = np.linalg.lstsq(M, logY, rcond=None)[0]\n        alpha0 = max(1e-6, -slope)\n        A0 = max(1e-6, np.exp(intercept))\n    else:\n        alpha0 = 0.5\n        A0 = np.max(y) - np.min(y)\n\n    # 3) Initial guess for d0\n    d0_0 = max(1.0, np.min(D) * 0.1)\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for [c, A, alpha, d0]\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [\n        np.min(y) * 2 + (np.max(y) - np.min(y)),\n        (np.max(y) - np.min(y)) * 5 + 1.0,\n        10.0,\n        np.max(D),\n    ]\n\n    # Weight by 1/y so that small losses (large D) have larger influence\n    w = 1.0 / np.maximum(y, 1e-6)\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return (pred - y) * w\n\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD = np.log(D_shift)\n        J = np.empty((D.size, 4), dtype=float)\n        J[:, 0] = 1.0                              # \u2202L/\u2202c\n        J[:, 1] = denom                           # \u2202L/\u2202A\n        J[:, 2] = -A * denom * logD               # \u2202L/\u2202alpha\n        J[:, 3] = -A * alpha * D_shift ** (-alpha - 1)  # \u2202L/\u2202d0\n        return J * w[:, None]\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000,\n        method='trf',\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "546b87d1-1374-4615-abb9-ada5cd5a10f4", "generation": 2, "timestamp": 1754719597.8228924, "iteration_found": 15, "metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Fitting failed: Evaluation failed or timed out."}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.02015918458171027, "nmae": 0.11928476422449608, "r2": 0.9798408154182897, "combined_score": 0.9802391774868194}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift to improve fit stability (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure non-negative inside power\n    return c + A * np.power(np.maximum(D + d0, 1e-8), -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to data via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Initial guesses based on data heuristics\n    c0     = max(0.0, np.min(y) * 0.9)\n    A0     = np.max(y) - np.min(y)\n    alpha0 = 0.5\n    d0_0   = max(1.0, np.min(D) * 0.5)\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to keep parameters in reasonable ranges\n    lower = [0.0,       0.0,      0.0,    0.0]\n    upper = [np.max(y)*2, (np.max(y)-np.min(y))*10 + 1.0, 10.0, np.max(D)*5]\n\n    # Residuals: model prediction minus observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals for faster convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        log_term = np.log(D_shift)\n        # derivatives of L w.r.t [c, A, alpha, d0]\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * log_term * denom\n        d_dd0    = -A * alpha * D_shift**(-alpha - 1)\n        # residual = pred - y, so same jacobian\n        return np.vstack((d_dc, d_dA, d_dalpha, d_dd0)).T\n\n    # Perform bounded least-squares optimization\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n    )\n\n    # Return the best-fit parameters [c, A, alpha, d0]\n    return result.x\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is the revised program.  All changes to both `scaling_law_func` and `fit_scaling_law` are contained between the `# EVOLVE-BLOCK-START` and `# EVOLVE-BLOCK-END` markers.\n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent\n      d0    = horizontal shift (to stabilize small-D behavior)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # floor shift to avoid singularities\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law by weighted least squares\n    (weighting by 1/y to emphasize relative error at large D).\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c\n    c0 = max(0.0, np.min(y) * 0.9)\n\n    # 2) Rough linear regression in log-log to get A0, alpha0\n    mask = y > c0 + 1e-8\n    if mask.sum() >= 2:\n        logD = np.log(D[mask])\n        logY = np.log(y[mask] - c0)\n        M = np.vstack([logD, np.ones_like(logD)]).T\n        slope, intercept = np.linalg.lstsq(M, logY, rcond=None)[0]\n        alpha0 = max(1e-6, -slope)\n        A0 = max(1e-6, np.exp(intercept))\n    else:\n        alpha0 = 0.5\n        A0 = np.max(y) - np.min(y)\n\n    # 3) Initial guess for d0\n    d0_0 = max(1.0, np.min(D) * 0.1)\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for [c, A, alpha, d0]\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [\n        np.min(y) * 2 + (np.max(y) - np.min(y)),\n        (np.max(y) - np.min(y)) * 5 + 1.0,\n        10.0,\n        np.max(D),\n    ]\n\n    # Weight by 1/y so that small losses (large D) have larger influence\n    w = 1.0 / np.maximum(y, 1e-6)\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return (pred - y) * w\n\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD = np.log(D_shift)\n        J = np.empty((D.size, 4), dtype=float)\n        J[:, 0] = 1.0                              # \u2202L/\u2202c\n        J[:, 1] = denom                           # \u2202L/\u2202A\n        J[:, 2] = -A * denom * logD               # \u2202L/\u2202alpha\n        J[:, 3] = -A * alpha * D_shift ** (-alpha - 1)  # \u2202L/\u2202d0\n        return J * w[:, None]\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000,\n        method='trf',\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\n\nSummary of improvements:\n\u2022 Automated log\u2013log linear regression to seed A and \u03b1, yielding a better starting point.  \n\u2022 Weighted residuals by 1/y (relative\u2010error weighting) to emphasize accuracy at large D (where loss is smallest).  \n\u2022 Simplified bounds and added small floors (1e-12) to avoid numerical issues.  \n\u2022 Kept parameter count \u22644 and preserved the original function signatures."]}}}