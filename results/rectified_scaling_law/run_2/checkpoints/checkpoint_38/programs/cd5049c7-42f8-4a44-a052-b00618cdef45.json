{"id": "cd5049c7-42f8-4a44-a052-b00618cdef45", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = horizontal shift (>=0)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a combination of\n      - absolute error:   L(D) - y\n      - relative error:   (L(D) - y)/y\n    via scipy.optimize.least_squares, using an analytic Jacobian.\n\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = D.size\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for c via asymptotic floor\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Rough log\u2013log linear fit on y - c0 to get A0, alpha0\n    y_shift = np.clip(y - c0, eps, None)\n    logD = np.log(D + eps)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-4, -slope)\n    A0 = max(1e-4, np.exp(intercept))\n\n    # 3) Horizontal shift guess\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [np.min(y), 10 * A0, 10.0, np.max(D)]\n\n    # 5) Build combined residual (absolute + relative)\n    w_rel = 0.1  # weight on relative error\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        r_abs = pred - y\n        # avoid divide by zero\n        r_rel = w_rel * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 6) Analytic Jacobian for the combined residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD_shift = np.log(D_shift)\n\n        # Jacobian for absolute part: dL/d[c,A,alpha,d0]\n        J_abs = np.vstack([\n            np.ones_like(D),                     # \u2202L/\u2202c\n            denom,                               # \u2202L/\u2202A\n            -A * denom * logD_shift,             # \u2202L/\u2202alpha\n            -A * alpha * D_shift**(-alpha - 1)   # \u2202L/\u2202d0\n        ]).T\n\n        # Jacobian for relative part\n        inv_y = 1.0 / np.maximum(y, eps)\n        J_rel = w_rel * (J_abs * inv_y[:, None])\n\n        # stack to match residuals\n        return np.vstack([J_abs, J_rel])\n\n    # 7) Solve with trust-region reflective algorithm\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "873432b4-f53f-4be6-b350-807fe02c53d2", "generation": 4, "timestamp": 1754719772.491803, "iteration_found": 38, "metrics": {"nmse": 0.019207319681291666, "nmae": 0.11201085897864077, "r2": 0.9807926803187084, "combined_score": 0.9811546489998739}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.020159414546009145, "nmae": 0.11928526015310598, "r2": 0.9798405854539909, "combined_score": 0.980238956521339}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0194, nmae: 0.1150, r2: 0.9806, combined_score: 0.9809\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0192, nmae: 0.1121, r2: 0.9808, combined_score: 0.9811\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5233)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic for c0: asymptotic floor near min(y)\n    c0 = max(0.0, y.min() * 0.9)\n\n    # Quick log-log linearization to get A0, alpha0\n    y_shift = y - c0\n    # Avoid non-positive before taking log\n    eps = np.finfo(float).tiny\n    y_shift = np.where(y_shift > eps, y_shift, eps)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # Small shift\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: \n    #   0 \u2264 c \u2264 min(y)\n    #   0 \u2264 A\n    #   0 \u2264 alpha \u2264 5\n    #   0 \u2264 d0 \u2264 max(D)\n    lower = [0.0,        0.0,      0.0,    0.0]\n    upper = [y.min(),   10 * A0,   5.0,    D.max()]\n\n    # Residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        # dL/dc = 1\n        # dL/dA = denom\n        # dL/dalpha = -A * log(D_shift) * denom\n        # dL/dd0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack((\n            np.ones_like(D),\n            denom,\n            -A * np.log(D_shift) * denom,\n            -A * alpha * D_shift**(-alpha - 1),\n        )).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0192), Performs well on nmae (0.1121), Performs well on r2 (0.9808), Performs well on combined_score (0.9811)\n\n\n### Program 2 (Score: 0.5240)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law with positivity enforced via exp-reparameterization:\n      L(D) = B + A * (D + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 log-domain parameters [logA, logalpha, logC, logB]\n    Returns:\n      preds: array of length N with predicted loss values\n    \"\"\"\n    # Flatten to 1D\n    D = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive natural-domain parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power law\n    return B + A * np.power(D + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) by minimizing a combined\n    absolute and relative squared-error objective in log-domain using L-BFGS-B.\n    Returns optimized log-domain params = [logA, logalpha, logC, logB].\n    \"\"\"\n    # Prepare 1D arrays\n    D = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Heuristic initial guesses in natural domain\n    range_y = np.max(y) - np.min(y)\n    A0     = max(range_y, 1e-3)                    # amplitude ~ range of losses\n    alpha0 = 0.5                                    # decay exponent\n    C0     = max(np.median(D) * 0.1, 1.0)           # horizontal shift\n    B0     = max(np.min(y) * 0.9, 1e-3)             # floor loss\n    p0     = np.log([A0, alpha0, C0, B0])          # log-domain start\n\n    # Objective: absolute MSE + small weight on relative MSE to balance NMSE & NMAE\n    def _objective(p):\n        pred     = scaling_law_func(D, p)\n        abs_mse  = np.mean((pred - y) ** 2)\n        rel_mse  = np.mean(((pred - y) / y) ** 2)\n        return abs_mse + 0.1 * rel_mse\n\n    # Optimize in log-domain with bounds implicit in exp-reparametrization\n    result = minimize(_objective, p0, method=\"L-BFGS-B\")\n    if not result.success:\n        # fallback to initial guess if optimization fails\n        return p0\n    return result.x\n```\nKey features: Performs well on nmse (0.0194), Performs well on nmae (0.1150), Performs well on r2 (0.9806), Performs well on combined_score (0.9809)\n\n\n### Program 3 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 49999.7500)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent\n      d0    = horizontal shift (to stabilize small-D behavior)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # floor shift to avoid singularities\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law by weighted least squares\n    (weighting by 1/y to emphasize relative error at large D).\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c\n    c0 = max(0.0, np.min(y) * 0.9)\n\n    # 2) Rough linear regression in log-log to get A0, alpha0\n    mask = y > c0 + 1e-8\n    if mask.sum() >= 2:\n        logD = np.log(D[mask])\n        logY = np.log(y[mask] - c0)\n        M = np.vstack([logD, np.ones_like(logD)]).T\n        slope, intercept = np.linalg.lstsq(M, logY, rcond=None)[0]\n        alpha0 = max(1e-6, -slope)\n        A0 = max(1e-6, np.exp(intercept))\n    else:\n        alpha0 = 0.5\n        A0 = np.max(y) - np.min(y)\n\n    # 3) Initial guess for d0\n    d0_0 = max(1.0, np.min(D) * 0.1)\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for [c, A, alpha, d0]\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [\n        np.min(y) * 2 + (np.max(y) - np.min(y)),\n        (np.max(y) - np.min(y)) * 5 + 1.0,\n        10.0,\n        np.max(D),\n    ]\n\n    # Weight by 1/y so that small losses (large D) have larger influence\n    w = 1.0 / np.maximum(y, 1e-6)\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return (pred - y) * w\n\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD = np.log(D_shift)\n        J = np.empty((D.size, 4), dtype=float)\n        J[:, 0] = 1.0                              # \u2202L/\u2202c\n        J[:, 1] = denom                           # \u2202L/\u2202A\n        J[:, 2] = -A * denom * logD               # \u2202L/\u2202alpha\n        J[:, 3] = -A * alpha * D_shift ** (-alpha - 1)  # \u2202L/\u2202d0\n        return J * w[:, None]\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000,\n        method='trf',\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5249)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # Ensure stability inside the power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to (D, L) via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))             # asymptote slightly below min observed loss\n    A0     = max(1e-3, np.ptp(y))                  # peak-to-peak amplitude\n    alpha0 = 0.5                                    # moderate decay exponent\n    d0_0   = max(1e-3, 0.1 * np.min(D))             # small shift for numerical stability\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to enforce positivity and reasonable ranges\n    lower = [0.0,          0.0,    1e-6,    0.0]\n    upper = [2.0*np.max(y), 10*A0+1,  10.0,  5.0*np.max(D)]\n\n    # Residuals between model prediction and observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytic Jacobian for faster, more stable convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift ** (-alpha)\n        logD    = np.log(D_shift)\n        # \u2202L/\u2202c = 1\n        # \u2202L/\u2202A = D_shift^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(D_shift) * D_shift^(-alpha)\n        # \u2202L/\u2202d0 = -A * alpha * D_shift^(-alpha-1)\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * denom * logD\n        d_dd0    = -A * alpha * D_shift ** (-alpha - 1)\n        return np.vstack([d_dc, d_dA, d_dalpha, d_dd0]).T\n\n    # Solve bounded least-squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5233, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n\n    params = [c, A, alpha, d0]\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-8)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by bounded least squares.\n    Returns params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic for c0: asymptotic floor near min(y)\n    c0 = max(0.0, y.min() * 0.9)\n\n    # Quick log-log linearization to get A0, alpha0\n    y_shift = y - c0\n    # Avoid non-positive before taking log\n    eps = np.finfo(float).tiny\n    y_shift = np.where(y_shift > eps, y_shift, eps)\n    logslope, logintercept = np.polyfit(np.log(D + eps), np.log(y_shift), 1)\n    alpha0 = max(1e-4, -logslope)\n    A0     = max(1e-4, np.exp(logintercept))\n\n    # Small shift\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds: \n    #   0 \u2264 c \u2264 min(y)\n    #   0 \u2264 A\n    #   0 \u2264 alpha \u2264 5\n    #   0 \u2264 d0 \u2264 max(D)\n    lower = [0.0,        0.0,      0.0,    0.0]\n    upper = [y.min(),   10 * A0,   5.0,    D.max()]\n\n    # Residuals\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Jacobian of residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-8)\n        denom    = D_shift**(-alpha)\n        # dL/dc = 1\n        # dL/dA = denom\n        # dL/dalpha = -A * log(D_shift) * denom\n        # dL/dd0 = -A * alpha * D_shift^(-alpha-1)\n        return np.vstack((\n            np.ones_like(D),\n            denom,\n            -A * np.log(D_shift) * denom,\n            -A * alpha * D_shift**(-alpha - 1),\n        )).T\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-8,\n        ftol=1e-8,\n        max_nfev=2000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent\n      d0    = horizontal shift (to stabilize small-D behavior)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # floor shift to avoid singularities\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law by weighted least squares\n    (weighting by 1/y to emphasize relative error at large D).\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # 1) Initial guess for c\n    c0 = max(0.0, np.min(y) * 0.9)\n\n    # 2) Rough linear regression in log-log to get A0, alpha0\n    mask = y > c0 + 1e-8\n    if mask.sum() >= 2:\n        logD = np.log(D[mask])\n        logY = np.log(y[mask] - c0)\n        M = np.vstack([logD, np.ones_like(logD)]).T\n        slope, intercept = np.linalg.lstsq(M, logY, rcond=None)[0]\n        alpha0 = max(1e-6, -slope)\n        A0 = max(1e-6, np.exp(intercept))\n    else:\n        alpha0 = 0.5\n        A0 = np.max(y) - np.min(y)\n\n    # 3) Initial guess for d0\n    d0_0 = max(1.0, np.min(D) * 0.1)\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds for [c, A, alpha, d0]\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [\n        np.min(y) * 2 + (np.max(y) - np.min(y)),\n        (np.max(y) - np.min(y)) * 5 + 1.0,\n        10.0,\n        np.max(D),\n    ]\n\n    # Weight by 1/y so that small losses (large D) have larger influence\n    w = 1.0 / np.maximum(y, 1e-6)\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        return (pred - y) * w\n\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD = np.log(D_shift)\n        J = np.empty((D.size, 4), dtype=float)\n        J[:, 0] = 1.0                              # \u2202L/\u2202c\n        J[:, 1] = denom                           # \u2202L/\u2202A\n        J[:, 2] = -A * denom * logD               # \u2202L/\u2202alpha\n        J[:, 3] = -A * alpha * D_shift ** (-alpha - 1)  # \u2202L/\u2202d0\n        return J * w[:, None]\n\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=10000,\n        method='trf',\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict loss as a 4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    where:\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = data-size shift (>=0)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted losses\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # Ensure stability inside the power\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift ** (-alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4-parameter scaling law to (D, L) via bounded least-squares.\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, 0.9 * np.min(y))             # asymptote slightly below min observed loss\n    A0     = max(1e-3, np.ptp(y))                  # peak-to-peak amplitude\n    alpha0 = 0.5                                    # moderate decay exponent\n    d0_0   = max(1e-3, 0.1 * np.min(D))             # small shift for numerical stability\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # Bounds to enforce positivity and reasonable ranges\n    lower = [0.0,          0.0,    1e-6,    0.0]\n    upper = [2.0*np.max(y), 10*A0+1,  10.0,  5.0*np.max(D)]\n\n    # Residuals between model prediction and observed loss\n    def resid(p):\n        return scaling_law_func(D, p) - y\n\n    # Analytic Jacobian for faster, more stable convergence\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom   = D_shift ** (-alpha)\n        logD    = np.log(D_shift)\n        # \u2202L/\u2202c = 1\n        # \u2202L/\u2202A = D_shift^(-alpha)\n        # \u2202L/\u2202alpha = -A * log(D_shift) * D_shift^(-alpha)\n        # \u2202L/\u2202d0 = -A * alpha * D_shift^(-alpha-1)\n        d_dc     = np.ones_like(D)\n        d_dA     = denom\n        d_dalpha = -A * denom * logD\n        d_dd0    = -A * alpha * D_shift ** (-alpha - 1)\n        return np.vstack([d_dc, d_dA, d_dalpha, d_dd0]).T\n\n    # Solve bounded least-squares\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-9,\n        ftol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is an updated implementation that (1) keeps the same 4-parameter shifted power\u2010law form, (2) uses a combined absolute + relative least\u2010squares objective to better balance NMSE/NMAE, (3) re-uses an analytic Jacobian for speed and stability, and (4) uses a log\u2013log linear regression for a robust initial guess:\n\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    params = [c, A, alpha, d0]\n      c     = asymptotic minimum loss\n      A     = amplitude\n      alpha = decay exponent (>0)\n      d0    = horizontal shift (>=0)\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside exponent\n    D_shift = np.maximum(D + d0, 1e-12)\n    return c + A * D_shift**(-alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter scaling law by minimizing a combination of\n      - absolute error:   L(D) - y\n      - relative error:   (L(D) - y)/y\n    via scipy.optimize.least_squares, using an analytic Jacobian.\n\n    Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n    N = D.size\n    eps = np.finfo(float).eps\n\n    # 1) Initial guess for c via asymptotic floor\n    c0 = max(0.0, 0.9 * np.min(y))\n\n    # 2) Rough log\u2013log linear fit on y - c0 to get A0, alpha0\n    y_shift = np.clip(y - c0, eps, None)\n    logD = np.log(D + eps)\n    logY = np.log(y_shift)\n    slope, intercept = np.polyfit(logD, logY, 1)\n    alpha0 = max(1e-4, -slope)\n    A0 = max(1e-4, np.exp(intercept))\n\n    # 3) Horizontal shift guess\n    d0_0 = max(1.0, 0.1 * D.min())\n\n    x0 = np.array([c0, A0, alpha0, d0_0], dtype=float)\n\n    # 4) Bounds\n    lower = [0.0, 0.0, 1e-6, 0.0]\n    upper = [np.min(y), 10 * A0, 10.0, np.max(D)]\n\n    # 5) Build combined residual (absolute + relative)\n    w_rel = 0.1  # weight on relative error\n\n    def resid(p):\n        pred = scaling_law_func(D, p)\n        r_abs = pred - y\n        # avoid divide by zero\n        r_rel = w_rel * r_abs / np.maximum(y, eps)\n        return np.concatenate([r_abs, r_rel])\n\n    # 6) Analytic Jacobian for the combined residuals\n    def jac(p):\n        c, A, alpha, d0 = p\n        D_shift = np.maximum(D + d0, 1e-12)\n        denom = D_shift ** (-alpha)\n        logD_shift = np.log(D_shift)\n\n        # Jacobian for absolute part: dL/d[c,A,alpha,d0]\n        J_abs = np.vstack([\n            np.ones_like(D),                     # \u2202L/\u2202c\n            denom,                               # \u2202L/\u2202A\n            -A * denom * logD_shift,             # \u2202L/\u2202alpha\n            -A * alpha * D_shift**(-alpha - 1)   # \u2202L/\u2202d0\n        ]).T\n\n        # Jacobian for relative part\n        inv_y = 1.0 / np.maximum(y, eps)\n        J_rel = w_rel * (J_abs * inv_y[:, None])\n\n        # stack to match residuals\n        return np.vstack([J_abs, J_rel])\n\n    # 7) Solve with trust-region reflective algorithm\n    result = least_squares(\n        resid,\n        x0,\n        jac=jac,\n        bounds=(lower, upper),\n        xtol=1e-12,\n        ftol=1e-12,\n        gtol=1e-12,\n        max_nfev=3000,\n        verbose=0\n    )\n\n    return result.x\n\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- We keep the same 4\u2010parameter form `c + A*(D + d0)^(-alpha)` for interpretability.\n- We form a residual vector that contains both the absolute error `(pred \u2212 y)` and a scaled relative error `0.1*(pred \u2212 y)/y`.  This directly balances NMSE and NMAE in the fitting objective.\n- We provide an analytic Jacobian for both parts to speed up and stabilize convergence.\n- Initial guesses for `A` and `alpha` are derived from a quick log\u2013log linear regression of `y \u2212 c0` vs. `D`.\n- Bounds are kept sensible to maintain physical meaning (e.g. `c \u2208 [0, min(y)]`, `alpha \u2208 [1e\u22126, 10]`, etc.).\n- We tighten tolerances (`1e-12`) and allow up to 3000 function evaluations to get an accurate fit."]}}}