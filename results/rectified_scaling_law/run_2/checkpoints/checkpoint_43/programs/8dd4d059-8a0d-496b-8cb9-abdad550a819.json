{"id": "8dd4d059-8a0d-496b-8cb9-abdad550a819", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law with positivity enforced via exp-reparameterization:\n      L(D) = B + A * (D + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 log-domain parameters [logA, logalpha, logC, logB]\n    Returns:\n      preds: array of length N with predicted loss values\n    \"\"\"\n    # Flatten to 1D\n    D = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive natural-domain parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power law\n    return B + A * np.power(D + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) by minimizing a combined\n    absolute and relative squared-error objective in log-domain using L-BFGS-B.\n    Returns optimized log-domain params = [logA, logalpha, logC, logB].\n    \"\"\"\n    # Prepare 1D arrays\n    D = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Heuristic initial guesses in natural domain\n    range_y = np.max(y) - np.min(y)\n    A0     = max(range_y, 1e-3)                    # amplitude ~ range of losses\n    alpha0 = 0.5                                    # decay exponent\n    C0     = max(np.median(D) * 0.1, 1.0)           # horizontal shift\n    B0     = max(np.min(y) * 0.9, 1e-3)             # floor loss\n    p0     = np.log([A0, alpha0, C0, B0])          # log-domain start\n\n    # Objective: absolute MSE + small weight on relative MSE to balance NMSE & NMAE\n    def _objective(p):\n        pred     = scaling_law_func(D, p)\n        abs_mse  = np.mean((pred - y) ** 2)\n        rel_mse  = np.mean(((pred - y) / y) ** 2)\n        return abs_mse + 0.1 * rel_mse\n\n    # Optimize in log-domain with bounds implicit in exp-reparametrization\n    result = minimize(_objective, p0, method=\"L-BFGS-B\")\n    if not result.success:\n        # fallback to initial guess if optimization fails\n        return p0\n    return result.x", "language": "python", "parent_id": "1b4f2ebe-2ea7-4b05-babd-f422bf96fd75", "generation": 3, "timestamp": 1754719625.6430068, "iteration_found": 21, "metrics": {"nmse": 0.019439116739766907, "nmae": 0.11499537130428912, "r2": 0.980560883260233, "combined_score": 0.9809315569507138}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.020159236711435616, "nmae": 0.11928490648813651, "r2": 0.9798407632885644, "combined_score": 0.9802391273969929}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between data size and loss values in supervised fine-tuning across different model-dataset combinations.\n\n**IMPORTANT: The scaling law function must use no more than 4 parameters.**\n\nFocus on mathematical accuracy across different model architectures, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS:**\n- Data Size: 200 to 819200 (14 unique sizes)\n- Loss Values: 1.7 to 4.9 range\n- Multiple groups: Different (model, dataset) combinations from Flan, Gigaword, and Wikiword datasets\n- Models range from 124M to 1.3B parameters\n- Each group has training data (excluding largest data size) and test data (largest data size only)\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes (200 to 819200)\n    # params: Array of up to 4 parameters\n    # Returns: Predicted loss values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,1) array with columns [data_size]\n    # data_size: Array of data sizes\n    # loss_values: Array of corresponding loss values\n    # Returns: Optimized parameters (up to 4 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0202\n- nmae: 0.1193\n- r2: 0.9798\n- combined_score: 0.9802\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0202, nmae: 0.1193, r2: 0.9798, combined_score: 0.9802\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0198, nmae: 0.1166, r2: 0.9802, combined_score: 0.9806\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0198), Performs well on nmae (0.1166), Performs well on r2 (0.9802), Performs well on combined_score (0.9806)\n\n\n### Program 2 (Score: 0.5249)\n```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted loss values\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside the exponent\n    return c + A * np.power(D + d0, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) via bounded nonlinear\n    least-squares (scipy.curve_fit). Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, np.min(y) * 0.95)\n    A0     = max(1e-6, np.max(y) - c0)\n    alpha0 = 0.5\n    d0_0   = max(1e-6, np.min(D) * 0.1)\n    p0 = [c0, A0, alpha0, d0_0]\n\n    # Bounds for stability\n    lower = [0.0,                    0.0,    0.0,    0.0]\n    upper = [np.max(y)*2.0,  (np.max(y)-np.min(y))*10.0 + 1.0, 10.0, np.max(D)*5.0]\n\n    # Define the model for curve_fit\n    def _model(D, c, A, alpha, d0):\n        return c + A * np.power(D + d0, -alpha)\n\n    try:\n        popt, _ = curve_fit(\n            _model,\n            D,\n            y,\n            p0=p0,\n            bounds=(lower, upper),\n            max_nfev=5000,\n        )\n    except Exception:\n        # Fallback to initial guess if optimization fails\n        popt = np.array(p0, dtype=float)\n\n    return np.asarray(popt, dtype=float)\n```\nKey features: Performs well on nmse (0.0202), Performs well on nmae (0.1193), Performs well on r2 (0.9798), Performs well on combined_score (0.9802)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5243, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling\u2010law model:\n  L(N) = B + A * (N + C)^(\u2212\u03b1)\nwith 4 parameters (A, \u03b1, C, B) all kept positive via an exp\u2013reparameterization.\nFitting is done in the unconstrained log\u2010domain using L-BFGS-B for stability.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: array of shape (N,) or (N,1) of data sizes\n    params: array of 4 real numbers [pA, p\u03b1, pC, pB] in log\u2010domain\n    Returns: Predicted loss of shape (N,)\n    \"\"\"\n    # Flatten input to 1D\n    X = np.asarray(data_points).reshape(-1)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Reconstruct positive parameters\n    A     = np.exp(p[0])    # amplitude\n    \u03b1     = np.exp(p[1])    # exponent\n    C     = np.exp(p[2])    # horizontal offset\n    B     = np.exp(p[3])    # asymptotic floor\n    # Compute scaling\u2010law prediction\n    return B + A * (X + C) ** (-\u03b1)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 4\u2010parameter scaling law to (data_points, loss_values).\n    Returns the optimized params in the same log\u2010domain form accepted\n    by scaling_law_func.\n    \"\"\"\n    # Prepare 1D arrays\n    X = np.asarray(data_points).reshape(-1)\n    y = np.asarray(loss_values).reshape(-1)\n    # Initial guesses for natural\u2010domain params\n    #   A0 \u2248 range of y, \u03b10 ~ 0.5, C0 ~ median N, B0 \u2248 min y\n    A0 = max(np.max(y) - np.min(y), 1e-3)\n    \u03b10 = 0.5\n    C0 = max(np.median(X), 1.0)\n    B0 = max(np.min(y), 1e-3)\n    # Log\u2010domain starting point\n    p0 = np.log([A0, \u03b10, C0, B0])\n\n    # Objective: mean squared error\n    def _obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Use L-BFGS-B for robust, bounded quasi\u2010Newton\n    result = minimize(_obj, p0, method=\"L-BFGS-B\")\n    p_opt = result.x if result.success else p0\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law:\n      L(D) = c + A * (D + d0)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 parameters [c, A, alpha, d0]\n    Returns:\n      preds: array of length N with predicted loss values\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    c, A, alpha, d0 = params\n    # ensure positivity inside the exponent\n    return c + A * np.power(D + d0, -alpha)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) via bounded nonlinear\n    least-squares (scipy.curve_fit). Returns optimized params = [c, A, alpha, d0].\n    \"\"\"\n    D = np.asarray(data_points).ravel().astype(float)\n    y = np.asarray(loss_values).ravel().astype(float)\n\n    # Heuristic initial guesses\n    c0     = max(0.0, np.min(y) * 0.95)\n    A0     = max(1e-6, np.max(y) - c0)\n    alpha0 = 0.5\n    d0_0   = max(1e-6, np.min(D) * 0.1)\n    p0 = [c0, A0, alpha0, d0_0]\n\n    # Bounds for stability\n    lower = [0.0,                    0.0,    0.0,    0.0]\n    upper = [np.max(y)*2.0,  (np.max(y)-np.min(y))*10.0 + 1.0, 10.0, np.max(D)*5.0]\n\n    # Define the model for curve_fit\n    def _model(D, c, A, alpha, d0):\n        return c + A * np.power(D + d0, -alpha)\n\n    try:\n        popt, _ = curve_fit(\n            _model,\n            D,\n            y,\n            p0=p0,\n            bounds=(lower, upper),\n            max_nfev=5000,\n        )\n    except Exception:\n        # Fallback to initial guess if optimization fails\n        popt = np.array(p0, dtype=float)\n\n    return np.asarray(popt, dtype=float)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    4-parameter shifted power law with positivity enforced via exp-reparameterization:\n      L(D) = B + A * (D + C)^(-alpha)\n    Inputs:\n      data_points: array-like of shape (N,1) or (N,) with data sizes\n      params:      array-like of 4 log-domain parameters [logA, logalpha, logC, logB]\n    Returns:\n      preds: array of length N with predicted loss values\n    \"\"\"\n    # Flatten to 1D\n    D = np.asarray(data_points).reshape(-1).astype(float)\n    p = np.asarray(params).reshape(-1)\n    if p.size != 4:\n        raise ValueError(f\"Expected 4 parameters, got {p.size}\")\n    # Recover positive natural-domain parameters\n    A     = np.exp(p[0])\n    alpha = np.exp(p[1])\n    C     = np.exp(p[2])\n    B     = np.exp(p[3])\n    # Compute shifted power law\n    return B + A * np.power(D + C, -alpha)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 4-parameter shifted power law to (D, L) by minimizing a combined\n    absolute and relative squared-error objective in log-domain using L-BFGS-B.\n    Returns optimized log-domain params = [logA, logalpha, logC, logB].\n    \"\"\"\n    # Prepare 1D arrays\n    D = np.asarray(data_points).reshape(-1).astype(float)\n    y = np.asarray(loss_values).reshape(-1).astype(float)\n\n    # Heuristic initial guesses in natural domain\n    range_y = np.max(y) - np.min(y)\n    A0     = max(range_y, 1e-3)                    # amplitude ~ range of losses\n    alpha0 = 0.5                                    # decay exponent\n    C0     = max(np.median(D) * 0.1, 1.0)           # horizontal shift\n    B0     = max(np.min(y) * 0.9, 1e-3)             # floor loss\n    p0     = np.log([A0, alpha0, C0, B0])          # log-domain start\n\n    # Objective: absolute MSE + small weight on relative MSE to balance NMSE & NMAE\n    def _objective(p):\n        pred     = scaling_law_func(D, p)\n        abs_mse  = np.mean((pred - y) ** 2)\n        rel_mse  = np.mean(((pred - y) / y) ** 2)\n        return abs_mse + 0.1 * rel_mse\n\n    # Optimize in log-domain with bounds implicit in exp-reparametrization\n    result = minimize(_objective, p0, method=\"L-BFGS-B\")\n    if not result.success:\n        # fallback to initial guess if optimization fails\n        return p0\n    return result.x\n```"]}}}