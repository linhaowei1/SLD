{"id": "7359b396-d72e-4d93-8058-5767400cb69d", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Internal helper: compute the 7 basis functions for each sample:\n      [1,\n       log(P_non_vocab)/log(P_max),\n       log(vocab_size)/log(V_max),\n       log(num_chars)/log(D_max),\n       (log(P_non_vocab)/log(P_max))^2,\n       (log(vocab_size)/log(V_max))^2,\n       (log(num_chars)/log(D_max))^2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    \n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    \n    # known maxima for normalization\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n    \n    # normalized log-features in [0,1]\n    lP = np.log(P_non + eps) / np.log(P_max)\n    lV = np.log(V      + eps) / np.log(V_max)\n    lD = np.log(D      + eps) / np.log(D_max)\n    \n    # assemble design matrix with intercept, linear terms, and squared terms\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from [P_non_vocab, vocab_size, num_characters] using a\n    7-parameter log-quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,3)\n      params:      array-like of length 7\n      \n    Returns:\n      preds: numpy array of shape (N,)\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    Phi = _build_design_matrix(data_points)\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via ridge-regularized least squares.\n    \n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: numpy array of length 7\n    \"\"\"\n    Phi = _build_design_matrix(data_points)\n    y   = np.asarray(loss_values, dtype=float).ravel()\n    \n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # small ridge for numerical stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(Phi.shape[1])\n    b = Phi.T.dot(y)\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4bc1ab25-6bb1-4e7f-9341-5cf5423639e3", "generation": 2, "timestamp": 1754720543.4702532, "iteration_found": 40, "metrics": {"nmse": 1.5731775709597984, "nmae": 1.3905339337235076, "r2": -0.5731775709597984, "combined_score": 0.38862455948852326}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.192632500862975, "nmae": 2.3596245774884803, "r2": -2.192632500862975, "combined_score": 0.2385136307067621}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.1926\n- nmae: 2.3596\n- r2: -2.1926\n- combined_score: 0.2385\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.5732, nmae: 1.3905, r2: -0.5732, combined_score: 0.3886\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6948)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log-quadratic model\n    in normalized log-space. This 7-parameter form captures individual\n    curvature in each feature (no cross terms), with built-in normalization\n    for numerical stability.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0,\n         p1, p2, p3,    # linear terms for normalized logs\n         p4, p5, p6]    # squared terms for normalized logs\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # constants for normalization (dataset-known maxima)\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # compute normalized logs in [0,1]\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # build feature matrix for each sample: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # this gives 7 basis functions for the 7 parameters\n    # no cross-terms to keep parameter count fixed\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares. Features are normalized log-features and their squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # same normalization constants as in scaling_law_func\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # normalized logs\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # design matrix: intercept + 3 linear + 3 squared terms\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)  # shape: (N, 7)\n    \n    # ridge regularization (small lambda for numerical stability)\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.5732), Performs well on nmae (1.3905), Performs well on r2 (-0.5732), Performs well on combined_score (0.3886)\n\n\n### Program 2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter log-linear model with pairwise interactions:\n\n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n\n    Arguments:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # Unpack raw features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n\n    # Apply log-transform (adds numerical stability and linearizes power laws)\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # Linear combination with pairwise interactions\n    return (\n          p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law to observed Lossu values via\n    closed-form ridge-regularized least squares.\n\n    Arguments:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu values\n\n    Returns:\n      params: numpy array of shape (7,) with fitted parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Unpack and log-transform features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # Build design matrix with 7 basis functions:\n    # [1, lnP, lnV, lnD, lnP*lnV, lnP*lnD, lnV*lnD]\n    Phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # Ridge regularization to improve numerical stability\n    lambda_reg = 1e-6\n    A = Phi.T.dot(Phi) + lambda_reg * np.eye(7)\n    b = Phi.T.dot(y)\n\n    # Solve the linear system for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n### Program 3 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a 7\u2010parameter\n    log\u2010linear model with pairwise interactions.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    params: array\u2010like of length 7\n        [p0, p1, p2, p3, p4, p5, p6] such that\n        Lossu \u2248 p0\n              + p1 * ln(P_non_vocab)\n              + p2 * ln(vocab_size)\n              + p3 * ln(num_characters)\n              + p4 * (ln(P_non_vocab) * ln(vocab_size))\n              + p5 * (ln(P_non_vocab) * ln(num_characters))\n              + p6 * (ln(vocab_size)   * ln(num_characters))\n    Returns: ndarray of shape (N,) of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # raw features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # linear combination with interactions\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    loss_values: array\u2010like of shape (N,)\n        Observed Lossu.\n\n    Returns: ndarray of length 7 with fitted parameters.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    # extract & log\u2010transform\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    D     = X[:, 2]\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # design matrix: intercept, 3 main effects, 3 pairwise interactions\n    Phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization for numerical stability\n    lambda_reg = 1e-6\n    A = Phi.T @ Phi + lambda_reg * np.eye(7)\n    b = Phi.T @ y\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6948, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log-quadratic model\n    in normalized log-space. This 7-parameter form captures individual\n    curvature in each feature (no cross terms), with built-in normalization\n    for numerical stability.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0,\n         p1, p2, p3,    # linear terms for normalized logs\n         p4, p5, p6]    # squared terms for normalized logs\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # constants for normalization (dataset-known maxima)\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # compute normalized logs in [0,1]\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # build feature matrix for each sample: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # this gives 7 basis functions for the 7 parameters\n    # no cross-terms to keep parameter count fixed\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares. Features are normalized log-features and their squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # same normalization constants as in scaling_law_func\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # normalized logs\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # design matrix: intercept + 3 linear + 3 squared terms\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)  # shape: (N, 7)\n    \n    # ridge regularization (small lambda for numerical stability)\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.573), Excellent nmae (1.391)\n\n\n### Inspiration 2 (Score: 0.8996, Type: High-Performer)\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions,\nand fit it with a numerically stable least\u2010squares routine using column scaling\nto improve conditioning and eliminate regularization bias.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given raw data_points and a 7\u2010element parameter vector.\n    \n    data_points: array-like of shape (N,3),\n                 columns = [P_non_vocab, vocab_size, num_characters].\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6].\n    \n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # log\u2010transform with small epsilon for safety\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    ln = np.log(N_chars + eps)\n    lv = np.log(V       + eps)\n    \n    # build design matrix: constant, main logs, and pairwise products\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via numerically stable least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with fitted [p0..p6].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # log\u2010transform\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    ln = np.log(N_chars + eps)\n    lv = np.log(V       + eps)\n    \n    # build design matrix\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # scale columns (except intercept) for better conditioning\n    scales = np.ones(F.shape[1], dtype=float)\n    scales[1:] = np.std(F[:, 1:], axis=0, ddof=0)\n    scales[scales < 1e-12] = 1.0\n    F_scaled = F / scales\n    \n    # solve ordinary least squares in the scaled space\n    p_scaled, *_ = np.linalg.lstsq(F_scaled, y, rcond=None)\n    \n    # recover parameters for the original scale\n    params_opt = p_scaled / scales\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.194), Excellent nmae (2.360)\n\n\n### Inspiration 3 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a 7\u2010parameter\n    log\u2010linear model with pairwise interactions.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    params: array\u2010like of length 7\n        [p0, p1, p2, p3, p4, p5, p6] such that\n        Lossu \u2248 p0\n              + p1 * ln(P_non_vocab)\n              + p2 * ln(vocab_size)\n              + p3 * ln(num_characters)\n              + p4 * (ln(P_non_vocab) * ln(vocab_size))\n              + p5 * (ln(P_non_vocab) * ln(num_characters))\n              + p6 * (ln(vocab_size)   * ln(num_characters))\n    Returns: ndarray of shape (N,) of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # raw features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # linear combination with interactions\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    loss_values: array\u2010like of shape (N,)\n        Observed Lossu.\n\n    Returns: ndarray of length 7 with fitted parameters.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    # extract & log\u2010transform\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    D     = X[:, 2]\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # design matrix: intercept, 3 main effects, 3 pairwise interactions\n    Phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization for numerical stability\n    lambda_reg = 1e-6\n    A = Phi.T @ Phi + lambda_reg * np.eye(7)\n    b = Phi.T @ y\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 4 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 5 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter log-linear model with pairwise interactions:\n\n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n\n    Arguments:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # Unpack raw features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n\n    # Apply log-transform (adds numerical stability and linearizes power laws)\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # Linear combination with pairwise interactions\n    return (\n          p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law to observed Lossu values via\n    closed-form ridge-regularized least squares.\n\n    Arguments:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu values\n\n    Returns:\n      params: numpy array of shape (7,) with fitted parameters\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Unpack and log-transform features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # Build design matrix with 7 basis functions:\n    # [1, lnP, lnV, lnD, lnP*lnV, lnP*lnD, lnV*lnD]\n    Phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # Ridge regularization to improve numerical stability\n    lambda_reg = 1e-6\n    A = Phi.T.dot(Phi) + lambda_reg * np.eye(7)\n    b = Phi.T.dot(y)\n\n    # Solve the linear system for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Internal helper: compute the 7 basis functions for each sample:\n      [1,\n       log(P_non_vocab)/log(P_max),\n       log(vocab_size)/log(V_max),\n       log(num_chars)/log(D_max),\n       (log(P_non_vocab)/log(P_max))^2,\n       (log(vocab_size)/log(V_max))^2,\n       (log(num_chars)/log(D_max))^2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    \n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    \n    # known maxima for normalization\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n    \n    # normalized log-features in [0,1]\n    lP = np.log(P_non + eps) / np.log(P_max)\n    lV = np.log(V      + eps) / np.log(V_max)\n    lD = np.log(D      + eps) / np.log(D_max)\n    \n    # assemble design matrix with intercept, linear terms, and squared terms\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from [P_non_vocab, vocab_size, num_characters] using a\n    7-parameter log-quadratic scaling law.\n    \n    Args:\n      data_points: array-like of shape (N,3)\n      params:      array-like of length 7\n      \n    Returns:\n      preds: numpy array of shape (N,)\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    Phi = _build_design_matrix(data_points)\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via ridge-regularized least squares.\n    \n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n    \n    Returns:\n      params: numpy array of length 7\n    \"\"\"\n    Phi = _build_design_matrix(data_points)\n    y   = np.asarray(loss_values, dtype=float).ravel()\n    \n    if Phi.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    \n    # small ridge for numerical stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(Phi.shape[1])\n    b = Phi.T.dot(y)\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END\n```"]}}}