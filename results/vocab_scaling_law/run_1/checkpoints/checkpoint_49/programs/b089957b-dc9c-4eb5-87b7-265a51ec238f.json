{"id": "b089957b-dc9c-4eb5-87b7-265a51ec238f", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a compact 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu \u2248 b0\n             + b1*xp + b2*xv + b3*xd\n             + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    This form captures curvature along each axis, remains linear in parameters,\n    and can be robustly fitted via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # unpack and safeguard positivity\n    eps = 1e-12\n    P = np.maximum(X[:, 0], eps)\n    V = np.maximum(X[:, 1], eps)\n    D = np.maximum(X[:, 2], eps)\n\n    # log-transformed features\n    xp = np.log(P)\n    xv = np.log(V)\n    xd = np.log(D)\n\n    # parameters vector\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # quadratic-in-log prediction\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * (xp ** 2)\n        + p[5] * (xv ** 2)\n        + p[6] * (xd ** 2)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares. Returns a parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # safeguard and log-transform inputs\n    eps = 1e-12\n    xp = np.log(np.maximum(X[:, 0], eps))\n    xv = np.log(np.maximum(X[:, 1], eps))\n    xd = np.log(np.maximum(X[:, 2], eps))\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp ** 2,\n        xv ** 2,\n        xd ** 2\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(P)\n    b = Phi.T @ y\n\n    # closed-form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "21cae19d-3bb6-4446-92d2-63c3d2562619", "generation": 3, "timestamp": 1754722305.0716949, "iteration_found": 39, "metrics": {"nmse": 0.030342558165823166, "nmae": 0.16166167653909813, "r2": 0.9696574418341768, "combined_score": 0.9705509998346201}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.04936209080184245, "nmae": 0.22035287919196023, "r2": 0.9506379091981576, "combined_score": 0.9529599065617821}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0494\n- nmae: 0.2204\n- r2: 0.9506\n- combined_score: 0.9530\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0685, nmae: 0.2707, r2: 0.9315, combined_score: 0.9359\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0494, nmae: 0.2204, r2: 0.9506, combined_score: 0.9530\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a compact 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu \u2248 b0\n             + b1*xp + b2*xv + b3*xd\n             + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    This form captures curvature in each axis, remains linear in parameters,\n    and can be fitted robustly via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # compute log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # evaluate quadratic model\n    return (\n        p[0]\n        + p[1]*xp\n        + p[2]*xv\n        + p[3]*xd\n        + p[4]*(xp**2)\n        + p[5]*(xv**2)\n        + p[6]*(xd**2)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares. Returns a parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp**2,\n        xv**2,\n        xd**2\n    ])\n\n    # small ridge for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5433)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-linear scaling law with pairwise interactions:\n      Let x1 = log(P_non_vocab),\n          x2 = log(num_characters),\n          x3 = log(vocab_size).\n      We model\n         Lossu \u2243 a0\n               + a1*x1 + a2*x2 + a3*x3\n               + a4*(x1*x2) + a5*(x1*x3) + a6*(x2*x3)\n      where params = [a0, a1, a2, a3, a4, a5, a6].\n    This form is linear in the transformed features and yields a\n    closed-form least-squares fit for stability and interpretability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # shape check and reshape single point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # ensure strict positivity before log\n    eps = 1e-12\n    P = np.maximum(P, eps)\n    V = np.maximum(V, eps)\n    D = np.maximum(D, eps)\n    \n    # log-transform\n    x1 = np.log(P)\n    x2 = np.log(D)\n    x3 = np.log(V)\n    \n    # build design matrix (N\u00d77)\n    # columns: [1, x1, x2, x3, x1*x2, x1*x3, x2*x3]\n    ones = np.ones_like(x1)\n    F = np.vstack((ones,\n                   x1,\n                   x2,\n                   x3,\n                   x1 * x2,\n                   x1 * x3,\n                   x2 * x3)).T\n    \n    # linear prediction\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear model by ordinary least squares.\n    Returns params = [a0, a1, a2, a3, a4, a5, a6] minimizing\n      \u2016F\u00b7params \u2212 loss_values\u2016\u00b2\n    where F is constructed as in scaling_law_func.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    \n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # unpack and log-transform\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    eps = 1e-12\n    P = np.maximum(P, eps)\n    V = np.maximum(V, eps)\n    D = np.maximum(D, eps)\n    \n    x1 = np.log(P)\n    x2 = np.log(D)\n    x3 = np.log(V)\n    \n    # build design matrix\n    ones = np.ones_like(x1)\n    F = np.vstack((ones,\n                   x1,\n                   x2,\n                   x3,\n                   x1 * x2,\n                   x1 * x3,\n                   x2 * x3)).T  # shape (N,7)\n    \n    # solve least squares\n    try:\n        params, *_ = np.linalg.lstsq(F, y, rcond=None)\n        # ensure we return a flat array of length 7\n        params = np.asarray(params, dtype=float).ravel()\n        if params.size != 7:\n            # fallback if something unexpected happens\n            params = np.zeros(7, dtype=float)\n    except Exception:\n        # on failure, return zeros\n        params = np.zeros(7, dtype=float)\n    \n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0494), Performs well on nmae (0.2204), Performs well on r2 (0.9506), Performs well on combined_score (0.9530)\n\n\n### Program 3 (Score: 0.5517)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n# Fixed normalization scales to keep inputs O(1) and avoid numerical issues\n_P_SCALE   = 1e9    # scale for non-vocab parameters\n_V_SCALE   = 1e5    # scale for vocabulary size\n_D_SCALE   = 1e12   # scale for number of characters\n_EPS       = 1e-12  # epsilon to prevent zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law with normalized inputs:\n      Lossu = L0\n            + A * (P_non_vocab / _P_SCALE)^(-alpha)\n            + B * (D_characters / _D_SCALE)^(-beta)\n            + C * (Vocab_size / _V_SCALE)^(-gamma)\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    and A, B, C, alpha, beta, gamma > 0 via exponentiation of their logs.\n    \"\"\"\n    # Ensure 2D array for vectorized computation\n    X = np.atleast_2d(data_points).astype(float)\n    \n    # Normalize features\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # Unpack parameters\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # Compute predicted Lossu\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law using L-BFGS-B.\n    Returns the optimized params vector.\n    \"\"\"\n    # Prepare data\n    X = np.atleast_2d(data_points).astype(float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess:\n    #   L0 = median(y),\n    #   logA, logB, logC = 0 (=> A=B=C=1),\n    #   log_alpha, log_beta, log_gamma = 0 (=> alpha=beta=gamma=1)\n    L0_init = np.median(y)\n    init_params = np.array([L0_init, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n\n    # Bounds:\n    #   L0 free,\n    #   logA, logB, logC in [-10, 10],\n    #   log_alpha, log_beta, log_gamma in [-5, 5]\n    bounds = [\n        (None, None),\n        (-10.0, 10.0),\n        (-10.0, 10.0),\n        (-10.0, 10.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0),\n        (-5.0, 5.0)\n    ]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    # Return optimized parameters or fallback to initial if failed\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0685), Performs well on nmae (0.2707), Performs well on r2 (0.9315), Performs well on combined_score (0.9359)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      Lossu = L0\n            + A * P_non_vocab^{-alpha}\n            + B * num_characters^{-beta}\n            + C * vocab_size^{-gamma}\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    Exponentiating the log-parameters enforces positivity.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack\n    L0     = p[0]\n    A      = np.exp(p[1])\n    B      = np.exp(p[2])\n    C      = np.exp(p[3])\n    alpha  = np.exp(p[4])\n    beta   = np.exp(p[5])\n    gamma  = np.exp(p[6])\n\n    # compute prediction\n    loss_pred = (\n        L0\n        + A * P_non_vocab ** (-alpha)\n        + B * num_chars    ** (-beta)\n        + C * vocab_size   ** (-gamma)\n    )\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law via L-BFGS-B.\n    Returns optimized params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: baseline at median(y), unit logs for A,B,C, modest negative exponents\n    L0_init    = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs free but exponents in reasonable range\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 49999.7500)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (no input-dependent statistics)\n_P_SCALE   = 1e9    # scale for non-vocab parameters\n_V_SCALE   = 1e5    # scale for vocabulary size\n_D_SCALE   = 1e12   # scale for number of characters\n_EPS       = 1e-12  # to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law (normalized inputs):\n      Lossu = L0\n            + A * (P_non_vocab / _P_SCALE)^(-alpha)\n            + B * (D / _D_SCALE)^(-beta)\n            + C * (V / _V_SCALE)^(-gamma)\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    All A,B,C,alpha,beta,gamma > 0 via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Normalize features to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # unpack\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # compute predicted Lossu\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    First run a global search (differential_evolution),\n    then refine with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # bounds for [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    bounds = [\n      (None,    None),    # L0\n      (-10.0,   10.0),    # logA\n      (-10.0,   10.0),    # logB\n      (-10.0,   10.0),    # logC\n      (-5.0,    5.0),     # log_alpha\n      (-5.0,    5.0),     # log_beta\n      (-5.0,    5.0)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # initial guess: median Lossu, unit exponents & amplitudes\n    init = np.array([\n      np.median(y),     # L0\n      0.0, 0.0, 0.0,     # logA, logB, logC = 1.0\n      np.log(1.0),      # log_alpha\n      np.log(1.0),      # log_beta\n      np.log(1.0)       # log_gamma\n    ])\n\n    # 1) global search\n    result_de = differential_evolution(\n      objective,\n      bounds,\n      maxiter=50,\n      popsize=15,\n      tol=1e-6,\n      polish=False,\n      disp=False\n    )\n\n    # pick starting point for local refine\n    x0 = result_de.x if result_de.success else init\n\n    # 2) local refine\n    result = minimize(\n      objective,\n      x0,\n      method='L-BFGS-B',\n      bounds=bounds,\n      options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return x0\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a compact 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu \u2248 b0\n             + b1*xp + b2*xv + b3*xd\n             + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    This form captures curvature in each axis, remains linear in parameters,\n    and can be fitted robustly via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # compute log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # evaluate quadratic model\n    return (\n        p[0]\n        + p[1]*xp\n        + p[2]*xv\n        + p[3]*xd\n        + p[4]*(xp**2)\n        + p[5]*(xv**2)\n        + p[6]*(xd**2)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares. Returns a parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp**2,\n        xv**2,\n        xd**2\n    ])\n\n    # small ridge for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (no input-dependent statistics)\n_P_SCALE   = 1e9    # scale for non-vocab parameters\n_V_SCALE   = 1e5    # scale for vocabulary size\n_D_SCALE   = 1e12   # scale for number of characters\n_EPS       = 1e-12  # to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law (normalized inputs):\n      Lossu = L0\n            + A * (P_non_vocab / _P_SCALE)^(-alpha)\n            + B * (D / _D_SCALE)^(-beta)\n            + C * (V / _V_SCALE)^(-gamma)\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    All A,B,C,alpha,beta,gamma > 0 via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Normalize features to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # unpack\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # compute predicted Lossu\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    First run a global search (differential_evolution),\n    then refine with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # bounds for [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    bounds = [\n      (None,    None),    # L0\n      (-10.0,   10.0),    # logA\n      (-10.0,   10.0),    # logB\n      (-10.0,   10.0),    # logC\n      (-5.0,    5.0),     # log_alpha\n      (-5.0,    5.0),     # log_beta\n      (-5.0,    5.0)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # initial guess: median Lossu, unit exponents & amplitudes\n    init = np.array([\n      np.median(y),     # L0\n      0.0, 0.0, 0.0,     # logA, logB, logC = 1.0\n      np.log(1.0),      # log_alpha\n      np.log(1.0),      # log_beta\n      np.log(1.0)       # log_gamma\n    ])\n\n    # 1) global search\n    result_de = differential_evolution(\n      objective,\n      bounds,\n      maxiter=50,\n      popsize=15,\n      tol=1e-6,\n      polish=False,\n      disp=False\n    )\n\n    # pick starting point for local refine\n    x0 = result_de.x if result_de.success else init\n\n    # 2) local refine\n    result = minimize(\n      objective,\n      x0,\n      method='L-BFGS-B',\n      bounds=bounds,\n      options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-linear scaling law with pairwise interactions:\n      Let x1 = log(P_non_vocab),\n          x2 = log(num_characters),\n          x3 = log(vocab_size).\n      We model\n         Lossu \u2243 a0\n               + a1*x1 + a2*x2 + a3*x3\n               + a4*(x1*x2) + a5*(x1*x3) + a6*(x2*x3)\n      where params = [a0, a1, a2, a3, a4, a5, a6].\n    This form is linear in the transformed features and yields a\n    closed-form least-squares fit for stability and interpretability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # shape check and reshape single point\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # ensure strict positivity before log\n    eps = 1e-12\n    P = np.maximum(P, eps)\n    V = np.maximum(V, eps)\n    D = np.maximum(D, eps)\n    \n    # log-transform\n    x1 = np.log(P)\n    x2 = np.log(D)\n    x3 = np.log(V)\n    \n    # build design matrix (N\u00d77)\n    # columns: [1, x1, x2, x3, x1*x2, x1*x3, x2*x3]\n    ones = np.ones_like(x1)\n    F = np.vstack((ones,\n                   x1,\n                   x2,\n                   x3,\n                   x1 * x2,\n                   x1 * x3,\n                   x2 * x3)).T\n    \n    # linear prediction\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear model by ordinary least squares.\n    Returns params = [a0, a1, a2, a3, a4, a5, a6] minimizing\n      \u2016F\u00b7params \u2212 loss_values\u2016\u00b2\n    where F is constructed as in scaling_law_func.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    \n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # unpack and log-transform\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    eps = 1e-12\n    P = np.maximum(P, eps)\n    V = np.maximum(V, eps)\n    D = np.maximum(D, eps)\n    \n    x1 = np.log(P)\n    x2 = np.log(D)\n    x3 = np.log(V)\n    \n    # build design matrix\n    ones = np.ones_like(x1)\n    F = np.vstack((ones,\n                   x1,\n                   x2,\n                   x3,\n                   x1 * x2,\n                   x1 * x3,\n                   x2 * x3)).T  # shape (N,7)\n    \n    # solve least squares\n    try:\n        params, *_ = np.linalg.lstsq(F, y, rcond=None)\n        # ensure we return a flat array of length 7\n        params = np.asarray(params, dtype=float).ravel()\n        if params.size != 7:\n            # fallback if something unexpected happens\n            params = np.zeros(7, dtype=float)\n    except Exception:\n        # on failure, return zeros\n        params = np.zeros(7, dtype=float)\n    \n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a compact 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu \u2248 b0\n             + b1*xp + b2*xv + b3*xd\n             + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    This form captures curvature along each axis, remains linear in parameters,\n    and can be robustly fitted via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # unpack and safeguard positivity\n    eps = 1e-12\n    P = np.maximum(X[:, 0], eps)\n    V = np.maximum(X[:, 1], eps)\n    D = np.maximum(X[:, 2], eps)\n\n    # log-transformed features\n    xp = np.log(P)\n    xv = np.log(V)\n    xd = np.log(D)\n\n    # parameters vector\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # quadratic-in-log prediction\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * (xp ** 2)\n        + p[5] * (xv ** 2)\n        + p[6] * (xd ** 2)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares. Returns a parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # safeguard and log-transform inputs\n    eps = 1e-12\n    xp = np.log(np.maximum(X[:, 0], eps))\n    xv = np.log(np.maximum(X[:, 1], eps))\n    xd = np.log(np.maximum(X[:, 2], eps))\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp ** 2,\n        xv ** 2,\n        xd ** 2\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(P)\n    b = Phi.T @ y\n\n    # closed-form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}