{"id": "bab17db2-f1ac-44dd-8745-1cfd1b4c5c1c", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu \u2248 p0\n                 + p1*xp + p2*xv + p3*xd\n                 + p4*xp^2 + p5*xv^2 + p6*xd^2\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [p0, p1, \u2026, p6]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # log-transform each feature\n    logs = np.log(X)\n    xp = logs[:, 0]\n    xv = logs[:, 1]\n    xd = logs[:, 2]\n\n    # build design matrix [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xp,\n        xv * xv,\n        xd * xd\n    ])\n\n    # linear combination with params\n    p = np.asarray(params, dtype=float).ravel()\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge-regularized\n    least squares. Returns a length-7 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # log-transform features\n    logs = np.log(X)\n    xp = logs[:, 0]\n    xv = logs[:, 1]\n    xd = logs[:, 2]\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xp,\n        xv * xv,\n        xd * xd\n    ])\n\n    # ridge regularization strength: proportional to avg eigenvalue of \u03a6\u1d40\u03a6\n    P = Phi.shape[1]\n    Gram = Phi.T.dot(Phi)\n    lam = 1e-6 * np.trace(Gram) / P\n\n    # solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    A = Gram + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "349afa6e-b865-4926-b335-4d48a3ec1dac", "generation": 3, "timestamp": 1754722331.693144, "iteration_found": 42, "metrics": {"nmse": 0.1625077649029553, "nmae": 0.3866941471654715, "r2": 0.8374922350970447, "combined_score": 0.8602093080070555}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.030339510659446307, "nmae": 0.16165764084386294, "r2": 0.9696604893405537, "combined_score": 0.9705538705003866}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0303\n- nmae: 0.1617\n- r2: 0.9697\n- combined_score: 0.9706\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0494, nmae: 0.2204, r2: 0.9506, combined_score: 0.9530\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5331)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize  # retained for compatibility, though not used below\n\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu = b0\n                  + b1*xp + b2*xv + b3*xd\n                  + b4*xp^2 + b5*xv^2 + b6*xd^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # quadratic model in log-space\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge-regularized\n    least squares. Returns a length-7 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # compute log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(Phi.shape[1])\n    b = Phi.T.dot(y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 3 (Score: 0.5433)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-space interaction model:\n      Lossu = \u03b80\n            + \u03b81\u00b7log(P_non_vocab)\n            + \u03b82\u00b7log(vocab_size)\n            + \u03b83\u00b7log(num_characters)\n            + \u03b84\u00b7log(P_non_vocab)\u00b7log(vocab_size)\n            + \u03b85\u00b7log(P_non_vocab)\u00b7log(num_characters)\n            + \u03b86\u00b7log(vocab_size)\u00b7log(num_characters)\n    params: array-like of length 7 [\u03b80 \u2026 \u03b86]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # logs of each feature\n    logs = np.log(X)\n    lp = logs[:, 0]   # log(P_non_vocab)\n    lv = logs[:, 1]   # log(vocab_size)\n    ld = logs[:, 2]   # log(num_characters)\n\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86 = params\n    return (\u03b80\n            + \u03b81 * lp\n            + \u03b82 * lv\n            + \u03b83 * ld\n            + \u03b84 * lp * lv\n            + \u03b85 * lp * ld\n            + \u03b86 * lv * ld)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction model by ridge\u2010regularized least squares.\n    Returns params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build design matrix in log-space\n    logs = np.log(X)\n    lp = logs[:, 0]\n    lv = logs[:, 1]\n    ld = logs[:, 2]\n    N = lp.shape[0]\n\n    # columns: 1, lp, lv, ld, lp*lv, lp*ld, lv*ld\n    A = np.column_stack([\n        np.ones(N),\n        lp,\n        lv,\n        ld,\n        lp * lv,\n        lp * ld,\n        lv * ld\n    ])\n\n    # ridge regularization for numerical stability (tiny \u03bb)\n    \u03bb = 1e-8\n    ATA = A.T @ A + \u03bb * np.eye(7)\n    ATy = A.T @ y\n\n    # solve for theta\n    params = np.linalg.solve(ATA, ATy)\n    return params\n```\nKey features: Performs well on nmse (0.0494), Performs well on nmae (0.2204), Performs well on r2 (0.9506), Performs well on combined_score (0.9530)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5519)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter power-law model:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * num_characters^(-beta)\n              + C * vocab_size^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [L0, A, B, C, alpha, beta, gamma]\n\n    Returns:\n      pred: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    L0, A, B, C, alpha, beta, gamma = params\n    # compute each term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter power-law scaling model to data:\n      params = [L0, A, B, C, alpha, beta, gamma]\n    using L-BFGS-B with positivity constraints on A, B, C, alpha, beta, gamma.\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with fitted parameters.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    y = np.asarray(loss_values, float).ravel()\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    n = y.shape[0]\n\n    # Initial parameter guesses\n    L0_init = np.mean(y)\n    amp = (np.max(y) - np.min(y)) / 3.0\n    amp = amp if amp > 0 else 1.0\n    init_params = np.array([L0_init,   # L0\n                            amp,       # A\n                            amp,       # B\n                            amp,       # C\n                            0.5,       # alpha\n                            0.5,       # beta\n                            0.5])      # gamma\n\n    # Bounds: L0 free, A/B/C >= 0, alpha/beta/gamma >= 0\n    bounds = [(None, None),\n              (0.0, None), (0.0, None), (0.0, None),\n              (0.0, None), (0.0, None), (0.0, None)]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Analytic gradient of the MSE\n    def jacobian(p):\n        L0, A, B, C, alpha, beta, gamma = p\n        Pm = P**(-alpha)\n        Dm = D**(-beta)\n        Vm = V**(-gamma)\n        pred = L0 + A * Pm + B * Dm + C * Vm\n        err = pred - y\n        coef = 2.0 / n\n\n        # gradients\n        dL0 = coef * np.sum(err)\n        dA  = coef * np.sum(err * Pm)\n        dB  = coef * np.sum(err * Dm)\n        dC  = coef * np.sum(err * Vm)\n        d_alpha = coef * np.sum(err * (-A * Pm * np.log(P)))\n        d_beta  = coef * np.sum(err * (-B * Dm * np.log(D)))\n        d_gamma = coef * np.sum(err * (-C * Vm * np.log(V)))\n\n        return np.array([dL0, dA, dB, dC, d_alpha, d_beta, d_gamma])\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        init_params,\n        jac=jacobian,\n        bounds=bounds,\n        method='L-BFGS-B',\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5617, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu \u2248 b0\n                  + b1*xp + b2*xv + b3*xd\n                  + b4*xp^2 + b5*xv^2 + b6*xd^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # log\u2010transform features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # linear+quadratic terms\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log model via ridge\u2010regularized\n    least squares. Returns a length-7 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # build design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp**2,\n        xv**2,\n        xd**2\n    ])\n\n    # ridge regularization strength: scale by avg eigenvalue\n    P = Phi.shape[1]\n    gram = Phi.T.dot(Phi)\n    lam = 1e-6 * np.trace(gram) / P\n    # solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    A = gram + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 3 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize  # retained for compatibility, though not used below\n\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu = b0\n                  + b1*xp + b2*xv + b3*xd\n                  + b4*xp^2 + b5*xv^2 + b6*xd^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # quadratic model in log-space\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge-regularized\n    least squares. Returns a length-7 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # compute log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(Phi.shape[1])\n    b = Phi.T.dot(y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5519, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter power-law model:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * num_characters^(-beta)\n              + C * vocab_size^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [L0, A, B, C, alpha, beta, gamma]\n\n    Returns:\n      pred: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    L0, A, B, C, alpha, beta, gamma = params\n    # compute each term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter power-law scaling model to data:\n      params = [L0, A, B, C, alpha, beta, gamma]\n    using L-BFGS-B with positivity constraints on A, B, C, alpha, beta, gamma.\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with fitted parameters.\n    \"\"\"\n    X = np.atleast_2d(data_points).astype(float)\n    y = np.asarray(loss_values, float).ravel()\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    n = y.shape[0]\n\n    # Initial parameter guesses\n    L0_init = np.mean(y)\n    amp = (np.max(y) - np.min(y)) / 3.0\n    amp = amp if amp > 0 else 1.0\n    init_params = np.array([L0_init,   # L0\n                            amp,       # A\n                            amp,       # B\n                            amp,       # C\n                            0.5,       # alpha\n                            0.5,       # beta\n                            0.5])      # gamma\n\n    # Bounds: L0 free, A/B/C >= 0, alpha/beta/gamma >= 0\n    bounds = [(None, None),\n              (0.0, None), (0.0, None), (0.0, None),\n              (0.0, None), (0.0, None), (0.0, None)]\n\n    # Objective: mean squared error\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Analytic gradient of the MSE\n    def jacobian(p):\n        L0, A, B, C, alpha, beta, gamma = p\n        Pm = P**(-alpha)\n        Dm = D**(-beta)\n        Vm = V**(-gamma)\n        pred = L0 + A * Pm + B * Dm + C * Vm\n        err = pred - y\n        coef = 2.0 / n\n\n        # gradients\n        dL0 = coef * np.sum(err)\n        dA  = coef * np.sum(err * Pm)\n        dB  = coef * np.sum(err * Dm)\n        dC  = coef * np.sum(err * Vm)\n        d_alpha = coef * np.sum(err * (-A * Pm * np.log(P)))\n        d_beta  = coef * np.sum(err * (-B * Dm * np.log(D)))\n        d_gamma = coef * np.sum(err * (-C * Vm * np.log(V)))\n\n        return np.array([dL0, dA, dB, dC, d_alpha, d_beta, d_gamma])\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        objective,\n        init_params,\n        jac=jacobian,\n        bounds=bounds,\n        method='L-BFGS-B',\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Excellent combined_score (0.905)\n\n\n### Inspiration 5 (Score: 0.5433, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-space interaction model:\n      Lossu = \u03b80\n            + \u03b81\u00b7log(P_non_vocab)\n            + \u03b82\u00b7log(vocab_size)\n            + \u03b83\u00b7log(num_characters)\n            + \u03b84\u00b7log(P_non_vocab)\u00b7log(vocab_size)\n            + \u03b85\u00b7log(P_non_vocab)\u00b7log(num_characters)\n            + \u03b86\u00b7log(vocab_size)\u00b7log(num_characters)\n    params: array-like of length 7 [\u03b80 \u2026 \u03b86]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # logs of each feature\n    logs = np.log(X)\n    lp = logs[:, 0]   # log(P_non_vocab)\n    lv = logs[:, 1]   # log(vocab_size)\n    ld = logs[:, 2]   # log(num_characters)\n\n    \u03b80, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86 = params\n    return (\u03b80\n            + \u03b81 * lp\n            + \u03b82 * lv\n            + \u03b83 * ld\n            + \u03b84 * lp * lv\n            + \u03b85 * lp * ld\n            + \u03b86 * lv * ld)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction model by ridge\u2010regularized least squares.\n    Returns params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build design matrix in log-space\n    logs = np.log(X)\n    lp = logs[:, 0]\n    lv = logs[:, 1]\n    ld = logs[:, 2]\n    N = lp.shape[0]\n\n    # columns: 1, lp, lv, ld, lp*lv, lp*ld, lv*ld\n    A = np.column_stack([\n        np.ones(N),\n        lp,\n        lv,\n        ld,\n        lp * lv,\n        lp * ld,\n        lv * ld\n    ])\n\n    # ridge regularization for numerical stability (tiny \u03bb)\n    \u03bb = 1e-8\n    ATA = A.T @ A + \u03bb * np.eye(7)\n    ATy = A.T @ y\n\n    # solve for theta\n    params = np.linalg.solve(ATA, ATy)\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu \u2248 p0\n                 + p1*xp + p2*xv + p3*xd\n                 + p4*xp^2 + p5*xv^2 + p6*xd^2\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [p0, p1, \u2026, p6]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # log-transform each feature\n    logs = np.log(X)\n    xp = logs[:, 0]\n    xv = logs[:, 1]\n    xd = logs[:, 2]\n\n    # build design matrix [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xp,\n        xv * xv,\n        xd * xd\n    ])\n\n    # linear combination with params\n    p = np.asarray(params, dtype=float).ravel()\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge-regularized\n    least squares. Returns a length-7 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # log-transform features\n    logs = np.log(X)\n    xp = logs[:, 0]\n    xv = logs[:, 1]\n    xd = logs[:, 2]\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xp,\n        xv * xv,\n        xd * xd\n    ])\n\n    # ridge regularization strength: proportional to avg eigenvalue of \u03a6\u1d40\u03a6\n    P = Phi.shape[1]\n    Gram = Phi.T.dot(Phi)\n    lam = 1e-6 * np.trace(Gram) / P\n\n    # solve (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    A = Gram + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}