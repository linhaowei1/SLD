{"id": "b8eb5c08-d1d1-4e1f-a8b0-b358f645f685", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter interaction model in log-space:\n      Let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters).\n      Then Lossu \u2248 p0\n                 + p1 * xp\n                 + p2 * xv\n                 + p3 * xd\n                 + p4 * (xp * xv)\n                 + p5 * (xp * xd)\n                 + p6 * (xv * xd).\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of 7 parameters [p0..p6]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n\n    # Compute logs of each feature\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # Build design matrix with constant + first-order + pairwise interactions\n    Phi = np.column_stack([\n        np.ones_like(xp),  # intercept\n        xp,                # log P_non_vocab\n        xv,                # log vocab_size\n        xd,                # log num_characters\n        xp * xv,           # interaction xp\u00b7xv\n        xp * xd,           # interaction xp\u00b7xd\n        xv * xd            # interaction xv\u00b7xd\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction-in-log scaling law using\n    ridge-regularized least squares for numerical stability.\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu\n\n    Returns:\n      params: ndarray of shape (7,) giving the fitted [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Compute logs\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # Build design matrix\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xv,\n        xp * xd,\n        xv * xd\n    ])\n\n    # Ridge regularization for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n\n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "17fe9019-5c7d-47ae-a0da-73102c31e626", "generation": 2, "timestamp": 1754722312.2952013, "iteration_found": 41, "metrics": {"nmse": 0.04936582882283771, "nmae": 0.2203663342516727, "r2": 0.9506341711771623, "combined_score": 0.9529565119552105}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.06901119416867157, "nmae": 0.27241113720528354, "r2": 0.9309888058313285, "combined_score": 0.9354438994230189}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0690\n- nmae: 0.2724\n- r2: 0.9310\n- combined_score: 0.9354\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0661, nmae: 0.2599, r2: 0.9339, combined_score: 0.9380\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0494, nmae: 0.2204, r2: 0.9506, combined_score: 0.9530\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5433)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter interaction model in log-space:\n      Let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters).\n      Then Lossu \u2248 p0\n                 + p1*xp + p2*xv + p3*xd\n                 + p4*(xp*xv) + p5*(xp*xd) + p6*(xv*xd).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # compute logs\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # build design matrix with interactions\n    # columns: [1, xp, xv, xd, xp*xv, xp*xd, xv*xd]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xv,\n        xp * xd,\n        xv * xd\n    ])\n    p = np.asarray(params, dtype=float).ravel()\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction-in-log scaling law using\n    ridge-regularized least squares for stability.\n    Returns the parameter vector [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute logs\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # design matrix with interactions\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xv,\n        xp * xd,\n        xv * xd\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0494), Performs well on nmae (0.2204), Performs well on r2 (0.9506), Performs well on combined_score (0.9530)\n\n\n### Program 2 (Score: 0.5495)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n# Fixed normalization constants chosen from data ranges:\n#   non-vocab parameters \u2208 [3e7, 1.1e9] \u2192 _P_SCALE ~5e8\n#   vocab size \u2208 [4e3, 1e5]          \u2192 _V_SCALE ~5e4\n#   characters  \u2208 [1e8, 5e12]        \u2192 _D_SCALE ~1e12\n_P_SCALE = 5e8\n_V_SCALE = 5e4\n_D_SCALE = 1e12\n_EPS = 1e-12  # small epsilon to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter normalized power-law scaling law:\n      Lossu = L0\n            + A * (P_non_vocab/_P_SCALE)^(-alpha)\n            + B * (D/_D_SCALE)^(-beta)\n            + C * (V/_V_SCALE)^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns =\n                   [P_non_vocab, vocab_size, num_characters]\n      params: array-like of 7 parameters =\n              [L0,\n               logA, logB, logC,\n               log_alpha, log_beta, log_gamma]\n\n    All amplitudes (A,B,C) and exponents (alpha,beta,gamma) are strictly\n    positive by exponentiation of the log-parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Normalize inputs to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # Unpack parameters\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = np.asarray(params, dtype=float).ravel()\n    A = np.exp(logA)\n    B = np.exp(logB)\n    C = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # Compute prediction\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter normalized scaling law via L-BFGS-B:\n      params = [L0,\n                logA, logB, logC,\n                log_alpha, log_beta, log_gamma]\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess:\n    #   L0 ~ median of y,\n    #   logA, logB, logC ~ 0 (i.e. A=B=C=1),\n    #   log exponents ~ log(0.5) => exponents ~0.5\n    L0_init = np.median(y)\n    init_params = np.array([\n        L0_init,           # L0\n        0.0, 0.0, 0.0,     # logA, logB, logC\n        np.log(0.5),       # log_alpha\n        np.log(0.5),       # log_beta\n        np.log(0.5)        # log_gamma\n    ], dtype=float)\n\n    # Bounds to keep exponents and amplitudes reasonable\n    bounds = [\n        (None, None),     # L0 unbounded\n        (-20.0, 20.0),    # logA\n        (-20.0, 20.0),    # logB\n        (-20.0, 20.0),    # logC\n        (-5.0, 5.0),      # log_alpha => alpha \u2208 [exp(-5), exp(5)]\n        (-5.0, 5.0),      # log_beta\n        (-5.0, 5.0)       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0661), Performs well on nmae (0.2599), Performs well on r2 (0.9339), Performs well on combined_score (0.9380)\n\n\n### Program 3 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n# Fixed normalization constants to keep inputs O(1) and avoid numeric issues\n_P_SCALE   = 1e8    # scale for non-vocab parameters (~10^8)\n_V_SCALE   = 1e4    # scale for vocabulary size (~10^4)\n_D_SCALE   = 1e11   # scale for number of characters (~10^11)\n_EPS       = 1e-12  # small constant to avoid division by zero\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Lossu = L0\n            + A * (P_non_vocab/_P_SCALE)^{-alpha}\n            + B * (D/_D_SCALE)^{-beta}\n            + C * (V/_V_SCALE)^{-gamma}\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    ensures A,B,C,alpha,beta,gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    return (L0\n            + A * P**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law using L-BFGS-B.\n    We normalize inputs, pick informed initials via a small\n    linear solve for amplitudes, then refine all seven params.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Normalize once for initial-guess construction\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # Baseline and initial exponents\n    L0_init     = np.median(y)\n    alpha_init  = 0.5\n    beta_init   = 0.5\n    gamma_init  = 0.5\n\n    # Build design matrix at initial exponents to solve for A,B,C\n    Phi = np.vstack([\n        P**(-alpha_init),\n        D**(-beta_init),\n        V**(-gamma_init)\n    ]).T\n    y_res = y - L0_init\n    # least-squares for amplitudes\n    coeffs, *_ = np.linalg.lstsq(Phi, y_res, rcond=None)\n    A_init, B_init, C_init = np.maximum(coeffs, _EPS)\n\n    # Pack initial parameters in log-space for positivity\n    init_params = np.array([\n        L0_init,\n        np.log(A_init),\n        np.log(B_init),\n        np.log(C_init),\n        np.log(alpha_init),\n        np.log(beta_init),\n        np.log(gamma_init)\n    ], dtype=float)\n\n    # Bounds: L0 free, logs for A/B/C free, exponents limited to avoid extremes\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-5.0, 5.0),   # log_alpha\n        (-5.0, 5.0),   # log_beta\n        (-5.0, 5.0)    # log_gamma\n    ]\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter power-law model:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B *  num_characters^(-beta)\n              + C * vocab_size^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of 7 parameters\n                   [L0, A, B, C, alpha, beta, gamma]\n\n    Returns:\n      pred: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # unpack params\n    L0, A, B, C, alpha, beta, gamma = np.asarray(params, dtype=float).ravel()\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    # compute the scaling law\n    return L0 + A * P_non_vocab**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter power-law scaling model to data:\n      params = [L0, A, B, C, alpha, beta, gamma]\n    using L-BFGS-B with positivity constraints on A, B, C, alpha, beta, gamma.\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses:\n    L0_init = np.median(y)\n    # amplitude scale ~ range of y\n    amp = float(np.max(y) - np.min(y)) if np.max(y) > np.min(y) else 1.0\n    init_params = np.array([\n        L0_init,   # L0\n        amp,       # A\n        amp,       # B\n        amp,       # C\n        0.5,       # alpha\n        0.5,       # beta\n        0.5        # gamma\n    ], dtype=float)\n\n    # Bounds: only A, B, C, alpha, beta, gamma must be \u2265 0\n    bounds = [\n        (None, None),  # L0\n        (0.0, None),   # A\n        (0.0, None),   # B\n        (0.0, None),   # C\n        (0.0, None),   # alpha\n        (0.0, None),   # beta\n        (0.0, None)    # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5433, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter interaction model in log-space:\n      Let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters).\n      Then Lossu \u2248 p0\n                 + p1*xp + p2*xv + p3*xd\n                 + p4*(xp*xv) + p5*(xp*xd) + p6*(xv*xd).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    # compute logs\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # build design matrix with interactions\n    # columns: [1, xp, xv, xd, xp*xv, xp*xd, xv*xd]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xv,\n        xp * xd,\n        xv * xd\n    ])\n    p = np.asarray(params, dtype=float).ravel()\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction-in-log scaling law using\n    ridge-regularized least squares for stability.\n    Returns the parameter vector [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute logs\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # design matrix with interactions\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xv,\n        xp * xd,\n        xv * xd\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (no input-dependent statistics)\n_P_SCALE   = 1e9    # scale for non-vocab parameters\n_V_SCALE   = 1e5    # scale for vocabulary size\n_D_SCALE   = 1e12   # scale for number of characters\n_EPS       = 1e-12  # to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law (normalized inputs):\n      Lossu = L0\n            + A * (P_non_vocab / _P_SCALE)^(-alpha)\n            + B * (D / _D_SCALE)^(-beta)\n            + C * (V / _V_SCALE)^(-gamma)\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    All A,B,C,alpha,beta,gamma > 0 via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Normalize features to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # unpack\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # compute predicted Lossu\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    First run a global search (differential_evolution),\n    then refine with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # bounds for [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    bounds = [\n      (None,    None),    # L0\n      (-10.0,   10.0),    # logA\n      (-10.0,   10.0),    # logB\n      (-10.0,   10.0),    # logC\n      (-5.0,    5.0),     # log_alpha\n      (-5.0,    5.0),     # log_beta\n      (-5.0,    5.0)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # initial guess: median Lossu, unit exponents & amplitudes\n    init = np.array([\n      np.median(y),     # L0\n      0.0, 0.0, 0.0,     # logA, logB, logC = 1.0\n      np.log(1.0),      # log_alpha\n      np.log(1.0),      # log_beta\n      np.log(1.0)       # log_gamma\n    ])\n\n    # 1) global search\n    result_de = differential_evolution(\n      objective,\n      bounds,\n      maxiter=50,\n      popsize=15,\n      tol=1e-6,\n      polish=False,\n      disp=False\n    )\n\n    # pick starting point for local refine\n    x0 = result_de.x if result_de.success else init\n\n    # 2) local refine\n    result = minimize(\n      objective,\n      x0,\n      method='L-BFGS-B',\n      bounds=bounds,\n      options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n### Inspiration 3 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter power-law model:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B *  num_characters^(-beta)\n              + C * vocab_size^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of 7 parameters\n                   [L0, A, B, C, alpha, beta, gamma]\n\n    Returns:\n      pred: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # unpack params\n    L0, A, B, C, alpha, beta, gamma = np.asarray(params, dtype=float).ravel()\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    # compute the scaling law\n    return L0 + A * P_non_vocab**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter power-law scaling model to data:\n      params = [L0, A, B, C, alpha, beta, gamma]\n    using L-BFGS-B with positivity constraints on A, B, C, alpha, beta, gamma.\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses:\n    L0_init = np.median(y)\n    # amplitude scale ~ range of y\n    amp = float(np.max(y) - np.min(y)) if np.max(y) > np.min(y) else 1.0\n    init_params = np.array([\n        L0_init,   # L0\n        amp,       # A\n        amp,       # B\n        amp,       # C\n        0.5,       # alpha\n        0.5,       # beta\n        0.5        # gamma\n    ], dtype=float)\n\n    # Bounds: only A, B, C, alpha, beta, gamma must be \u2265 0\n    bounds = [\n        (None, None),  # L0\n        (0.0, None),   # A\n        (0.0, None),   # B\n        (0.0, None),   # C\n        (0.0, None),   # alpha\n        (0.0, None),   # beta\n        (0.0, None)    # gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5495, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n# Fixed normalization constants chosen from data ranges:\n#   non-vocab parameters \u2208 [3e7, 1.1e9] \u2192 _P_SCALE ~5e8\n#   vocab size \u2208 [4e3, 1e5]          \u2192 _V_SCALE ~5e4\n#   characters  \u2208 [1e8, 5e12]        \u2192 _D_SCALE ~1e12\n_P_SCALE = 5e8\n_V_SCALE = 5e4\n_D_SCALE = 1e12\n_EPS = 1e-12  # small epsilon to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter normalized power-law scaling law:\n      Lossu = L0\n            + A * (P_non_vocab/_P_SCALE)^(-alpha)\n            + B * (D/_D_SCALE)^(-beta)\n            + C * (V/_V_SCALE)^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns =\n                   [P_non_vocab, vocab_size, num_characters]\n      params: array-like of 7 parameters =\n              [L0,\n               logA, logB, logC,\n               log_alpha, log_beta, log_gamma]\n\n    All amplitudes (A,B,C) and exponents (alpha,beta,gamma) are strictly\n    positive by exponentiation of the log-parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Normalize inputs to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # Unpack parameters\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = np.asarray(params, dtype=float).ravel()\n    A = np.exp(logA)\n    B = np.exp(logB)\n    C = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # Compute prediction\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter normalized scaling law via L-BFGS-B:\n      params = [L0,\n                logA, logB, logC,\n                log_alpha, log_beta, log_gamma]\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess:\n    #   L0 ~ median of y,\n    #   logA, logB, logC ~ 0 (i.e. A=B=C=1),\n    #   log exponents ~ log(0.5) => exponents ~0.5\n    L0_init = np.median(y)\n    init_params = np.array([\n        L0_init,           # L0\n        0.0, 0.0, 0.0,     # logA, logB, logC\n        np.log(0.5),       # log_alpha\n        np.log(0.5),       # log_beta\n        np.log(0.5)        # log_gamma\n    ], dtype=float)\n\n    # Bounds to keep exponents and amplitudes reasonable\n    bounds = [\n        (None, None),     # L0 unbounded\n        (-20.0, 20.0),    # logA\n        (-20.0, 20.0),    # logB\n        (-20.0, 20.0),    # logC\n        (-5.0, 5.0),      # log_alpha => alpha \u2208 [exp(-5), exp(5)]\n        (-5.0, 5.0),      # log_beta\n        (-5.0, 5.0)       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\n# Fixed normalization constants to keep inputs O(1) and avoid numeric issues\n_P_SCALE   = 1e8    # scale for non-vocab parameters (~10^8)\n_V_SCALE   = 1e4    # scale for vocabulary size (~10^4)\n_D_SCALE   = 1e11   # scale for number of characters (~10^11)\n_EPS       = 1e-12  # small constant to avoid division by zero\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Lossu = L0\n            + A * (P_non_vocab/_P_SCALE)^{-alpha}\n            + B * (D/_D_SCALE)^{-beta}\n            + C * (V/_V_SCALE)^{-gamma}\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    ensures A,B,C,alpha,beta,gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    return (L0\n            + A * P**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law using L-BFGS-B.\n    We normalize inputs, pick informed initials via a small\n    linear solve for amplitudes, then refine all seven params.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Normalize once for initial-guess construction\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # Baseline and initial exponents\n    L0_init     = np.median(y)\n    alpha_init  = 0.5\n    beta_init   = 0.5\n    gamma_init  = 0.5\n\n    # Build design matrix at initial exponents to solve for A,B,C\n    Phi = np.vstack([\n        P**(-alpha_init),\n        D**(-beta_init),\n        V**(-gamma_init)\n    ]).T\n    y_res = y - L0_init\n    # least-squares for amplitudes\n    coeffs, *_ = np.linalg.lstsq(Phi, y_res, rcond=None)\n    A_init, B_init, C_init = np.maximum(coeffs, _EPS)\n\n    # Pack initial parameters in log-space for positivity\n    init_params = np.array([\n        L0_init,\n        np.log(A_init),\n        np.log(B_init),\n        np.log(C_init),\n        np.log(alpha_init),\n        np.log(beta_init),\n        np.log(gamma_init)\n    ], dtype=float)\n\n    # Bounds: L0 free, logs for A/B/C free, exponents limited to avoid extremes\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-5.0, 5.0),   # log_alpha\n        (-5.0, 5.0),   # log_beta\n        (-5.0, 5.0)    # log_gamma\n    ]\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter interaction model in log-space:\n      Let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters).\n      Then Lossu \u2248 p0\n                 + p1 * xp\n                 + p2 * xv\n                 + p3 * xd\n                 + p4 * (xp * xv)\n                 + p5 * (xp * xd)\n                 + p6 * (xv * xd).\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of 7 parameters [p0..p6]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n\n    # Compute logs of each feature\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # Build design matrix with constant + first-order + pairwise interactions\n    Phi = np.column_stack([\n        np.ones_like(xp),  # intercept\n        xp,                # log P_non_vocab\n        xv,                # log vocab_size\n        xd,                # log num_characters\n        xp * xv,           # interaction xp\u00b7xv\n        xp * xd,           # interaction xp\u00b7xd\n        xv * xd            # interaction xv\u00b7xd\n    ])\n\n    p = np.asarray(params, dtype=float).ravel()\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction-in-log scaling law using\n    ridge-regularized least squares for numerical stability.\n\n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) with observed Lossu\n\n    Returns:\n      params: ndarray of shape (7,) giving the fitted [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Compute logs\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n\n    # Build design matrix\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp * xv,\n        xp * xd,\n        xv * xd\n    ])\n\n    # Ridge regularization for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n\n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}