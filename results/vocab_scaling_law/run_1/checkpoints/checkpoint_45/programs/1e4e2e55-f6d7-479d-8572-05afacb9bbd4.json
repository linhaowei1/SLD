{"id": "1e4e2e55-f6d7-479d-8572-05afacb9bbd4", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter quadratic\u2013in\u2013log model with interaction:\n      features = [1,\n                  log(P_non_vocab),\n                  log(vocab_size),\n                  log(num_characters),\n                  (log(P_non_vocab))^2,\n                  (log(vocab_size))^2,\n                  (log(P_non_vocab) * log(vocab_size))]\n    Lossu \u2248 \u03a6 \u00b7 params\n\n    Inputs:\n      data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array of coefficients\n    Returns:\n      preds: length-N array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n\n    # compute logs\n    Lp = np.log(X[:, 0])      # log non-vocab parameters\n    Lv = np.log(X[:, 1])      # log vocabulary size\n    Ld = np.log(X[:, 2])      # log number of characters\n\n    # assemble design matrix \u03a6 of shape (N,7)\n    # columns: 1, Lp, Lv, Ld, Lp^2, Lv^2, Lp*Lv\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Lp\n    Phi[:, 2] = Lv\n    Phi[:, 3] = Ld\n    Phi[:, 4] = Lp * Lp\n    Phi[:, 5] = Lv * Lv\n    Phi[:, 6] = Lp * Lv\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model by ridge\u2010regularized least squares.\n    Regularization is very light (\u03bb ~ 1e-6) on all terms except bias to\n    improve numerical stability and reduce overfit.\n    Returns: params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute logs\n    Lp = np.log(X[:, 0])\n    Lv = np.log(X[:, 1])\n    Ld = np.log(X[:, 2])\n\n    # assemble design matrix \u03a6\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Lp\n    Phi[:, 2] = Lv\n    Phi[:, 3] = Ld\n    Phi[:, 4] = Lp * Lp\n    Phi[:, 5] = Lv * Lv\n    Phi[:, 6] = Lp * Lv\n\n    # normal equations: (\u03a6\u1d40\u03a6 + \u039b) params = \u03a6\u1d40 y\n    G = Phi.T.dot(Phi)        # Gram matrix (7\u00d77)\n    b = Phi.T.dot(y)          # right-hand side (7,)\n\n    # small ridge on all but the bias term (index 0)\n    # scale \u03bb to trace(G)/n_nonbias \u2248 average eigenvalue\n    n_nonbias = 6.0\n    \u03bb = 1e-6 * np.trace(G) / n_nonbias\n    for i in range(1, 7):\n        G[i, i] += \u03bb\n\n    # solve for parameters\n    params = np.linalg.solve(G, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "a118ab94-220c-4ce1-8e31-82763a44544c", "generation": 3, "timestamp": 1754722224.6182556, "iteration_found": 28, "metrics": {"nmse": 0.1379341831386278, "nmae": 0.3977926650036224, "r2": 0.8620658168613722, "combined_score": 0.8787854471880083}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.030339510659446307, "nmae": 0.16165764084386294, "r2": 0.9696604893405537, "combined_score": 0.9705538705003866}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0303\n- nmae: 0.1617\n- r2: 0.9697\n- combined_score: 0.9706\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 100000.0000, nmae: 100000.0000, r2: -1.0000, combined_score: 0.0000, error: Fitting failed: Evaluation failed or timed out.\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 3 (Score: 49999.7500)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (no input-dependent statistics)\n_P_SCALE   = 1e9    # scale for non-vocab parameters\n_V_SCALE   = 1e5    # scale for vocabulary size\n_D_SCALE   = 1e12   # scale for number of characters\n_EPS       = 1e-12  # to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law (normalized inputs):\n      Lossu = L0\n            + A * (P_non_vocab / _P_SCALE)^(-alpha)\n            + B * (D / _D_SCALE)^(-beta)\n            + C * (V / _V_SCALE)^(-gamma)\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    All A,B,C,alpha,beta,gamma > 0 via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Normalize features to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # unpack\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # compute predicted Lossu\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    First run a global search (differential_evolution),\n    then refine with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # bounds for [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    bounds = [\n      (None,    None),    # L0\n      (-10.0,   10.0),    # logA\n      (-10.0,   10.0),    # logB\n      (-10.0,   10.0),    # logC\n      (-5.0,    5.0),     # log_alpha\n      (-5.0,    5.0),     # log_beta\n      (-5.0,    5.0)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # initial guess: median Lossu, unit exponents & amplitudes\n    init = np.array([\n      np.median(y),     # L0\n      0.0, 0.0, 0.0,     # logA, logB, logC = 1.0\n      np.log(1.0),      # log_alpha\n      np.log(1.0),      # log_beta\n      np.log(1.0)       # log_gamma\n    ])\n\n    # 1) global search\n    result_de = differential_evolution(\n      objective,\n      bounds,\n      maxiter=50,\n      popsize=15,\n      tol=1e-6,\n      polish=False,\n      disp=False\n    )\n\n    # pick starting point for local refine\n    x0 = result_de.x if result_de.success else init\n\n    # 2) local refine\n    result = minimize(\n      objective,\n      x0,\n      method='L-BFGS-B',\n      bounds=bounds,\n      options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return x0\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (100000.0000), Performs well on nmae (100000.0000), Performs well on r2 (-1.0000), Performs well on combined_score (0.0000), Performs well on error (Fitting failed: Evaluation failed or timed out.)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (no input-dependent statistics)\n_P_SCALE   = 1e9    # scale for non-vocab parameters\n_V_SCALE   = 1e5    # scale for vocabulary size\n_D_SCALE   = 1e12   # scale for number of characters\n_EPS       = 1e-12  # to avoid zero-division\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law (normalized inputs):\n      Lossu = L0\n            + A * (P_non_vocab / _P_SCALE)^(-alpha)\n            + B * (D / _D_SCALE)^(-beta)\n            + C * (V / _V_SCALE)^(-gamma)\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n    All A,B,C,alpha,beta,gamma > 0 via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Normalize features to O(1)\n    P = X[:, 0] / _P_SCALE + _EPS\n    V = X[:, 1] / _V_SCALE + _EPS\n    D = X[:, 2] / _D_SCALE + _EPS\n\n    # unpack\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A     = np.exp(logA)\n    B     = np.exp(logB)\n    C     = np.exp(logC)\n    alpha = np.exp(log_alpha)\n    beta  = np.exp(log_beta)\n    gamma = np.exp(log_gamma)\n\n    # compute predicted Lossu\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    First run a global search (differential_evolution),\n    then refine with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # bounds for [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    bounds = [\n      (None,    None),    # L0\n      (-10.0,   10.0),    # logA\n      (-10.0,   10.0),    # logB\n      (-10.0,   10.0),    # logC\n      (-5.0,    5.0),     # log_alpha\n      (-5.0,    5.0),     # log_beta\n      (-5.0,    5.0)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # initial guess: median Lossu, unit exponents & amplitudes\n    init = np.array([\n      np.median(y),     # L0\n      0.0, 0.0, 0.0,     # logA, logB, logC = 1.0\n      np.log(1.0),      # log_alpha\n      np.log(1.0),      # log_beta\n      np.log(1.0)       # log_gamma\n    ])\n\n    # 1) global search\n    result_de = differential_evolution(\n      objective,\n      bounds,\n      maxiter=50,\n      popsize=15,\n      tol=1e-6,\n      polish=False,\n      disp=False\n    )\n\n    # pick starting point for local refine\n    x0 = result_de.x if result_de.success else init\n\n    # 2) local refine\n    result = minimize(\n      objective,\n      x0,\n      method='L-BFGS-B',\n      bounds=bounds,\n      options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return x0\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7-parameter quadratic\u2013in\u2013log model with interaction:\n      features = [1,\n                  log(P_non_vocab),\n                  log(vocab_size),\n                  log(num_characters),\n                  (log(P_non_vocab))^2,\n                  (log(vocab_size))^2,\n                  (log(P_non_vocab) * log(vocab_size))]\n    Lossu \u2248 \u03a6 \u00b7 params\n\n    Inputs:\n      data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array of coefficients\n    Returns:\n      preds: length-N array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n\n    # compute logs\n    Lp = np.log(X[:, 0])      # log non-vocab parameters\n    Lv = np.log(X[:, 1])      # log vocabulary size\n    Ld = np.log(X[:, 2])      # log number of characters\n\n    # assemble design matrix \u03a6 of shape (N,7)\n    # columns: 1, Lp, Lv, Ld, Lp^2, Lv^2, Lp*Lv\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Lp\n    Phi[:, 2] = Lv\n    Phi[:, 3] = Ld\n    Phi[:, 4] = Lp * Lp\n    Phi[:, 5] = Lv * Lv\n    Phi[:, 6] = Lp * Lv\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model by ridge\u2010regularized least squares.\n    Regularization is very light (\u03bb ~ 1e-6) on all terms except bias to\n    improve numerical stability and reduce overfit.\n    Returns: params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute logs\n    Lp = np.log(X[:, 0])\n    Lv = np.log(X[:, 1])\n    Ld = np.log(X[:, 2])\n\n    # assemble design matrix \u03a6\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = Lp\n    Phi[:, 2] = Lv\n    Phi[:, 3] = Ld\n    Phi[:, 4] = Lp * Lp\n    Phi[:, 5] = Lv * Lv\n    Phi[:, 6] = Lp * Lv\n\n    # normal equations: (\u03a6\u1d40\u03a6 + \u039b) params = \u03a6\u1d40 y\n    G = Phi.T.dot(Phi)        # Gram matrix (7\u00d77)\n    b = Phi.T.dot(y)          # right-hand side (7,)\n\n    # small ridge on all but the bias term (index 0)\n    # scale \u03bb to trace(G)/n_nonbias \u2248 average eigenvalue\n    n_nonbias = 6.0\n    \u03bb = 1e-6 * np.trace(G) / n_nonbias\n    for i in range(1, 7):\n        G[i, i] += \u03bb\n\n    # solve for parameters\n    params = np.linalg.solve(G, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}