{"id": "c31d8a22-928d-4bb0-9794-a29ebf7c0b99", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu = p0\n              + p1*xp + p2*xv + p3*xd\n              + p4*(xp^2) + p5*(xv^2) + p6*(xd^2)\n\n    This compact form captures curvature along each axis while remaining\n    linear in the parameters, and can be robustly fitted via closed-form\n    ridge regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # safeguard against non-positive inputs\n    eps = 1e-12\n    P = np.maximum(X[:, 0], eps)\n    V = np.maximum(X[:, 1], eps)\n    D = np.maximum(X[:, 2], eps)\n\n    # log-transformed features\n    xp = np.log(P)\n    xv = np.log(V)\n    xd = np.log(D)\n\n    # quadratic-in-log prediction\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge-regularized\n    least squares. Returns a length-7 parameter vector.\n\n    Minimizes ||\u03a6 p \u2212 y||^2 + \u03bb||p||^2 with a small \u03bb for numerical stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\n            f\"Number of data points ({X.shape[0]}) and loss values ({y.shape[0]}) must match\"\n        )\n\n    # safeguard and log-transform inputs\n    eps = 1e-12\n    xp = np.log(np.maximum(X[:, 0], eps))\n    xv = np.log(np.maximum(X[:, 1], eps))\n    xd = np.log(np.maximum(X[:, 2], eps))\n\n    # build design matrix \u03a6 = [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp**2,\n        xv**2,\n        xd**2\n    ])\n\n    # ridge regularization for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(P)\n    b = Phi.T @ y\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b7401f75-4bc8-4a50-abca-e46db94f140e", "generation": 2, "timestamp": 1754722401.6740577, "iteration_found": 50, "metrics": {"nmse": 0.030342558165823166, "nmae": 0.16166167653909813, "r2": 0.9696574418341768, "combined_score": 0.9705509998346201}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.06901119416867157, "nmae": 0.27241113720528354, "r2": 0.9309888058313285, "combined_score": 0.9354438994230189}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0690\n- nmae: 0.2724\n- r2: 0.9310\n- combined_score: 0.9354\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu = b0 + b1*xp + b2*xv + b3*xd + b4*xp^2 + b5*xv^2 + b6*xd^2\n    This compact form captures curvature while remaining linear in parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Compute log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # Evaluate the quadratic model\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Build log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # Design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # Solve (Phi^T Phi + \u03bbI) p = Phi^T y for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a compact 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu \u2248 b0\n             + b1*xp + b2*xv + b3*xd\n             + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    This form captures curvature along each axis, remains linear in parameters,\n    and can be robustly fitted via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # unpack and safeguard positivity\n    eps = 1e-12\n    P = np.maximum(X[:, 0], eps)\n    V = np.maximum(X[:, 1], eps)\n    D = np.maximum(X[:, 2], eps)\n\n    # log-transformed features\n    xp = np.log(P)\n    xv = np.log(V)\n    xd = np.log(D)\n\n    # parameters vector\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # quadratic-in-log prediction\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * (xp ** 2)\n        + p[5] * (xv ** 2)\n        + p[6] * (xd ** 2)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares. Returns a parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array of shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # safeguard and log-transform inputs\n    eps = 1e-12\n    xp = np.log(np.maximum(X[:, 0], eps))\n    xv = np.log(np.maximum(X[:, 1], eps))\n    xd = np.log(np.maximum(X[:, 2], eps))\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp ** 2,\n        xv ** 2,\n        xd ** 2\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(P)\n    b = Phi.T @ y\n\n    # closed-form solution\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 3 (Score: 0.5331)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n    then Lossu = b0\n               + b1*xp + b2*xv + b3*xd\n               + b4*xp^2 + b5*xv^2 + b6*xd^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # compute log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # ensure exactly 7 parameters\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # evaluate quadratic model\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law by ridge-regularized least squares.\n    Returns a params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # build log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # small ridge for numerical stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(Phi.shape[1])\n    b = Phi.T.dot(y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5495)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu with a 7-parameter model:\n      Lossu = L0 + A_P * P^(-alpha) + A_D * D^(-beta) + A_V * V^(-gamma)\n    Internally we store log-scales so that:\n      term_P = exp(logA_P + (-alpha)*log(P))\n    etc., enforcing positivity of A_* and positivity of exponents.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]   # non-vocabulary parameters\n    V = X[:, 1]   # vocabulary size\n    D = X[:, 2]   # number of characters\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0, logA_P, logA_D, logA_V, neg_alpha, neg_beta, neg_gamma = p\n\n    # Each term is exp(logA + neg_exponent * log(feature))\n    term_P = np.exp(logA_P + neg_alpha * np.log(P))\n    term_D = np.exp(logA_D + neg_beta  * np.log(D))\n    term_V = np.exp(logA_V + neg_gamma * np.log(V))\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model by minimizing MSE via L-BFGS-B.\n    params = [L0,\n              logA_P, logA_D, logA_V,\n              neg_alpha, neg_beta, neg_gamma]\n    where neg_alpha = -alpha < 0, etc.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: baseline ~ median, unit log-scales, moderate decay exponents\n    L0_init = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA_P\n        0.0,       # logA_D\n        0.0,       # logA_V\n       -0.5,       # neg_alpha\n       -0.5,       # neg_beta\n       -0.5        # neg_gamma\n    ])\n\n    # Bounds: L0 free, logA_* free, neg_exponents strictly negative\n    bounds = [\n        (None, None),   # L0\n        (None, None),   # logA_P\n        (None, None),   # logA_D\n        (None, None),   # logA_V\n        (-10.0, -1e-6), # neg_alpha\n        (-10.0, -1e-6), # neg_beta\n        (-10.0, -1e-6)  # neg_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5433)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-space interaction model:\n      Lossu = \u03b80\n            + \u03b81\u00b7log(P_non_vocab)\n            + \u03b82\u00b7log(vocab_size)\n            + \u03b83\u00b7log(num_characters)\n            + \u03b84\u00b7log(P_non_vocab)\u00b7log(vocab_size)\n            + \u03b85\u00b7log(P_non_vocab)\u00b7log(num_characters)\n            + \u03b86\u00b7log(vocab_size)\u00b7log(num_characters)\n    params: [\u03b80 \u2026 \u03b86]\n    data_points: shape (N,3) with columns [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Build design matrix in log-space\n    logs = np.log(X)\n    lp, lv, ld = logs[:, 0], logs[:, 1], logs[:, 2]\n    A = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lv,\n        lp * ld,\n        lv * ld\n    ])\n    return A.dot(params)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction model via ridge\u2010regularized least squares\n    using a small SVD\u2010based shrinkage for numerical stability.\n    Returns params array of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Build design matrix in log-space\n    logs = np.log(X)\n    lp, lv, ld = logs[:, 0], logs[:, 1], logs[:, 2]\n    A = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lv,\n        lp * ld,\n        lv * ld\n    ])\n\n    # Small ridge parameter for stability\n    ridge = 1e-8\n\n    # SVD decomposition\n    U, s, Vt = np.linalg.svd(A, full_matrices=False)\n    # Apply ridge shrinkage: invert singular values with regularization\n    s_shrunk = s / (s * s + ridge)\n    # Compute params = V * diag(s_shrunk) * U^T * y\n    params = Vt.T.dot(s_shrunk * (U.T.dot(y)))\n\n    return params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu = b0 + b1*xp + b2*xv + b3*xd + b4*xp^2 + b5*xv^2 + b6*xd^2\n    This compact form captures curvature while remaining linear in parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Compute log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # Evaluate the quadratic model\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Build log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # Design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # Solve (Phi^T Phi + \u03bbI) p = Phi^T y for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 15532989284.4503, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (6214673822698360012800.000), Excellent nmae (62131957137.801), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5331, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n    then Lossu = b0\n               + b1*xp + b2*xv + b3*xd\n               + b4*xp^2 + b5*xv^2 + b6*xd^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # compute log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # ensure exactly 7 parameters\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    # evaluate quadratic model\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law by ridge-regularized least squares.\n    Returns a params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # build log-features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # small ridge for numerical stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(Phi.shape[1])\n    b = Phi.T.dot(y)\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5433, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-space interaction model:\n      Lossu = \u03b80\n            + \u03b81\u00b7log(P_non_vocab)\n            + \u03b82\u00b7log(vocab_size)\n            + \u03b83\u00b7log(num_characters)\n            + \u03b84\u00b7log(P_non_vocab)\u00b7log(vocab_size)\n            + \u03b85\u00b7log(P_non_vocab)\u00b7log(num_characters)\n            + \u03b86\u00b7log(vocab_size)\u00b7log(num_characters)\n    params: [\u03b80 \u2026 \u03b86]\n    data_points: shape (N,3) with columns [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # Build design matrix in log-space\n    logs = np.log(X)\n    lp, lv, ld = logs[:, 0], logs[:, 1], logs[:, 2]\n    A = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lv,\n        lp * ld,\n        lv * ld\n    ])\n    return A.dot(params)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction model via ridge\u2010regularized least squares\n    using a small SVD\u2010based shrinkage for numerical stability.\n    Returns params array of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Build design matrix in log-space\n    logs = np.log(X)\n    lp, lv, ld = logs[:, 0], logs[:, 1], logs[:, 2]\n    A = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lv,\n        lp * ld,\n        lv * ld\n    ])\n\n    # Small ridge parameter for stability\n    ridge = 1e-8\n\n    # SVD decomposition\n    U, s, Vt = np.linalg.svd(A, full_matrices=False)\n    # Apply ridge shrinkage: invert singular values with regularization\n    s_shrunk = s / (s * s + ridge)\n    # Compute params = V * diag(s_shrunk) * U^T * y\n    params = Vt.T.dot(s_shrunk * (U.T.dot(y)))\n\n    return params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu = p0\n              + p1*xp + p2*xv + p3*xd\n              + p4*(xp^2) + p5*(xv^2) + p6*(xd^2)\n\n    This compact form captures curvature along each axis while remaining\n    linear in the parameters, and can be robustly fitted via closed-form\n    ridge regression.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # safeguard against non-positive inputs\n    eps = 1e-12\n    P = np.maximum(X[:, 0], eps)\n    V = np.maximum(X[:, 1], eps)\n    D = np.maximum(X[:, 2], eps)\n\n    # log-transformed features\n    xp = np.log(P)\n    xv = np.log(V)\n    xd = np.log(D)\n\n    # quadratic-in-log prediction\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge-regularized\n    least squares. Returns a length-7 parameter vector.\n\n    Minimizes ||\u03a6 p \u2212 y||^2 + \u03bb||p||^2 with a small \u03bb for numerical stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\n            f\"Number of data points ({X.shape[0]}) and loss values ({y.shape[0]}) must match\"\n        )\n\n    # safeguard and log-transform inputs\n    eps = 1e-12\n    xp = np.log(np.maximum(X[:, 0], eps))\n    xv = np.log(np.maximum(X[:, 1], eps))\n    xd = np.log(np.maximum(X[:, 2], eps))\n\n    # build design matrix \u03a6 = [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack([\n        np.ones_like(xp),\n        xp,\n        xv,\n        xd,\n        xp**2,\n        xv**2,\n        xd**2\n    ])\n\n    # ridge regularization for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(P)\n    b = Phi.T @ y\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Switched from a 7-parameter exponentiation model with L-BFGS to a 7-parameter quadratic form in log space.\n- This closed-form ridge-regularized least squares is numerically stable, faster, and less prone to local minima.\n- The quadratic terms capture curvature while remaining linear in parameters, improving fit (lower nmse/nmae and higher R\u00b2) across varied vocabularies and scales.\n- Added input validation, epsilons for positivity, and concise, readable code."]}}}