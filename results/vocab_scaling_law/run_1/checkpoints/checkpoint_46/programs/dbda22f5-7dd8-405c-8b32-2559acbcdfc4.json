{"id": "dbda22f5-7dd8-405c-8b32-2559acbcdfc4", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef _design_matrix(data_points):\n    \"\"\"\n    Build a (N,7) feature matrix using log\u2010linear main effects and pairwise interactions:\n      [1,\n       ln(P_non_vocab),\n       ln(vocab_size),\n       ln(num_characters),\n       ln(P_non_vocab)*ln(vocab_size),\n       ln(P_non_vocab)*ln(num_characters),\n       ln(vocab_size)*ln(num_characters)\n      ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    # ensure positivity for log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All input values must be > 0 for log transform\")\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lN = np.log(N_chars)\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lN,\n        lP * lV,\n        lP * lN,\n        lV * lN\n    ])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from feature matrix and 7 parameters.\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      length\u20107 array [p0, p1,\u2026,p6]\n    Returns:     (N,) array of predicted Lossu\n    \"\"\"\n    F = _design_matrix(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != F.shape[1]:\n        raise ValueError(f\"Expected {F.shape[1]} parameters, got {p.size}\")\n    return F.dot(p)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law using ridge\u2010regularized least squares via SVD.\n    data_points:   (N,3) array [P_non_vocab, vocab_size, num_characters]\n    loss_values:   (N,) array of observed Lossu\n    Returns:       (7,) array of fitted parameters\n    \"\"\"\n    F = _design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if F.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # compute SVD of design matrix\n    U, S, Vt = np.linalg.svd(F, full_matrices=False)\n    # ridge regularization for stability\n    lambda_reg = 1e-4\n    inv = S / (S * S + lambda_reg)\n    # solve (F^T F + \u03bbI) p = F^T y via SVD components\n    return Vt.T.dot(inv * (U.T.dot(y)))\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "330c5b45-78f6-461f-b2ae-77be26a50fdc", "generation": 2, "timestamp": 1754720576.675057, "iteration_found": 46, "metrics": {"nmse": 3.0939844025285868, "nmae": 2.31476012237841, "r2": -2.0939844025285868, "combined_score": 0.24426082311949338}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 105851937980.08342, "nmae": 424752.32280699397, "r2": -105851937979.08342, "combined_score": 9.447158163308337e-12}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 105851937980.0834\n- nmae: 424752.3228\n- r2: -105851937979.0834\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 1.4919, nmae: 1.3464, r2: -0.4919, combined_score: 0.4013\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 1.4919, nmae: 1.3464, r2: -0.4919, combined_score: 0.4013\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.2636, nmae: 1.2610, r2: -0.2636, combined_score: 0.4418\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6757)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a log\u2010quadratic model.\n    \n    Model form:\n      Lossu \u2248 p0\n           + p1\u00b7ln(P_non_vocab)\n           + p2\u00b7ln(vocab_size)\n           + p3\u00b7ln(num_characters)\n           + p4\u00b7[ln(num_characters)]^2\n           + p5\u00b7[ln(P_non_vocab)\u00b7ln(num_characters)]\n           + p6\u00b7[ln(vocab_size)\u00b7ln(num_characters)]\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,3)\n        columns = [P_non_vocab, vocab_size, num_characters]\n      params: array\u2010like of length 7 = [p0, p1, \u2026, p6]\n    \n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack and log\u2010transform\n    lP = np.log(X[:, 0])   # ln(P_non_vocab)\n    lV = np.log(X[:, 1])   # ln(vocab_size)\n    lD = np.log(X[:, 2])   # ln(num_characters)\n    \n    # compute log\u2010quadratic prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lD ** 2)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010quadratic model via ridge\u2010regularized least squares.\n    \n    Constructs design matrix \u03a6 with columns:\n      [1,\n       ln(P_non_vocab),\n       ln(vocab_size),\n       ln(num_characters),\n       (ln(num_characters))^2,\n       ln(P_non_vocab)\u00b7ln(num_characters),\n       ln(vocab_size)\u00b7ln(num_characters)]\n    \n    Solves (\u03a6\u1d40\u03a6 + \u03bbI)p = \u03a6\u1d40y for p.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    \n    # log\u2010transform features\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build \u03a6: (N,7)\n    phi = np.stack([\n        np.ones_like(lP),  # intercept\n        lP,\n        lV,\n        lD,\n        lD ** 2,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    # ridge regularization strength\n    lam = 1e-4\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.2636), Performs well on nmae (1.2610), Performs well on r2 (-0.2636), Performs well on combined_score (0.4418)\n\n\n### Program 2 (Score: 0.6869)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts Lossu as a quadratic polynomial in the log\u2010features:\n    \n      Lossu \u2248 p0\n             + p1\u00b7ln(P_non_vocab)\n             + p2\u00b7ln(vocab_size)\n             + p3\u00b7ln(num_characters)\n             + p4\u00b7[ln(P_non_vocab)]\u00b2\n             + p5\u00b7[ln(vocab_size)]\u00b2\n             + p6\u00b7[ln(num_characters)]\u00b2\n    \n    Args:\n      data_points: array\u2010like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array\u2010like of length 7 = [p0\u2026p6]\n    \n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    \n    p = np.ravel(params)\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack and log\u2010transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12  # avoid log(0)\n    lP = np.log(P_non   + eps)\n    lV = np.log(V       + eps)\n    lD = np.log(N_chars + eps)\n    \n    # construct design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)  # shape = (N,7)\n    \n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 7\u2010parameter quadratic log\u2010polynomial scaling law via\n    ridge\u2010regularized least squares.\n    \n    Args:\n      data_points: array\u2010like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,) with observed Lossu.\n    \n    Returns:\n      params_opt: ndarray of length 7 with fitted [p0\u2026p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.ravel(loss_values)\n    \n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n    \n    # unpack and log\u2010transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P_non   + eps)\n    lV = np.log(V       + eps)\n    lD = np.log(N_chars + eps)\n    \n    # build design matrix\n    N = X.shape[0]\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)  # shape = (N,7)\n    \n    # ridge regularization for numerical stability\n    ridge_lambda = 1e-4\n    A = phi.T.dot(phi) + ridge_lambda * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.4919), Performs well on nmae (1.3464), Performs well on r2 (-0.4919), Performs well on combined_score (0.4013)\n\n\n### Program 3 (Score: 0.6869)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic log-polynomial model.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that:\n            Lossu \u2248 p0\n                   + p1*ln(P_non_vocab)\n                   + p2*ln(vocab_size)\n                   + p3*ln(num_characters)\n                   + p4*(ln(P_non_vocab))^2\n                   + p5*(ln(vocab_size))^2\n                   + p6*(ln(num_characters))^2\n    Returns:\n        preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # Add a tiny epsilon for numerical stability before taking logs\n    eps = 1e-12\n    lp = np.log(X[:, 0] + eps)\n    lv = np.log(X[:, 1] + eps)\n    ld = np.log(X[:, 2] + eps)\n\n    # Build the feature matrix: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lp,\n        lv * lv,\n        ld * ld\n    ])\n\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic log-polynomial scaling law via\n    ridge-regularized least squares.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n\n    Returns:\n        params_opt: ndarray of length 7\n            Fitted parameters [p0 .. p6] for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Log\u2010transform with small epsilon for stability\n    eps = 1e-12\n    lp = np.log(X[:, 0] + eps)\n    lv = np.log(X[:, 1] + eps)\n    ld = np.log(X[:, 2] + eps)\n\n    # Build design matrix Phi: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lp,\n        lv * lv,\n        ld * ld\n    ])\n\n    # Ridge regularization for numerical stability\n    lambda_reg = 1e-4\n    A = Phi.T.dot(Phi) + lambda_reg * np.eye(7)\n    b = Phi.T.dot(y)\n\n    # Solve the regularized normal equations\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.4919), Performs well on nmae (1.3464), Performs well on r2 (-0.4919), Performs well on combined_score (0.4013)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8898)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _design_matrix(data_points):\n    \"\"\"\n    Build the (N,7) feature matrix for our log\u2010linear scaling law.\n\n    Features are:\n      [1,\n       ln(1+P_non_vocab),\n       ln(1+num_characters),\n       ln(1+vocab_size),\n       ln(1+P_non_vocab)*ln(1+num_characters),\n       ln(1+P_non_vocab)*ln(1+vocab_size),\n       ln(1+num_characters)*ln(1+vocab_size)\n      ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"Expected data_points as an (N,3) array\")\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n\n    # log1p for improved numerical stability near zero\n    lP = np.log1p(P_non)\n    lN = np.log1p(N_chars)\n    lV = np.log1p(V)\n\n    # assemble features\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lN,\n        lV,\n        lP * lN,\n        lP * lV,\n        lN * lV\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    F = _design_matrix(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != F.shape[1]:\n        raise ValueError(f\"Expected {F.shape[1]} parameters, got {p.size}\")\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law to observed Lossu values\n    using ridge\u2010regularized least squares solved via SVD for numerical stability.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized parameters\n    \"\"\"\n    F = _design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if F.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # regularization strength\n    ridge_lambda = 1e-4\n\n    # compute SVD of F\n    U, S, Vt = np.linalg.svd(F, full_matrices=False)\n\n    # solve (F^T F + \u03bbI) p = F^T y via the SVD components:\n    # p = V @ diag(S / (S^2 + \u03bb)) @ U^T @ y\n    inv_diag = S / (S*S + ridge_lambda)\n    params_opt = Vt.T.dot(inv_diag * (U.T.dot(y)))\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a 7\u2010parameter\n    log\u2010linear model with pairwise interactions.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    params: array\u2010like of length 7\n        [p0, p1, p2, p3, p4, p5, p6] such that\n        Lossu \u2248 p0\n              + p1 * ln(P_non_vocab)\n              + p2 * ln(vocab_size)\n              + p3 * ln(num_characters)\n              + p4 * (ln(P_non_vocab) * ln(vocab_size))\n              + p5 * (ln(P_non_vocab) * ln(num_characters))\n              + p6 * (ln(vocab_size)   * ln(num_characters))\n    Returns: ndarray of shape (N,) of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # raw features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # linear combination with interactions\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    loss_values: array\u2010like of shape (N,)\n        Observed Lossu.\n\n    Returns: ndarray of length 7 with fitted parameters.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    # extract & log\u2010transform\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    D     = X[:, 2]\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # design matrix: intercept, 3 main effects, 3 pairwise interactions\n    Phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization for numerical stability\n    lambda_reg = 1e-6\n    A = Phi.T @ Phi + lambda_reg * np.eye(7)\n    b = Phi.T @ y\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6757, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a log\u2010quadratic model.\n    \n    Model form:\n      Lossu \u2248 p0\n           + p1\u00b7ln(P_non_vocab)\n           + p2\u00b7ln(vocab_size)\n           + p3\u00b7ln(num_characters)\n           + p4\u00b7[ln(num_characters)]^2\n           + p5\u00b7[ln(P_non_vocab)\u00b7ln(num_characters)]\n           + p6\u00b7[ln(vocab_size)\u00b7ln(num_characters)]\n    \n    Inputs:\n      data_points: array\u2010like of shape (N,3)\n        columns = [P_non_vocab, vocab_size, num_characters]\n      params: array\u2010like of length 7 = [p0, p1, \u2026, p6]\n    \n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack and log\u2010transform\n    lP = np.log(X[:, 0])   # ln(P_non_vocab)\n    lV = np.log(X[:, 1])   # ln(vocab_size)\n    lD = np.log(X[:, 2])   # ln(num_characters)\n    \n    # compute log\u2010quadratic prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lD ** 2)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010quadratic model via ridge\u2010regularized least squares.\n    \n    Constructs design matrix \u03a6 with columns:\n      [1,\n       ln(P_non_vocab),\n       ln(vocab_size),\n       ln(num_characters),\n       (ln(num_characters))^2,\n       ln(P_non_vocab)\u00b7ln(num_characters),\n       ln(vocab_size)\u00b7ln(num_characters)]\n    \n    Solves (\u03a6\u1d40\u03a6 + \u03bbI)p = \u03a6\u1d40y for p.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    \n    # log\u2010transform features\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build \u03a6: (N,7)\n    phi = np.stack([\n        np.ones_like(lP),  # intercept\n        lP,\n        lV,\n        lD,\n        lD ** 2,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    # ridge regularization strength\n    lam = 1e-4\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.264), Excellent nmae (1.261)\n\n\n### Inspiration 2 (Score: 0.6869, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic log-polynomial model.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that:\n            Lossu \u2248 p0\n                   + p1*ln(P_non_vocab)\n                   + p2*ln(vocab_size)\n                   + p3*ln(num_characters)\n                   + p4*(ln(P_non_vocab))^2\n                   + p5*(ln(vocab_size))^2\n                   + p6*(ln(num_characters))^2\n    Returns:\n        preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # Add a tiny epsilon for numerical stability before taking logs\n    eps = 1e-12\n    lp = np.log(X[:, 0] + eps)\n    lv = np.log(X[:, 1] + eps)\n    ld = np.log(X[:, 2] + eps)\n\n    # Build the feature matrix: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lp,\n        lv * lv,\n        ld * ld\n    ])\n\n    return Phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic log-polynomial scaling law via\n    ridge-regularized least squares.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n\n    Returns:\n        params_opt: ndarray of length 7\n            Fitted parameters [p0 .. p6] for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # Log\u2010transform with small epsilon for stability\n    eps = 1e-12\n    lp = np.log(X[:, 0] + eps)\n    lv = np.log(X[:, 1] + eps)\n    ld = np.log(X[:, 2] + eps)\n\n    # Build design matrix Phi: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp * lp,\n        lv * lv,\n        ld * ld\n    ])\n\n    # Ridge regularization for numerical stability\n    lambda_reg = 1e-4\n    A = Phi.T.dot(Phi) + lambda_reg * np.eye(7)\n    b = Phi.T.dot(y)\n\n    # Solve the regularized normal equations\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.492), Excellent nmae (1.346)\n\n\n### Inspiration 3 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a 7\u2010parameter\n    log\u2010linear model with pairwise interactions.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    params: array\u2010like of length 7\n        [p0, p1, p2, p3, p4, p5, p6] such that\n        Lossu \u2248 p0\n              + p1 * ln(P_non_vocab)\n              + p2 * ln(vocab_size)\n              + p3 * ln(num_characters)\n              + p4 * (ln(P_non_vocab) * ln(vocab_size))\n              + p5 * (ln(P_non_vocab) * ln(num_characters))\n              + p6 * (ln(vocab_size)   * ln(num_characters))\n    Returns: ndarray of shape (N,) of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # raw features\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n\n    # ensure positivity for log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All inputs must be positive to compute log.\")\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # linear combination with pairwise interactions\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via ridge\u2010regularized least squares.\n\n    data_points: array\u2010like of shape (N, 3)\n        Columns = [P_non_vocab, vocab_size, num_characters].\n    loss_values: array\u2010like of shape (N,)\n        Observed Lossu.\n\n    Returns: ndarray of length 7 with fitted parameters.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n\n    # extract & log\u2010transform\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    D     = X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All inputs must be positive to compute log.\")\n\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # design matrix: intercept, 3 main effects, 3 pairwise interactions\n    Phi = np.column_stack([\n        np.ones(N),   # intercept\n        lP,           # main effect: log P_non_vocab\n        lV,           # main effect: log vocab_size\n        lD,           # main effect: log num_characters\n        lP * lV,      # interaction: P_non_vocab \u00d7 vocab_size\n        lP * lD,      # interaction: P_non_vocab \u00d7 num_characters\n        lV * lD       # interaction: vocab_size \u00d7 num_characters\n    ])  # shape (N,7)\n\n    # ridge regularization for numerical stability\n    lambda_reg = 1e-6\n    A = Phi.T @ Phi + lambda_reg * np.eye(7)\n    b = Phi.T @ y\n\n    # solve the linear system\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 4 (Score: 0.8898, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _design_matrix(data_points):\n    \"\"\"\n    Build the (N,7) feature matrix for our log\u2010linear scaling law.\n\n    Features are:\n      [1,\n       ln(1+P_non_vocab),\n       ln(1+num_characters),\n       ln(1+vocab_size),\n       ln(1+P_non_vocab)*ln(1+num_characters),\n       ln(1+P_non_vocab)*ln(1+vocab_size),\n       ln(1+num_characters)*ln(1+vocab_size)\n      ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"Expected data_points as an (N,3) array\")\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n\n    # log1p for improved numerical stability near zero\n    lP = np.log1p(P_non)\n    lN = np.log1p(N_chars)\n    lV = np.log1p(V)\n\n    # assemble features\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lN,\n        lV,\n        lP * lN,\n        lP * lV,\n        lN * lV\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    F = _design_matrix(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != F.shape[1]:\n        raise ValueError(f\"Expected {F.shape[1]} parameters, got {p.size}\")\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law to observed Lossu values\n    using ridge\u2010regularized least squares solved via SVD for numerical stability.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized parameters\n    \"\"\"\n    F = _design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if F.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # regularization strength\n    ridge_lambda = 1e-4\n\n    # compute SVD of F\n    U, S, Vt = np.linalg.svd(F, full_matrices=False)\n\n    # solve (F^T F + \u03bbI) p = F^T y via the SVD components:\n    # p = V @ diag(S / (S^2 + \u03bb)) @ U^T @ y\n    inv_diag = S / (S*S + ridge_lambda)\n    params_opt = Vt.T.dot(inv_diag * (U.T.dot(y)))\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.094), Excellent nmae (2.315)\n\n\n### Inspiration 5 (Score: 0.6869, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts Lossu as a quadratic polynomial in the log\u2010features:\n    \n      Lossu \u2248 p0\n             + p1\u00b7ln(P_non_vocab)\n             + p2\u00b7ln(vocab_size)\n             + p3\u00b7ln(num_characters)\n             + p4\u00b7[ln(P_non_vocab)]\u00b2\n             + p5\u00b7[ln(vocab_size)]\u00b2\n             + p6\u00b7[ln(num_characters)]\u00b2\n    \n    Args:\n      data_points: array\u2010like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array\u2010like of length 7 = [p0\u2026p6]\n    \n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    \n    p = np.ravel(params)\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack and log\u2010transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12  # avoid log(0)\n    lP = np.log(P_non   + eps)\n    lV = np.log(V       + eps)\n    lD = np.log(N_chars + eps)\n    \n    # construct design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)  # shape = (N,7)\n    \n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 7\u2010parameter quadratic log\u2010polynomial scaling law via\n    ridge\u2010regularized least squares.\n    \n    Args:\n      data_points: array\u2010like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,) with observed Lossu.\n    \n    Returns:\n      params_opt: ndarray of length 7 with fitted [p0\u2026p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.ravel(loss_values)\n    \n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Mismatched number of data points and loss values\")\n    \n    # unpack and log\u2010transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P_non   + eps)\n    lV = np.log(V       + eps)\n    lD = np.log(N_chars + eps)\n    \n    # build design matrix\n    N = X.shape[0]\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)  # shape = (N,7)\n    \n    # ridge regularization for numerical stability\n    ridge_lambda = 1e-4\n    A = phi.T.dot(phi) + ridge_lambda * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.492), Excellent nmae (1.346)\n\n\n\n# Current Program\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _design_matrix(data_points):\n    \"\"\"\n    Build a (N,7) feature matrix using log\u2010linear main effects and pairwise interactions:\n      [1,\n       ln(P_non_vocab),\n       ln(vocab_size),\n       ln(num_characters),\n       ln(P_non_vocab)*ln(vocab_size),\n       ln(P_non_vocab)*ln(num_characters),\n       ln(vocab_size)*ln(num_characters)\n      ]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    # ensure positivity for log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All input values must be > 0 for log transform\")\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lN = np.log(N_chars)\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lN,\n        lP * lV,\n        lP * lN,\n        lV * lN\n    ])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from feature matrix and 7 parameters.\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      length\u20107 array [p0, p1,\u2026,p6]\n    Returns:     (N,) array of predicted Lossu\n    \"\"\"\n    F = _design_matrix(data_points)\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != F.shape[1]:\n        raise ValueError(f\"Expected {F.shape[1]} parameters, got {p.size}\")\n    return F.dot(p)\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law using ridge\u2010regularized least squares via SVD.\n    data_points:   (N,3) array [P_non_vocab, vocab_size, num_characters]\n    loss_values:   (N,) array of observed Lossu\n    Returns:       (7,) array of fitted parameters\n    \"\"\"\n    F = _design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if F.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n    # compute SVD of design matrix\n    U, S, Vt = np.linalg.svd(F, full_matrices=False)\n    # ridge regularization for stability\n    lambda_reg = 1e-4\n    inv = S / (S * S + lambda_reg)\n    # solve (F^T F + \u03bbI) p = F^T y via SVD components\n    return Vt.T.dot(inv * (U.T.dot(y)))\n# EVOLVE-BLOCK-END\n```"]}}}