{"id": "19fef7fd-2e11-490e-97b8-888418733051", "code": "import numpy as np\nfrom scipy.optimize import least_squares, minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law with two interaction terms:\n      Lossu = L0\n               + A * (P_non_vocab^(-alpha) * num_chars^(-beta))\n               + B * (vocab_size^(-gamma) * num_chars^(-delta))\n\n    Parameters:\n      data_points: array-like of shape (N,3)\n                   columns: [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [L0,\n                    logA,      # log-scale for P*D term\n                    logB,      # log-scale for V*D term\n                    log_alpha, # log-exponent on P_non_vocab\n                    log_beta,  # log-exponent on num_characters for P-term\n                    log_gamma, # log-exponent on vocab_size\n                    log_delta] # log-exponent on num_characters for V-term\n\n    Returns:\n      preds: ndarray of shape (N,)\n             The predicted Lossu for each row in data_points.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # unpack parameters\n    L0        = p[0]\n    A         = np.exp(p[1])\n    B         = np.exp(p[2])\n    alpha     = np.exp(p[3])\n    beta      = np.exp(p[4])\n    gamma     = np.exp(p[5])\n    delta     = np.exp(p[6])\n\n    # compute two interaction terms\n    term_PD = (P ** (-alpha)) * (D ** (-beta))\n    term_VD = (V ** (-gamma)) * (D ** (-delta))\n    preds = L0 + A * term_PD + B * term_VD\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    Uses a two-stage procedure:\n      1) nonlinear least squares (trust-region reflective)\n      2) fallback to L-BFGS-B on MSE if needed.\n\n    Returns:\n      params_opt: ndarray of length 7\n                  [L0, logA, logB, log_alpha, log_beta, log_gamma, log_delta]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init     = np.median(y)\n    logA_init   = 0.0                      # A = 1\n    logB_init   = 0.0                      # B = 1\n    # moderate interactions: exponent = 0.5 => log(0.5)\n    log_alpha_i = np.log(0.5)\n    log_beta_i  = np.log(0.5)\n    log_gamma_i = np.log(0.5)\n    log_delta_i = np.log(0.5)\n\n    init = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        log_alpha_i,\n        log_beta_i,\n        log_gamma_i,\n        log_delta_i\n    ], dtype=float)\n\n    # Bounds for parameters\n    lower = [\n        -np.inf,    # L0\n        -20.0,      # logA\n        -20.0,      # logB\n        -5.0,       # log_alpha\n        -5.0,       # log_beta\n        -5.0,       # log_gamma\n        -5.0        # log_delta\n    ]\n    upper = [\n         np.inf,    # L0\n         20.0,      # logA\n         20.0,      # logB\n         5.0,       # log_alpha\n         5.0,       # log_beta\n         5.0,       # log_gamma\n         5.0        # log_delta\n    ]\n\n    # residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # try nonlinear least squares first\n    try:\n        lsq = least_squares(\n            residuals,\n            init,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-12,\n            xtol=1e-12,\n            gtol=1e-8,\n            max_nfev=2000\n        )\n        if lsq.success:\n            return lsq.x\n    except Exception:\n        pass\n\n    # fallback: minimize MSE via L-BFGS-B\n    def mse_obj(p):\n        r = scaling_law_func(X, p) - y\n        return np.mean(r * r)\n\n    result = minimize(\n        mse_obj,\n        init,\n        method='L-BFGS-B',\n        bounds=list(zip(lower, upper)),\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init", "language": "python", "parent_id": "0c4cecfa-589e-4122-93ce-8616ed26b604", "generation": 3, "timestamp": 1754723356.0767813, "iteration_found": 42, "metrics": {"nmse": 0.07504844966102062, "nmae": 0.2785116441178456, "r2": 0.9249515503389794, "combined_score": 0.9301906349572574}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.18390523705162118, "nmae": 0.31261624854100256, "r2": 0.8160947629483788, "combined_score": 0.8446621982097015}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1839\n- nmae: 0.3126\n- r2: 0.8161\n- combined_score: 0.8447\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1408, nmae: 0.3598, r2: 0.8592, combined_score: 0.8766\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 2 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 7-parameter scaling law for modeling Lossu as a function of\nnon-vocabulary parameters (P), vocabulary size (V), and number of characters (D).\n\nModel form:\n  Lossu(P, V, D) = L0\n                   + A * P^(\u2013\u03b1)\n                   + B * D^(\u2013\u03b2)\n                   + C * V^(\u2013\u03b3)\n\nParameters (7 total):\n  0: L0       \u2014 additive offset\n  1: logA     \u2014 log-scale for the P term\n  2: logB     \u2014 log-scale for the D term\n  3: logC     \u2014 log-scale for the V term\n  4: log_alpha \u2014 log-exponent on P\n  5: log_beta  \u2014 log-exponent on D\n  6: log_gamma \u2014 log-exponent on V\n\nAll of A, B, C, \u03b1, \u03b2, \u03b3 are constrained to be positive via exponentiation.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu values given data_points and model params.\n\n    Args:\n      data_points: array-like of shape (N, 3)\n                   columns: [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n\n    Returns:\n      preds: ndarray of shape (N,)\n             The predicted Lossu for each row in data_points.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack parameters\n    L0     = p[0]\n    A      = np.exp(p[1])\n    B      = np.exp(p[2])\n    C      = np.exp(p[3])\n    alpha  = np.exp(p[4])\n    beta   = np.exp(p[5])\n    gamma  = np.exp(p[6])\n\n    # Compute the scaling law\n    preds = (L0\n             + A * (P ** (-alpha))\n             + B * (D ** (-beta))\n             + C * (V ** (-gamma)))\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu data.\n\n    Args:\n      data_points: array-like of shape (N, 3)\n                   columns: [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of length N\n                   Observed Lossu values.\n\n    Returns:\n      params_opt: ndarray of length 7\n                  Optimized parameters [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init     = np.median(y)\n    logA_init   = 0.0   # A = 1\n    logB_init   = 0.0   # B = 1\n    logC_init   = 0.0   # C = 1\n    log_alpha_i = np.log(1.0)  # \u03b1 = 1\n    log_beta_i  = np.log(1.0)  # \u03b2 = 1\n    log_gamma_i = np.log(1.0)  # \u03b3 = 1\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_i,\n        log_beta_i,\n        log_gamma_i\n    ], dtype=float)\n\n    # Bounds to keep values in a reasonable range\n    bounds = [\n        (None, None),       # L0 free\n        (-20.0, 20.0),      # logA\n        (-20.0, 20.0),      # logB\n        (-20.0, 20.0),      # logC\n        (-5.0, 5.0),        # log_alpha\n        (-5.0, 5.0),        # log_beta\n        (-5.0, 5.0)         # log_gamma\n    ]\n\n    # Objective: mean squared error\n    def _mse(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(\n        _mse,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 3 (Score: 0.5591)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative 5-parameter scaling law:\n      Lossu = bias - exp(k0) * P_non_vocab**alpha * num_chars**beta * vocab_size**gamma\n\n    Inputs:\n      data_points: array-like, shape (N,3) columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 5 = [k0, alpha, beta, gamma, bias]\n\n    Returns:\n      preds: array, shape (N,) predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    k0, alpha, beta, gamma, bias = params\n    # compute the multiplicative term\n    # exp(k0) ensures positivity of the scale\n    scale = np.exp(k0)\n    preds = bias - scale * (P**alpha) * (D**beta) * (V**gamma)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law using a two-stage procedure:\n      1) closed-form log-linear regression to initialize [k0, alpha, beta, gamma]\n      2) an optional L-BFGS-B refinement over all 5 parameters (including bias)\n\n    Returns:\n      params_opt: array, length 5 = [k0, alpha, beta, gamma, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points rows\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # All Lossu values are negative -> -y > 0\n    # Add small epsilon to avoid log(0)\n    eps = 1e-9\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logY = np.log(-y + eps)\n\n    # Design matrix for [k0, alpha, beta, gamma]: logY \u2248 k0 + alpha*logP + beta*logD + gamma*logV\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    # Solve in closed form\n    coeffs, *_ = np.linalg.lstsq(A, logY, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # Initial bias: zero mean residual in original Lossu space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    init_params = np.array([k0_init, alpha_init, beta_init, gamma_init, bias_init], dtype=float)\n\n    # Refine all parameters via L-BFGS-B minimizing MSE\n    def mse_obj(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    # Bounds: leave log-scale and exponents free, bias free\n    bounds = [(None, None)] * 5\n\n    res = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # if optimization fails, return the closed-form solution\n        return init_params\n```\nKey features: Performs well on nmse (0.1408), Performs well on nmae (0.3598), Performs well on r2 (0.8592), Performs well on combined_score (0.8766)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5393)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 7-parameter scaling law for LLM finetuning:\n  Lossu(P, V, D) = L0 \n                   + A * P^(-alpha) \n                   + B * D^(-beta) \n                   + C * V^(-gamma)\n\nParameters (7 total):\n  L0         \u2014 base offset\n  logA       \u2014 log-scale for non-vocab params term\n  logB       \u2014 log-scale for chars term\n  logC       \u2014 log-scale for vocab term\n  log_alpha  \u2014 log-exponent on P_non_vocab\n  log_beta   \u2014 log-exponent on num_characters\n  log_gamma  \u2014 log-exponent on vocab_size\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 7\n    returns:     predicted Lossu, shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # unpack parameters\n    L0      = p[0]\n    A       = np.exp(p[1])\n    B       = np.exp(p[2])\n    C       = np.exp(p[3])\n    alpha   = np.exp(p[4])\n    beta    = np.exp(p[5])\n    gamma   = np.exp(p[6])\n\n    # compute scaling law\n    pred = (L0\n            + A * P**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B.\n    Returns the optimized params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: median baseline, unit log-scales, moderate negative exponents\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,  # L0\n        0.0,      # logA\n        0.0,      # logB\n        0.0,      # logC\n       -1.0,      # log_alpha\n       -1.0,      # log_beta\n       -1.0       # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs in a reasonable range\n    bounds = [\n        (None, None),       # L0\n        (-20.0, 20.0),      # logA\n        (-20.0, 20.0),      # logB\n        (-20.0, 20.0),      # logC\n        (-10.0, 10.0),      # log_alpha\n        (-10.0, 10.0),      # log_beta\n        (-10.0, 10.0)       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback in case optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.6153, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares, minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter model:\n      Lossu = L0 \n             - C1 * P_non_vocab^(-alpha) * D^(-beta)\n             - C2 * V^(-gamma)    * D^(-delta)\n    params = [L0, logC1, alpha, beta, logC2, gamma, delta]\n    \"\"\"\n    X = np.asarray(data_points, float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P, V, D = X[:,0], X[:,1], X[:,2]\n\n    L0, logC1, alpha, beta, logC2, gamma, delta = params\n    C1 = np.exp(logC1)\n    C2 = np.exp(logC2)\n\n    term1 = C1 * (P**(-alpha)) * (D**(-beta))\n    term2 = C2 * (V**(-gamma)) * (D**(-delta))\n    return L0 - term1 - term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model via nonlinear least squares.\n    Falls back to L-BFGS-B on MSE if least_squares fails.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    y = np.asarray(loss_values, float).ravel()\n\n    # Initial parameter guess\n    L0_init = np.max(y)                             # intercept \u2248 best (least negative) Lossu\n    init = np.array([\n        L0_init,                                    # L0\n        0.0,                                        # logC1\n        0.5,                                        # alpha\n        0.5,                                        # beta\n        0.0,                                        # logC2\n        0.5,                                        # gamma\n        0.5                                         # delta\n    ], dtype=float)\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: exponents \u2265 0, \u2264 3; logs free; L0 free\n    lower = [-np.inf, -np.inf, 0.0, 0.0, -np.inf, 0.0, 0.0]\n    upper = [ np.inf,  np.inf, 3.0, 3.0,  np.inf, 3.0, 3.0]\n\n    try:\n        sol = least_squares(residuals, init, bounds=(lower,upper),\n                            ftol=1e-9, xtol=1e-9, gtol=1e-9, method='trf')\n        p_opt = sol.x\n    except Exception:\n        # fallback to L-BFGS-B minimizing MSE\n        def mse_obj(p):\n            r = scaling_law_func(X, p) - y\n            return np.mean(r*r)\n        res = minimize(mse_obj, init, method='L-BFGS-B',\n                       bounds=list(zip(lower,upper)),\n                       options={'ftol':1e-12,'gtol':1e-8})\n        p_opt = res.x if res.success else init\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.012), Excellent nmae (0.964)\n\n\n### Inspiration 3 (Score: 0.5786, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5591, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative 5-parameter scaling law:\n      Lossu = bias - exp(k0) * P_non_vocab**alpha * num_chars**beta * vocab_size**gamma\n\n    Inputs:\n      data_points: array-like, shape (N,3) columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 5 = [k0, alpha, beta, gamma, bias]\n\n    Returns:\n      preds: array, shape (N,) predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    k0, alpha, beta, gamma, bias = params\n    # compute the multiplicative term\n    # exp(k0) ensures positivity of the scale\n    scale = np.exp(k0)\n    preds = bias - scale * (P**alpha) * (D**beta) * (V**gamma)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law using a two-stage procedure:\n      1) closed-form log-linear regression to initialize [k0, alpha, beta, gamma]\n      2) an optional L-BFGS-B refinement over all 5 parameters (including bias)\n\n    Returns:\n      params_opt: array, length 5 = [k0, alpha, beta, gamma, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points rows\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # All Lossu values are negative -> -y > 0\n    # Add small epsilon to avoid log(0)\n    eps = 1e-9\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logY = np.log(-y + eps)\n\n    # Design matrix for [k0, alpha, beta, gamma]: logY \u2248 k0 + alpha*logP + beta*logD + gamma*logV\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    # Solve in closed form\n    coeffs, *_ = np.linalg.lstsq(A, logY, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # Initial bias: zero mean residual in original Lossu space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    init_params = np.array([k0_init, alpha_init, beta_init, gamma_init, bias_init], dtype=float)\n\n    # Refine all parameters via L-BFGS-B minimizing MSE\n    def mse_obj(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    # Bounds: leave log-scale and exponents free, bias free\n    bounds = [(None, None)] * 5\n\n    res = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # if optimization fails, return the closed-form solution\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5520, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 7-parameter scaling law for modeling Lossu as a function of\nnon-vocabulary parameters (P), vocabulary size (V), and number of characters (D).\n\nModel form:\n  Lossu(P, V, D) = L0\n                   + A * P^(\u2013\u03b1)\n                   + B * D^(\u2013\u03b2)\n                   + C * V^(\u2013\u03b3)\n\nParameters (7 total):\n  0: L0       \u2014 additive offset\n  1: logA     \u2014 log-scale for the P term\n  2: logB     \u2014 log-scale for the D term\n  3: logC     \u2014 log-scale for the V term\n  4: log_alpha \u2014 log-exponent on P\n  5: log_beta  \u2014 log-exponent on D\n  6: log_gamma \u2014 log-exponent on V\n\nAll of A, B, C, \u03b1, \u03b2, \u03b3 are constrained to be positive via exponentiation.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu values given data_points and model params.\n\n    Args:\n      data_points: array-like of shape (N, 3)\n                   columns: [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n\n    Returns:\n      preds: ndarray of shape (N,)\n             The predicted Lossu for each row in data_points.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # Ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack parameters\n    L0     = p[0]\n    A      = np.exp(p[1])\n    B      = np.exp(p[2])\n    C      = np.exp(p[3])\n    alpha  = np.exp(p[4])\n    beta   = np.exp(p[5])\n    gamma  = np.exp(p[6])\n\n    # Compute the scaling law\n    preds = (L0\n             + A * (P ** (-alpha))\n             + B * (D ** (-beta))\n             + C * (V ** (-gamma)))\n    return preds\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu data.\n\n    Args:\n      data_points: array-like of shape (N, 3)\n                   columns: [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of length N\n                   Observed Lossu values.\n\n    Returns:\n      params_opt: ndarray of length 7\n                  Optimized parameters [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init     = np.median(y)\n    logA_init   = 0.0   # A = 1\n    logB_init   = 0.0   # B = 1\n    logC_init   = 0.0   # C = 1\n    log_alpha_i = np.log(1.0)  # \u03b1 = 1\n    log_beta_i  = np.log(1.0)  # \u03b2 = 1\n    log_gamma_i = np.log(1.0)  # \u03b3 = 1\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_i,\n        log_beta_i,\n        log_gamma_i\n    ], dtype=float)\n\n    # Bounds to keep values in a reasonable range\n    bounds = [\n        (None, None),       # L0 free\n        (-20.0, 20.0),      # logA\n        (-20.0, 20.0),      # logB\n        (-20.0, 20.0),      # logC\n        (-5.0, 5.0),        # log_alpha\n        (-5.0, 5.0),        # log_beta\n        (-5.0, 5.0)         # log_gamma\n    ]\n\n    # Objective: mean squared error\n    def _mse(p):\n        y_pred = scaling_law_func(X, p)\n        return np.mean((y_pred - y) ** 2)\n\n    # Optimize with L-BFGS-B\n    result = minimize(\n        _mse,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initial guess\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 7-parameter scaling law for LLM finetuning:\n  Lossu(P, V, D) = L0 \n                   + A * P^(-alpha) \n                   + B * D^(-beta) \n                   + C * V^(-gamma)\n\nParameters (7 total):\n  L0         \u2014 base offset\n  logA       \u2014 log-scale for non-vocab params term\n  logB       \u2014 log-scale for chars term\n  logC       \u2014 log-scale for vocab term\n  log_alpha  \u2014 log-exponent on P_non_vocab\n  log_beta   \u2014 log-exponent on num_characters\n  log_gamma  \u2014 log-exponent on vocab_size\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 7\n    returns:     predicted Lossu, shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # unpack parameters\n    L0      = p[0]\n    A       = np.exp(p[1])\n    B       = np.exp(p[2])\n    C       = np.exp(p[3])\n    alpha   = np.exp(p[4])\n    beta    = np.exp(p[5])\n    gamma   = np.exp(p[6])\n\n    # compute scaling law\n    pred = (L0\n            + A * P**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B.\n    Returns the optimized params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: median baseline, unit log-scales, moderate negative exponents\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,  # L0\n        0.0,      # logA\n        0.0,      # logB\n        0.0,      # logC\n       -1.0,      # log_alpha\n       -1.0,      # log_beta\n       -1.0       # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs in a reasonable range\n    bounds = [\n        (None, None),       # L0\n        (-20.0, 20.0),      # logA\n        (-20.0, 20.0),      # logB\n        (-20.0, 20.0),      # logC\n        (-10.0, 10.0),      # log_alpha\n        (-10.0, 10.0),      # log_beta\n        (-10.0, 10.0)       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback in case optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares, minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law with two interaction terms:\n      Lossu = L0\n               + A * (P_non_vocab^(-alpha) * num_chars^(-beta))\n               + B * (vocab_size^(-gamma) * num_chars^(-delta))\n\n    Parameters:\n      data_points: array-like of shape (N,3)\n                   columns: [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [L0,\n                    logA,      # log-scale for P*D term\n                    logB,      # log-scale for V*D term\n                    log_alpha, # log-exponent on P_non_vocab\n                    log_beta,  # log-exponent on num_characters for P-term\n                    log_gamma, # log-exponent on vocab_size\n                    log_delta] # log-exponent on num_characters for V-term\n\n    Returns:\n      preds: ndarray of shape (N,)\n             The predicted Lossu for each row in data_points.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # unpack parameters\n    L0        = p[0]\n    A         = np.exp(p[1])\n    B         = np.exp(p[2])\n    alpha     = np.exp(p[3])\n    beta      = np.exp(p[4])\n    gamma     = np.exp(p[5])\n    delta     = np.exp(p[6])\n\n    # compute two interaction terms\n    term_PD = (P ** (-alpha)) * (D ** (-beta))\n    term_VD = (V ** (-gamma)) * (D ** (-delta))\n    preds = L0 + A * term_PD + B * term_VD\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data.\n    Uses a two-stage procedure:\n      1) nonlinear least squares (trust-region reflective)\n      2) fallback to L-BFGS-B on MSE if needed.\n\n    Returns:\n      params_opt: ndarray of length 7\n                  [L0, logA, logB, log_alpha, log_beta, log_gamma, log_delta]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init     = np.median(y)\n    logA_init   = 0.0                      # A = 1\n    logB_init   = 0.0                      # B = 1\n    # moderate interactions: exponent = 0.5 => log(0.5)\n    log_alpha_i = np.log(0.5)\n    log_beta_i  = np.log(0.5)\n    log_gamma_i = np.log(0.5)\n    log_delta_i = np.log(0.5)\n\n    init = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        log_alpha_i,\n        log_beta_i,\n        log_gamma_i,\n        log_delta_i\n    ], dtype=float)\n\n    # Bounds for parameters\n    lower = [\n        -np.inf,    # L0\n        -20.0,      # logA\n        -20.0,      # logB\n        -5.0,       # log_alpha\n        -5.0,       # log_beta\n        -5.0,       # log_gamma\n        -5.0        # log_delta\n    ]\n    upper = [\n         np.inf,    # L0\n         20.0,      # logA\n         20.0,      # logB\n         5.0,       # log_alpha\n         5.0,       # log_beta\n         5.0,       # log_gamma\n         5.0        # log_delta\n    ]\n\n    # residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # try nonlinear least squares first\n    try:\n        lsq = least_squares(\n            residuals,\n            init,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-12,\n            xtol=1e-12,\n            gtol=1e-8,\n            max_nfev=2000\n        )\n        if lsq.success:\n            return lsq.x\n    except Exception:\n        pass\n\n    # fallback: minimize MSE via L-BFGS-B\n    def mse_obj(p):\n        r = scaling_law_func(X, p) - y\n        return np.mean(r * r)\n\n    result = minimize(\n        mse_obj,\n        init,\n        method='L-BFGS-B',\n        bounds=list(zip(lower, upper)),\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init\n```"]}}}