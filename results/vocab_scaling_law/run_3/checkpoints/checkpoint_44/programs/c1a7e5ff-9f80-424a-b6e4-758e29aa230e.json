{"id": "c1a7e5ff-9f80-424a-b6e4-758e29aa230e", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter log\u2013interaction model:\n      let p = log(P_non_vocab), v = log(vocab_size), d = log(num_characters)\n      then Lossu = b0\n                 + b1*p + b2*v + b3*d\n                 + b4*(p*v) + b5*(p*d) + b6*(v*d)\n    Inputs:\n      data_points: shape (N,3) or (3,) columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [b0, b1, ..., b6]\n    Returns:\n      preds: length-N array of predicted Lossu values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # compute safe logs\n    p = np.log(X[:, 0])\n    v = np.log(X[:, 1])\n    d = np.log(X[:, 2])\n    b = np.asarray(params, dtype=float).ravel()\n    # design matrix: [1, p, v, d, p*v, p*d, v*d]\n    Phi = np.column_stack((\n        np.ones_like(p),\n        p,\n        v,\n        d,\n        p * v,\n        p * d,\n        v * d\n    ))\n    return Phi.dot(b)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013interaction scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # build log features\n    p = np.log(X[:, 0])\n    v = np.log(X[:, 1])\n    d = np.log(X[:, 2])\n    # design matrix same as in scaling_law_func\n    Phi = np.column_stack((\n        np.ones_like(p),\n        p,\n        v,\n        d,\n        p * v,\n        p * d,\n        v * d\n    ))\n    # ridge regularization for stability\n    lam = 1e-6\n    M = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(M)\n    b = Phi.T.dot(y)\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e6005538-50d3-4ef6-8822-1fdf4cefcbfa", "generation": 3, "timestamp": 1754723332.950354, "iteration_found": 41, "metrics": {"nmse": 0.04936582882283771, "nmae": 0.2203663342516727, "r2": 0.9506341711771623, "combined_score": 0.9529565119552105}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.030342558165823166, "nmae": 0.16166167653909813, "r2": 0.9696574418341768, "combined_score": 0.9705509998346201}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0303\n- nmae: 0.1617\n- r2: 0.9697\n- combined_score: 0.9706\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0588, nmae: 0.2200, r2: 0.9412, combined_score: 0.9445\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu = b0 + b1*xp + b2*xv + b3*xd + b4*xp^2 + b5*xv^2 + b6*xd^2\n    This compact form captures curvature while remaining linear in parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Compute log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # Evaluate the quadratic model\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Build log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # Design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # Solve (Phi^T Phi + \u03bbI) p = Phi^T y for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts Lossu given non-vocab parameters, vocabulary size, and\n    number of characters via a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu = b0\n              + b1*xp + b2*xv + b3*xd\n              + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    Inputs:\n      data_points: array of shape (N, 3) or (3,) for a single point,\n                   columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [b0, b1, ..., b6]\n\n    Returns:\n      preds: length-N array of predicted Lossu values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # compute log features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    b = np.asarray(params, dtype=float).ravel()\n    # evaluate quadratic form in log-space\n    return (\n        b[0]\n        + b[1] * xp\n        + b[2] * xv\n        + b[3] * xd\n        + b[4] * xp ** 2\n        + b[5] * xv ** 2\n        + b[6] * xd ** 2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 7-parameter quadratic scaling law by ridge-regularized\n    least squares in log-space. Returns params [b0...b6].\n\n    Inputs:\n      data_points: array of shape (N, 3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array of shape (N,) of observed Lossu values\n\n    Returns:\n      params: length-7 array minimizing squared error\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # build log features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp ** 2, xv ** 2, xd ** 2))\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    # solve for parameters\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 3 (Score: 0.5411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified 7-parameter scaling law for LLM Lossu:\n  Lossu \u2248 bias \u2013 exp( k0\n                     + \u03b1\u00b7log(P_non_vocab)\n                     + \u03b2\u00b7log(num_characters)\n                     + \u03b3\u00b7log(vocab_size)\n                     + \u03b4_d\u00b7[log(num_characters)]\u00b2\n                     + \u03b4_v\u00b7[log(vocab_size)]\u00b2\n                   )\n\nParameters (7):\n  k0      \u2014 base log-scale\n  \u03b1       \u2014 non-vocab param exponent\n  \u03b2       \u2014 data scale exponent\n  \u03b3       \u2014 vocab size exponent\n  \u03b4_d     \u2014 quadratic coeff on log(data scale)\n  \u03b4_v     \u2014 quadratic coeff on log(vocab size)\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P, V, D = X[:,0], X[:,1], X[:,2]\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # unpack params\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias = p.T\n\n    # logs (with small eps for stability)\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logD2 = logD * logD\n    logV2 = logV * logV\n\n    # compute f = k0 + \u03b1\u00b7logP + \u03b2\u00b7logD + \u03b3\u00b7logV + \u03b4_d\u00b7logD\u00b2 + \u03b4_v\u00b7logV\u00b2\n    # f will have shape (N, T) if multiple param sets, else (N,1)\n    f = (\n        k0[None,:]\n        + \u03b1[None,:] * logP[:,None]\n        + \u03b2[None,:] * logD[:,None]\n        + \u03b3[None,:] * logV[:,None]\n        + \u03b4_d[None,:] * logD2[:,None]\n        + \u03b4_v[None,:] * logV2[:,None]\n    )\n\n    # final prediction: bias - exp(f)\n    pred = bias[None,:] - np.exp(f)\n\n    # return (N,) if single param set, else (N,T)\n    return pred[:,0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P, V, D = X[:,0], X[:,1], X[:,2]\n    eps = 1e-12\n\n    # log-features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # target in log-space: Lossu < 0 \u21d2 -y > 0\n    y_log = np.log(np.clip(-y, eps, None))\n\n    # design matrix [1, logP, logD, logV, logD\u00b2, logV\u00b2]\n    A = np.column_stack([\n        np.ones_like(logP), logP, logD, logV, logD**2, logV**2\n    ])\n\n    # least-squares solve for [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v]\n    coeffs, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v = coeffs\n\n    # recover additive bias by matching mean residual in original Lossu space\n    y_pred_no_bias = -np.exp(A.dot(coeffs))\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0588), Performs well on nmae (0.2200), Performs well on r2 (0.9412), Performs well on combined_score (0.9445)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5411)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter log-quadratic scaling law:\n      Lossu \u2248 bias - exp(\n                       k0\n                     + \u03b1 * log(P_non_vocab)\n                     + \u03b2 * log(num_characters)\n                     + \u03b3 * log(vocab_size)\n                     + \u03b4_d * [log(num_characters)]^2\n                     + \u03b4_v * [log(vocab_size)]^2\n                     )\n    data_points: array-like of shape (N,3):\n                 columns = [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 (or shape (T,7) for T parameter sets):\n                 [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias]\n    Returns:     predictions of shape (N,) or (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    # allow a single vector or multiple parameter sets\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # unpack parameters\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias = p.T\n\n    # safe log\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # broadcast to (N, T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n\n    # compute the log-exponent\n    f = (\n        k0[None, :]\n      + \u03b1[None, :] * logP\n      + \u03b2[None, :] * logD\n      + \u03b3[None, :] * logV\n      + \u03b4_d[None, :] * (logD ** 2)\n      + \u03b4_v[None, :] * (logV ** 2)\n    )\n\n    # final prediction\n    pred = bias[None, :] - np.exp(f)\n\n    # if only one parameter set, return shape (N,)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law in closed form:\n      1. Transform Lossu (negative) via y_t = log(-Lossu + eps)\n      2. Build design matrix A = [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve A @ \u03b8 = y_t by least squares \u2192 \u03b8 = [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v]\n      4. Recover bias as the mean residual in original Lossu space.\n    Returns an array [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # safe log\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # design matrix: [1, logP, logD, logV, (logD)^2, (logV)^2]\n    A = np.vstack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD * logD,\n        logV * logV\n    ]).T  # shape (N,6)\n\n    # solve for [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v]\n    \u03b8, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v = \u03b8\n\n    # reconstruct without bias, then compute bias to match mean\n    f_hat = (\n        k0\n      + \u03b1 * logP\n      + \u03b2 * logD\n      + \u03b3 * logV\n      + \u03b4_d * (logD ** 2)\n      + \u03b4_v * (logV ** 2)\n    )\n    y_no_bias = -np.exp(f_hat)\n    bias = np.mean(y - y_no_bias)\n\n    return np.array([k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias], dtype=float)\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning scenarios.\n\nWe use a 7-parameter law of the form:\n   Lossu = L0 + A * P_non_vocab^{-alpha} + B * num_characters^{-beta} + C * vocab_size^{-gamma}\n\nParameters vector (7 entries):\n  params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\nAll amplitudes (A,B,C) and exponents (alpha,beta,gamma) are kept positive via exponentiation,\nwhile L0 is an unconstrained additive bias.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Split features\n    P_non_vocab = X[:, 0]   # non-vocabulary parameter count\n    V           = X[:, 1]   # vocabulary size\n    D           = X[:, 2]   # number of characters processed\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack parameters\n    L0    = p[0]\n    A     = np.exp(p[1])\n    B     = np.exp(p[2])\n    C     = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Predict Lossu\n    return (L0\n            + A * P_non_vocab ** (-alpha)\n            + B * D             ** (-beta)\n            + C * V             ** (-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B.\n    Returns the optimized params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median of target for L0, unit logs for amplitudes, mild exponents\n    L0_init = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # Bounds: L0 free, logs of A/B/C free, exponents in [-10,10]\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-10.0, 10.0), # log_alpha\n        (-10.0, 10.0), # log_beta\n        (-10.0, 10.0)  # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # Mean squared error\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'ftol': 1e-12,\n            'gtol': 1e-8,\n            'maxiter': 5000\n        }\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then Lossu = b0 + b1*xp + b2*xv + b3*xd + b4*xp^2 + b5*xv^2 + b6*xd^2\n    This compact form captures curvature while remaining linear in parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Compute log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    p = np.asarray(params, dtype=float).ravel()\n    # Evaluate the quadratic model\n    return (\n        p[0]\n        + p[1] * xp\n        + p[2] * xv\n        + p[3] * xd\n        + p[4] * xp**2\n        + p[5] * xv**2\n        + p[6] * xd**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # Build log\u2010features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # Design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp**2, xv**2, xd**2))\n    # Solve (Phi^T Phi + \u03bbI) p = Phi^T y for stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5786, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 3 (Score: 0.5520, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law discovery for LLM finetuning scenarios.\n\nWe use a 7-parameter law of the form:\n   Lossu = L0 + A * P_non_vocab^{-alpha} + B * num_characters^{-beta} + C * vocab_size^{-gamma}\n\nParameters vector (7 entries):\n  params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\nAll amplitudes (A,B,C) and exponents (alpha,beta,gamma) are kept positive via exponentiation,\nwhile L0 is an unconstrained additive bias.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # Split features\n    P_non_vocab = X[:, 0]   # non-vocabulary parameter count\n    V           = X[:, 1]   # vocabulary size\n    D           = X[:, 2]   # number of characters processed\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack parameters\n    L0    = p[0]\n    A     = np.exp(p[1])\n    B     = np.exp(p[2])\n    C     = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Predict Lossu\n    return (L0\n            + A * P_non_vocab ** (-alpha)\n            + B * D             ** (-beta)\n            + C * V             ** (-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B.\n    Returns the optimized params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median of target for L0, unit logs for amplitudes, mild exponents\n    L0_init = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # Bounds: L0 free, logs of A/B/C free, exponents in [-10,10]\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-10.0, 10.0), # log_alpha\n        (-10.0, 10.0), # log_beta\n        (-10.0, 10.0)  # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # Mean squared error\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'ftol': 1e-12,\n            'gtol': 1e-8,\n            'maxiter': 5000\n        }\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # Fallback to initialization if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5411, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter log-quadratic scaling law:\n      Lossu \u2248 bias - exp(\n                       k0\n                     + \u03b1 * log(P_non_vocab)\n                     + \u03b2 * log(num_characters)\n                     + \u03b3 * log(vocab_size)\n                     + \u03b4_d * [log(num_characters)]^2\n                     + \u03b4_v * [log(vocab_size)]^2\n                     )\n    data_points: array-like of shape (N,3):\n                 columns = [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 (or shape (T,7) for T parameter sets):\n                 [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias]\n    Returns:     predictions of shape (N,) or (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    # allow a single vector or multiple parameter sets\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # unpack parameters\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias = p.T\n\n    # safe log\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # broadcast to (N, T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n\n    # compute the log-exponent\n    f = (\n        k0[None, :]\n      + \u03b1[None, :] * logP\n      + \u03b2[None, :] * logD\n      + \u03b3[None, :] * logV\n      + \u03b4_d[None, :] * (logD ** 2)\n      + \u03b4_v[None, :] * (logV ** 2)\n    )\n\n    # final prediction\n    pred = bias[None, :] - np.exp(f)\n\n    # if only one parameter set, return shape (N,)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law in closed form:\n      1. Transform Lossu (negative) via y_t = log(-Lossu + eps)\n      2. Build design matrix A = [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve A @ \u03b8 = y_t by least squares \u2192 \u03b8 = [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v]\n      4. Recover bias as the mean residual in original Lossu space.\n    Returns an array [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # safe log\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # design matrix: [1, logP, logD, logV, (logD)^2, (logV)^2]\n    A = np.vstack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD * logD,\n        logV * logV\n    ]).T  # shape (N,6)\n\n    # solve for [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v]\n    \u03b8, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v = \u03b8\n\n    # reconstruct without bias, then compute bias to match mean\n    f_hat = (\n        k0\n      + \u03b1 * logP\n      + \u03b2 * logD\n      + \u03b3 * logV\n      + \u03b4_d * (logD ** 2)\n      + \u03b4_v * (logV ** 2)\n    )\n    y_no_bias = -np.exp(f_hat)\n    bias = np.mean(y - y_no_bias)\n\n    return np.array([k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias], dtype=float)\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5411, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified 7-parameter scaling law for LLM Lossu:\n  Lossu \u2248 bias \u2013 exp( k0\n                     + \u03b1\u00b7log(P_non_vocab)\n                     + \u03b2\u00b7log(num_characters)\n                     + \u03b3\u00b7log(vocab_size)\n                     + \u03b4_d\u00b7[log(num_characters)]\u00b2\n                     + \u03b4_v\u00b7[log(vocab_size)]\u00b2\n                   )\n\nParameters (7):\n  k0      \u2014 base log-scale\n  \u03b1       \u2014 non-vocab param exponent\n  \u03b2       \u2014 data scale exponent\n  \u03b3       \u2014 vocab size exponent\n  \u03b4_d     \u2014 quadratic coeff on log(data scale)\n  \u03b4_v     \u2014 quadratic coeff on log(vocab size)\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P, V, D = X[:,0], X[:,1], X[:,2]\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # unpack params\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias = p.T\n\n    # logs (with small eps for stability)\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logD2 = logD * logD\n    logV2 = logV * logV\n\n    # compute f = k0 + \u03b1\u00b7logP + \u03b2\u00b7logD + \u03b3\u00b7logV + \u03b4_d\u00b7logD\u00b2 + \u03b4_v\u00b7logV\u00b2\n    # f will have shape (N, T) if multiple param sets, else (N,1)\n    f = (\n        k0[None,:]\n        + \u03b1[None,:] * logP[:,None]\n        + \u03b2[None,:] * logD[:,None]\n        + \u03b3[None,:] * logV[:,None]\n        + \u03b4_d[None,:] * logD2[:,None]\n        + \u03b4_v[None,:] * logV2[:,None]\n    )\n\n    # final prediction: bias - exp(f)\n    pred = bias[None,:] - np.exp(f)\n\n    # return (N,) if single param set, else (N,T)\n    return pred[:,0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P, V, D = X[:,0], X[:,1], X[:,2]\n    eps = 1e-12\n\n    # log-features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # target in log-space: Lossu < 0 \u21d2 -y > 0\n    y_log = np.log(np.clip(-y, eps, None))\n\n    # design matrix [1, logP, logD, logV, logD\u00b2, logV\u00b2]\n    A = np.column_stack([\n        np.ones_like(logP), logP, logD, logV, logD**2, logV**2\n    ])\n\n    # least-squares solve for [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v]\n    coeffs, *_ = np.linalg.lstsq(A, y_log, rcond=None)\n    k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v = coeffs\n\n    # recover additive bias by matching mean residual in original Lossu space\n    y_pred_no_bias = -np.exp(A.dot(coeffs))\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts Lossu given non-vocab parameters, vocabulary size, and\n    number of characters via a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab),\n          xv = log(vocab_size),\n          xd = log(num_characters)\n      then\n        Lossu = b0\n              + b1*xp + b2*xv + b3*xd\n              + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    Inputs:\n      data_points: array of shape (N, 3) or (3,) for a single point,\n                   columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [b0, b1, ..., b6]\n\n    Returns:\n      preds: length-N array of predicted Lossu values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # compute log features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    b = np.asarray(params, dtype=float).ravel()\n    # evaluate quadratic form in log-space\n    return (\n        b[0]\n        + b[1] * xp\n        + b[2] * xv\n        + b[3] * xd\n        + b[4] * xp ** 2\n        + b[5] * xv ** 2\n        + b[6] * xd ** 2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 7-parameter quadratic scaling law by ridge-regularized\n    least squares in log-space. Returns params [b0...b6].\n\n    Inputs:\n      data_points: array of shape (N, 3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array of shape (N,) of observed Lossu values\n\n    Returns:\n      params: length-7 array minimizing squared error\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # build log features\n    xp = np.log(X[:, 0])\n    xv = np.log(X[:, 1])\n    xd = np.log(X[:, 2])\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp ** 2, xv ** 2, xd ** 2))\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    P = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(P)\n    b = Phi.T.dot(y)\n    # solve for parameters\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter log\u2013interaction model:\n      let p = log(P_non_vocab), v = log(vocab_size), d = log(num_characters)\n      then Lossu = b0\n                 + b1*p + b2*v + b3*d\n                 + b4*(p*v) + b5*(p*d) + b6*(v*d)\n    Inputs:\n      data_points: shape (N,3) or (3,) columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [b0, b1, ..., b6]\n    Returns:\n      preds: length-N array of predicted Lossu values\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    # compute safe logs\n    p = np.log(X[:, 0])\n    v = np.log(X[:, 1])\n    d = np.log(X[:, 2])\n    b = np.asarray(params, dtype=float).ravel()\n    # design matrix: [1, p, v, d, p*v, p*d, v*d]\n    Phi = np.column_stack((\n        np.ones_like(p),\n        p,\n        v,\n        d,\n        p * v,\n        p * d,\n        v * d\n    ))\n    return Phi.dot(b)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2013interaction scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    # build log features\n    p = np.log(X[:, 0])\n    v = np.log(X[:, 1])\n    d = np.log(X[:, 2])\n    # design matrix same as in scaling_law_func\n    Phi = np.column_stack((\n        np.ones_like(p),\n        p,\n        v,\n        d,\n        p * v,\n        p * d,\n        v * d\n    ))\n    # ridge regularization for stability\n    lam = 1e-6\n    M = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(M)\n    b = Phi.T.dot(y)\n    return np.linalg.solve(A, b)\n# EVOLVE-BLOCK-END\n```"]}}}