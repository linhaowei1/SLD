{"id": "765c03af-5243-4329-a1c7-f516e0a1d1bb", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter additive scaling law for Lossu:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * num_chars^(-beta)\n              + C * vocab_size^(-gamma)\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    We exponentiate the scale factors A, B, C > 0 and the exponents\n    alpha, beta, gamma > 0 via exp(log_\u22c5).\n    \n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_chars]\n      params:      array-like of length 7\n    \n    Returns:\n      preds: array of shape (N,) with predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    L0        = p[0]\n    A         = np.exp(p[1])\n    B         = np.exp(p[2])\n    C         = np.exp(p[3])\n    alpha     = np.exp(p[4])\n    beta      = np.exp(p[5])\n    gamma     = np.exp(p[6])\n\n    # compute each additive term\n    term_P = A * P ** (-alpha)\n    term_D = B * D ** (-beta)\n    term_V = C * V ** (-gamma)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter additive scaling law by minimizing MSE:\n      1. Initialize L0 to the median of observed Lossu.\n      2. Initialize log-scales A,B,C = 0 (\u2192 scale=1) and\n         log-exponents = log(0.5) to start with mild decay.\n      3. Refine all seven parameters with L-BFGS-B.\n    \n    Returns:\n      params_opt: np.ndarray of length 7\n                  [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must match data_points length\")\n\n    # Initial parameter guesses\n    L0_init       = np.median(y)\n    logA_init     = 0.0     # A = 1.0\n    logB_init     = 0.0     # B = 1.0\n    logC_init     = 0.0     # C = 1.0\n    log_alpha_init = np.log(0.5)\n    log_beta_init  = np.log(0.5)\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_init,\n        log_beta_init,\n        log_gamma_init\n    ], dtype=np.float64)\n\n    # Bounds: allow free L0, free scales, exponents in a reasonable range\n    bounds = [\n        (None, None),      # L0\n        (None, None),      # logA\n        (None, None),      # logB\n        (None, None),      # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0)        # log_gamma\n    ]\n\n    # Objective: mean squared error between predicted and observed Lossu\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    # Return optimized parameters or fallback\n    if result.success:\n        return result.x\n    else:\n        return init_params", "language": "python", "parent_id": "58e99d70-bc96-4c36-b27c-e66e820d173c", "generation": 4, "timestamp": 1754723351.4932103, "iteration_found": 45, "metrics": {"nmse": 0.06901108052767926, "nmae": 0.27241197731890066, "r2": 0.9309889194723208, "combined_score": 0.9354439988651806}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 100000.0, "nmae": 100000.0, "r2": -1.0, "combined_score": 0.0, "error": "Prediction failed, is invalid, or has shape mismatch."}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 100000.0000\n- nmae: 100000.0000\n- r2: -1.0000\n- combined_score: 0.0000\n- error: Prediction failed, is invalid, or has shape mismatch.\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0732, nmae: 0.2989, r2: 0.9268, combined_score: 0.9318\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law for Lossu:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * D^(-beta)\n              + C * V^(-gamma)\n    where\n      P_non_vocab = non-vocabulary parameter count\n      D           = number of characters processed\n      V           = vocabulary size\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n\n    We exponentiate the three logs A,B,C > 0 and the three\n    logs log_alpha, log_beta, log_gamma to force the exponents\n    alpha, beta, gamma to be positive.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # compute each term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model to (P_non_vocab, V, D) \u2192 Lossu\n    by minimizing the mean squared error with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure proper shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N = X.shape[0]\n\n    # initial guess\n    # L0 init = median of y\n    L0_init = np.median(y)\n    # A,B,C init = 1.0 \u2192 logA,logB,logC = 0\n    # alpha,beta,gamma init = 0.5 \u2192 log_alpha etc = log(0.5)\n    logA_init = 0.0\n    logB_init = 0.0\n    logC_init = 0.0\n    log_alpha_init = np.log(0.5)\n    log_beta_init  = np.log(0.5)\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_init,\n        log_beta_init,\n        log_gamma_init\n    ], dtype=float)\n\n    # bounds for stability\n    bounds = [\n        (None, None),      # L0\n        (None, None),      # logA\n        (None, None),      # logB\n        (None, None),      # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0),       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 2 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 3 (Score: 0.5577)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nSimplified 7-parameter scaling law for Lossu:\n    Lossu \u2248 bias\n            - exp(\n                  k0\n                + \u03b1\u00b7log(P_non_vocab)\n                + \u03b2\u00b7log(num_characters)\n                + \u03b3\u00b7log(vocab_size)\n                + \u03b4_d\u00b7[log(num_characters)]\u00b2\n                + \u03b4_x\u00b7log(num_characters)\u00b7log(vocab_size)\n              )\n\nParameters (7 total):\n  k0      \u2014 base log\u2010scale intercept\n  \u03b1       \u2014 linear exponent on non\u2010vocab parameters (logP)\n  \u03b2       \u2014 linear exponent on data scale (logD)\n  \u03b3       \u2014 linear exponent on vocab size (logV)\n  \u03b4_d     \u2014 curvature on logD\n  \u03b4_x     \u2014 interaction term between logD and logV\n  bias    \u2014 additive shift on Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given [P_non_vocab, vocab_size, num_characters] and 7 params.\n\n    Inputs:\n      data_points : array-like, shape (N,3)\n      params      : array-like, shape (7,) or (T,7)\n\n    Returns:\n      preds       : shape (N,) or (N,T)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]\n    if p.ndim != 2 or p.shape[1] != 7:\n        raise ValueError(\"params must have shape (7,) or (T,7)\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_x, bias = p.T\n\n    # Safeguard for logs\n    eps = 1e-12\n    logP = np.log(P + eps)     # shape (N,)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Expand for broadcasting: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n\n    k0 = k0[None, :]\n    alpha = alpha[None, :]\n    beta = beta[None, :]\n    gamma = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_x = delta_x[None, :]\n    bias = bias[None, :]\n\n    # Compute exponent f\n    f = (k0\n         + alpha * logP\n         + beta * logD\n         + gamma * logV\n         + delta_d * (logD ** 2)\n         + delta_x * (logD * logV))\n\n    # Final prediction\n    pred = bias - np.exp(f)\n\n    # Return shape (N,) if single param set\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model in closed form:\n      1. y_pos = -Lossu (positive target)\n      2. y_t = log(y_pos + eps)\n      3. Build design matrix A = [1, logP, logD, logV, logD^2, logD\u00b7logV]\n      4. Solve A @ coeffs \u2248 y_t by least squares \u2192 [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_x]\n      5. Recover bias = mean(Lossu - pred_no_bias)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Target transform: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Design matrix: [1, logP, logD, logV, logD^2, logD\u00b7logV]\n    A = np.stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD * logD,\n        logD * logV\n    ], axis=1)  # shape (N,6)\n\n    # Solve least squares for f-coeffs\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_x = coeffs\n\n    # Predict without bias\n    f_hat = A.dot(coeffs)\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover bias to minimize mean residual\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([\n        k0, alpha, beta, gamma, delta_d, delta_x, bias\n    ], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0732), Performs well on nmae (0.2989), Performs well on r2 (0.9268), Performs well on combined_score (0.9318)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5591)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative 5-parameter scaling law:\n      Lossu = bias - exp(k0) * P_non_vocab**alpha * num_chars**beta * vocab_size**gamma\n\n    Inputs:\n      data_points: array-like, shape (N,3) columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 5 = [k0, alpha, beta, gamma, bias]\n\n    Returns:\n      preds: array, shape (N,) predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    k0, alpha, beta, gamma, bias = params\n    # compute the multiplicative term\n    # exp(k0) ensures positivity of the scale\n    scale = np.exp(k0)\n    preds = bias - scale * (P**alpha) * (D**beta) * (V**gamma)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law using a two-stage procedure:\n      1) closed-form log-linear regression to initialize [k0, alpha, beta, gamma]\n      2) an optional L-BFGS-B refinement over all 5 parameters (including bias)\n\n    Returns:\n      params_opt: array, length 5 = [k0, alpha, beta, gamma, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points rows\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # All Lossu values are negative -> -y > 0\n    # Add small epsilon to avoid log(0)\n    eps = 1e-9\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logY = np.log(-y + eps)\n\n    # Design matrix for [k0, alpha, beta, gamma]: logY \u2248 k0 + alpha*logP + beta*logD + gamma*logV\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    # Solve in closed form\n    coeffs, *_ = np.linalg.lstsq(A, logY, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # Initial bias: zero mean residual in original Lossu space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    init_params = np.array([k0_init, alpha_init, beta_init, gamma_init, bias_init], dtype=float)\n\n    # Refine all parameters via L-BFGS-B minimizing MSE\n    def mse_obj(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    # Bounds: leave log-scale and exponents free, bias free\n    bounds = [(None, None)] * 5\n\n    res = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # if optimization fails, return the closed-form solution\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5393)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved 7-parameter scaling law for LLM finetuning:\n  Lossu(P, V, D) = L0 \n                   + A * P^(-alpha) \n                   + B * D^(-beta) \n                   + C * V^(-gamma)\n\nParameters (7 total):\n  L0         \u2014 base offset\n  logA       \u2014 log-scale for non-vocab params term\n  logB       \u2014 log-scale for chars term\n  logC       \u2014 log-scale for vocab term\n  log_alpha  \u2014 log-exponent on P_non_vocab\n  log_beta   \u2014 log-exponent on num_characters\n  log_gamma  \u2014 log-exponent on vocab_size\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 7\n    returns:     predicted Lossu, shape (N,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # unpack parameters\n    L0      = p[0]\n    A       = np.exp(p[1])\n    B       = np.exp(p[2])\n    C       = np.exp(p[3])\n    alpha   = np.exp(p[4])\n    beta    = np.exp(p[5])\n    gamma   = np.exp(p[6])\n\n    # compute scaling law\n    pred = (L0\n            + A * P**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B.\n    Returns the optimized params vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: median baseline, unit log-scales, moderate negative exponents\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,  # L0\n        0.0,      # logA\n        0.0,      # logB\n        0.0,      # logC\n       -1.0,      # log_alpha\n       -1.0,      # log_beta\n       -1.0       # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs in a reasonable range\n    bounds = [\n        (None, None),       # L0\n        (-20.0, 20.0),      # logA\n        (-20.0, 20.0),      # logB\n        (-20.0, 20.0),      # logC\n        (-10.0, 10.0),      # log_alpha\n        (-10.0, 10.0),      # log_beta\n        (-10.0, 10.0)       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback in case optimization fails\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law for Lossu:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * D^(-beta)\n              + C * V^(-gamma)\n    where\n      P_non_vocab = non-vocabulary parameter count\n      D           = number of characters processed\n      V           = vocabulary size\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n\n    We exponentiate the three logs A,B,C > 0 and the three\n    logs log_alpha, log_beta, log_gamma to force the exponents\n    alpha, beta, gamma to be positive.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # compute each term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model to (P_non_vocab, V, D) \u2192 Lossu\n    by minimizing the mean squared error with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure proper shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N = X.shape[0]\n\n    # initial guess\n    # L0 init = median of y\n    L0_init = np.median(y)\n    # A,B,C init = 1.0 \u2192 logA,logB,logC = 0\n    # alpha,beta,gamma init = 0.5 \u2192 log_alpha etc = log(0.5)\n    logA_init = 0.0\n    logB_init = 0.0\n    logC_init = 0.0\n    log_alpha_init = np.log(0.5)\n    log_beta_init  = np.log(0.5)\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_init,\n        log_beta_init,\n        log_gamma_init\n    ], dtype=float)\n\n    # bounds for stability\n    bounds = [\n        (None, None),      # L0\n        (None, None),      # logA\n        (None, None),      # logB\n        (None, None),      # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0),       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 15532989284.4503, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (6214673822698360012800.000), Excellent nmae (62131957137.801), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5786, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5786, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 5 (Score: 0.5591, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multiplicative 5-parameter scaling law:\n      Lossu = bias - exp(k0) * P_non_vocab**alpha * num_chars**beta * vocab_size**gamma\n\n    Inputs:\n      data_points: array-like, shape (N,3) columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 5 = [k0, alpha, beta, gamma, bias]\n\n    Returns:\n      preds: array, shape (N,) predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    k0, alpha, beta, gamma, bias = params\n    # compute the multiplicative term\n    # exp(k0) ensures positivity of the scale\n    scale = np.exp(k0)\n    preds = bias - scale * (P**alpha) * (D**beta) * (V**gamma)\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law using a two-stage procedure:\n      1) closed-form log-linear regression to initialize [k0, alpha, beta, gamma]\n      2) an optional L-BFGS-B refinement over all 5 parameters (including bias)\n\n    Returns:\n      params_opt: array, length 5 = [k0, alpha, beta, gamma, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points rows\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # All Lossu values are negative -> -y > 0\n    # Add small epsilon to avoid log(0)\n    eps = 1e-9\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logY = np.log(-y + eps)\n\n    # Design matrix for [k0, alpha, beta, gamma]: logY \u2248 k0 + alpha*logP + beta*logD + gamma*logV\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    # Solve in closed form\n    coeffs, *_ = np.linalg.lstsq(A, logY, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # Initial bias: zero mean residual in original Lossu space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    init_params = np.array([k0_init, alpha_init, beta_init, gamma_init, bias_init], dtype=float)\n\n    # Refine all parameters via L-BFGS-B minimizing MSE\n    def mse_obj(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    # Bounds: leave log-scale and exponents free, bias free\n    bounds = [(None, None)] * 5\n\n    res = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if res.success:\n        return res.x\n    else:\n        # if optimization fails, return the closed-form solution\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter additive scaling law:\n      Lossu = L0 \n              + A * P_non_vocab^(-alpha)\n              + B * num_chars^(-beta)\n              + C * vocab_size^(-gamma)\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    All A, B, C, alpha, beta, gamma are constrained > 0 by exponentiation.\n    Inputs:\n      data_points: array-like of shape (N,3): [P_non_vocab, vocab_size, num_chars]\n      params:      array-like of length 7\n    Returns:\n      preds: array of shape (N,) predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    L0        = p[0]\n    A         = np.exp(p[1])\n    B         = np.exp(p[2])\n    C         = np.exp(p[3])\n    alpha     = np.exp(p[4])\n    beta      = np.exp(p[5])\n    gamma     = np.exp(p[6])\n\n    # compute each additive term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter additive scaling law via:\n      1) a rapid sequential log-linear initialization for each term,\n      2) a global L-BFGS-B refinement minimizing MSE.\n    Returns:\n      params_opt: ndarray of length 7 = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must match data_points in length\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    eps = 1e-9\n    # 1) Initialize L0 as high-percentile to capture most negative offset\n    L0_init = np.percentile(y, 90)\n    # residual after removing L0\n    resid = y - L0_init  # resid < ~0\n\n    # Helper to fit one term: resid \u2248 -T, with T = scale * X_feat^(-exp)\n    # We do log(-resid) \u2248 log(scale) - exp * log(X_feat)\n    def init_term(x_feat, resid_vec):\n        m = -resid_vec\n        # only keep positive m\n        mask = m > eps\n        if mask.sum() < 5:\n            # fallback defaults\n            return 0.0, 1.0\n        lx = np.log(x_feat[mask] + eps)\n        ly = np.log(m[mask])\n        A = np.stack([np.ones_like(lx), -lx], axis=1)  # [log(scale), exp]\n        coeffs, *_ = np.linalg.lstsq(A, ly, rcond=None)\n        log_scale, exp_term = coeffs\n        return log_scale, exp_term\n\n    # Fit P-term\n    logA_init, alpha_init = init_term(P, resid)\n    # subtract P-term contribution\n    contrib_P = np.exp(logA_init) * P**(-alpha_init)\n    resid -= contrib_P\n\n    # Fit D-term\n    logB_init, beta_init = init_term(D, resid)\n    contrib_D = np.exp(logB_init) * D**(-beta_init)\n    resid -= contrib_D\n\n    # Fit V-term\n    logC_init, gamma_init = init_term(V, resid)\n    # done with sequential init\n\n    init_params = np.array([\n        L0_init,\n        logA_init, logB_init, logC_init,\n        np.log(alpha_init + eps),\n        np.log(beta_init + eps),\n        np.log(gamma_init + eps)\n    ], dtype=np.float64)\n\n    # Bounds: keep logs and exponents in reasonable ranges\n    bounds = [\n        (None, None),       # L0\n        (-30, 30),          # logA\n        (-30, 30),          # logB\n        (-30, 30),          # logC\n        (-5, 5),            # log_alpha\n        (-5, 5),            # log_beta\n        (-5, 5)             # log_gamma\n    ]\n\n    # Objective: mean squared error\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        err = pred - y\n        return np.mean(err * err)\n\n    # Global refinement\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter additive scaling law for Lossu:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * num_chars^(-beta)\n              + C * vocab_size^(-gamma)\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    We exponentiate the scale factors A, B, C > 0 and the exponents\n    alpha, beta, gamma > 0 via exp(log_\u22c5).\n    \n    Inputs:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_chars]\n      params:      array-like of length 7\n    \n    Returns:\n      preds: array of shape (N,) with predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=np.float64).ravel()\n    L0        = p[0]\n    A         = np.exp(p[1])\n    B         = np.exp(p[2])\n    C         = np.exp(p[3])\n    alpha     = np.exp(p[4])\n    beta      = np.exp(p[5])\n    gamma     = np.exp(p[6])\n\n    # compute each additive term\n    term_P = A * P ** (-alpha)\n    term_D = B * D ** (-beta)\n    term_V = C * V ** (-gamma)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter additive scaling law by minimizing MSE:\n      1. Initialize L0 to the median of observed Lossu.\n      2. Initialize log-scales A,B,C = 0 (\u2192 scale=1) and\n         log-exponents = log(0.5) to start with mild decay.\n      3. Refine all seven parameters with L-BFGS-B.\n    \n    Returns:\n      params_opt: np.ndarray of length 7\n                  [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    # Prepare data\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must match data_points length\")\n\n    # Initial parameter guesses\n    L0_init       = np.median(y)\n    logA_init     = 0.0     # A = 1.0\n    logB_init     = 0.0     # B = 1.0\n    logC_init     = 0.0     # C = 1.0\n    log_alpha_init = np.log(0.5)\n    log_beta_init  = np.log(0.5)\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_init,\n        log_beta_init,\n        log_gamma_init\n    ], dtype=np.float64)\n\n    # Bounds: allow free L0, free scales, exponents in a reasonable range\n    bounds = [\n        (None, None),      # L0\n        (None, None),      # logA\n        (None, None),      # logB\n        (None, None),      # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0)        # log_gamma\n    ]\n\n    # Objective: mean squared error between predicted and observed Lossu\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    # Run L-BFGS-B optimization\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 5000}\n    )\n\n    # Return optimized parameters or fallback\n    if result.success:\n        return result.x\n    else:\n        return init_params\n```"]}}}