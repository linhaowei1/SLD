{"id": "80d3d95b-8816-46e8-8f2a-f75cb68abade", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic form in log-space:\n    \n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab))^2\n            + p5*(ln(vocab_size))^2\n            + p6*(ln(num_characters))^2\n\n    This captures non-linear curvature while keeping parameter count at 7.\n    \n    Args:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters], all > 0\n      params:      array\u2010like of length 7\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All data_points entries must be positive\")\n\n    # Log-transform features\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # Quadratic form in log-space\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP ** 2)\n        + p[5] * (lV ** 2)\n        + p[6] * (lD ** 2)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares.\n\n    Args:\n      data_points: array\u2010like of shape (N,3), columns =\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,), the observed Lossu values\n\n    Returns:\n      params: numpy array of shape (7,) with fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(f\"loss_values must be 1D of length {X.shape[0]}, got {y.shape}\")\n\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All data_points entries must be positive\")\n\n    # Compute log-features\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # Design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    Phi = np.column_stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ])  # shape (N,7)\n\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-3\n    A = Phi.T.dot(Phi)\n    R = lam * np.eye(7)\n    R[0, 0] = 0.0\n    A += R\n    b = Phi.T.dot(y)\n\n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "bd94ccf0-53f6-4e6c-b0d1-848a73a2c7fa", "generation": 3, "timestamp": 1754721334.5363936, "iteration_found": 30, "metrics": {"nmse": 1.5744352661038972, "nmae": 1.3911194483452716, "r2": -0.5744352661038972, "combined_score": 0.3884347037839415}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.192632500862975, "nmae": 2.3596245774884803, "r2": -2.192632500862975, "combined_score": 0.2385136307067621}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.1926\n- nmae: 2.3596\n- r2: -2.1926\n- combined_score: 0.2385\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 105851937980.0834, nmae: 424752.3228, r2: -105851937979.0834, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7\u2010parameter log\u2010linear scaling law with interactions:\n    \n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n      data_points: array\u2010like of shape (N,3), columns = \n                   [P_non_vocab, vocab_size, num_characters], all > 0\n      params:      array\u2010like of length 7\n      \n    Returns:\n      preds: numpy array of shape (N,) with predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # log-transform (all inputs strictly positive)\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute interactions\n    lP_lV = lP * lV\n    lP_lD = lP * lD\n    lV_lD = lV * lD\n    \n    # linear combination\n    # params: [p0, p1, p2, p3, p4, p5, p6]\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * lP_lV\n        + p[5] * lP_lD\n        + p[6] * lV_lD\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via ridge\u2010regularized least squares.\n    \n    Args:\n      data_points: array\u2010like of shape (N,3), columns = \n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,), the observed Lossu values\n      \n    Returns:\n      params: numpy array of shape (7,) with fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(f\"loss_values must be 1D of length {X.shape[0]}, got {y.shape}\")\n    \n    # extract features and log-transform\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    N = X.shape[0]\n    # design matrix: intercept, main effects, pairwise interactions\n    Phi = np.column_stack([\n        np.ones(N),  # intercept\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ])  # shape (N,7)\n    \n    # ridge regularization for stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(7)\n    b = Phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n### Program 2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a 7-parameter\n    log-linear form with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6] representing\n            p0 + p1*ln(P_non_vocab)\n               + p2*ln(vocab_size)\n               + p3*ln(num_characters)\n               + p4*(ln(P_non_vocab)*ln(vocab_size))\n               + p5*(ln(P_non_vocab)*ln(num_characters))\n               + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n\n    # log-transform each feature for linearization\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # compute the log-linear model with pairwise interactions\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized\n    least squares in closed form.\n\n    data_points: array-like of shape (N, 3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n\n    Returns: ndarray of length 7\n        Optimized parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # Extract and log-transform features\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n\n    # Build design matrix: [1, lP, lV, lD, lP*lV, lP*lD, lV*lD]\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # Closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI)p = \u03a6\u1d40y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n### Program 3 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nKey features: Performs well on nmse (105851937980.0834), Performs well on nmae (424752.3228), Performs well on r2 (-105851937979.0834), Performs well on combined_score (0.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a 7-parameter\n    log-linear form with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6] representing\n            p0 + p1*ln(P_non_vocab)\n               + p2*ln(vocab_size)\n               + p3*ln(num_characters)\n               + p4*(ln(P_non_vocab)*ln(vocab_size))\n               + p5*(ln(P_non_vocab)*ln(num_characters))\n               + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n\n    # log-transform each feature for linearization\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # compute the log-linear model with pairwise interactions\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized\n    least squares in closed form.\n\n    data_points: array-like of shape (N, 3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n\n    Returns: ndarray of length 7\n        Optimized parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # Extract and log-transform features\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n\n    # Build design matrix: [1, lP, lV, lD, lP*lV, lP*lD, lV*lD]\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # Closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI)p = \u03a6\u1d40y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 2 (Score: 106188.3307, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105851937980.083), Excellent nmae (424752.323)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7\u2010parameter log\u2010linear scaling law with interactions:\n    \n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n      data_points: array\u2010like of shape (N,3), columns = \n                   [P_non_vocab, vocab_size, num_characters], all > 0\n      params:      array\u2010like of length 7\n      \n    Returns:\n      preds: numpy array of shape (N,) with predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # log-transform (all inputs strictly positive)\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute interactions\n    lP_lV = lP * lV\n    lP_lD = lP * lD\n    lV_lD = lV * lD\n    \n    # linear combination\n    # params: [p0, p1, p2, p3, p4, p5, p6]\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * lP_lV\n        + p[5] * lP_lD\n        + p[6] * lV_lD\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law via ridge\u2010regularized least squares.\n    \n    Args:\n      data_points: array\u2010like of shape (N,3), columns = \n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,), the observed Lossu values\n      \n    Returns:\n      params: numpy array of shape (7,) with fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(f\"loss_values must be 1D of length {X.shape[0]}, got {y.shape}\")\n    \n    # extract features and log-transform\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    N = X.shape[0]\n    # design matrix: intercept, main effects, pairwise interactions\n    Phi = np.column_stack([\n        np.ones(N),  # intercept\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ])  # shape (N,7)\n    \n    # ridge regularization for stability\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(7)\n    b = Phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic form in log-space:\n    \n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab))^2\n            + p5*(ln(vocab_size))^2\n            + p6*(ln(num_characters))^2\n\n    This captures non-linear curvature while keeping parameter count at 7.\n    \n    Args:\n      data_points: array\u2010like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters], all > 0\n      params:      array\u2010like of length 7\n\n    Returns:\n      preds: numpy array of shape (N,) with predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All data_points entries must be positive\")\n\n    # Log-transform features\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # Quadratic form in log-space\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP ** 2)\n        + p[5] * (lV ** 2)\n        + p[6] * (lD ** 2)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law via ridge-regularized\n    least squares.\n\n    Args:\n      data_points: array\u2010like of shape (N,3), columns =\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,), the observed Lossu values\n\n    Returns:\n      params: numpy array of shape (7,) with fitted parameters\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(f\"loss_values must be 1D of length {X.shape[0]}, got {y.shape}\")\n\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    D      = X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All data_points entries must be positive\")\n\n    # Compute log-features\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    N = X.shape[0]\n    # Design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    Phi = np.column_stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ])  # shape (N,7)\n\n    # Ridge regularization (no penalty on intercept)\n    lam = 1e-3\n    A = Phi.T.dot(Phi)\n    R = lam * np.eye(7)\n    R[0, 0] = 0.0\n    A += R\n    b = Phi.T.dot(y)\n\n    # Solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}