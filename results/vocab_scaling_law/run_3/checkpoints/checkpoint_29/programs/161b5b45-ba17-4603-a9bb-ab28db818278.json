{"id": "161b5b45-ba17-4603-a9bb-ab28db818278", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu by modeling log(-Lossu) as a linear function of log-features\n    and their pairwise interactions, then exponentiating back.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n        All values must be positive.\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n          Y = p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*ln(P_non_vocab)*ln(vocab_size)\n            + p5*ln(P_non_vocab)*ln(num_characters)\n            + p6*ln(vocab_size)*ln(num_characters)\n        and Lossu = -exp(Y)\n\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # log-transform features\n    lP = np.log(X[:, 0])   # ln(P_non_vocab)\n    lV = np.log(X[:, 1])   # ln(vocab_size)\n    lD = np.log(X[:, 2])   # ln(num_characters)\n\n    # design matrix with intercept, linear logs, and pairwise interactions\n    phi = np.vstack([\n        np.ones_like(lP),    # intercept\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ]).T  # shape (N, 7)\n\n    # linear prediction in log-space, then invert\n    Y = phi.dot(p)\n    return -np.exp(Y)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a 7-parameter scaling law by regressing ln(-Lossu) on log-features\n    and their pairwise interactions, with small ridge regularization.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n        All values must be positive.\n    loss_values: array-like of shape (N,)\n        Observed Lossu values (should be negative in practice).\n\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    N = X.shape[0]\n\n    # We require Lossu < 0 so that -Lossu > 0 for log transformation\n    neg_loss = -y\n    if np.any(neg_loss <= 0):\n        raise ValueError(\"All Lossu values must be strictly negative for this model.\")\n    y_log = np.log(neg_loss)\n\n    # log-transform features\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n\n    # build design matrix: intercept, logs, and pairwise products\n    phi = np.vstack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ]).T  # shape (N, 7)\n\n    # ridge regularization for stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y_log)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b542216c-fd13-4304-b483-13380270e5b5", "generation": 3, "timestamp": 1754721257.261231, "iteration_found": 22, "metrics": {"nmse": 17.174971339820846, "nmae": 5.645180972434386, "r2": -16.174971339820846, "combined_score": 0.055020719499514606}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.4918960103510934, "nmae": 1.3463793306304233, "r2": -0.4918960103510934, "combined_score": 0.40130085519062486}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.4919\n- nmae: 1.3464\n- r2: -0.4919\n- combined_score: 0.4013\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 105851937980.0834, nmae: 424752.3228, r2: -105851937979.0834, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.4919, nmae: 1.3464, r2: -0.4919, combined_score: 0.4013\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6869)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a quadratic log\u2010polynomial model.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that:\n            Lossu \u2248 p0\n                   + p1*ln(P_non_vocab)\n                   + p2*ln(vocab_size)\n                   + p3*ln(num_characters)\n                   + p4*(ln(P_non_vocab))^2\n                   + p5*(ln(vocab_size))^2\n                   + p6*(ln(num_characters))^2\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build feature matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    phi = np.vstack([\n        np.ones_like(lP), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic log\u2010polynomial scaling law via ridge\u2010regularized least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build design matrix with intercept, linear and squared log\u2010terms\n    phi = np.vstack([\n        np.ones(N), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # ridge regularization for numerical stability\n    lam = 1e-4\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.4919), Performs well on nmae (1.3464), Performs well on r2 (-0.4919), Performs well on combined_score (0.4013)\n\n\n### Program 2 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nKey features: Performs well on nmse (105851937980.0834), Performs well on nmae (424752.3228), Performs well on r2 (-105851937979.0834), Performs well on combined_score (0.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 106188.3307, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105851937980.083), Excellent nmae (424752.323)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a quadratic log\u2010polynomial model.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that:\n            Lossu \u2248 p0\n                   + p1*ln(P_non_vocab)\n                   + p2*ln(vocab_size)\n                   + p3*ln(num_characters)\n                   + p4*(ln(P_non_vocab))^2\n                   + p5*(ln(vocab_size))^2\n                   + p6*(ln(num_characters))^2\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build feature matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    phi = np.vstack([\n        np.ones_like(lP), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic log\u2010polynomial scaling law via ridge\u2010regularized least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build design matrix with intercept, linear and squared log\u2010terms\n    phi = np.vstack([\n        np.ones(N), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # ridge regularization for numerical stability\n    lam = 1e-4\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu by modeling log(-Lossu) as a linear function of log-features\n    and their pairwise interactions, then exponentiating back.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n        All values must be positive.\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n          Y = p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*ln(P_non_vocab)*ln(vocab_size)\n            + p5*ln(P_non_vocab)*ln(num_characters)\n            + p6*ln(vocab_size)*ln(num_characters)\n        and Lossu = -exp(Y)\n\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # log-transform features\n    lP = np.log(X[:, 0])   # ln(P_non_vocab)\n    lV = np.log(X[:, 1])   # ln(vocab_size)\n    lD = np.log(X[:, 2])   # ln(num_characters)\n\n    # design matrix with intercept, linear logs, and pairwise interactions\n    phi = np.vstack([\n        np.ones_like(lP),    # intercept\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ]).T  # shape (N, 7)\n\n    # linear prediction in log-space, then invert\n    Y = phi.dot(p)\n    return -np.exp(Y)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit a 7-parameter scaling law by regressing ln(-Lossu) on log-features\n    and their pairwise interactions, with small ridge regularization.\n\n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n        All values must be positive.\n    loss_values: array-like of shape (N,)\n        Observed Lossu values (should be negative in practice).\n\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    N = X.shape[0]\n\n    # We require Lossu < 0 so that -Lossu > 0 for log transformation\n    neg_loss = -y\n    if np.any(neg_loss <= 0):\n        raise ValueError(\"All Lossu values must be strictly negative for this model.\")\n    y_log = np.log(neg_loss)\n\n    # log-transform features\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n\n    # build design matrix: intercept, logs, and pairwise products\n    phi = np.vstack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ]).T  # shape (N, 7)\n\n    # ridge regularization for stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y_log)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}