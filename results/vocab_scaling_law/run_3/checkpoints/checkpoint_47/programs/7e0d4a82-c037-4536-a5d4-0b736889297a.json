{"id": "7e0d4a82-c037-4536-a5d4-0b736889297a", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law for Lossu:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * D^(-beta)\n              + C * V^(-gamma)\n    where\n      P_non_vocab = non-vocabulary parameter count\n      D           = number of characters processed\n      V           = vocabulary size\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n\n    We exponentiate the three logs A,B,C > 0 and the three\n    logs log_alpha, log_beta, log_gamma to force the exponents\n    alpha, beta, gamma to be positive.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # compute each term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model to (P_non_vocab, V, D) \u2192 Lossu\n    by minimizing the mean squared error with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure proper shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N = X.shape[0]\n\n    # initial guess\n    # L0 init = median of y\n    L0_init = np.median(y)\n    # A,B,C init = 1.0 \u2192 logA,logB,logC = 0\n    # alpha,beta,gamma init = 0.5 \u2192 log_alpha etc = log(0.5)\n    logA_init = 0.0\n    logB_init = 0.0\n    logC_init = 0.0\n    log_alpha_init = np.log(0.5)\n    log_beta_init  = np.log(0.5)\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_init,\n        log_beta_init,\n        log_gamma_init\n    ], dtype=float)\n\n    # bounds for stability\n    bounds = [\n        (None, None),      # L0\n        (None, None),      # logA\n        (None, None),      # logB\n        (None, None),      # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0),       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params", "language": "python", "parent_id": "342758e6-1c5b-43ee-9bb5-72a798b2af2a", "generation": 3, "timestamp": 1754723208.903598, "iteration_found": 23, "metrics": {"nmse": 0.06901108052767926, "nmae": 0.27241197731890066, "r2": 0.9309889194723208, "combined_score": 0.9354439988651806}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.3453479162457744, "nmae": 0.48655077358082316, "r2": 0.6546520837542256, "combined_score": 0.7433021510082863}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.3453\n- nmae: 0.4866\n- r2: 0.6547\n- combined_score: 0.7433\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3453, nmae: 0.4866, r2: 0.6547, combined_score: 0.7433\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 2 (Score: 0.5575)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for Lossu:\n    Lossu \u2248 bias\n            - C1 * (P_non_vocab ^ alpha) * (num_characters ^ beta)\n            - C2 * (vocab_size ^ gamma)\n\nWe parametrize\n    logC1, alpha, beta, logC2, gamma, bias\nfor numerical stability (C1, C2 > 0 automatically).\nTotal parameters = 6.\n\nFitting strategy:\n  1) Closed-form linear solve in log-space to get an initial 4-term multiplicative\n     model (like before).\n  2) Split that initial coefficient into two parts for C1 and C2 based on\n     mean feature\u2010values.\n  3) Refine all six parameters jointly with scipy.optimize.least_squares,\n     falling back to the init only if SciPy is not present.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      array of length 6, or shape (T,6) for T fits\n                 [logC1, alpha, beta, logC2, gamma, bias]\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]           # shape (1,6)\n\n    # unpack parameters\n    logC1 = p[:, 0]              # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    logC2 = p[:, 3]\n    gamma = p[:, 4]\n    bias  = p[:, 5]\n\n    # restore positive scale factors\n    C1 = np.exp(logC1)[None, :]   # shape (1,T)\n    C2 = np.exp(logC2)[None, :]\n\n    # compute two power\u2010law terms\n    term_PD = (P[:, None] ** alpha[None, :]) * (D[:, None] ** beta[None, :])\n    term_V  = (V[:, None] ** gamma[None, :])\n\n    # full prediction\n    pred = bias[None, :] - C1 * term_PD - C2 * term_V\n\n    # if single fit return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model [logC1, alpha, beta, logC2, gamma, bias].\n    Uses a closed-form init plus optional scipy.optimize refinement.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # 1) Closed-form multiplicative fit (5 parameters) to get an initial guess\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)     # -y > 0 because Lossu is negative\n\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # recover bias from mean residual in original space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    # 2) Split the single C into two parts C1,C2 so that\n    #    C1*mean(P^\u03b1 D^\u03b2) ~ \u00bd * original term / mean(V^\u03b3)\n    #    C2*mean(V^\u03b3)    ~ \u00bd * original term / mean(P^\u03b1 D^\u03b2)\n    flat_term_PD = P**alpha_init * D**beta_init\n    flat_term_V  = V**gamma_init\n    M1 = np.mean(flat_term_PD) + eps\n    M2 = np.mean(flat_term_V) + eps\n\n    # logC1_init + logC2_init should \u2248 k0_init + log 1.0\n    # we split evenly in log\u2010space with a \u2212log(2)\n    logC1_init = k0_init + np.log(M2) - np.log(2.0)\n    logC2_init = k0_init + np.log(M1) - np.log(2.0)\n\n    init_params = np.array([\n        logC1_init,\n        alpha_init,\n        beta_init,\n        logC2_init,\n        gamma_init,\n        bias_init\n    ], dtype=float)\n\n    # 3) Refine all six parameters with nonlinear least squares (if available)\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        from scipy.optimize import least_squares\n\n        # reasonable bounds: exponents \u22650, \u22643; bias unbounded; logC unbounded\n        lower = [-np.inf, 0.0, 0.0, -np.inf, 0.0, -np.inf]\n        upper = [ np.inf, 3.0, 3.0,  np.inf, 3.0,  np.inf]\n\n        sol = least_squares(\n            _residuals,\n            init_params,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-9,\n            xtol=1e-9,\n            gtol=1e-9,\n        )\n        p_opt = sol.x\n    except Exception:\n        # SciPy not installed or solve failed \u2192 use the closed\u2010form split init\n        p_opt = init_params\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3453), Performs well on nmae (0.4866), Performs well on r2 (0.6547), Performs well on combined_score (0.7433)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5520, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for Lossu:\n    Lossu \u2248 bias\n            - C1 * (P_non_vocab ^ alpha) * (num_characters ^ beta)\n            - C2 * (vocab_size ^ gamma)\n\nWe parametrize\n    logC1, alpha, beta, logC2, gamma, bias\nfor numerical stability (C1, C2 > 0 automatically).\nTotal parameters = 6.\n\nFitting strategy:\n  1) Closed-form linear solve in log-space to get an initial 4-term multiplicative\n     model (like before).\n  2) Split that initial coefficient into two parts for C1 and C2 based on\n     mean feature\u2010values.\n  3) Refine all six parameters jointly with scipy.optimize.least_squares,\n     falling back to the init only if SciPy is not present.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      array of length 6, or shape (T,6) for T fits\n                 [logC1, alpha, beta, logC2, gamma, bias]\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]           # shape (1,6)\n\n    # unpack parameters\n    logC1 = p[:, 0]              # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    logC2 = p[:, 3]\n    gamma = p[:, 4]\n    bias  = p[:, 5]\n\n    # restore positive scale factors\n    C1 = np.exp(logC1)[None, :]   # shape (1,T)\n    C2 = np.exp(logC2)[None, :]\n\n    # compute two power\u2010law terms\n    term_PD = (P[:, None] ** alpha[None, :]) * (D[:, None] ** beta[None, :])\n    term_V  = (V[:, None] ** gamma[None, :])\n\n    # full prediction\n    pred = bias[None, :] - C1 * term_PD - C2 * term_V\n\n    # if single fit return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model [logC1, alpha, beta, logC2, gamma, bias].\n    Uses a closed-form init plus optional scipy.optimize refinement.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # 1) Closed-form multiplicative fit (5 parameters) to get an initial guess\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)     # -y > 0 because Lossu is negative\n\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # recover bias from mean residual in original space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    # 2) Split the single C into two parts C1,C2 so that\n    #    C1*mean(P^\u03b1 D^\u03b2) ~ \u00bd * original term / mean(V^\u03b3)\n    #    C2*mean(V^\u03b3)    ~ \u00bd * original term / mean(P^\u03b1 D^\u03b2)\n    flat_term_PD = P**alpha_init * D**beta_init\n    flat_term_V  = V**gamma_init\n    M1 = np.mean(flat_term_PD) + eps\n    M2 = np.mean(flat_term_V) + eps\n\n    # logC1_init + logC2_init should \u2248 k0_init + log 1.0\n    # we split evenly in log\u2010space with a \u2212log(2)\n    logC1_init = k0_init + np.log(M2) - np.log(2.0)\n    logC2_init = k0_init + np.log(M1) - np.log(2.0)\n\n    init_params = np.array([\n        logC1_init,\n        alpha_init,\n        beta_init,\n        logC2_init,\n        gamma_init,\n        bias_init\n    ], dtype=float)\n\n    # 3) Refine all six parameters with nonlinear least squares (if available)\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        from scipy.optimize import least_squares\n\n        # reasonable bounds: exponents \u22650, \u22643; bias unbounded; logC unbounded\n        lower = [-np.inf, 0.0, 0.0, -np.inf, 0.0, -np.inf]\n        upper = [ np.inf, 3.0, 3.0,  np.inf, 3.0,  np.inf]\n\n        sol = least_squares(\n            _residuals,\n            init_params,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-9,\n            xtol=1e-9,\n            gtol=1e-9,\n        )\n        p_opt = sol.x\n    except Exception:\n        # SciPy not installed or solve failed \u2192 use the closed\u2010form split init\n        p_opt = init_params\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law for Lossu:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * D^(-beta)\n              + C * V^(-gamma)\n    where\n      P_non_vocab = non-vocabulary parameter count\n      D           = number of characters processed\n      V           = vocabulary size\n\n    params = [L0,\n              logA, logB, logC,\n              log_alpha, log_beta, log_gamma]\n\n    We exponentiate the three logs A,B,C > 0 and the three\n    logs log_alpha, log_beta, log_gamma to force the exponents\n    alpha, beta, gamma to be positive.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # compute each term\n    term_P = A * P**(-alpha)\n    term_D = B * D**(-beta)\n    term_V = C * V**(-gamma)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model to (P_non_vocab, V, D) \u2192 Lossu\n    by minimizing the mean squared error with L-BFGS-B.\n    Returns the optimized parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # ensure proper shapes\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    N = X.shape[0]\n\n    # initial guess\n    # L0 init = median of y\n    L0_init = np.median(y)\n    # A,B,C init = 1.0 \u2192 logA,logB,logC = 0\n    # alpha,beta,gamma init = 0.5 \u2192 log_alpha etc = log(0.5)\n    logA_init = 0.0\n    logB_init = 0.0\n    logC_init = 0.0\n    log_alpha_init = np.log(0.5)\n    log_beta_init  = np.log(0.5)\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_alpha_init,\n        log_beta_init,\n        log_gamma_init\n    ], dtype=float)\n\n    # bounds for stability\n    bounds = [\n        (None, None),      # L0\n        (None, None),      # logA\n        (None, None),      # logB\n        (None, None),      # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0),       # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init_params\n```"]}}}