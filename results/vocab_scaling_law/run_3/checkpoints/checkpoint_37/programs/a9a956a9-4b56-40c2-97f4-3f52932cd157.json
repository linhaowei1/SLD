{"id": "a9a956a9-4b56-40c2-97f4-3f52932cd157", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from [P_non_vocab, vocab_size, num_characters] \n    using a 7-parameter log-linear model with pairwise interactions:\n    \n      Lossu \u2248 p0\n             + p1*ln(P_non_vocab)\n             + p2*ln(vocab_size)\n             + p3*ln(num_characters)\n             + p4*(ln(P_non_vocab)*ln(vocab_size))\n             + p5*(ln(P_non_vocab)*ln(num_characters))\n             + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      params: array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 params, got {p.size}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized least squares.\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like, shape (N,)\n        Observed Lossu values.\n    \n    Returns:\n      params: ndarray, length 7\n        Optimized parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X.shape[1]}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    N = X.shape[0]\n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    # ridge penalty for numerical stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7d32ed50-2fec-4ba4-a5ed-b21887374d7e", "generation": 3, "timestamp": 1754721270.055739, "iteration_found": 28, "metrics": {"nmse": 3.192632500862978, "nmae": 2.3596245774884776, "r2": -2.192632500862978, "combined_score": 0.23851363070676196}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 15.130958708363492, "nmae": 4.53135709591138, "r2": -14.130958708363492, "combined_score": 0.06199259560943054}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 15.1310\n- nmae: 4.5314\n- r2: -14.1310\n- combined_score: 0.0620\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 15.1310, nmae: 4.5314, r2: -14.1310, combined_score: 0.0620\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 4.1541, nmae: 2.4251, r2: -3.1541, combined_score: 0.1940\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n### Program 2 (Score: 0.9048)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using an improved log-quadratic model.\n    \n    We use the following 7-parameter form:\n      Lossu \u2248 p0\n             + p1 * lP\n             + p2 * lV\n             + p3 * lD\n             + p4 * (lD)**2\n             + p5 * (lP * lD)\n             + p6 * (lV * lD)\n    where\n      lP = ln(P_non_vocab)\n      lV = ln(vocab_size)\n      lD = ln(num_characters)\n    \n    Inputs:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 7, [p0..p6]\n    Returns:\n      preds: ndarray shape (N,) of predicted Lossu\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 params, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    # numerical safeguard against zero\n    eps = 1e-20\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build feature matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lD),\n        lP,\n        lV,\n        lD,\n        lD * lD,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized least squares.\n    \n    Inputs:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_chars]\n      loss_values: array-like, shape (N,), observed Lossu\n    Returns:\n      params_opt: ndarray length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    eps = 1e-20\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # design matrix\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lD * lD,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # dynamic ridge penalty proportional to trace of \u03c6\u1d40\u03c6\n    cov = phi.T.dot(phi)\n    lam = 1e-4 * np.trace(cov) / cov.shape[0]\n\n    A = cov + lam * np.eye(cov.shape[0])\n    b = phi.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (4.1541), Performs well on nmae (2.4251), Performs well on r2 (-3.1541), Performs well on combined_score (0.1940)\n\n\n### Program 3 (Score: 1.3983)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using an additive power\u2010law form:\n    \n      Lossu \u2248 p0\n             + a1 * (P_non_vocab)**e1\n             + a2 * (vocab_size)**e2\n             + a3 * (num_characters)**e3\n    \n    params: array\u2010like of length 7:\n        [p0, a1, e1, a2, e2, a3, e3]\n    \n    data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    Returns: (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    p0, a1, e1, a2, e2, a3, e3 = p\n\n    P = np.maximum(X[:, 0], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n\n    return p0 + a1 * (P ** e1) + a2 * (V ** e2) + a3 * (D ** e3)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter additive power\u2010law scaling law via non\u2010linear least squares.\n    \n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    loss_values: (N,) array of Lossu\n    Returns: array of length 7 (optimized parameters).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # initialize parameters:\n    #   p0: median of targets\n    #   a_i: scale the max signal\n    #   e_i: modest exponent (0.5)\n    p0_init = np.median(y)\n    signal_span = np.max(y) - p0_init if np.max(y) > p0_init else 1.0\n    # helper: typical feature magnitude\n    def _typ(col):\n        return np.median(col ** 0.5) + 1e-8\n\n    a1_init = signal_span / _typ(X[:, 0])\n    a2_init = signal_span / _typ(X[:, 1])\n    a3_init = signal_span / _typ(X[:, 2])\n    init = np.array([p0_init, a1_init, 0.5, a2_init, 0.5, a3_init, 0.5])\n\n    # enforce non\u2010negative exponents up to a reasonable max\n    lower_bounds = [-np.inf, -np.inf, 0.0, -np.inf, 0.0, -np.inf, 0.0]\n    upper_bounds = [ np.inf,  np.inf, 2.0,  np.inf, 2.0,  np.inf, 2.0]\n\n    def _residuals(params):\n        return scaling_law_func(X, params) - y\n\n    result = least_squares(\n        _residuals,\n        init,\n        bounds=(lower_bounds, upper_bounds),\n        ftol=1e-9,\n        xtol=1e-9,\n        verbose=0\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (15.1310), Performs well on nmae (4.5314), Performs well on r2 (-14.1310), Performs well on combined_score (0.0620)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using an additive power\u2010law form:\n    \n      Lossu \u2248 p0\n             + a1 * (P_non_vocab)**e1\n             + a2 * (vocab_size)**e2\n             + a3 * (num_characters)**e3\n    \n    params: array\u2010like of length 7:\n        [p0, a1, e1, a2, e2, a3, e3]\n    \n    data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    Returns: (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    p0, a1, e1, a2, e2, a3, e3 = p\n\n    P = np.maximum(X[:, 0], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n\n    return p0 + a1 * (P ** e1) + a2 * (V ** e2) + a3 * (D ** e3)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter additive power\u2010law scaling law via non\u2010linear least squares.\n    \n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    loss_values: (N,) array of Lossu\n    Returns: array of length 7 (optimized parameters).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # initialize parameters:\n    #   p0: median of targets\n    #   a_i: scale the max signal\n    #   e_i: modest exponent (0.5)\n    p0_init = np.median(y)\n    signal_span = np.max(y) - p0_init if np.max(y) > p0_init else 1.0\n    # helper: typical feature magnitude\n    def _typ(col):\n        return np.median(col ** 0.5) + 1e-8\n\n    a1_init = signal_span / _typ(X[:, 0])\n    a2_init = signal_span / _typ(X[:, 1])\n    a3_init = signal_span / _typ(X[:, 2])\n    init = np.array([p0_init, a1_init, 0.5, a2_init, 0.5, a3_init, 0.5])\n\n    # enforce non\u2010negative exponents up to a reasonable max\n    lower_bounds = [-np.inf, -np.inf, 0.0, -np.inf, 0.0, -np.inf, 0.0]\n    upper_bounds = [ np.inf,  np.inf, 2.0,  np.inf, 2.0,  np.inf, 2.0]\n\n    def _residuals(params):\n        return scaling_law_func(X, params) - y\n\n    result = least_squares(\n        _residuals,\n        init,\n        bounds=(lower_bounds, upper_bounds),\n        ftol=1e-9,\n        xtol=1e-9,\n        verbose=0\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from [P_non_vocab, vocab_size, num_characters] \n    using a 7-parameter log-linear model with pairwise interactions:\n    \n      Lossu \u2248 p0\n             + p1*ln(P_non_vocab)\n             + p2*ln(vocab_size)\n             + p3*ln(num_characters)\n             + p4*(ln(P_non_vocab)*ln(vocab_size))\n             + p5*(ln(P_non_vocab)*ln(num_characters))\n             + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      params: array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 params, got {p.size}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized least squares.\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like, shape (N,)\n        Observed Lossu values.\n    \n    Returns:\n      params: ndarray, length 7\n        Optimized parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X.shape[1]}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    N = X.shape[0]\n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    # ridge penalty for numerical stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Adopted a simple log-linear form with all pairwise log-interactions (7 parameters) which has shown strong empirical performance.\n- Switched to a closed-form ridge-regularized least\u2010squares fit for numerical stability and speed (no iterative optimizer required).\n- Minimized branches and helper functions for concise, readable code.\n- Ensured all matrix shapes and parameter checks guard against misuse."]}}}