{"id": "eab62d96-7129-4c25-ad06-8c8b97f680b8", "code": "import numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu with a 7\u2010parameter quadratic model in log\u2010space:\n      let lp = log(P_non_vocab), lv = log(vocab_size), ld = log(num_characters)\n      then Lossu = b0 + b1*lp + b2*lv + b3*ld + b4*lp^2 + b5*lv^2 + b6*ld^2\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) or (3,), columns [P_non_vocab, vocab_size, num_characters]\n      params:      sequence of length 7 [b0, b1, ..., b6]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure X is (N,3)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    b = np.asarray(params, dtype=float).ravel()\n    if b.size != 7:\n        raise ValueError(\"params must be length 7\")\n\n    # compute quadratic form in log\u2010space\n    return (\n        b[0]\n        + b[1] * lp\n        + b[2] * lv\n        + b[3] * ld\n        + b[4] * lp**2\n        + b[5] * lv**2\n        + b[6] * ld**2\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic scaling law by ridge\u2010regularized least squares\n    in log\u2010space. Returns params [b0...b6].\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,) of observed Lossu values\n\n    Returns:\n      params: ndarray of length 7 minimizing squared error\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    # design matrix: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp**2,\n        lv**2,\n        ld**2\n    ])\n\n    # small ridge for numerical stability\n    lam = 1e-6\n    M = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(M)\n    b = Phi.T @ y\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params", "language": "python", "parent_id": "e315cf51-5e10-449f-8e2d-2491c7ce4ce5", "generation": 2, "timestamp": 1754723345.3357198, "iteration_found": 43, "metrics": {"nmse": 0.030342558165823166, "nmae": 0.16166167653909813, "r2": 0.9696574418341768, "combined_score": 0.9705509998346201}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.06901119416867157, "nmae": 0.27241113720528354, "r2": 0.9309888058313285, "combined_score": 0.9354438994230189}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0690\n- nmae: 0.2724\n- r2: 0.9310\n- combined_score: 0.9354\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0588, nmae: 0.2200, r2: 0.9412, combined_score: 0.9445\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let lp = log(P_non_vocab), lv = log(vocab_size), ld = log(num_characters)\n      then Lossu = b0 + b1*lp + b2*lv + b3*ld + b4*lp^2 + b5*lv^2 + b6*ld^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # ensure safe logs\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    p = np.asarray(params, dtype=float).ravel()\n    # evaluate the quadratic-in-log model\n    return (\n        p[0]\n        + p[1] * lp\n        + p[2] * lv\n        + p[3] * ld\n        + p[4] * lp**2\n        + p[5] * lv**2\n        + p[6] * ld**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute log\u2010features safely\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    # design matrix: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack((np.ones_like(lp), lp, lv, ld, lp**2, lv**2, ld**2))\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = Phi.T @ Phi + lam * np.eye(Phi.shape[1])\n    b = Phi.T @ y\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab + \u03b5),\n          xv = log(vocab_size   + \u03b5),\n          xd = log(num_characters + \u03b5)\n      then Lossu \u2248 b0\n                  + b1*xp + b2*xv + b3*xd\n                  + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    Inputs:\n      data_points: array-like shape (N,3) or (3,), columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 sequence [b0, b1, ..., b6]\n\n    Returns:\n      preds: length-N array of predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[None, :]\n    # unpack features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # safe logs\n    eps = 1e-12\n    xp = np.log(P + eps)\n    xv = np.log(V + eps)\n    xd = np.log(D + eps)\n\n    b = np.asarray(params, dtype=float).ravel()\n    # compute polynomial in log-space\n    return (\n        b[0]\n        + b[1] * xp\n        + b[2] * xv\n        + b[3] * xd\n        + b[4] * xp ** 2\n        + b[5] * xv ** 2\n        + b[6] * xd ** 2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic scaling law by ridge-regularized\n    least squares in log-space. Returns params [b0...b6].\n\n    Inputs:\n      data_points: array-like shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like shape (N,) of observed Lossu values\n\n    Returns:\n      params: length-7 array minimizing squared error\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # unpack and transform to log-space\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    eps = 1e-12\n    xp = np.log(P + eps)\n    xv = np.log(V + eps)\n    xd = np.log(D + eps)\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp ** 2, xv ** 2, xd ** 2))\n\n    # ridge regularization for stability\n    lam = 1e-6\n    M = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(M)\n    b = Phi.T.dot(y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 3 (Score: 0.5411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training scenarios:\nWe model Lossu (negative improvement over unigram) as:\n\n    Lossu \u2248 bias - exp( k0\n                        + alpha * log(P_non_vocab)\n                        + beta  * log(num_characters)\n                        + gamma * log(vocab_size)\n                        + delta_d * (log(num_characters))^2\n                        + delta_v * (log(vocab_size))^2\n                      )\n\nThis 7-parameter form captures simple power\u2010law behavior plus\nquadratic curvature in log-characters and log-vocab to improve fit \nacross diverse regimes, while remaining numerically stable and \neasy to fit in closed form.\n\nParameters (7 total):\n  k0      \u2014 base log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters (log-linear)\n  beta    \u2014 exponent on number of characters (log-linear)\n  gamma   \u2014 exponent on vocabulary size (log-linear)\n  delta_d \u2014 quadratic coefficient on log(num_characters)\n  delta_v \u2014 quadratic coefficient on log(vocab_size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data scales and fitted parameters.\n\n    Inputs:\n      data_points: array-like shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,) or (T,7)\n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: array shape (N,) if single param vector,\n            or (N,T) if multiple param sets provided.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # Numerical safeguard for log\n    eps = 1e-12\n    logP = np.log(P + eps)            # (N,)\n    logD = np.log(D + eps)            # (N,)\n    logV = np.log(V + eps)            # (N,)\n    logD2 = logD * logD               # (N,)\n    logV2 = logV * logV               # (N,)\n\n    # Expand to (N,T) for vectorized eval\n    # shape manipulations: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n    logD2 = logD2[:, None]\n    logV2 = logV2[:, None]\n\n    k0   = k0[None, :]\n    alpha   = alpha[None, :]\n    beta    = beta[None, :]\n    gamma   = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_v = delta_v[None, :]\n    bias    = bias[None, :]\n\n    # Compute exponent f = k0 + \u03b1 logP + \u03b2 logD + \u03b3 logV + \u03b4_d logD^2 + \u03b4_v logV^2\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * logD2\n         + delta_v * logV2)\n\n    # Final prediction: bias - exp(f)\n    pred = bias - np.exp(f)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu -> y' = log(-Lossu + eps)\n      2. Build design matrix with [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve least squares for linear coefficients [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover additive bias by matching mean residual in original Lossu space\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # Numerical safeguard\n    eps = 1e-12\n\n    # Log-transform features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Transform target: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Build design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.stack([np.ones_like(logP),\n                  logP,\n                  logD,\n                  logV,\n                  logD * logD,\n                  logV * logV],\n                 axis=1)  # shape (N,6)\n\n    # Solve linear least squares: A @ coeffs \u2248 y_t\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # Compute fitted Lossu without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD * logD)\n             + delta_v * (logV * logV))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover additive bias to minimize mean error\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0588), Performs well on nmae (0.2200), Performs well on r2 (0.9412), Performs well on combined_score (0.9445)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 7-parameter scaling law for LLM quality (Lossu).\nWe model Lossu as a sum of three decaying power\u2010law terms plus a constant offset:\n  Lossu(P, V, D) = L0\n                 + A * P^(-alpha)\n                 + B * D^(-beta)\n                 + C * V^(-gamma)\n\nParameters (7 total):\n  L0      \u2014 baseline Lossu (unaffected by P, V, D)\n  logA    \u2014 log-scale for P^(-alpha) term\n  logB    \u2014 log-scale for D^(-beta) term\n  logC    \u2014 log-scale for V^(-gamma) term\n  log\u03b1    \u2014 log of exponent \u03b1 (for P)\n  log\u03b2    \u2014 log of exponent \u03b2 (for D)\n  log\u03b3    \u2014 log of exponent \u03b3 (for V)\n\nAll scale\u2010params (A,B,C) and exponents (\u03b1,\u03b2,\u03b3) are constrained >0 via exp().\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from non-vocab parameters, vocab size, and characters seen.\n    \n    Inputs:\n      data_points: array of shape (N,3) or (3,) with columns [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7: [L0, logA, logB, logC, log\u03b1, log\u03b2, log\u03b3]\n\n    Returns:\n      preds: array of shape (N,) with predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0    = p[0]\n    A     = np.exp(p[1])\n    B     = np.exp(p[2])\n    C     = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # compute each term\n    term_P = A * np.power(P, -alpha)\n    term_D = B * np.power(D, -beta)\n    term_V = C * np.power(V, -gamma)\n\n    preds = L0 + term_P + term_D + term_V\n    return preds if preds.ndim > 0 else preds.item()\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing MSE via L-BFGS-B.\n\n    Inputs:\n      data_points: array of shape (N,3)\n      loss_values: array of shape (N,) with observed Lossu\n\n    Returns:\n      params_opt: array of length 7 with optimized [L0, logA, logB, logC, log\u03b1, log\u03b2, log\u03b3]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: baseline at median Lossu, unit scale for A,B,C, moderate decay exponents\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,   # L0\n        0.0,       # logA => A=1\n        0.0,       # logB => B=1\n        0.0,       # logC => C=1\n        np.log(0.5),  # log\u03b1 => \u03b1\u22480.5\n        np.log(0.5),  # log\u03b2\n        np.log(0.5)   # log\u03b3\n    ], dtype=float)\n\n    # bounds: L0 free, logs for A/B/C free, logs for \u03b1/\u03b2/\u03b3 in [-5,5] for stability\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-5.0, 5.0),   # log\u03b1\n        (-5.0, 5.0),   # log\u03b2\n        (-5.0, 5.0)    # log\u03b3\n    ]\n\n    def mse_obj(p):\n        preds = scaling_law_func(X, p)\n        return np.mean((preds - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let lp = log(P_non_vocab), lv = log(vocab_size), ld = log(num_characters)\n      then Lossu = b0 + b1*lp + b2*lv + b3*ld + b4*lp^2 + b5*lv^2 + b6*ld^2\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # ensure safe logs\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    p = np.asarray(params, dtype=float).ravel()\n    # evaluate the quadratic-in-log model\n    return (\n        p[0]\n        + p[1] * lp\n        + p[2] * lv\n        + p[3] * ld\n        + p[4] * lp**2\n        + p[5] * lv**2\n        + p[6] * ld**2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized\n    least squares. Returns a length\u20107 parameter vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute log\u2010features safely\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    # design matrix: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack((np.ones_like(lp), lp, lv, ld, lp**2, lv**2, ld**2))\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = Phi.T @ Phi + lam * np.eye(Phi.shape[1])\n    b = Phi.T @ y\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.5575, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for Lossu:\n    Lossu \u2248 bias\n            - C1 * (P_non_vocab ^ alpha) * (num_characters ^ beta)\n            - C2 * (vocab_size ^ gamma)\n\nWe parametrize\n    logC1, alpha, beta, logC2, gamma, bias\nfor numerical stability (C1, C2 > 0 automatically).\nTotal parameters = 6.\n\nFitting strategy:\n  1) Closed-form linear solve in log-space to get an initial 4-term multiplicative\n     model (like before).\n  2) Split that initial coefficient into two parts for C1 and C2 based on\n     mean feature\u2010values.\n  3) Refine all six parameters jointly with scipy.optimize.least_squares,\n     falling back to the init only if SciPy is not present.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      array of length 6, or shape (T,6) for T fits\n                 [logC1, alpha, beta, logC2, gamma, bias]\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]           # shape (1,6)\n\n    # unpack parameters\n    logC1 = p[:, 0]              # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    logC2 = p[:, 3]\n    gamma = p[:, 4]\n    bias  = p[:, 5]\n\n    # restore positive scale factors\n    C1 = np.exp(logC1)[None, :]   # shape (1,T)\n    C2 = np.exp(logC2)[None, :]\n\n    # compute two power\u2010law terms\n    term_PD = (P[:, None] ** alpha[None, :]) * (D[:, None] ** beta[None, :])\n    term_V  = (V[:, None] ** gamma[None, :])\n\n    # full prediction\n    pred = bias[None, :] - C1 * term_PD - C2 * term_V\n\n    # if single fit return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model [logC1, alpha, beta, logC2, gamma, bias].\n    Uses a closed-form init plus optional scipy.optimize refinement.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # 1) Closed-form multiplicative fit (5 parameters) to get an initial guess\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)     # -y > 0 because Lossu is negative\n\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # recover bias from mean residual in original space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    # 2) Split the single C into two parts C1,C2 so that\n    #    C1*mean(P^\u03b1 D^\u03b2) ~ \u00bd * original term / mean(V^\u03b3)\n    #    C2*mean(V^\u03b3)    ~ \u00bd * original term / mean(P^\u03b1 D^\u03b2)\n    flat_term_PD = P**alpha_init * D**beta_init\n    flat_term_V  = V**gamma_init\n    M1 = np.mean(flat_term_PD) + eps\n    M2 = np.mean(flat_term_V) + eps\n\n    # logC1_init + logC2_init should \u2248 k0_init + log 1.0\n    # we split evenly in log\u2010space with a \u2212log(2)\n    logC1_init = k0_init + np.log(M2) - np.log(2.0)\n    logC2_init = k0_init + np.log(M1) - np.log(2.0)\n\n    init_params = np.array([\n        logC1_init,\n        alpha_init,\n        beta_init,\n        logC2_init,\n        gamma_init,\n        bias_init\n    ], dtype=float)\n\n    # 3) Refine all six parameters with nonlinear least squares (if available)\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        from scipy.optimize import least_squares\n\n        # reasonable bounds: exponents \u22650, \u22643; bias unbounded; logC unbounded\n        lower = [-np.inf, 0.0, 0.0, -np.inf, 0.0, -np.inf]\n        upper = [ np.inf, 3.0, 3.0,  np.inf, 3.0,  np.inf]\n\n        sol = least_squares(\n            _residuals,\n            init_params,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-9,\n            xtol=1e-9,\n            gtol=1e-9,\n        )\n        p_opt = sol.x\n    except Exception:\n        # SciPy not installed or solve failed \u2192 use the closed\u2010form split init\n        p_opt = init_params\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 3 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter quadratic model in log-space:\n      let xp = log(P_non_vocab + \u03b5),\n          xv = log(vocab_size   + \u03b5),\n          xd = log(num_characters + \u03b5)\n      then Lossu \u2248 b0\n                  + b1*xp + b2*xv + b3*xd\n                  + b4*xp^2 + b5*xv^2 + b6*xd^2\n\n    Inputs:\n      data_points: array-like shape (N,3) or (3,), columns [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 sequence [b0, b1, ..., b6]\n\n    Returns:\n      preds: length-N array of predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D array\n    if X.ndim == 1:\n        X = X[None, :]\n    # unpack features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # safe logs\n    eps = 1e-12\n    xp = np.log(P + eps)\n    xv = np.log(V + eps)\n    xd = np.log(D + eps)\n\n    b = np.asarray(params, dtype=float).ravel()\n    # compute polynomial in log-space\n    return (\n        b[0]\n        + b[1] * xp\n        + b[2] * xv\n        + b[3] * xd\n        + b[4] * xp ** 2\n        + b[5] * xv ** 2\n        + b[6] * xd ** 2\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic scaling law by ridge-regularized\n    least squares in log-space. Returns params [b0...b6].\n\n    Inputs:\n      data_points: array-like shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like shape (N,) of observed Lossu values\n\n    Returns:\n      params: length-7 array minimizing squared error\n    \"\"\"\n    # prepare data\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # unpack and transform to log-space\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    eps = 1e-12\n    xp = np.log(P + eps)\n    xv = np.log(V + eps)\n    xd = np.log(D + eps)\n\n    # design matrix: [1, xp, xv, xd, xp^2, xv^2, xd^2]\n    Phi = np.column_stack((np.ones_like(xp), xp, xv, xd, xp ** 2, xv ** 2, xd ** 2))\n\n    # ridge regularization for stability\n    lam = 1e-6\n    M = Phi.shape[1]\n    A = Phi.T.dot(Phi) + lam * np.eye(M)\n    b = Phi.T.dot(y)\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5411, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training scenarios:\nWe model Lossu (negative improvement over unigram) as:\n\n    Lossu \u2248 bias - exp( k0\n                        + alpha * log(P_non_vocab)\n                        + beta  * log(num_characters)\n                        + gamma * log(vocab_size)\n                        + delta_d * (log(num_characters))^2\n                        + delta_v * (log(vocab_size))^2\n                      )\n\nThis 7-parameter form captures simple power\u2010law behavior plus\nquadratic curvature in log-characters and log-vocab to improve fit \nacross diverse regimes, while remaining numerically stable and \neasy to fit in closed form.\n\nParameters (7 total):\n  k0      \u2014 base log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters (log-linear)\n  beta    \u2014 exponent on number of characters (log-linear)\n  gamma   \u2014 exponent on vocabulary size (log-linear)\n  delta_d \u2014 quadratic coefficient on log(num_characters)\n  delta_v \u2014 quadratic coefficient on log(vocab_size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data scales and fitted parameters.\n\n    Inputs:\n      data_points: array-like shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,) or (T,7)\n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: array shape (N,) if single param vector,\n            or (N,T) if multiple param sets provided.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # Numerical safeguard for log\n    eps = 1e-12\n    logP = np.log(P + eps)            # (N,)\n    logD = np.log(D + eps)            # (N,)\n    logV = np.log(V + eps)            # (N,)\n    logD2 = logD * logD               # (N,)\n    logV2 = logV * logV               # (N,)\n\n    # Expand to (N,T) for vectorized eval\n    # shape manipulations: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n    logD2 = logD2[:, None]\n    logV2 = logV2[:, None]\n\n    k0   = k0[None, :]\n    alpha   = alpha[None, :]\n    beta    = beta[None, :]\n    gamma   = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_v = delta_v[None, :]\n    bias    = bias[None, :]\n\n    # Compute exponent f = k0 + \u03b1 logP + \u03b2 logD + \u03b3 logV + \u03b4_d logD^2 + \u03b4_v logV^2\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * logD2\n         + delta_v * logV2)\n\n    # Final prediction: bias - exp(f)\n    pred = bias - np.exp(f)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu -> y' = log(-Lossu + eps)\n      2. Build design matrix with [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve least squares for linear coefficients [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover additive bias by matching mean residual in original Lossu space\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # Numerical safeguard\n    eps = 1e-12\n\n    # Log-transform features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Transform target: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Build design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.stack([np.ones_like(logP),\n                  logP,\n                  logD,\n                  logV,\n                  logD * logD,\n                  logV * logV],\n                 axis=1)  # shape (N,6)\n\n    # Solve linear least squares: A @ coeffs \u2248 y_t\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # Compute fitted Lossu without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD * logD)\n             + delta_v * (logV * logV))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover additive bias to minimize mean error\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5520, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nRefined 7-parameter scaling law for LLM quality (Lossu).\nWe model Lossu as a sum of three decaying power\u2010law terms plus a constant offset:\n  Lossu(P, V, D) = L0\n                 + A * P^(-alpha)\n                 + B * D^(-beta)\n                 + C * V^(-gamma)\n\nParameters (7 total):\n  L0      \u2014 baseline Lossu (unaffected by P, V, D)\n  logA    \u2014 log-scale for P^(-alpha) term\n  logB    \u2014 log-scale for D^(-beta) term\n  logC    \u2014 log-scale for V^(-gamma) term\n  log\u03b1    \u2014 log of exponent \u03b1 (for P)\n  log\u03b2    \u2014 log of exponent \u03b2 (for D)\n  log\u03b3    \u2014 log of exponent \u03b3 (for V)\n\nAll scale\u2010params (A,B,C) and exponents (\u03b1,\u03b2,\u03b3) are constrained >0 via exp().\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from non-vocab parameters, vocab size, and characters seen.\n    \n    Inputs:\n      data_points: array of shape (N,3) or (3,) with columns [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7: [L0, logA, logB, logC, log\u03b1, log\u03b2, log\u03b3]\n\n    Returns:\n      preds: array of shape (N,) with predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0    = p[0]\n    A     = np.exp(p[1])\n    B     = np.exp(p[2])\n    C     = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # compute each term\n    term_P = A * np.power(P, -alpha)\n    term_D = B * np.power(D, -beta)\n    term_V = C * np.power(V, -gamma)\n\n    preds = L0 + term_P + term_D + term_V\n    return preds if preds.ndim > 0 else preds.item()\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law by minimizing MSE via L-BFGS-B.\n\n    Inputs:\n      data_points: array of shape (N,3)\n      loss_values: array of shape (N,) with observed Lossu\n\n    Returns:\n      params_opt: array of length 7 with optimized [L0, logA, logB, logC, log\u03b1, log\u03b2, log\u03b3]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: baseline at median Lossu, unit scale for A,B,C, moderate decay exponents\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,   # L0\n        0.0,       # logA => A=1\n        0.0,       # logB => B=1\n        0.0,       # logC => C=1\n        np.log(0.5),  # log\u03b1 => \u03b1\u22480.5\n        np.log(0.5),  # log\u03b2\n        np.log(0.5)   # log\u03b3\n    ], dtype=float)\n\n    # bounds: L0 free, logs for A/B/C free, logs for \u03b1/\u03b2/\u03b3 in [-5,5] for stability\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-5.0, 5.0),   # log\u03b1\n        (-5.0, 5.0),   # log\u03b2\n        (-5.0, 5.0)    # log\u03b3\n    ]\n\n    def mse_obj(p):\n        preds = scaling_law_func(X, p)\n        return np.mean((preds - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu with a 7\u2010parameter quadratic model in log\u2010space:\n      let lp = log(P_non_vocab), lv = log(vocab_size), ld = log(num_characters)\n      then Lossu = b0 + b1*lp + b2*lv + b3*ld + b4*lp^2 + b5*lv^2 + b6*ld^2\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3) or (3,), columns [P_non_vocab, vocab_size, num_characters]\n      params:      sequence of length 7 [b0, b1, ..., b6]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure X is (N,3)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    b = np.asarray(params, dtype=float).ravel()\n    if b.size != 7:\n        raise ValueError(\"params must be length 7\")\n\n    # compute quadratic form in log\u2010space\n    return (\n        b[0]\n        + b[1] * lp\n        + b[2] * lv\n        + b[3] * ld\n        + b[4] * lp**2\n        + b[5] * lv**2\n        + b[6] * ld**2\n    )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic scaling law by ridge\u2010regularized least squares\n    in log\u2010space. Returns params [b0...b6].\n\n    Inputs:\n      data_points: array\u2010like of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array\u2010like of shape (N,) of observed Lossu values\n\n    Returns:\n      params: ndarray of length 7 minimizing squared error\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    eps = 1e-12\n    lp = np.log(P + eps)\n    lv = np.log(V + eps)\n    ld = np.log(D + eps)\n\n    # design matrix: [1, lp, lv, ld, lp^2, lv^2, ld^2]\n    Phi = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        lv,\n        ld,\n        lp**2,\n        lv**2,\n        ld**2\n    ])\n\n    # small ridge for numerical stability\n    lam = 1e-6\n    M = Phi.shape[1]\n    A = Phi.T @ Phi + lam * np.eye(M)\n    b = Phi.T @ y\n\n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n```"]}}}