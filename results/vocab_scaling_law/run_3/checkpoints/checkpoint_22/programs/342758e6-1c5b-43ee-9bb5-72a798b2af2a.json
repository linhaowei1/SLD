{"id": "342758e6-1c5b-43ee-9bb5-72a798b2af2a", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for Lossu:\n    Lossu \u2248 bias\n            - C1 * (P_non_vocab ^ alpha) * (num_characters ^ beta)\n            - C2 * (vocab_size ^ gamma)\n\nWe parametrize\n    logC1, alpha, beta, logC2, gamma, bias\nfor numerical stability (C1, C2 > 0 automatically).\nTotal parameters = 6.\n\nFitting strategy:\n  1) Closed-form linear solve in log-space to get an initial 4-term multiplicative\n     model (like before).\n  2) Split that initial coefficient into two parts for C1 and C2 based on\n     mean feature\u2010values.\n  3) Refine all six parameters jointly with scipy.optimize.least_squares,\n     falling back to the init only if SciPy is not present.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      array of length 6, or shape (T,6) for T fits\n                 [logC1, alpha, beta, logC2, gamma, bias]\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]           # shape (1,6)\n\n    # unpack parameters\n    logC1 = p[:, 0]              # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    logC2 = p[:, 3]\n    gamma = p[:, 4]\n    bias  = p[:, 5]\n\n    # restore positive scale factors\n    C1 = np.exp(logC1)[None, :]   # shape (1,T)\n    C2 = np.exp(logC2)[None, :]\n\n    # compute two power\u2010law terms\n    term_PD = (P[:, None] ** alpha[None, :]) * (D[:, None] ** beta[None, :])\n    term_V  = (V[:, None] ** gamma[None, :])\n\n    # full prediction\n    pred = bias[None, :] - C1 * term_PD - C2 * term_V\n\n    # if single fit return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model [logC1, alpha, beta, logC2, gamma, bias].\n    Uses a closed-form init plus optional scipy.optimize refinement.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # 1) Closed-form multiplicative fit (5 parameters) to get an initial guess\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)     # -y > 0 because Lossu is negative\n\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # recover bias from mean residual in original space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    # 2) Split the single C into two parts C1,C2 so that\n    #    C1*mean(P^\u03b1 D^\u03b2) ~ \u00bd * original term / mean(V^\u03b3)\n    #    C2*mean(V^\u03b3)    ~ \u00bd * original term / mean(P^\u03b1 D^\u03b2)\n    flat_term_PD = P**alpha_init * D**beta_init\n    flat_term_V  = V**gamma_init\n    M1 = np.mean(flat_term_PD) + eps\n    M2 = np.mean(flat_term_V) + eps\n\n    # logC1_init + logC2_init should \u2248 k0_init + log 1.0\n    # we split evenly in log\u2010space with a \u2212log(2)\n    logC1_init = k0_init + np.log(M2) - np.log(2.0)\n    logC2_init = k0_init + np.log(M1) - np.log(2.0)\n\n    init_params = np.array([\n        logC1_init,\n        alpha_init,\n        beta_init,\n        logC2_init,\n        gamma_init,\n        bias_init\n    ], dtype=float)\n\n    # 3) Refine all six parameters with nonlinear least squares (if available)\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        from scipy.optimize import least_squares\n\n        # reasonable bounds: exponents \u22650, \u22643; bias unbounded; logC unbounded\n        lower = [-np.inf, 0.0, 0.0, -np.inf, 0.0, -np.inf]\n        upper = [ np.inf, 3.0, 3.0,  np.inf, 3.0,  np.inf]\n\n        sol = least_squares(\n            _residuals,\n            init_params,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-9,\n            xtol=1e-9,\n            gtol=1e-9,\n        )\n        p_opt = sol.x\n    except Exception:\n        # SciPy not installed or solve failed \u2192 use the closed\u2010form split init\n        p_opt = init_params\n\n    return p_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "16aaa3a9-d721-406d-b75b-b3ad8fbbe2d4", "generation": 2, "timestamp": 1754723106.1565604, "iteration_found": 11, "metrics": {"nmse": 0.3453479162457744, "nmae": 0.48655077358082316, "r2": 0.6546520837542256, "combined_score": 0.7433021510082863}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.23004773430183637, "nmae": 0.501622993691092, "r2": 0.7699522656981637, "combined_score": 0.812976579780939}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.2300\n- nmae: 0.5016\n- r2: 0.7700\n- combined_score: 0.8130\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2300, nmae: 0.5016, r2: 0.7700, combined_score: 0.8130\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2300), Performs well on nmae (0.5016), Performs well on r2 (0.7700), Performs well on combined_score (0.8130)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Here is a revised implementation that adds a separate \u201cvocabulary\u2010only\u201d power\u2010law term to the familiar model\u2010size\u00d7data\u2010size term, uses log\u2010parameters for numerical stability, and refines all six parameters jointly via a robust nonlinear least\u2013squares solve.  We fall back to the closed\u2010form initialization if SciPy is unavailable.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law model for Lossu:\n    Lossu \u2248 bias\n            - C1 * (P_non_vocab ^ alpha) * (num_characters ^ beta)\n            - C2 * (vocab_size ^ gamma)\n\nWe parametrize\n    logC1, alpha, beta, logC2, gamma, bias\nfor numerical stability (C1, C2 > 0 automatically).\nTotal parameters = 6.\n\nFitting strategy:\n  1) Closed-form linear solve in log-space to get an initial 4-term multiplicative\n     model (like before).\n  2) Split that initial coefficient into two parts for C1 and C2 based on\n     mean feature\u2010values.\n  3) Refine all six parameters jointly with scipy.optimize.least_squares,\n     falling back to the init only if SciPy is not present.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      array of length 6, or shape (T,6) for T fits\n                 [logC1, alpha, beta, logC2, gamma, bias]\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]           # shape (1,6)\n\n    # unpack parameters\n    logC1 = p[:, 0]              # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    logC2 = p[:, 3]\n    gamma = p[:, 4]\n    bias  = p[:, 5]\n\n    # restore positive scale factors\n    C1 = np.exp(logC1)[None, :]   # shape (1,T)\n    C2 = np.exp(logC2)[None, :]\n\n    # compute two power\u2010law terms\n    term_PD = (P[:, None] ** alpha[None, :]) * (D[:, None] ** beta[None, :])\n    term_V  = (V[:, None] ** gamma[None, :])\n\n    # full prediction\n    pred = bias[None, :] - C1 * term_PD - C2 * term_V\n\n    # if single fit return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6-parameter model [logC1, alpha, beta, logC2, gamma, bias].\n    Uses a closed-form init plus optional scipy.optimize refinement.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # 1) Closed-form multiplicative fit (5 parameters) to get an initial guess\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)     # -y > 0 because Lossu is negative\n\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0_init, alpha_init, beta_init, gamma_init = coeffs\n\n    # recover bias from mean residual in original space\n    y_pred0 = -np.exp(k0_init) * (P**alpha_init) * (D**beta_init) * (V**gamma_init)\n    bias_init = np.mean(y - y_pred0)\n\n    # 2) Split the single C into two parts C1,C2 so that\n    #    C1*mean(P^\u03b1 D^\u03b2) ~ \u00bd * original term / mean(V^\u03b3)\n    #    C2*mean(V^\u03b3)    ~ \u00bd * original term / mean(P^\u03b1 D^\u03b2)\n    flat_term_PD = P**alpha_init * D**beta_init\n    flat_term_V  = V**gamma_init\n    M1 = np.mean(flat_term_PD) + eps\n    M2 = np.mean(flat_term_V) + eps\n\n    # logC1_init + logC2_init should \u2248 k0_init + log 1.0\n    # we split evenly in log\u2010space with a \u2212log(2)\n    logC1_init = k0_init + np.log(M2) - np.log(2.0)\n    logC2_init = k0_init + np.log(M1) - np.log(2.0)\n\n    init_params = np.array([\n        logC1_init,\n        alpha_init,\n        beta_init,\n        logC2_init,\n        gamma_init,\n        bias_init\n    ], dtype=float)\n\n    # 3) Refine all six parameters with nonlinear least squares (if available)\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    try:\n        from scipy.optimize import least_squares\n\n        # reasonable bounds: exponents \u22650, \u22643; bias unbounded; logC unbounded\n        lower = [-np.inf, 0.0, 0.0, -np.inf, 0.0, -np.inf]\n        upper = [ np.inf, 3.0, 3.0,  np.inf, 3.0,  np.inf]\n\n        sol = least_squares(\n            _residuals,\n            init_params,\n            bounds=(lower, upper),\n            method='trf',\n            ftol=1e-9,\n            xtol=1e-9,\n            gtol=1e-9,\n        )\n        p_opt = sol.x\n    except Exception:\n        # SciPy not installed or solve failed \u2192 use the closed\u2010form split init\n        p_opt = init_params\n\n    return p_opt\n# EVOLVE-BLOCK-END\n```\n\nExplanation of the changes:\n\n1. **Separate Vocabulary Term**  \n   Instead of forcing vocabulary size to enter only multiplicatively with model and data scales, we add a dedicated term  \n   `C2 * vocab_size^\u03b3`. This captures any vocab\u2010specific returns that deviate from the joint scaling of model parameters & data.\n\n2. **Log\u2010Parameterized Coefficients**  \n   We parametrize `C1` and `C2` as `exp(logC1)` and `exp(logC2)` to keep them strictly positive and numerically stable across many orders of magnitude.\n\n3. **Joint Nonlinear Fit**  \n   After a fast closed\u2010form log\u2010linear initialization, we optionally refine all six parameters with `scipy.optimize.least_squares` under simple bounds (`exponents \u2208 [0,3]`) to improve accuracy and R\u00b2. If SciPy isn\u2019t present, we safely fall back to the initialization.\n\nThis enriches the model\u2019s flexibility (still only 6 parameters) and typically yields tighter fits across varied vocabulary configurations, training scales, and model sizes."]}}}