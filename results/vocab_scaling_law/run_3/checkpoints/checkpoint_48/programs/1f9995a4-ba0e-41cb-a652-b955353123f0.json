{"id": "1f9995a4-ba0e-41cb-a652-b955353123f0", "code": "import numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data\u2010scale features using a 7\u2010parameter form:\n      Lossu \u2248 c0 \n             + c1 * exp[a*ln(P_non_vocab) + b*ln(num_characters) \u2013 c_exp*ln(vocab_size)]\n             + c2 * (ln(vocab_size))^d\n\n    Args:\n      data_points: array-like of shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      params: array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    # numerical safeguards\n    eps = 1e-12\n    logP = np.log(P_non   + eps)\n    logN = np.log(N_chars + eps)\n    logV = np.log(V       + eps)\n\n    # main exponential term\n    log_term = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term)\n\n    # vocab-size correction term\n    term2 = c2 * (np.maximum(logV, eps) ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Initialization uses a small ridge\u2010regression fit in log\u2010space to seed the exponents,\n    then refines parameters via Huber\u2010loss nonlinear least squares.\n\n    Args:\n      data_points: array-like of shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,)\n        Observed Lossu values.\n\n    Returns:\n      params_opt: ndarray of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Mismatch between number of data points and loss values\")\n\n    # log\u2010transform features with safeguard\n    eps = 1e-12\n    logP = np.log(X[:, 0] + eps)\n    logV = np.log(X[:, 1] + eps)\n    logN = np.log(X[:, 2] + eps)\n\n    # === Ridge init in reduced log\u2010linear space:\n    # Lossu \u2248 c0_lin + a*logP + b*logN - c_exp*logV\n    G = np.vstack([np.ones_like(logP), logP, logN, -logV]).T  # shape (N,4)\n    lam = 1e-4\n    A_lin = G.T.dot(G) + lam * np.eye(4)\n    w_lin = np.linalg.solve(A_lin, G.T.dot(y))\n    c0_lin, a_lin, b_lin, c_exp_lin = w_lin\n\n    # initial guess for full model\n    init = np.array([\n        c0_lin,        # c0 baseline\n        1.0,           # c1 amplitude\n        a_lin,         # a exponent on P_non_vocab\n        b_lin,         # b exponent on num_characters\n        c_exp_lin,     # c_exp exponent on vocab_size (denominator)\n        0.0,           # c2 initial vocab\u2010correction amplitude\n        1.0            # d exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # parameter bounds\n    lower = [-np.inf, -np.inf, -5.0, -5.0, -5.0, -np.inf, 0.0]\n    upper = [ np.inf,  np.inf,  5.0,  5.0,  5.0,  np.inf, 5.0]\n\n    # robust least squares with Huber loss\n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.05,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    # return optimized parameters or fallback\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "a9a956a9-4b56-40c2-97f4-3f52932cd157", "generation": 4, "timestamp": 1754721431.9763856, "iteration_found": 43, "metrics": {"nmse": 0.28277971340380814, "nmae": 0.6457131605980492, "r2": 0.7172202865961919, "combined_score": 0.7795570740252333}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.192632500862978, "nmae": 2.3596245774884776, "r2": -2.192632500862978, "combined_score": 0.23851363070676196}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.1926\n- nmae: 2.3596\n- r2: -2.1926\n- combined_score: 0.2385\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.3290, nmae: 0.6622, r2: 0.6710, combined_score: 0.7524\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.2828, nmae: 0.6457, r2: 0.7172, combined_score: 0.7796\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6063)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a two\u2010term log\u2010stabilized power\u2010law plus a small vocab\u2010size\ncorrection.  To get a robust fit we initialize from a ridge fit in log\u2010space\nand then refine via a Huberized nonlinear least squares.\n\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\nacross wide dynamic ranges, and fits robustly.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns [P_non_vocab, vocab_size, num_characters]\")\n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_chars + eps)\n    logV = np.log(V       + eps)\n\n    # main term in log-space for stability\n    log_term = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term)\n\n    # secondary vocab-size correction (power of logV)\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Initialization uses a ridge regression in log\u2010space to get rough exponents,\n    then we refine with a Huber\u2010loss nonlinear least squares.\n\n    data_points: array of shape (N,3) with columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) of observed Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n\n    # log\u2010transform features\n    eps = 1e-12\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    logP = np.log(P_non   + eps)\n    logV = np.log(V       + eps)\n    logN = np.log(N_chars + eps)\n\n    # === Ridge initialization in reduced log-linear space ===\n    # Model: Lossu \u2248 c0_lin + a*logP + b*logN - c_exp*logV\n    G = np.vstack([np.ones_like(logP), logP, logN, -logV]).T  # shape (N,4)\n    lam = 1e-4\n    A = G.T.dot(G) + lam * np.eye(4)\n    b_vec = G.T.dot(y)\n    w_lin = np.linalg.solve(A, b_vec)\n    c0_lin, a_lin, b_lin, c_exp_lin = w_lin\n\n    # initial guess for full 7\u2010parameter model\n    init = np.array([\n        c0_lin,     # c0 baseline\n        1.0,        # c1 amplitude of main exp term\n        a_lin,      # a  exponent on P_non_vocab\n        b_lin,      # b  exponent on num_characters\n        c_exp_lin,  # c_exp exponent on vocab_size in denom\n        0.0,        # c2 small vocab\u2010correction amplitude\n        1.0         # d  exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds for stability\n    lower = [-np.inf, -np.inf, -5.0, -5.0, -5.0, -np.inf, 0.0]\n    upper = [ np.inf,  np.inf,  5.0,  5.0,  5.0,  np.inf, 5.0]\n\n    # robust Huberized nonlinear least squares\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.05,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010init for safety\n        return init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2828), Performs well on nmae (0.6457), Performs well on r2 (0.7172), Performs well on combined_score (0.7796)\n\n\n### Program 2 (Score: 0.6036)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a 4\u2010term power\u2010law form:\n      Lossu \u2248 p0\n             + a * (P_non_vocab)^(\u2013alpha)\n             + b * (num_characters)^(\u2013beta)\n             + c * (vocab_size)^(\u2013gamma)\n    where params = [p0, a, alpha, b, beta, c, gamma].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    p0, a, alpha, b, beta, c, gamma = p\n\n    # avoid zero or negative inputs for power law\n    P = np.maximum(X[:, 0], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n\n    return p0 + a * (P ** (-alpha)) + b * (D ** (-beta)) + c * (V ** (-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter power\u2010law scaling law via bounded non\u2010linear least squares.\n    Returns params = [p0, a, alpha, b, beta, c, gamma].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {F}\")\n\n    # initial guess for p0 as lower envelope of loss\n    p0_init = np.percentile(y, 10)\n    # residual signal span\n    span = max(np.max(y) - p0_init, 1.0)\n    # initial exponents\n    alpha_init = beta_init = gamma_init = 0.5\n\n    # typical 1/(feature^exponent) scale\n    P = np.maximum(X[:, 0], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n\n    sP = np.median(P ** (-alpha_init)) + 1e-8\n    sD = np.median(D ** (-beta_init))  + 1e-8\n    sV = np.median(V ** (-gamma_init)) + 1e-8\n\n    # split the span roughly equally\n    a_init = span / (3 * sP)\n    b_init = span / (3 * sD)\n    c_init = span / (3 * sV)\n\n    init = np.array([p0_init, a_init, alpha_init, b_init, beta_init, c_init, gamma_init])\n\n    # bounds: p0 free, scale\u2010coeffs \u22650, exponents \u22650\n    lower = [-np.inf,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0]\n    upper = [ np.inf,  np.inf, 5.0, np.inf, 5.0, np.inf, 5.0]\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    res = least_squares(\n        residuals,\n        init,\n        bounds=(lower, upper),\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n        verbose=0\n    )\n    return res.x\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.3290), Performs well on nmae (0.6622), Performs well on r2 (0.6710), Performs well on combined_score (0.7524)\n\n\n### Program 3 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9048)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using an improved log-quadratic model.\n    \n    We use the following 7-parameter form:\n      Lossu \u2248 p0\n             + p1 * lP\n             + p2 * lV\n             + p3 * lD\n             + p4 * (lD)**2\n             + p5 * (lP * lD)\n             + p6 * (lV * lD)\n    where\n      lP = ln(P_non_vocab)\n      lV = ln(vocab_size)\n      lD = ln(num_characters)\n    \n    Inputs:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 7, [p0..p6]\n    Returns:\n      preds: ndarray shape (N,) of predicted Lossu\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 params, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    # numerical safeguard against zero\n    eps = 1e-20\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build feature matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lD),\n        lP,\n        lV,\n        lD,\n        lD * lD,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized least squares.\n    \n    Inputs:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_chars]\n      loss_values: array-like, shape (N,), observed Lossu\n    Returns:\n      params_opt: ndarray length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    eps = 1e-20\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # design matrix\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lD * lD,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # dynamic ridge penalty proportional to trace of \u03c6\u1d40\u03c6\n    cov = phi.T.dot(phi)\n    lam = 1e-4 * np.trace(cov) / cov.shape[0]\n\n    A = cov + lam * np.eye(cov.shape[0])\n    b = phi.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from [P_non_vocab, vocab_size, num_characters] \n    using a 7-parameter log-linear model with pairwise interactions:\n    \n      Lossu \u2248 p0\n             + p1*ln(P_non_vocab)\n             + p2*ln(vocab_size)\n             + p3*ln(num_characters)\n             + p4*(ln(P_non_vocab)*ln(vocab_size))\n             + p5*(ln(P_non_vocab)*ln(num_characters))\n             + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      params: array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 params, got {p.size}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized least squares.\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like, shape (N,)\n        Observed Lossu values.\n    \n    Returns:\n      params: ndarray, length 7\n        Optimized parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X.shape[1]}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    N = X.shape[0]\n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    # ridge penalty for numerical stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6063, Type: Alternative)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a two\u2010term log\u2010stabilized power\u2010law plus a small vocab\u2010size\ncorrection.  To get a robust fit we initialize from a ridge fit in log\u2010space\nand then refine via a Huberized nonlinear least squares.\n\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\nacross wide dynamic ranges, and fits robustly.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns [P_non_vocab, vocab_size, num_characters]\")\n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_chars + eps)\n    logV = np.log(V       + eps)\n\n    # main term in log-space for stability\n    log_term = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term)\n\n    # secondary vocab-size correction (power of logV)\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Initialization uses a ridge regression in log\u2010space to get rough exponents,\n    then we refine with a Huber\u2010loss nonlinear least squares.\n\n    data_points: array of shape (N,3) with columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) of observed Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n\n    # log\u2010transform features\n    eps = 1e-12\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    logP = np.log(P_non   + eps)\n    logV = np.log(V       + eps)\n    logN = np.log(N_chars + eps)\n\n    # === Ridge initialization in reduced log-linear space ===\n    # Model: Lossu \u2248 c0_lin + a*logP + b*logN - c_exp*logV\n    G = np.vstack([np.ones_like(logP), logP, logN, -logV]).T  # shape (N,4)\n    lam = 1e-4\n    A = G.T.dot(G) + lam * np.eye(4)\n    b_vec = G.T.dot(y)\n    w_lin = np.linalg.solve(A, b_vec)\n    c0_lin, a_lin, b_lin, c_exp_lin = w_lin\n\n    # initial guess for full 7\u2010parameter model\n    init = np.array([\n        c0_lin,     # c0 baseline\n        1.0,        # c1 amplitude of main exp term\n        a_lin,      # a  exponent on P_non_vocab\n        b_lin,      # b  exponent on num_characters\n        c_exp_lin,  # c_exp exponent on vocab_size in denom\n        0.0,        # c2 small vocab\u2010correction amplitude\n        1.0         # d  exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds for stability\n    lower = [-np.inf, -np.inf, -5.0, -5.0, -5.0, -np.inf, 0.0]\n    upper = [ np.inf,  np.inf,  5.0,  5.0,  5.0,  np.inf, 5.0]\n\n    # robust Huberized nonlinear least squares\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.05,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010init for safety\n        return init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 1.3983, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using an additive power\u2010law form:\n    \n      Lossu \u2248 p0\n             + a1 * (P_non_vocab)**e1\n             + a2 * (vocab_size)**e2\n             + a3 * (num_characters)**e3\n    \n    params: array\u2010like of length 7:\n        [p0, a1, e1, a2, e2, a3, e3]\n    \n    data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    Returns: (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    p0, a1, e1, a2, e2, a3, e3 = p\n\n    P = np.maximum(X[:, 0], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n\n    return p0 + a1 * (P ** e1) + a2 * (V ** e2) + a3 * (D ** e3)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter additive power\u2010law scaling law via non\u2010linear least squares.\n    \n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    loss_values: (N,) array of Lossu\n    Returns: array of length 7 (optimized parameters).\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # initialize parameters:\n    #   p0: median of targets\n    #   a_i: scale the max signal\n    #   e_i: modest exponent (0.5)\n    p0_init = np.median(y)\n    signal_span = np.max(y) - p0_init if np.max(y) > p0_init else 1.0\n    # helper: typical feature magnitude\n    def _typ(col):\n        return np.median(col ** 0.5) + 1e-8\n\n    a1_init = signal_span / _typ(X[:, 0])\n    a2_init = signal_span / _typ(X[:, 1])\n    a3_init = signal_span / _typ(X[:, 2])\n    init = np.array([p0_init, a1_init, 0.5, a2_init, 0.5, a3_init, 0.5])\n\n    # enforce non\u2010negative exponents up to a reasonable max\n    lower_bounds = [-np.inf, -np.inf, 0.0, -np.inf, 0.0, -np.inf, 0.0]\n    upper_bounds = [ np.inf,  np.inf, 2.0,  np.inf, 2.0,  np.inf, 2.0]\n\n    def _residuals(params):\n        return scaling_law_func(X, params) - y\n\n    result = least_squares(\n        _residuals,\n        init,\n        bounds=(lower_bounds, upper_bounds),\n        ftol=1e-9,\n        xtol=1e-9,\n        verbose=0\n    )\n    return result.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (15.131), Excellent nmae (4.531)\n\n\n### Inspiration 3 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 4 (Score: 0.6036, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data\u2010scale features using a 4\u2010term power\u2010law form:\n      Lossu \u2248 p0\n             + a * (P_non_vocab)^(\u2013alpha)\n             + b * (num_characters)^(\u2013beta)\n             + c * (vocab_size)^(\u2013gamma)\n    where params = [p0, a, alpha, b, beta, c, gamma].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    p0, a, alpha, b, beta, c, gamma = p\n\n    # avoid zero or negative inputs for power law\n    P = np.maximum(X[:, 0], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n\n    return p0 + a * (P ** (-alpha)) + b * (D ** (-beta)) + c * (V ** (-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter power\u2010law scaling law via bounded non\u2010linear least squares.\n    Returns params = [p0, a, alpha, b, beta, c, gamma].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {F}\")\n\n    # initial guess for p0 as lower envelope of loss\n    p0_init = np.percentile(y, 10)\n    # residual signal span\n    span = max(np.max(y) - p0_init, 1.0)\n    # initial exponents\n    alpha_init = beta_init = gamma_init = 0.5\n\n    # typical 1/(feature^exponent) scale\n    P = np.maximum(X[:, 0], 1e-8)\n    D = np.maximum(X[:, 2], 1e-8)\n    V = np.maximum(X[:, 1], 1e-8)\n\n    sP = np.median(P ** (-alpha_init)) + 1e-8\n    sD = np.median(D ** (-beta_init))  + 1e-8\n    sV = np.median(V ** (-gamma_init)) + 1e-8\n\n    # split the span roughly equally\n    a_init = span / (3 * sP)\n    b_init = span / (3 * sD)\n    c_init = span / (3 * sV)\n\n    init = np.array([p0_init, a_init, alpha_init, b_init, beta_init, c_init, gamma_init])\n\n    # bounds: p0 free, scale\u2010coeffs \u22650, exponents \u22650\n    lower = [-np.inf,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0]\n    upper = [ np.inf,  np.inf, 5.0, np.inf, 5.0, np.inf, 5.0]\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    res = least_squares(\n        residuals,\n        init,\n        bounds=(lower, upper),\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000,\n        verbose=0\n    )\n    return res.x\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 5 (Score: 0.9048, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using an improved log-quadratic model.\n    \n    We use the following 7-parameter form:\n      Lossu \u2248 p0\n             + p1 * lP\n             + p2 * lV\n             + p3 * lD\n             + p4 * (lD)**2\n             + p5 * (lP * lD)\n             + p6 * (lV * lD)\n    where\n      lP = ln(P_non_vocab)\n      lV = ln(vocab_size)\n      lD = ln(num_characters)\n    \n    Inputs:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_chars]\n      params:      array-like, length 7, [p0..p6]\n    Returns:\n      preds: ndarray shape (N,) of predicted Lossu\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 params, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    # numerical safeguard against zero\n    eps = 1e-20\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build feature matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lD),\n        lP,\n        lV,\n        lD,\n        lD * lD,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized least squares.\n    \n    Inputs:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_chars]\n      loss_values: array-like, shape (N,), observed Lossu\n    Returns:\n      params_opt: ndarray length 7\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    eps = 1e-20\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # design matrix\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lD * lD,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape (N,7)\n\n    # dynamic ridge penalty proportional to trace of \u03c6\u1d40\u03c6\n    cov = phi.T.dot(phi)\n    lam = 1e-4 * np.trace(cov) / cov.shape[0]\n\n    A = cov + lam * np.eye(cov.shape[0])\n    b = phi.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (4.154), Excellent nmae (2.425)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from [P_non_vocab, vocab_size, num_characters] \n    using a 7-parameter log-linear model with pairwise interactions:\n    \n      Lossu \u2248 p0\n             + p1*ln(P_non_vocab)\n             + p2*ln(vocab_size)\n             + p3*ln(num_characters)\n             + p4*(ln(P_non_vocab)*ln(vocab_size))\n             + p5*(ln(P_non_vocab)*ln(num_characters))\n             + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      params: array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"scaling_law_func expects 7 params, got {p.size}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized least squares.\n    \n    Args:\n      data_points: array-like, shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like, shape (N,)\n        Observed Lossu values.\n    \n    Returns:\n      params: ndarray, length 7\n        Optimized parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[1] != 3:\n        raise ValueError(f\"fit_scaling_law expects data_points with 3 columns, got {X.shape[1]}\")\n    \n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    \n    # log-transform features\n    lP = np.log(P)\n    lV = np.log(V)\n    lD = np.log(D)\n    \n    N = X.shape[0]\n    # build design matrix (N\u00d77)\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)\n    \n    # ridge penalty for numerical stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data\u2010scale features using a 7\u2010parameter form:\n      Lossu \u2248 c0 \n             + c1 * exp[a*ln(P_non_vocab) + b*ln(num_characters) \u2013 c_exp*ln(vocab_size)]\n             + c2 * (ln(vocab_size))^d\n\n    Args:\n      data_points: array-like of shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      params: array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    # numerical safeguards\n    eps = 1e-12\n    logP = np.log(P_non   + eps)\n    logN = np.log(N_chars + eps)\n    logV = np.log(V       + eps)\n\n    # main exponential term\n    log_term = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term)\n\n    # vocab-size correction term\n    term2 = c2 * (np.maximum(logV, eps) ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Initialization uses a small ridge\u2010regression fit in log\u2010space to seed the exponents,\n    then refines parameters via Huber\u2010loss nonlinear least squares.\n\n    Args:\n      data_points: array-like of shape (N,3)\n        Columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,)\n        Observed Lossu values.\n\n    Returns:\n      params_opt: ndarray of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {F}\")\n    if y.size != N:\n        raise ValueError(\"Mismatch between number of data points and loss values\")\n\n    # log\u2010transform features with safeguard\n    eps = 1e-12\n    logP = np.log(X[:, 0] + eps)\n    logV = np.log(X[:, 1] + eps)\n    logN = np.log(X[:, 2] + eps)\n\n    # === Ridge init in reduced log\u2010linear space:\n    # Lossu \u2248 c0_lin + a*logP + b*logN - c_exp*logV\n    G = np.vstack([np.ones_like(logP), logP, logN, -logV]).T  # shape (N,4)\n    lam = 1e-4\n    A_lin = G.T.dot(G) + lam * np.eye(4)\n    w_lin = np.linalg.solve(A_lin, G.T.dot(y))\n    c0_lin, a_lin, b_lin, c_exp_lin = w_lin\n\n    # initial guess for full model\n    init = np.array([\n        c0_lin,        # c0 baseline\n        1.0,           # c1 amplitude\n        a_lin,         # a exponent on P_non_vocab\n        b_lin,         # b exponent on num_characters\n        c_exp_lin,     # c_exp exponent on vocab_size (denominator)\n        0.0,           # c2 initial vocab\u2010correction amplitude\n        1.0            # d exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # parameter bounds\n    lower = [-np.inf, -np.inf, -5.0, -5.0, -5.0, -np.inf, 0.0]\n    upper = [ np.inf,  np.inf,  5.0,  5.0,  5.0,  np.inf, 5.0]\n\n    # robust least squares with Huber loss\n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.05,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    # return optimized parameters or fallback\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```"]}}}