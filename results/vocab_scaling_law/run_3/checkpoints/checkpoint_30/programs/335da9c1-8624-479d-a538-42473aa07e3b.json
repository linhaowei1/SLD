{"id": "335da9c1-8624-479d-a538-42473aa07e3b", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from features [P_non_vocab, vocab_size, num_characters]\n    using a 7-parameter log-linear model with pairwise interactions:\n\n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n\n    Inputs:\n      data_points: array-like, shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, length 7\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be a vector of length 7\")\n    # unpack\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    N_char = X[:, 2]\n    # safe log\n    eps = 1e-12\n    lP = np.log(P_non + eps)\n    lV = np.log(V      + eps)\n    lN = np.log(N_char + eps)\n    # design matrix: intercept + 3 main effects + 3 pairwise interactions\n    F = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lN,\n        lP * lV,\n        lP * lN,\n        lV * lN\n    ], axis=1)  # shape (N,7)\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized least squares.\n\n    Inputs:\n      data_points: array-like, shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like, shape (N,)\n                   observed Lossu values\n\n    Returns:\n      params_opt: ndarray of shape (7,) with fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # unpack and log-transform\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    N_char = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P_non + eps)\n    lV = np.log(V      + eps)\n    lN = np.log(N_char + eps)\n\n    # build design matrix\n    Phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lN,\n        lP * lV,\n        lP * lN,\n        lV * lN\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(7)\n    b = Phi.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d1c4ac80-edea-436b-9c79-a95b0fec0f23", "generation": 1, "timestamp": 1754721280.368902, "iteration_found": 29, "metrics": {"nmse": 3.192632500862975, "nmae": 2.359624577488476, "r2": -2.192632500862975, "combined_score": 0.2385136307067621}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 4.987774572348189e+23, "nmae": 850228850349.9113, "r2": -4.987774572348189e+23, "combined_score": 2.004902157254495e-24}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 498777457234818879193088.0000\n- nmae: 850228850349.9113\n- r2: -498777457234818879193088.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.0940, nmae: 2.3148, r2: -2.0940, combined_score: 0.2443\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.8898)\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis form has exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # linear model in transformed features\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu values\n    via ridge-regularized least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # Unpack and log-transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n    \n    # Closed-form solve: (F^T F + \u03bbI) p = F^T y\n    FT_F = F.T.dot(F)\n    A = FT_F + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    \n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.0940), Performs well on nmae (2.3148), Performs well on r2 (-2.0940), Performs well on combined_score (0.2443)\n\n\n### Program 2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n### Program 3 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.6958)\n```python\n\"\"\"\nEvolved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a saturating power-law form:\n\n  Lossu \u2248 c0 \n        + [ c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp) ]\n          / [ 1 + c2 * (log1p(vocab_size))^d ]\n\nThis form has 7 parameters [c0, c1, a, b, c_exp, c2, d], captures joint\ninteractions, includes a saturation effect with vocabulary size, and is\nnumerically stable thanks to 'log1p' and absolute\u2010value enforcement in\ndenominator terms.  We fit by robust nonlinear least squares (soft L1 loss).\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for N data points given a 7\u2010element parameter vector.\n    \n    data_points: shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: shape (N,) predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    N_chr = X[:, 2]\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # Numerator: joint power law across P_non_vocab and N_chars, modulated by V\n    num = c1 * (P_non ** a) * (N_chr ** b) * (V ** (-c_exp))\n    # Denominator: saturation with vocab_size using log1p for numeric stability\n    denom = 1.0 + np.abs(c2) * (np.log1p(V) ** np.abs(d))\n    \n    return c0 + num / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter saturating power\u2010law model to observed Lossu values.\n    \n    Uses robust least-squares with soft L1 loss to mitigate outliers.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) containing\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # Initial guess: center c0 around median Lossu, modest positive c1, small exponents\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,                   # c0\n        0.5 * (np.max(y) - np.min(y)), # c1\n        0.2,                       # a\n        0.2,                       # b\n        0.2,                       # c_exp\n        0.01,                      # c2\n        1.0                        # d\n    ])\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: enforce nonnegativity on c1, c2, exponents in [-5,5]\n    lower = [-np.inf, 0.0, -5.0, -5.0, -5.0, 0.0, 0.0]\n    upper = [ np.inf, np.inf,  5.0,  5.0,  5.0, np.inf, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=3000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8898, Type: High-Performer)\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis form has exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # linear model in transformed features\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu values\n    via ridge-regularized least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # Unpack and log-transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n    \n    # Closed-form solve: (F^T F + \u03bbI) p = F^T y\n    FT_F = F.T.dot(F)\n    A = FT_F + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    \n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.094), Excellent nmae (2.315)\n\n\n### Inspiration 2 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 3 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 4 (Score: 1.6958, Type: High-Performer)\n```python\n\"\"\"\nEvolved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a saturating power-law form:\n\n  Lossu \u2248 c0 \n        + [ c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp) ]\n          / [ 1 + c2 * (log1p(vocab_size))^d ]\n\nThis form has 7 parameters [c0, c1, a, b, c_exp, c2, d], captures joint\ninteractions, includes a saturation effect with vocabulary size, and is\nnumerically stable thanks to 'log1p' and absolute\u2010value enforcement in\ndenominator terms.  We fit by robust nonlinear least squares (soft L1 loss).\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for N data points given a 7\u2010element parameter vector.\n    \n    data_points: shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: shape (N,) predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    N_chr = X[:, 2]\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # Numerator: joint power law across P_non_vocab and N_chars, modulated by V\n    num = c1 * (P_non ** a) * (N_chr ** b) * (V ** (-c_exp))\n    # Denominator: saturation with vocab_size using log1p for numeric stability\n    denom = 1.0 + np.abs(c2) * (np.log1p(V) ** np.abs(d))\n    \n    return c0 + num / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter saturating power\u2010law model to observed Lossu values.\n    \n    Uses robust least-squares with soft L1 loss to mitigate outliers.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) containing\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # Initial guess: center c0 around median Lossu, modest positive c1, small exponents\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,                   # c0\n        0.5 * (np.max(y) - np.min(y)), # c1\n        0.2,                       # a\n        0.2,                       # b\n        0.2,                       # c_exp\n        0.01,                      # c2\n        1.0                        # d\n    ])\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: enforce nonnegativity on c1, c2, exponents in [-5,5]\n    lower = [-np.inf, 0.0, -5.0, -5.0, -5.0, 0.0, 0.0]\n    upper = [ np.inf, np.inf,  5.0,  5.0,  5.0, np.inf, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=3000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (18.276), Excellent nmae (5.731)\n\n\n### Inspiration 5 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from features [P_non_vocab, vocab_size, num_characters]\n    using a 7-parameter log-linear model with pairwise interactions:\n\n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n\n    Inputs:\n      data_points: array-like, shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, length 7\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be a vector of length 7\")\n    # unpack\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    N_char = X[:, 2]\n    # safe log\n    eps = 1e-12\n    lP = np.log(P_non + eps)\n    lV = np.log(V      + eps)\n    lN = np.log(N_char + eps)\n    # design matrix: intercept + 3 main effects + 3 pairwise interactions\n    F = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lN,\n        lP * lV,\n        lP * lN,\n        lV * lN\n    ], axis=1)  # shape (N,7)\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-linear scaling law via ridge-regularized least squares.\n\n    Inputs:\n      data_points: array-like, shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like, shape (N,)\n                   observed Lossu values\n\n    Returns:\n      params_opt: ndarray of shape (7,) with fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points and loss_values must match\")\n\n    # unpack and log-transform\n    P_non = X[:, 0]\n    V      = X[:, 1]\n    N_char = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P_non + eps)\n    lV = np.log(V      + eps)\n    lN = np.log(N_char + eps)\n\n    # build design matrix\n    Phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lN,\n        lP * lV,\n        lP * lN,\n        lV * lN\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization\n    lam = 1e-6\n    A = Phi.T.dot(Phi) + lam * np.eye(7)\n    b = Phi.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nThis implementation uses only 7 parameters, applies a numerically stable log-linear form with pairwise interactions, and fits them in closed-form via ridge-regularized least squares for improved accuracy and robustness."]}}}