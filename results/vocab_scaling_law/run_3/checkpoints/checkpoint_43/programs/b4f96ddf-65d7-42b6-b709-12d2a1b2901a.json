{"id": "b4f96ddf-65d7-42b6-b709-12d2a1b2901a", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Construct the 7\u2010dimensional design matrix for a quadratic\u2010in\u2010log scaling law:\n      features = [1,\n                  log(P_non_vocab),\n                  log(num_characters),\n                  log(vocab_size),\n                  (log(P_non_vocab))^2,\n                  (log(num_characters))^2,\n                  (log(vocab_size))^2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    # numerical safeguard for logs\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lD = np.log(D + eps)\n    lV = np.log(V + eps)\n    # stack columns: bias, linear logs, quadratic logs\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lD,\n        lV,\n        lP * lP,\n        lD * lD,\n        lV * lV,\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data scales using a 7-parameter quadratic-in-log law:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(num_characters)\n             + a3\u00b7log(vocab_size)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(num_characters)]^2\n             + a6\u00b7[log(vocab_size)]^2\n\n    data_points: array-like, shape (N,3)\n    params:       array-like, shape (7,) or (T,7)\n\n    Returns:\n      preds: shape (N,) if params.shape==(7,),\n             or (N,T) if params.shape==(T,7).\n    \"\"\"\n    Phi = _build_design_matrix(data_points)    # (N,7)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        # single parameter vector\n        if p.shape[0] != 7:\n            raise ValueError(\"params must have length 7\")\n        return Phi.dot(p)\n    elif p.ndim == 2 and p.shape[1] == 7:\n        # multiple parameter vectors\n        # Phi: (N,7), p.T: (7,T) -> (N,T)\n        return Phi.dot(p.T)\n    else:\n        raise ValueError(\"params must have shape (7,) or (T,7)\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized least squares.\n    Returns a length\u20107 parameter vector [a0, a1, a2, a3, a4, a5, a6].\n    \"\"\"\n    # prepare data\n    Phi = _build_design_matrix(data_points)    # (N,7)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # ridge regularization for improved stability/generalization\n    # solve (Phi^T Phi + \u03bb I) p = Phi^T y\n    lam = 1e-8\n    G = Phi.T.dot(Phi)\n    Np = G.shape[0]\n    # add small ridge only to non-bias terms if desired\n    ridge = lam * np.eye(Np, dtype=float)\n    # optionally do not regularize the bias term: ridge[0,0]=0.0\n    ridge[0, 0] = 0.0\n    A = G + ridge\n    b = Phi.T.dot(y)\n    # solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "6c54b093-6e3c-4dcc-8f8e-32dbdf699a65", "generation": 2, "timestamp": 1754723316.5803745, "iteration_found": 39, "metrics": {"nmse": 0.03033951067118133, "nmae": 0.1616576403353673, "r2": 0.9696604893288187, "combined_score": 0.9705538704893326}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.23004773430183637, "nmae": 0.501622993691092, "r2": 0.7699522656981637, "combined_score": 0.812976579780939}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.2300\n- nmae: 0.5016\n- r2: 0.7700\n- combined_score: 0.8130\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0588, nmae: 0.2200, r2: 0.9412, combined_score: 0.9445\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Construct the design matrix for a quadratic-in-log scaling law:\n      features = [1,\n                  log(P_non_vocab),\n                  log(vocab_size),\n                  log(num_characters),\n                  (log(P_non_vocab))^2,\n                  (log(vocab_size))^2,\n                  (log(num_characters))^2]\n    Returns an (N,7) matrix.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # split columns\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    # numerical safeguard against zero\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lD = np.log(D + eps)\n    # stack the seven features\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD,\n    ])\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu values from model/data scales:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(vocab_size)\n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    data_points: array-like, shape (N,3)\n    params:       array-like, shape (7,) or (T,7)\n    returns:      array shape (N,) if params is (7,),\n                  or (N,T) if params is (T,7)\n    \"\"\"\n    Phi = _build_design_matrix(data_points)        # (N,7)\n    p = np.asarray(params, dtype=float)\n    # allow both single-vector and multiple-vecs\n    if p.ndim == 1:\n        return Phi.dot(p)\n    elif p.ndim == 2 and p.shape[1] == 7:\n        # (N,7) dot (7,T) --> (N,T)\n        return Phi.dot(p.T)\n    else:\n        raise ValueError(\"params must have shape (7,) or (T,7)\")\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model by ordinary least squares.\n    Returns a length-7 parameter vector [a0,...,a6].\n    \"\"\"\n    # build design matrix and target vector\n    Phi = _build_design_matrix(data_points)  # (N,7)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n    # solve for params minimizing ||Phi\u00b7params - y||^2\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 3 (Score: 0.5411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training scenarios:\nWe model Lossu (negative improvement over unigram) as:\n\n    Lossu \u2248 bias - exp( k0\n                        + alpha * log(P_non_vocab)\n                        + beta  * log(num_characters)\n                        + gamma * log(vocab_size)\n                        + delta_d * (log(num_characters))^2\n                        + delta_v * (log(vocab_size))^2\n                      )\n\nThis 7-parameter form captures simple power\u2010law behavior plus\nquadratic curvature in log-characters and log-vocab to improve fit \nacross diverse regimes, while remaining numerically stable and \neasy to fit in closed form.\n\nParameters (7 total):\n  k0      \u2014 base log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters (log-linear)\n  beta    \u2014 exponent on number of characters (log-linear)\n  gamma   \u2014 exponent on vocabulary size (log-linear)\n  delta_d \u2014 quadratic coefficient on log(num_characters)\n  delta_v \u2014 quadratic coefficient on log(vocab_size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data scales and fitted parameters.\n\n    Inputs:\n      data_points: array-like shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,) or (T,7)\n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: array shape (N,) if single param vector,\n            or (N,T) if multiple param sets provided.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # Numerical safeguard for log\n    eps = 1e-12\n    logP = np.log(P + eps)            # (N,)\n    logD = np.log(D + eps)            # (N,)\n    logV = np.log(V + eps)            # (N,)\n    logD2 = logD * logD               # (N,)\n    logV2 = logV * logV               # (N,)\n\n    # Expand to (N,T) for vectorized eval\n    # shape manipulations: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n    logD2 = logD2[:, None]\n    logV2 = logV2[:, None]\n\n    k0   = k0[None, :]\n    alpha   = alpha[None, :]\n    beta    = beta[None, :]\n    gamma   = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_v = delta_v[None, :]\n    bias    = bias[None, :]\n\n    # Compute exponent f = k0 + \u03b1 logP + \u03b2 logD + \u03b3 logV + \u03b4_d logD^2 + \u03b4_v logV^2\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * logD2\n         + delta_v * logV2)\n\n    # Final prediction: bias - exp(f)\n    pred = bias - np.exp(f)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu -> y' = log(-Lossu + eps)\n      2. Build design matrix with [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve least squares for linear coefficients [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover additive bias by matching mean residual in original Lossu space\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # Numerical safeguard\n    eps = 1e-12\n\n    # Log-transform features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Transform target: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Build design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.stack([np.ones_like(logP),\n                  logP,\n                  logD,\n                  logV,\n                  logD * logD,\n                  logV * logV],\n                 axis=1)  # shape (N,6)\n\n    # Solve linear least squares: A @ coeffs \u2248 y_t\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # Compute fitted Lossu without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD * logD)\n             + delta_v * (logV * logV))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover additive bias to minimize mean error\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0588), Performs well on nmae (0.2200), Performs well on r2 (0.9412), Performs well on combined_score (0.9445)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predicts Lossu according to a 7-parameter scaling law:\n      Lossu = L0\n              + A * P_non_vocab^(-alpha)\n              + B * num_characters^(-beta)\n              + C * vocab_size^(-gamma)\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      7-element vector [L0, logA, logB, logC,\n                                     log_alpha, log_beta, log_gamma]\n\n    Returns:\n      pred: array of shape (N,), predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0        = p[0]\n    A         = np.exp(p[1])\n    B         = np.exp(p[2])\n    C         = np.exp(p[3])\n    alpha     = np.exp(p[4])\n    beta      = np.exp(p[5])\n    gamma     = np.exp(p[6])\n\n    # compute each term\n    term_P = A * np.power(P, -alpha)\n    term_D = B * np.power(D, -beta)\n    term_V = C * np.power(V, -gamma)\n\n    pred = L0 + term_P + term_D + term_V\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fits the 7-parameter scaling law by minimizing mean squared error via L-BFGS-B.\n\n    Inputs:\n      data_points: array-like of shape (N,3), columns are\n                   [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,), observed Lossu values\n\n    Returns:\n      params_opt: 7-element numpy array of optimized parameters\n                  [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess\n    L0_init    = np.median(y)\n    logA_init  = 0.0\n    logB_init  = 0.0\n    logC_init  = 0.0\n    log_a_init = np.log(1.0)  # exponent ~1\n    log_b_init = np.log(1.0)\n    log_g_init = np.log(1.0)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,\n        logB_init,\n        logC_init,\n        log_a_init,\n        log_b_init,\n        log_g_init\n    ], dtype=float)\n\n    # reasonable bounds\n    bounds = [\n        (None, None),      # L0\n        (-20.0, 20.0),     # logA\n        (-20.0, 20.0),     # logB\n        (-20.0, 20.0),     # logC\n        (-5.0, 5.0),       # log_alpha\n        (-5.0, 5.0),       # log_beta\n        (-5.0, 5.0)        # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Construct the 7\u2010dimensional design matrix for a quadratic\u2010in\u2010log scaling law:\n      features = [1,\n                  log(P_non_vocab),\n                  log(num_characters),\n                  log(vocab_size),\n                  (log(P_non_vocab))^2,\n                  (log(num_characters))^2,\n                  (log(vocab_size))^2]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    # numerical safeguard for logs\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lD = np.log(D + eps)\n    lV = np.log(V + eps)\n    # stack columns: bias, linear logs, quadratic logs\n    return np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lD,\n        lV,\n        lP * lP,\n        lD * lD,\n        lV * lV,\n    ])\n\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data scales using a 7-parameter quadratic-in-log law:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(num_characters)\n             + a3\u00b7log(vocab_size)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(num_characters)]^2\n             + a6\u00b7[log(vocab_size)]^2\n\n    data_points: array-like, shape (N,3)\n    params:       array-like, shape (7,) or (T,7)\n\n    Returns:\n      preds: shape (N,) if params.shape==(7,),\n             or (N,T) if params.shape==(T,7).\n    \"\"\"\n    Phi = _build_design_matrix(data_points)    # (N,7)\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        # single parameter vector\n        if p.shape[0] != 7:\n            raise ValueError(\"params must have length 7\")\n        return Phi.dot(p)\n    elif p.ndim == 2 and p.shape[1] == 7:\n        # multiple parameter vectors\n        # Phi: (N,7), p.T: (7,T) -> (N,T)\n        return Phi.dot(p.T)\n    else:\n        raise ValueError(\"params must have shape (7,) or (T,7)\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic-in-log scaling law by ridge\u2010regularized least squares.\n    Returns a length\u20107 parameter vector [a0, a1, a2, a3, a4, a5, a6].\n    \"\"\"\n    # prepare data\n    Phi = _build_design_matrix(data_points)    # (N,7)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n\n    # ridge regularization for improved stability/generalization\n    # solve (Phi^T Phi + \u03bb I) p = Phi^T y\n    lam = 1e-8\n    G = Phi.T.dot(Phi)\n    Np = G.shape[0]\n    # add small ridge only to non-bias terms if desired\n    ridge = lam * np.eye(Np, dtype=float)\n    # optionally do not regularize the bias term: ridge[0,0]=0.0\n    ridge[0, 0] = 0.0\n    A = G + ridge\n    b = Phi.T.dot(y)\n    # solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}