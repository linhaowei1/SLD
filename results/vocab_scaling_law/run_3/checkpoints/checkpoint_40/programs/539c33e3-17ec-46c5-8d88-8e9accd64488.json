{"id": "539c33e3-17ec-46c5-8d88-8e9accd64488", "code": "\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a two\u2010term log\u2010stabilized power\u2010law plus a small vocab\u2010size\ncorrection.  To get a robust fit we initialize from a ridge fit in log\u2010space\nand then refine via a Huberized nonlinear least squares.\n\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\nacross wide dynamic ranges, and fits robustly.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns [P_non_vocab, vocab_size, num_characters]\")\n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_chars + eps)\n    logV = np.log(V       + eps)\n\n    # main term in log-space for stability\n    log_term = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term)\n\n    # secondary vocab-size correction (power of logV)\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Initialization uses a ridge regression in log\u2010space to get rough exponents,\n    then we refine with a Huber\u2010loss nonlinear least squares.\n\n    data_points: array of shape (N,3) with columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) of observed Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n\n    # log\u2010transform features\n    eps = 1e-12\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    logP = np.log(P_non   + eps)\n    logV = np.log(V       + eps)\n    logN = np.log(N_chars + eps)\n\n    # === Ridge initialization in reduced log-linear space ===\n    # Model: Lossu \u2248 c0_lin + a*logP + b*logN - c_exp*logV\n    G = np.vstack([np.ones_like(logP), logP, logN, -logV]).T  # shape (N,4)\n    lam = 1e-4\n    A = G.T.dot(G) + lam * np.eye(4)\n    b_vec = G.T.dot(y)\n    w_lin = np.linalg.solve(A, b_vec)\n    c0_lin, a_lin, b_lin, c_exp_lin = w_lin\n\n    # initial guess for full 7\u2010parameter model\n    init = np.array([\n        c0_lin,     # c0 baseline\n        1.0,        # c1 amplitude of main exp term\n        a_lin,      # a  exponent on P_non_vocab\n        b_lin,      # b  exponent on num_characters\n        c_exp_lin,  # c_exp exponent on vocab_size in denom\n        0.0,        # c2 small vocab\u2010correction amplitude\n        1.0         # d  exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds for stability\n    lower = [-np.inf, -np.inf, -5.0, -5.0, -5.0, -np.inf, 0.0]\n    upper = [ np.inf,  np.inf,  5.0,  5.0,  5.0,  np.inf, 5.0]\n\n    # robust Huberized nonlinear least squares\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.05,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010init for safety\n        return init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "7344dbe4-fdc8-4e61-990a-d51cde9a4b9f", "generation": 2, "timestamp": 1754721322.635495, "iteration_found": 32, "metrics": {"nmse": 0.28277971340380814, "nmae": 0.6457131605980492, "r2": 0.7172202865961919, "combined_score": 0.7795570740252333}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 105851937980.08342, "nmae": 424752.32280699397, "r2": -105851937979.08342, "combined_score": 9.447158163308337e-12}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 105851937980.0834\n- nmae: 424752.3228\n- r2: -105851937979.0834\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 18.0949, nmae: 5.7008, r2: -17.0949, combined_score: 0.0524\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.0940, nmae: 2.3148, r2: -2.0940, combined_score: 0.2443\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.4919, nmae: 1.3464, r2: -0.4919, combined_score: 0.4013\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6869)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a quadratic log\u2010polynomial model.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that:\n            Lossu \u2248 p0\n                   + p1*ln(P_non_vocab)\n                   + p2*ln(vocab_size)\n                   + p3*ln(num_characters)\n                   + p4*(ln(P_non_vocab))^2\n                   + p5*(ln(vocab_size))^2\n                   + p6*(ln(num_characters))^2\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build feature matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    phi = np.vstack([\n        np.ones_like(lP), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic log\u2010polynomial scaling law via ridge\u2010regularized least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build design matrix with intercept, linear and squared log\u2010terms\n    phi = np.vstack([\n        np.ones(N), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # ridge regularization for numerical stability\n    lam = 1e-4\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.4919), Performs well on nmae (1.3464), Performs well on r2 (-0.4919), Performs well on combined_score (0.4013)\n\n\n### Program 2 (Score: 0.8898)\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis form has exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # linear model in transformed features\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu values\n    via ridge-regularized least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # Unpack and log-transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n    \n    # Closed-form solve: (F^T F + \u03bbI) p = F^T y\n    FT_F = F.T.dot(F)\n    A = FT_F + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    \n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.0940), Performs well on nmae (2.3148), Performs well on r2 (-2.0940), Performs well on combined_score (0.2443)\n\n\n### Program 3 (Score: 1.6883)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe propose a two\u2010term model with log\u2010stabilized power laws plus a small vocab\u2010size correction:\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\n(over a wide dynamic range) and fits robustly via a Huberized nonlinear least\u2010squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# ===================================================================\n# EVOLVE-BLOCK-START\n# ===================================================================\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    N_char= X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # Avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_char + eps)\n    logV = np.log(V + eps)\n\n    # Main power\u2010law term, computed in log\u2010space for stability:\n    #   term1 = c1 * (P_non^a * N_char^b / V^c_exp)\n    log_term1 = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term1)\n\n    # Secondary vocab\u2010size correction (log\u2010powered):\n    #   term2 = c2 * (log(V))^d\n    # clamp logV positive\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Uses a robust Huber loss in scipy.optimize.least_squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # Initial guess:\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,  # c0: baseline\n        1.0,      # c1: amplitude of main term\n        0.5,      # a : exponent on P_non_vocab\n        0.5,      # b : exponent on num_characters\n        0.3,      # c_exp : exponent on vocab_size in denom\n        0.1,      # c2 : amplitude of vocab\u2010size correction\n        1.0       # d  : exponent on log(vocab_size)\n    ], dtype=float)\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds for stability\n    lower_bounds = [\n        -np.inf,      # c0\n        -np.inf,      # c1\n        -5.0,         # a\n        -5.0,         # b\n        -5.0,         # c_exp\n        -np.inf,      # c2\n        0.0           # d  (keep log\u2010power nonnegative)\n    ]\n    upper_bounds = [\n        np.inf,  # c0\n        np.inf,  # c1\n        5.0,     # a\n        5.0,     # b\n        5.0,     # c_exp\n        np.inf,  # c2\n        5.0      # d\n    ]\n\n    # Perform a Huberized least\u2010squares fit for robustness to outliers\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        loss='huber',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return init\n# ===================================================================\n# EVOLVE-BLOCK-END\n# ===================================================================\n```\nKey features: Performs well on nmse (18.0949), Performs well on nmae (5.7008), Performs well on r2 (-17.0949), Performs well on combined_score (0.0524)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6869, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a quadratic log\u2010polynomial model.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that:\n            Lossu \u2248 p0\n                   + p1*ln(P_non_vocab)\n                   + p2*ln(vocab_size)\n                   + p3*ln(num_characters)\n                   + p4*(ln(P_non_vocab))^2\n                   + p5*(ln(vocab_size))^2\n                   + p6*(ln(num_characters))^2\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build feature matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    phi = np.vstack([\n        np.ones_like(lP), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter quadratic log\u2010polynomial scaling law via ridge\u2010regularized least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected 3 features, got {X.shape[1]}\")\n    N = X.shape[0]\n    \n    # log\u2010transform each feature\n    lP = np.log(X[:, 0])\n    lV = np.log(X[:, 1])\n    lD = np.log(X[:, 2])\n    \n    # build design matrix with intercept, linear and squared log\u2010terms\n    phi = np.vstack([\n        np.ones(N), \n        lP, \n        lV, \n        lD, \n        lP * lP, \n        lV * lV, \n        lD * lD\n    ]).T  # shape (N, 7)\n    \n    # ridge regularization for numerical stability\n    lam = 1e-4\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    \n    # solve normal equations\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.492), Excellent nmae (1.346)\n\n\n\n# Current Program\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a two\u2010term log\u2010stabilized power\u2010law plus a small vocab\u2010size\ncorrection.  To get a robust fit we initialize from a ridge fit in log\u2010space\nand then refine via a Huberized nonlinear least squares.\n\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\nacross wide dynamic ranges, and fits robustly.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns [P_non_vocab, vocab_size, num_characters]\")\n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_chars + eps)\n    logV = np.log(V       + eps)\n\n    # main term in log-space for stability\n    log_term = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term)\n\n    # secondary vocab-size correction (power of logV)\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Initialization uses a ridge regression in log\u2010space to get rough exponents,\n    then we refine with a Huber\u2010loss nonlinear least squares.\n\n    data_points: array of shape (N,3) with columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) of observed Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n\n    # log\u2010transform features\n    eps = 1e-12\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    logP = np.log(P_non   + eps)\n    logV = np.log(V       + eps)\n    logN = np.log(N_chars + eps)\n\n    # === Ridge initialization in reduced log-linear space ===\n    # Model: Lossu \u2248 c0_lin + a*logP + b*logN - c_exp*logV\n    G = np.vstack([np.ones_like(logP), logP, logN, -logV]).T  # shape (N,4)\n    lam = 1e-4\n    A = G.T.dot(G) + lam * np.eye(4)\n    b_vec = G.T.dot(y)\n    w_lin = np.linalg.solve(A, b_vec)\n    c0_lin, a_lin, b_lin, c_exp_lin = w_lin\n\n    # initial guess for full 7\u2010parameter model\n    init = np.array([\n        c0_lin,     # c0 baseline\n        1.0,        # c1 amplitude of main exp term\n        a_lin,      # a  exponent on P_non_vocab\n        b_lin,      # b  exponent on num_characters\n        c_exp_lin,  # c_exp exponent on vocab_size in denom\n        0.0,        # c2 small vocab\u2010correction amplitude\n        1.0         # d  exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds for stability\n    lower = [-np.inf, -np.inf, -5.0, -5.0, -5.0, -np.inf, 0.0]\n    upper = [ np.inf,  np.inf,  5.0,  5.0,  5.0,  np.inf, 5.0]\n\n    # robust Huberized nonlinear least squares\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.05,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to linear\u2010init for safety\n        return init\n# EVOLVE-BLOCK-END\n```\n"]}}}