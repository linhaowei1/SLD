{"id": "6638b308-cca7-4bc3-8dce-7b2720b88d3f", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7\u2010parameter log\u2010linear model with pairwise interactions:\n    \n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n        data_points: array-like of shape (N,3)\n                     Columns = [P_non_vocab, vocab_size, num_characters]\n        params:      array-like of length 7 = [p0..p6]\n    \n    Returns:\n        preds: ndarray of shape (N,)\n               Predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:, 0] + eps\n    V      = X[:, 1] + eps\n    D      = X[:, 2] + eps\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # design matrix: intercept, main effects, and all pairwise interactions\n    # shape = (N,7)\n    F = np.column_stack([\n        np.ones_like(lP),    # p0\n        lP,                  # p1\n        lV,                  # p2\n        lD,                  # p3\n        lP * lV,             # p4\n        lP * lD,             # p5\n        lV * lD              # p6\n    ])\n\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear with pairwise interactions scaling law\n    via ridge\u2010regularized least squares.\n    \n    Args:\n        data_points: array-like of shape (N,3)\n                     Columns = [P_non_vocab, vocab_size, num_characters]\n        loss_values: array-like of shape (N,)\n                     Observed Lossu values.\n    \n    Returns:\n        params_opt: ndarray of length 7\n                    Fitted parameters [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:, 0] + eps\n    V      = X[:, 1] + eps\n    D      = X[:, 2] + eps\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # build design matrix as in scaling_law_func\n    F = np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ])  # shape = (N,7)\n\n    # ridge regularization for numerical stability\n    ridge_lambda = 1e-6\n    A = F.T.dot(F) + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n\n    # solve normal equations\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "8ba22c2a-bd48-4522-9001-d8d90870c44f", "generation": 4, "timestamp": 1754721456.3454998, "iteration_found": 49, "metrics": {"nmse": 3.192632500862975, "nmae": 2.359624577488476, "r2": -2.192632500862975, "combined_score": 0.2385136307067621}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.6029977882829716, "nmae": 1.4094300633498522, "r2": -0.6029977882829716, "combined_score": 0.3841724355285123}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.6030\n- nmae: 1.4094\n- r2: -0.6030\n- combined_score: 0.3842\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 1.5732, nmae: 1.3905, r2: -0.5732, combined_score: 0.3886\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 1.4919, nmae: 1.3464, r2: -0.4919, combined_score: 0.4013\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 1.4919, nmae: 1.3464, r2: -0.4919, combined_score: 0.4013\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.6869)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small 7-parameter second-order polynomial\nin the log of each feature:\n\n    Lossu \u2248 p0\n          + p1*ln(P_non_vocab)\n          + p2*ln(vocab_size)\n          + p3*ln(num_characters)\n          + p4*[ln(P_non_vocab)]^2\n          + p5*[ln(vocab_size)]^2\n          + p6*[ln(num_characters)]^2\n\nThis form is linear in the transformed features, admits a closed-form\nridge solution for stability, and uses only 7 parameters.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a 7-parameter\n    second-order polynomial in log-space.\n\n    Args:\n      data_points: array-like, shape (N,3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n      params: array-like of length 7\n        Model parameters [p0..p6].\n\n    Returns:\n      preds: ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack features\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    D     = X[:, 2]\n\n    # safe log-transform\n    eps = 1e-12\n    lP = np.log(P_non + eps)\n    lV = np.log(V       + eps)\n    lD = np.log(D       + eps)\n\n    # build design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    F = np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP*lP,\n        lV*lV,\n        lD*lD\n    ])\n\n    # linear combination\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter second-order polynomial-in-log scaling law\n    to observed Lossu via closed-form ridge regression.\n\n    Args:\n      data_points: array-like, shape (N,3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n      loss_values: array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns:\n      params_opt: ndarray of shape (7,)\n        Fitted parameters [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # unpack and log-transform\n    eps = 1e-12\n    lP = np.log(X[:, 0] + eps)\n    lV = np.log(X[:, 1] + eps)\n    lD = np.log(X[:, 2] + eps)\n\n    # design matrix\n    N = X.shape[0]\n    F = np.column_stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP*lP,\n        lV*lV,\n        lD*lD\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-4\n    A = F.T.dot(F) + lam * np.eye(7)\n    b = F.T.dot(y)\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.4919), Performs well on nmae (1.3464), Performs well on r2 (-0.4919), Performs well on combined_score (0.4013)\n\n\n### Program 2 (Score: 0.6869)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a 7-parameter\n    second-order polynomial in log-space:\n\n        Lossu \u2248 p0\n               + p1*ln(P_non_vocab)\n               + p2*ln(vocab_size)\n               + p3*ln(num_characters)\n               + p4*[ln(P_non_vocab)]^2\n               + p5*[ln(vocab_size)]^2\n               + p6*[ln(num_characters)]^2\n\n    Args:\n        data_points: array-like of shape (N,3)\n            Columns are [P_non_vocab, vocab_size, num_characters].\n        params: array-like of length 7\n            Model parameters [p0..p6].\n\n    Returns:\n        preds: ndarray of shape (N,)\n            Predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n\n    # log-transform with small epsilon to avoid log(0)\n    eps = 1e-12\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # shape = (N,7)\n    F = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)\n\n    # linear combination\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter second-order polynomial-in-log scaling law\n    to observed Lossu via ridge-regularized least squares.\n\n    Args:\n        data_points: array-like of shape (N,3)\n            Columns are [P_non_vocab, vocab_size, num_characters].\n        loss_values: array-like of shape (N,)\n            Observed Lossu values.\n\n    Returns:\n        params_opt: ndarray of shape (7,)\n            Fitted parameters [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # unpack and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build design matrix with intercept, main effects, and squares\n    N = X.shape[0]\n    F = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)  # shape = (N,7)\n\n    # ridge regularization strength\n    ridge_lambda = 1e-4\n\n    # solve (F^T F + \u03bb I) p = F^T y\n    A = F.T.dot(F) + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.4919), Performs well on nmae (1.3464), Performs well on r2 (-0.4919), Performs well on combined_score (0.4013)\n\n\n### Program 3 (Score: 0.6948)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log-quadratic model\n    in normalized log-space. This 7-parameter form captures individual\n    curvature in each feature (no cross terms), with built-in normalization\n    for numerical stability.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0,\n         p1, p2, p3,    # linear terms for normalized logs\n         p4, p5, p6]    # squared terms for normalized logs\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # constants for normalization (dataset-known maxima)\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # compute normalized logs in [0,1]\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # build feature matrix for each sample: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # this gives 7 basis functions for the 7 parameters\n    # no cross-terms to keep parameter count fixed\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares. Features are normalized log-features and their squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # same normalization constants as in scaling_law_func\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # normalized logs\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # design matrix: intercept + 3 linear + 3 squared terms\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)  # shape: (N, 7)\n    \n    # ridge regularization (small lambda for numerical stability)\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.5732), Performs well on nmae (1.3905), Performs well on r2 (-0.5732), Performs well on combined_score (0.3886)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7\u2010parameter log\u2010linear model with pairwise interactions:\n        Lossu \u2248 p0\n              + p1*ln(P_non_vocab)\n              + p2*ln(vocab_size)\n              + p3*ln(num_characters)\n              + p4*(ln(P_non_vocab)*ln(vocab_size))\n              + p5*(ln(P_non_vocab)*ln(num_characters))\n              + p6*(ln(vocab_size)*ln(num_characters))\n    params: array-like of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n\n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law in closed\u2010form (ridge\u2010regularized LS).\n    Returns an array of 7 fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be a 1D array of length N\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # design matrix: intercept + main effects + pairwise interactions\n    N = X.shape[0]\n    phi = np.column_stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ])  # shape (N, 7)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.6984)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu with a 7-parameter mixed log\u2013quadratic+interaction model:\n\n      Lossu \u2248 p0\n             + p1\u00b7ln(P_non_vocab)\n             + p2\u00b7ln(num_characters)\n             + p3\u00b7ln(vocab_size)\n             + p4\u00b7[ln(P_non_vocab) * ln(num_characters)]\n             + p5\u00b7[ln(P_non_vocab)]^2\n             + p6\u00b7[ln(num_characters)]^2\n\n    params: array-like of length 7 = [p0,p1,\u2026,p6]\n    data_points: shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 params, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:,0] + eps\n    V      = X[:,1] + eps\n    N_char = X[:,2] + eps\n\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lN = np.log(N_char)\n\n    # build features\n    # \u03c6 = [1, lP, lN, lV, lP*lN, lP^2, lN^2]\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lN,\n        lV,\n        lP * lN,\n        lP * lP,\n        lN * lN\n    ], axis=1)  # shape (N,7)\n\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model above via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:,0] + eps\n    V      = X[:,1] + eps\n    N_char = X[:,2] + eps\n\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lN = np.log(N_char)\n\n    # design matrix: [1, lP, lN, lV, lP*lN, lP^2, lN^2]\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lN,\n        lV,\n        lP * lN,\n        lP * lP,\n        lN * lN\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization for stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.6869, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a 7-parameter\n    second-order polynomial in log-space:\n\n        Lossu \u2248 p0\n               + p1*ln(P_non_vocab)\n               + p2*ln(vocab_size)\n               + p3*ln(num_characters)\n               + p4*[ln(P_non_vocab)]^2\n               + p5*[ln(vocab_size)]^2\n               + p6*[ln(num_characters)]^2\n\n    Args:\n        data_points: array-like of shape (N,3)\n            Columns are [P_non_vocab, vocab_size, num_characters].\n        params: array-like of length 7\n            Model parameters [p0..p6].\n\n    Returns:\n        preds: ndarray of shape (N,)\n            Predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n\n    # log-transform with small epsilon to avoid log(0)\n    eps = 1e-12\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # shape = (N,7)\n    F = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)\n\n    # linear combination\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter second-order polynomial-in-log scaling law\n    to observed Lossu via ridge-regularized least squares.\n\n    Args:\n        data_points: array-like of shape (N,3)\n            Columns are [P_non_vocab, vocab_size, num_characters].\n        loss_values: array-like of shape (N,)\n            Observed Lossu values.\n\n    Returns:\n        params_opt: ndarray of shape (7,)\n            Fitted parameters [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be of shape (N,3), got {X.shape}\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # unpack and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P_non_vocab + eps)\n    lV = np.log(vocab_size  + eps)\n    lD = np.log(num_chars   + eps)\n\n    # build design matrix with intercept, main effects, and squares\n    N = X.shape[0]\n    F = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lP,\n        lV * lV,\n        lD * lD\n    ], axis=1)  # shape = (N,7)\n\n    # ridge regularization strength\n    ridge_lambda = 1e-4\n\n    # solve (F^T F + \u03bb I) p = F^T y\n    A = F.T.dot(F) + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.492), Excellent nmae (1.346)\n\n\n### Inspiration 2 (Score: 106188.3307, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105851937980.083), Excellent nmae (424752.323)\n\n\n### Inspiration 3 (Score: 1.6958, Type: High-Performer)\n```python\n\"\"\"\nEvolved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a saturating power-law form:\n\n  Lossu \u2248 c0 \n        + [ c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp) ]\n          / [ 1 + c2 * (log1p(vocab_size))^d ]\n\nThis form has 7 parameters [c0, c1, a, b, c_exp, c2, d], captures joint\ninteractions, includes a saturation effect with vocabulary size, and is\nnumerically stable thanks to 'log1p' and absolute\u2010value enforcement in\ndenominator terms.  We fit by robust nonlinear least squares (soft L1 loss).\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for N data points given a 7\u2010element parameter vector.\n    \n    data_points: shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: shape (N,) predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    N_chr = X[:, 2]\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # Numerator: joint power law across P_non_vocab and N_chars, modulated by V\n    num = c1 * (P_non ** a) * (N_chr ** b) * (V ** (-c_exp))\n    # Denominator: saturation with vocab_size using log1p for numeric stability\n    denom = 1.0 + np.abs(c2) * (np.log1p(V) ** np.abs(d))\n    \n    return c0 + num / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter saturating power\u2010law model to observed Lossu values.\n    \n    Uses robust least-squares with soft L1 loss to mitigate outliers.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) containing\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    \n    # Initial guess: center c0 around median Lossu, modest positive c1, small exponents\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,                   # c0\n        0.5 * (np.max(y) - np.min(y)), # c1\n        0.2,                       # a\n        0.2,                       # b\n        0.2,                       # c_exp\n        0.01,                      # c2\n        1.0                        # d\n    ])\n\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: enforce nonnegativity on c1, c2, exponents in [-5,5]\n    lower = [-np.inf, 0.0, -5.0, -5.0, -5.0, 0.0, 0.0]\n    upper = [ np.inf, np.inf,  5.0,  5.0,  5.0, np.inf, 5.0]\n\n    result = least_squares(\n        residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        xtol=1e-8,\n        ftol=1e-8,\n        gtol=1e-8,\n        max_nfev=3000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (18.276), Excellent nmae (5.731)\n\n\n### Inspiration 4 (Score: 0.8995, Type: High-Performer)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu via a 7\u2010parameter log\u2010linear model with pairwise interactions:\n        Lossu \u2248 p0\n              + p1*ln(P_non_vocab)\n              + p2*ln(vocab_size)\n              + p3*ln(num_characters)\n              + p4*(ln(P_non_vocab)*ln(vocab_size))\n              + p5*(ln(P_non_vocab)*ln(num_characters))\n              + p6*(ln(vocab_size)*ln(num_characters))\n    params: array-like of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n\n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law in closed\u2010form (ridge\u2010regularized LS).\n    Returns an array of 7 fitted parameters.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be a 1D array of length N\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # design matrix: intercept + main effects + pairwise interactions\n    N = X.shape[0]\n    phi = np.column_stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ])  # shape (N, 7)\n\n    # ridge regularization for numerical stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n\n    # solve for parameters\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.193), Excellent nmae (2.360)\n\n\n### Inspiration 5 (Score: 0.6869, Type: Alternative)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small 7-parameter second-order polynomial\nin the log of each feature:\n\n    Lossu \u2248 p0\n          + p1*ln(P_non_vocab)\n          + p2*ln(vocab_size)\n          + p3*ln(num_characters)\n          + p4*[ln(P_non_vocab)]^2\n          + p5*[ln(vocab_size)]^2\n          + p6*[ln(num_characters)]^2\n\nThis form is linear in the transformed features, admits a closed-form\nridge solution for stability, and uses only 7 parameters.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a 7-parameter\n    second-order polynomial in log-space.\n\n    Args:\n      data_points: array-like, shape (N,3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n      params: array-like of length 7\n        Model parameters [p0..p6].\n\n    Returns:\n      preds: ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack features\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    D     = X[:, 2]\n\n    # safe log-transform\n    eps = 1e-12\n    lP = np.log(P_non + eps)\n    lV = np.log(V       + eps)\n    lD = np.log(D       + eps)\n\n    # build design matrix: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    F = np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP*lP,\n        lV*lV,\n        lD*lD\n    ])\n\n    # linear combination\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter second-order polynomial-in-log scaling law\n    to observed Lossu via closed-form ridge regression.\n\n    Args:\n      data_points: array-like, shape (N,3)\n        Columns are [P_non_vocab, vocab_size, num_characters].\n      loss_values: array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns:\n      params_opt: ndarray of shape (7,)\n        Fitted parameters [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # unpack and log-transform\n    eps = 1e-12\n    lP = np.log(X[:, 0] + eps)\n    lV = np.log(X[:, 1] + eps)\n    lD = np.log(X[:, 2] + eps)\n\n    # design matrix\n    N = X.shape[0]\n    F = np.column_stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP*lP,\n        lV*lV,\n        lD*lD\n    ])\n\n    # ridge regularization for numerical stability\n    lam = 1e-4\n    A = F.T.dot(F) + lam * np.eye(7)\n    b = F.T.dot(y)\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.492), Excellent nmae (1.346)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu with a 7-parameter mixed log\u2013quadratic+interaction model:\n\n      Lossu \u2248 p0\n             + p1\u00b7ln(P_non_vocab)\n             + p2\u00b7ln(num_characters)\n             + p3\u00b7ln(vocab_size)\n             + p4\u00b7[ln(P_non_vocab) * ln(num_characters)]\n             + p5\u00b7[ln(P_non_vocab)]^2\n             + p6\u00b7[ln(num_characters)]^2\n\n    params: array-like of length 7 = [p0,p1,\u2026,p6]\n    data_points: shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 params, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:,0] + eps\n    V      = X[:,1] + eps\n    N_char = X[:,2] + eps\n\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lN = np.log(N_char)\n\n    # build features\n    # \u03c6 = [1, lP, lN, lV, lP*lN, lP^2, lN^2]\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lN,\n        lV,\n        lP * lN,\n        lP * lP,\n        lN * lN\n    ], axis=1)  # shape (N,7)\n\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model above via ridge-regularized least squares.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if X.shape[0] != y.size:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:,0] + eps\n    V      = X[:,1] + eps\n    N_char = X[:,2] + eps\n\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lN = np.log(N_char)\n\n    # design matrix: [1, lP, lN, lV, lP*lN, lP^2, lN^2]\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lN,\n        lV,\n        lP * lN,\n        lP * lP,\n        lN * lN\n    ], axis=1)  # shape (N,7)\n\n    # ridge regularization for stability\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n\n    # solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7\u2010parameter log\u2010linear model with pairwise interactions:\n    \n      Lossu \u2248 p0\n            + p1*ln(P_non_vocab)\n            + p2*ln(vocab_size)\n            + p3*ln(num_characters)\n            + p4*(ln(P_non_vocab)*ln(vocab_size))\n            + p5*(ln(P_non_vocab)*ln(num_characters))\n            + p6*(ln(vocab_size)*ln(num_characters))\n    \n    Args:\n        data_points: array-like of shape (N,3)\n                     Columns = [P_non_vocab, vocab_size, num_characters]\n        params:      array-like of length 7 = [p0..p6]\n    \n    Returns:\n        preds: ndarray of shape (N,)\n               Predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:, 0] + eps\n    V      = X[:, 1] + eps\n    D      = X[:, 2] + eps\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # design matrix: intercept, main effects, and all pairwise interactions\n    # shape = (N,7)\n    F = np.column_stack([\n        np.ones_like(lP),    # p0\n        lP,                  # p1\n        lV,                  # p2\n        lD,                  # p3\n        lP * lV,             # p4\n        lP * lD,             # p5\n        lV * lD              # p6\n    ])\n\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear with pairwise interactions scaling law\n    via ridge\u2010regularized least squares.\n    \n    Args:\n        data_points: array-like of shape (N,3)\n                     Columns = [P_non_vocab, vocab_size, num_characters]\n        loss_values: array-like of shape (N,)\n                     Observed Lossu values.\n    \n    Returns:\n        params_opt: ndarray of length 7\n                    Fitted parameters [p0..p6].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(f\"data_points must be shape (N,3), got {X.shape}\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # avoid log(0)\n    eps = 1e-12\n    P_non = X[:, 0] + eps\n    V      = X[:, 1] + eps\n    D      = X[:, 2] + eps\n\n    # log\u2010transform\n    lP = np.log(P_non)\n    lV = np.log(V)\n    lD = np.log(D)\n\n    # build design matrix as in scaling_law_func\n    F = np.column_stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ])  # shape = (N,7)\n\n    # ridge regularization for numerical stability\n    ridge_lambda = 1e-6\n    A = F.T.dot(F) + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n\n    # solve normal equations\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```"]}}}