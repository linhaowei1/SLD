{"id": "7ed50db5-d885-4c76-b211-0ba7b09b8ea7", "code": "# EVOLVE-BLOCK-START\n\"\"\"\nA robust 7-parameter interaction scaling law for LLM finetuning scenarios.\nWe retain the log-space main effects and pairwise interactions, but fit\nusing ridge-regularized iteratively reweighted least squares with Huber weights\nto improve robustness (reducing NMSE and NMAE) and stabilize coefficients.\n\nScaling law:\n  Lossu \u2248 b0\n         + bP * log(P_non_vocab)\n         + bD * log(num_characters)\n         + bV * log(vocab_size)\n         + bPD * [log(P_non_vocab) * log(num_characters)]\n         + bPV * [log(P_non_vocab) * log(vocab_size)]\n         + bDV * [log(num_characters) * log(vocab_size)]\n\nParams vector = [b0, bP, bD, bV, bPD, bPV, bDV]\n\nFunctions:\n  scaling_law_func(data_points, params) -> predicted Lossu\n  fit_scaling_law(data_points, loss_values) -> fitted params\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from data_points and params.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    params:      array of shape (7,) or (T,7)\n                 order: [b0, bP, bD, bV, bPD, bPV, bDV]\n    Returns:     predicted Lossu of shape (N,) if params is (7,)\n                 or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected params of length 7, got shape {p.shape}\")\n\n    # unpack parameters (each shape (T,))\n    b0, bP, bD, bV, bPD, bPV, bDV = [p[:, i] for i in range(7)]\n\n    # compute log-features\n    logP = np.log(P)[:, None]  # shape (N,1)\n    logD = np.log(D)[:, None]\n    logV = np.log(V)[:, None]\n\n    # weighted sum in log-space with pairwise interactions\n    # result shape (N,T)\n    pred = (\n        b0[None, :]\n        + bP[None, :] * logP\n        + bD[None, :] * logD\n        + bV[None, :] * logV\n        + bPD[None, :] * (logP * logD)\n        + bPV[None, :] * (logP * logV)\n        + bDV[None, :] * (logD * logV)\n    )\n\n    # if single parameter set, return (N,), else (N,T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=10, tol=1e-6, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7-parameter interaction model via ridge-regularized iteratively\n    reweighted least squares (IRLS) using Huber weights.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) corresponding Lossu values\n\n    Returns: params array of shape (7,)\n             [b0, bP, bD, bV, bPD, bPV, bDV]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # extract and log-transform features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # design matrix: main effects + pairwise interactions\n    A = np.stack([\n        np.ones_like(logP),     # bias term\n        logP,                   # P effect\n        logD,                   # D effect\n        logV,                   # V effect\n        logP * logD,            # P-D interaction\n        logP * logV,            # P-V interaction\n        logD * logV             # D-V interaction\n    ], axis=1)  # shape (N,7)\n\n    # initial ridge-regularized OLS solution\n    ATA = A.T.dot(A) + ridge_lambda * np.eye(7)\n    ATy = A.T.dot(y)\n    coeffs = np.linalg.solve(ATA, ATy)\n\n    # iteratively reweighted least squares with Huber weights\n    for _ in range(max_iter):\n        resid = y - A.dot(coeffs)\n        # estimate robust scale (MAD-based)\n        mad = np.median(np.abs(resid)) * 1.4826 + 1e-8\n        # Huber threshold\n        delta = 1.345 * mad\n        abs_res = np.abs(resid)\n        # compute weights\n        w = np.where(abs_res <= delta, 1.0, delta / abs_res)\n\n        # weighted normal equations: (A^T W A + \u03bbI) coeffs = A^T W y\n        Aw = A * w[:, None]\n        ATA_w = A.T.dot(Aw) + ridge_lambda * np.eye(7)\n        ATy_w = A.T.dot(y * w)\n        coeffs_new = np.linalg.solve(ATA_w, ATy_w)\n\n        # check convergence\n        if np.max(np.abs(coeffs_new - coeffs)) < tol:\n            coeffs = coeffs_new\n            break\n        coeffs = coeffs_new\n\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4004a097-c42b-4bf3-9f33-ec6cb4779f00", "generation": 3, "timestamp": 1754722810.6827579, "iteration_found": 27, "metrics": {"nmse": 0.061798753443977165, "nmae": 0.22448652722054133, "r2": 0.9382012465560229, "combined_score": 0.941798054251306}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.04936209080184234, "nmae": 0.22035287919195987, "r2": 0.9506379091981576, "combined_score": 0.9529599065617821}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0494\n- nmae: 0.2204\n- r2: 0.9506\n- combined_score: 0.9530\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.2300, nmae: 0.5016, r2: 0.7700, combined_score: 0.8130\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0494, nmae: 0.2204, r2: 0.9506, combined_score: 0.9530\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5433)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA 7-parameter interaction scaling law for LLM finetuning:\nLossu \u2248 b0 \n       + bP * log(P_non_vocab) \n       + bD * log(num_characters) \n       + bV * log(vocab_size)\n       + bPD * [log(P_non_vocab) * log(num_characters)]\n       + bPV * [log(P_non_vocab) * log(vocab_size)]\n       + bDV * [log(num_characters) * log(vocab_size)]\n\nThis linear-in-parameters form captures both main effects and pairwise interactions\nin log-space, can be fit via ordinary least squares, and stays within 7 parameters.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from data_points and params.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array of shape (7,) or (T,7)\n                 [b0, bP, bD, bV, bPD, bPV, bDV]\n    Returns:     predicted Lossu of shape (N,) if params is (7,)\n                 or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]       # shape (1,7)\n\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected params of length 7, got shape {p.shape}\")\n\n    # unpack parameters (each of shape (T,))\n    b0, bP, bD, bV, bPD, bPV, bDV = [p[:, i] for i in range(7)]\n\n    # log-transformed features, reshape for broadcasting (N,1)\n    logP = np.log(P)[:, None]\n    logD = np.log(D)[:, None]\n    logV = np.log(V)[:, None]\n\n    # build prediction: shape (N,T)\n    pred = (\n        b0[None, :]\n        + bP[None, :] * logP\n        + bD[None, :] * logD\n        + bV[None, :] * logV\n        + bPD[None, :] * (logP * logD)\n        + bPV[None, :] * (logP * logV)\n        + bDV[None, :] * (logD * logV)\n    )\n\n    # if single parameter set, return (N,), else (N,T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction model via ordinary least squares.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) corresponding Lossu values\n\n    Returns:     params array of shape (7,)\n                 [b0, bP, bD, bV, bPD, bPV, bDV]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # log-transformed features\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # design matrix with main effects and pairwise interactions\n    A = np.stack(\n        [\n            np.ones_like(logP),       # bias term\n            logP,                     # P effect\n            logD,                     # D effect\n            logV,                     # V effect\n            logP * logD,             # P-D interaction\n            logP * logV,             # P-V interaction\n            logD * logV,             # D-V interaction\n        ],\n        axis=1,\n    )  # shape (N,7)\n\n    # solve least squares: A @ coeffs \u2248 y\n    coeffs, *_ = np.linalg.lstsq(A, y, rcond=None)\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0494), Performs well on nmae (0.2204), Performs well on r2 (0.9506), Performs well on combined_score (0.9530)\n\n\n### Program 2 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      Lossu = L0\n            + A * P_non_vocab^{-alpha}\n            + B * num_characters^{-beta}\n            + C * vocab_size^{-gamma}\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    Exponentiating the log-parameters enforces positivity.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack\n    L0     = p[0]\n    A      = np.exp(p[1])\n    B      = np.exp(p[2])\n    C      = np.exp(p[3])\n    alpha  = np.exp(p[4])\n    beta   = np.exp(p[5])\n    gamma  = np.exp(p[6])\n\n    # compute prediction\n    loss_pred = (\n        L0\n        + A * P_non_vocab ** (-alpha)\n        + B * num_chars    ** (-beta)\n        + C * vocab_size   ** (-gamma)\n    )\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law via L-BFGS-B.\n    Returns optimized params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: baseline at median(y), unit logs for A,B,C, modest negative exponents\n    L0_init    = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs free but exponents in reasonable range\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 3 (Score: 0.5786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2300), Performs well on nmae (0.5016), Performs well on r2 (0.7700), Performs well on combined_score (0.8130)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5786, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA 7-parameter interaction scaling law for LLM finetuning:\nLossu \u2248 b0 \n       + bP * log(P_non_vocab) \n       + bD * log(num_characters) \n       + bV * log(vocab_size)\n       + bPD * [log(P_non_vocab) * log(num_characters)]\n       + bPV * [log(P_non_vocab) * log(vocab_size)]\n       + bDV * [log(num_characters) * log(vocab_size)]\n\nThis linear-in-parameters form captures both main effects and pairwise interactions\nin log-space, can be fit via ordinary least squares, and stays within 7 parameters.\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from data_points and params.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array of shape (7,) or (T,7)\n                 [b0, bP, bD, bV, bPD, bPV, bDV]\n    Returns:     predicted Lossu of shape (N,) if params is (7,)\n                 or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]       # shape (1,7)\n\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected params of length 7, got shape {p.shape}\")\n\n    # unpack parameters (each of shape (T,))\n    b0, bP, bD, bV, bPD, bPV, bDV = [p[:, i] for i in range(7)]\n\n    # log-transformed features, reshape for broadcasting (N,1)\n    logP = np.log(P)[:, None]\n    logD = np.log(D)[:, None]\n    logV = np.log(V)[:, None]\n\n    # build prediction: shape (N,T)\n    pred = (\n        b0[None, :]\n        + bP[None, :] * logP\n        + bD[None, :] * logD\n        + bV[None, :] * logV\n        + bPD[None, :] * (logP * logD)\n        + bPV[None, :] * (logP * logV)\n        + bDV[None, :] * (logD * logV)\n    )\n\n    # if single parameter set, return (N,), else (N,T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction model via ordinary least squares.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) corresponding Lossu values\n\n    Returns:     params array of shape (7,)\n                 [b0, bP, bD, bV, bPD, bPV, bDV]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # log-transformed features\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # design matrix with main effects and pairwise interactions\n    A = np.stack(\n        [\n            np.ones_like(logP),       # bias term\n            logP,                     # P effect\n            logD,                     # D effect\n            logV,                     # V effect\n            logP * logD,             # P-D interaction\n            logP * logV,             # P-V interaction\n            logD * logV,             # D-V interaction\n        ],\n        axis=1,\n    )  # shape (N,7)\n\n    # solve least squares: A @ coeffs \u2248 y\n    coeffs, *_ = np.linalg.lstsq(A, y, rcond=None)\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA robust 7-parameter interaction scaling law for LLM finetuning scenarios.\nWe retain the log-space main effects and pairwise interactions, but fit\nusing ridge-regularized iteratively reweighted least squares with Huber weights\nto improve robustness (reducing NMSE and NMAE) and stabilize coefficients.\n\nScaling law:\n  Lossu \u2248 b0\n         + bP * log(P_non_vocab)\n         + bD * log(num_characters)\n         + bV * log(vocab_size)\n         + bPD * [log(P_non_vocab) * log(num_characters)]\n         + bPV * [log(P_non_vocab) * log(vocab_size)]\n         + bDV * [log(num_characters) * log(vocab_size)]\n\nParams vector = [b0, bP, bD, bV, bPD, bPV, bDV]\n\nFunctions:\n  scaling_law_func(data_points, params) -> predicted Lossu\n  fit_scaling_law(data_points, loss_values) -> fitted params\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from data_points and params.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    params:      array of shape (7,) or (T,7)\n                 order: [b0, bP, bD, bV, bPD, bPV, bDV]\n    Returns:     predicted Lossu of shape (N,) if params is (7,)\n                 or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected params of length 7, got shape {p.shape}\")\n\n    # unpack parameters (each shape (T,))\n    b0, bP, bD, bV, bPD, bPV, bDV = [p[:, i] for i in range(7)]\n\n    # compute log-features\n    logP = np.log(P)[:, None]  # shape (N,1)\n    logD = np.log(D)[:, None]\n    logV = np.log(V)[:, None]\n\n    # weighted sum in log-space with pairwise interactions\n    # result shape (N,T)\n    pred = (\n        b0[None, :]\n        + bP[None, :] * logP\n        + bD[None, :] * logD\n        + bV[None, :] * logV\n        + bPD[None, :] * (logP * logD)\n        + bPV[None, :] * (logP * logV)\n        + bDV[None, :] * (logD * logV)\n    )\n\n    # if single parameter set, return (N,), else (N,T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=10, tol=1e-6, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7-parameter interaction model via ridge-regularized iteratively\n    reweighted least squares (IRLS) using Huber weights.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) corresponding Lossu values\n\n    Returns: params array of shape (7,)\n             [b0, bP, bD, bV, bPD, bPV, bDV]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # extract and log-transform features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # design matrix: main effects + pairwise interactions\n    A = np.stack([\n        np.ones_like(logP),     # bias term\n        logP,                   # P effect\n        logD,                   # D effect\n        logV,                   # V effect\n        logP * logD,            # P-D interaction\n        logP * logV,            # P-V interaction\n        logD * logV             # D-V interaction\n    ], axis=1)  # shape (N,7)\n\n    # initial ridge-regularized OLS solution\n    ATA = A.T.dot(A) + ridge_lambda * np.eye(7)\n    ATy = A.T.dot(y)\n    coeffs = np.linalg.solve(ATA, ATy)\n\n    # iteratively reweighted least squares with Huber weights\n    for _ in range(max_iter):\n        resid = y - A.dot(coeffs)\n        # estimate robust scale (MAD-based)\n        mad = np.median(np.abs(resid)) * 1.4826 + 1e-8\n        # Huber threshold\n        delta = 1.345 * mad\n        abs_res = np.abs(resid)\n        # compute weights\n        w = np.where(abs_res <= delta, 1.0, delta / abs_res)\n\n        # weighted normal equations: (A^T W A + \u03bbI) coeffs = A^T W y\n        Aw = A * w[:, None]\n        ATA_w = A.T.dot(Aw) + ridge_lambda * np.eye(7)\n        ATy_w = A.T.dot(y * w)\n        coeffs_new = np.linalg.solve(ATA_w, ATy_w)\n\n        # check convergence\n        if np.max(np.abs(coeffs_new - coeffs)) < tol:\n            coeffs = coeffs_new\n            break\n        coeffs = coeffs_new\n\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END\n```"]}}}