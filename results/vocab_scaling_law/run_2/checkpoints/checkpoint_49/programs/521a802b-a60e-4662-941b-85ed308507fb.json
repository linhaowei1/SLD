{"id": "521a802b-a60e-4662-941b-85ed308507fb", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-quadratic scaling law:\n      logP = log(non-vocab parameters)\n      logV = log(vocab size)\n      logD = log(num characters)\n    Features f = [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    Lossu \u2248 f \u00b7 params\n    params: array-like of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log-transform each resource\n    # add tiny epsilon for numerical safety (though inputs >0 here)\n    eps = 1e-12\n    logs = np.log(X + eps)        # shape (N,3) columns = [logP, logV, logD]\n    # build design matrix: [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs ** 2               # squared logs for curvature\n    design = np.hstack((ones, logs, quad))  # shape (N,7)\n    # linear prediction in log-quadratic space\n    return design.dot(params)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic model by ordinary least squares.\n    Returns parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data_points\")\n    # log-transform inputs\n    eps = 1e-12\n    logs = np.log(X + eps)         # shape (N,3)\n    # construct design matrix F = [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs ** 2\n    F = np.hstack((ones, logs, quad))  # shape (N,7)\n    # closed-form least squares solution\n    params, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1276f1c9-9823-4791-a56c-127c6ece7564", "generation": 3, "timestamp": 1754722964.0441453, "iteration_found": 48, "metrics": {"nmse": 0.030339510659448246, "nmae": 0.1616576408438553, "r2": 0.9696604893405517, "combined_score": 0.9705538705003849}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 1.0116616516352954, "nmae": 0.9642353373113852, "r2": -0.011661651635295422, "combined_score": 0.49710148781088126}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 1.0117\n- nmae: 0.9642\n- r2: -0.0117\n- combined_score: 0.4971\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0658, nmae: 0.2704, r2: 0.9342, combined_score: 0.9383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0588, nmae: 0.2200, r2: 0.9412, combined_score: 0.9445\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A 7-parameter log-quadratic model:\n      logP = log(non_vocab_params)\n      logV = log(vocab_size)\n      logD = log(num_characters)\n    Features f = [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    Lossu \u2248 f \u00b7 params\n\n    params: [p0, p1, p2, p3, p4, p5, p6]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each resource\n    logs = np.log(X)  # shape (N,3)\n    # build design matrix: [1, logP, logV, logD, logP^2, logV^2, logD^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs**2\n    design = np.hstack((ones, logs, quad))  # shape (N,7)\n    # linear prediction\n    return design.dot(params)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic model by ordinary least squares.\n    Returns the parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # log\u2010domain features\n    logs = np.log(X)  # shape (N,3)\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs**2\n    F = np.hstack((ones, logs, quad))  # design matrix (N\u00d77)\n\n    # closed\u2010form least squares\n    # params = argmin ||F\u00b7params - y||^2\n    params, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training scenarios:\nWe model Lossu (negative improvement over unigram) as:\n\n    Lossu \u2248 bias - exp( k0\n                        + alpha * log(P_non_vocab)\n                        + beta  * log(num_characters)\n                        + gamma * log(vocab_size)\n                        + delta_d * (log(num_characters))^2\n                        + delta_v * (log(vocab_size))^2\n                      )\n\nThis 7-parameter form captures simple power\u2010law behavior plus\nquadratic curvature in log-characters and log-vocab to improve fit \nacross diverse regimes, while remaining numerically stable and \neasy to fit in closed form.\n\nParameters (7 total):\n  k0      \u2014 base log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters (log-linear)\n  beta    \u2014 exponent on number of characters (log-linear)\n  gamma   \u2014 exponent on vocabulary size (log-linear)\n  delta_d \u2014 quadratic coefficient on log(num_characters)\n  delta_v \u2014 quadratic coefficient on log(vocab_size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data scales and fitted parameters.\n\n    Inputs:\n      data_points: array-like shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,) or (T,7)\n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: array shape (N,) if single param vector,\n            or (N,T) if multiple param sets provided.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # Numerical safeguard for log\n    eps = 1e-12\n    logP = np.log(P + eps)            # (N,)\n    logD = np.log(D + eps)            # (N,)\n    logV = np.log(V + eps)            # (N,)\n    logD2 = logD * logD               # (N,)\n    logV2 = logV * logV               # (N,)\n\n    # Expand to (N,T) for vectorized eval\n    # shape manipulations: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n    logD2 = logD2[:, None]\n    logV2 = logV2[:, None]\n\n    k0   = k0[None, :]\n    alpha   = alpha[None, :]\n    beta    = beta[None, :]\n    gamma   = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_v = delta_v[None, :]\n    bias    = bias[None, :]\n\n    # Compute exponent f = k0 + \u03b1 logP + \u03b2 logD + \u03b3 logV + \u03b4_d logD^2 + \u03b4_v logV^2\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * logD2\n         + delta_v * logV2)\n\n    # Final prediction: bias - exp(f)\n    pred = bias - np.exp(f)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu -> y' = log(-Lossu + eps)\n      2. Build design matrix with [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve least squares for linear coefficients [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover additive bias by matching mean residual in original Lossu space\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # Numerical safeguard\n    eps = 1e-12\n\n    # Log-transform features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Transform target: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Build design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.stack([np.ones_like(logP),\n                  logP,\n                  logD,\n                  logV,\n                  logD * logD,\n                  logV * logV],\n                 axis=1)  # shape (N,6)\n\n    # Solve linear least squares: A @ coeffs \u2248 y_t\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # Compute fitted Lossu without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD * logD)\n             + delta_v * (logV * logV))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover additive bias to minimize mean error\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0588), Performs well on nmae (0.2200), Performs well on r2 (0.9412), Performs well on combined_score (0.9445)\n\n\n### Program 3 (Score: 0.5522)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter multi-resource scaling law:\n      Lossu \u2248 L0 + A / (P^\u03b1 + B\u00b7V^\u03b2 + C\u00b7D^\u03b3 + \u03b5)\n\n    params = [L0,\n              logA, log\u03b1,\n              logB, log\u03b2,\n              logC, log\u03b3]\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    All scale factors A,B,C and exponents \u03b1,\u03b2,\u03b3 are enforced >0\n    via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L0    = p[0]\n    A     = np.exp(p[1])\n    alpha = np.exp(p[2])\n    B     = np.exp(p[3])\n    beta  = np.exp(p[4])\n    C     = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # small \u03b5 added for numerical stability\n    denom = (P ** alpha) + B * (V ** beta) + C * (D ** gamma) + 1e-12\n    return L0 + A / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B, minimizing MSE.\n    Returns params = [L0, logA, log\u03b1, logB, log\u03b2, logC, log\u03b3].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.ravel(loss_values).astype(float)\n\n    # Initial parameter guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep logs/exponents in a stable range\n    bounds = [\n        (None, None),   # L0\n        (-20, 20),      # logA\n        (-10, 10),      # log\u03b1\n        (-20, 20),      # logB\n        (-10, 10),      # log\u03b2\n        (-20, 20),      # logC\n        (-10, 10)       # log\u03b3\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0658), Performs well on nmae (0.2704), Performs well on r2 (0.9342), Performs well on combined_score (0.9383)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    A 7-parameter log-quadratic model:\n      logP = log(non_vocab_params)\n      logV = log(vocab_size)\n      logD = log(num_characters)\n    Features f = [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    Lossu \u2248 f \u00b7 params\n\n    params: [p0, p1, p2, p3, p4, p5, p6]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each resource\n    logs = np.log(X)  # shape (N,3)\n    # build design matrix: [1, logP, logV, logD, logP^2, logV^2, logD^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs**2\n    design = np.hstack((ones, logs, quad))  # shape (N,7)\n    # linear prediction\n    return design.dot(params)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic model by ordinary least squares.\n    Returns the parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # log\u2010domain features\n    logs = np.log(X)  # shape (N,3)\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs**2\n    F = np.hstack((ones, logs, quad))  # design matrix (N\u00d77)\n\n    # closed\u2010form least squares\n    # params = argmin ||F\u00b7params - y||^2\n    params, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.6153, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    5-parameter combined power-law scaling law:\n      Lossu = L0 + A * P^{-alpha_p} * D^{-alpha_d} * V^{-alpha_v}\n    where\n      P = non-vocabulary parameter count,\n      D = number of characters processed,\n      V = vocabulary size.\n    params = [L0, logA, log_alpha_p, log_alpha_d, log_alpha_v]\n      L0            : baseline Lossu\n      A             : exp(logA) > 0\n      alpha_p       : exp(log_alpha_p) > 0\n      alpha_d       : exp(log_alpha_d) > 0\n      alpha_v       : exp(log_alpha_v) > 0\n    Returns an array of predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    if p.size != 5:\n        raise ValueError(f\"Expected 5 parameters, got {p.size}\")\n\n    L0        = p[0]\n    A         = np.exp(p[1])\n    alpha_p   = np.exp(p[2])\n    alpha_d   = np.exp(p[3])\n    alpha_v   = np.exp(p[4])\n\n    # Combined power law term\n    term = A * (P ** (-alpha_p)) * (D ** (-alpha_d)) * (V ** (-alpha_v))\n    return L0 + term\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter combined power-law scaling law to (P, V, D) \u2192 Lossu data.\n    Uses L-BFGS-B to minimize mean squared error.\n    Returns optimized params [L0, logA, log_alpha_p, log_alpha_d, log_alpha_v].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    y = np.ravel(loss_values).astype(float)\n\n    # Initialize:\n    #  - L0 at median of the losses\n    #  - logA = 0 \u2192 A = 1\n    #  - exponents start at 1.0 (log(1.0)=0)\n    init_params = np.array([\n        np.median(y),   # L0\n        0.0,            # logA\n        0.0,            # log_alpha_p\n        0.0,            # log_alpha_d\n        0.0             # log_alpha_v\n    ], dtype=float)\n\n    # All parameters are unconstrained (we enforce positivity of A and alphas via exp)\n    bounds = [(None, None)] * init_params.size\n\n    def mse_loss(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_loss,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 2000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.012), Excellent nmae (0.964)\n\n\n### Inspiration 3 (Score: 0.5786, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 4 (Score: 0.5522, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter multi-resource scaling law:\n      Lossu \u2248 L0 + A / (P^\u03b1 + B\u00b7V^\u03b2 + C\u00b7D^\u03b3 + \u03b5)\n\n    params = [L0,\n              logA, log\u03b1,\n              logB, log\u03b2,\n              logC, log\u03b3]\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    All scale factors A,B,C and exponents \u03b1,\u03b2,\u03b3 are enforced >0\n    via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L0    = p[0]\n    A     = np.exp(p[1])\n    alpha = np.exp(p[2])\n    B     = np.exp(p[3])\n    beta  = np.exp(p[4])\n    C     = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # small \u03b5 added for numerical stability\n    denom = (P ** alpha) + B * (V ** beta) + C * (D ** gamma) + 1e-12\n    return L0 + A / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B, minimizing MSE.\n    Returns params = [L0, logA, log\u03b1, logB, log\u03b2, logC, log\u03b3].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.ravel(loss_values).astype(float)\n\n    # Initial parameter guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep logs/exponents in a stable range\n    bounds = [\n        (None, None),   # L0\n        (-20, 20),      # logA\n        (-10, 10),      # log\u03b1\n        (-20, 20),      # logB\n        (-10, 10),      # log\u03b2\n        (-20, 20),      # logC\n        (-10, 10)       # log\u03b3\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5411, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training scenarios:\nWe model Lossu (negative improvement over unigram) as:\n\n    Lossu \u2248 bias - exp( k0\n                        + alpha * log(P_non_vocab)\n                        + beta  * log(num_characters)\n                        + gamma * log(vocab_size)\n                        + delta_d * (log(num_characters))^2\n                        + delta_v * (log(vocab_size))^2\n                      )\n\nThis 7-parameter form captures simple power\u2010law behavior plus\nquadratic curvature in log-characters and log-vocab to improve fit \nacross diverse regimes, while remaining numerically stable and \neasy to fit in closed form.\n\nParameters (7 total):\n  k0      \u2014 base log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters (log-linear)\n  beta    \u2014 exponent on number of characters (log-linear)\n  gamma   \u2014 exponent on vocabulary size (log-linear)\n  delta_d \u2014 quadratic coefficient on log(num_characters)\n  delta_v \u2014 quadratic coefficient on log(vocab_size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data scales and fitted parameters.\n\n    Inputs:\n      data_points: array-like shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,) or (T,7)\n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: array shape (N,) if single param vector,\n            or (N,T) if multiple param sets provided.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # Numerical safeguard for log\n    eps = 1e-12\n    logP = np.log(P + eps)            # (N,)\n    logD = np.log(D + eps)            # (N,)\n    logV = np.log(V + eps)            # (N,)\n    logD2 = logD * logD               # (N,)\n    logV2 = logV * logV               # (N,)\n\n    # Expand to (N,T) for vectorized eval\n    # shape manipulations: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n    logD2 = logD2[:, None]\n    logV2 = logV2[:, None]\n\n    k0   = k0[None, :]\n    alpha   = alpha[None, :]\n    beta    = beta[None, :]\n    gamma   = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_v = delta_v[None, :]\n    bias    = bias[None, :]\n\n    # Compute exponent f = k0 + \u03b1 logP + \u03b2 logD + \u03b3 logV + \u03b4_d logD^2 + \u03b4_v logV^2\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * logD2\n         + delta_v * logV2)\n\n    # Final prediction: bias - exp(f)\n    pred = bias - np.exp(f)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu -> y' = log(-Lossu + eps)\n      2. Build design matrix with [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve least squares for linear coefficients [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover additive bias by matching mean residual in original Lossu space\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # Numerical safeguard\n    eps = 1e-12\n\n    # Log-transform features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Transform target: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Build design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.stack([np.ones_like(logP),\n                  logP,\n                  logD,\n                  logV,\n                  logD * logD,\n                  logV * logV],\n                 axis=1)  # shape (N,6)\n\n    # Solve linear least squares: A @ coeffs \u2248 y_t\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # Compute fitted Lossu without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD * logD)\n             + delta_v * (logV * logV))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover additive bias to minimize mean error\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu with a 7-parameter inverse-sum law:\n      Lossu = L0 + 1 / [A\u00b7P^\u03b1 + B\u00b7D^\u03b2 + C\u00b7V^\u03b3 + \u03b5]\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n    params = [L0,\n              logA, log_\u03b1,\n              logB, log_\u03b2,\n              logC, log_\u03b3]\n    A, B, C, \u03b1, \u03b2, \u03b3 > 0 enforced via exponentiation.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P, V, D = X[:, 0], X[:, 1], X[:, 2]\n\n    p = np.asarray(params, float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    L0 = p[0]\n    # split logs: amplitudes at indices 1,3,5; exponents at 2,4,6\n    amp_logs = p[[1, 3, 5]]\n    exp_logs = p[[2, 4, 6]]\n\n    A, B, C       = np.exp(amp_logs)\n    alpha, beta, gamma = np.exp(exp_logs)\n\n    # sum in denominator with small \u03b5 for stability\n    denom = A * (P ** alpha) + B * (D ** beta) + C * (V ** gamma) + 1e-12\n    return L0 + 1.0 / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE:\n      params = [L0,\n                logA, log_\u03b1,\n                logB, log_\u03b2,\n                logC, log_\u03b3]\n    Uses L-BFGS-B with bounds to ensure numerical stability.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Initial guess: baseline = median(y), all logs = 0 => A=B=C=1, \u03b1=\u03b2=\u03b3=1\n    L0_init = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # log_\u03b1\n        0.0,       # logB\n        0.0,       # log_\u03b2\n        0.0,       # logC\n        0.0        # log_\u03b3\n    ], dtype=float)\n\n    # Bounds: L0 free; amplitudes in [-20,20]; exponents in [-5,5]\n    bounds = [\n        (None, None),\n        (-20.0, 20.0),  # logA\n        (-5.0, 5.0),    # log_\u03b1\n        (-20.0, 20.0),  # logB\n        (-5.0, 5.0),    # log_\u03b2\n        (-20.0, 20.0),  # logC\n        (-5.0, 5.0)     # log_\u03b3\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-quadratic scaling law:\n      logP = log(non-vocab parameters)\n      logV = log(vocab size)\n      logD = log(num characters)\n    Features f = [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    Lossu \u2248 f \u00b7 params\n    params: array-like of length 7\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    # log-transform each resource\n    # add tiny epsilon for numerical safety (though inputs >0 here)\n    eps = 1e-12\n    logs = np.log(X + eps)        # shape (N,3) columns = [logP, logV, logD]\n    # build design matrix: [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs ** 2               # squared logs for curvature\n    design = np.hstack((ones, logs, quad))  # shape (N,7)\n    # linear prediction in log-quadratic space\n    return design.dot(params)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic model by ordinary least squares.\n    Returns parameter vector of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data_points\")\n    # log-transform inputs\n    eps = 1e-12\n    logs = np.log(X + eps)         # shape (N,3)\n    # construct design matrix F = [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs ** 2\n    F = np.hstack((ones, logs, quad))  # shape (N,7)\n    # closed-form least squares solution\n    params, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```"]}}}