{"id": "700b0ebd-1802-41c2-b53d-abb30a473b99", "code": "\"\"\"\nRefined 7-parameter scaling law for Lossu, combining\ntwo log-stabilized power-law terms and a robust Huber fit.\n\nModel:\n  Lossu \u2248 c0\n        + c1 * exp[a\u00b7ln(P_non_vocab) + b\u00b7ln(num_characters) \u2212 c_exp\u00b7ln(vocab_size)]\n        + c2 * exp[d\u00b7ln(vocab_size)]\n\nParameters:\n  c0      : baseline bias\n  c1      : amplitude of the joint term\n  a, b    : exponents on non-vocab parameters and data scale\n  c_exp   : exponent on vocab size in the denominator\n  c2      : amplitude of pure vocab-size term\n  d       : exponent on vocab size in the second term\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for each row in data_points using a 7-parameter model.\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points of shape (N,3)\")\n\n    # unpack features\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log of zero\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # term1: joint power law in log-space\n    log_t1 = a * lP + b * lN - c_exp * lV\n    t1 = np.exp(log_t1)\n\n    # term2: pure vocab-size power law in log-space\n    t2 = np.exp(d * lV)\n\n    return c0 + c1 * t1 + c2 * t2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law model to observed Lossu.\n\n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params_opt: ndarray of length 7 with optimized parameters\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # prepare logs once\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # initial guess: bias at median, amplitudes ~|max\u2212median|, exponents small\n    c0_init = np.median(y)\n    amp_init = max(1.0, abs(np.max(y) - c0_init))\n    init = np.array([\n        c0_init,      # c0\n        amp_init,     # c1\n        0.5,          # a\n        0.5,          # b\n        0.5,          # c_exp\n        amp_init*0.1, # c2\n        0.3           # d\n    ], dtype=float)\n\n    # residuals\n    def _res(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n        return (c0 + c1 * t1 + c2 * t2) - y\n\n    # analytic Jacobian\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:, 0] = 1.0                   # d/d c0\n        J[:, 1] = t1                    # d/d c1\n        J[:, 2] = c1 * t1 * lP          # d/d a\n        J[:, 3] = c1 * t1 * lN          # d/d b\n        J[:, 4] = -c1 * t1 * lV         # d/d c_exp\n        J[:, 5] = t2                    # d/d c2\n        J[:, 6] = c2 * t2 * lV          # d/d d\n        return J\n\n    # parameter bounds\n    lower = [\n        c0_init - 10.0,  # c0\n        0.0,             # c1\n        -3.0,            # a\n        -3.0,            # b\n        -3.0,            # c_exp\n        0.0,             # c2\n        -1.0             # d\n    ]\n    upper = [\n        c0_init + 10.0,  # c0\n        np.inf,          # c1\n        3.0,             # a\n        3.0,             # b\n        3.0,             # c_exp\n        np.inf,          # c2\n        3.0              # d\n    ]\n\n    result = least_squares(\n        fun=_res,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.5,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "5cefdd4d-30df-4961-98bd-aa187d2d311f", "generation": 3, "timestamp": 1754720924.5084264, "iteration_found": 37, "metrics": {"nmse": 0.18828902762139754, "nmae": 0.4827411072727811, "r2": 0.8117109723786025, "combined_score": 0.8415461026360763}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.4099026431120487, "nmae": 2.211495290153975, "r2": -2.4099026431120487, "combined_score": 0.22676237570956995}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.4099\n- nmae: 2.2115\n- r2: -2.4099\n- combined_score: 0.2268\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 3.4099, nmae: 2.2115, r2: -2.4099, combined_score: 0.2268\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.1926, nmae: 2.3596, r2: -2.1926, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1883, nmae: 0.4827, r2: 0.8117, combined_score: 0.8415\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5811)\n```python\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nWe model Lossu as the sum of two power\u2010law components plus a bias:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d],\ncapturing cross\u2010feature interactions and a standalone vocab\u2010size term.\nWe fit via bounded nonlinear least squares to ensure numerical stability\nand interpretability of exponents.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    Args:\n      data_points: array of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array\u2010like of length 7 = \n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: 1D array of length N of predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shaped (N,3)\")\n\n    # Unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # First power\u2010law term: joint scaling of non\u2010vocab params and chars,\n    # modulated inversely by vocabulary size exponent\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # Second term: pure vocabulary\u2010size power law\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n\n    Args:\n      data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array of shape (N,) of measured Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shaped (N,3)\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be a 1D array of length N\")\n\n    # Initial parameter guess:\n    #   c0 around median Lossu, modest positive amplitudes and exponents\n    c0_init = np.median(y)\n    init = np.array([c0_init,  # c0 (bias)\n                     1.0,      # c1 (scale of term1)\n                     0.3,      # a  (exponent on P_non_vocab)\n                     0.3,      # b  (exponent on num_characters)\n                     0.3,      # c_exp (vocab_size exponent in term1)\n                     0.1,      # c2 (scale of term2)\n                     0.1])     # d  (exponent on vocab_size in term2)\n\n    # Define residuals for least squares\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: keep amplitudes non\u2010negative and exponents within a reasonable range\n    lower = [-np.inf, 0.0,   -3.0,  -3.0,  -3.0,  0.0,  -3.0]\n    upper = [ np.inf, np.inf,  3.0,   3.0,   3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # If optimization did not converge, return initial guess\n        return init\n```\nKey features: Performs well on nmse (0.1883), Performs well on nmae (0.4827), Performs well on r2 (0.8117), Performs well on combined_score (0.8415)\n\n\n### Program 2 (Score: 0.8995)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log\u2010linear model with pairwise interactions.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        Model parameters [p0, p1, p2, p3, p4, p5, p6] such that\n            Lossu \u2248 p0\n                  + p1*ln(P_non_vocab)\n                  + p2*ln(vocab_size)\n                  + p3*ln(num_characters)\n                  + p4*(ln(P_non_vocab)*ln(vocab_size))\n                  + p5*(ln(P_non_vocab)*ln(num_characters))\n                  + p6*(ln(vocab_size)*ln(num_characters))\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    \n    # log\u2010transform\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n    \n    # compute prediction\n    return (\n        p[0]\n        + p[1] * lP\n        + p[2] * lV\n        + p[3] * lD\n        + p[4] * (lP * lV)\n        + p[5] * (lP * lD)\n        + p[6] * (lV * lD)\n    )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010linear scaling law model in closed form via (ridge\u2010regularized) least squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns correspond to [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    \n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n\n    # extract and log-transform features\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n    lP = np.log(P_non_vocab)\n    lV = np.log(vocab_size)\n    lD = np.log(num_chars)\n\n    # build design matrix with intercept + 3 main effects + 3 pairwise interactions\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP * lV,\n        lP * lD,\n        lV * lD\n    ], axis=1)  # shape: (N, 7)\n\n    # closed-form ridge regression: (\u03a6\u1d40\u03a6 + \u03bbI) p = \u03a6\u1d40 y\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1926), Performs well on nmae (2.3596), Performs well on r2 (-2.1926), Performs well on combined_score (0.2385)\n\n\n### Program 3 (Score: 0.8596)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with 7 parameters in two interacting power\u2010law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (Vocab_norm^d)\n\nWe normalize each feature by a fixed constant to keep everything O(1),\nprovide an analytic Jacobian for faster and more stable fitting,\nand use a robust \u201csoft_l1\u201d loss in a bounded nonlinear least-squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n# Fixed normalization constants (not dataset-dependent)\n_SCALE_P_NON    = 1e8    # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4    # scale for vocabulary size\n_SCALE_N_CHARS  = 1e9    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    Args:\n      data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns [P_non_vocab, vocab_size, num_characters]\")\n    \n    # unpack & normalize features\n    Pn = X[:, 0] / _SCALE_P_NON\n    Vn = X[:, 1] / _SCALE_VOCAB\n    Nn = X[:, 2] / _SCALE_N_CHARS\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n    \n    term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term2 = c2 * (Vn**d)\n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values via robust least-squares.\n    \n    Args:\n      data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n      loss_values: (N,) array of Lossu\n    \n    Returns:\n      params_opt: ndarray of shape (7,) = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points must match number of loss_values\")\n    \n    # normalize features once\n    Pn = X[:, 0] / _SCALE_P_NON\n    Vn = X[:, 1] / _SCALE_VOCAB\n    Nn = X[:, 2] / _SCALE_N_CHARS\n    logPn = np.log(Pn)\n    logVn = np.log(Vn)\n    logNn = np.log(Nn)\n    \n    # initial guess: c0 at median loss, mild exponents ~0.5, coeffs ~1\n    c0_init = np.median(y)\n    init = np.array([c0_init, 1.0, 0.5, 0.5, 0.5, 1.0, 0.5], dtype=float)\n    \n    # residual vector\n    def _residuals(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        term2 = c2 * (Vn**d)\n        return (c0 + term1 + term2) - y\n    \n    # analytic Jacobian for speed & stability\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        t1 = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        t2 = (Vn**d)\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:, 0] = 1.0\n        J[:, 1] = t1\n        J[:, 2] = c1 * t1 * logPn\n        J[:, 3] = c1 * t1 * logNn\n        J[:, 4] = -c1 * t1 * logVn\n        J[:, 5] = t2\n        J[:, 6] = c2 * t2 * logVn\n        return J\n    \n    # bounds to prevent pathological solutions\n    lower = [c0_init - 20.0, -np.inf, 0.0, 0.0, 0.0, -np.inf, 0.0]\n    upper = [c0_init + 20.0,  np.inf, 3.0, 3.0, 3.0,  np.inf, 3.0]\n    \n    result = least_squares(\n        fun=_residuals,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n    \n    # return best-found parameters\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.4099), Performs well on nmae (2.2115), Performs well on r2 (-2.4099), Performs well on combined_score (0.2268)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8596)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with 7 parameters:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (Vocab_norm^d)\n\nwhere we normalize each input by a fixed scale\nto keep magnitudes O(1) and stabilize optimization.\nFitting is done with a robust \u201csoft_l1\u201d loss.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# fixed normalization constants (not data-dependent)\n_SCALE_P_NON    = 1e8    # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4    # scale for vocabulary size\n_SCALE_N_CHARS  = 1e9    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    Args:\n      data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    \n    # unpack raw features\n    P_non   = X[:, 0]\n    Vocab   = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # normalize to O(1)\n    Pn = P_non   / _SCALE_P_NON\n    Vn = Vocab   / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n    \n    # two power-law terms\n    term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term2 = c2 * (Vn**d)\n    \n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Args:\n      data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n      loss_values: (N,) array of Lossu\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points must match number of loss_values\")\n    \n    # initial guess: c0 near median, mild exponents ~0.5, coefficients ~1\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,   # c0\n        1.0,       # c1\n        0.5,       # a\n        0.5,       # b\n        0.5,       # c_exp\n        1.0,       # c2\n        0.5        # d\n    ], dtype=float)\n    \n    # residual function\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n    \n    # bounds to avoid pathological solutions\n    lower = np.array([\n        c0_init - 20.0,   # c0\n        -1e2,             # c1\n         0.0,             # a\n         0.0,             # b\n         0.0,             # c_exp\n        -1e2,             # c2\n         0.0              # d\n    ])\n    upper = np.array([\n        c0_init + 20.0,   # c0\n         1e2,             # c1\n         3.0,             # a\n         3.0,             # b\n         3.0,             # c_exp\n         1e2,             # c2\n         3.0              # d\n    ])\n    \n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',     # robust to outliers\n        f_scale=0.1,        # tunable transition for soft-L1\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n    \n    if result.success:\n        return result.x\n    else:\n        # fallback to the initial guess\n        return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 1.6883)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe propose a two\u2010term model with log\u2010stabilized power laws plus a small vocab\u2010size correction:\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\n(over a wide dynamic range) and fits robustly via a Huberized nonlinear least\u2010squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# ===================================================================\n# EVOLVE-BLOCK-START\n# ===================================================================\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    N_char= X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # Avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_char + eps)\n    logV = np.log(V + eps)\n\n    # Main power\u2010law term, computed in log\u2010space for stability:\n    #   term1 = c1 * (P_non^a * N_char^b / V^c_exp)\n    log_term1 = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term1)\n\n    # Secondary vocab\u2010size correction (log\u2010powered):\n    #   term2 = c2 * (log(V))^d\n    # clamp logV positive\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Uses a robust Huber loss in scipy.optimize.least_squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # Initial guess:\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,  # c0: baseline\n        1.0,      # c1: amplitude of main term\n        0.5,      # a : exponent on P_non_vocab\n        0.5,      # b : exponent on num_characters\n        0.3,      # c_exp : exponent on vocab_size in denom\n        0.1,      # c2 : amplitude of vocab\u2010size correction\n        1.0       # d  : exponent on log(vocab_size)\n    ], dtype=float)\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds for stability\n    lower_bounds = [\n        -np.inf,      # c0\n        -np.inf,      # c1\n        -5.0,         # a\n        -5.0,         # b\n        -5.0,         # c_exp\n        -np.inf,      # c2\n        0.0           # d  (keep log\u2010power nonnegative)\n    ]\n    upper_bounds = [\n        np.inf,  # c0\n        np.inf,  # c1\n        5.0,     # a\n        5.0,     # b\n        5.0,     # c_exp\n        np.inf,  # c2\n        5.0      # d\n    ]\n\n    # Perform a Huberized least\u2010squares fit for robustness to outliers\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        loss='huber',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return init\n# ===================================================================\n# EVOLVE-BLOCK-END\n# ===================================================================\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5811, Type: Experimental)\n```python\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nWe model Lossu as the sum of two power\u2010law components plus a bias:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d],\ncapturing cross\u2010feature interactions and a standalone vocab\u2010size term.\nWe fit via bounded nonlinear least squares to ensure numerical stability\nand interpretability of exponents.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    Args:\n      data_points: array of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array\u2010like of length 7 = \n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: 1D array of length N of predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shaped (N,3)\")\n\n    # Unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # First power\u2010law term: joint scaling of non\u2010vocab params and chars,\n    # modulated inversely by vocabulary size exponent\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # Second term: pure vocabulary\u2010size power law\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n\n    Args:\n      data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array of shape (N,) of measured Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shaped (N,3)\")\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must be a 1D array of length N\")\n\n    # Initial parameter guess:\n    #   c0 around median Lossu, modest positive amplitudes and exponents\n    c0_init = np.median(y)\n    init = np.array([c0_init,  # c0 (bias)\n                     1.0,      # c1 (scale of term1)\n                     0.3,      # a  (exponent on P_non_vocab)\n                     0.3,      # b  (exponent on num_characters)\n                     0.3,      # c_exp (vocab_size exponent in term1)\n                     0.1,      # c2 (scale of term2)\n                     0.1])     # d  (exponent on vocab_size in term2)\n\n    # Define residuals for least squares\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds: keep amplitudes non\u2010negative and exponents within a reasonable range\n    lower = [-np.inf, 0.0,   -3.0,  -3.0,  -3.0,  0.0,  -3.0]\n    upper = [ np.inf, np.inf,  3.0,   3.0,   3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # If optimization did not converge, return initial guess\n        return init\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, NumPy-based implementation\n\n\n### Inspiration 2 (Score: 1.6883, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe propose a two\u2010term model with log\u2010stabilized power laws plus a small vocab\u2010size correction:\n  Lossu \u2248 c0 \n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2013 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\n(over a wide dynamic range) and fits robustly via a Huberized nonlinear least\u2010squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# ===================================================================\n# EVOLVE-BLOCK-START\n# ===================================================================\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    P_non = X[:, 0]\n    V     = X[:, 1]\n    N_char= X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # Avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_char + eps)\n    logV = np.log(V + eps)\n\n    # Main power\u2010law term, computed in log\u2010space for stability:\n    #   term1 = c1 * (P_non^a * N_char^b / V^c_exp)\n    log_term1 = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term1)\n\n    # Secondary vocab\u2010size correction (log\u2010powered):\n    #   term2 = c2 * (log(V))^d\n    # clamp logV positive\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values.\n    Uses a robust Huber loss in scipy.optimize.least_squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # Initial guess:\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,  # c0: baseline\n        1.0,      # c1: amplitude of main term\n        0.5,      # a : exponent on P_non_vocab\n        0.5,      # b : exponent on num_characters\n        0.3,      # c_exp : exponent on vocab_size in denom\n        0.1,      # c2 : amplitude of vocab\u2010size correction\n        1.0       # d  : exponent on log(vocab_size)\n    ], dtype=float)\n\n    # Residual function\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bounds for stability\n    lower_bounds = [\n        -np.inf,      # c0\n        -np.inf,      # c1\n        -5.0,         # a\n        -5.0,         # b\n        -5.0,         # c_exp\n        -np.inf,      # c2\n        0.0           # d  (keep log\u2010power nonnegative)\n    ]\n    upper_bounds = [\n        np.inf,  # c0\n        np.inf,  # c1\n        5.0,     # a\n        5.0,     # b\n        5.0,     # c_exp\n        np.inf,  # c2\n        5.0      # d\n    ]\n\n    # Perform a Huberized least\u2010squares fit for robustness to outliers\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        loss='huber',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback\n        return init\n# ===================================================================\n# EVOLVE-BLOCK-END\n# ===================================================================\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (18.095), Excellent nmae (5.701)\n\n\n\n# Current Program\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with 7 parameters in two interacting power\u2010law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (Vocab_norm^d)\n\nWe normalize each feature by a fixed constant to keep everything O(1),\nprovide an analytic Jacobian for faster and more stable fitting,\nand use a robust \u201csoft_l1\u201d loss in a bounded nonlinear least-squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n# Fixed normalization constants (not dataset-dependent)\n_SCALE_P_NON    = 1e8    # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4    # scale for vocabulary size\n_SCALE_N_CHARS  = 1e9    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    Args:\n      data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns [P_non_vocab, vocab_size, num_characters]\")\n    \n    # unpack & normalize features\n    Pn = X[:, 0] / _SCALE_P_NON\n    Vn = X[:, 1] / _SCALE_VOCAB\n    Nn = X[:, 2] / _SCALE_N_CHARS\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n    \n    term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term2 = c2 * (Vn**d)\n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values via robust least-squares.\n    \n    Args:\n      data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n      loss_values: (N,) array of Lossu\n    \n    Returns:\n      params_opt: ndarray of shape (7,) = [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points must match number of loss_values\")\n    \n    # normalize features once\n    Pn = X[:, 0] / _SCALE_P_NON\n    Vn = X[:, 1] / _SCALE_VOCAB\n    Nn = X[:, 2] / _SCALE_N_CHARS\n    logPn = np.log(Pn)\n    logVn = np.log(Vn)\n    logNn = np.log(Nn)\n    \n    # initial guess: c0 at median loss, mild exponents ~0.5, coeffs ~1\n    c0_init = np.median(y)\n    init = np.array([c0_init, 1.0, 0.5, 0.5, 0.5, 1.0, 0.5], dtype=float)\n    \n    # residual vector\n    def _residuals(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        term2 = c2 * (Vn**d)\n        return (c0 + term1 + term2) - y\n    \n    # analytic Jacobian for speed & stability\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        t1 = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        t2 = (Vn**d)\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:, 0] = 1.0\n        J[:, 1] = t1\n        J[:, 2] = c1 * t1 * logPn\n        J[:, 3] = c1 * t1 * logNn\n        J[:, 4] = -c1 * t1 * logVn\n        J[:, 5] = t2\n        J[:, 6] = c2 * t2 * logVn\n        return J\n    \n    # bounds to prevent pathological solutions\n    lower = [c0_init - 20.0, -np.inf, 0.0, 0.0, 0.0, -np.inf, 0.0]\n    upper = [c0_init + 20.0,  np.inf, 3.0, 3.0, 3.0,  np.inf, 3.0]\n    \n    result = least_squares(\n        fun=_residuals,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n    \n    # return best-found parameters\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nRefined 7-parameter scaling law for Lossu, combining\ntwo log-stabilized power-law terms and a robust Huber fit.\n\nModel:\n  Lossu \u2248 c0\n        + c1 * exp[a\u00b7ln(P_non_vocab) + b\u00b7ln(num_characters) \u2212 c_exp\u00b7ln(vocab_size)]\n        + c2 * exp[d\u00b7ln(vocab_size)]\n\nParameters:\n  c0      : baseline bias\n  c1      : amplitude of the joint term\n  a, b    : exponents on non-vocab parameters and data scale\n  c_exp   : exponent on vocab size in the denominator\n  c2      : amplitude of pure vocab-size term\n  d       : exponent on vocab size in the second term\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for each row in data_points using a 7-parameter model.\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points of shape (N,3)\")\n\n    # unpack features\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log of zero\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # term1: joint power law in log-space\n    log_t1 = a * lP + b * lN - c_exp * lV\n    t1 = np.exp(log_t1)\n\n    # term2: pure vocab-size power law in log-space\n    t2 = np.exp(d * lV)\n\n    return c0 + c1 * t1 + c2 * t2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law model to observed Lossu.\n\n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params_opt: ndarray of length 7 with optimized parameters\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # prepare logs once\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # initial guess: bias at median, amplitudes ~|max\u2212median|, exponents small\n    c0_init = np.median(y)\n    amp_init = max(1.0, abs(np.max(y) - c0_init))\n    init = np.array([\n        c0_init,      # c0\n        amp_init,     # c1\n        0.5,          # a\n        0.5,          # b\n        0.5,          # c_exp\n        amp_init*0.1, # c2\n        0.3           # d\n    ], dtype=float)\n\n    # residuals\n    def _res(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n        return (c0 + c1 * t1 + c2 * t2) - y\n\n    # analytic Jacobian\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:, 0] = 1.0                   # d/d c0\n        J[:, 1] = t1                    # d/d c1\n        J[:, 2] = c1 * t1 * lP          # d/d a\n        J[:, 3] = c1 * t1 * lN          # d/d b\n        J[:, 4] = -c1 * t1 * lV         # d/d c_exp\n        J[:, 5] = t2                    # d/d c2\n        J[:, 6] = c2 * t2 * lV          # d/d d\n        return J\n\n    # parameter bounds\n    lower = [\n        c0_init - 10.0,  # c0\n        0.0,             # c1\n        -3.0,            # a\n        -3.0,            # b\n        -3.0,            # c_exp\n        0.0,             # c2\n        -1.0             # d\n    ]\n    upper = [\n        c0_init + 10.0,  # c0\n        np.inf,          # c1\n        3.0,             # a\n        3.0,             # b\n        3.0,             # c_exp\n        np.inf,          # c2\n        3.0              # d\n    ]\n\n    result = least_squares(\n        fun=_res,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.5,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```"]}}}