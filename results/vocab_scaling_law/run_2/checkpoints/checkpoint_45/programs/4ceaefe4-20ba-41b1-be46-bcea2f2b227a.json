{"id": "4ceaefe4-20ba-41b1-be46-bcea2f2b227a", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multi\u2010resource rational scaling law with 7 parameters:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n\n    params layout:\n      [L0,\n       logA, log_alpha,\n       logB, log_beta,\n       logC, log_gamma]\n    (we exponentiate the logs to enforce positivity)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    P, V, D = X[:, 0], X[:, 1], X[:, 2]\n    p = np.asarray(params, float).ravel()\n\n    L0 = p[0]\n    # unpack and enforce positivity\n    A, alpha, B, beta, C, gamma = np.exp(p[1:])\n\n    # compute denominator safely\n    denom = P**alpha + B * V**beta + C * D**gamma + 1e-12\n    return L0 + A / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE via L-BFGS-B.\n    Returns the optimized params array of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    y = np.asarray(loss_values, float).ravel()\n\n    # Initial guesses: baseline ~ median loss, logs for A,B,C = 0, exponents small\n    L0_init = np.median(y)\n    logs_init = np.array([0.0,   # logA\n                          -3.0,  # log_alpha\n                           0.0,  # logB\n                          -3.0,  # log_beta\n                           0.0,  # logC\n                          -3.0]) # log_gamma\n    init_params = np.concatenate(([L0_init], logs_init))\n\n    # Bounds: L0 free; logs of A,C,B in [-20,20]; exponents in log-space [-10,10]\n    bounds = [\n        (None, None),\n        (-20.0, 20.0), (-10.0, 10.0),\n        (-20.0, 20.0), (-10.0, 10.0),\n        (-20.0, 20.0), (-10.0, 10.0)\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n    return res.x if res.success else init_params", "language": "python", "parent_id": "a0c34d13-33bf-48b0-88af-cd6775556776", "generation": 2, "timestamp": 1754722895.7815716, "iteration_found": 36, "metrics": {"nmse": 0.06499964754092176, "nmae": 0.26808771028958334, "r2": 0.9350003524590782, "combined_score": 0.9389674468991557}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.06901119416867157, "nmae": 0.27241113720528354, "r2": 0.9309888058313285, "combined_score": 0.9354438994230189}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0690\n- nmae: 0.2724\n- r2: 0.9310\n- combined_score: 0.9354\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0658, nmae: 0.2704, r2: 0.9342, combined_score: 0.9383\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5522)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter multi-resource law:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n    params = [L0,\n              logA, log_alpha,\n              logB, log_beta,\n              logC, log_gamma]\n    Enforce A, alpha, B, beta, C, gamma > 0 by exponentiating their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0         = p[0]\n    A          = np.exp(p[1])\n    alpha      = np.exp(p[2])\n    B          = np.exp(p[3])\n    beta       = np.exp(p[4])\n    C          = np.exp(p[5])\n    gamma      = np.exp(p[6])\n\n    # denominator with small \u03b5 for numerical safety\n    denom = (P**alpha) + B * (V**beta) + C * (D**gamma) + 1e-12\n    pred  = L0 + A / denom\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B:\n      params = [L0,\n                logA, log_alpha,\n                logB, log_beta,\n                logC, log_gamma]\n    Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep exponents in a reasonable range\n    bounds = [\n        (None, None),  # L0 unconstrained\n        (-20, 20),     # logA\n        (-10, 10),     # log_alpha\n        (-20, 20),     # logB\n        (-10, 10),     # log_beta\n        (-20, 20),     # logC\n        (-10, 10)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial guess on failure\n    return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0658), Performs well on nmae (0.2704), Performs well on r2 (0.9342), Performs well on combined_score (0.9383)\n\n\n### Program 2 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using\n      Lossu = L0\n            + A * (P_non_vocab)^{-alpha}\n            + B * (num_characters)^{-beta}\n            + C * (vocab_size)^{-gamma}\n\n    where positivity of A, B, C, alpha, beta, gamma is enforced by\n    exponentiating the log\u2010parameters.\n    params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab, vocab_size, num_chars = X.T\n\n    L0, logA, logB, logC, log_alpha, log_beta, log_gamma = params\n    A, B, C = np.exp([logA, logB, logC])\n    alpha, beta, gamma = np.exp([log_alpha, log_beta, log_gamma])\n\n    # vectorized computation\n    return (L0\n            + A * P_non_vocab**(-alpha)\n            + B * num_chars**(-beta)\n            + C * vocab_size**(-gamma))\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing mean squared error\n    via L-BFGS-B. Returns the optimized params array of shape (7,).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: baseline = median(y), logs = 0, exponents ~1\n    init = np.array([\n        np.median(y),  # L0\n        0.0,           # logA\n        0.0,           # logB\n        0.0,           # logC\n       -1.0,          # log_alpha\n       -1.0,          # log_beta\n       -1.0           # log_gamma\n    ])\n    # No bounds on L0,A,B,C; restrict exponents to [-10,10] in log-space\n    bounds = [\n        (None, None),  # L0\n        (None, None),  # logA\n        (None, None),  # logB\n        (None, None),  # logC\n        (-10.0, 10.0), # log_alpha\n        (-10.0, 10.0), # log_beta\n        (-10.0, 10.0)  # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 3 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven\u2010parameter inverse\u2010power scaling law:\n      Lossu \u2248 L0\n            + A * P_non_vocab^(\u2212alpha)\n            + B * num_characters^(\u2212beta)\n            + C * vocab_size^(\u2212gamma)\n\n    params: array\u2010like of length 7\n      [L0,\n       logA, logB, logC,\n       log_alpha, log_beta, log_gamma]\n\n    data_points: array of shape (N,3) with columns\n      [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack & enforce positivity via exp()\n    L0       = p[0]\n    A        = np.exp(p[1])\n    B        = np.exp(p[2])\n    C        = np.exp(p[3])\n    alpha    = np.exp(p[4])\n    beta     = np.exp(p[5])\n    gamma    = np.exp(p[6])\n\n    # compute inverse\u2010power terms\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven\u2010parameter scaling law by minimizing MSE\n    between predicted and observed Lossu via L-BFGS-B.\n\n    Returns params = [L0, logA, logB, logC,\n                      log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Initial guess: L0 around median of y; logs for A,B,C ~ 0; exponents logs ~ -1\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,   # L0\n        0.0, 0.0, 0.0,   # logA, logB, logC\n       -1.0, -1.0, -1.0  # log_alpha, log_beta, log_gamma\n    ], dtype=float)\n\n    # Reasonable bounds: allow parameters to vary broadly\n    bounds = [\n        (None, None),        # L0\n        (None, None),        # logA\n        (None, None),        # logB\n        (None, None),        # logC\n        (-10.0, 10.0),       # log_alpha\n        (-10.0, 10.0),       # log_beta\n        (-10.0, 10.0)        # log_gamma\n    ]\n\n    def mse_loss(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        mse_loss,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000}\n    )\n\n    return result.x if result.success else init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 49999.7500)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter additive power-law scaling law:\n      Lossu = L0 \n            + A * P_non_vocab^{-alpha}\n            + B * num_characters^{-beta}\n            + C * vocab_size^{-gamma}\n\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    We exponentiate the log-parameters to enforce positivity.\n    Computations are done in log-space for stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V           = X[:, 1]\n    D           = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0      = p[0]\n    A       = np.exp(p[1])\n    B       = np.exp(p[2])\n    C       = np.exp(p[3])\n    alpha   = np.exp(p[4])\n    beta    = np.exp(p[5])\n    gamma   = np.exp(p[6])\n\n    # work in log-space: P^{-alpha} = exp(-alpha * log P), etc.\n    logP = np.log(P_non_vocab)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    term_P = A * np.exp(-alpha * logP)\n    term_D = B * np.exp(-beta  * logD)\n    term_V = C * np.exp(-gamma * logV)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via a two-stage optimizer:\n      1) global search with differential evolution\n      2) local refinement with L-BFGS-B\n\n    params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Objective: mean squared error\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Initial parameter guess\n    L0_init     = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # Bounds for params:\n    #   L0 free, logs of A,B,C free,\n    #   exponents confined to [-10,10] in log-space\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    # 1) Global search via Differential Evolution\n    de_result = differential_evolution(\n        mse_obj,\n        bounds,\n        strategy='best1bin',\n        maxiter=25,\n        popsize=15,\n        tol=1e-5,\n        polish=False  # we'll do our own local polish\n    )\n    x0 = de_result.x\n    best_mse = de_result.fun\n\n    # 2) Local refinement via L-BFGS-B\n    try:\n        lbfgs_result = minimize(\n            mse_obj,\n            x0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'ftol': 1e-12, 'gtol': 1e-8}\n        )\n        if lbfgs_result.success and lbfgs_result.fun < best_mse:\n            return lbfgs_result.x\n    except Exception:\n        # if anything goes wrong, fall back to DE result\n        pass\n\n    # Otherwise return the best found DE parameters\n    return x0\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5522, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter multi-resource law:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n    params = [L0,\n              logA, log_alpha,\n              logB, log_beta,\n              logC, log_gamma]\n    Enforce A, alpha, B, beta, C, gamma > 0 by exponentiating their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0         = p[0]\n    A          = np.exp(p[1])\n    alpha      = np.exp(p[2])\n    B          = np.exp(p[3])\n    beta       = np.exp(p[4])\n    C          = np.exp(p[5])\n    gamma      = np.exp(p[6])\n\n    # denominator with small \u03b5 for numerical safety\n    denom = (P**alpha) + B * (V**beta) + C * (D**gamma) + 1e-12\n    pred  = L0 + A / denom\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B:\n      params = [L0,\n                logA, log_alpha,\n                logB, log_beta,\n                logC, log_gamma]\n    Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep exponents in a reasonable range\n    bounds = [\n        (None, None),  # L0 unconstrained\n        (-20, 20),     # logA\n        (-10, 10),     # log_alpha\n        (-20, 20),     # logB\n        (-10, 10),     # log_beta\n        (-20, 20),     # logC\n        (-10, 10)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial guess on failure\n    return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 49999.7500, Type: High-Performer)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize, differential_evolution\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter additive power-law scaling law:\n      Lossu = L0 \n            + A * P_non_vocab^{-alpha}\n            + B * num_characters^{-beta}\n            + C * vocab_size^{-gamma}\n\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    We exponentiate the log-parameters to enforce positivity.\n    Computations are done in log-space for stability.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure 2D\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V           = X[:, 1]\n    D           = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0      = p[0]\n    A       = np.exp(p[1])\n    B       = np.exp(p[2])\n    C       = np.exp(p[3])\n    alpha   = np.exp(p[4])\n    beta    = np.exp(p[5])\n    gamma   = np.exp(p[6])\n\n    # work in log-space: P^{-alpha} = exp(-alpha * log P), etc.\n    logP = np.log(P_non_vocab)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    term_P = A * np.exp(-alpha * logP)\n    term_D = B * np.exp(-beta  * logD)\n    term_V = C * np.exp(-gamma * logV)\n\n    return L0 + term_P + term_D + term_V\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via a two-stage optimizer:\n      1) global search with differential evolution\n      2) local refinement with L-BFGS-B\n\n    params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Objective: mean squared error\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y)**2)\n\n    # Initial parameter guess\n    L0_init     = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # Bounds for params:\n    #   L0 free, logs of A,B,C free,\n    #   exponents confined to [-10,10] in log-space\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    # 1) Global search via Differential Evolution\n    de_result = differential_evolution(\n        mse_obj,\n        bounds,\n        strategy='best1bin',\n        maxiter=25,\n        popsize=15,\n        tol=1e-5,\n        polish=False  # we'll do our own local polish\n    )\n    x0 = de_result.x\n    best_mse = de_result.fun\n\n    # 2) Local refinement via L-BFGS-B\n    try:\n        lbfgs_result = minimize(\n            mse_obj,\n            x0,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'ftol': 1e-12, 'gtol': 1e-8}\n        )\n        if lbfgs_result.success and lbfgs_result.fun < best_mse:\n            return lbfgs_result.x\n    except Exception:\n        # if anything goes wrong, fall back to DE result\n        pass\n\n    # Otherwise return the best found DE parameters\n    return x0\n\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (100000.000), Excellent nmae (100000.000)\n\n\n\n# Current Program\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Multi\u2010resource rational scaling law with 7 parameters:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n\n    params layout:\n      [L0,\n       logA, log_alpha,\n       logB, log_beta,\n       logC, log_gamma]\n    (we exponentiate the logs to enforce positivity)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    P, V, D = X[:, 0], X[:, 1], X[:, 2]\n    p = np.asarray(params, float).ravel()\n\n    L0 = p[0]\n    # unpack and enforce positivity\n    A, alpha, B, beta, C, gamma = np.exp(p[1:])\n\n    # compute denominator safely\n    denom = P**alpha + B * V**beta + C * D**gamma + 1e-12\n    return L0 + A / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law by minimizing MSE via L-BFGS-B.\n    Returns the optimized params array of length 7.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    y = np.asarray(loss_values, float).ravel()\n\n    # Initial guesses: baseline ~ median loss, logs for A,B,C = 0, exponents small\n    L0_init = np.median(y)\n    logs_init = np.array([0.0,   # logA\n                          -3.0,  # log_alpha\n                           0.0,  # logB\n                          -3.0,  # log_beta\n                           0.0,  # logC\n                          -3.0]) # log_gamma\n    init_params = np.concatenate(([L0_init], logs_init))\n\n    # Bounds: L0 free; logs of A,C,B in [-20,20]; exponents in log-space [-10,10]\n    bounds = [\n        (None, None),\n        (-20.0, 20.0), (-10.0, 10.0),\n        (-20.0, 20.0), (-10.0, 10.0),\n        (-20.0, 20.0), (-10.0, 10.0)\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    res = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n    return res.x if res.success else init_params\n```"]}}}