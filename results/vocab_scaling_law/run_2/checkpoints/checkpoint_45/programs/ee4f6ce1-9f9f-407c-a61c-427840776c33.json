{"id": "ee4f6ce1-9f9f-407c-a61c-427840776c33", "code": "\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nWe fit this 7-parameter model with a single-pass iteratively reweighted\nleast squares (Huber\u2010style) to reduce outlier influence and improve generalization.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N,3)\n        Rows: [P_non_vocab, vocab_size, num_characters]\n    params : array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6]\n\n    Returns\n    -------\n    preds : ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    # log-transform (add tiny eps to avoid log(0))\n    eps = 1e-12\n    l1 = np.log(P_non   + eps)\n    l2 = np.log(N_chars + eps)\n    l3 = np.log(V       + eps)\n\n    # build design matrix: [1, l1, l2, l3, l1*l2, l1*l3, l2*l3]\n    F = np.stack([\n        np.ones_like(l1),\n        l1,\n        l2,\n        l3,\n        l1 * l2,\n        l1 * l3,\n        l2 * l3\n    ], axis=1)\n\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu via\n    a single-pass Huber-style iteratively reweighted least squares.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N,3)\n        Rows: [P_non_vocab, vocab_size, num_characters]\n    loss_values : array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns\n    -------\n    params_opt : ndarray, shape (7,)\n        Optimized parameters [p0..p6].\n    \"\"\"\n    # prepare data\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X_raw.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X_raw.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    # unpack and log-transform\n    eps = 1e-12\n    P_non   = X_raw[:, 0]\n    V       = X_raw[:, 1]\n    N_chars = X_raw[:, 2]\n    l1 = np.log(P_non   + eps)\n    l2 = np.log(N_chars + eps)\n    l3 = np.log(V       + eps)\n\n    # design matrix\n    F = np.stack([\n        np.ones_like(l1),\n        l1,\n        l2,\n        l3,\n        l1 * l2,\n        l1 * l3,\n        l2 * l3\n    ], axis=1)  # shape = (N,7)\n\n    # initial ordinary least squares (with tiny ridge for stability)\n    ridge = 1e-8\n    A0 = F.T.dot(F) + ridge * np.eye(7)\n    p = np.linalg.solve(A0, F.T.dot(y))\n\n    # compute residuals and Huber weights\n    r = y - F.dot(p)\n    mad = np.median(np.abs(r)) + eps\n    delta = 1.345 * mad\n    # weights: 1 for |r|<=delta, delta/|r| otherwise\n    w = np.where(np.abs(r) <= delta, 1.0, delta / np.abs(r))\n\n    # weighted least squares solve: (F^T W F + ridge I) p = F^T W y\n    W = w[:, None]  # shape (N,1)\n    FW = F * W       # each row i scaled by w[i]\n    A = F.T.dot(FW) + ridge * np.eye(7)\n    b = F.T.dot(w * y)\n    p = np.linalg.solve(A, b)\n\n    return p\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "618ed949-60f3-4056-af5c-4b3559dcd4b2", "generation": 3, "timestamp": 1754720902.4501584, "iteration_found": 36, "metrics": {"nmse": 2.8955863832548316, "nmae": 2.262578183465445, "r2": -1.8955863832548316, "combined_score": 0.25670076379219764}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 3.093984399963889, "nmae": 2.3147601212419047, "r2": -2.093984399963889, "combined_score": 0.2442608232725119}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 3.0940\n- nmae: 2.3148\n- r2: -2.0940\n- combined_score: 0.2443\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 3.1937, nmae: 2.3601, r2: -2.1937, combined_score: 0.2385\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 3.0940, nmae: 2.3148, r2: -2.0940, combined_score: 0.2443\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.0940, nmae: 2.3148, r2: -2.0940, combined_score: 0.2443\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.8898)\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis form has exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # linear model in transformed features\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu values\n    via ridge-regularized least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # Unpack and log-transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n    \n    # Closed-form solve: (F^T F + \u03bbI) p = F^T y\n    FT_F = F.T.dot(F)\n    A = FT_F + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    \n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.0940), Performs well on nmae (2.3148), Performs well on r2 (-2.0940), Performs well on combined_score (0.2443)\n\n\n### Program 2 (Score: 0.8898)\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis form has exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # linear model in transformed features\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu values\n    via ridge-regularized least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # Unpack and log-transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n    \n    # Closed-form solve: (F^T F + \u03bbI) p = F^T y\n    FT_F = F.T.dot(F)\n    A = FT_F + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    \n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.0940), Performs well on nmae (2.3148), Performs well on r2 (-2.0940), Performs well on combined_score (0.2443)\n\n\n### Program 3 (Score: 0.8996)\n```python\n\"\"\"\nEvolved scaling law discovery for LLM training scenarios.\n\nWe model Lossu as a low-order polynomial in the log-features of\n[P_non_vocab, vocab_size, num_characters], capturing first-order\neffects and second-order interactions, with exactly 7 parameters:\n\n    Lossu \u2248 c0\n          + c1 * log(P_non_vocab)\n          + c2 * log(vocab_size)\n          + c3 * log(num_characters)\n          + c4 * log(P_non_vocab) * log(vocab_size)\n          + c5 * log(P_non_vocab) * log(num_characters)\n          + c6 * log(vocab_size) * log(num_characters)\n\nThis linear-in-parameters form in the log domain is numerically stable,\neasy to fit with limited data (via ordinary least squares), and\nexpressive enough to capture key interactions without over-fitting.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N, 3)\n        Each row is [P_non_vocab, vocab_size, num_characters], all > 0.\n    params : array-like, length 7\n        [c0, c1, c2, c3, c4, c5, c6] as described above.\n\n    Returns\n    -------\n    preds : ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    # compute log-features (all positive inputs guaranteed)\n    l1 = np.log(P_non)\n    l2 = np.log(V)\n    l3 = np.log(N_chars)\n\n    # second-order interaction features\n    f12 = l1 * l2\n    f13 = l1 * l3\n    f23 = l2 * l3\n\n    # linear model in log-domain\n    # params: [c0, c1, c2, c3, c4, c5, c6]\n    preds = (\n        p[0]\n        + p[1] * l1\n        + p[2] * l2\n        + p[3] * l3\n        + p[4] * f12\n        + p[5] * f13\n        + p[6] * f23\n    )\n    return preds\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-feature scaling law to observed Lossu values.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N, 3)\n        Each row is [P_non_vocab, vocab_size, num_characters], all > 0.\n    loss_values : array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns\n    -------\n    params_opt : ndarray, shape (7,)\n        Optimized parameters [c0, c1, c2, c3, c4, c5, c6].\n    \"\"\"\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y     = np.asarray(loss_values, dtype=float).ravel()\n\n    if X_raw.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    # unpack and compute log-features\n    P_non    = X_raw[:, 0]\n    V        = X_raw[:, 1]\n    N_chars  = X_raw[:, 2]\n\n    l1 = np.log(P_non)\n    l2 = np.log(V)\n    l3 = np.log(N_chars)\n\n    # build design matrix with intercept, first-order logs, and second-order interactions\n    F = np.vstack([\n        np.ones_like(l1),  # intercept\n        l1,                # log P_non_vocab\n        l2,                # log vocab_size\n        l3,                # log num_characters\n        l1 * l2,           # interaction P_non \u00d7 vocab\n        l1 * l3,           # interaction P_non \u00d7 chars\n        l2 * l3            # interaction vocab \u00d7 chars\n    ]).T  # shape (N, 7)\n\n    # solve ordinary least squares: minimize ||F p - y||^2\n    params_opt, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params_opt\n\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.1937), Performs well on nmae (2.3601), Performs well on r2 (-2.1937), Performs well on combined_score (0.2385)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for vocab-aware LLM training scenarios.\n\nWe model Lossu with a concise sum of two power-law interactions plus an offset:\n\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture the interplay between model size, data scale, and vocabulary,\nand remains numerically stable.  We fit via bounded nonlinear least squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N, 3)\n        Each row is [P_non_vocab, vocab_size, num_characters].\n    params : array-like, length 7\n        [c0, c1, a, b, c_exp, c2, d] as described above.\n\n    Returns\n    -------\n    preds : ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # primary joint power-law term\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # pure-vocabulary power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N, 3)\n        Each row is [P_non_vocab, vocab_size, num_characters].\n    loss_values : array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns\n    -------\n    params_opt : ndarray, shape (7,)\n        Optimized parameters [c0, c1, a, b, c_exp, c2, d].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: offset near median loss, modest coefficients & exponents\n    c0_init = np.median(y)\n    init = np.array([c0_init,   # c0\n                     1.0,       # c1\n                     0.3,       # a\n                     0.3,       # b\n                     0.3,       # c_exp\n                     0.1,       # c2\n                     0.1])      # d\n\n    # Residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bound exponents to [-3, 3] to ensure numerical stability\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 106188.3307, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for vocab-aware LLM training scenarios.\n\nWe model Lossu with a concise sum of two power-law interactions plus an offset:\n\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture the interplay between model size, data scale, and vocabulary,\nand remains numerically stable.  We fit via bounded nonlinear least squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N, 3)\n        Each row is [P_non_vocab, vocab_size, num_characters].\n    params : array-like, length 7\n        [c0, c1, a, b, c_exp, c2, d] as described above.\n\n    Returns\n    -------\n    preds : ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # primary joint power-law term\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # pure-vocabulary power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N, 3)\n        Each row is [P_non_vocab, vocab_size, num_characters].\n    loss_values : array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns\n    -------\n    params_opt : ndarray, shape (7,)\n        Optimized parameters [c0, c1, a, b, c_exp, c2, d].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: offset near median loss, modest coefficients & exponents\n    c0_init = np.median(y)\n    init = np.array([c0_init,   # c0\n                     1.0,       # c1\n                     0.3,       # a\n                     0.3,       # b\n                     0.3,       # c_exp\n                     0.1,       # c2\n                     0.1])      # d\n\n    # Residual function for least squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # Bound exponents to [-3, 3] to ensure numerical stability\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105851937980.083), Excellent nmae (424752.323)\n\n\n\n# Current Program\n```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis form has exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # linear model in transformed features\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu values\n    via ridge-regularized least squares.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    \n    # Unpack and log-transform\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non   + eps)\n    lv = np.log(V       + eps)\n    ln = np.log(N_chars + eps)\n    \n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ], axis=1)  # shape = (N,7)\n    \n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n    \n    # Closed-form solve: (F^T F + \u03bbI) p = F^T y\n    FT_F = F.T.dot(F)\n    A = FT_F + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n    \n    # Solve for parameters\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nRevised scaling\u2010law discovery for LLM training:\nWe model Lossu as a linear function of log\u2010features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nWe fit this 7-parameter model with a single-pass iteratively reweighted\nleast squares (Huber\u2010style) to reduce outlier influence and improve generalization.\n\"\"\"\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N,3)\n        Rows: [P_non_vocab, vocab_size, num_characters]\n    params : array-like of length 7\n        [p0, p1, p2, p3, p4, p5, p6]\n\n    Returns\n    -------\n    preds : ndarray, shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack features\n    P_non   = X[:, 0]\n    V       = X[:, 1]\n    N_chars = X[:, 2]\n\n    # log-transform (add tiny eps to avoid log(0))\n    eps = 1e-12\n    l1 = np.log(P_non   + eps)\n    l2 = np.log(N_chars + eps)\n    l3 = np.log(V       + eps)\n\n    # build design matrix: [1, l1, l2, l3, l1*l2, l1*l3, l2*l3]\n    F = np.stack([\n        np.ones_like(l1),\n        l1,\n        l2,\n        l3,\n        l1 * l2,\n        l1 * l3,\n        l2 * l3\n    ], axis=1)\n\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter linear-in-log scaling law to observed Lossu via\n    a single-pass Huber-style iteratively reweighted least squares.\n\n    Parameters\n    ----------\n    data_points : array-like, shape (N,3)\n        Rows: [P_non_vocab, vocab_size, num_characters]\n    loss_values : array-like, shape (N,)\n        Observed Lossu values.\n\n    Returns\n    -------\n    params_opt : ndarray, shape (7,)\n        Optimized parameters [p0..p6].\n    \"\"\"\n    # prepare data\n    X_raw = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X_raw.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X_raw.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns: [P_non_vocab, vocab_size, num_characters]\")\n\n    # unpack and log-transform\n    eps = 1e-12\n    P_non   = X_raw[:, 0]\n    V       = X_raw[:, 1]\n    N_chars = X_raw[:, 2]\n    l1 = np.log(P_non   + eps)\n    l2 = np.log(N_chars + eps)\n    l3 = np.log(V       + eps)\n\n    # design matrix\n    F = np.stack([\n        np.ones_like(l1),\n        l1,\n        l2,\n        l3,\n        l1 * l2,\n        l1 * l3,\n        l2 * l3\n    ], axis=1)  # shape = (N,7)\n\n    # initial ordinary least squares (with tiny ridge for stability)\n    ridge = 1e-8\n    A0 = F.T.dot(F) + ridge * np.eye(7)\n    p = np.linalg.solve(A0, F.T.dot(y))\n\n    # compute residuals and Huber weights\n    r = y - F.dot(p)\n    mad = np.median(np.abs(r)) + eps\n    delta = 1.345 * mad\n    # weights: 1 for |r|<=delta, delta/|r| otherwise\n    w = np.where(np.abs(r) <= delta, 1.0, delta / np.abs(r))\n\n    # weighted least squares solve: (F^T W F + ridge I) p = F^T W y\n    W = w[:, None]  # shape (N,1)\n    FW = F * W       # each row i scaled by w[i]\n    A = F.T.dot(FW) + ridge * np.eye(7)\n    b = F.T.dot(w * y)\n    p = np.linalg.solve(A, b)\n\n    return p\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key improvements:\n\n1. **Robust fitting via one\u2010pass IRLS**  \n   We begin with a small\u2010ridge ordinary least squares estimate, measure residuals, then compute Huber\u2010style weights to downweight outliers and resolve a weighted least squares problem. This reduces the influence of extreme Lossu measurements and typically yields lower NMSE/NMAE and better R\u00b2.\n\n2. **Numerical stability**  \n   A tiny ridge (`1e-8`) in both the initial and weighted solves prevents ill\u2010conditioning when vocabulary sizes or parameter counts vary by orders of magnitude.\n\n3. **Simplicity & determinism**  \n   The algorithm remains closed\u2010form in each step (no iterative line searches), uses exactly 7 parameters, and keeps the same input/output API.\n\nThis revised approach typically yields better predictive accuracy (lower NMSE/NMAE, higher R\u00b2) on diverse vocabulary configurations while maintaining the model\u2019s interpretability and simplicity."]}}}