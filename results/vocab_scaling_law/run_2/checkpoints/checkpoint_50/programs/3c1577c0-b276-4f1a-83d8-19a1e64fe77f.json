{"id": "3c1577c0-b276-4f1a-83d8-19a1e64fe77f", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7\u2010parameter log\u2010quadratic scaling law:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(vocab_size)\n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    Args:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,)\n\n    Returns:\n      preds: ndarray, shape (N,), predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # take safe logs\n    eps = 1e-12\n    P = np.log(np.clip(X[:, 0], eps, None))\n    V = np.log(np.clip(X[:, 1], eps, None))\n    D = np.log(np.clip(X[:, 2], eps, None))\n\n    # build design matrix: [1, P, V, D, P^2, V^2, D^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = P\n    Phi[:, 2] = V\n    Phi[:, 3] = D\n    Phi[:, 4] = P * P\n    Phi[:, 5] = V * V\n    Phi[:, 6] = D * D\n\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010quadratic model by ordinary least squares.\n\n    Solves:  min_params ||Phi\u00b7params - loss_values||^2\n\n    Returns:\n      params: ndarray, shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data points\")\n\n    # safe logs\n    eps = 1e-12\n    logP = np.log(np.clip(X[:, 0], eps, None))\n    logV = np.log(np.clip(X[:, 1], eps, None))\n    logD = np.log(np.clip(X[:, 2], eps, None))\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = logP\n    Phi[:, 2] = logV\n    Phi[:, 3] = logD\n    Phi[:, 4] = logP * logP\n    Phi[:, 5] = logV * logV\n    Phi[:, 6] = logD * logD\n\n    # solve in closed form\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "8bcd68a1-e79f-4a8f-9e9e-a3448b23e311", "generation": 2, "timestamp": 1754722980.7125354, "iteration_found": 50, "metrics": {"nmse": 0.030339510659446307, "nmae": 0.16165764084386294, "r2": 0.9696604893405537, "combined_score": 0.9705538705003866}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.06901119416867157, "nmae": 0.27241113720528354, "r2": 0.9309888058313285, "combined_score": 0.9354438994230189}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.0690\n- nmae: 0.2724\n- r2: 0.9310\n- combined_score: 0.9354\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0588, nmae: 0.2200, r2: 0.9412, combined_score: 0.9445\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0303, nmae: 0.1617, r2: 0.9697, combined_score: 0.9706\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 2 (Score: 0.5331)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-quadratic scaling law:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(vocab_size)\n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of shape (7,) or (T,7)\n\n    Returns:\n      preds: ndarray of shape (N,) if params is (7,),\n             or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # logs of resources\n    logs = np.log(X)  # shape (N,3)\n    # build design matrix: [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs**2\n    design = np.hstack([ones, logs, quad])  # shape (N,7)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        # single set of coefficients\n        return design.dot(p)\n    elif p.ndim == 2 and p.shape[1] == 7:\n        # multiple coefficient sets\n        # design: (N,7), p.T: (7,T) -> (N,T)\n        return design.dot(p.T)\n    else:\n        raise ValueError(f\"params must have shape (7,) or (T,7), got {p.shape}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic model by ordinary least squares.\n\n    Solves:   design_matrix @ params \u2248 loss_values\n\n    Returns:\n      params: ndarray of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data points\")\n\n    # build logs and design matrix\n    logs = np.log(X)             # (N,3)\n    N = logs.shape[0]\n    ones = np.ones((N,1), dtype=logs.dtype)\n    quad = logs**2               # (N,3)\n    F = np.hstack([ones, logs, quad])  # (N,7)\n\n    # closed-form least squares\n    # params = argmin ||F\u00b7params - y||^2\n    params, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0303), Performs well on nmae (0.1617), Performs well on r2 (0.9697), Performs well on combined_score (0.9706)\n\n\n### Program 3 (Score: 0.5411)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      f = k0\n          + alpha * log(P_non_vocab)\n          + beta  * log(num_characters)\n          + gamma * log(vocab_size)\n          + delta_d * [log(num_characters)]^2\n          + delta_v * [log(vocab_size)]^2\n      Lossu = bias - exp(f)\n\n    Inputs:\n      data_points: array-like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7: \n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = np.ravel(params)\n    # safeguard against zero or negative inputs\n    eps = 1e-12\n    P = X[:, 0].clip(min=eps)\n    V = X[:, 1].clip(min=eps)\n    D = X[:, 2].clip(min=eps)\n\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * (logD ** 2)\n         + delta_v * (logV ** 2))\n\n    return bias - np.exp(f)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu: y_t = log(-Lossu)\n      2. Build design matrix columns:\n         [1,\n          log(P_non_vocab),\n          log(num_characters),\n          log(vocab_size),\n          (log(num_characters))^2,\n          (log(vocab_size))^2]\n      3. Solve linear least squares for [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover bias by matching mean residual in original Lossu space.\n\n    Inputs:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: ndarray of length 7:\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,3) and match length of loss_values\")\n\n    # safeguard against invalid logs\n    eps = 1e-12\n    P = X[:, 0].clip(min=eps)\n    V = X[:, 1].clip(min=eps)\n    D = X[:, 2].clip(min=eps)\n\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # target transform: Lossu is negative or zero improvement over unigram\n    y_pos = (-y).clip(min=eps)\n    y_t = np.log(y_pos)\n\n    # design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.column_stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD ** 2,\n        logV ** 2\n    ])  # shape (N,6)\n\n    # solve least squares\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # reconstruct prediction without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD ** 2)\n             + delta_v * (logV ** 2))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # recover additive bias to minimize mean residual\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=np.float64)\n```\nKey features: Performs well on nmse (0.0588), Performs well on nmae (0.2200), Performs well on r2 (0.9412), Performs well on combined_score (0.9445)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.5411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nEnhanced scaling law for LLM training scenarios:\nWe model Lossu (negative improvement over unigram) as:\n\n    Lossu \u2248 bias - exp( k0\n                        + alpha * log(P_non_vocab)\n                        + beta  * log(num_characters)\n                        + gamma * log(vocab_size)\n                        + delta_d * (log(num_characters))^2\n                        + delta_v * (log(vocab_size))^2\n                      )\n\nThis 7-parameter form captures simple power\u2010law behavior plus\nquadratic curvature in log-characters and log-vocab to improve fit \nacross diverse regimes, while remaining numerically stable and \neasy to fit in closed form.\n\nParameters (7 total):\n  k0      \u2014 base log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters (log-linear)\n  beta    \u2014 exponent on number of characters (log-linear)\n  gamma   \u2014 exponent on vocabulary size (log-linear)\n  delta_d \u2014 quadratic coefficient on log(num_characters)\n  delta_v \u2014 quadratic coefficient on log(vocab_size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given model/data scales and fitted parameters.\n\n    Inputs:\n      data_points: array-like shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,) or (T,7)\n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: array shape (N,) if single param vector,\n            or (N,T) if multiple param sets provided.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]     # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n\n    # Unpack parameters (each shape (T,))\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # Numerical safeguard for log\n    eps = 1e-12\n    logP = np.log(P + eps)            # (N,)\n    logD = np.log(D + eps)            # (N,)\n    logV = np.log(V + eps)            # (N,)\n    logD2 = logD * logD               # (N,)\n    logV2 = logV * logV               # (N,)\n\n    # Expand to (N,T) for vectorized eval\n    # shape manipulations: (N,1) * (1,T) -> (N,T)\n    logP = logP[:, None]\n    logD = logD[:, None]\n    logV = logV[:, None]\n    logD2 = logD2[:, None]\n    logV2 = logV2[:, None]\n\n    k0   = k0[None, :]\n    alpha   = alpha[None, :]\n    beta    = beta[None, :]\n    gamma   = gamma[None, :]\n    delta_d = delta_d[None, :]\n    delta_v = delta_v[None, :]\n    bias    = bias[None, :]\n\n    # Compute exponent f = k0 + \u03b1 logP + \u03b2 logD + \u03b3 logV + \u03b4_d logD^2 + \u03b4_v logV^2\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * logD2\n         + delta_v * logV2)\n\n    # Final prediction: bias - exp(f)\n    pred = bias - np.exp(f)\n\n    # If only one parameter set, return (N,), else (N,T)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu -> y' = log(-Lossu + eps)\n      2. Build design matrix with [1, logP, logD, logV, (logD)^2, (logV)^2]\n      3. Solve least squares for linear coefficients [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover additive bias by matching mean residual in original Lossu space\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match data_points\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # Numerical safeguard\n    eps = 1e-12\n\n    # Log-transform features\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # Transform target: since Lossu < 0, -y > 0\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # Build design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.stack([np.ones_like(logP),\n                  logP,\n                  logD,\n                  logV,\n                  logD * logD,\n                  logV * logV],\n                 axis=1)  # shape (N,6)\n\n    # Solve linear least squares: A @ coeffs \u2248 y_t\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # Compute fitted Lossu without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD * logD)\n             + delta_v * (logV * logV))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # Recover additive bias to minimize mean error\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5411)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA 7-parameter scaling law capturing power-law behavior with\nquadratic curvature in log-scale for characters and vocabulary size:\n\n    Lossu \u2248 bias \u2212 exp(f)\n    where f = k0\n            + \u03b1\u00b7log(P_non_vocab)\n            + \u03b2\u00b7log(num_characters)\n            + \u03b3\u00b7log(vocab_size)\n            + \u03b4_d\u00b7[log(num_characters)]\u00b2\n            + \u03b4_v\u00b7[log(vocab_size)]\u00b2\n\nParameters:\n  k0      \u2014 base log-scale coefficient\n  \u03b1       \u2014 exponent on non-vocabulary parameters\n  \u03b2       \u2014 exponent on number of characters\n  \u03b3       \u2014 exponent on vocabulary size\n  \u03b4_d     \u2014 quadratic coefficient on log(characters)\n  \u03b4_v     \u2014 quadratic coefficient on log(vocab size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data scales.\n\n    Inputs:\n      data_points: array-like (N,3) [P_non_vocab, vocab_size, num_characters]\n      params:      array-like (7,) or (T,7)\n                   [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias]\n\n    Returns:\n      pred: shape (N,) if params is (7,),\n            or (N,T) if params is (T,7).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # safe log\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logD2 = logD * logD\n    logV2 = logV * logV\n\n    # compute f for each param-set\n    # shape manipulations broadcast (N,1) with (T,)\n    f = (\n        k0[None, :]\n        + alpha[None, :] * logP[:, None]\n        + beta[None, :]  * logD[:, None]\n        + gamma[None, :] * logV[:, None]\n        + delta_d[None, :] * logD2[:, None]\n        + delta_v[None, :] * logV2[:, None]\n    )\n\n    pred = bias[None, :] - np.exp(f)\n\n    # if single parameter set, collapse to (N,)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model in closed form via linear least squares\n    in log-space, then recover the additive bias.\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must match data_points length\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # safe logs\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # since Lossu < 0, transform target to positive space\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # design matrix: [1, logP, logD, logV, (logD)^2, (logV)^2]\n    A = np.column_stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD * logD,\n        logV * logV\n    ])\n\n    # linear least squares for k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # recover additive bias by matching mean residual in original Lossu space\n    f_hat = (\n        k0\n        + alpha * logP\n        + beta  * logD\n        + gamma * logV\n        + delta_d * (logD * logD)\n        + delta_v * (logV * logV)\n    )\n    y_pred_no_bias = -np.exp(f_hat)\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from:\n       Lossu \u2248 a0 \n             + a1\u00b7log(P_non_vocab) \n             + a2\u00b7log(vocab_size) \n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    params: array_like of length 7 [a0, a1, a2, a3, a4, a5, a6]\n    data_points: (N,3) array: [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # take logs of each positive feature\n    # X[:,0]=P_non_vocab, X[:,1]=vocab_size, X[:,2]=num_characters\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix of shape (N,7)\n    # columns: [1, L0, L1, L2, L0^2, L1^2, L2^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # linear combination\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter quadratic\u2013in\u2013log model above by ordinary\n    least squares. Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # build the same design matrix as in scaling_law_func\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L0\n    Phi[:, 5] = L1 * L1\n    Phi[:, 6] = L2 * L2\n\n    # solve least-squares; rcond=None uses default numpy cutoff\n    # for numerical stability one could add tiny ridge, e.g. \u03bb=1e-8\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 15532989284.4503, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nScaling law discovery for LLM finetuning scenarios\nInitial program with a simple power law form that can be evolved\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    N, F = X.shape\n    params = np.asarray(params)\n\n    if params.ndim == 1:\n        params = params[None, :]                         # (1, P)\n    T, P = params.shape\n\n    coeffs    = params[:, :F]                            # (T, F)\n    exponents = params[:, F:2*F]                         # (T, F)\n    bias      = params[:, -1]                            # (T,)\n\n    pred = (coeffs[None, :, :] * (X[:, None, :] ** exponents[None, :, :])).sum(axis=2) + bias[None, :]\n\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n\n    X = np.atleast_2d(np.asarray(data_points))           # (N, F)\n    y = np.asarray(loss_values)\n    N, F = X.shape\n    P = 2 * F + 1\n\n    if y.ndim == 1:\n        y2d = y[:, None]\n    else:\n        y2d = y\n    T = y2d.shape[1]\n\n    init = np.ones((T, P))\n\n    def objective(flat_params):\n        params = flat_params.reshape(T, P)\n        pred = scaling_law_func(X, params)               # (N, T)\n        mse = np.mean((pred - y2d) ** 2)\n        return mse\n\n    result = minimize(objective, init.ravel(), method='BFGS')\n    params_opt = result.x.reshape(T, P) if result.success else init\n\n    return params_opt[0] if T == 1 else params_opt\n# EVOLVE-BLOCK-END\n\n```\nUnique approach: Excellent nmse (6214673822698360012800.000), Excellent nmae (62131957137.801), Alternative r2 approach\n\n\n### Inspiration 3 (Score: 0.5411, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA 7-parameter scaling law capturing power-law behavior with\nquadratic curvature in log-scale for characters and vocabulary size:\n\n    Lossu \u2248 bias \u2212 exp(f)\n    where f = k0\n            + \u03b1\u00b7log(P_non_vocab)\n            + \u03b2\u00b7log(num_characters)\n            + \u03b3\u00b7log(vocab_size)\n            + \u03b4_d\u00b7[log(num_characters)]\u00b2\n            + \u03b4_v\u00b7[log(vocab_size)]\u00b2\n\nParameters:\n  k0      \u2014 base log-scale coefficient\n  \u03b1       \u2014 exponent on non-vocabulary parameters\n  \u03b2       \u2014 exponent on number of characters\n  \u03b3       \u2014 exponent on vocabulary size\n  \u03b4_d     \u2014 quadratic coefficient on log(characters)\n  \u03b4_v     \u2014 quadratic coefficient on log(vocab size)\n  bias    \u2014 additive offset on final Lossu\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data scales.\n\n    Inputs:\n      data_points: array-like (N,3) [P_non_vocab, vocab_size, num_characters]\n      params:      array-like (7,) or (T,7)\n                   [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias]\n\n    Returns:\n      pred: shape (N,) if params is (7,),\n            or (N,T) if params is (T,7).\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.atleast_2d(np.asarray(params, dtype=float))\n    if p.shape[1] != 7:\n        raise ValueError(\"params must have length 7\")\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = p.T\n\n    # safe log\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    logD2 = logD * logD\n    logV2 = logV * logV\n\n    # compute f for each param-set\n    # shape manipulations broadcast (N,1) with (T,)\n    f = (\n        k0[None, :]\n        + alpha[None, :] * logP[:, None]\n        + beta[None, :]  * logD[:, None]\n        + gamma[None, :] * logV[:, None]\n        + delta_d[None, :] * logD2[:, None]\n        + delta_v[None, :] * logV2[:, None]\n    )\n\n    pred = bias[None, :] - np.exp(f)\n\n    # if single parameter set, collapse to (N,)\n    if pred.shape[1] == 1:\n        return pred[:, 0]\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter model in closed form via linear least squares\n    in log-space, then recover the additive bias.\n\n    Returns:\n      params: ndarray shape (7,)\n              [k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values must match data_points length\")\n\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # safe logs\n    eps = 1e-12\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n\n    # since Lossu < 0, transform target to positive space\n    y_pos = -y\n    y_pos = np.clip(y_pos, eps, None)\n    y_t = np.log(y_pos)\n\n    # design matrix: [1, logP, logD, logV, (logD)^2, (logV)^2]\n    A = np.column_stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD * logD,\n        logV * logV\n    ])\n\n    # linear least squares for k0, \u03b1, \u03b2, \u03b3, \u03b4_d, \u03b4_v\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # recover additive bias by matching mean residual in original Lossu space\n    f_hat = (\n        k0\n        + alpha * logP\n        + beta  * logD\n        + gamma * logV\n        + delta_d * (logD * logD)\n        + delta_v * (logV * logV)\n    )\n    y_pred_no_bias = -np.exp(f_hat)\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 4 (Score: 0.5331, Type: Experimental)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter log-quadratic scaling law:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(vocab_size)\n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of shape (7,) or (T,7)\n\n    Returns:\n      preds: ndarray of shape (N,) if params is (7,),\n             or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n    # logs of resources\n    logs = np.log(X)  # shape (N,3)\n    # build design matrix: [1, logP, logV, logD, (logP)^2, (logV)^2, (logD)^2]\n    N = logs.shape[0]\n    ones = np.ones((N, 1), dtype=logs.dtype)\n    quad = logs**2\n    design = np.hstack([ones, logs, quad])  # shape (N,7)\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        # single set of coefficients\n        return design.dot(p)\n    elif p.ndim == 2 and p.shape[1] == 7:\n        # multiple coefficient sets\n        # design: (N,7), p.T: (7,T) -> (N,T)\n        return design.dot(p.T)\n    else:\n        raise ValueError(f\"params must have shape (7,) or (T,7), got {p.shape}\")\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic model by ordinary least squares.\n\n    Solves:   design_matrix @ params \u2248 loss_values\n\n    Returns:\n      params: ndarray of shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data points\")\n\n    # build logs and design matrix\n    logs = np.log(X)             # (N,3)\n    N = logs.shape[0]\n    ones = np.ones((N,1), dtype=logs.dtype)\n    quad = logs**2               # (N,3)\n    F = np.hstack([ones, logs, quad])  # (N,7)\n\n    # closed-form least squares\n    # params = argmin ||F\u00b7params - y||^2\n    params, *_ = np.linalg.lstsq(F, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 5 (Score: 0.5411, Type: Experimental)\n```python\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      f = k0\n          + alpha * log(P_non_vocab)\n          + beta  * log(num_characters)\n          + gamma * log(vocab_size)\n          + delta_d * [log(num_characters)]^2\n          + delta_v * [log(vocab_size)]^2\n      Lossu = bias - exp(f)\n\n    Inputs:\n      data_points: array-like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7: \n                   [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n\n    Returns:\n      pred: ndarray of shape (N,) with predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    k0, alpha, beta, gamma, delta_d, delta_v, bias = np.ravel(params)\n    # safeguard against zero or negative inputs\n    eps = 1e-12\n    P = X[:, 0].clip(min=eps)\n    V = X[:, 1].clip(min=eps)\n    D = X[:, 2].clip(min=eps)\n\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    f = (k0\n         + alpha * logP\n         + beta  * logD\n         + gamma * logV\n         + delta_d * (logD ** 2)\n         + delta_v * (logV ** 2))\n\n    return bias - np.exp(f)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law in closed form:\n      1. Transform Lossu: y_t = log(-Lossu)\n      2. Build design matrix columns:\n         [1,\n          log(P_non_vocab),\n          log(num_characters),\n          log(vocab_size),\n          (log(num_characters))^2,\n          (log(vocab_size))^2]\n      3. Solve linear least squares for [k0, alpha, beta, gamma, delta_d, delta_v]\n      4. Recover bias by matching mean residual in original Lossu space.\n\n    Inputs:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params: ndarray of length 7:\n              [k0, alpha, beta, gamma, delta_d, delta_v, bias]\n    \"\"\"\n    X = np.asarray(data_points, dtype=np.float64)\n    y = np.asarray(loss_values, dtype=np.float64).ravel()\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if X.shape[1] != 3 or X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points must be (N,3) and match length of loss_values\")\n\n    # safeguard against invalid logs\n    eps = 1e-12\n    P = X[:, 0].clip(min=eps)\n    V = X[:, 1].clip(min=eps)\n    D = X[:, 2].clip(min=eps)\n\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # target transform: Lossu is negative or zero improvement over unigram\n    y_pos = (-y).clip(min=eps)\n    y_t = np.log(y_pos)\n\n    # design matrix: [1, logP, logD, logV, logD^2, logV^2]\n    A = np.column_stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logD ** 2,\n        logV ** 2\n    ])  # shape (N,6)\n\n    # solve least squares\n    coeffs, *_ = np.linalg.lstsq(A, y_t, rcond=None)\n    k0, alpha, beta, gamma, delta_d, delta_v = coeffs\n\n    # reconstruct prediction without bias\n    f_hat = (k0\n             + alpha * logP\n             + beta  * logD\n             + gamma * logV\n             + delta_d * (logD ** 2)\n             + delta_v * (logV ** 2))\n    y_pred_no_bias = -np.exp(f_hat)\n\n    # recover additive bias to minimize mean residual\n    bias = np.mean(y - y_pred_no_bias)\n\n    return np.array([k0, alpha, beta, gamma, delta_d, delta_v, bias], dtype=np.float64)\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter scaling law:\n      Lossu = L0 \n            + A * P_non_vocab^(-alpha)\n            + B * num_characters^(-beta)\n            + C * vocab_size^(-gamma)\n    Positivity of A, B, C, alpha, beta, gamma is enforced via exponentiation.\n    params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V           = X[:, 1]\n    D           = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0    = p[0]\n    A     = np.exp(p[1])\n    B     = np.exp(p[2])\n    C     = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute the predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B and MSE minimization.\n    Returns optimized parameters [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initialize: baseline at median loss, zero logs for A/B/C, moderate negative exponents\n    L0_init      = np.median(y)\n    init_params  = np.array([L0_init, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0])\n\n    # Bounds: L0 free, logs of A/B/C free, exponents in a reasonable range\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback if optimization fails\n        return init_params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7\u2010parameter log\u2010quadratic scaling law:\n      Lossu \u2248 a0\n             + a1\u00b7log(P_non_vocab)\n             + a2\u00b7log(vocab_size)\n             + a3\u00b7log(num_characters)\n             + a4\u00b7[log(P_non_vocab)]^2\n             + a5\u00b7[log(vocab_size)]^2\n             + a6\u00b7[log(num_characters)]^2\n\n    Args:\n      data_points: array-like, shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like, shape (7,)\n\n    Returns:\n      preds: ndarray, shape (N,), predicted Lossu values\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    # take safe logs\n    eps = 1e-12\n    P = np.log(np.clip(X[:, 0], eps, None))\n    V = np.log(np.clip(X[:, 1], eps, None))\n    D = np.log(np.clip(X[:, 2], eps, None))\n\n    # build design matrix: [1, P, V, D, P^2, V^2, D^2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = P\n    Phi[:, 2] = V\n    Phi[:, 3] = D\n    Phi[:, 4] = P * P\n    Phi[:, 5] = V * V\n    Phi[:, 6] = D * D\n\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010quadratic model by ordinary least squares.\n\n    Solves:  min_params ||Phi\u00b7params - loss_values||^2\n\n    Returns:\n      params: ndarray, shape (7,)\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    if X.shape[1] != 3:\n        raise ValueError(f\"data_points must have shape (N,3), got {X.shape}\")\n\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"loss_values length must match number of data points\")\n\n    # safe logs\n    eps = 1e-12\n    logP = np.log(np.clip(X[:, 0], eps, None))\n    logV = np.log(np.clip(X[:, 1], eps, None))\n    logD = np.log(np.clip(X[:, 2], eps, None))\n\n    # build design matrix\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = logP\n    Phi[:, 2] = logV\n    Phi[:, 3] = logD\n    Phi[:, 4] = logP * logP\n    Phi[:, 5] = logV * logV\n    Phi[:, 6] = logD * logD\n\n    # solve in closed form\n    params, *_ = np.linalg.lstsq(Phi, y, rcond=None)\n    return params\n# EVOLVE-BLOCK-END\n```\n\nExplanation of key changes:\n- Switched from a complicated non\u2010linear power\u2010law fit (with SciPy minimization) back to a simple 7-parameter log\u2010quadratic form, which has proven very strong R\u00b2 in prior versions.\n- Uses closed\u2010form ordinary least squares (`np.linalg.lstsq`), eliminating iterative optimization and improving numerical stability.\n- Adds robust safeguards for zero or negative inputs via clipping before the log transform.\n- Maintains exactly 7 parameters and the original function signatures."]}}}