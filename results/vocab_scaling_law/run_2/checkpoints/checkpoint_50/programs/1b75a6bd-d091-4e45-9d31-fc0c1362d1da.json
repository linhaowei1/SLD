{"id": "1b75a6bd-d091-4e45-9d31-fc0c1362d1da", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter multi-resource scaling law:\n      Lossu \u2248 L0 + A / (P^\u03b1 + B\u00b7V^\u03b2 + C\u00b7D^\u03b3 + \u03b5)\n\n    params = [L0,\n              logA, log\u03b1,\n              logB, log\u03b2,\n              logC, log\u03b3]\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    All scale factors A,B,C and exponents \u03b1,\u03b2,\u03b3 are enforced >0\n    via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L0    = p[0]\n    A     = np.exp(p[1])\n    alpha = np.exp(p[2])\n    B     = np.exp(p[3])\n    beta  = np.exp(p[4])\n    C     = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # small \u03b5 added for numerical stability\n    denom = (P ** alpha) + B * (V ** beta) + C * (D ** gamma) + 1e-12\n    return L0 + A / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B, minimizing MSE.\n    Returns params = [L0, logA, log\u03b1, logB, log\u03b2, logC, log\u03b3].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.ravel(loss_values).astype(float)\n\n    # Initial parameter guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep logs/exponents in a stable range\n    bounds = [\n        (None, None),   # L0\n        (-20, 20),      # logA\n        (-10, 10),      # log\u03b1\n        (-20, 20),      # logB\n        (-10, 10),      # log\u03b2\n        (-20, 20),      # logC\n        (-10, 10)       # log\u03b3\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4129df8f-2dbc-4049-97e7-a6b70e536331", "generation": 4, "timestamp": 1754722902.0365942, "iteration_found": 34, "metrics": {"nmse": 0.06578131443623163, "nmae": 0.27044976395124065, "r2": 0.9342186855637684, "combined_score": 0.9382787880166317}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.15547963954612912, "nmae": 0.4257798374280161, "r2": 0.8445203604538709, "combined_score": 0.8654414719006202}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1555\n- nmae: 0.4258\n- r2: 0.8445\n- combined_score: 0.8654\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.1555, nmae: 0.4258, r2: 0.8445, combined_score: 0.8654\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0658, nmae: 0.2704, r2: 0.9342, combined_score: 0.9383\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5522)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter multi-resource law:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n    params = [L0,\n              logA, log_alpha,\n              logB, log_beta,\n              logC, log_gamma]\n    Enforce A, alpha, B, beta, C, gamma > 0 by exponentiating their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0         = p[0]\n    A          = np.exp(p[1])\n    alpha      = np.exp(p[2])\n    B          = np.exp(p[3])\n    beta       = np.exp(p[4])\n    C          = np.exp(p[5])\n    gamma      = np.exp(p[6])\n\n    # denominator with small \u03b5 for numerical safety\n    denom = (P**alpha) + B * (V**beta) + C * (D**gamma) + 1e-12\n    pred  = L0 + A / denom\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B:\n      params = [L0,\n                logA, log_alpha,\n                logB, log_beta,\n                logC, log_gamma]\n    Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep exponents in a reasonable range\n    bounds = [\n        (None, None),  # L0 unconstrained\n        (-20, 20),     # logA\n        (-10, 10),     # log_alpha\n        (-20, 20),     # logB\n        (-10, 10),     # log_beta\n        (-20, 20),     # logC\n        (-10, 10)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial guess on failure\n    return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0658), Performs well on nmae (0.2704), Performs well on r2 (0.9342), Performs well on combined_score (0.9383)\n\n\n### Program 2 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 3 (Score: 0.5728)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter interaction\u2013in\u2013log model:\n      Let L0 = log(P_non_vocab), L1 = log(vocab_size), L2 = log(num_characters).\n      Then\n        Lossu \u2248 b0\n             + b1\u00b7L0\n             + b2\u00b7L1\n             + b3\u00b7L2\n             + b4\u00b7(L0\u00b7L1)\n             + b5\u00b7(L0\u00b7L2)\n             + b6\u00b7(L1\u00b7L2)\n\n    params: array_like of length 7 [b0, b1, b2, b3, b4, b5, b6]\n    data_points: array of shape (N,3) or (3,) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # logs of positive features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # design matrix: [1, L0, L1, L2, L0*L1, L0*L2, L1*L2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction\u2013in\u2013log model by ridge-regularized\n    least squares. Returns fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute log-features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix Phi of shape (N,7)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    # ridge regularization for stability\n    # \u03bb is small to avoid over-penalizing; scaled by trace(Phi^T Phi)\n    lambda_reg = 1e-8 * np.trace(Phi.T.dot(Phi)) / 7.0\n\n    # solve (Phi^T Phi + \u03bbI) w = Phi^T y\n    A = Phi.T.dot(Phi)\n    A[np.diag_indices_from(A)] += lambda_reg\n    b = Phi.T.dot(y)\n\n    # solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1555), Performs well on nmae (0.4258), Performs well on r2 (0.8445), Performs well on combined_score (0.8654)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6250)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter scaling law:\n      Lossu = L_inf\n            + A * P^{-alpha} * D^{-beta}\n            + B * V^{-gamma}\n\n    where\n      P = non-vocabulary parameters,\n      D = number of characters processed,\n      V = vocabulary size.\n\n    params = [L_inf,\n              logA,    # scale of P-D interaction term\n              log_alpha,\n              log_beta,\n              logB,    # scale of vocab term\n              log_gamma]\n    All A,B>0 via exp(log\u00b7), all exponents>0 via exp(log\u00b7).\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L_inf    = p[0]\n    A        = np.exp(p[1])\n    alpha    = np.exp(p[2])\n    beta     = np.exp(p[3])\n    B        = np.exp(p[4])\n    gamma    = np.exp(p[5])\n\n    # compute in log\u2010space for stability\n    logP = np.log(P_non_vocab)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    term1 = A * np.exp(-alpha * logP - beta * logD)\n    term2 = B * np.exp(-gamma * logV)\n\n    return L_inf + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law via L-BFGS-B.\n    Returns the optimized params array of length 6.\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.ravel(np.asarray(loss_values, dtype=float))\n\n    # initial guess\n    L_inf_init   = np.median(y)\n    init_params  = np.array([\n        L_inf_init,  # L_inf\n        0.0,         # logA\n        -1.0,        # log_alpha\n        -1.0,        # log_beta\n        0.0,         # logB\n        -1.0         # log_gamma\n    ], dtype=float)\n\n    # bounds: unbounded for L_inf, logA, logB; exponents restricted mildly\n    bounds = [\n        (None, None),    # L_inf\n        (None, None),    # logA\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (None, None),    # logB\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5522, Type: Experimental)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter multi-resource law:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n    params = [L0,\n              logA, log_alpha,\n              logB, log_beta,\n              logC, log_gamma]\n    Enforce A, alpha, B, beta, C, gamma > 0 by exponentiating their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0         = p[0]\n    A          = np.exp(p[1])\n    alpha      = np.exp(p[2])\n    B          = np.exp(p[3])\n    beta       = np.exp(p[4])\n    C          = np.exp(p[5])\n    gamma      = np.exp(p[6])\n\n    # denominator with small \u03b5 for numerical safety\n    denom = (P**alpha) + B * (V**beta) + C * (D**gamma) + 1e-12\n    pred  = L0 + A / denom\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B:\n      params = [L0,\n                logA, log_alpha,\n                logB, log_beta,\n                logC, log_gamma]\n    Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep exponents in a reasonable range\n    bounds = [\n        (None, None),  # L0 unconstrained\n        (-20, 20),     # logA\n        (-10, 10),     # log_alpha\n        (-20, 20),     # logB\n        (-10, 10),     # log_beta\n        (-20, 20),     # logC\n        (-10, 10)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial guess on failure\n    return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.6250, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter scaling law:\n      Lossu = L_inf\n            + A * P^{-alpha} * D^{-beta}\n            + B * V^{-gamma}\n\n    where\n      P = non-vocabulary parameters,\n      D = number of characters processed,\n      V = vocabulary size.\n\n    params = [L_inf,\n              logA,    # scale of P-D interaction term\n              log_alpha,\n              log_beta,\n              logB,    # scale of vocab term\n              log_gamma]\n    All A,B>0 via exp(log\u00b7), all exponents>0 via exp(log\u00b7).\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L_inf    = p[0]\n    A        = np.exp(p[1])\n    alpha    = np.exp(p[2])\n    beta     = np.exp(p[3])\n    B        = np.exp(p[4])\n    gamma    = np.exp(p[5])\n\n    # compute in log\u2010space for stability\n    logP = np.log(P_non_vocab)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    term1 = A * np.exp(-alpha * logP - beta * logD)\n    term2 = B * np.exp(-gamma * logV)\n\n    return L_inf + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law via L-BFGS-B.\n    Returns the optimized params array of length 6.\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.ravel(np.asarray(loss_values, dtype=float))\n\n    # initial guess\n    L_inf_init   = np.median(y)\n    init_params  = np.array([\n        L_inf_init,  # L_inf\n        0.0,         # logA\n        -1.0,        # log_alpha\n        -1.0,        # log_beta\n        0.0,         # logB\n        -1.0         # log_gamma\n    ], dtype=float)\n\n    # bounds: unbounded for L_inf, logA, logB; exponents restricted mildly\n    bounds = [\n        (None, None),    # L_inf\n        (None, None),    # logA\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (None, None),    # logB\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (0.952), Excellent nmae (0.988)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter interaction\u2013in\u2013log model:\n      Let L0 = log(P_non_vocab), L1 = log(vocab_size), L2 = log(num_characters).\n      Then\n        Lossu \u2248 b0\n             + b1\u00b7L0\n             + b2\u00b7L1\n             + b3\u00b7L2\n             + b4\u00b7(L0\u00b7L1)\n             + b5\u00b7(L0\u00b7L2)\n             + b6\u00b7(L1\u00b7L2)\n\n    params: array_like of length 7 [b0, b1, b2, b3, b4, b5, b6]\n    data_points: array of shape (N,3) or (3,) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # logs of positive features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # design matrix: [1, L0, L1, L2, L0*L1, L0*L2, L1*L2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction\u2013in\u2013log model by ridge-regularized\n    least squares. Returns fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute log-features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix Phi of shape (N,7)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    # ridge regularization for stability\n    # \u03bb is small to avoid over-penalizing; scaled by trace(Phi^T Phi)\n    lambda_reg = 1e-8 * np.trace(Phi.T.dot(Phi)) / 7.0\n\n    # solve (Phi^T Phi + \u03bbI) w = Phi^T y\n    A = Phi.T.dot(Phi)\n    A[np.diag_indices_from(A)] += lambda_reg\n    b = Phi.T.dot(y)\n\n    # solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    7-parameter multi-resource scaling law:\n      Lossu \u2248 L0 + A / (P^\u03b1 + B\u00b7V^\u03b2 + C\u00b7D^\u03b3 + \u03b5)\n\n    params = [L0,\n              logA, log\u03b1,\n              logB, log\u03b2,\n              logC, log\u03b3]\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    All scale factors A,B,C and exponents \u03b1,\u03b2,\u03b3 are enforced >0\n    via exponentiation of their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L0    = p[0]\n    A     = np.exp(p[1])\n    alpha = np.exp(p[2])\n    B     = np.exp(p[3])\n    beta  = np.exp(p[4])\n    C     = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # small \u03b5 added for numerical stability\n    denom = (P ** alpha) + B * (V ** beta) + C * (D ** gamma) + 1e-12\n    return L0 + A / denom\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B, minimizing MSE.\n    Returns params = [L0, logA, log\u03b1, logB, log\u03b2, logC, log\u03b3].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.ravel(loss_values).astype(float)\n\n    # Initial parameter guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep logs/exponents in a stable range\n    bounds = [\n        (None, None),   # L0\n        (-20, 20),      # logA\n        (-10, 10),      # log\u03b1\n        (-20, 20),      # logB\n        (-10, 10),      # log\u03b2\n        (-20, 20),      # logC\n        (-10, 10)       # log\u03b3\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    return result.x if result.success else init_params\n# EVOLVE-BLOCK-END\n```"]}}}