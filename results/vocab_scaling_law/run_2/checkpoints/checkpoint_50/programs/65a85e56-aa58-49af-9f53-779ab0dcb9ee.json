{"id": "65a85e56-aa58-49af-9f53-779ab0dcb9ee", "code": "\"\"\"\nRefined 7-parameter scaling law for Lossu, combining\ntwo log-stabilized power-law terms and a robust Huber fit,\nwith a logarithmic vocabulary-size correction.\n\nModel:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (log(Vocab + eps))^d\n\nParameters:\n  c0      : baseline offset\n  c1      : amplitude of the joint term\n  a, b    : exponents on P_non_vocab and num_characters\n  c_exp   : exponent on vocab_size in the denominator\n  c2      : amplitude of the vocab-size correction term\n  d       : exponent on log(vocab_size)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (not data-dependent)\n_SCALE_P_NON    = 1e8     # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4     # scale for vocabulary size\n_SCALE_N_CHARS  = 1e11    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for each row in data_points using a 7-parameter model.\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points of shape (N,3)\")\n    # unpack raw features\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n\n    # normalize inputs to O(1)\n    Pn = P_non   / _SCALE_P_NON\n    Vn = V        / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n\n    # unpack parameters\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    # log-terms for derivatives and t2\n    logPn = np.log(np.maximum(Pn, eps))\n    logNn = np.log(np.maximum(Nn, eps))\n    logVn = np.log(np.maximum(Vn, eps))\n    logV_raw = np.log(V + eps)  # always positive for vocabulary sizes\n\n    # term1: joint power-law\n    t1_base = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term1 = c1 * t1_base\n\n    # term2: logarithmic vocab-size correction\n    t2_base = (logV_raw ** d)\n    term2 = c2 * t2_base\n\n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law model to observed Lossu values\n    using robust Huber least-squares.\n\n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params_opt: ndarray of length 7 [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    # prepare arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n\n    # unpack features\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n    # normalize once\n    Pn = P_non   / _SCALE_P_NON\n    Vn = V        / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n\n    # logs for analytic Jacobian\n    eps = 1e-12\n    logPn = np.log(np.maximum(Pn, eps))\n    logNn = np.log(np.maximum(Nn, eps))\n    logVn = np.log(np.maximum(Vn, eps))\n    logV_raw = np.log(V + eps)\n\n    # initial parameter guess\n    c0_init = np.median(y)\n    span = np.max(y) - np.min(y)\n    span = span if span > 0 else 1.0\n    init = np.array([\n        c0_init,       # c0\n        0.6 * span,    # c1\n        0.5,           # a\n        0.5,           # b\n        0.3,           # c_exp\n        0.1 * span,    # c2\n        1.0            # d\n    ], dtype=float)\n\n    # residual function\n    def _res(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        # rebuild terms\n        t1_base = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        t2_base = (logV_raw ** d)\n        return (c0 + c1 * t1_base + c2 * t2_base) - y\n\n    # analytic Jacobian\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        t1_base = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        t2_base = (logV_raw ** d)\n        # derivative w.r.t. parameters\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:,0] = 1.0                          # d/d c0\n        J[:,1] = t1_base                     # d/d c1\n        J[:,2] = c1 * t1_base * logPn        # d/d a\n        J[:,3] = c1 * t1_base * logNn        # d/d b\n        J[:,4] = -c1 * t1_base * logVn       # d/d c_exp\n        J[:,5] = t2_base                     # d/d c2\n        # note: logV_raw > 0 for vocab sizes, so np.log(logV_raw) safe\n        J[:,6] = c2 * t2_base * np.log(logV_raw + eps)  # d/d d\n        return J\n\n    # parameter bounds for stability\n    lower = [-np.inf, 0.0, -3.0, -3.0, 0.0, 0.0, 0.0]\n    upper = [ np.inf, np.inf,  3.0,  3.0,  3.0, np.inf, 5.0]\n\n    # robust nonlinear least squares\n    result = least_squares(\n        fun=_res,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "700b0ebd-1802-41c2-b53d-abb30a473b99", "generation": 4, "timestamp": 1754721052.5879393, "iteration_found": 50, "metrics": {"nmse": 0.3627470436913149, "nmae": 0.7213032064829032, "r2": 0.6372529563086851, "combined_score": 0.7338119019442296}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.18828902762139754, "nmae": 0.4827411072727811, "r2": 0.8117109723786025, "combined_score": 0.8415461026360763}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1883\n- nmae: 0.4827\n- r2: 0.8117\n- combined_score: 0.8415\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: r2, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: nmse, nmae. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 3.0940, nmae: 2.3148, r2: -2.0940, combined_score: 0.2443\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 1.5732, nmae: 1.3905, r2: -0.5732, combined_score: 0.3886\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.1883, nmae: 0.4827, r2: 0.8117, combined_score: 0.8415\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5811)\n```python\n\"\"\"\nRefined 7-parameter scaling law for Lossu, combining\ntwo log-stabilized power-law terms and a robust Huber fit.\n\nModel:\n  Lossu \u2248 c0\n        + c1 * exp[a\u00b7ln(P_non_vocab) + b\u00b7ln(num_characters) \u2212 c_exp\u00b7ln(vocab_size)]\n        + c2 * exp[d\u00b7ln(vocab_size)]\n\nParameters:\n  c0      : baseline bias\n  c1      : amplitude of the joint term\n  a, b    : exponents on non-vocab parameters and data scale\n  c_exp   : exponent on vocab size in the denominator\n  c2      : amplitude of pure vocab-size term\n  d       : exponent on vocab size in the second term\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for each row in data_points using a 7-parameter model.\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points of shape (N,3)\")\n\n    # unpack features\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log of zero\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # term1: joint power law in log-space\n    log_t1 = a * lP + b * lN - c_exp * lV\n    t1 = np.exp(log_t1)\n\n    # term2: pure vocab-size power law in log-space\n    t2 = np.exp(d * lV)\n\n    return c0 + c1 * t1 + c2 * t2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law model to observed Lossu.\n\n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params_opt: ndarray of length 7 with optimized parameters\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # prepare logs once\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # initial guess: bias at median, amplitudes ~|max\u2212median|, exponents small\n    c0_init = np.median(y)\n    amp_init = max(1.0, abs(np.max(y) - c0_init))\n    init = np.array([\n        c0_init,      # c0\n        amp_init,     # c1\n        0.5,          # a\n        0.5,          # b\n        0.5,          # c_exp\n        amp_init*0.1, # c2\n        0.3           # d\n    ], dtype=float)\n\n    # residuals\n    def _res(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n        return (c0 + c1 * t1 + c2 * t2) - y\n\n    # analytic Jacobian\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:, 0] = 1.0                   # d/d c0\n        J[:, 1] = t1                    # d/d c1\n        J[:, 2] = c1 * t1 * lP          # d/d a\n        J[:, 3] = c1 * t1 * lN          # d/d b\n        J[:, 4] = -c1 * t1 * lV         # d/d c_exp\n        J[:, 5] = t2                    # d/d c2\n        J[:, 6] = c2 * t2 * lV          # d/d d\n        return J\n\n    # parameter bounds\n    lower = [\n        c0_init - 10.0,  # c0\n        0.0,             # c1\n        -3.0,            # a\n        -3.0,            # b\n        -3.0,            # c_exp\n        0.0,             # c2\n        -1.0             # d\n    ]\n    upper = [\n        c0_init + 10.0,  # c0\n        np.inf,          # c1\n        3.0,             # a\n        3.0,             # b\n        3.0,             # c_exp\n        np.inf,          # c2\n        3.0              # d\n    ]\n\n    result = least_squares(\n        fun=_res,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.5,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.1883), Performs well on nmae (0.4827), Performs well on r2 (0.8117), Performs well on combined_score (0.8415)\n\n\n### Program 2 (Score: 0.6948)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log-quadratic model\n    in normalized log-space. This 7-parameter form captures individual\n    curvature in each feature (no cross terms), with built-in normalization\n    for numerical stability.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0,\n         p1, p2, p3,    # linear terms for normalized logs\n         p4, p5, p6]    # squared terms for normalized logs\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # constants for normalization (dataset-known maxima)\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # compute normalized logs in [0,1]\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # build feature matrix for each sample: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # this gives 7 basis functions for the 7 parameters\n    # no cross-terms to keep parameter count fixed\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares. Features are normalized log-features and their squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # same normalization constants as in scaling_law_func\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # normalized logs\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # design matrix: intercept + 3 linear + 3 squared terms\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)  # shape: (N, 7)\n    \n    # ridge regularization (small lambda for numerical stability)\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (1.5732), Performs well on nmae (1.3905), Performs well on r2 (-0.5732), Performs well on combined_score (0.3886)\n\n\n### Program 3 (Score: 0.8898)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu as a log\u2010linear function of input features and their pairwise interactions:\n\n   Lossu \u2248 p0\n          + p1 * log(P_non_vocab)\n          + p2 * log(num_characters)\n          + p3 * log(vocab_size)\n          + p4 * [log(P_non_vocab) * log(num_characters)]\n          + p5 * [log(P_non_vocab) * log(vocab_size)]\n          + p6 * [log(num_characters) * log(vocab_size)]\n\nThis uses exactly 7 parameters, admits a closed\u2010form ridge\u2010regularized\nleast\u2010squares solution, and avoids unstable nonlinear solvers.\n\"\"\"\n\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 = [p0, p1, p2, p3, p4, p5, p6]\n\n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be length 7\")\n\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non + eps)\n    lv = np.log(V + eps)\n    ln = np.log(N_chars + eps)\n\n    # Build feature matrix: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ])  # shape = (N,7)\n\n    return F.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log\u2010linear scaling law to observed Lossu values\n    via ridge\u2010regularized least squares.\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [p0..p6]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match\")\n\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    eps = 1e-12\n    lp = np.log(P_non + eps)\n    lv = np.log(V + eps)\n    ln = np.log(N_chars + eps)\n\n    # Build feature matrix F: [1, lp, ln, lv, lp*ln, lp*lv, ln*lv]\n    F = np.column_stack([\n        np.ones_like(lp),\n        lp,\n        ln,\n        lv,\n        lp * ln,\n        lp * lv,\n        ln * lv\n    ])  # shape = (N,7)\n\n    # Ridge regularization strength\n    ridge_lambda = 1e-4\n\n    # Closed\u2010form solve: (F^T F + \u03bbI) p = F^T y\n    A = F.T.dot(F) + ridge_lambda * np.eye(7)\n    b = F.T.dot(y)\n\n    params_opt = np.linalg.solve(A, b)\n    return params_opt\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (3.0940), Performs well on nmae (2.3148), Performs well on r2 (-2.0940), Performs well on combined_score (0.2443)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8596)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with 7 parameters:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(-c_exp))\n        + c2 * (Vocab_norm^d)\n\nNormalization of inputs to O(1) stabilizes optimization.  \nFitting is done via robust least-squares with a \u201csoft_l1\u201d loss.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n\n# Fixed normalization constants (not data-dependent)\n_SCALE_P_NON   = 1e8    # scale for non-vocab parameters\n_SCALE_VOCAB   = 1e4    # scale for vocabulary size\n_SCALE_N_CHARS = 1e9    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    Args:\n      data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    \n    # Unpack raw features\n    P_non   = X[:, 0]\n    Vocab   = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # Normalize to O(1)\n    Pn = P_non   / _SCALE_P_NON\n    Vn = Vocab   / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n    \n    # Two power-law terms\n    term1 = c1 * (Pn ** a) * (Nn ** b) * (Vn ** (-c_exp))\n    term2 = c2 * (Vn ** d)\n    \n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Args:\n      data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n      loss_values: (N,) array of Lossu\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points must match number of loss_values\")\n    \n    # Initial guess: c0 near median, moderate exponents, unit coefficients\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,  # c0\n        1.0,      # c1\n        0.5,      # a\n        0.5,      # b\n        0.5,      # c_exp\n        1.0,      # c2\n        0.5       # d\n    ], dtype=float)\n    \n    # Residuals for least-squares\n    def _res(p):\n        return scaling_law_func(X, p) - y\n    \n    # Bounds to avoid pathological solutions\n    lower = np.array([c0_init - 20.0, -1e2, 0.0, 0.0, 0.0, -1e2, 0.0])\n    upper = np.array([c0_init + 20.0,  1e2, 3.0, 3.0, 3.0,  1e2, 3.0])\n    \n    # Robust nonlinear least squares\n    result = least_squares(\n        fun=_res,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',  # robust to outliers\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n    \n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess\n        return init\n\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.8596)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with 7 parameters:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (Vocab_norm^d)\n\nwhere we normalize each input by a fixed scale\nto keep magnitudes O(1) and stabilize optimization.\nFitting is done with a robust \u201csoft_l1\u201d loss.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# fixed normalization constants (not data-dependent)\n_SCALE_P_NON    = 1e8    # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4    # scale for vocabulary size\n_SCALE_N_CHARS  = 1e9    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    Args:\n      data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    \n    # unpack raw features\n    P_non   = X[:, 0]\n    Vocab   = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # normalize to O(1)\n    Pn = P_non   / _SCALE_P_NON\n    Vn = Vocab   / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n    \n    # two power-law terms\n    term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term2 = c2 * (Vn**d)\n    \n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Args:\n      data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n      loss_values: (N,) array of Lossu\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points must match number of loss_values\")\n    \n    # initial guess: c0 near median, mild exponents ~0.5, coefficients ~1\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,   # c0\n        1.0,       # c1\n        0.5,       # a\n        0.5,       # b\n        0.5,       # c_exp\n        1.0,       # c2\n        0.5        # d\n    ], dtype=float)\n    \n    # residual function\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n    \n    # bounds to avoid pathological solutions\n    lower = np.array([\n        c0_init - 20.0,   # c0\n        -1e2,             # c1\n         0.0,             # a\n         0.0,             # b\n         0.0,             # c_exp\n        -1e2,             # c2\n         0.0              # d\n    ])\n    upper = np.array([\n        c0_init + 20.0,   # c0\n         1e2,             # c1\n         3.0,             # a\n         3.0,             # b\n         3.0,             # c_exp\n         1e2,             # c2\n         3.0              # d\n    ])\n    \n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',     # robust to outliers\n        f_scale=0.1,        # tunable transition for soft-L1\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n    \n    if result.success:\n        return result.x\n    else:\n        # fallback to the initial guess\n        return init\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 106188.3307, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105851937980.083), Excellent nmae (424752.323)\n\n\n### Inspiration 2 (Score: 106188.3307, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (105851937980.083), Excellent nmae (424752.323)\n\n\n### Inspiration 3 (Score: 1.6883, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM finetuning scenarios.\n\nWe model Lossu with a two\u2010term log\u2010stabilized power\u2010law plus a small\nvocabulary\u2010size correction:\n  Lossu \u2248 c0\n        + c1 * exp[a\u00b7log(P_non_vocab) + b\u00b7log(num_characters) \u2212 c_exp\u00b7log(vocab_size)]\n        + c2 * (log(vocab_size))^d\n\nThis uses exactly 7 parameters [c0, c1, a, b, c_exp, c2, d], is numerically stable\n(over wide dynamic range) and fits robustly via a Huberized nonlinear least\u2010squares.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7\u2010element parameter vector.\n\n    Args:\n      data_points: array-like of shape (N,3)\n                   columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    P_non = X[:, 0]\n    Vocab = X[:, 1]\n    N_char= X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    logP = np.log(P_non + eps)\n    logN = np.log(N_char + eps)\n    logV = np.log(Vocab + eps)\n\n    # main term in log-space for stability: exp(a\u00b7logP + b\u00b7logN \u2212 c_exp\u00b7logV)\n    log_term1 = a * logP + b * logN - c_exp * logV\n    term1 = c1 * np.exp(log_term1)\n\n    # vocab-size correction: (logV)^d, clamp logV positive\n    logVpos = np.maximum(logV, eps)\n    term2 = c2 * (logVpos ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter scaling law to observed Lossu values using\n    a robust Huber least\u2010squares optimizer.\n\n    Args:\n      data_points: array-like of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n      loss_values: array-like of shape (N,) of observed Lossu\n\n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have same length\")\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n\n    # initialize parameters\n    c0_init = np.median(y)\n    span = np.max(y) - np.min(y)\n    span = span if span > 0 else 1.0\n    init = np.array([\n        c0_init,        # c0: baseline offset\n        0.6 * span,     # c1: amplitude of main term\n        0.5,            # a : exponent on P_non_vocab\n        0.5,            # b : exponent on num_characters\n        0.3,            # c_exp: exponent on vocab_size in denom\n        0.1 * span,     # c2: amplitude of vocab\u2010size correction\n        1.0             # d: exponent on log(vocab_size)\n    ], dtype=float)\n\n    # residual function\n    def _res(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds for stability\n    lower = [\n        -np.inf,  # c0\n         0.0,     # c1 \u2265 0\n        -5.0,     # a\n        -5.0,     # b\n         0.0,     # c_exp \u2265 0 (inverse vocab scaling)\n         0.0,     # c2 \u2265 0\n         0.0      # d \u2265 0\n    ]\n    upper = [\n         np.inf,  # c0\n         np.inf,  # c1\n         5.0,     # a\n         5.0,     # b\n         5.0,     # c_exp\n         np.inf,  # c2\n         5.0      # d\n    ]\n\n    # robust Huberized fitting\n    result = least_squares(\n        fun=_res,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (18.095), Excellent nmae (5.701)\n\n\n### Inspiration 4 (Score: 0.8596, Type: High-Performer)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with 7 parameters:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (Vocab_norm^d)\n\nwhere we normalize each input by a fixed scale\nto keep magnitudes O(1) and stabilize optimization.\nFitting is done with a robust \u201csoft_l1\u201d loss.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# fixed normalization constants (not data-dependent)\n_SCALE_P_NON    = 1e8    # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4    # scale for vocabulary size\n_SCALE_N_CHARS  = 1e9    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    Args:\n      data_points: array of shape (N,3), columns = [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got {X.shape[1]}\")\n    \n    # unpack raw features\n    P_non   = X[:, 0]\n    Vocab   = X[:, 1]\n    N_chars = X[:, 2]\n    \n    # normalize to O(1)\n    Pn = P_non   / _SCALE_P_NON\n    Vn = Vocab   / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n    \n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n    \n    # two power-law terms\n    term1 = c1 * (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term2 = c2 * (Vn**d)\n    \n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Args:\n      data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n      loss_values: (N,) array of Lossu\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data_points must match number of loss_values\")\n    \n    # initial guess: c0 near median, mild exponents ~0.5, coefficients ~1\n    c0_init = np.median(y)\n    init = np.array([\n        c0_init,   # c0\n        1.0,       # c1\n        0.5,       # a\n        0.5,       # b\n        0.5,       # c_exp\n        1.0,       # c2\n        0.5        # d\n    ], dtype=float)\n    \n    # residual function\n    def _residuals(p):\n        return scaling_law_func(X, p) - y\n    \n    # bounds to avoid pathological solutions\n    lower = np.array([\n        c0_init - 20.0,   # c0\n        -1e2,             # c1\n         0.0,             # a\n         0.0,             # b\n         0.0,             # c_exp\n        -1e2,             # c2\n         0.0              # d\n    ])\n    upper = np.array([\n        c0_init + 20.0,   # c0\n         1e2,             # c1\n         3.0,             # a\n         3.0,             # b\n         3.0,             # c_exp\n         1e2,             # c2\n         3.0              # d\n    ])\n    \n    result = least_squares(\n        fun=_residuals,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='soft_l1',     # robust to outliers\n        f_scale=0.1,        # tunable transition for soft-L1\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n    \n    if result.success:\n        return result.x\n    else:\n        # fallback to the initial guess\n        return init\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.410), Excellent nmae (2.211)\n\n\n### Inspiration 5 (Score: 0.6948, Type: Alternative)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from model/data-scale features using a log-quadratic model\n    in normalized log-space. This 7-parameter form captures individual\n    curvature in each feature (no cross terms), with built-in normalization\n    for numerical stability.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    params: array-like of length 7\n        [p0,\n         p1, p2, p3,    # linear terms for normalized logs\n         p4, p5, p6]    # squared terms for normalized logs\n    Returns: ndarray of shape (N,)\n        Predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # constants for normalization (dataset-known maxima)\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # compute normalized logs in [0,1]\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # build feature matrix for each sample: [1, lP, lV, lD, lP^2, lV^2, lD^2]\n    # this gives 7 basis functions for the 7 parameters\n    # no cross-terms to keep parameter count fixed\n    phi = np.stack([\n        np.ones_like(lP),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)\n    \n    # linear combination\n    return phi.dot(p)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-quadratic scaling law via ridge-regularized\n    least squares. Features are normalized log-features and their squares.\n    \n    data_points: array-like of shape (N, 3)\n        Columns: [P_non_vocab, vocab_size, num_characters].\n    loss_values: array-like of shape (N,)\n        Observed Lossu values.\n    Returns: ndarray of length 7\n        Fitted parameters for scaling_law_func.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    N, F = X.shape\n    if F != 3:\n        raise ValueError(f\"Expected 3 features, got {F}\")\n    \n    # unpack raw features\n    P_non_vocab = X[:, 0]\n    vocab_size  = X[:, 1]\n    num_chars   = X[:, 2]\n    \n    # same normalization constants as in scaling_law_func\n    P_max = 1.1e9\n    V_max = 96256.0\n    D_max = 5e12\n\n    # normalized logs\n    lP = np.log(P_non_vocab) / np.log(P_max)\n    lV = np.log(vocab_size)  / np.log(V_max)\n    lD = np.log(num_chars)   / np.log(D_max)\n    \n    # design matrix: intercept + 3 linear + 3 squared terms\n    phi = np.stack([\n        np.ones(N),\n        lP,\n        lV,\n        lD,\n        lP**2,\n        lV**2,\n        lD**2\n    ], axis=1)  # shape: (N, 7)\n    \n    # ridge regularization (small lambda for numerical stability)\n    lam = 1e-6\n    A = phi.T.dot(phi) + lam * np.eye(7)\n    b = phi.T.dot(y)\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (1.573), Excellent nmae (1.391)\n\n\n\n# Current Program\n```python\n\"\"\"\nRefined 7-parameter scaling law for Lossu, combining\ntwo log-stabilized power-law terms and a robust Huber fit.\n\nModel:\n  Lossu \u2248 c0\n        + c1 * exp[a\u00b7ln(P_non_vocab) + b\u00b7ln(num_characters) \u2212 c_exp\u00b7ln(vocab_size)]\n        + c2 * exp[d\u00b7ln(vocab_size)]\n\nParameters:\n  c0      : baseline bias\n  c1      : amplitude of the joint term\n  a, b    : exponents on non-vocab parameters and data scale\n  c_exp   : exponent on vocab size in the denominator\n  c2      : amplitude of pure vocab-size term\n  d       : exponent on vocab size in the second term\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for each row in data_points using a 7-parameter model.\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points of shape (N,3)\")\n\n    # unpack features\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # avoid log of zero\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # term1: joint power law in log-space\n    log_t1 = a * lP + b * lN - c_exp * lV\n    t1 = np.exp(log_t1)\n\n    # term2: pure vocab-size power law in log-space\n    t2 = np.exp(d * lV)\n\n    return c0 + c1 * t1 + c2 * t2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law model to observed Lossu.\n\n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params_opt: ndarray of length 7 with optimized parameters\n                  [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n\n    # prepare logs once\n    P = X[:, 0]\n    V = X[:, 1]\n    N = X[:, 2]\n    eps = 1e-12\n    lP = np.log(P + eps)\n    lV = np.log(V + eps)\n    lN = np.log(N + eps)\n\n    # initial guess: bias at median, amplitudes ~|max\u2212median|, exponents small\n    c0_init = np.median(y)\n    amp_init = max(1.0, abs(np.max(y) - c0_init))\n    init = np.array([\n        c0_init,      # c0\n        amp_init,     # c1\n        0.5,          # a\n        0.5,          # b\n        0.5,          # c_exp\n        amp_init*0.1, # c2\n        0.3           # d\n    ], dtype=float)\n\n    # residuals\n    def _res(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n        return (c0 + c1 * t1 + c2 * t2) - y\n\n    # analytic Jacobian\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        log_t1 = a * lP + b * lN - c_exp * lV\n        t1 = np.exp(log_t1)\n        t2 = np.exp(d * lV)\n\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:, 0] = 1.0                   # d/d c0\n        J[:, 1] = t1                    # d/d c1\n        J[:, 2] = c1 * t1 * lP          # d/d a\n        J[:, 3] = c1 * t1 * lN          # d/d b\n        J[:, 4] = -c1 * t1 * lV         # d/d c_exp\n        J[:, 5] = t2                    # d/d c2\n        J[:, 6] = c2 * t2 * lV          # d/d d\n        return J\n\n    # parameter bounds\n    lower = [\n        c0_init - 10.0,  # c0\n        0.0,             # c1\n        -3.0,            # a\n        -3.0,            # b\n        -3.0,            # c_exp\n        0.0,             # c2\n        -1.0             # d\n    ]\n    upper = [\n        c0_init + 10.0,  # c0\n        np.inf,          # c1\n        3.0,             # a\n        3.0,             # b\n        3.0,             # c_exp\n        np.inf,          # c2\n        3.0              # d\n    ]\n\n    result = least_squares(\n        fun=_res,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.5,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=2000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nRefined 7-parameter scaling law for Lossu, combining\ntwo log-stabilized power-law terms and a robust Huber fit,\nwith a logarithmic vocabulary-size correction.\n\nModel:\n  Lossu \u2248 c0\n        + c1 * (P_non_vocab_norm^a * N_chars_norm^b * Vocab_norm^(\u2212c_exp))\n        + c2 * (log(Vocab + eps))^d\n\nParameters:\n  c0      : baseline offset\n  c1      : amplitude of the joint term\n  a, b    : exponents on P_non_vocab and num_characters\n  c_exp   : exponent on vocab_size in the denominator\n  c2      : amplitude of the vocab-size correction term\n  d       : exponent on log(vocab_size)\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\n# EVOLVE-BLOCK-START\n# fixed normalization constants (not data-dependent)\n_SCALE_P_NON    = 1e8     # scale for non-vocab parameters\n_SCALE_VOCAB    = 1e4     # scale for vocabulary size\n_SCALE_N_CHARS  = 1e11    # scale for number of characters\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu for each row in data_points using a 7-parameter model.\n\n    Args:\n      data_points: array-like of shape (N,3) with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      array-like of length 7\n                   [c0, c1, a, b, c_exp, c2, d]\n\n    Returns:\n      preds: ndarray of shape (N,) with predicted Lossu.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points of shape (N,3)\")\n    # unpack raw features\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n\n    # normalize inputs to O(1)\n    Pn = P_non   / _SCALE_P_NON\n    Vn = V        / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n\n    # unpack parameters\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # small epsilon to avoid log(0)\n    eps = 1e-12\n    # log-terms for derivatives and t2\n    logPn = np.log(np.maximum(Pn, eps))\n    logNn = np.log(np.maximum(Nn, eps))\n    logVn = np.log(np.maximum(Vn, eps))\n    logV_raw = np.log(V + eps)  # always positive for vocabulary sizes\n\n    # term1: joint power-law\n    t1_base = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n    term1 = c1 * t1_base\n\n    # term2: logarithmic vocab-size correction\n    t2_base = (logV_raw ** d)\n    term2 = c2 * t2_base\n\n    return c0 + term1 + term2\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law model to observed Lossu values\n    using robust Huber least-squares.\n\n    Args:\n      data_points: array-like of shape (N,3)\n      loss_values: array-like of shape (N,)\n\n    Returns:\n      params_opt: ndarray of length 7 [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    # prepare arrays\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"data_points and loss_values must have the same length\")\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n\n    # unpack features\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n    # normalize once\n    Pn = P_non   / _SCALE_P_NON\n    Vn = V        / _SCALE_VOCAB\n    Nn = N_chars / _SCALE_N_CHARS\n\n    # logs for analytic Jacobian\n    eps = 1e-12\n    logPn = np.log(np.maximum(Pn, eps))\n    logNn = np.log(np.maximum(Nn, eps))\n    logVn = np.log(np.maximum(Vn, eps))\n    logV_raw = np.log(V + eps)\n\n    # initial parameter guess\n    c0_init = np.median(y)\n    span = np.max(y) - np.min(y)\n    span = span if span > 0 else 1.0\n    init = np.array([\n        c0_init,       # c0\n        0.6 * span,    # c1\n        0.5,           # a\n        0.5,           # b\n        0.3,           # c_exp\n        0.1 * span,    # c2\n        1.0            # d\n    ], dtype=float)\n\n    # residual function\n    def _res(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        # rebuild terms\n        t1_base = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        t2_base = (logV_raw ** d)\n        return (c0 + c1 * t1_base + c2 * t2_base) - y\n\n    # analytic Jacobian\n    def _jac(p):\n        c0, c1, a, b, c_exp, c2, d = p\n        t1_base = (Pn**a) * (Nn**b) * (Vn**(-c_exp))\n        t2_base = (logV_raw ** d)\n        # derivative w.r.t. parameters\n        J = np.empty((X.shape[0], 7), dtype=float)\n        J[:,0] = 1.0                          # d/d c0\n        J[:,1] = t1_base                     # d/d c1\n        J[:,2] = c1 * t1_base * logPn        # d/d a\n        J[:,3] = c1 * t1_base * logNn        # d/d b\n        J[:,4] = -c1 * t1_base * logVn       # d/d c_exp\n        J[:,5] = t2_base                     # d/d c2\n        # note: logV_raw > 0 for vocab sizes, so np.log(logV_raw) safe\n        J[:,6] = c2 * t2_base * np.log(logV_raw + eps)  # d/d d\n        return J\n\n    # parameter bounds for stability\n    lower = [-np.inf, 0.0, -3.0, -3.0, 0.0, 0.0, 0.0]\n    upper = [ np.inf, np.inf,  3.0,  3.0,  3.0, np.inf, 5.0]\n\n    # robust nonlinear least squares\n    result = least_squares(\n        fun=_res,\n        jac=_jac,\n        x0=init,\n        bounds=(lower, upper),\n        method='trf',\n        loss='huber',\n        f_scale=0.1,\n        ftol=1e-9,\n        xtol=1e-9,\n        gtol=1e-9,\n        max_nfev=3000\n    )\n\n    return result.x if result.success else init\n# EVOLVE-BLOCK-END\n```"]}}}