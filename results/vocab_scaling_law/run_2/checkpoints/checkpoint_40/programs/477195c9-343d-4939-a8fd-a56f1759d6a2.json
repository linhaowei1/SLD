{"id": "477195c9-343d-4939-a8fd-a56f1759d6a2", "code": "\"\"\"\nSimplified and robust scaling\u2010law model for LLM Lossu.\n\nWe model Lossu as a second\u2010order polynomial in the logs of each input:\n   x = ln(P_non_vocab)\n   y = ln(vocab_size)\n   z = ln(num_characters)\n\nLossu \u2248 \u03b10\n      + \u03b11\u00b7x + \u03b12\u00b7y + \u03b13\u00b7z\n      + \u03b14\u00b7(x\u00b7y) + \u03b15\u00b7(x\u00b7z) + \u03b16\u00b7(y\u00b7z)\n\nThis uses exactly 7 parameters and can be fit in closed\u2010form via ordinary\nleast squares for fast, stable, and interpretable results.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given:\n      data_points: shape (N,3) array with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length\u20107 array [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n\n    Returns:\n      preds: shape (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be array\u2010like of length 7\")\n\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    # all inputs must be strictly positive to apply log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All feature values must be > 0 for log\u2010transform\")\n\n    # log-transform features\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    \u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16 = p\n    # second\u2010order polynomial in log\u2010features (cross terms only)\n    return (\u03b10\n            + \u03b11 * x\n            + \u03b12 * y\n            + \u03b13 * z\n            + \u03b14 * (x * y)\n            + \u03b15 * (x * z)\n            + \u03b16 * (y * z)\n           )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010polynomial scaling law to observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,), the fitted coefficients\n                  [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y_target = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y_target.ndim != 1 or X.shape[0] != y_target.shape[0]:\n        raise ValueError(\"loss_values must be 1\u2010D of length N\")\n\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All feature values must be > 0 for log\u2010transform\")\n\n    # compute log\u2010features\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    # build design matrix: [1, x, y, z, x*y, x*z, y*z]\n    ones = np.ones_like(x)\n    M = np.column_stack((ones, x, y, z, x * y, x * z, y * z))\n\n    # solve least squares for closed\u2010form optimal params\n    params_opt, *_ = np.linalg.lstsq(M, y_target, rcond=None)\n    return params_opt", "language": "python", "parent_id": "5ed95d25-23a2-4408-a43f-7ce4422b2c98", "generation": 2, "timestamp": 1754720766.9286275, "iteration_found": 19, "metrics": {"nmse": 3.19365755647146, "nmae": 2.360083925473212, "r2": -2.19365755647146, "combined_score": 0.2384553308261534}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 105851937980.08342, "nmae": 424752.32280699397, "r2": -105851937979.08342, "combined_score": 9.447158163308337e-12}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 105851937980.0834\n- nmae: 424752.3228\n- r2: -105851937979.0834\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 105851937980.0834, nmae: 424752.3228, r2: -105851937979.0834, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 3.1937, nmae: 2.3601, r2: -2.1937, combined_score: 0.2385\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.8996)\n```python\n\"\"\"\nScaling law discovery via a second\u2010order log\u2010polynomial model.\n\nWe model Lossu as a 2nd\u2010degree polynomial in the logs of each input:\n   x = ln(P_non_vocab)\n   y = ln(vocab_size)\n   z = ln(num_characters)\n\nLossu \u2248 \u03b10\n      + \u03b11*x + \u03b12*y + \u03b13*z\n      + \u03b14*(x*y) + \u03b15*(x*z) + \u03b16*(y*z)\n\nThis uses exactly 7 parameters and is fit by ordinary least squares\nfor robustness, numerical stability, and interpretability.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given:\n      data_points: shape (N,3) array with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n\n    Returns:\n      preds: shape (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be array-like of length 7\")\n\n    # unpack raw features\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n    # take natural logs (all inputs > 0)\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    \u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16 = p\n\n    # polynomial in log-features\n    return (\u03b10\n            + \u03b11 * x\n            + \u03b12 * y\n            + \u03b13 * z\n            + \u03b14 * (x * y)\n            + \u03b15 * (x * z)\n            + \u03b16 * (y * z)\n           )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-polynomial scaling law to observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,), the fitted coefficients\n                  [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y_target = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y_target.ndim != 1:\n        raise ValueError(\"loss_values must be a 1-D array of shape (N,)\")\n\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n    # ensure positive before log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All feature values must be strictly positive for log-transform\")\n\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    # build design matrix: [1, x, y, z, x*y, x*z, y*z]\n    ones = np.ones_like(x)\n    M = np.column_stack((ones, x, y, z, x*y, x*z, y*z))\n\n    # solve with ordinary least squares (minimize ||M\u00b7params - y_target||^2)\n    # np.linalg.lstsq returns (params, residuals, rank, s)\n    params_opt, *_ = np.linalg.lstsq(M, y_target, rcond=None)\n\n    return params_opt\n```\nKey features: Performs well on nmse (3.1937), Performs well on nmae (2.3601), Performs well on r2 (-2.1937), Performs well on combined_score (0.2385)\n\n\n### Program 2 (Score: 106188.3307)\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\nKey features: Performs well on nmse (105851937980.0834), Performs well on nmae (424752.3228), Performs well on r2 (-105851937979.0834), Performs well on combined_score (0.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8996, Type: High-Performer)\n```python\n\"\"\"\nScaling law discovery via a second\u2010order log\u2010polynomial model.\n\nWe model Lossu as a 2nd\u2010degree polynomial in the logs of each input:\n   x = ln(P_non_vocab)\n   y = ln(vocab_size)\n   z = ln(num_characters)\n\nLossu \u2248 \u03b10\n      + \u03b11*x + \u03b12*y + \u03b13*z\n      + \u03b14*(x*y) + \u03b15*(x*z) + \u03b16*(y*z)\n\nThis uses exactly 7 parameters and is fit by ordinary least squares\nfor robustness, numerical stability, and interpretability.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given:\n      data_points: shape (N,3) array with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length-7 array [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n\n    Returns:\n      preds: shape (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be array-like of length 7\")\n\n    # unpack raw features\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n    # take natural logs (all inputs > 0)\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    \u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16 = p\n\n    # polynomial in log-features\n    return (\u03b10\n            + \u03b11 * x\n            + \u03b12 * y\n            + \u03b13 * z\n            + \u03b14 * (x * y)\n            + \u03b15 * (x * z)\n            + \u03b16 * (y * z)\n           )\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter log-polynomial scaling law to observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,), the fitted coefficients\n                  [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y_target = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y_target.ndim != 1:\n        raise ValueError(\"loss_values must be a 1-D array of shape (N,)\")\n\n    P_non, V, N_chars = X[:,0], X[:,1], X[:,2]\n    # ensure positive before log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All feature values must be strictly positive for log-transform\")\n\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    # build design matrix: [1, x, y, z, x*y, x*z, y*z]\n    ones = np.ones_like(x)\n    M = np.column_stack((ones, x, y, z, x*y, x*z, y*z))\n\n    # solve with ordinary least squares (minimize ||M\u00b7params - y_target||^2)\n    # np.linalg.lstsq returns (params, residuals, rank, s)\n    params_opt, *_ = np.linalg.lstsq(M, y_target, rcond=None)\n\n    return params_opt\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (3.194), Excellent nmae (2.360)\n\n\n\n# Current Program\n```python\n\"\"\"\nImproved scaling law discovery for LLM training scenarios.\n\nWe model Lossu with a small sum of power-law terms:\n  Lossu \u2248 c0 \n        + c1 * (P_non_vocab)^a * (num_characters)^b * (vocab_size)^(-c_exp)\n        + c2 * (vocab_size)^d\n\nThis form has 7 tunable parameters [c0, c1, a, b, c_exp, c2, d], is expressive\nenough to capture interactions, yet simple and numerically stable.  We fit via\nnonlinear least squares with bounded exponents to avoid pathological solutions.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given data_points and a 7-element parameter vector.\n    \n    data_points: array of shape (N,3) columns = [P_non_vocab, vocab_size, num_characters]\n    params:       array-like of length 7 = [c0, c1, a, b, c_exp, c2, d]\n    \n    Returns:\n      preds: array of shape (N,) of predicted Lossu values.\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\"Expected data_points with 3 columns\")\n    # unpack features\n    P_non    = X[:, 0]\n    V        = X[:, 1]\n    N_chars  = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    c0, c1, a, b, c_exp, c2, d = p\n\n    # term1: joint power law across P_non_vocab and N_chars, modulated by V\n    term1 = c1 * (P_non ** a) * (N_chars ** b) * (V ** (-c_exp))\n    # term2: pure vocab-size power-law term\n    term2 = c2 * (V ** d)\n\n    return c0 + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to observed Lossu values.\n    \n    Returns:\n      params_opt: ndarray of shape (7,) with optimized [c0, c1, a, b, c_exp, c2, d]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: center c0 around median lossu, modest positive coefficients\n    c0_init = np.median(y)\n    init = np.array([c0_init,    # c0\n                     1.0,        # c1\n                     0.3,        # a\n                     0.3,        # b\n                     0.3,        # c_exp\n                     0.1,        # c2\n                     0.1])       # d\n\n    # residual function for least_squares\n    def residuals(p):\n        return scaling_law_func(X, p) - y\n\n    # bounds: keep exponents modest to avoid numerical blow-up\n    lower_bounds = [-np.inf, -np.inf, -3.0, -3.0, -3.0, -np.inf, -3.0]\n    upper_bounds = [ np.inf,  np.inf,  3.0,  3.0,  3.0,  np.inf,  3.0]\n\n    result = least_squares(\n        fun=residuals,\n        x0=init,\n        bounds=(lower_bounds, upper_bounds),\n        method='trf',\n        ftol=1e-8,\n        xtol=1e-8,\n        gtol=1e-8,\n        max_nfev=2000\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n\"\"\"\nSimplified and robust scaling\u2010law model for LLM Lossu.\n\nWe model Lossu as a second\u2010order polynomial in the logs of each input:\n   x = ln(P_non_vocab)\n   y = ln(vocab_size)\n   z = ln(num_characters)\n\nLossu \u2248 \u03b10\n      + \u03b11\u00b7x + \u03b12\u00b7y + \u03b13\u00b7z\n      + \u03b14\u00b7(x\u00b7y) + \u03b15\u00b7(x\u00b7z) + \u03b16\u00b7(y\u00b7z)\n\nThis uses exactly 7 parameters and can be fit in closed\u2010form via ordinary\nleast squares for fast, stable, and interpretable results.\n\"\"\"\n\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu given:\n      data_points: shape (N,3) array with columns\n                   [P_non_vocab, vocab_size, num_characters]\n      params:      length\u20107 array [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n\n    Returns:\n      preds: shape (N,) array of predicted Lossu.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(\"params must be array\u2010like of length 7\")\n\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    # all inputs must be strictly positive to apply log\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All feature values must be > 0 for log\u2010transform\")\n\n    # log-transform features\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    \u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16 = p\n    # second\u2010order polynomial in log\u2010features (cross terms only)\n    return (\u03b10\n            + \u03b11 * x\n            + \u03b12 * y\n            + \u03b13 * z\n            + \u03b14 * (x * y)\n            + \u03b15 * (x * z)\n            + \u03b16 * (y * z)\n           )\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7\u2010parameter log\u2010polynomial scaling law to observed Lossu.\n\n    Returns:\n      params_opt: ndarray of shape (7,), the fitted coefficients\n                  [\u03b10, \u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16]\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    y_target = np.asarray(loss_values, dtype=float).ravel()\n\n    if X.ndim != 2 or X.shape[1] != 3:\n        raise ValueError(\"data_points must be of shape (N,3)\")\n    if y_target.ndim != 1 or X.shape[0] != y_target.shape[0]:\n        raise ValueError(\"loss_values must be 1\u2010D of length N\")\n\n    P_non, V, N_chars = X[:, 0], X[:, 1], X[:, 2]\n    if np.any(P_non <= 0) or np.any(V <= 0) or np.any(N_chars <= 0):\n        raise ValueError(\"All feature values must be > 0 for log\u2010transform\")\n\n    # compute log\u2010features\n    x = np.log(P_non)\n    y = np.log(V)\n    z = np.log(N_chars)\n\n    # build design matrix: [1, x, y, z, x*y, x*z, y*z]\n    ones = np.ones_like(x)\n    M = np.column_stack((ones, x, y, z, x * y, x * z, y * z))\n\n    # solve least squares for closed\u2010form optimal params\n    params_opt, *_ = np.linalg.lstsq(M, y_target, rcond=None)\n    return params_opt\n```"]}}}