{"id": "4b692ca9-e5d0-4a20-9b97-50bf07792fbd", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven\u2010parameter inverse\u2010power scaling law:\n      Lossu \u2248 L0\n            + A * P_non_vocab^(\u2212alpha)\n            + B * num_characters^(\u2212beta)\n            + C * vocab_size^(\u2212gamma)\n\n    params: array\u2010like of length 7\n      [L0,\n       logA, logB, logC,\n       log_alpha, log_beta, log_gamma]\n\n    data_points: array of shape (N,3) with columns\n      [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack & enforce positivity via exp()\n    L0       = p[0]\n    A        = np.exp(p[1])\n    B        = np.exp(p[2])\n    C        = np.exp(p[3])\n    alpha    = np.exp(p[4])\n    beta     = np.exp(p[5])\n    gamma    = np.exp(p[6])\n\n    # compute inverse\u2010power terms\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven\u2010parameter scaling law by minimizing MSE\n    between predicted and observed Lossu via L-BFGS-B.\n\n    Returns params = [L0, logA, logB, logC,\n                      log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Initial guess: L0 around median of y; logs for A,B,C ~ 0; exponents logs ~ -1\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,   # L0\n        0.0, 0.0, 0.0,   # logA, logB, logC\n       -1.0, -1.0, -1.0  # log_alpha, log_beta, log_gamma\n    ], dtype=float)\n\n    # Reasonable bounds: allow parameters to vary broadly\n    bounds = [\n        (None, None),        # L0\n        (None, None),        # logA\n        (None, None),        # logB\n        (None, None),        # logC\n        (-10.0, 10.0),       # log_alpha\n        (-10.0, 10.0),       # log_beta\n        (-10.0, 10.0)        # log_gamma\n    ]\n\n    def mse_loss(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        mse_loss,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000}\n    )\n\n    return result.x if result.success else init", "language": "python", "parent_id": "1053c4ce-6ac1-4935-b5b9-c91e501a4ffd", "generation": 2, "timestamp": 1754722736.9174266, "iteration_found": 22, "metrics": {"nmse": 0.06901119416867157, "nmae": 0.27241113720528354, "r2": 0.9309888058313285, "combined_score": 0.9354438994230189}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.23004773430183637, "nmae": 0.501622993691092, "r2": 0.7699522656981637, "combined_score": 0.812976579780939}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.2300\n- nmae: 0.5016\n- r2: 0.7700\n- combined_score: 0.8130\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.2300, nmae: 0.5016, r2: 0.7700, combined_score: 0.8130\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5520)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      Lossu = L0\n            + A * P_non_vocab^{-alpha}\n            + B * num_characters^{-beta}\n            + C * vocab_size^{-gamma}\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    Exponentiating the log-parameters enforces positivity.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack\n    L0     = p[0]\n    A      = np.exp(p[1])\n    B      = np.exp(p[2])\n    C      = np.exp(p[3])\n    alpha  = np.exp(p[4])\n    beta   = np.exp(p[5])\n    gamma  = np.exp(p[6])\n\n    # compute prediction\n    loss_pred = (\n        L0\n        + A * P_non_vocab ** (-alpha)\n        + B * num_chars    ** (-beta)\n        + C * vocab_size   ** (-gamma)\n    )\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law via L-BFGS-B.\n    Returns optimized params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: baseline at median(y), unit logs for A,B,C, modest negative exponents\n    L0_init    = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs free but exponents in reasonable range\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n### Program 2 (Score: 0.5786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.2300), Performs well on nmae (0.5016), Performs well on r2 (0.7700), Performs well on combined_score (0.8130)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5520, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven-parameter scaling law:\n      Lossu = L0\n            + A * P_non_vocab^{-alpha}\n            + B * num_characters^{-beta}\n            + C * vocab_size^{-gamma}\n    where params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    Exponentiating the log-parameters enforces positivity.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    # ensure shape (N,3)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    P_non_vocab = X[:, 0]\n    vocab_size   = X[:, 1]\n    num_chars    = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack\n    L0     = p[0]\n    A      = np.exp(p[1])\n    B      = np.exp(p[2])\n    C      = np.exp(p[3])\n    alpha  = np.exp(p[4])\n    beta   = np.exp(p[5])\n    gamma  = np.exp(p[6])\n\n    # compute prediction\n    loss_pred = (\n        L0\n        + A * P_non_vocab ** (-alpha)\n        + B * num_chars    ** (-beta)\n        + C * vocab_size   ** (-gamma)\n    )\n    return loss_pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven-parameter scaling law via L-BFGS-B.\n    Returns optimized params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma].\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # initial guess: baseline at median(y), unit logs for A,B,C, modest negative exponents\n    L0_init    = np.median(y)\n    init_params = np.array([\n        L0_init,   # L0\n        0.0,       # logA\n        0.0,       # logB\n        0.0,       # logC\n       -1.0,       # log_alpha\n       -1.0,       # log_beta\n       -1.0        # log_gamma\n    ], dtype=float)\n\n    # bounds to keep logs free but exponents in reasonable range\n    bounds = [\n        (None, None),    # L0\n        (None, None),    # logA\n        (None, None),    # logB\n        (None, None),    # logC\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def objective(params):\n        pred = scaling_law_func(X, params)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 10000}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess on failure\n        return init_params\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nImproved scaling law for LLM finetuning scenarios:\nLossu \u2248 bias - exp(k0) * (P_non_vocab^alpha) * (num_characters^beta) * (vocab_size^gamma)\n\nParameters (5 total):\n  k0      \u2014 log-scale coefficient\n  alpha   \u2014 exponent on non-vocabulary parameters\n  beta    \u2014 exponent on number of characters\n  gamma   \u2014 exponent on vocabulary size\n  bias    \u2014 additive offset\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    data_points: (N,3) array [P_non_vocab, vocab_size, num_characters]\n    params:      vector of length 5, or array (T,5) for T separate fits\n    returns:     predicted Lossu, shape (N,) or (N,T)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]         # shape (1,5)\n\n    # unpack parameters\n    k0    = p[:, 0]           # shape (T,)\n    alpha = p[:, 1]\n    beta  = p[:, 2]\n    gamma = p[:, 3]\n    bias  = p[:, 4]\n\n    # compute model: bias - exp(k0) * P^alpha * D^beta * V^gamma\n    exp_k0 = np.exp(k0)[None, :]                   # shape (1, T)\n    term_P = P[:, None] ** alpha[None, :]          # shape (N, T)\n    term_D = D[:, None] ** beta[None, :]\n    term_V = V[:, None] ** gamma[None, :]\n    pred = bias[None, :] - exp_k0 * term_P * term_D * term_V\n\n    # if single target, return (N,), else (N, T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 5-parameter scaling law via closed-form linear regression in log-space,\n    then recovers an additive bias to correct residual offset.\n    Returns a length-5 parameter vector [k0, alpha, beta, gamma, bias].\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.asarray(loss_values, dtype=float).squeeze()\n\n    # split features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    # small epsilon to avoid log(0)\n    eps = 1e-8\n\n    # transform features and target into log-space\n    logP = np.log(P + eps)\n    logD = np.log(D + eps)\n    logV = np.log(V + eps)\n    target = np.log(-y + eps)  # since Lossu is negative, -y > 0\n\n    # design matrix for linear regression: [1, logP, logD, logV]\n    A = np.stack([np.ones_like(logP), logP, logD, logV], axis=1)  # shape (N,4)\n\n    # solve least squares: A @ coeffs \u2248 target\n    coeffs, *_ = np.linalg.lstsq(A, target, rcond=None)\n    k0, alpha, beta, gamma = coeffs\n\n    # recover additive bias by matching mean residual in original space\n    y_pred_no_bias = -np.exp(k0) * (P ** alpha) * (D ** beta) * (V ** gamma)\n    bias = np.mean(y - y_pred_no_bias)\n\n    # return parameter vector\n    return np.array([k0, alpha, beta, gamma, bias], dtype=float)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Seven\u2010parameter inverse\u2010power scaling law:\n      Lossu \u2248 L0\n            + A * P_non_vocab^(\u2212alpha)\n            + B * num_characters^(\u2212beta)\n            + C * vocab_size^(\u2212gamma)\n\n    params: array\u2010like of length 7\n      [L0,\n       logA, logB, logC,\n       log_alpha, log_beta, log_gamma]\n\n    data_points: array of shape (N,3) with columns\n      [P_non_vocab, vocab_size, num_characters]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n\n    # unpack & enforce positivity via exp()\n    L0       = p[0]\n    A        = np.exp(p[1])\n    B        = np.exp(p[2])\n    C        = np.exp(p[3])\n    alpha    = np.exp(p[4])\n    beta     = np.exp(p[5])\n    gamma    = np.exp(p[6])\n\n    # compute inverse\u2010power terms\n    return L0 + A * P**(-alpha) + B * D**(-beta) + C * V**(-gamma)\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the seven\u2010parameter scaling law by minimizing MSE\n    between predicted and observed Lossu via L-BFGS-B.\n\n    Returns params = [L0, logA, logB, logC,\n                      log_alpha, log_beta, log_gamma]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, float))\n    if X.shape[1] != 3:\n        raise ValueError(\"data_points must have shape (N,3)\")\n    y = np.asarray(loss_values, float).ravel()\n    if y.shape[0] != X.shape[0]:\n        raise ValueError(\"Number of loss_values must match number of data_points\")\n\n    # Initial guess: L0 around median of y; logs for A,B,C ~ 0; exponents logs ~ -1\n    L0_init = np.median(y)\n    init = np.array([\n        L0_init,   # L0\n        0.0, 0.0, 0.0,   # logA, logB, logC\n       -1.0, -1.0, -1.0  # log_alpha, log_beta, log_gamma\n    ], dtype=float)\n\n    # Reasonable bounds: allow parameters to vary broadly\n    bounds = [\n        (None, None),        # L0\n        (None, None),        # logA\n        (None, None),        # logB\n        (None, None),        # logC\n        (-10.0, 10.0),       # log_alpha\n        (-10.0, 10.0),       # log_beta\n        (-10.0, 10.0)        # log_gamma\n    ]\n\n    def mse_loss(params):\n        pred = scaling_law_func(X, params)\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        mse_loss,\n        init,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol':1e-12, 'gtol':1e-8, 'maxiter':5000}\n    )\n\n    return result.x if result.success else init\n```\n\nExplanation of key improvements:\n- Switched to a seven\u2010parameter inverse\u2010power law (L0 + A\u00b7P^(\u2212\u03b1) + B\u00b7D^(\u2212\u03b2) + C\u00b7V^(\u2212\u03b3)) which has been shown to fit diverse scaling regimes more accurately than a pure multiplicative model.\n- Enforced positivity of scale factors (A, B, C) and exponents (\u03b1, \u03b2, \u03b3) via exponentiation of their logarithms.\n- Employed a robust L\u2010BFGS\u2010B routine with sensible initialization (median\u2010based L0, zero logs for scale factors, moderate negative exponent logs) and loose bounds for stability.\n- Kept the implementation concise, fully vectorized, and clearly documented for maintainability.\n"]}}}