{"id": "100c3c9d-8822-49a7-86ea-8a79f793ad5d", "code": "import numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the (N\u00d77) design matrix for the 7-parameter log-interaction model:\n      features = [1,\n                  log(P_non_vocab),\n                  log(num_characters),\n                  log(vocab_size),\n                  log(P_non_vocab)*log(num_characters),\n                  log(P_non_vocab)*log(vocab_size),\n                  log(num_characters)*log(vocab_size)]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\n            \"Expected data_points with 3 columns \"\n            \"(P_non_vocab, vocab_size, num_characters)\"\n        )\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    if np.any(P <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All input features must be positive to compute logarithms.\")\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n    # Columns: 1, logP, logD, logV, logP*logD, logP*logV, logD*logV\n    Phi = np.column_stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logP * logD,\n        logP * logV,\n        logD * logV\n    ])\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter interaction model in log-space:\n      Lossu \u2248 b0\n           + b1\u00b7log(P_non_vocab)\n           + b2\u00b7log(num_characters)\n           + b3\u00b7log(vocab_size)\n           + b4\u00b7log(P_non_vocab)\u00b7log(num_characters)\n           + b5\u00b7log(P_non_vocab)\u00b7log(vocab_size)\n           + b6\u00b7log(num_characters)\u00b7log(vocab_size)\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 [b0, b1, b2, b3, b4, b5, b6]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    Phi = _build_design_matrix(data_points)\n    return Phi.dot(p)\n\ndef fit_scaling_law(data_points, loss_values,\n                    max_iter=50, tol=1e-8, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7-parameter log-interaction model via\n    ridge-regularized iteratively reweighted least squares (IRLS)\n    with Huber weights.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) of target Lossu values\n\n    Returns:\n      params: array of length 7 [b0, b1, ..., b6]\n    \"\"\"\n    # Build design and target\n    Phi = _build_design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    N, M = Phi.shape  # M should be 7\n    # Scale ridge regularization by average feature magnitude\n    lambda_reg = ridge_lambda * np.trace(Phi.T.dot(Phi)) / M\n\n    # Initial ridge-regularized least squares solution\n    A = Phi.T.dot(Phi) + lambda_reg * np.eye(M)\n    b = Phi.T.dot(y)\n    coeffs = np.linalg.solve(A, b)\n\n    # Iteratively reweighted least squares with Huber weights\n    for _ in range(max_iter):\n        resid = y - Phi.dot(coeffs)\n        # Robust scale estimate (MAD)\n        mad = np.median(np.abs(resid)) * 1.4826 + 1e-8\n        # Huber threshold\n        delta = 1.345 * mad\n        abs_res = np.abs(resid)\n        # Huber weights\n        w = np.where(abs_res <= delta, 1.0, delta / abs_res)\n\n        # Weighted normal equations\n        W = w[:, None]  # shape (N,1)\n        A_w = Phi.T.dot(Phi * W) + lambda_reg * np.eye(M)\n        b_w = Phi.T.dot(y * w)\n        coeffs_new = np.linalg.solve(A_w, b_w)\n\n        # Check for convergence\n        if np.max(np.abs(coeffs_new - coeffs)) < tol:\n            coeffs = coeffs_new\n            break\n        coeffs = coeffs_new\n\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "4129df8f-2dbc-4049-97e7-a6b70e536331", "generation": 4, "timestamp": 1754722938.3239934, "iteration_found": 39, "metrics": {"nmse": 0.19895997318578926, "nmae": 0.36570596885587886, "r2": 0.8010400268142107, "combined_score": 0.8340562006777197}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"nmse": 0.15547963954612912, "nmae": 0.4257798374280161, "r2": 0.8445203604538709, "combined_score": 0.8654414719006202}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert in scaling laws and machine learning who specializes in discovering and improving scaling law functions for different LLM training scenarios. Your task is to evolve both the `scaling_law_func` function (currently a naive power law) and the `fit_scaling_law` optimization algorithm (currently a naive BFGS) to better model the relationship between vocabulary size, non-vocabulary parameters, number of characters and Lossu (unigram-normalized language model loss).\n\n**IMPORTANT: The scaling law function must use no more than 7 parameters.**\n\nFocus on mathematical accuracy across different vocabulary configurations, cross-dataset generalization, parameter efficiency (simple forms that can be fitted with limited data), and numerical/theoretical stability.\n\n**DATA CHARACTERISTICS (1200+ data points):**\n- Vocabulary Size: 4096 to 96256 (8 unique sizes)\n- Embedding Dimension: 512 to 2048 (4 unique values)\n- Number of Characters: ~100M to ~5T characters\n- Non-vocabulary Parameters: 33M to 1.1B parameters\n- FLOPs: 1.3e16 to 4.4e20 \n- Lossu Values: -5.34 to -0.51 (mean: -3.9, std: 1.0)\n\nLossu indicates the improvement in probability that a context-aware language model offers over a unigram model without context (can be negative).\nThe dataset explores the scaling relationship between vocabulary size, model architecture parameters, training scale and resulting model quality.\n\nThe function signatures must remain:\n\n```python\ndef scaling_law_func(data_points, params):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # params: Array of up to 7 parameters\n    # Returns: Predicted Lossu values\n\ndef fit_scaling_law(data_points, loss_values):\n    # data_points: (N,3) array with columns [P_non_vocab, vocab_size, num_characters]\n    # Non_vocab_parameters: Array of non-vocabulary parameter counts\n    # vocab_size: Array of vocabulary sizes\n    # num_characters: Array of number of characters processed\n    # lossu_values: Array of corresponding Lossu values\n    # Returns: Optimized parameters (up to 7 parameters)\n```\n\nWrite all improvements between # EVOLVE-BLOCK-START and # EVOLVE-BLOCK-END markers.\n\nYou are not allowed to use input-dependent feature in scaling_law_func, e.g., median / min / max / etc.\n", "user": "# Current Program Information\n- Current performance metrics: - nmse: 0.1555\n- nmae: 0.4258\n- r2: 0.8445\n- combined_score: 0.8654\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: nmse, nmae. Consider continuing with similar changes.\n- Metrics showing regression: r2, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: nmse: 0.0690, nmae: 0.2724, r2: 0.9310, combined_score: 0.9354\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: nmse: 0.0658, nmae: 0.2704, r2: 0.9342, combined_score: 0.9383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: nmse: 0.0618, nmae: 0.2245, r2: 0.9382, combined_score: 0.9418\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.5416)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA robust 7-parameter interaction scaling law for LLM finetuning scenarios.\nWe retain the log-space main effects and pairwise interactions, but fit\nusing ridge-regularized iteratively reweighted least squares with Huber weights\nto improve robustness (reducing NMSE and NMAE) and stabilize coefficients.\n\nScaling law:\n  Lossu \u2248 b0\n         + bP * log(P_non_vocab)\n         + bD * log(num_characters)\n         + bV * log(vocab_size)\n         + bPD * [log(P_non_vocab) * log(num_characters)]\n         + bPV * [log(P_non_vocab) * log(vocab_size)]\n         + bDV * [log(num_characters) * log(vocab_size)]\n\nParams vector = [b0, bP, bD, bV, bPD, bPV, bDV]\n\nFunctions:\n  scaling_law_func(data_points, params) -> predicted Lossu\n  fit_scaling_law(data_points, loss_values) -> fitted params\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from data_points and params.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    params:      array of shape (7,) or (T,7)\n                 order: [b0, bP, bD, bV, bPD, bPV, bDV]\n    Returns:     predicted Lossu of shape (N,) if params is (7,)\n                 or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected params of length 7, got shape {p.shape}\")\n\n    # unpack parameters (each shape (T,))\n    b0, bP, bD, bV, bPD, bPV, bDV = [p[:, i] for i in range(7)]\n\n    # compute log-features\n    logP = np.log(P)[:, None]  # shape (N,1)\n    logD = np.log(D)[:, None]\n    logV = np.log(V)[:, None]\n\n    # weighted sum in log-space with pairwise interactions\n    # result shape (N,T)\n    pred = (\n        b0[None, :]\n        + bP[None, :] * logP\n        + bD[None, :] * logD\n        + bV[None, :] * logV\n        + bPD[None, :] * (logP * logD)\n        + bPV[None, :] * (logP * logV)\n        + bDV[None, :] * (logD * logV)\n    )\n\n    # if single parameter set, return (N,), else (N,T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=10, tol=1e-6, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7-parameter interaction model via ridge-regularized iteratively\n    reweighted least squares (IRLS) using Huber weights.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) corresponding Lossu values\n\n    Returns: params array of shape (7,)\n             [b0, bP, bD, bV, bPD, bPV, bDV]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # extract and log-transform features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # design matrix: main effects + pairwise interactions\n    A = np.stack([\n        np.ones_like(logP),     # bias term\n        logP,                   # P effect\n        logD,                   # D effect\n        logV,                   # V effect\n        logP * logD,            # P-D interaction\n        logP * logV,            # P-V interaction\n        logD * logV             # D-V interaction\n    ], axis=1)  # shape (N,7)\n\n    # initial ridge-regularized OLS solution\n    ATA = A.T.dot(A) + ridge_lambda * np.eye(7)\n    ATy = A.T.dot(y)\n    coeffs = np.linalg.solve(ATA, ATy)\n\n    # iteratively reweighted least squares with Huber weights\n    for _ in range(max_iter):\n        resid = y - A.dot(coeffs)\n        # estimate robust scale (MAD-based)\n        mad = np.median(np.abs(resid)) * 1.4826 + 1e-8\n        # Huber threshold\n        delta = 1.345 * mad\n        abs_res = np.abs(resid)\n        # compute weights\n        w = np.where(abs_res <= delta, 1.0, delta / abs_res)\n\n        # weighted normal equations: (A^T W A + \u03bbI) coeffs = A^T W y\n        Aw = A * w[:, None]\n        ATA_w = A.T.dot(Aw) + ridge_lambda * np.eye(7)\n        ATy_w = A.T.dot(y * w)\n        coeffs_new = np.linalg.solve(ATA_w, ATy_w)\n\n        # check convergence\n        if np.max(np.abs(coeffs_new - coeffs)) < tol:\n            coeffs = coeffs_new\n            break\n        coeffs = coeffs_new\n\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0618), Performs well on nmae (0.2245), Performs well on r2 (0.9382), Performs well on combined_score (0.9418)\n\n\n### Program 2 (Score: 0.5522)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter multi-resource law:\n      Lossu = L0 + A / (P^alpha + B\u00b7V^beta + C\u00b7D^gamma + \u03b5)\n    where\n      P = non-vocabulary parameters,\n      V = vocabulary size,\n      D = number of characters processed.\n    params = [L0,\n              logA, log_alpha,\n              logB, log_beta,\n              logC, log_gamma]\n    Enforce A, alpha, B, beta, C, gamma > 0 by exponentiating their logs.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    L0         = p[0]\n    A          = np.exp(p[1])\n    alpha      = np.exp(p[2])\n    B          = np.exp(p[3])\n    beta       = np.exp(p[4])\n    C          = np.exp(p[5])\n    gamma      = np.exp(p[6])\n\n    # denominator with small \u03b5 for numerical safety\n    denom = (P**alpha) + B * (V**beta) + C * (D**gamma) + 1e-12\n    pred  = L0 + A / denom\n    return pred\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law via L-BFGS-B:\n      params = [L0,\n                logA, log_alpha,\n                logB, log_beta,\n                logC, log_gamma]\n    Returns the fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guesses\n    L0_init        = np.median(y)\n    logA_init      = 0.0\n    log_alpha_init = np.log(1e-6)\n    logB_init      = 0.0\n    log_beta_init  = np.log(1.0)\n    logC_init      = 0.0\n    log_gamma_init = np.log(0.5)\n\n    init_params = np.array([\n        L0_init,\n        logA_init,      log_alpha_init,\n        logB_init,      log_beta_init,\n        logC_init,      log_gamma_init\n    ], dtype=float)\n\n    # Bounds to keep exponents in a reasonable range\n    bounds = [\n        (None, None),  # L0 unconstrained\n        (-20, 20),     # logA\n        (-10, 10),     # log_alpha\n        (-20, 20),     # logB\n        (-10, 10),     # log_beta\n        (-20, 20),     # logC\n        (-10, 10)      # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        # mean squared error\n        return np.mean((pred - y)**2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    # fallback to initial guess on failure\n    return init_params\n# EVOLVE-BLOCK-END\n```\nKey features: Performs well on nmse (0.0658), Performs well on nmae (0.2704), Performs well on r2 (0.9342), Performs well on combined_score (0.9383)\n\n\n### Program 3 (Score: 0.5520)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu based on a 7-parameter scaling law:\n      Lossu = L0 + A*P^{-alpha} + B*D^{-beta} + C*V^{-gamma}\n    where P = non-vocabulary parameters,\n          V = vocabulary size,\n          D = number of characters processed.\n    The params vector is:\n      [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    ensuring A, B, C, alpha, beta, gamma > 0 via exponentiation.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float).ravel()\n    # Unpack raw parameters\n    L0 = p[0]\n    A  = np.exp(p[1])\n    B  = np.exp(p[2])\n    C  = np.exp(p[3])\n    alpha = np.exp(p[4])\n    beta  = np.exp(p[5])\n    gamma = np.exp(p[6])\n\n    # Compute predicted Lossu\n    pred = (L0\n            + A * P_non_vocab**(-alpha)\n            + B * D**(-beta)\n            + C * V**(-gamma))\n    return pred\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter scaling law to data via L-BFGS-B:\n      params = [L0, logA, logB, logC, log_alpha, log_beta, log_gamma]\n    Returns the optimized params vector.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # Initial guess: median baseline, unit offsets for logs, moderate negative exponents\n    L0_init = np.median(y)\n    init_params = np.array([L0_init,    # L0\n                            0.0,        # logA\n                            0.0,        # logB\n                            0.0,        # logC\n                           -1.0,       # log_alpha\n                           -1.0,       # log_beta\n                           -1.0])      # log_gamma\n\n    # Bounds: allow any L0, free logs for A,B,C, restrict exponents to reasonable range\n    bounds = [\n        (None, None),     # L0\n        (None, None),     # logA\n        (None, None),     # logB\n        (None, None),     # logC\n        (-10.0, 10.0),    # log_alpha\n        (-10.0, 10.0),    # log_beta\n        (-10.0, 10.0)     # log_gamma\n    ]\n\n    def objective(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        objective,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        # fallback to initial guess if optimization fails\n        return init_params\n```\nKey features: Performs well on nmse (0.0690), Performs well on nmae (0.2724), Performs well on r2 (0.9310), Performs well on combined_score (0.9354)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6250)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter scaling law:\n      Lossu = L_inf\n            + A * P^{-alpha} * D^{-beta}\n            + B * V^{-gamma}\n\n    where\n      P = non-vocabulary parameters,\n      D = number of characters processed,\n      V = vocabulary size.\n\n    params = [L_inf,\n              logA,    # scale of P-D interaction term\n              log_alpha,\n              log_beta,\n              logB,    # scale of vocab term\n              log_gamma]\n    All A,B>0 via exp(log\u00b7), all exponents>0 via exp(log\u00b7).\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L_inf    = p[0]\n    A        = np.exp(p[1])\n    alpha    = np.exp(p[2])\n    beta     = np.exp(p[3])\n    B        = np.exp(p[4])\n    gamma    = np.exp(p[5])\n\n    # compute in log\u2010space for stability\n    logP = np.log(P_non_vocab)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    term1 = A * np.exp(-alpha * logP - beta * logD)\n    term2 = B * np.exp(-gamma * logV)\n\n    return L_inf + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law via L-BFGS-B.\n    Returns the optimized params array of length 6.\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.ravel(np.asarray(loss_values, dtype=float))\n\n    # initial guess\n    L_inf_init   = np.median(y)\n    init_params  = np.array([\n        L_inf_init,  # L_inf\n        0.0,         # logA\n        -1.0,        # log_alpha\n        -1.0,        # log_beta\n        0.0,         # logB\n        -1.0         # log_gamma\n    ], dtype=float)\n\n    # bounds: unbounded for L_inf, logA, logB; exponents restricted mildly\n    bounds = [\n        (None, None),    # L_inf\n        (None, None),    # logA\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (None, None),    # logB\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init_params\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n\n### Program D2 (Score: 0.5728)\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter interaction\u2013in\u2013log model:\n      Let L0 = log(P_non_vocab), L1 = log(vocab_size), L2 = log(num_characters).\n      Then\n        Lossu \u2248 b0\n             + b1\u00b7L0\n             + b2\u00b7L1\n             + b3\u00b7L2\n             + b4\u00b7(L0\u00b7L1)\n             + b5\u00b7(L0\u00b7L2)\n             + b6\u00b7(L1\u00b7L2)\n\n    params: array_like of length 7 [b0, b1, b2, b3, b4, b5, b6]\n    data_points: array of shape (N,3) or (3,) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # logs of positive features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # design matrix: [1, L0, L1, L2, L0*L1, L0*L2, L1*L2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction\u2013in\u2013log model by ridge-regularized\n    least squares. Returns fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute log-features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix Phi of shape (N,7)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    # ridge regularization for stability\n    # \u03bb is small to avoid over-penalizing; scaled by trace(Phi^T Phi)\n    lambda_reg = 1e-8 * np.trace(Phi.T.dot(Phi)) / 7.0\n\n    # solve (Phi^T Phi + \u03bbI) w = Phi^T y\n    A = Phi.T.dot(Phi)\n    A[np.diag_indices_from(A)] += lambda_reg\n    b = Phi.T.dot(y)\n\n    # solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\nKey features: Alternative approach to nmse, Alternative approach to nmae\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.5416, Type: Experimental)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"\nA robust 7-parameter interaction scaling law for LLM finetuning scenarios.\nWe retain the log-space main effects and pairwise interactions, but fit\nusing ridge-regularized iteratively reweighted least squares with Huber weights\nto improve robustness (reducing NMSE and NMAE) and stabilize coefficients.\n\nScaling law:\n  Lossu \u2248 b0\n         + bP * log(P_non_vocab)\n         + bD * log(num_characters)\n         + bV * log(vocab_size)\n         + bPD * [log(P_non_vocab) * log(num_characters)]\n         + bPV * [log(P_non_vocab) * log(vocab_size)]\n         + bDV * [log(num_characters) * log(vocab_size)]\n\nParams vector = [b0, bP, bD, bV, bPD, bPV, bDV]\n\nFunctions:\n  scaling_law_func(data_points, params) -> predicted Lossu\n  fit_scaling_law(data_points, loss_values) -> fitted params\n\"\"\"\nimport numpy as np\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu from data_points and params.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    params:      array of shape (7,) or (T,7)\n                 order: [b0, bP, bD, bV, bPD, bPV, bDV]\n    Returns:     predicted Lossu of shape (N,) if params is (7,)\n                 or (N,T) if params is (T,7)\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.asarray(params, dtype=float)\n    if p.ndim == 1:\n        p = p[None, :]  # shape (1,7)\n    if p.shape[1] != 7:\n        raise ValueError(f\"Expected params of length 7, got shape {p.shape}\")\n\n    # unpack parameters (each shape (T,))\n    b0, bP, bD, bV, bPD, bPV, bDV = [p[:, i] for i in range(7)]\n\n    # compute log-features\n    logP = np.log(P)[:, None]  # shape (N,1)\n    logD = np.log(D)[:, None]\n    logV = np.log(V)[:, None]\n\n    # weighted sum in log-space with pairwise interactions\n    # result shape (N,T)\n    pred = (\n        b0[None, :]\n        + bP[None, :] * logP\n        + bD[None, :] * logD\n        + bV[None, :] * logV\n        + bPD[None, :] * (logP * logD)\n        + bPV[None, :] * (logP * logV)\n        + bDV[None, :] * (logD * logV)\n    )\n\n    # if single parameter set, return (N,), else (N,T)\n    return pred[:, 0] if pred.shape[1] == 1 else pred\n\n\ndef fit_scaling_law(data_points, loss_values, max_iter=10, tol=1e-6, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7-parameter interaction model via ridge-regularized iteratively\n    reweighted least squares (IRLS) using Huber weights.\n\n    data_points: array of shape (N,3), columns [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) corresponding Lossu values\n\n    Returns: params array of shape (7,)\n             [b0, bP, bD, bV, bPD, bPV, bDV]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(f\"Expected data_points with 3 columns, got shape {X.shape}\")\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # extract and log-transform features\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    # design matrix: main effects + pairwise interactions\n    A = np.stack([\n        np.ones_like(logP),     # bias term\n        logP,                   # P effect\n        logD,                   # D effect\n        logV,                   # V effect\n        logP * logD,            # P-D interaction\n        logP * logV,            # P-V interaction\n        logD * logV             # D-V interaction\n    ], axis=1)  # shape (N,7)\n\n    # initial ridge-regularized OLS solution\n    ATA = A.T.dot(A) + ridge_lambda * np.eye(7)\n    ATy = A.T.dot(y)\n    coeffs = np.linalg.solve(ATA, ATy)\n\n    # iteratively reweighted least squares with Huber weights\n    for _ in range(max_iter):\n        resid = y - A.dot(coeffs)\n        # estimate robust scale (MAD-based)\n        mad = np.median(np.abs(resid)) * 1.4826 + 1e-8\n        # Huber threshold\n        delta = 1.345 * mad\n        abs_res = np.abs(resid)\n        # compute weights\n        w = np.where(abs_res <= delta, 1.0, delta / abs_res)\n\n        # weighted normal equations: (A^T W A + \u03bbI) coeffs = A^T W y\n        Aw = A * w[:, None]\n        ATA_w = A.T.dot(Aw) + ridge_lambda * np.eye(7)\n        ATy_w = A.T.dot(y * w)\n        coeffs_new = np.linalg.solve(ATA_w, ATy_w)\n\n        # check convergence\n        if np.max(np.abs(coeffs_new - coeffs)) < tol:\n            coeffs = coeffs_new\n            break\n        coeffs = coeffs_new\n\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END\n```\nUnique approach: Modification: Full rewrite, Alternative nmse approach, Alternative nmae approach\n\n\n### Inspiration 2 (Score: 0.6250, Type: Alternative)\n```python\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    6\u2010parameter scaling law:\n      Lossu = L_inf\n            + A * P^{-alpha} * D^{-beta}\n            + B * V^{-gamma}\n\n    where\n      P = non-vocabulary parameters,\n      D = number of characters processed,\n      V = vocabulary size.\n\n    params = [L_inf,\n              logA,    # scale of P-D interaction term\n              log_alpha,\n              log_beta,\n              logB,    # scale of vocab term\n              log_gamma]\n    All A,B>0 via exp(log\u00b7), all exponents>0 via exp(log\u00b7).\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    P_non_vocab = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n\n    p = np.ravel(params).astype(float)\n    L_inf    = p[0]\n    A        = np.exp(p[1])\n    alpha    = np.exp(p[2])\n    beta     = np.exp(p[3])\n    B        = np.exp(p[4])\n    gamma    = np.exp(p[5])\n\n    # compute in log\u2010space for stability\n    logP = np.log(P_non_vocab)\n    logD = np.log(D)\n    logV = np.log(V)\n\n    term1 = A * np.exp(-alpha * logP - beta * logD)\n    term2 = B * np.exp(-gamma * logV)\n\n    return L_inf + term1 + term2\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 6\u2010parameter scaling law via L-BFGS-B.\n    Returns the optimized params array of length 6.\n    \"\"\"\n\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    y = np.ravel(np.asarray(loss_values, dtype=float))\n\n    # initial guess\n    L_inf_init   = np.median(y)\n    init_params  = np.array([\n        L_inf_init,  # L_inf\n        0.0,         # logA\n        -1.0,        # log_alpha\n        -1.0,        # log_beta\n        0.0,         # logB\n        -1.0         # log_gamma\n    ], dtype=float)\n\n    # bounds: unbounded for L_inf, logA, logB; exponents restricted mildly\n    bounds = [\n        (None, None),    # L_inf\n        (None, None),    # logA\n        (-10.0, 10.0),   # log_alpha\n        (-10.0, 10.0),   # log_beta\n        (None, None),    # logB\n        (-10.0, 10.0)    # log_gamma\n    ]\n\n    def mse_obj(p):\n        pred = scaling_law_func(X, p)\n        return np.mean((pred - y) ** 2)\n\n    result = minimize(\n        mse_obj,\n        init_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'ftol': 1e-12, 'gtol': 1e-8}\n    )\n\n    if result.success:\n        return result.x\n    else:\n        return init_params\n```\nUnique approach: Modification: Full rewrite, Excellent nmse (0.952), Excellent nmae (0.988)\n\n\n\n# Current Program\n```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter interaction\u2013in\u2013log model:\n      Let L0 = log(P_non_vocab), L1 = log(vocab_size), L2 = log(num_characters).\n      Then\n        Lossu \u2248 b0\n             + b1\u00b7L0\n             + b2\u00b7L1\n             + b3\u00b7L2\n             + b4\u00b7(L0\u00b7L1)\n             + b5\u00b7(L0\u00b7L2)\n             + b6\u00b7(L1\u00b7L2)\n\n    params: array_like of length 7 [b0, b1, b2, b3, b4, b5, b6]\n    data_points: array of shape (N,3) or (3,) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    # logs of positive features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # design matrix: [1, L0, L1, L2, L0*L1, L0*L2, L1*L2]\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    return Phi.dot(np.asarray(params, dtype=float).ravel())\n\n\ndef fit_scaling_law(data_points, loss_values):\n    \"\"\"\n    Fit the 7-parameter interaction\u2013in\u2013log model by ridge-regularized\n    least squares. Returns fitted params array of length 7.\n    \"\"\"\n    X = np.asarray(data_points, dtype=float)\n    if X.ndim == 1:\n        X = X[None, :]\n    y = np.asarray(loss_values, dtype=float).ravel()\n\n    # compute log-features\n    L0 = np.log(X[:, 0])\n    L1 = np.log(X[:, 1])\n    L2 = np.log(X[:, 2])\n\n    # build design matrix Phi of shape (N,7)\n    N = X.shape[0]\n    Phi = np.empty((N, 7), dtype=float)\n    Phi[:, 0] = 1.0\n    Phi[:, 1] = L0\n    Phi[:, 2] = L1\n    Phi[:, 3] = L2\n    Phi[:, 4] = L0 * L1\n    Phi[:, 5] = L0 * L2\n    Phi[:, 6] = L1 * L2\n\n    # ridge regularization for stability\n    # \u03bb is small to avoid over-penalizing; scaled by trace(Phi^T Phi)\n    lambda_reg = 1e-8 * np.trace(Phi.T.dot(Phi)) / 7.0\n\n    # solve (Phi^T Phi + \u03bbI) w = Phi^T y\n    A = Phi.T.dot(Phi)\n    A[np.diag_indices_from(A)] += lambda_reg\n    b = Phi.T.dot(y)\n\n    # solve linear system\n    params = np.linalg.solve(A, b)\n    return params\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\nimport numpy as np\n\n# EVOLVE-BLOCK-START\ndef _build_design_matrix(data_points):\n    \"\"\"\n    Build the (N\u00d77) design matrix for the 7-parameter log-interaction model:\n      features = [1,\n                  log(P_non_vocab),\n                  log(num_characters),\n                  log(vocab_size),\n                  log(P_non_vocab)*log(num_characters),\n                  log(P_non_vocab)*log(vocab_size),\n                  log(num_characters)*log(vocab_size)]\n    \"\"\"\n    X = np.atleast_2d(np.asarray(data_points, dtype=float))\n    if X.shape[1] != 3:\n        raise ValueError(\n            \"Expected data_points with 3 columns \"\n            \"(P_non_vocab, vocab_size, num_characters)\"\n        )\n    P = X[:, 0]\n    V = X[:, 1]\n    D = X[:, 2]\n    if np.any(P <= 0) or np.any(V <= 0) or np.any(D <= 0):\n        raise ValueError(\"All input features must be positive to compute logarithms.\")\n    logP = np.log(P)\n    logD = np.log(D)\n    logV = np.log(V)\n    # Columns: 1, logP, logD, logV, logP*logD, logP*logV, logD*logV\n    Phi = np.column_stack([\n        np.ones_like(logP),\n        logP,\n        logD,\n        logV,\n        logP * logD,\n        logP * logV,\n        logD * logV\n    ])\n    return Phi\n\ndef scaling_law_func(data_points, params):\n    \"\"\"\n    Predict Lossu using a 7-parameter interaction model in log-space:\n      Lossu \u2248 b0\n           + b1\u00b7log(P_non_vocab)\n           + b2\u00b7log(num_characters)\n           + b3\u00b7log(vocab_size)\n           + b4\u00b7log(P_non_vocab)\u00b7log(num_characters)\n           + b5\u00b7log(P_non_vocab)\u00b7log(vocab_size)\n           + b6\u00b7log(num_characters)\u00b7log(vocab_size)\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    params:      array-like of length 7 [b0, b1, b2, b3, b4, b5, b6]\n    Returns:\n      preds: (N,) array of predicted Lossu\n    \"\"\"\n    p = np.asarray(params, dtype=float).ravel()\n    if p.size != 7:\n        raise ValueError(f\"Expected 7 parameters, got {p.size}\")\n    Phi = _build_design_matrix(data_points)\n    return Phi.dot(p)\n\ndef fit_scaling_law(data_points, loss_values,\n                    max_iter=50, tol=1e-8, ridge_lambda=1e-6):\n    \"\"\"\n    Fit the 7-parameter log-interaction model via\n    ridge-regularized iteratively reweighted least squares (IRLS)\n    with Huber weights.\n\n    data_points: array of shape (N,3) with columns\n                 [P_non_vocab, vocab_size, num_characters]\n    loss_values: array of shape (N,) of target Lossu values\n\n    Returns:\n      params: array of length 7 [b0, b1, ..., b6]\n    \"\"\"\n    # Build design and target\n    Phi = _build_design_matrix(data_points)\n    y = np.asarray(loss_values, dtype=float).ravel()\n    if Phi.shape[0] != y.shape[0]:\n        raise ValueError(\"Number of data points and loss values must match.\")\n\n    N, M = Phi.shape  # M should be 7\n    # Scale ridge regularization by average feature magnitude\n    lambda_reg = ridge_lambda * np.trace(Phi.T.dot(Phi)) / M\n\n    # Initial ridge-regularized least squares solution\n    A = Phi.T.dot(Phi) + lambda_reg * np.eye(M)\n    b = Phi.T.dot(y)\n    coeffs = np.linalg.solve(A, b)\n\n    # Iteratively reweighted least squares with Huber weights\n    for _ in range(max_iter):\n        resid = y - Phi.dot(coeffs)\n        # Robust scale estimate (MAD)\n        mad = np.median(np.abs(resid)) * 1.4826 + 1e-8\n        # Huber threshold\n        delta = 1.345 * mad\n        abs_res = np.abs(resid)\n        # Huber weights\n        w = np.where(abs_res <= delta, 1.0, delta / abs_res)\n\n        # Weighted normal equations\n        W = w[:, None]  # shape (N,1)\n        A_w = Phi.T.dot(Phi * W) + lambda_reg * np.eye(M)\n        b_w = Phi.T.dot(y * w)\n        coeffs_new = np.linalg.solve(A_w, b_w)\n\n        # Check for convergence\n        if np.max(np.abs(coeffs_new - coeffs)) < tol:\n            coeffs = coeffs_new\n            break\n        coeffs = coeffs_new\n\n    return coeffs.astype(float)\n# EVOLVE-BLOCK-END\n```\n\nExplanation of improvements:\n- Retains a simple 7-parameter model capturing main effects and pairwise log\u2013log interactions.\n- Uses ridge regularization (scaled by the data) to ensure numerical stability.\n- Employs iteratively reweighted least squares with Huber weights to reduce sensitivity to outliers, improving NMSE and NMAE.\n- Limits to 7 parameters and avoids input-dependent features for better generalization.\n"]}}}